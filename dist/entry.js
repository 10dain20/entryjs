var Entry = {block:{}, TEXT_ALIGN_CENTER:0, TEXT_ALIGN_LEFT:1, TEXT_ALIGN_RIGHT:2, TEXT_ALIGNS:["center", "left", "right"], clipboard:null, loadProject:function(a) {
  a || (a = Entry.getStartProject(Entry.mediaFilePath));
  "workspace" == this.type && Entry.stateManager.startIgnore();
  Entry.projectId = a._id;
  Entry.variableContainer.setVariables(a.variables);
  Entry.variableContainer.setMessages(a.messages);
  Entry.scene.addScenes(a.scenes);
  Entry.stage.initObjectContainers();
  Entry.variableContainer.setFunctions(a.functions);
  Entry.container.setObjects(a.objects);
  Entry.FPS = a.speed ? a.speed : 60;
  createjs.Ticker.setFPS(Entry.FPS);
  "workspace" == this.type && setTimeout(function() {
    Entry.stateManager.endIgnore();
  }, 500);
  Entry.engine.projectTimer || Entry.variableContainer.generateTimer();
  0 === Object.keys(Entry.container.inputValue).length && Entry.variableContainer.generateAnswer();
  Entry.start();
  Entry.Loader.isLoaded() && Entry.Loader.handleLoad();
  return a;
}, clearProject:function() {
  Entry.stop();
  Entry.projectId = null;
  Entry.variableContainer.clear();
  Entry.container.clear();
  Entry.scene.clear();
}, exportProject:function(a) {
  a || (a = {});
  Entry.engine.isState("stop") || Entry.engine.toggleStop();
  Entry.Func && Entry.Func.workspace && Entry.Func.workspace.visible && Entry.Func.cancelEdit();
  a.objects = Entry.container.toJSON();
  a.scenes = Entry.scene.toJSON();
  a.variables = Entry.variableContainer.getVariableJSON();
  a.messages = Entry.variableContainer.getMessageJSON();
  a.functions = Entry.variableContainer.getFunctionJSON();
  a.scenes = Entry.scene.toJSON();
  a.speed = Entry.FPS;
  return a;
}, setBlockByText:function(a, b) {
  a = [];
  b = jQuery.parseXML(b).getElementsByTagName("category");
  for (var c = 0;c < b.length;c++) {
    for (var d = b[c], e = {category:d.getAttribute("id"), blocks:[]}, d = d.childNodes, f = 0;f < d.length;f++) {
      var g = d[f];
      !g.tagName || "BLOCK" != g.tagName.toUpperCase() && "BTN" != g.tagName.toUpperCase() || e.blocks.push(g.getAttribute("type"));
    }
    a.push(e);
  }
  Entry.playground.setBlockMenu(a);
}, setBlock:function(a, b) {
  Entry.playground.setMenuBlock(a, b);
}, enableArduino:function() {
}, initSound:function(a) {
  a.path = a.fileurl ? a.fileurl : Entry.defaultPath + "/uploads/" + a.filename.substring(0, 2) + "/" + a.filename.substring(2, 4) + "/" + a.filename + a.ext;
  Entry.soundQueue.loadFile({id:a.id, src:a.path, type:createjs.LoadQueue.SOUND});
}, beforeUnload:function(a) {
  Entry.hw.closeConnection();
  Entry.variableContainer.updateCloudVariables();
  if ("workspace" == Entry.type && (localStorage && Entry.interfaceState && localStorage.setItem("workspace-interface", JSON.stringify(Entry.interfaceState)), !Entry.stateManager.isSaved())) {
    return Lang.Workspace.project_changed;
  }
}, loadInterfaceState:function() {
  if ("workspace" == Entry.type) {
    if (localStorage && localStorage.getItem("workspace-interface")) {
      var a = localStorage.getItem("workspace-interface");
      this.resizeElement(JSON.parse(a));
    } else {
      this.resizeElement({menuWidth:280, canvasWidth:480});
    }
  }
}, resizeElement:function(a) {
  if ("workspace" == Entry.type) {
    var b = this.interfaceState;
    !a.canvasWidth && b.canvasWidth && (a.canvasWidth = b.canvasWidth);
    !a.menuWidth && this.interfaceState.menuWidth && (a.menuWidth = b.menuWidth);
    Entry.engine.speedPanelOn && Entry.engine.toggleSpeedPanel();
    (b = a.canvasWidth) ? 325 > b ? b = 325 : 720 < b && (b = 720) : b = 400;
    a.canvasWidth = b;
    var c = 9 * b / 16;
    Entry.engine.view_.style.width = b + "px";
    Entry.engine.view_.style.height = c + "px";
    Entry.engine.view_.style.top = "40px";
    Entry.stage.canvas.canvas.style.width = b + "px";
    400 <= b ? Entry.engine.view_.removeClass("collapsed") : Entry.engine.view_.addClass("collapsed");
    Entry.playground.view_.style.left = b + .5 + "px";
    Entry.propertyPanel.resize(b);
    var d = Entry.engine.view_.getElementsByClassName("entryAddButtonWorkspace_w")[0];
    d && (Entry.objectAddable ? (d.style.top = c + 24 + "px", d.style.width = .7 * b + "px") : d.style.display = "none");
    if (d = Entry.engine.view_.getElementsByClassName("entryRunButtonWorkspace_w")[0]) {
      Entry.objectAddable ? (d.style.top = c + 24 + "px", d.style.left = .7 * b + "px", d.style.width = .3 * b + "px") : (d.style.left = "2px", d.style.top = c + 24 + "px", d.style.width = b - 4 + "px");
    }
    if (d = Entry.engine.view_.getElementsByClassName("entryStopButtonWorkspace_w")[0]) {
      Entry.objectAddable ? (d.style.top = c + 24 + "px", d.style.left = .7 * b + "px", d.style.width = .3 * b + "px") : (d.style.left = "2px", d.style.top = c + 24 + "px", d.style.width = b + "px");
    }
    (b = a.menuWidth) ? 244 > b ? b = 244 : 400 < b && (b = 400) : b = 264;
    a.menuWidth = b;
    $(".blockMenuContainer").css({width:b - 64 + "px"});
    $(".blockMenuContainer>svg").css({width:b - 64 + "px"});
    Entry.playground.mainWorkspace.blockMenu.setWidth();
    $(".entryWorkspaceBoard").css({left:b + "px"});
    Entry.playground.resizeHandle_.style.left = b + "px";
    Entry.playground.variableViewWrapper_.style.width = b + "px";
    this.interfaceState = a;
  }
  Entry.windowResized.notify();
}, getUpTime:function() {
  return (new Date).getTime() - this.startTime;
}, addActivity:function(a) {
  Entry.stateManager && Entry.stateManager.addActivity(a);
}, startActivityLogging:function() {
  Entry.reporter && Entry.reporter.start(Entry.projectId, window.user ? window.user._id : null, Entry.startTime);
}, getActivityLog:function() {
  var a = {};
  Entry.stateManager && (a.activityLog = Entry.stateManager.activityLog_);
  return a;
}, DRAG_MODE_NONE:0, DRAG_MODE_MOUSEDOWN:1, DRAG_MODE_DRAG:2, cancelObjectEdit:function(a) {
  var b = Entry.playground.object;
  if (b) {
    var c = a.target, d = 0 !== $(b.view_).find(c).length, c = c.tagName.toUpperCase();
    a = a.type;
    !b.isEditing || "INPUT" === c && d || "touchstart" === a || b.editObjectValues(!1);
  }
}, generateFunctionSchema:function(a) {
  a = "func_" + a;
  if (!Entry.block[a]) {
    var b = function() {
    };
    b.prototype = Entry.block.function_general;
    b = new b;
    b.changeEvent = new Entry.Event;
    b.template = Lang.template.function_general;
    Entry.block[a] = b;
  }
}, getMainWS:function() {
  var a;
  Entry.mainWorkspace ? a = Entry.mainWorkspace : Entry.playground && Entry.playground.mainWorkspace && (a = Entry.playground.mainWorkspace);
  return a;
}, getDom:function(a) {
  if (!a) {
    return this.view_;
  }
  if (1 < a.length) {
    return this[a.shift()].getDom(a);
  }
}};
window.Entry = Entry;
Entry.Albert = {PORT_MAP:{leftWheel:0, rightWheel:0, buzzer:0, leftEye:0, rightEye:0, note:0, bodyLed:0, frontLed:0, padWidth:0, padHeight:0}, setZero:function() {
  var a = Entry.Albert.PORT_MAP, b = Entry.hw.sendQueue, c;
  for (c in a) {
    b[c] = a[c];
  }
  Entry.hw.update();
  a = Entry.Albert;
  a.tempo = 60;
  a.removeAllTimeouts();
}, monitorTemplate:{imgPath:"hw/albert.png", width:387, height:503, listPorts:{temperature:{name:Lang.Blocks.ALBERT_sensor_temperature, type:"input", pos:{x:0, y:0}}, accelerationX:{name:Lang.Blocks.ALBERT_sensor_acceleration_x, type:"input", pos:{x:0, y:0}}, accelerationY:{name:Lang.Blocks.ALBERT_sensor_acceleration_y, type:"input", pos:{x:0, y:0}}, accelerationZ:{name:Lang.Blocks.ALBERT_sensor_acceleration_z, type:"input", pos:{x:0, y:0}}, frontOid:{name:Lang.Blocks.ALBERT_sensor_front_oid, type:"input", 
pos:{x:0, y:0}}, backOid:{name:Lang.Blocks.ALBERT_sensor_back_oid, type:"input", pos:{x:0, y:0}}, positionX:{name:Lang.Blocks.ALBERT_sensor_position_x, type:"input", pos:{x:0, y:0}}, positionY:{name:Lang.Blocks.ALBERT_sensor_position_y, type:"input", pos:{x:0, y:0}}, orientation:{name:Lang.Blocks.ALBERT_sensor_orientation, type:"input", pos:{x:0, y:0}}, buzzer:{name:Lang.Hw.buzzer, type:"output", pos:{x:0, y:0}}, note:{name:Lang.Hw.note, type:"output", pos:{x:0, y:0}}}, ports:{leftProximity:{name:Lang.Blocks.ALBERT_sensor_left_proximity, 
type:"input", pos:{x:178, y:401}}, rightProximity:{name:Lang.Blocks.ALBERT_sensor_right_proximity, type:"input", pos:{x:66, y:359}}, battery:{name:Lang.Blocks.ALBERT_sensor_battery, type:"input", pos:{x:88, y:368}}, light:{name:Lang.Blocks.ALBERT_sensor_light, type:"input", pos:{x:127, y:391}}, leftWheel:{name:Lang.Hw.leftWheel, type:"output", pos:{x:299, y:406}}, rightWheel:{name:Lang.Hw.rightWheel, type:"output", pos:{x:22, y:325}}, leftEye:{name:Lang.Hw.leftEye, type:"output", pos:{x:260, y:26}}, 
rightEye:{name:Lang.Hw.rightEye, type:"output", pos:{x:164, y:13}}, bodyLed:{name:Lang.Hw.body + " " + Lang.Hw.led_en, type:"output", pos:{x:367, y:308}}, frontLed:{name:Lang.Hw.front + " " + Lang.Hw.led_en, pos:{x:117, y:410}}}, mode:"both"}, tempo:60, timeouts:[], removeTimeout:function(a) {
  clearTimeout(a);
  var b = this.timeouts;
  a = b.indexOf(a);
  0 <= a && b.splice(a, 1);
}, removeAllTimeouts:function() {
  var a = this.timeouts, b;
  for (b in a) {
    clearTimeout(a[b]);
  }
  this.timeouts = [];
}, controller:{PI:3.14159265, PI2:6.2831853, prevDirection:0, prevDirectionFine:0, directionFineCount:0, positionCount:0, finalPositionCount:0, GAIN_ANGLE:30, GAIN_ANGLE_FINE:30, GAIN_POSITION_FINE:30, STRAIGHT_SPEED:20, MAX_BASE_SPEED:20, GAIN_BASE_SPEED:1, GAIN_POSITION:35, POSITION_TOLERANCE_FINE:3, POSITION_TOLERANCE_FINE_LARGE:5, POSITION_TOLERANCE_ROUGH:5, POSITION_TOLERANCE_ROUGH_LARGE:10, ORIENTATION_TOLERANCE_FINE:.08, ORIENTATION_TOLERANCE_ROUGH:.09, ORIENTATION_TOLERANCE_ROUGH_LARGE:.18, 
MINIMUM_WHEEL_SPEED:18, MINIMUM_WHEEL_SPEED_FINE:15, clear:function() {
  this.finalPositionCount = this.positionCount = this.directionFineCount = this.prevDirectionFine = this.prevDirection = 0;
}, controlAngleFine:function(a, b) {
  var c = Entry.hw.sendQueue;
  a = this.validateRadian(b - a);
  b = Math.abs(a);
  if (b < this.ORIENTATION_TOLERANCE_FINE) {
    return !1;
  }
  var d = 0 < a ? 1 : -1;
  if (0 > d * this.prevDirectionFine && 5 < ++this.directionFineCount) {
    return !1;
  }
  this.prevDirectionFine = d;
  0 < a ? (a = Math.log(1 + b) * this.GAIN_ANGLE_FINE, a < this.MINIMUM_WHEEL_SPEED && (a = this.MINIMUM_WHEEL_SPEED)) : (a = -Math.log(1 + b) * this.GAIN_ANGLE_FINE, a > -this.MINIMUM_WHEEL_SPEED && (a = -this.MINIMUM_WHEEL_SPEED));
  a = parseInt(a);
  c.leftWheel = -a;
  c.rightWheel = a;
  return !0;
}, controlAngle:function(a, b) {
  var c = Entry.hw.sendQueue;
  a = this.validateRadian(b - a);
  b = Math.abs(a);
  if (b < this.ORIENTATION_TOLERANCE_ROUGH) {
    return !1;
  }
  var d = 0 < a ? 1 : -1;
  if (b < this.ORIENTATION_TOLERANCE_ROUGH_LARGE && 0 > d * this.prevDirection) {
    return !1;
  }
  this.prevDirection = d;
  0 < a ? (a = Math.log(1 + b) * this.GAIN_ANGLE, a < this.MINIMUM_WHEEL_SPEED && (a = this.MINIMUM_WHEEL_SPEED)) : (a = -Math.log(1 + b) * this.GAIN_ANGLE, a > -this.MINIMUM_WHEEL_SPEED && (a = -this.MINIMUM_WHEEL_SPEED));
  a = parseInt(a);
  c.leftWheel = -a;
  c.rightWheel = a;
  return !0;
}, controlPositionFine:function(a, b, c, d, e) {
  var f = Entry.hw.sendQueue;
  c = this.validateRadian(Math.atan2(e - b, d - a) - c);
  var g = Math.abs(c);
  a = d - a;
  b = e - b;
  b = Math.sqrt(a * a + b * b);
  if (b < this.POSITION_TOLERANCE_FINE) {
    return !1;
  }
  if (b < this.POSITION_TOLERANCE_FINE_LARGE && 5 < ++this.finalPositionCount) {
    return this.finalPositionCount = 0, !1;
  }
  c = 0 < c ? Math.log(1 + g) * this.GAIN_POSITION_FINE : -Math.log(1 + g) * this.GAIN_POSITION_FINE;
  c = parseInt(c);
  f.leftWheel = this.MINIMUM_WHEEL_SPEED_FINE - c;
  f.rightWheel = this.MINIMUM_WHEEL_SPEED_FINE + c;
  return !0;
}, controlPosition:function(a, b, c, d, e) {
  var f = Entry.hw.sendQueue;
  c = this.validateRadian(Math.atan2(e - b, d - a) - c);
  var g = Math.abs(c);
  a = d - a;
  b = e - b;
  b = Math.sqrt(a * a + b * b);
  if (b < this.POSITION_TOLERANCE_ROUGH) {
    return !1;
  }
  if (b < this.POSITION_TOLERANCE_ROUGH_LARGE) {
    if (10 < ++this.positionCount) {
      return this.positionCount = 0, !1;
    }
  } else {
    this.positionCount = 0;
  }
  .01 > g ? (f.leftWheel = this.STRAIGHT_SPEED, f.rightWheel = this.STRAIGHT_SPEED) : (b = (this.MINIMUM_WHEEL_SPEED + .5 / g) * this.GAIN_BASE_SPEED, b > this.MAX_BASE_SPEED && (b = this.MAX_BASE_SPEED), c = 0 < c ? Math.log(1 + g) * this.GAIN_POSITION : -Math.log(1 + g) * this.GAIN_POSITION, b = parseInt(b), c = parseInt(c), f.leftWheel = b - c, f.rightWheel = b + c);
  return !0;
}, validateRadian:function(a) {
  return a > this.PI ? a - this.PI2 : a < -this.PI ? a + this.PI2 : a;
}, toRadian:function(a) {
  return 3.14159265 * a / 180;
}}, name:"albert"};
Blockly.Blocks.albert_hand_found = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_hand_found);
  this.setOutput(!0, "Boolean");
  this.setInputsInline(!0);
}};
Entry.block.albert_hand_found = function(a, b) {
  a = Entry.hw.portData;
  return 40 < a.leftProximity || 40 < a.rightProximity;
};
Blockly.Blocks.albert_is_oid_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_is_oid_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_front_oid, "FRONT"], [Lang.Blocks.ALBERT_back_oid, "BACK"]]), "OID").appendField(Lang.Blocks.ALBERT_is_oid_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_is_oid_3);
  this.setOutput(!0, "Boolean");
  this.setInputsInline(!0);
}};
Entry.block.albert_is_oid_value = function(a, b) {
  a = Entry.hw.portData;
  var c = b.getField("OID", b);
  b = b.getNumberValue("VALUE");
  return "FRONT" == c ? a.frontOid == b : a.backOid == b;
};
Blockly.Blocks.albert_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_sensor_left_proximity, "leftProximity"], [Lang.Blocks.ALBERT_sensor_right_proximity, "rightProximity"], [Lang.Blocks.ALBERT_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.ALBERT_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.ALBERT_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.ALBERT_sensor_front_oid, "frontOid"], [Lang.Blocks.ALBERT_sensor_back_oid, "backOid"], [Lang.Blocks.ALBERT_sensor_position_x, 
  "positionX"], [Lang.Blocks.ALBERT_sensor_position_y, "positionY"], [Lang.Blocks.ALBERT_sensor_orientation, "orientation"], [Lang.Blocks.ALBERT_sensor_light, "light"], [Lang.Blocks.ALBERT_sensor_temperature, "temperature"], [Lang.Blocks.ALBERT_sensor_battery, "battery"], [Lang.Blocks.ALBERT_sensor_signal_strength, "signalStrength"]]), "DEVICE");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.albert_value = function(a, b) {
  a = Entry.hw.portData;
  b = b.getField("DEVICE");
  return a[b];
};
Blockly.Blocks.albert_move_forward_for_secs = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_move_forward_for_secs_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_move_forward_for_secs_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_move_forward_for_secs = function(a, b) {
  a = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    a.leftWheel = 0;
    a.rightWheel = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.timeFlag = 1;
  a.leftWheel = 30;
  a.rightWheel = 30;
  a = 1E3 * b.getNumberValue("VALUE");
  var c = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Albert.removeTimeout(c);
  }, a);
  Entry.Albert.timeouts.push(c);
  return b;
};
Blockly.Blocks.albert_move_backward_for_secs = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_move_backward_for_secs_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_move_backward_for_secs_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_move_backward_for_secs = function(a, b) {
  a = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    a.leftWheel = 0;
    a.rightWheel = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.timeFlag = 1;
  a.leftWheel = -30;
  a.rightWheel = -30;
  a = 1E3 * b.getNumberValue("VALUE");
  var c = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Albert.removeTimeout(c);
  }, a);
  Entry.Albert.timeouts.push(c);
  return b;
};
Blockly.Blocks.albert_turn_for_secs = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_turn_for_secs_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_turn_left, "LEFT"], [Lang.Blocks.ALBERT_turn_right, "RIGHT"]]), "DIRECTION").appendField(Lang.Blocks.ALBERT_turn_for_secs_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_turn_for_secs_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_turn_for_secs = function(a, b) {
  a = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    a.leftWheel = 0;
    a.rightWheel = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.timeFlag = 1;
  "LEFT" == b.getField("DIRECTION", b) ? (a.leftWheel = -30, a.rightWheel = 30) : (a.leftWheel = 30, a.rightWheel = -30);
  a = 1E3 * b.getNumberValue("VALUE");
  var c = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Albert.removeTimeout(c);
  }, a);
  Entry.Albert.timeouts.push(c);
  return b;
};
Blockly.Blocks.albert_change_both_wheels_by = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_both_wheels_by_1);
  this.appendValueInput("LEFT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_both_wheels_by_2);
  this.appendValueInput("RIGHT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_both_wheels_by_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_change_both_wheels_by = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getNumberValue("LEFT"), d = b.getNumberValue("RIGHT");
  a.leftWheel = void 0 != a.leftWheel ? a.leftWheel + c : c;
  a.rightWheel = void 0 != a.rightWheel ? a.rightWheel + d : d;
  return b.callReturn();
};
Blockly.Blocks.albert_set_both_wheels_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_both_wheels_to_1);
  this.appendValueInput("LEFT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_both_wheels_to_2);
  this.appendValueInput("RIGHT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_both_wheels_to_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_set_both_wheels_to = function(a, b) {
  a = Entry.hw.sendQueue;
  a.leftWheel = b.getNumberValue("LEFT");
  a.rightWheel = b.getNumberValue("RIGHT");
  return b.callReturn();
};
Blockly.Blocks.albert_change_wheel_by = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_wheel_by_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_left_wheel, "LEFT"], [Lang.Blocks.ALBERT_right_wheel, "RIGHT"], [Lang.Blocks.ALBERT_both_wheels, "BOTH"]]), "DIRECTION").appendField(Lang.Blocks.ALBERT_change_wheel_by_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_wheel_by_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_change_wheel_by = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getField("DIRECTION"), d = b.getNumberValue("VALUE");
  "LEFT" == c ? a.leftWheel = void 0 != a.leftWheel ? a.leftWheel + d : d : ("RIGHT" != c && (a.leftWheel = void 0 != a.leftWheel ? a.leftWheel + d : d), a.rightWheel = void 0 != a.rightWheel ? a.rightWheel + d : d);
  return b.callReturn();
};
Blockly.Blocks.albert_set_wheel_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_wheel_to_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_left_wheel, "LEFT"], [Lang.Blocks.ALBERT_right_wheel, "RIGHT"], [Lang.Blocks.ALBERT_both_wheels, "BOTH"]]), "DIRECTION").appendField(Lang.Blocks.ALBERT_set_wheel_to_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_wheel_to_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_set_wheel_to = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getField("DIRECTION"), d = b.getNumberValue("VALUE");
  "LEFT" == c ? a.leftWheel = d : ("RIGHT" != c && (a.leftWheel = d), a.rightWheel = d);
  return b.callReturn();
};
Blockly.Blocks.albert_stop = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_stop).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_stop = function(a, b) {
  a = Entry.hw.sendQueue;
  a.leftWheel = 0;
  a.rightWheel = 0;
  return b.callReturn();
};
Blockly.Blocks.albert_set_pad_size_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_board_size_to_1);
  this.appendValueInput("WIDTH").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_board_size_to_2);
  this.appendValueInput("HEIGHT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_board_size_to_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_set_pad_size_to = function(a, b) {
  a = Entry.hw.sendQueue;
  a.padWidth = b.getNumberValue("WIDTH");
  a.padHeight = b.getNumberValue("HEIGHT");
  return b.callReturn();
};
Blockly.Blocks.albert_move_to_x_y_on_board = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_move_to_x_y_1);
  this.appendValueInput("X").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_move_to_x_y_2);
  this.appendValueInput("Y").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_move_to_x_y_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_move_to_x_y_on_board = function(a, b) {
  var c = Entry.hw.sendQueue, d = Entry.hw.portData;
  a = Entry.Albert.controller;
  if (b.isStart) {
    if (b.isMoving) {
      0 <= d.positionX && (b.x = d.positionX);
      0 <= d.positionY && (b.y = d.positionY);
      b.theta = d.orientation;
      switch(b.boardState) {
        case 1:
          if (0 == b.initialized) {
            if (0 > b.x || 0 > b.y) {
              c.leftWheel = 20;
              c.rightWheel = -20;
              break;
            }
            b.initialized = !0;
          }
          c = a.toRadian(b.theta);
          0 == a.controlAngle(c, Math.atan2(b.targetY - b.y, b.targetX - b.x)) && (b.boardState = 2);
          break;
        case 2:
          0 == a.controlPosition(b.x, b.y, a.toRadian(b.theta), b.targetX, b.targetY) && (b.boardState = 3);
          break;
        case 3:
          0 == a.controlPositionFine(b.x, b.y, a.toRadian(b.theta), b.targetX, b.targetY) && (c.leftWheel = 0, c.rightWheel = 0, b.isMoving = !1);
      }
      return b;
    }
    delete b.isStart;
    delete b.isMoving;
    delete b.initialized;
    delete b.boardState;
    delete b.x;
    delete b.y;
    delete b.theta;
    delete b.targetX;
    delete b.targetY;
    Entry.engine.isContinue = !1;
    c.leftWheel = 0;
    c.rightWheel = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.isMoving = !0;
  b.initialized = !1;
  b.boardState = 1;
  b.x = -1;
  b.y = -1;
  b.theta = -200;
  b.targetX = b.getNumberValue("X");
  b.targetY = b.getNumberValue("Y");
  a.clear();
  c.leftWheel = 0;
  c.rightWheel = 0;
  return b;
};
Blockly.Blocks.albert_set_orientation_on_board = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_orientation_to_1);
  this.appendValueInput("ORIENTATION").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_orientation_to_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_set_orientation_on_board = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = Entry.hw.portData, d = Entry.Albert.controller;
  if (b.isStart) {
    if (b.isMoving) {
      b.theta = c.orientation;
      switch(b.boardState) {
        case 1:
          var c = d.toRadian(b.theta), e = d.toRadian(b.targetTheta);
          0 == d.controlAngle(c, e) && (b.boardState = 2);
          break;
        case 2:
          c = d.toRadian(b.theta), e = d.toRadian(b.targetTheta), 0 == d.controlAngleFine(c, e) && (a.leftWheel = 0, a.rightWheel = 0, b.isMoving = !1);
      }
      return b;
    }
    delete b.isStart;
    delete b.isMoving;
    delete b.boardState;
    delete b.theta;
    delete b.targetTheta;
    Entry.engine.isContinue = !1;
    a.leftWheel = 0;
    a.rightWheel = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.isMoving = !0;
  b.boardState = 1;
  b.theta = -200;
  b.targetTheta = b.getNumberValue("ORIENTATION");
  d.clear();
  a.leftWheel = 0;
  a.rightWheel = 0;
  return b;
};
Blockly.Blocks.albert_set_eye_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_eye_to_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_left_eye, "LEFT"], [Lang.Blocks.ALBERT_right_eye, "RIGHT"], [Lang.Blocks.ALBERT_both_eyes, "BOTH"]]), "DIRECTION").appendField(Lang.Blocks.ALBERT_set_eye_to_2).appendField(new Blockly.FieldDropdown([[Lang.General.red, "4"], [Lang.General.yellow, "6"], [Lang.General.green, "2"], [Lang.Blocks.ALBERT_color_cyan, "3"], [Lang.General.blue, "1"], [Lang.Blocks.ALBERT_color_magenta, 
  "5"], [Lang.Blocks.ALBERT_color_white, "7"]]), "COLOR").appendField(Lang.Blocks.ALBERT_set_eye_to_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_set_eye_to = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getField("DIRECTION", b), d = Number(b.getField("COLOR", b));
  "LEFT" == c ? a.leftEye = d : ("RIGHT" != c && (a.leftEye = d), a.rightEye = d);
  return b.callReturn();
};
Blockly.Blocks.albert_clear_eye = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_clear_eye_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_left_eye, "LEFT"], [Lang.Blocks.ALBERT_right_eye, "RIGHT"], [Lang.Blocks.ALBERT_both_eyes, "BOTH"]]), "DIRECTION").appendField(Lang.Blocks.ALBERT_clear_eye_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_clear_eye = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getField("DIRECTION", b);
  "LEFT" == c ? a.leftEye = 0 : ("RIGHT" != c && (a.leftEye = 0), a.rightEye = 0);
  return b.callReturn();
};
Blockly.Blocks.albert_body_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_turn_body_led_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_turn_on, "ON"], [Lang.Blocks.ALBERT_turn_off, "OFF"]]), "STATE").appendField(Lang.Blocks.ALBERT_turn_body_led_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_body_led = function(a, b) {
  a = Entry.hw.sendQueue;
  "ON" == b.getField("STATE", b) ? a.bodyLed = 1 : a.bodyLed = 0;
  return b.callReturn();
};
Blockly.Blocks.albert_front_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_turn_front_led_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.ALBERT_turn_on, "ON"], [Lang.Blocks.ALBERT_turn_off, "OFF"]]), "STATE").appendField(Lang.Blocks.ALBERT_turn_front_led_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_front_led = function(a, b) {
  a = Entry.hw.sendQueue;
  "ON" == b.getField("STATE", b) ? a.frontLed = 1 : a.frontLed = 0;
  return b.callReturn();
};
Blockly.Blocks.albert_beep = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_beep).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_beep = function(a, b) {
  a = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    a.buzzer = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.timeFlag = 1;
  a.buzzer = 440;
  a.note = 0;
  var c = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Albert.removeTimeout(c);
  }, 200);
  Entry.Albert.timeouts.push(c);
  return b;
};
Blockly.Blocks.albert_change_buzzer_by = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_buzzer_by_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_buzzer_by_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_change_buzzer_by = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getNumberValue("VALUE");
  a.buzzer = void 0 != a.buzzer ? a.buzzer + c : c;
  a.note = 0;
  return b.callReturn();
};
Blockly.Blocks.albert_set_buzzer_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_buzzer_to_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_buzzer_to_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_set_buzzer_to = function(a, b) {
  a = Entry.hw.sendQueue;
  a.buzzer = b.getNumberValue("VALUE");
  a.note = 0;
  return b.callReturn();
};
Blockly.Blocks.albert_clear_buzzer = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_clear_buzzer).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_clear_buzzer = function(a, b) {
  a = Entry.hw.sendQueue;
  a.buzzer = 0;
  a.note = 0;
  return b.callReturn();
};
Blockly.Blocks.albert_play_note_for = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_play_note_for_1).appendField(new Blockly.FieldDropdown([[Lang.General.note_c + "", "4"], [Lang.General.note_c + "#", "5"], [Lang.General.note_d + "", "6"], [Lang.General.note_e + "b", "7"], [Lang.General.note_e + "", "8"], [Lang.General.note_f + "", "9"], [Lang.General.note_f + "#", "10"], [Lang.General.note_g + "", "11"], [Lang.General.note_g + "#", "12"], [Lang.General.note_a + "", "13"], [Lang.General.note_b + "b", "14"], [Lang.General.note_b + 
  "", "15"]]), "NOTE").appendField(Lang.Blocks.ALBERT_play_note_for_2).appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]]), "OCTAVE").appendField(Lang.Blocks.ALBERT_play_note_for_3);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_play_note_for_4).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_play_note_for = function(a, b) {
  var c = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    c.note = 0;
    return b.callReturn();
  }
  a = b.getNumberField("NOTE", b);
  var d = b.getNumberField("OCTAVE", b), e = 6E4 * b.getNumberValue("VALUE", b) / Entry.Albert.tempo;
  b.isStart = !0;
  b.timeFlag = 1;
  c.buzzer = 0;
  c.note = a + 12 * (d - 1);
  if (100 < e) {
    var f = setTimeout(function() {
      c.note = 0;
      Entry.Albert.removeTimeout(f);
    }, e - 100);
    Entry.Albert.timeouts.push(f);
  }
  var g = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Albert.removeTimeout(g);
  }, e);
  Entry.Albert.timeouts.push(g);
  return b;
};
Blockly.Blocks.albert_rest_for = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_rest_for_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_rest_for_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_rest_for = function(a, b) {
  a = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    return b.callReturn();
  }
  b.isStart = !0;
  b.timeFlag = 1;
  var c = b.getNumberValue("VALUE"), c = 6E4 * c / Entry.Albert.tempo;
  a.buzzer = 0;
  a.note = 0;
  var d = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Albert.removeTimeout(d);
  }, c);
  Entry.Albert.timeouts.push(d);
  return b;
};
Blockly.Blocks.albert_change_tempo_by = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_tempo_by_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_change_tempo_by_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_change_tempo_by = function(a, b) {
  Entry.Albert.tempo += b.getNumberValue("VALUE");
  1 > Entry.Albert.tempo && (Entry.Albert.tempo = 1);
  return b.callReturn();
};
Blockly.Blocks.albert_set_tempo_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_tempo_to_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ALBERT_set_tempo_to_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.albert_set_tempo_to = function(a, b) {
  Entry.Albert.tempo = b.getNumberValue("VALUE");
  1 > Entry.Albert.tempo && (Entry.Albert.tempo = 1);
  return b.callReturn();
};
Entry.Arduino = {name:"arduino", setZero:function() {
  Entry.hw.sendQueue.readablePorts = [];
  for (var a = 0;20 > a;a++) {
    Entry.hw.sendQueue[a] = 0, Entry.hw.sendQueue.readablePorts.push(a);
  }
  Entry.hw.update();
}, monitorTemplate:{imgPath:"hw/arduino.png", width:605, height:434, listPorts:{2:{name:Lang.Hw.port_en + " 2 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 3:{name:Lang.Hw.port_en + " 3 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 4:{name:Lang.Hw.port_en + " 4 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 5:{name:Lang.Hw.port_en + " 5 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 6:{name:Lang.Hw.port_en + " 6 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 7:{name:Lang.Hw.port_en + 
" 7 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 8:{name:Lang.Hw.port_en + " 8 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 9:{name:Lang.Hw.port_en + " 9 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 10:{name:Lang.Hw.port_en + " 10 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 11:{name:Lang.Hw.port_en + " 11 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 12:{name:Lang.Hw.port_en + " 12 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 13:{name:Lang.Hw.port_en + " 13 " + 
Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a0:{name:Lang.Hw.port_en + " A0 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a1:{name:Lang.Hw.port_en + " A1 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a2:{name:Lang.Hw.port_en + " A2 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a3:{name:Lang.Hw.port_en + " A3 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a4:{name:Lang.Hw.port_en + " A4 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a5:{name:Lang.Hw.port_en + " A5 " + 
Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}}, mode:"both"}};
Entry.ArduinoExt = {name:"ArduinoExt", setZero:function() {
  Entry.hw.sendQueue.SET ? Object.keys(Entry.hw.sendQueue.SET).forEach(function(a) {
    Entry.hw.sendQueue.SET[a].data = 0;
    Entry.hw.sendQueue.SET[a].time = (new Date).getTime();
  }) : Entry.hw.sendQueue = {GET:{}, SET:{}};
  Entry.hw.update();
}, sensorTypes:{ALIVE:0, DIGITAL:1, ANALOG:2, PWM:3, SERVO_PIN:4, TONE:5, PULSEIN:6, ULTRASONIC:7, TIMER:8}, toneTable:{0:0, C:1, CS:2, D:3, DS:4, E:5, F:6, FS:7, G:8, GS:9, A:10, AS:11, B:12}, toneMap:{1:[33, 65, 131, 262, 523, 1046, 2093, 4186], 2:[35, 69, 139, 277, 554, 1109, 2217, 4435], 3:[37, 73, 147, 294, 587, 1175, 2349, 4699], 4:[39, 78, 156, 311, 622, 1245, 2849, 4978], 5:[41, 82, 165, 330, 659, 1319, 2637, 5274], 6:[44, 87, 175, 349, 698, 1397, 2794, 5588], 7:[46, 92, 185, 370, 740, 1480, 
2960, 5920], 8:[49, 98, 196, 392, 784, 1568, 3136, 6272], 9:[52, 104, 208, 415, 831, 1661, 3322, 6645], 10:[55, 110, 220, 440, 880, 1760, 3520, 7040], 11:[58, 117, 233, 466, 932, 1865, 3729, 7459], 12:[62, 123, 247, 494, 988, 1976, 3951, 7902]}, highList:["high", "1", "on"], lowList:["low", "0", "off"], BlockState:{}};
Entry.DaduBlock = {name:"dadublock", setZero:function() {
  Entry.hw.sendQueue.SET ? Object.keys(Entry.hw.sendQueue.SET).forEach(function(a) {
    Entry.hw.sendQueue.SET[a].data = 0;
    Entry.hw.sendQueue.SET[a].time = (new Date).getTime();
  }) : Entry.hw.sendQueue = {GET:{}, SET:{}};
  Entry.hw.update();
}, sensorTypes:{ALIVE:0, DIGITAL:1, ANALOG:2, PWM:3, SERVO_PIN:4, TONE:5, PULSEIN:6, ULTRASONIC:7, TIMER:8}, toneMap:{1:[33, 65, 131, 262, 523, 1046, 2093, 4186], 2:[35, 69, 139, 277, 554, 1109, 2217, 4435], 3:[37, 73, 147, 294, 587, 1175, 2349, 4699], 4:[39, 78, 156, 311, 622, 1245, 2849, 4978], 5:[41, 82, 165, 330, 659, 1319, 2637, 5274], 6:[44, 87, 175, 349, 698, 1397, 2794, 5588], 7:[46, 92, 185, 370, 740, 1480, 2960, 5920], 8:[49, 98, 196, 392, 784, 1568, 3136, 6272], 9:[52, 104, 208, 415, 831, 
1661, 3322, 6645], 10:[55, 110, 220, 440, 880, 1760, 3520, 7040], 11:[58, 117, 233, 466, 932, 1865, 3729, 7459], 12:[62, 123, 247, 494, 988, 1976, 3951, 7902]}, BlockState:{}};
Entry.SmartBoard = {name:"smartBoard", setZero:Entry.Arduino.setZero};
Entry.SensorBoard = {name:"sensorBoard", setZero:Entry.Arduino.setZero};
Entry.ardublock = {name:"ardublock", setZero:Entry.Arduino.setZero};
Entry.dplay = {name:"dplay", vel_value:255, Left_value:255, Right_value:255, setZero:Entry.Arduino.setZero, timeouts:[], removeTimeout:function(a) {
  clearTimeout(a);
  var b = this.timeouts;
  a = b.indexOf(a);
  0 <= a && b.splice(a, 1);
}, removeAllTimeouts:function() {
  var a = this.timeouts, b;
  for (b in a) {
    clearTimeout(a[b]);
  }
  this.timeouts = [];
}, monitorTemplate:{imgPath:"hw/dplay.png", width:500, height:600, listPorts:{2:{name:Lang.Hw.port_en + " 2 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 3:{name:Lang.Hw.port_en + " 3 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 4:{name:Lang.Hw.port_en + " 4 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 5:{name:Lang.Hw.port_en + " 5 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 6:{name:Lang.Hw.port_en + " 6 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 7:{name:Lang.Hw.port_en + 
" 7 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 8:{name:Lang.Hw.port_en + " 8 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 9:{name:Lang.Hw.port_en + " 9 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 10:{name:Lang.Hw.port_en + " 10 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 11:{name:Lang.Hw.port_en + " 11 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 12:{name:Lang.Hw.port_en + " 12 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 13:{name:Lang.Hw.port_en + " 13 " + 
Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a0:{name:Lang.Hw.port_en + " A0 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a1:{name:Lang.Hw.port_en + " A1 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a2:{name:Lang.Hw.port_en + " A2 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a3:{name:Lang.Hw.port_en + " A3 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a4:{name:Lang.Hw.port_en + " A4 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, a5:{name:Lang.Hw.port_en + " A5 " + 
Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}}, mode:"both"}};
Entry.nemoino = {name:"nemoino", setZero:Entry.Arduino.setZero};
Entry.joystick = {name:"joystick", setZero:Entry.Arduino.setZero};
Entry.CODEino = {name:"CODEino", getSensorKey:function() {
  return "xxxxxxxx".replace(/[xy]/g, function(a) {
    var b = 16 * Math.random() | 0;
    return ("x" == a ? b : b & 0 | 0).toString(16);
  }).toUpperCase();
}, getSensorTime:function(a) {
  return (new Date).getTime() + a;
}, monitorTemplate:Entry.Arduino.monitorTemplate, setZero:function() {
  Entry.hw.sendQueue.SET ? Object.keys(Entry.hw.sendQueue.SET).forEach(function(a) {
    Entry.hw.sendQueue.SET[a].data = 0;
    Entry.hw.sendQueue.TIME = Entry.CODEino.getSensorTime(Entry.hw.sendQueue.SET[a].type);
    Entry.hw.sendQueue.KEY = Entry.CODEino.getSensorKey();
  }) : Entry.hw.sendQueue = {SET:{0:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 1:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 2:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 3:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 4:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 5:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 6:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 7:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 8:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 
  9:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 10:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 11:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 12:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}, 13:{type:Entry.CODEino.sensorTypes.DIGITAL, data:0}}, TIME:Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.DIGITAL), KEY:Entry.CODEino.getSensorKey()};
  Entry.hw.update();
}, sensorTypes:{ALIVE:0, DIGITAL:1, ANALOG:2, PWM:3, RGBLED_PIN:4, TONE:5, PULSEIN:6, ULTRASONIC:7, TIMER:8, ADDCOLOR:9}, BlockState:{}};
Blockly.Blocks.arduino_text = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldTextInput("Arduino"), "NAME");
  this.setOutput(!0, "String");
  this.setInputsInline(!0);
}};
Entry.block.arduino_text = function(a, b) {
  return b.getStringField("NAME");
};
Blockly.Blocks.arduino_send = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_arduino_send_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_arduino_send_2);
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.arduino_send = function(a, b) {
  a = b.getValue("VALUE", b);
  var c = new XMLHttpRequest;
  c.open("POST", "http://localhost:23518/arduino/", !1);
  c.send(String(a));
  Entry.assert(200 == c.status, "arduino is not connected");
  return b.callReturn();
};
Blockly.Blocks.arduino_get_string = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_arduino_get_string_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_arduino_get_string_2);
  this.setOutput(!0, "String");
  this.setInputsInline(!0);
}};
Entry.block.arduino_get_number = function(a, b) {
  a = b.getValue("VALUE", b);
  b = new XMLHttpRequest;
  b.open("POST", "http://localhost:23518/arduino/", !1);
  b.send(String(a));
  Entry.assert(200 == b.status, "arduino is not connected");
  return Number(b.responseText);
};
Blockly.Blocks.arduino_get_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_arduino_get_number_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_arduino_get_number_2);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.arduino_get_string = function(a, b) {
  a = b.getValue("VALUE", b);
  b = new XMLHttpRequest;
  b.open("POST", "http://localhost:23518/arduino/", !1);
  b.send(String(a));
  Entry.assert(200 == b.status, "arduino is not connected");
  return b.responseText;
};
Blockly.Blocks.arduino_get_sensor_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.ARDUINO_arduino_get_sensor_number_0, "A0"], [Lang.Blocks.ARDUINO_arduino_get_sensor_number_1, "A1"], [Lang.Blocks.ARDUINO_arduino_get_sensor_number_2, "A2"], [Lang.Blocks.ARDUINO_arduino_get_sensor_number_3, "A3"], [Lang.Blocks.ARDUINO_arduino_get_sensor_number_4, "A4"], [Lang.Blocks.ARDUINO_arduino_get_sensor_number_5, "A5"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.arduino_get_sensor_number = function(a, b) {
  return b.getStringField("PORT");
};
Blockly.Blocks.arduino_get_port_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"], ["12", "12"], ["13", "13"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.arduino_get_port_number = function(a, b) {
  return b.getStringField("PORT");
};
Blockly.Blocks.arduino_get_pwm_port_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["3", "3"], ["5", "5"], ["6", "6"], ["9", "9"], ["10", "10"], ["11", "11"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.arduino_get_pwm_port_number = function(a, b) {
  return b.getStringField("PORT");
};
Blockly.Blocks.arduino_get_number_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_num_sensor_value_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_num_sensor_value_2).appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.arduino_get_number_sensor_value = function(a, b) {
  a = b.getValue("VALUE", b);
  return Entry.hw.getAnalogPortValue(a[1]);
};
Blockly.Blocks.arduino_get_digital_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_get_digital_value_1);
  this.appendValueInput("VALUE").setCheck("Number");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_num_sensor_value_2).appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.arduino_get_digital_value = function(a, b) {
  a = b.getNumberValue("VALUE", b);
  return Entry.hw.getDigitalPortValue(a);
};
Blockly.Blocks.arduino_toggle_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_num_pin_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_num_pin_2);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.ARDUINO_on, "on"], [Lang.Blocks.ARDUINO_off, "off"]]), "OPERATOR").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.arduino_toggle_led = function(a, b) {
  a = b.getNumberValue("VALUE");
  var c = b.getField("OPERATOR");
  Entry.hw.setDigitalPortValue(a, "on" == c ? 255 : 0);
  return b.callReturn();
};
Blockly.Blocks.arduino_toggle_pwm = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_toggle_pwm_1);
  this.appendValueInput("PORT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_toggle_pwm_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_toggle_pwm_3);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.arduino_toggle_pwm = function(a, b) {
  a = b.getNumberValue("PORT");
  var c = b.getNumberValue("VALUE"), c = Math.round(c), c = Math.max(c, 0), c = Math.min(c, 255);
  Entry.hw.setDigitalPortValue(a, c);
  return b.callReturn();
};
Blockly.Blocks.arduino_convert_scale = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_1);
  this.appendValueInput("VALUE1").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_2);
  this.appendValueInput("VALUE2").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_3);
  this.appendValueInput("VALUE3").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_4);
  this.appendValueInput("VALUE4").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_5);
  this.appendValueInput("VALUE5").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_6);
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.arduino_convert_scale = function(a, b) {
  var c = b.getNumberValue("VALUE1", b), d = b.getNumberValue("VALUE2", b), e = b.getNumberValue("VALUE3", b);
  a = b.getNumberValue("VALUE4", b);
  b = b.getNumberValue("VALUE5", b);
  if (d > e) {
    var f = d, d = e, e = f;
  }
  a > b && (f = a, a = b, b = f);
  c = (b - a) / (e - d) * (c - d);
  c += a;
  c = Math.min(b, c);
  c = Math.max(a, c);
  return Math.round(c);
};
Blockly.Blocks.sensorBoard_get_named_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["\uc18c\ub9ac", "0"], ["\ube5b \uac10\uc9c0", "1"], ["\uc2ac\ub77c\uc774\ub354", "2"], ["\uc628\ub3c4", "3"]]), "PORT").appendField(" \uc13c\uc11c\uac12");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.sensorBoard_get_named_sensor_value = function(a, b) {
  return Entry.hw.getAnalogPortValue(b.getField("PORT", b));
};
Blockly.Blocks.sensorBoard_is_button_pressed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["\ube68\uac04", "8"], ["\ud30c\ub780", "9"], ["\ub178\ub780", "10"], ["\ucd08\ub85d", "11"]]), "PORT");
  this.appendDummyInput().appendField(" \ubc84\ud2bc\uc744 \ub20c\ub800\ub294\uac00?");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.sensorBoard_is_button_pressed = function(a, b) {
  return Entry.hw.getDigitalPortValue(b.getNumberField("PORT", b));
};
Blockly.Blocks.sensorBoard_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["\ube68\uac04", "2"], ["\ucd08\ub85d", "3"], ["\ud30c\ub780", "4"], ["\ud770\uc0c9", "5"]]), "PORT").appendField(" LED").appendField(new Blockly.FieldDropdown([["\ucf1c\uae30", "255"], ["\ub044\uae30", "0"]]), "OPERATOR").appendField(" ").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.sensorBoard_led = function(a, b) {
  Entry.hw.setDigitalPortValue(b.getField("PORT"), b.getNumberField("OPERATOR"));
  return b.callReturn();
};
Entry.block.arduino_download_connector = {skeleton:"basic_button", color:"#eee", template:"%1", params:[{type:"Text", text:"\uc5f0\uacb0 \ud504\ub85c\uadf8\ub7a8 \ub2e4\uc6b4\ub85c\ub4dc", color:"#333", align:"center"}], func:function() {
}, events:{mousedown:[function() {
  console.log("download connector");
}]}};
Entry.block.download_guide = {skeleton:"basic_button", color:"#eee", template:"%1", params:[{type:"Text", text:"\uc5f0\uacb0 \uc548\ub0b4 \ub2e4\uc6b4\ub85c\ub4dc", color:"#333", align:"center"}], func:function() {
}, events:{mousedown:[function() {
  console.log("download guide");
}]}};
Entry.block.arduino_download_source = {skeleton:"basic_button", color:"#eee", template:"%1", params:[{type:"Text", text:"\uc5d4\ud2b8\ub9ac \uc544\ub450\uc774\ub178 \uc18c\uc2a4", color:"#333", align:"center"}], func:function() {
}, events:{mousedown:[function() {
  console.log("download source");
}]}};
Entry.block.arduino_connected = {skeleton:"basic_button", color:"#eee", template:"%1", params:[{type:"Text", text:"\uc5f0\uacb0 \ub428", color:"#333", align:"center"}], func:function() {
}, events:{mousedown:[function() {
  console.log("download source");
}]}};
Entry.block.arduino_reconnect = {skeleton:"basic_button", color:"#eee", template:"%1", params:[{type:"Text", text:"\ub2e4\uc2dc \uc5f0\uacb0\ud558\uae30", color:"#333", align:"center"}], func:function() {
}, events:{mousedown:[function() {
  console.log("download source");
}]}};
Blockly.Blocks.CODEino_get_sensor_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.CODEino_get_sensor_number_0, "A0"], [Lang.Blocks.CODEino_get_sensor_number_1, "A1"], [Lang.Blocks.CODEino_get_sensor_number_2, "A2"], [Lang.Blocks.CODEino_get_sensor_number_3, "A3"], [Lang.Blocks.CODEino_get_sensor_number_4, "A4"], [Lang.Blocks.CODEino_get_sensor_number_5, "A5"], [Lang.Blocks.CODEino_get_sensor_number_6, "A6"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.CODEino_get_sensor_number = function(a, b) {
  return b.getStringField("PORT");
};
Blockly.Blocks.CODEino_get_named_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(" ").appendField(new Blockly.FieldDropdown([[Lang.Blocks.CODEino_sensor_name_0, "0"], [Lang.Blocks.CODEino_sensor_name_1, "1"], [Lang.Blocks.CODEino_sensor_name_2, "2"], [Lang.Blocks.CODEino_sensor_name_3, "3"], [Lang.Blocks.CODEino_sensor_name_4, "4"], [Lang.Blocks.CODEino_sensor_name_5, "5"], [Lang.Blocks.CODEino_sensor_name_6, "6"]]), "PORT").appendField(Lang.Blocks.CODEino_string_1);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.CODEino_get_named_sensor_value = function(a, b) {
  return Entry.hw.getAnalogPortValue(b.getField("PORT", b));
};
Blockly.Blocks.CODEino_get_sound_status = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.CODEino_string_10).appendField(new Blockly.FieldDropdown([[Lang.Blocks.CODEino_string_11, "GREAT"], [Lang.Blocks.CODEino_string_12, "SMALL"]]), "STATUS").appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.CODEino_get_sound_status = function(a, b) {
  return "GREAT" == b.getField("STATUS", b) ? 600 < Entry.hw.getAnalogPortValue(0) ? 1 : 0 : 600 > Entry.hw.getAnalogPortValue(0) ? 1 : 0;
};
Blockly.Blocks.CODEino_get_light_status = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.CODEino_string_13).appendField(new Blockly.FieldDropdown([[Lang.Blocks.CODEino_string_14, "BRIGHT"], [Lang.Blocks.CODEino_string_15, "DARK"]]), "STATUS").appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.CODEino_get_light_status = function(a, b) {
  return "DARK" == b.getField("STATUS", b) ? 800 < Entry.hw.getAnalogPortValue(1) ? 1 : 0 : 800 > Entry.hw.getAnalogPortValue(1) ? 1 : 0;
};
Blockly.Blocks.CODEino_is_button_pressed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.CODEino_string_2).appendField(new Blockly.FieldDropdown([[Lang.Blocks.CODEino_string_3, "4"], [Lang.Blocks.CODEino_string_4, "17"], [Lang.Blocks.CODEino_string_5, "18"], [Lang.Blocks.CODEino_string_6, "19"], [Lang.Blocks.CODEino_string_7, "20"]]), "PORT").appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.CODEino_is_button_pressed = function(a, b) {
  a = b.getNumberField("PORT", b);
  return 14 < a ? !Entry.hw.getAnalogPortValue(a - 14) : !Entry.hw.getDigitalPortValue(a);
};
Blockly.Blocks.CODEino_get_accelerometer_direction = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.CODEino_string_8).appendField(new Blockly.FieldDropdown([[Lang.Blocks.CODEino_string_16, "LEFT"], [Lang.Blocks.CODEino_string_17, "RIGHT"], [Lang.Blocks.CODEino_string_18, "FRONT"], [Lang.Blocks.CODEino_string_19, "REAR"], [Lang.Blocks.CODEino_string_20, "REVERSE"]]), "DIRECTION");
  this.appendDummyInput().appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.CODEino_get_accelerometer_direction = function(a, b) {
  a = b.getField("DIRECTION", b);
  b = 0;
  "LEFT" == a || "RIGHT" == a ? b = 3 : "FRONT" == a || "REAR" == a ? b = 4 : "REVERSE" == a && (b = 5);
  b = Entry.hw.getAnalogPortValue(b) - 265;
  b = Math.min(90, 180 / 137 * b + -90);
  b = Math.max(-90, b);
  b = Math.round(b);
  if ("LEFT" == a || "REAR" == a) {
    return -30 > b ? 1 : 0;
  }
  if ("RIGHT" == a || "FRONT" == a) {
    return 30 < b ? 1 : 0;
  }
  if ("REVERSE" == a) {
    return -50 > b ? 1 : 0;
  }
};
Blockly.Blocks.CODEino_get_accelerometer_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.CODEino_string_8).appendField(new Blockly.FieldDropdown([[Lang.Blocks.CODEino_accelerometer_X, "3"], [Lang.Blocks.CODEino_accelerometer_Y, "4"], [Lang.Blocks.CODEino_accelerometer_Z, "5"]]), "PORT").appendField(Lang.Blocks.CODEino_string_9);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.CODEino_get_accelerometer_value = function(a, b) {
  var c = Entry.hw.getAnalogPortValue(b.getField("PORT", b)), d = 265, e = 402;
  a = -90;
  b = 90;
  if (d > e) {
    var f = d, d = e, e = f;
  }
  a > b && (f = a, a = b, b = f);
  c = (b - a) / (e - d) * (c - d);
  c += a;
  c = Math.min(b, c);
  c = Math.max(a, c);
  return Math.round(c);
};
Blockly.Blocks.dplay_select_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_num_pin_1);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]]), "PORT");
  this.appendDummyInput().appendField(Lang.Blocks.dplay_num_pin_1);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.ARDUINO_on, "on"], [Lang.Blocks.ARDUINO_off, "off"]]), "OPERATOR").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.dplay_select_led = function(a, b) {
  var c = b.getField("PORT");
  a = 7;
  "7" == c ? a = 7 : "8" == c ? a = 8 : "9" == c ? a = 9 : "10" == c && (a = 10);
  c = b.getField("OPERATOR");
  Entry.hw.setDigitalPortValue(a, "on" == c ? 255 : 0);
  return b.callReturn();
};
Blockly.Blocks.dplay_get_switch_status = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ub514\uc9c0\ud138 ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["2", "2"], ["4", "4"]]), "PORT");
  this.appendDummyInput().appendField(Lang.Blocks.dplay_num_pin_2).appendField(new Blockly.FieldDropdown([[Lang.Blocks.dplay_string_5, "ON"], [Lang.Blocks.dplay_string_6, "OFF"]]), "STATUS").appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.dplay_get_switch_status = function(a, b) {
  a = b.getField("PORT");
  var c = 2;
  "2" == a ? c = 2 : "4" == a && (c = 4);
  return "OFF" == b.getField("STATUS") ? 1 == Entry.hw.getDigitalPortValue(c) ? 1 : 0 : 0 == Entry.hw.getDigitalPortValue(c) ? 1 : 0;
};
Blockly.Blocks.dplay_get_light_status = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.dplay_light).appendField(new Blockly.FieldDropdown([[Lang.Blocks.dplay_string_3, "BRIGHT"], [Lang.Blocks.dplay_string_4, "DARK"]]), "STATUS").appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.dplay_get_light_status = function(a, b) {
  return "DARK" == b.getField("STATUS", b) ? 800 < Entry.hw.getAnalogPortValue(1) ? 1 : 0 : 800 > Entry.hw.getAnalogPortValue(1) ? 1 : 0;
};
Blockly.Blocks.dplay_get_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.dplay_num_pin_3);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField("\ubc88 ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["\uac00\ubcc0\uc800\ud56d", "ADJU"], ["\ube5b\uc13c\uc11c", "LIGHT"], ["\uc628\ub3c4\uc13c\uc11c", "TEMP"], ["\uc870\uc774\uc2a4\ud2f1 X", "JOYS"], ["\uc870\uc774\uc2a4\ud2f1 Y", "JOYS"], ["\uc801\uc678\uc120", "INFR"]]), "OPERATOR");
  this.appendDummyInput().appendField(Lang.Blocks.dplay_num_pin_5);
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.dplay_get_value = function(a, b) {
  a = b.getValue("VALUE", b);
  return Entry.hw.getAnalogPortValue(a[1]);
};
Blockly.Blocks.dplay_get_tilt = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.dplay_tilt).appendField(new Blockly.FieldDropdown([["\uc67c\ucabd \uae30\uc6b8\uc784", "LEFT"], ["\uc624\ub978\ucabd \uae30\uc6b8\uc784", "LIGHT"]]), "STATUS").appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.dplay_get_tilt = function(a, b) {
  return "LIGHT" == b.getField("STATUS", b) ? 1 == Entry.hw.getDigitalPortValue(12) ? 1 : 0 : 0 == Entry.hw.getDigitalPortValue(12) ? 1 : 0;
};
Blockly.Blocks.dplay_DCmotor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["\uc67c\ucabd", "3"], ["\uc624\ub978\ucabd", "6"]]), "PORT");
  this.appendDummyInput().appendField(" DC\ubaa8\ud130 \uc0c1\ud0dc\ub97c");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["\uc815\ubc29\ud5a5", "FRONT"], ["\uc5ed\ubc29\ud5a5", "REAR"], ["\uc815\uc9c0", "OFF"]]), "OPERATOR").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.dplay_DCmotor = function(a, b) {
  a = b.getField("PORT");
  var c = 0;
  "3" == a ? c = 5 : "6" == a && (c = 11);
  var d = b.getField("OPERATOR"), e = 0, f = 0;
  "FRONT" == d ? (e = 255, f = 0) : "REAR" == d ? (e = 0, f = 255) : "OFF" == d && (f = e = 0);
  Entry.hw.setDigitalPortValue(a, e);
  Entry.hw.setDigitalPortValue(c, f);
  return b.callReturn();
};
Blockly.Blocks.dplay_buzzer = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubd80\uc800\ub97c ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["\ub3c4", "1"], ["\ub808", "2"], ["\ubbf8", "3"]]), "PORT");
  this.appendDummyInput().appendField("\ub85c");
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField("\ubc15\uc790\ub85c \uc5f0\uc8fc\ud558\uae30");
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.dplay_buzzer = function(a, b) {
  var c = b.getField("PORT");
  a = 2;
  "1" == c ? a = 2 : "2" == c ? a = 4 : "3" == c && (a = 7);
  c = b.getNumberValue("VALUE");
  c = Math.round(c);
  c = Math.max(c, 0);
  c = Math.min(c, 100);
  Entry.hw.setDigitalPortValue(a, c);
  return b.callReturn();
};
Blockly.Blocks.dplay_servo = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc11c\ubcf4\ubaa8\ud130 \uac01\ub3c4\ub97c");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("\ub85c \uc774\ub3d9");
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.dplay_servo = function(a, b) {
  a = b.getNumberValue("VALUE");
  a = Math.round(a);
  a = Math.max(a, 0);
  a = Math.min(a, 180);
  Entry.hw.setDigitalPortValue(9, a);
  return b.callReturn();
};
Entry.Bitbrick = {SENSOR_MAP:{1:"light", 2:"IR", 3:"touch", 4:"potentiometer", 5:"MIC", 21:"UserSensor", 11:"UserInput", 20:"LED", 19:"SERVO", 18:"DC"}, PORT_MAP:{buzzer:2, 5:4, 6:6, 7:8, 8:10, LEDR:12, LEDG:14, LEDB:16}, sensorList:function() {
  for (var a = [], b = Entry.hw.portData, c = 1;5 > c;c++) {
    var d = b[c];
    d && (d.value || 0 === d.value) && a.push([c + " - " + Lang.Blocks["BITBRICK_" + d.type], c.toString()]);
  }
  return 0 == a.length ? [[Lang.Blocks.no_target, "null"]] : a;
}, touchList:function() {
  for (var a = [], b = Entry.hw.portData, c = 1;5 > c;c++) {
    var d = b[c];
    d && "touch" === d.type && a.push([c.toString(), c.toString()]);
  }
  return 0 == a.length ? [[Lang.Blocks.no_target, "null"]] : a;
}, servoList:function() {
  for (var a = [], b = Entry.hw.portData, c = 5;9 > c;c++) {
    var d = b[c];
    d && "SERVO" === d.type && a.push(["ABCD"[c - 5], c.toString()]);
  }
  return 0 == a.length ? [[Lang.Blocks.no_target, "null"]] : a;
}, dcList:function() {
  for (var a = [], b = Entry.hw.portData, c = 5;9 > c;c++) {
    var d = b[c];
    d && "DC" === d.type && a.push(["ABCD"[c - 5], c.toString()]);
  }
  return 0 == a.length ? [[Lang.Blocks.no_target, "null"]] : a;
}, setZero:function() {
  var a = Entry.hw.sendQueue, b;
  for (b in Entry.Bitbrick.PORT_MAP) {
    a[b] = 0;
  }
  Entry.hw.update();
}, name:"bitbrick", servoMaxValue:181, servoMinValue:1, dcMaxValue:100, dcMinValue:-100, monitorTemplate:{keys:["value"], imgPath:"hw/bitbrick.png", width:400, height:400, listPorts:{1:{name:Lang.Hw.port_en + " 1 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 2:{name:Lang.Hw.port_en + " 2 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 3:{name:Lang.Hw.port_en + " 3 " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, 4:{name:Lang.Hw.port_en + " 4 " + Lang.Hw.port_ko, type:"input", pos:{x:0, 
y:0}}, A:{name:Lang.Hw.port_en + " A " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, B:{name:Lang.Hw.port_en + " B " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, C:{name:Lang.Hw.port_en + " C " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}, D:{name:Lang.Hw.port_en + " D " + Lang.Hw.port_ko, type:"input", pos:{x:0, y:0}}}, mode:"both"}};
Blockly.Blocks.bitbrick_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdownDynamic(Entry.Bitbrick.sensorList), "PORT").appendField(" \uac12");
  this.setOutput(!0, "String");
  this.setInputsInline(!0);
}};
Entry.block.bitbrick_sensor_value = function(a, b) {
  a = b.getStringField("PORT");
  return Entry.hw.portData[a].value;
};
Blockly.Blocks.bitbrick_is_touch_pressed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.BITBRICK_touch).appendField(new Blockly.FieldDropdownDynamic(Entry.Bitbrick.touchList), "PORT").appendField("\uc774(\uac00) \ub20c\ub838\ub294\uac00?");
  this.setOutput(!0, "Boolean");
  this.setInputsInline(!0);
}};
Entry.block.bitbrick_is_touch_pressed = function(a, b) {
  return 0 === Entry.hw.portData[b.getStringField("PORT")].value;
};
Blockly.Blocks.bitbrick_turn_off_color_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uceec\ub7ec LED \ub044\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.bitbrick_turn_off_color_led = function(a, b) {
  Entry.hw.sendQueue.LEDR = 0;
  Entry.hw.sendQueue.LEDG = 0;
  Entry.hw.sendQueue.LEDB = 0;
  return b.callReturn();
};
Blockly.Blocks.bitbrick_turn_on_color_led_by_rgb = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uceec\ub7ec LED \ucf1c\uae30 R");
  this.appendValueInput("rValue").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("G");
  this.appendValueInput("gValue").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("B");
  this.appendValueInput("bValue").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.bitbrick_turn_on_color_led_by_rgb = function(a, b) {
  a = b.getNumberValue("rValue");
  var c = b.getNumberValue("gValue"), d = b.getNumberValue("bValue"), e = Entry.adjustValueWithMaxMin, f = Entry.hw.sendQueue;
  f.LEDR = e(a, 0, 255);
  f.LEDG = e(c, 0, 255);
  f.LEDB = e(d, 0, 255);
  return b.callReturn();
};
Blockly.Blocks.bitbrick_turn_on_color_led_by_picker = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uceec\ub7ec LED \uc0c9 ").appendField(new Blockly.FieldColour("#ff0000"), "VALUE").appendField("\ub85c \uc815\ud558\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.bitbrick_turn_on_color_led_by_picker = function(a, b) {
  a = b.getStringField("VALUE");
  Entry.hw.sendQueue.LEDR = parseInt(a.substr(1, 2), 16);
  Entry.hw.sendQueue.LEDG = parseInt(a.substr(3, 2), 16);
  Entry.hw.sendQueue.LEDB = parseInt(a.substr(5, 2), 16);
  return b.callReturn();
};
Blockly.Blocks.bitbrick_turn_on_color_led_by_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uceec\ub7ec LED \ucf1c\uae30 \uc0c9");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("\ub85c \uc815\ud558\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.bitbrick_turn_on_color_led_by_value = function(a, b) {
  a = b.getNumberValue("VALUE");
  var c, d, e;
  a %= 200;
  67 > a ? (c = 200 - 3 * a, d = 3 * a, e = 0) : 134 > a ? (a -= 67, c = 0, d = 200 - 3 * a, e = 3 * a) : 201 > a && (a -= 134, c = 3 * a, d = 0, e = 200 - 3 * a);
  Entry.hw.sendQueue.LEDR = c;
  Entry.hw.sendQueue.LEDG = d;
  Entry.hw.sendQueue.LEDB = e;
  return b.callReturn();
};
Blockly.Blocks.bitbrick_buzzer = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubc84\uc800\uc74c ");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("\ub0b4\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.bitbrick_buzzer = function(a, b) {
  if (b.isStart) {
    return Entry.hw.sendQueue.buzzer = 0, delete b.isStart, b.callReturn();
  }
  a = b.getNumberValue("VALUE");
  Entry.hw.sendQueue.buzzer = a;
  b.isStart = !0;
  return b;
};
Blockly.Blocks.bitbrick_turn_off_all_motors = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubaa8\ub4e0 \ubaa8\ud130 \ub044\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.bitbrick_turn_off_all_motors = function(a, b) {
  var c = Entry.hw.sendQueue;
  a = Entry.Bitbrick;
  a.servoList().map(function(b) {
    c[b[1]] = 0;
  });
  a.dcList().map(function(b) {
    c[b[1]] = 128;
  });
  return b.callReturn();
};
Blockly.Blocks.bitbrick_dc_speed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("DC \ubaa8\ud130").appendField(new Blockly.FieldDropdownDynamic(Entry.Bitbrick.dcList), "PORT").appendField(" \uc18d\ub3c4");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
  this.setInputsInline(!0);
}};
Entry.block.bitbrick_dc_speed = function(a, b) {
  a = b.getNumberValue("VALUE");
  a = Math.min(a, Entry.Bitbrick.dcMaxValue);
  a = Math.max(a, Entry.Bitbrick.dcMinValue);
  Entry.hw.sendQueue[b.getStringField("PORT")] = a + 128;
  return b.callReturn();
};
Blockly.Blocks.bitbrick_dc_direction_speed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("DC \ubaa8\ud130").appendField(new Blockly.FieldDropdownDynamic(Entry.Bitbrick.dcList), "PORT").appendField(" ").appendField(new Blockly.FieldDropdown([[Lang.Blocks.BITBRICK_dc_direction_cw, "CW"], [Lang.Blocks.BITBRICK_dc_direction_ccw, "CCW"]]), "DIRECTION").appendField(" \ubc29\ud5a5").appendField(" \uc18d\ub825");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
  this.setInputsInline(!0);
}};
Entry.block.bitbrick_dc_direction_speed = function(a, b) {
  a = "CW" === b.getStringField("DIRECTION");
  var c = b.getNumberValue("VALUE"), c = Math.min(c, Entry.Bitbrick.dcMaxValue), c = Math.max(c, 0);
  Entry.hw.sendQueue[b.getStringField("PORT")] = a ? c + 128 : 128 - c;
  return b.callReturn();
};
Blockly.Blocks.bitbrick_servomotor_angle = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc11c\ubcf4 \ubaa8\ud130").appendField(new Blockly.FieldDropdownDynamic(Entry.Bitbrick.servoList), "PORT").appendField(" \uac01\ub3c4");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
  this.setInputsInline(!0);
}};
Entry.block.bitbrick_servomotor_angle = function(a, b) {
  a = b.getNumberValue("VALUE") + 1;
  a = Math.min(a, Entry.Bitbrick.servoMaxValue);
  a = Math.max(a, Entry.Bitbrick.servoMinValue);
  Entry.hw.sendQueue[b.getStringField("PORT")] = a;
  return b.callReturn();
};
Blockly.Blocks.bitbrick_convert_scale = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubcc0\ud658");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdownDynamic(Entry.Bitbrick.sensorList), "PORT");
  this.appendDummyInput().appendField("\uac12");
  this.appendValueInput("VALUE2").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_3);
  this.appendValueInput("VALUE3").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField("\uc5d0\uc11c");
  this.appendValueInput("VALUE4").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.ARDUINO_convert_scale_5);
  this.appendValueInput("VALUE5").setCheck(["Number", "String", null]);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.bitbrick_convert_scale = function(a, b) {
  a = b.getNumberField("PORT");
  var c = Entry.hw.portData[a].value, d = b.getNumberValue("VALUE2", b), e = b.getNumberValue("VALUE3", b);
  a = b.getNumberValue("VALUE4", b);
  b = b.getNumberValue("VALUE5", b);
  if (a > b) {
    var f = a;
    a = b;
    b = f;
  }
  c = (b - a) / (e - d) * (c - d);
  c += a;
  c = Math.min(b, c);
  c = Math.max(a, c);
  return Math.round(c);
};
Entry.byrobot_dronefighter_controller = {name:"byrobot_dronefighter_controller", setZero:function() {
  for (var a = 0;1 > a;a++) {
    this.transferVibrator(0, 0, 0, 0), this.transferbuzzer(0, 0, 0), this.transferLightManual(17, 255, 0), this.transferCommand(17, 129, 0);
  }
}, monitorTemplate:{imgPath:"hw/byrobot_dronefighter_controller.png", width:500, height:500, listPorts:{joystick_left_x:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x, type:"input", pos:{x:0, y:0}}, joystick_left_y:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y, type:"input", pos:{x:0, y:0}}, joystick_left_direction:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction, type:"input", pos:{x:0, y:0}}, joystick_left_event:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event, 
type:"input", pos:{x:0, y:0}}, joystick_left_command:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command, type:"input", pos:{x:0, y:0}}, joystick_right_x:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x, type:"input", pos:{x:0, y:0}}, joystick_right_y:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y, type:"input", pos:{x:0, y:0}}, joystick_right_direction:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction, type:"input", 
pos:{x:0, y:0}}, joystick_right_event:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event, type:"input", pos:{x:0, y:0}}, joystick_right_command:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command, type:"input", pos:{x:0, y:0}}, button_button:{name:Lang.Blocks.byrobot_dronefighter_controller_button_button, type:"input", pos:{x:0, y:0}}, button_event:{name:Lang.Blocks.byrobot_dronefighter_controller_button_event, type:"input", pos:{x:0, y:0}}, entryhw_countTransferReserved:{name:Lang.Blocks.byrobot_dronefighter_entryhw_count_transfer_reserved, 
type:"output", pos:{x:0, y:0}}}, ports:{}, mode:"both"}, checkFinish:function(a, b) {
  if (a.isStart) {
    if (1 == a.timeFlag) {
      return "Running";
    }
    delete a.timeFlag;
    delete a.isStart;
    Entry.engine.isContinue = !1;
    return "Finish";
  }
  a.isStart = !0;
  a.timeFlag = 1;
  setTimeout(function() {
    a.timeFlag = 0;
  }, 60 / (Entry.FPS || 60) * b);
  return "Start";
}, transferLightManual:function(a, b, c) {
  a = Math.max(a, 0);
  a = Math.min(a, 255);
  b = Math.max(b, 0);
  b = Math.min(b, 255);
  c = Math.max(c, 0);
  c = Math.min(c, 255);
  Entry.hw.setDigitalPortValue("target", a);
  Entry.hw.setDigitalPortValue("light_manual_flags", b);
  Entry.hw.setDigitalPortValue("light_manual_brightness", c);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.light_manual_flags;
  delete Entry.hw.sendQueue.light_manual_brightness;
}, transferbuzzer:function(a, b, c) {
  Entry.hw.setDigitalPortValue("target", 17);
  Entry.hw.setDigitalPortValue("buzzer_mode", a);
  Entry.hw.setDigitalPortValue("buzzer_value", b);
  Entry.hw.setDigitalPortValue("buzzer_time", c);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.buzzer_mode;
  delete Entry.hw.sendQueue.buzzer_value;
  delete Entry.hw.sendQueue.buzzer_time;
}, transferVibrator:function(a, b, c, d) {
  b = Math.max(b, 1);
  b = Math.min(b, 6E4);
  c = Math.max(c, 1);
  c = Math.min(c, 6E4);
  Entry.hw.setDigitalPortValue("target", 17);
  Entry.hw.setDigitalPortValue("vibrator_mode", a);
  Entry.hw.setDigitalPortValue("vibrator_on", b);
  Entry.hw.setDigitalPortValue("vibrator_off", c);
  Entry.hw.setDigitalPortValue("vibrator_total", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.vibrator_mode;
  delete Entry.hw.sendQueue.vibrator_on;
  delete Entry.hw.sendQueue.vibrator_off;
  delete Entry.hw.sendQueue.vibrator_total;
}, transferCommand:function(a, b, c) {
  Entry.hw.setDigitalPortValue("target", a);
  Entry.hw.setDigitalPortValue("command_command", b);
  Entry.hw.setDigitalPortValue("command_option", c);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.command_command;
  delete Entry.hw.sendQueue.command_option;
}, transferUserInterface:function(a, b) {
  Entry.hw.setDigitalPortValue("target", 17);
  Entry.hw.setDigitalPortValue("userinterface_command", a);
  Entry.hw.setDigitalPortValue("userinterface_function", b);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.userinterface_command;
  delete Entry.hw.sendQueue.userinterface_function;
}, getData:function(a, b) {
  return Entry.hw.portData[b];
}, setLightManual:function(a, b, c, d) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferLightManual(b, c, d), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setBuzzerStop:function(a) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferbuzzer(0, 0, 0), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setBuzzerMute:function(a, b, c, d) {
  b = Math.max(b, 0);
  b = Math.min(b, 6E4);
  var e = 40;
  c && (e = b);
  switch(this.checkFinish(a, e)) {
    case "Start":
      return c = 2, d && (c = 1), this.transferbuzzer(c, 238, b), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setBuzzerScale:function(a, b, c, d, e, f) {
  d = Math.max(d, 0);
  d = Math.min(d, 6E4);
  var g = 40;
  e && (g = d);
  switch(this.checkFinish(a, g)) {
    case "Start":
      return e = 4, f && (e = 3), this.transferbuzzer(e, 12 * b + c, d), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setBuzzerHz:function(a, b, c, d, e) {
  c = Math.max(c, 0);
  c = Math.min(c, 6E4);
  var f = 40;
  d && (f = c);
  switch(this.checkFinish(a, f)) {
    case "Start":
      return d = 6, e && (d = 5), b = Math.max(b, 1), b = Math.min(b, 63999), this.transferbuzzer(d, b, c), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setVibratorStop:function(a) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferVibrator(0, 0, 0, 0), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setVibrator:function(a, b, c, d, e, f) {
  d = Math.max(d, 0);
  d = Math.min(d, 6E4);
  var g = 40;
  e && (g = d);
  switch(this.checkFinish(a, g)) {
    case "Start":
      return e = 2, f && (e = 1), this.transferVibrator(e, b, c, d), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, sendCommand:function(a, b, c, d) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferCommand(b, c, d), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setUserInterface:function(a, b, c) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferUserInterface(b, c), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}};
Entry.byrobot_dronefighter_drive = {name:"byrobot_dronefighter_drive", setZero:function() {
  for (var a = 0;1 > a;a++) {
    this.transferCommand(16, 36, 0), this.transferVibrator(0, 0, 0, 0), this.transferbuzzer(0, 0, 0), this.transferLightManual(16, 255, 0), this.transferLightManual(17, 255, 0);
  }
}, monitorTemplate:{imgPath:"hw/byrobot_dronefighter_drive.png", width:500, height:500, listPorts:{state_modeVehicle:{name:Lang.Blocks.byrobot_dronefighter_drone_state_mode_vehicle, type:"input", pos:{x:0, y:0}}, state_modeDrive:{name:Lang.Blocks.byrobot_dronefighter_drone_state_mode_drive, type:"input", pos:{x:0, y:0}}, state_battery:{name:Lang.Blocks.byrobot_dronefighter_drone_state_battery, type:"input", pos:{x:0, y:0}}, attitude_roll:{name:Lang.Blocks.byrobot_dronefighter_drone_attitude_roll, 
type:"input", pos:{x:0, y:0}}, attitude_pitch:{name:Lang.Blocks.byrobot_dronefighter_drone_attitude_pitch, type:"input", pos:{x:0, y:0}}, attitude_yaw:{name:Lang.Blocks.byrobot_dronefighter_drone_attitude_yaw, type:"input", pos:{x:0, y:0}}, irmessage_irdata:{name:Lang.Blocks.byrobot_dronefighter_drone_irmessage, type:"input", pos:{x:0, y:0}}, joystick_left_x:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x, type:"input", pos:{x:0, y:0}}, joystick_left_y:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y, 
type:"input", pos:{x:0, y:0}}, joystick_left_direction:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction, type:"input", pos:{x:0, y:0}}, joystick_left_event:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event, type:"input", pos:{x:0, y:0}}, joystick_left_command:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command, type:"input", pos:{x:0, y:0}}, joystick_right_x:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x, type:"input", 
pos:{x:0, y:0}}, joystick_right_y:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y, type:"input", pos:{x:0, y:0}}, joystick_right_direction:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction, type:"input", pos:{x:0, y:0}}, joystick_right_event:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event, type:"input", pos:{x:0, y:0}}, joystick_right_command:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command, type:"input", pos:{x:0, 
y:0}}, button_button:{name:Lang.Blocks.byrobot_dronefighter_controller_button_button, type:"input", pos:{x:0, y:0}}, button_event:{name:Lang.Blocks.byrobot_dronefighter_controller_button_event, type:"input", pos:{x:0, y:0}}, entryhw_countTransferReserved:{name:Lang.Blocks.byrobot_dronefighter_entryhw_count_transfer_reserved, type:"output", pos:{x:0, y:0}}}, ports:{}, mode:"both"}, checkFinish:function(a, b) {
  if (a.isStart) {
    if (1 == a.timeFlag) {
      return "Running";
    }
    delete a.timeFlag;
    delete a.isStart;
    Entry.engine.isContinue = !1;
    return "Finish";
  }
  a.isStart = !0;
  a.timeFlag = 1;
  setTimeout(function() {
    a.timeFlag = 0;
  }, 60 / (Entry.FPS || 60) * b);
  return "Start";
}, transferLightManual:function(a, b, c) {
  a = Math.max(a, 0);
  a = Math.min(a, 255);
  b = Math.max(b, 0);
  b = Math.min(b, 255);
  c = Math.max(c, 0);
  c = Math.min(c, 255);
  Entry.hw.setDigitalPortValue("target", a);
  Entry.hw.setDigitalPortValue("light_manual_flags", b);
  Entry.hw.setDigitalPortValue("light_manual_brightness", c);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.light_manual_flags;
  delete Entry.hw.sendQueue.light_manual_brightness;
}, transferbuzzer:function(a, b, c) {
  Entry.hw.setDigitalPortValue("target", 17);
  Entry.hw.setDigitalPortValue("buzzer_mode", a);
  Entry.hw.setDigitalPortValue("buzzer_value", b);
  Entry.hw.setDigitalPortValue("buzzer_time", c);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.buzzer_mode;
  delete Entry.hw.sendQueue.buzzer_value;
  delete Entry.hw.sendQueue.buzzer_time;
}, transferVibrator:function(a, b, c, d) {
  b = Math.max(b, 1);
  b = Math.min(b, 6E4);
  c = Math.max(c, 1);
  c = Math.min(c, 6E4);
  Entry.hw.setDigitalPortValue("target", 17);
  Entry.hw.setDigitalPortValue("vibrator_mode", a);
  Entry.hw.setDigitalPortValue("vibrator_on", b);
  Entry.hw.setDigitalPortValue("vibrator_off", c);
  Entry.hw.setDigitalPortValue("vibrator_total", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.vibrator_mode;
  delete Entry.hw.sendQueue.vibrator_on;
  delete Entry.hw.sendQueue.vibrator_off;
  delete Entry.hw.sendQueue.vibrator_total;
}, transferIrMessage:function(a) {
  a = Math.max(a, 0);
  a = Math.min(a, 127);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("irmessage_data", a);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.irmessage_data;
}, transferMotorSingle:function(a, b, c) {
  c = Math.max(c, 0);
  c = Math.min(c, 4096);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("motorsingle_target", a);
  Entry.hw.setDigitalPortValue("motorsingle_direction", b);
  Entry.hw.setDigitalPortValue("motorsingle_value", c);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.motorsingle_target;
  delete Entry.hw.sendQueue.motorsingle_direction;
  delete Entry.hw.sendQueue.motorsingle_value;
}, transferCommand:function(a, b, c) {
  Entry.hw.setDigitalPortValue("target", a);
  Entry.hw.setDigitalPortValue("command_command", b);
  Entry.hw.setDigitalPortValue("command_option", c);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.command_command;
  delete Entry.hw.sendQueue.command_option;
}, transferControlDouble:function(a, b) {
  a = Math.max(a, -100);
  a = Math.min(a, 100);
  b = Math.max(b, 0);
  b = Math.min(b, 100);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("control_wheel", a);
  Entry.hw.setDigitalPortValue("control_accel", b);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.control_wheel;
  delete Entry.hw.sendQueue.control_accel;
}, transferControlQuad:function(a, b, c, d) {
  a = Math.max(a, -100);
  a = Math.min(a, 100);
  b = Math.max(b, -100);
  b = Math.min(b, 100);
  c = Math.max(c, -100);
  c = Math.min(c, 100);
  d = Math.max(d, -100);
  d = Math.min(d, 100);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("control_roll", a);
  Entry.hw.setDigitalPortValue("control_pitch", b);
  Entry.hw.setDigitalPortValue("control_yaw", c);
  Entry.hw.setDigitalPortValue("control_throttle", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.control_roll;
  delete Entry.hw.sendQueue.control_pitch;
  delete Entry.hw.sendQueue.control_yaw;
  delete Entry.hw.sendQueue.control_throttle;
}, getData:function(a, b) {
  return Entry.hw.portData[b];
}, setLightManual:function(a, b, c, d) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferLightManual(b, c, d), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setBuzzerStop:function(a) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferbuzzer(0, 0, 0), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setBuzzerMute:function(a, b, c, d) {
  b = Math.max(b, 0);
  b = Math.min(b, 6E4);
  var e = 40;
  c && (e = b);
  switch(this.checkFinish(a, e)) {
    case "Start":
      return c = 2, d && (c = 1), this.transferbuzzer(c, 238, b), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setBuzzerScale:function(a, b, c, d, e, f) {
  d = Math.max(d, 0);
  d = Math.min(d, 6E4);
  var g = 40;
  e && (g = d);
  switch(this.checkFinish(a, g)) {
    case "Start":
      return e = 4, f && (e = 3), this.transferbuzzer(e, 12 * b + c, d), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setBuzzerHz:function(a, b, c, d, e) {
  c = Math.max(c, 0);
  c = Math.min(c, 6E4);
  var f = 40;
  d && (f = c);
  switch(this.checkFinish(a, f)) {
    case "Start":
      return d = 6, e && (d = 5), b = Math.max(b, 1), b = Math.min(b, 63999), this.transferbuzzer(d, b, c), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setVibratorStop:function(a) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferVibrator(0, 0, 0, 0), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setVibrator:function(a, b, c, d, e, f) {
  d = Math.max(d, 0);
  d = Math.min(d, 6E4);
  var g = 40;
  e && (g = d);
  switch(this.checkFinish(a, g)) {
    case "Start":
      return e = 2, f && (e = 1), this.transferVibrator(e, b, c, d), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, sendIrMessage:function(a, b) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferIrMessage(b), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, sendStop:function(a) {
  return this.sendCommand(a, 16, 36, 0);
}, sendCommand:function(a, b, c, d) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferCommand(b, c, d), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setMotorSingle:function(a, b, c, d) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferMotorSingle(b, c, d), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setModeVehicle:function(a, b) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferCommand(16, 16, b), this.transferControlDouble(0, 0), this.transferControlQuad(0, 0, 0, 0), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, sendControlDoubleSingle:function(a, b, c, d, e) {
  var f = 40;
  e && (f = d);
  switch(this.checkFinish(a, f)) {
    case "Start":
      switch(b) {
        case "control_wheel":
          c = Math.max(c, -100);
          c = Math.min(c, 100);
          break;
        case "control_accel":
          c = Math.max(c, 0), c = Math.min(c, 100);
      }
      Entry.hw.setDigitalPortValue("target", 16);
      Entry.hw.setDigitalPortValue(b, c);
      Entry.hw.update();
      delete Entry.hw.sendQueue.target;
      delete Entry.hw.sendQueue[b];
      return a;
    case "Running":
      return a;
    case "Finish":
      return e && (Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue(b, 0), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[b]), a.callReturn();
    default:
      return a.callReturn();
  }
}, sendControlDouble:function(a, b, c, d, e) {
  var f = 40;
  e && (f = d);
  switch(this.checkFinish(a, f)) {
    case "Start":
      return this.transferControlDouble(b, c), a;
    case "Running":
      return a;
    case "Finish":
      return e && this.transferControlDouble(0, 0), a.callReturn();
    default:
      return a.callReturn();
  }
}};
Entry.byrobot_dronefighter_flight = {name:"byrobot_dronefighter_flight", setZero:function() {
  for (var a = 0;1 > a;a++) {
    this.transferCommand(16, 36, 0), this.transferVibrator(0, 0, 0, 0), this.transferbuzzer(0, 0, 0), this.transferLightManual(16, 255, 0), this.transferLightManual(17, 255, 0);
  }
}, monitorTemplate:{imgPath:"hw/byrobot_dronefighter_flight.png", width:500, height:500, listPorts:{state_modeVehicle:{name:Lang.Blocks.byrobot_dronefighter_drone_state_mode_vehicle, type:"input", pos:{x:0, y:0}}, state_modeFlight:{name:Lang.Blocks.byrobot_dronefighter_drone_state_mode_flight, type:"input", pos:{x:0, y:0}}, state_coordinate:{name:Lang.Blocks.byrobot_dronefighter_drone_state_mode_coordinate, type:"input", pos:{x:0, y:0}}, state_battery:{name:Lang.Blocks.byrobot_dronefighter_drone_state_battery, 
type:"input", pos:{x:0, y:0}}, attitude_roll:{name:Lang.Blocks.byrobot_dronefighter_drone_attitude_roll, type:"input", pos:{x:0, y:0}}, attitude_pitch:{name:Lang.Blocks.byrobot_dronefighter_drone_attitude_pitch, type:"input", pos:{x:0, y:0}}, attitude_yaw:{name:Lang.Blocks.byrobot_dronefighter_drone_attitude_yaw, type:"input", pos:{x:0, y:0}}, irmessage_irdata:{name:Lang.Blocks.byrobot_dronefighter_drone_irmessage, type:"input", pos:{x:0, y:0}}, joystick_left_x:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x, 
type:"input", pos:{x:0, y:0}}, joystick_left_y:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y, type:"input", pos:{x:0, y:0}}, joystick_left_direction:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction, type:"input", pos:{x:0, y:0}}, joystick_left_event:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event, type:"input", pos:{x:0, y:0}}, joystick_left_command:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command, type:"input", 
pos:{x:0, y:0}}, joystick_right_x:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x, type:"input", pos:{x:0, y:0}}, joystick_right_y:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y, type:"input", pos:{x:0, y:0}}, joystick_right_direction:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction, type:"input", pos:{x:0, y:0}}, joystick_right_event:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event, type:"input", pos:{x:0, y:0}}, 
joystick_right_command:{name:Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command, type:"input", pos:{x:0, y:0}}, button_button:{name:Lang.Blocks.byrobot_dronefighter_controller_button_button, type:"input", pos:{x:0, y:0}}, button_event:{name:Lang.Blocks.byrobot_dronefighter_controller_button_event, type:"input", pos:{x:0, y:0}}, entryhw_countTransferReserved:{name:Lang.Blocks.byrobot_dronefighter_entryhw_count_transfer_reserved, type:"output", pos:{x:0, y:0}}}, ports:{}, mode:"both"}, 
checkFinish:function(a, b) {
  if (a.isStart) {
    if (1 == a.timeFlag) {
      return "Running";
    }
    delete a.timeFlag;
    delete a.isStart;
    Entry.engine.isContinue = !1;
    return "Finish";
  }
  a.isStart = !0;
  a.timeFlag = 1;
  setTimeout(function() {
    a.timeFlag = 0;
  }, 60 / (Entry.FPS || 60) * b);
  return "Start";
}, transferLightManual:function(a, b, c) {
  a = Math.max(a, 0);
  a = Math.min(a, 255);
  b = Math.max(b, 0);
  b = Math.min(b, 255);
  c = Math.max(c, 0);
  c = Math.min(c, 255);
  Entry.hw.setDigitalPortValue("target", a);
  Entry.hw.setDigitalPortValue("light_manual_flags", b);
  Entry.hw.setDigitalPortValue("light_manual_brightness", c);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.light_manual_flags;
  delete Entry.hw.sendQueue.light_manual_brightness;
}, transferbuzzer:function(a, b, c) {
  Entry.hw.setDigitalPortValue("target", 17);
  Entry.hw.setDigitalPortValue("buzzer_mode", a);
  Entry.hw.setDigitalPortValue("buzzer_value", b);
  Entry.hw.setDigitalPortValue("buzzer_time", c);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.buzzer_mode;
  delete Entry.hw.sendQueue.buzzer_value;
  delete Entry.hw.sendQueue.buzzer_time;
}, transferVibrator:function(a, b, c, d) {
  b = Math.max(b, 1);
  b = Math.min(b, 6E4);
  c = Math.max(c, 1);
  c = Math.min(c, 6E4);
  Entry.hw.setDigitalPortValue("target", 17);
  Entry.hw.setDigitalPortValue("vibrator_mode", a);
  Entry.hw.setDigitalPortValue("vibrator_on", b);
  Entry.hw.setDigitalPortValue("vibrator_off", c);
  Entry.hw.setDigitalPortValue("vibrator_total", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.vibrator_mode;
  delete Entry.hw.sendQueue.vibrator_on;
  delete Entry.hw.sendQueue.vibrator_off;
  delete Entry.hw.sendQueue.vibrator_total;
}, transferIrMessage:function(a) {
  a = Math.max(a, 0);
  a = Math.min(a, 127);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("irmessage_data", a);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.irmessage_data;
}, transferMotorSingle:function(a, b, c) {
  c = Math.max(c, 0);
  c = Math.min(c, 4096);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("motorsingle_target", a);
  Entry.hw.setDigitalPortValue("motorsingle_direction", b);
  Entry.hw.setDigitalPortValue("motorsingle_value", c);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.motorsingle_target;
  delete Entry.hw.sendQueue.motorsingle_direction;
  delete Entry.hw.sendQueue.motorsingle_value;
}, transferCommand:function(a, b, c) {
  Entry.hw.setDigitalPortValue("target", a);
  Entry.hw.setDigitalPortValue("command_command", b);
  Entry.hw.setDigitalPortValue("command_option", c);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.command_command;
  delete Entry.hw.sendQueue.command_option;
}, transferControlDouble:function(a, b) {
  a = Math.max(a, -100);
  a = Math.min(a, 100);
  b = Math.max(b, 0);
  b = Math.min(b, 100);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("control_wheel", a);
  Entry.hw.setDigitalPortValue("control_accel", b);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.control_wheel;
  delete Entry.hw.sendQueue.control_accel;
}, transferControlQuad:function(a, b, c, d) {
  a = Math.max(a, -100);
  a = Math.min(a, 100);
  b = Math.max(b, -100);
  b = Math.min(b, 100);
  c = Math.max(c, -100);
  c = Math.min(c, 100);
  d = Math.max(d, -100);
  d = Math.min(d, 100);
  Entry.hw.setDigitalPortValue("target", 16);
  Entry.hw.setDigitalPortValue("control_roll", a);
  Entry.hw.setDigitalPortValue("control_pitch", b);
  Entry.hw.setDigitalPortValue("control_yaw", c);
  Entry.hw.setDigitalPortValue("control_throttle", d);
  Entry.hw.update();
  delete Entry.hw.sendQueue.target;
  delete Entry.hw.sendQueue.control_roll;
  delete Entry.hw.sendQueue.control_pitch;
  delete Entry.hw.sendQueue.control_yaw;
  delete Entry.hw.sendQueue.control_throttle;
}, getData:function(a, b) {
  return Entry.hw.portData[b];
}, setLightManual:function(a, b, c, d) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferLightManual(b, c, d), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setBuzzerStop:function(a) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferbuzzer(0, 0, 0), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setBuzzerMute:function(a, b, c, d) {
  b = Math.max(b, 0);
  b = Math.min(b, 6E4);
  var e = 40;
  c && (e = b);
  switch(this.checkFinish(a, e)) {
    case "Start":
      return c = 2, d && (c = 1), this.transferbuzzer(c, 238, b), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setBuzzerScale:function(a, b, c, d, e, f) {
  d = Math.max(d, 0);
  d = Math.min(d, 6E4);
  var g = 40;
  e && (g = d);
  switch(this.checkFinish(a, g)) {
    case "Start":
      return e = 4, f && (e = 3), this.transferbuzzer(e, 12 * b + c, d), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setBuzzerHz:function(a, b, c, d, e) {
  c = Math.max(c, 0);
  c = Math.min(c, 6E4);
  var f = 40;
  d && (f = c);
  switch(this.checkFinish(a, f)) {
    case "Start":
      return d = 6, e && (d = 5), b = Math.max(b, 1), b = Math.min(b, 63999), this.transferbuzzer(d, b, c), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setVibratorStop:function(a) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferVibrator(0, 0, 0, 0), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setVibrator:function(a, b, c, d, e, f) {
  d = Math.max(d, 0);
  d = Math.min(d, 6E4);
  var g = 40;
  e && (g = d);
  switch(this.checkFinish(a, g)) {
    case "Start":
      return e = 2, f && (e = 1), this.transferVibrator(e, b, c, d), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, sendIrMessage:function(a, b) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferIrMessage(b), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, sendStop:function(a) {
  return this.sendCommand(a, 16, 36, 0);
}, sendCommand:function(a, b, c, d) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferCommand(b, c, d), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setMotorSingle:function(a, b, c, d) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferMotorSingle(b, c, d), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setModeVehicle:function(a, b) {
  switch(this.checkFinish(a, 40)) {
    case "Start":
      return this.transferCommand(16, 16, b), this.transferControlQuad(0, 0, 0, 0), this.transferControlDouble(0, 0), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, setEventFlight:function(a, b, c) {
  switch(this.checkFinish(a, c)) {
    case "Start":
      return this.transferCommand(16, 34, b), this.transferControlQuad(0, 0, 0, 0), a;
    case "Running":
      return a;
    case "Finish":
      return a.callReturn();
    default:
      return a.callReturn();
  }
}, sendControlQuadSingle:function(a, b, c, d, e) {
  var f = 40;
  e && (f = d);
  switch(this.checkFinish(a, f)) {
    case "Start":
      return c = Math.max(c, -100), c = Math.min(c, 100), Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue(b, c), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[b], a;
    case "Running":
      return a;
    case "Finish":
      return e && (Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue(b, 0), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[b]), a.callReturn();
    default:
      return a.callReturn();
  }
}, sendControlQuad:function(a, b, c, d, e, f, g) {
  var h = 40;
  g && (h = f);
  switch(this.checkFinish(a, h)) {
    case "Start":
      return this.transferControlQuad(b, c, d, e), a;
    case "Running":
      return a;
    case "Finish":
      return g && this.transferControlQuad(0, 0, 0, 0), a.callReturn();
    default:
      return a.callReturn();
  }
}};
Entry.Cobl = {name:"cobl", setZero:function() {
  for (var a = 0;14 > a;a++) {
    Entry.hw.sendQueue[a] = 0;
  }
  Entry.hw.update();
}};
Blockly.Blocks.cobl_read_ultrason = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ucd08\uc74c\ud30c \uac70\ub9ac\uc7ac\uae30(0~400)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_ultrason = function(a, b) {
  return Entry.hw.getAnalogPortValue("ultrason");
};
Blockly.Blocks.cobl_read_potenmeter = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uac00\ubcc0\uc800\ud56d \uc77d\uae30(0~1023)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_potenmeter = function(a, b) {
  console.log("cobl_read_potenmeter");
  return Entry.hw.getAnalogPortValue("potenmeter");
};
Blockly.Blocks.cobl_read_irread1 = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("IR1 \uc77d\uae30(0~1023)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_irread1 = function(a, b) {
  return Entry.hw.getAnalogPortValue("potenmeter");
};
Blockly.Blocks.cobl_read_irread2 = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("IR2 \uc77d\uae30(0~1023)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_irread2 = function(a, b) {
  b.getValue("irread2", b);
  return Entry.hw.getAnalogPortValue("irread2");
};
Blockly.Blocks.cobl_read_joyx = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc870\uc774\uc2a4\ud2f1X\ucd95 \uc77d\uae30(1,0,-1)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_joyx = function(a, b) {
  return Entry.hw.getAnalogPortValue("joyx");
};
Blockly.Blocks.cobl_read_joyy = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc870\uc774\uc2a4\ud2f1Y\ucd95 \uc77d\uae30(1,0,-1)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_joyy = function(a, b) {
  return Entry.hw.getAnalogPortValue("joyy");
};
Blockly.Blocks.cobl_read_sens1 = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc13c\uc11c1 \uc77d\uae30(0~1023)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_sens1 = function(a, b) {
  return Entry.hw.getAnalogPortValue("sens1");
};
Blockly.Blocks.cobl_read_sens2 = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc13c\uc11c2 \uc77d\uae30(0~1023)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_sens2 = function(a, b) {
  return Entry.hw.getAnalogPortValue("sens2");
};
Blockly.Blocks.cobl_read_tilt = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uae30\uc6b8\uae30\uc13c\uc11c \uc77d\uae30(0~4)");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_tilt = function(a, b) {
  return Entry.hw.getAnalogPortValue("tilt");
};
Blockly.Blocks.cobl_get_port_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.cobl_get_port_number = function(a, b) {
  return b.getStringField("PORT");
};
Blockly.Blocks.cobl_read_temps = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc628\ub3c4\uc13c\uc11c \uc77d\uae30@\ud3ec\ud2b8");
  this.appendValueInput("VALUE").setCheck("Number");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_temps = function(a, b) {
  a = b.getValue("VALUE", b);
  if (1 == a) {
    return Entry.hw.getAnalogPortValue("temps1");
  }
  if (2 == a) {
    return Entry.hw.getAnalogPortValue("temps2");
  }
};
Blockly.Blocks.cobl_read_light = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubc1d\uae30\uc13c\uc11c \uc77d\uae30@\ud3ec\ud2b8");
  this.appendValueInput("VALUE").setCheck("Number");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.cobl_read_light = function(a, b) {
  a = b.getValue("VALUE", b);
  if (1 == a) {
    return Entry.hw.getAnalogPortValue("light1");
  }
  if (2 == a) {
    return Entry.hw.getAnalogPortValue("light2");
  }
};
Blockly.Blocks.cobl_read_btn = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\ubc84\ud2bc\uc13c\uc11c \uc77d\uae30@\ud3ec\ud2b8");
  this.appendValueInput("VALUE").setCheck("Number");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.cobl_read_btn = function(a, b) {
  a = b.getValue("VALUE", b);
  if (1 == a) {
    return Entry.hw.getDigitalPortValue("btn1");
  }
  if (2 == a) {
    return Entry.hw.getDigitalPortValue("btn2");
  }
};
Blockly.Blocks.cobl_led_control = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("Rainbow LED");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["OFF", "OFF"], ["Red", "Red"], ["Orange", "Orange"], ["Yellow", "Yellow"], ["Green", "Green"], ["Blue", "Blue"], ["Dark Blue", "Dark Blue"], ["Purple", "Purple"], ["White", "White"]]), "OPERATOR");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.cobl_led_control = function(a, b) {
  a = b.getStringField("PORT");
  var c = b.getStringField("OPERATOR");
  Entry.hw.setDigitalPortValue("RainBowLED_IDX", a);
  Entry.hw.setDigitalPortValue("RainBowLED_COL", c);
  return b.callReturn();
};
Blockly.Blocks.cobl_text = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldTextInput("cobl"), "NAME");
  this.setOutput(!0, "String");
  this.setInputsInline(!0);
}};
Entry.block.cobl_text = function(a, b) {
  return b.getStringField("NAME");
};
Blockly.Blocks.cobl_servo_angle_control = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("Servo");
  this.appendValueInput("PORT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("Angle-");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("(15~165)");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.cobl_servo_angle_control = function(a, b) {
  console.log("servo - test");
  a = b.getNumberValue("PORT");
  var c = b.getNumberValue("VALUE"), c = Math.round(c), c = Math.max(c, 15), c = Math.min(c, 165);
  1 == a && (console.log("servo 1  degree " + c), Entry.hw.setDigitalPortValue("Servo1", c));
  2 == a && (console.log("servo 2 degree " + c), Entry.hw.setDigitalPortValue("Servo2", c));
  return b.callReturn();
};
Blockly.Blocks.cobl_melody = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("Melody");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["(Low)So", "L_So"], ["(Low)So#", "L_So#"], ["(Low)La", "L_La"], ["(Low)La#", "L_La#"], ["(Low)Ti", "L_Ti"], ["Do", "Do"], ["Do#", "Do#"], ["Re", "Re"], ["Re#", "Re#"], ["Mi", "Mi"], ["Fa", "Fa"], ["Fa#", "Fa#"], ["So", "So"], ["So#", "So#"], ["La", "La"], ["La#", "La#"], ["Ti", "Ti"], ["(High)Do", "H_Do"], ["(High)Do#", "H_Do#"], ["(High)Re", "H_Re"], ["(High)R2#", "H_Re#"], ["(High)Mi", "H_Mi"], ["(High)Fa", "H_Fa"]]), "MELODY");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.cobl_melody = function(a, b) {
  a = b.getStringField("MELODY");
  console.log("cobl_melody" + a);
  Entry.hw.setDigitalPortValue("Melody", a);
  return b.callReturn();
};
Blockly.Blocks.cobl_dcmotor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("DcMotor");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"]]), "MOTOR");
  this.appendDummyInput().appendField(" ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1.Clockwise", "1"], ["2.Counter Clockwise", "2"], ["3.Stop", "3"]]), "DIRECTION");
  this.appendDummyInput().appendField(" Speed");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"]]), "SPEED");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.cobl_dcmotor = function(a, b) {
  a = b.getStringField("MOTOR");
  var c = b.getStringField("DIRECTION"), d = b.getStringField("SPEED");
  console.log("MOTOR" + a + "  Direction" + c + "  speed" + d);
  1 == a && (Entry.hw.setDigitalPortValue("DC1_DIR", c), Entry.hw.setDigitalPortValue("DC1_SPEED", d));
  2 == a && (Entry.hw.setDigitalPortValue("DC2_DIR", c), Entry.hw.setDigitalPortValue("DC2_SPEED", d));
  return b.callReturn();
};
Blockly.Blocks.cobl_extention_port = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("Extention Port");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"]]), "PORT");
  this.appendDummyInput().appendField(" Level");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"]]), "LEVEL");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.cobl_extention_port = function(a, b) {
  a = b.getStringField("PORT");
  var c = b.getStringField("LEVEL");
  1 == a && Entry.hw.setDigitalPortValue("EXUSB1", c);
  2 == a && Entry.hw.setDigitalPortValue("EXUSB2", c);
  return b.callReturn();
};
Blockly.Blocks.cobl_external_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("External LED ");
  this.appendValueInput("LED").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(" (1~64)");
  this.appendDummyInput().appendField(" R ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]]), "RED");
  this.appendDummyInput().appendField(" G ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]]), "GREEN");
  this.appendDummyInput().appendField(" B ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]]), "BLUE");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.cobl_external_led = function(a, b) {
  a = b.getNumberValue("LED");
  var c = b.getStringField("RED"), d = b.getStringField("GREEN"), e = b.getStringField("BLUE");
  Entry.hw.setDigitalPortValue("ELED_IDX", a);
  Entry.hw.setDigitalPortValue("ELED_R", c);
  Entry.hw.setDigitalPortValue("ELED_G", d);
  Entry.hw.setDigitalPortValue("ELED_B", e);
  return b.callReturn();
};
Blockly.Blocks.cobl_7_segment = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("7 Segment");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField("(0~9999)");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.cobl_7_segment = function(a, b) {
  a = b.getNumberValue("VALUE");
  Entry.hw.setDigitalPortValue("7SEG", a);
  return b.callReturn();
};
Entry.Codestar = {name:"codestar", setZero:function() {
  Entry.hw.sendQueue.readablePorts = [];
  for (var a = 0;20 > a;a++) {
    Entry.hw.sendQueue[a] = 0, Entry.hw.sendQueue.readablePorts.push(a);
  }
  Entry.hw.update();
}, monitorTemplate:{imgPath:"hw/codestar.png", width:333, height:409, listPorts:{13:{name:"\uc9c4\ub3d9\ubaa8\ud130", type:"output", pos:{x:0, y:0}}, 6:{name:"\uc9c4\ub3d9\uc13c\uc11c", type:"input", pos:{x:0, y:0}}}, ports:{7:{name:"\ube68\uac04\uc0c9", type:"output", pos:{x:238, y:108}}, 8:{name:"\ud30c\ub780\uc0c9", type:"output", pos:{x:265, y:126}}, 9:{name:"3\uc0c9 \ube68\uac04\uc0c9", type:"output", pos:{x:292, y:34}}, 10:{name:"3\uc0c9 \ub179\uc0c9", type:"output", pos:{x:292, y:34}}, 11:{name:"3\uc0c9 \ud30c\ub780\uc0c9", 
type:"output", pos:{x:292, y:34}}, 12:{name:"\ubc84\ud2bc", type:"input", pos:{x:248, y:142}}, a0:{name:"\uc67c\ucabd \ubcbd\uac10\uc9c0", type:"input", pos:{x:24, y:231}}, a2:{name:"\ub9c8\uc774\ud06c", type:"input", pos:{x:225, y:67}}, a3:{name:"\ubd80\uc800", type:"output", pos:{x:283, y:105}}, a4:{name:"\uc67c\ucabd \ub77c\uc778\uac10\uc9c0", type:"input", pos:{x:37, y:353}}, a5:{name:"\uc624\ub978\ucabd \ub77c\uc778\uac10\uc9c0", type:"input", pos:{x:50, y:368}}, a6:{name:"\uc870\ub3c4\uc13c\uc11c", 
type:"input", pos:{x:273, y:22}}, a7:{name:"\uc624\ub978\ucabd \ubcbd\uac10\uc9c0", type:"input", pos:{x:103, y:381}}, temperature:{name:"\uc628\ub3c4\uc13c\uc11c", type:"input", pos:{x:311, y:238}}, sonar:{name:"\ucd08\uc74c\ud30c", type:"input", pos:{x:7, y:277}}, leftwheel:{name:"\uc67c\ucabd \ubc14\ud034", type:"output", pos:{x:177, y:370}}, rightwheel:{name:"\uc624\ub978\ucabd \ubc14\ud034", type:"output", pos:{x:83, y:218}}}, mode:"both"}};
Entry.EV3 = {PORT_MAP:{A:0, B:0, C:0, D:0, 1:void 0, 2:void 0, 3:void 0, 4:void 0}, motorMovementTypes:{Degrees:0, Power:1}, deviceTypes:{NxtTouch:1, NxtLight:2, NxtSound:3, NxtColor:4, NxtUltrasonic:5, NxtTemperature:6, LMotor:7, MMotor:8, Touch:16, Color:29, Ultrasonic:30, Gyroscope:32, Infrared:33, Initializing:125, Empty:126, WrongPort:127, Unknown:255}, colorSensorValue:" 000000 0000FF 00FF00 FFFF00 FF0000 FFFFFF A52A2A".split(" "), timeouts:[], removeTimeout:function(a) {
  clearTimeout(a);
  var b = this.timeouts;
  a = b.indexOf(a);
  0 <= a && b.splice(a, 1);
}, removeAllTimeouts:function() {
  var a = this.timeouts, b;
  for (b in a) {
    clearTimeout(a[b]);
  }
  this.timeouts = [];
}, setZero:function() {
  var a = this.PORT_MAP;
  Object.keys(a).forEach(function(b) {
    /[A-D]/i.test(b) ? Entry.hw.sendQueue[b] = {type:Entry.EV3.motorMovementTypes.Power, power:0} : Entry.hw.sendQueue[b] = a[b];
  });
  Entry.hw.update();
}, name:"EV3"};
Blockly.Blocks.ev3_get_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"]]), "PORT").appendField("\uc758 \uac12");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.ev3_get_sensor_value = function(a, b) {
  b.getStringField("PORT", b);
  a = Entry.hw.getDigitalPortValue(b.getNumberField("PORT", b));
  var c;
  $.isPlainObject(a) && (c = a.siValue || 0);
  return c;
};
Blockly.Blocks.ev3_touch_sensor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"]]), "PORT").appendField("\uc758 \ud130\uce58\uc13c\uc11c\uac00 \uc791\ub3d9\ub418\uc5c8\ub294\uac00?");
  this.setOutput(!0, "Boolean");
  this.setInputsInline(!0);
}};
Entry.block.ev3_touch_sensor = function(a, b) {
  b.getStringField("PORT", b);
  a = Entry.hw.getDigitalPortValue(b.getNumberField("PORT", b));
  b = !1;
  a.type == Entry.EV3.deviceTypes.Touch && 1 <= Number(a.siValue) && (b = !0);
  return b;
};
Blockly.Blocks.ev3_color_sensor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"]]), "PORT").appendField("\uc758 ").appendField(new Blockly.FieldDropdown([["RGB", "RGB"], ["R", "R"], ["G", "G"], ["B", "B"]]), "RGB").appendField("\uac12");
  this.setOutput(!0, "String");
  this.setInputsInline(!0);
}};
Entry.block.ev3_color_sensor = function(a, b) {
  b.getStringField("PORT", b);
  a = b.getStringField("RGB", b);
  b = Entry.hw.getDigitalPortValue(b.getNumberField("PORT", b));
  var c = "";
  if (b.type == Entry.EV3.deviceTypes.Color) {
    if (0 == b.siValue) {
      c = "";
    } else {
      switch(a) {
        case "RGB":
          c = Entry.EV3.colorSensorValue[b.siValue];
          break;
        case "R":
          c = Entry.EV3.colorSensorValue[b.siValue].substring(0, 2);
          break;
        case "G":
          c = Entry.EV3.colorSensorValue[b.siValue].substring(2, 4);
          break;
        case "B":
          c = Entry.EV3.colorSensorValue[b.siValue].substring(4, 6);
      }
    }
  } else {
    c = "\uceec\ub7ec \uc13c\uc11c \uc544\ub2d8";
  }
  return c;
};
Blockly.Blocks.ev3_motor_power = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["A", "A"], ["B", "B"], ["C", "C"], ["D", "D"]]), "PORT").appendField("\uc758 \uac12\uc744");
  this.appendValueInput("VALUE").setCheck(["Number"]);
  this.appendDummyInput().appendField("\uc73c\ub85c \ucd9c\ub825");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.ev3_motor_power = function(a, b) {
  a = b.getStringField("PORT", b);
  var c = b.getValue("VALUE", b);
  Entry.hw.sendQueue[a] = {id:Math.floor(1E5 * Math.random(), 0), type:Entry.EV3.motorMovementTypes.Power, power:c};
  return b.callReturn();
};
Blockly.Blocks.ev3_motor_power_on_time = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["A", "A"], ["B", "B"], ["C", "C"], ["D", "D"]]), "PORT").appendField("\uc758 \uac12\uc744");
  this.appendValueInput("TIME").setCheck(["Number"]);
  this.appendDummyInput().appendField("\ucd08 \ub3d9\uc548");
  this.appendValueInput("VALUE").setCheck(["Number"]);
  this.appendDummyInput().appendField("\uc73c\ub85c \ucd9c\ub825");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.ev3_motor_power_on_time = function(a, b) {
  a = b.getStringField("PORT", b);
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    Entry.hw.sendQueue[a] = {id:Math.floor(1E5 * Math.random(), 0), type:Entry.EV3.motorMovementTypes.Power, power:0};
    return b.callReturn();
  }
  var c = b.getValue("TIME", b), d = b.getValue("VALUE", b);
  b.isStart = !0;
  b.timeFlag = 1;
  Entry.hw.sendQueue[a] = {id:Math.floor(1E5 * Math.random(), 0), type:Entry.EV3.motorMovementTypes.Power, power:d};
  var e = setTimeout(function() {
    b.timeFlag = 0;
    Entry.EV3.removeTimeout(e);
  }, 1E3 * c);
  Entry.EV3.timeouts.push(e);
  return b;
};
Blockly.Blocks.ev3_motor_degrees = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["A", "A"], ["B", "B"], ["C", "C"], ["D", "D"]]), "PORT").appendField("\uc758 \uac12\uc744").appendField(new Blockly.FieldDropdown([["\uc2dc\uacc4\ubc29\ud5a5", "CW"], ["\ubc18\uc2dc\uacc4\ubc29\ud5a5", "CCW"]]), "DIRECTION").appendField("\uc73c\ub85c ");
  this.appendValueInput("DEGREE").setCheck(["Number"]);
  this.appendDummyInput().appendField("\ub3c4 \ub9cc\ud07c \ud68c\uc804");
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.ev3_motor_degrees = function(a, b) {
  a = b.getStringField("PORT", b);
  var c = b.getValue("DEGREE", b);
  0 >= c ? c = 0 : 720 <= c && (c = 720);
  var d = b.getStringField("DIRECTION", b);
  Entry.hw.sendQueue[a] = {id:Math.floor(1E5 * Math.random(), 0), type:Entry.EV3.motorMovementTypes.Degrees, degree:c, power:"CW" == d ? 50 : -50};
  return b.callReturn();
};
Entry.Hamster = {PORT_MAP:{leftWheel:0, rightWheel:0, buzzer:0, outputA:0, outputB:0, leftLed:0, rightLed:0, note:0, lineTracerMode:0, lineTracerModeId:0, lineTracerSpeed:5, ioModeA:0, ioModeB:0}, setZero:function() {
  var a = Entry.Hamster.PORT_MAP, b = Entry.hw.sendQueue, c;
  for (c in a) {
    b[c] = a[c];
  }
  Entry.hw.update();
  a = Entry.Hamster;
  a.lineTracerModeId = 0;
  a.lineTracerStateId = -1;
  a.tempo = 60;
  a.removeAllTimeouts();
}, lineTracerModeId:0, lineTracerStateId:-1, tempo:60, timeouts:[], removeTimeout:function(a) {
  clearTimeout(a);
  var b = this.timeouts;
  a = b.indexOf(a);
  0 <= a && b.splice(a, 1);
}, removeAllTimeouts:function() {
  var a = this.timeouts, b;
  for (b in a) {
    clearTimeout(a[b]);
  }
  this.timeouts = [];
}, setLineTracerMode:function(a, b) {
  this.lineTracerModeId = this.lineTracerModeId + 1 & 255;
  a.lineTracerMode = b;
  a.lineTracerModeId = this.lineTracerModeId;
}, name:"hamster", monitorTemplate:{imgPath:"hw/hamster.png", width:256, height:256, listPorts:{temperature:{name:Lang.Blocks.HAMSTER_sensor_temperature, type:"input", pos:{x:0, y:0}}, inputA:{name:Lang.Blocks.HAMSTER_sensor_input_a, type:"input", pos:{x:0, y:0}}, inputB:{name:Lang.Blocks.HAMSTER_sensor_input_b, type:"input", pos:{x:0, y:0}}, accelerationX:{name:Lang.Blocks.HAMSTER_sensor_acceleration_x, type:"input", pos:{x:0, y:0}}, accelerationY:{name:Lang.Blocks.HAMSTER_sensor_acceleration_y, 
type:"input", pos:{x:0, y:0}}, accelerationZ:{name:Lang.Blocks.HAMSTER_sensor_acceleration_z, type:"input", pos:{x:0, y:0}}, buzzer:{name:Lang.Hw.buzzer, type:"output", pos:{x:0, y:0}}, note:{name:Lang.Hw.note, type:"output", pos:{x:0, y:0}}, outputA:{name:Lang.Hw.output + "A", type:"output", pos:{x:0, y:0}}, outputB:{name:Lang.Hw.output + "B", type:"output", pos:{x:0, y:0}}}, ports:{leftProximity:{name:Lang.Blocks.HAMSTER_sensor_left_proximity, type:"input", pos:{x:122, y:156}}, rightProximity:{name:Lang.Blocks.HAMSTER_sensor_right_proximity, 
type:"input", pos:{x:10, y:108}}, leftFloor:{name:Lang.Blocks.HAMSTER_sensor_left_floor, type:"input", pos:{x:100, y:234}}, rightFloor:{name:Lang.Blocks.HAMSTER_sensor_right_floor, type:"input", pos:{x:13, y:180}}, light:{name:Lang.Blocks.HAMSTER_sensor_light, type:"input", pos:{x:56, y:189}}, leftWheel:{name:Lang.Hw.leftWheel, type:"output", pos:{x:209, y:115}}, rightWheel:{name:Lang.Hw.rightWheel, type:"output", pos:{x:98, y:30}}, leftLed:{name:Lang.Hw.left + " " + Lang.Hw.led_en, type:"output", 
pos:{x:87, y:210}}, rightLed:{name:Lang.Hw.right + " " + Lang.Hw.led_en, type:"output", pos:{x:24, y:168}}}, mode:"both"}};
Blockly.Blocks.hamster_hand_found = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_hand_found);
  this.setOutput(!0, "Boolean");
  this.setInputsInline(!0);
}};
Entry.block.hamster_hand_found = function(a, b) {
  a = Entry.hw.portData;
  return 50 < a.leftProximity || 50 < a.rightProximity;
};
Blockly.Blocks.hamster_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], 
  [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]]), "DEVICE");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.hamster_value = function(a, b) {
  a = Entry.hw.portData;
  b = b.getField("DEVICE");
  return a[b];
};
Blockly.Blocks.hamster_move_forward_once = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_move_forward_once).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_move_forward_once = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = Entry.hw.portData;
  if (b.isStart) {
    if (b.isMoving) {
      switch(b.boardState) {
        case 1:
          2 > b.count ? (50 > c.leftFloor && 50 > c.rightFloor ? b.count++ : b.count = 0, c = c.leftFloor - c.rightFloor, a.leftWheel = 45 + .25 * c, a.rightWheel = 45 - .25 * c) : (b.count = 0, b.boardState = 2);
          break;
        case 2:
          c = c.leftFloor - c.rightFloor;
          a.leftWheel = 45 + .25 * c;
          a.rightWheel = 45 - .25 * c;
          b.boardState = 3;
          var d = setTimeout(function() {
            b.boardState = 4;
            Entry.Hamster.removeTimeout(d);
          }, 250);
          Entry.Hamster.timeouts.push(d);
          break;
        case 3:
          c = c.leftFloor - c.rightFloor;
          a.leftWheel = 45 + .25 * c;
          a.rightWheel = 45 - .25 * c;
          break;
        case 4:
          a.leftWheel = 0, a.rightWheel = 0, b.boardState = 0, b.isMoving = !1;
      }
      return b;
    }
    delete b.isStart;
    delete b.isMoving;
    delete b.count;
    delete b.boardState;
    Entry.engine.isContinue = !1;
    a.leftWheel = 0;
    a.rightWheel = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.isMoving = !0;
  b.count = 0;
  b.boardState = 1;
  a.leftWheel = 45;
  a.rightWheel = 45;
  Entry.Hamster.setLineTracerMode(a, 0);
  return b;
};
Blockly.Blocks.hamster_turn_once = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_turn_once_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.HAMSTER_turn_once_left, "LEFT"], [Lang.Blocks.HAMSTER_turn_once_right, "RIGHT"]]), "DIRECTION").appendField(Lang.Blocks.HAMSTER_turn_once_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_turn_once = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = Entry.hw.portData;
  if (b.isStart) {
    if (b.isMoving) {
      if (b.isLeft) {
        switch(b.boardState) {
          case 1:
            2 > b.count ? 50 < c.leftFloor && b.count++ : (b.count = 0, b.boardState = 2);
            break;
          case 2:
            20 > c.leftFloor && (b.boardState = 3);
            break;
          case 3:
            2 > b.count ? 20 > c.leftFloor && b.count++ : (b.count = 0, b.boardState = 4);
            break;
          case 4:
            50 < c.leftFloor && (b.boardState = 5);
            break;
          case 5:
            c = c.leftFloor - c.rightFloor, -15 < c ? (a.leftWheel = 0, a.rightWheel = 0, b.boardState = 0, b.isMoving = !1) : (a.leftWheel = .5 * c, a.rightWheel = .5 * -c);
        }
      } else {
        switch(b.boardState) {
          case 1:
            2 > b.count ? 50 < c.rightFloor && b.count++ : (b.count = 0, b.boardState = 2);
            break;
          case 2:
            20 > c.rightFloor && (b.boardState = 3);
            break;
          case 3:
            2 > b.count ? 20 > c.rightFloor && b.count++ : (b.count = 0, b.boardState = 4);
            break;
          case 4:
            50 < c.rightFloor && (b.boardState = 5);
            break;
          case 5:
            c = c.rightFloor - c.leftFloor, -15 < c ? (a.leftWheel = 0, a.rightWheel = 0, b.boardState = 0, b.isMoving = !1) : (a.leftWheel = .5 * -c, a.rightWheel = .5 * c);
        }
      }
      return b;
    }
    delete b.isStart;
    delete b.isMoving;
    delete b.count;
    delete b.boardState;
    delete b.isLeft;
    Entry.engine.isContinue = !1;
    a.leftWheel = 0;
    a.rightWheel = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.isMoving = !0;
  b.count = 0;
  b.boardState = 1;
  "LEFT" == b.getField("DIRECTION", b) ? (b.isLeft = !0, a.leftWheel = -45, a.rightWheel = 45) : (b.isLeft = !1, a.leftWheel = 45, a.rightWheel = -45);
  Entry.Hamster.setLineTracerMode(a, 0);
  return b;
};
Blockly.Blocks.hamster_move_forward_for_secs = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_move_forward_for_secs_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_move_forward_for_secs_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_move_forward_for_secs = function(a, b) {
  a = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    a.leftWheel = 0;
    a.rightWheel = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.timeFlag = 1;
  a.leftWheel = 30;
  a.rightWheel = 30;
  Entry.Hamster.setLineTracerMode(a, 0);
  a = 1E3 * b.getNumberValue("VALUE");
  var c = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Hamster.removeTimeout(c);
  }, a);
  Entry.Hamster.timeouts.push(c);
  return b;
};
Blockly.Blocks.hamster_move_backward_for_secs = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_move_backward_for_secs_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_move_backward_for_secs_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_move_backward_for_secs = function(a, b) {
  a = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    a.leftWheel = 0;
    a.rightWheel = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.timeFlag = 1;
  a.leftWheel = -30;
  a.rightWheel = -30;
  Entry.Hamster.setLineTracerMode(a, 0);
  a = 1E3 * b.getNumberValue("VALUE");
  var c = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Hamster.removeTimeout(c);
  }, a);
  Entry.Hamster.timeouts.push(c);
  return b;
};
Blockly.Blocks.hamster_turn_for_secs = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_turn_for_secs_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.HAMSTER_turn_left, "LEFT"], [Lang.Blocks.HAMSTER_turn_right, "RIGHT"]]), "DIRECTION").appendField(Lang.Blocks.HAMSTER_turn_for_secs_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_turn_for_secs_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_turn_for_secs = function(a, b) {
  a = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    a.leftWheel = 0;
    a.rightWheel = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.timeFlag = 1;
  "LEFT" == b.getField("DIRECTION", b) ? (a.leftWheel = -30, a.rightWheel = 30) : (a.leftWheel = 30, a.rightWheel = -30);
  Entry.Hamster.setLineTracerMode(a, 0);
  a = 1E3 * b.getNumberValue("VALUE");
  var c = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Hamster.removeTimeout(c);
  }, a);
  Entry.Hamster.timeouts.push(c);
  return b;
};
Blockly.Blocks.hamster_change_both_wheels_by = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_change_both_wheels_by_1);
  this.appendValueInput("LEFT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_change_both_wheels_by_2);
  this.appendValueInput("RIGHT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_change_both_wheels_by_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_change_both_wheels_by = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getNumberValue("LEFT"), d = b.getNumberValue("RIGHT");
  a.leftWheel = void 0 != a.leftWheel ? a.leftWheel + c : c;
  a.rightWheel = void 0 != a.rightWheel ? a.rightWheel + d : d;
  Entry.Hamster.setLineTracerMode(a, 0);
  return b.callReturn();
};
Blockly.Blocks.hamster_set_both_wheels_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_set_both_wheels_to_1);
  this.appendValueInput("LEFT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_set_both_wheels_to_2);
  this.appendValueInput("RIGHT").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_set_both_wheels_to_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_set_both_wheels_to = function(a, b) {
  a = Entry.hw.sendQueue;
  a.leftWheel = b.getNumberValue("LEFT");
  a.rightWheel = b.getNumberValue("RIGHT");
  Entry.Hamster.setLineTracerMode(a, 0);
  return b.callReturn();
};
Blockly.Blocks.hamster_change_wheel_by = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_change_wheel_by_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]]), "DIRECTION").appendField(Lang.Blocks.HAMSTER_change_wheel_by_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_change_wheel_by_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_change_wheel_by = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getField("DIRECTION"), d = b.getNumberValue("VALUE");
  "LEFT" == c ? a.leftWheel = void 0 != a.leftWheel ? a.leftWheel + d : d : ("RIGHT" != c && (a.leftWheel = void 0 != a.leftWheel ? a.leftWheel + d : d), a.rightWheel = void 0 != a.rightWheel ? a.rightWheel + d : d);
  Entry.Hamster.setLineTracerMode(a, 0);
  return b.callReturn();
};
Blockly.Blocks.hamster_set_wheel_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_set_wheel_to_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]]), "DIRECTION").appendField(Lang.Blocks.HAMSTER_set_wheel_to_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_set_wheel_to_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_set_wheel_to = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getField("DIRECTION"), d = b.getNumberValue("VALUE");
  "LEFT" == c ? a.leftWheel = d : ("RIGHT" != c && (a.leftWheel = d), a.rightWheel = d);
  Entry.Hamster.setLineTracerMode(a, 0);
  return b.callReturn();
};
Blockly.Blocks.hamster_follow_line_using = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_follow_line_using_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]]), "COLOR").appendField(Lang.Blocks.HAMSTER_follow_line_using_2).appendField(new Blockly.FieldDropdown([[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_both_floor_sensors, "BOTH"]]), "DIRECTION").appendField(Lang.Blocks.HAMSTER_follow_line_using_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + 
  "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_follow_line_using = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getField("COLOR"), d = b.getField("DIRECTION"), e = 1;
  "RIGHT" == d ? e = 2 : "BOTH" == d && (e = 3);
  "WHITE" == c && (e += 7);
  a.leftWheel = 0;
  a.rightWheel = 0;
  Entry.Hamster.setLineTracerMode(a, e);
  return b.callReturn();
};
Blockly.Blocks.hamster_follow_line_until = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_follow_line_until_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]]), "COLOR").appendField(Lang.Blocks.HAMSTER_follow_line_until_2).appendField(new Blockly.FieldDropdown([[Lang.Blocks.HAMSTER_left_intersection, "LEFT"], [Lang.Blocks.HAMSTER_right_intersection, "RIGHT"], [Lang.Blocks.HAMSTER_front_intersection, "FRONT"], [Lang.Blocks.HAMSTER_rear_intersection, "REAR"]]), 
  "DIRECTION").appendField(Lang.Blocks.HAMSTER_follow_line_until_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_follow_line_until = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = Entry.hw.portData, d = b.getField("COLOR"), e = b.getField("DIRECTION"), f = 4;
  "RIGHT" == e ? f = 5 : "FRONT" == e ? f = 6 : "REAR" == e && (f = 7);
  "WHITE" == d && (f += 7);
  if (b.isStart) {
    if (d = Entry.Hamster, c.lineTracerStateId != d.lineTracerStateId && (d.lineTracerStateId = c.lineTracerStateId, 64 == c.lineTracerState)) {
      return delete b.isStart, Entry.engine.isContinue = !1, d.setLineTracerMode(a, 0), b.callReturn();
    }
  } else {
    b.isStart = !0, a.leftWheel = 0, a.rightWheel = 0, Entry.Hamster.setLineTracerMode(a, f);
  }
  return b;
};
Blockly.Blocks.hamster_set_following_speed_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_set_following_speed_to_1).appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]]), "SPEED").appendField(Lang.Blocks.HAMSTER_set_following_speed_to_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_set_following_speed_to = function(a, b) {
  Entry.hw.sendQueue.lineTracerSpeed = Number(b.getField("SPEED", b));
  return b.callReturn();
};
Blockly.Blocks.hamster_stop = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_stop).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_stop = function(a, b) {
  a = Entry.hw.sendQueue;
  a.leftWheel = 0;
  a.rightWheel = 0;
  Entry.Hamster.setLineTracerMode(a, 0);
  return b.callReturn();
};
Blockly.Blocks.hamster_set_led_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_set_led_to_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]]), "DIRECTION").appendField(Lang.Blocks.HAMSTER_set_led_to_2).appendField(new Blockly.FieldDropdown([[Lang.General.red, "4"], [Lang.General.yellow, "6"], [Lang.General.green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.General.blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, 
  "5"], [Lang.Blocks.HAMSTER_color_white, "7"]]), "COLOR").appendField(Lang.Blocks.HAMSTER_set_led_to_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_set_led_to = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getField("DIRECTION", b), d = Number(b.getField("COLOR", b));
  "LEFT" == c ? a.leftLed = d : ("RIGHT" != c && (a.leftLed = d), a.rightLed = d);
  return b.callReturn();
};
Blockly.Blocks.hamster_clear_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_clear_led_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]]), "DIRECTION").appendField(Lang.Blocks.HAMSTER_clear_led_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_clear_led = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getField("DIRECTION", b);
  "LEFT" == c ? a.leftLed = 0 : ("RIGHT" != c && (a.leftLed = 0), a.rightLed = 0);
  return b.callReturn();
};
Blockly.Blocks.hamster_beep = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_beep).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_beep = function(a, b) {
  a = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    a.buzzer = 0;
    return b.callReturn();
  }
  b.isStart = !0;
  b.timeFlag = 1;
  a.buzzer = 440;
  a.note = 0;
  var c = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Hamster.removeTimeout(c);
  }, 200);
  Entry.Hamster.timeouts.push(c);
  return b;
};
Blockly.Blocks.hamster_change_buzzer_by = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_change_buzzer_by_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_change_buzzer_by_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_change_buzzer_by = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getNumberValue("VALUE");
  a.buzzer = void 0 != a.buzzer ? a.buzzer + c : c;
  a.note = 0;
  return b.callReturn();
};
Blockly.Blocks.hamster_set_buzzer_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_set_buzzer_to_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_set_buzzer_to_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_set_buzzer_to = function(a, b) {
  a = Entry.hw.sendQueue;
  a.buzzer = b.getNumberValue("VALUE");
  a.note = 0;
  return b.callReturn();
};
Blockly.Blocks.hamster_clear_buzzer = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_clear_buzzer).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_clear_buzzer = function(a, b) {
  a = Entry.hw.sendQueue;
  a.buzzer = 0;
  a.note = 0;
  return b.callReturn();
};
Blockly.Blocks.hamster_play_note_for = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_play_note_for_1).appendField(new Blockly.FieldDropdown([[Lang.General.note_c + "", "4"], [Lang.General.note_c + "#", "5"], [Lang.General.note_d + "", "6"], [Lang.General.note_e + "b", "7"], [Lang.General.note_e + "", "8"], [Lang.General.note_f + "", "9"], [Lang.General.note_f + "#", "10"], [Lang.General.note_g + "", "11"], [Lang.General.note_g + "#", "12"], [Lang.General.note_a + "", "13"], [Lang.General.note_b + "b", "14"], [Lang.General.note_b + 
  "", "15"]]), "NOTE").appendField(Lang.Blocks.HAMSTER_play_note_for_2).appendField(new Blockly.FieldDropdown([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]]), "OCTAVE").appendField(Lang.Blocks.HAMSTER_play_note_for_3);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_play_note_for_4).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_play_note_for = function(a, b) {
  var c = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    c.note = 0;
    return b.callReturn();
  }
  a = b.getNumberField("NOTE", b);
  var d = b.getNumberField("OCTAVE", b), e = 6E4 * b.getNumberValue("VALUE", b) / Entry.Hamster.tempo;
  b.isStart = !0;
  b.timeFlag = 1;
  c.buzzer = 0;
  c.note = a + 12 * (d - 1);
  if (100 < e) {
    var f = setTimeout(function() {
      c.note = 0;
      Entry.Hamster.removeTimeout(f);
    }, e - 100);
    Entry.Hamster.timeouts.push(f);
  }
  var g = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Hamster.removeTimeout(g);
  }, e);
  Entry.Hamster.timeouts.push(g);
  return b;
};
Blockly.Blocks.hamster_rest_for = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_rest_for_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_rest_for_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_rest_for = function(a, b) {
  a = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.isStart;
    delete b.timeFlag;
    Entry.engine.isContinue = !1;
    return b.callReturn();
  }
  b.isStart = !0;
  b.timeFlag = 1;
  var c = b.getNumberValue("VALUE"), c = 6E4 * c / Entry.Hamster.tempo;
  a.buzzer = 0;
  a.note = 0;
  var d = setTimeout(function() {
    b.timeFlag = 0;
    Entry.Hamster.removeTimeout(d);
  }, c);
  Entry.Hamster.timeouts.push(d);
  return b;
};
Blockly.Blocks.hamster_change_tempo_by = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_change_tempo_by_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_change_tempo_by_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_change_tempo_by = function(a, b) {
  Entry.Hamster.tempo += b.getNumberValue("VALUE");
  1 > Entry.Hamster.tempo && (Entry.Hamster.tempo = 1);
  return b.callReturn();
};
Blockly.Blocks.hamster_set_tempo_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_set_tempo_to_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_set_tempo_to_2).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_set_tempo_to = function(a, b) {
  Entry.Hamster.tempo = b.getNumberValue("VALUE");
  1 > Entry.Hamster.tempo && (Entry.Hamster.tempo = 1);
  return b.callReturn();
};
Blockly.Blocks.hamster_set_port_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_set_port_to_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_a_b, "AB"]]), "PORT").appendField(Lang.Blocks.HAMSTER_set_port_to_2).appendField(new Blockly.FieldDropdown([[Lang.Blocks.HAMSTER_analog_input, "0"], [Lang.Blocks.HAMSTER_digital_input, "1"], [Lang.Blocks.HAMSTER_servo_output, "8"], [Lang.Blocks.HAMSTER_pwm_output, "9"], [Lang.Blocks.HAMSTER_digital_output, 
  "10"]]), "MODE").appendField(Lang.Blocks.HAMSTER_set_port_to_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_set_port_to = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getField("PORT", b), d = Number(b.getField("MODE", b));
  "A" == c ? a.ioModeA = d : ("B" != c && (a.ioModeA = d), a.ioModeB = d);
  return b.callReturn();
};
Blockly.Blocks.hamster_change_output_by = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_change_output_by_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_a_b, "AB"]]), "PORT").appendField(Lang.Blocks.HAMSTER_change_output_by_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_change_output_by_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_change_output_by = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getField("PORT"), d = b.getNumberValue("VALUE");
  "A" == c ? a.outputA = void 0 != a.outputA ? a.outputA + d : d : ("B" != c && (a.outputA = void 0 != a.outputA ? a.outputA + d : d), a.outputB = void 0 != a.outputB ? a.outputB + d : d);
  return b.callReturn();
};
Blockly.Blocks.hamster_set_output_to = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_set_output_to_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_a_b, "AB"]]), "PORT").appendField(Lang.Blocks.HAMSTER_set_output_to_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_set_output_to_3).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.hamster_set_output_to = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getField("PORT"), d = b.getNumberValue("VALUE");
  "A" == c ? a.outputA = d : ("B" != c && (a.outputA = d), a.outputB = d);
  return b.callReturn();
};
Entry.Neobot = {name:"neobot", LOCAL_MAP:["IN1", "IN2", "IN3", "IR", "BAT"], REMOTE_MAP:"OUT1 OUT2 OUT3 DCR DCL SND FND OPT".split(" "), setZero:function() {
  for (var a in Entry.Neobot.REMOTE_MAP) {
    Entry.hw.sendQueue[Entry.Neobot.REMOTE_MAP[a]] = 0;
  }
  Entry.hw.update();
}, monitorTemplate:{imgPath:"hw/neobot.png", width:700, height:700, listPorts:{IR:{name:"\ub9ac\ubaa8\ucee8", type:"input", pos:{x:0, y:0}}, BAT:{name:"\ubca0\ud130\ub9ac", type:"input", pos:{x:0, y:0}}, SND:{name:Lang.Hw.buzzer, type:"output", pos:{x:0, y:0}}, FND:{name:"FND", type:"output", pos:{x:0, y:0}}}, ports:{IN1:{name:"IN1", type:"input", pos:{x:270, y:200}}, IN2:{name:"IN2", type:"input", pos:{x:325, y:200}}, IN3:{name:"IN3", type:"input", pos:{x:325, y:500}}, DCL:{name:"L-Motor", type:"output", 
pos:{x:270, y:500}}, DCR:{name:"R-Motor", type:"output", pos:{x:435, y:500}}, OUT1:{name:"OUT1", type:"output", pos:{x:380, y:200}}, OUT2:{name:"OUT2", type:"output", pos:{x:435, y:200}}, OUT3:{name:"OUT3", type:"output", pos:{x:380, y:500}}}, mode:"both"}};
Blockly.Blocks.neobot_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([["1\ubc88 \ud3ec\ud2b8", "IN1"], ["2\ubc88 \ud3ec\ud2b8", "IN2"], ["3\ubc88 \ud3ec\ud2b8", "IN3"], ["\ub9ac\ubaa8\ucee8", "IR"], ["\ubc30\ud130\ub9ac", "BAT"]]), "PORT").appendField(" \uac12");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.neobot_sensor_value = function(a, b) {
  a = b.getStringField("PORT");
  return Entry.hw.portData[a];
};
Blockly.Blocks.neobot_left_motor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc67c\ucabd\ubaa8\ud130\ub97c").appendField(new Blockly.FieldDropdown([["\uc55e\uc73c\ub85c", "16"], ["\ub4a4\ub85c", "32"]]), "DIRECTION").appendField(new Blockly.FieldDropdown([["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"], ["12", "12"], ["13", "13"], ["14", "14"], ["15", "15"]]), "SPEED").appendField("\uc758 \uc18d\ub3c4\ub85c \ud68c\uc804").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + 
  "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_left_motor = function(a, b) {
  a = b.getNumberField("SPEED");
  var c = b.getNumberField("DIRECTION");
  Entry.hw.sendQueue.DCL = a + c;
  return b.callReturn();
};
Blockly.Blocks.neobot_stop_left_motor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc67c\ucabd\ubaa8\ud130 \uc815\uc9c0").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_stop_left_motor = function(a, b) {
  Entry.hw.sendQueue.DCL = 0;
  return b.callReturn();
};
Blockly.Blocks.neobot_right_motor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc624\ub978\ucabd\ubaa8\ud130\ub97c").appendField(new Blockly.FieldDropdown([["\uc55e\uc73c\ub85c", "16"], ["\ub4a4\ub85c", "32"]]), "DIRECTION").appendField(new Blockly.FieldDropdown([["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"], ["12", "12"], ["13", "13"], ["14", "14"], ["15", "15"]]), "SPEED").appendField("\uc758 \uc18d\ub3c4\ub85c \ud68c\uc804").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + 
  "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_right_motor = function(a, b) {
  a = b.getNumberField("SPEED");
  var c = b.getNumberField("DIRECTION");
  Entry.hw.sendQueue.DCR = a + c;
  return b.callReturn();
};
Blockly.Blocks.neobot_stop_right_motor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc624\ub978\ucabd\ubaa8\ud130 \uc815\uc9c0").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_stop_right_motor = function(a, b) {
  Entry.hw.sendQueue.DCR = 0;
  return b.callReturn();
};
Blockly.Blocks.neobot_all_motor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uc591\ucabd \ubaa8\ud130\ub97c ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"], ["12", "12"], ["13", "13"], ["14", "14"], ["15", "15"]]), "SPEED").appendField(" \uc758 \uc18d\ub3c4\ub85c ").appendField(new Blockly.FieldDropdown([["\uc804\uc9c4", "1"], ["\ud6c4\uc9c4", "2"], ["\uc81c\uc790\ub9ac \uc88c\ud68c\uc804", "3"], ["\uc81c\uc790\ub9ac \uc6b0\ud68c\uc804", "4"], 
  ["\uc88c\ud68c\uc804", "5"], ["\uc6b0\ud68c\uc804", "6"]]), "DIRECTION").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_all_motor = function(a, b) {
  b.getNumberField("TYPE");
  a = b.getNumberField("SPEED");
  switch(b.getNumberField("DIRECTION")) {
    case 1:
      Entry.hw.sendQueue.DCL = 16 + a;
      Entry.hw.sendQueue.DCR = 16 + a;
      break;
    case 2:
      Entry.hw.sendQueue.DCL = 32 + a;
      Entry.hw.sendQueue.DCR = 32 + a;
      break;
    case 3:
      Entry.hw.sendQueue.DCL = 32 + a;
      Entry.hw.sendQueue.DCR = 16 + a;
      break;
    case 4:
      Entry.hw.sendQueue.DCL = 16 + a;
      Entry.hw.sendQueue.DCR = 32 + a;
      break;
    case 5:
      Entry.hw.sendQueue.DCL = 0;
      Entry.hw.sendQueue.DCR = 16 + a;
      break;
    case 6:
      Entry.hw.sendQueue.DCL = 16 + a, Entry.hw.sendQueue.DCR = 0;
  }
  return b.callReturn();
};
Blockly.Blocks.neobot_set_servo = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["OUT1", "1"], ["OUT2", "2"], ["OUT3", "3"]]), "PORT").appendField("\ud3ec\ud2b8\uc758 \uc11c\ubcf4\ubaa8\ud130\ub97c").appendField(new Blockly.FieldDropdown([["0\ub3c4", "0"], ["10\ub3c4", "10"], ["20\ub3c4", "20"], ["30\ub3c4", "30"], ["40\ub3c4", "40"], ["50\ub3c4", "50"], ["60\ub3c4", "60"], ["70\ub3c4", "70"], ["80\ub3c4", "80"], ["90\ub3c4", "90"], ["100\ub3c4", "100"], ["110\ub3c4", "110"], ["120\ub3c4", "120"], ["130\ub3c4", 
  "130"], ["140\ub3c4", "140"], ["150\ub3c4", "150"], ["160\ub3c4", "160"], ["170\ub3c4", "170"], ["180\ub3c4", "180"]]), "DEGREE").appendField(" \uc774\ub3d9").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_set_servo = function(a, b) {
  a = b.getNumberField("PORT");
  var c = b.getNumberField("DEGREE");
  Entry.hw.sendQueue["OUT" + a] = c;
  3 === a && (a = 4);
  Entry.hw.sendQueue.OPT |= a;
  return b.callReturn();
};
Blockly.Blocks.neobot_set_output = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["OUT1", "1"], ["OUT2", "2"], ["OUT3", "3"]]), "PORT").appendField("\ubc88 \ud3ec\ud2b8\uc758 \uac12\uc744");
  this.appendValueInput("VALUE").setCheck(["Number"]);
  this.appendDummyInput().appendField("\ub9cc\ud07c \ucd9c\ub825").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_set_output = function(a, b) {
  a = b.getStringField("PORT", b);
  var c = b.getNumberValue("VALUE", b), d = a;
  0 > c ? c = 0 : 255 < c && (c = 255);
  3 === d && (d = 4);
  Entry.hw.sendQueue["OUT" + a] = c;
  Entry.hw.sendQueue.OPT &= ~d;
  return b.callReturn();
};
Blockly.Blocks.neobot_set_fnd = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("FND\uc5d0");
  this.appendValueInput("VALUE").setCheck(["Number"]);
  this.appendDummyInput().appendField("\ucd9c\ub825").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_set_fnd = function(a, b) {
  a = b.getNumberValue("VALUE", b);
  255 < a ? a = 255 : 0 > a && (a = 0);
  Entry.hw.sendQueue.FND = a;
  return b.callReturn();
};
Blockly.Blocks.neobot_play_note_for = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("\uba5c\ub85c\ub514").appendField(new Blockly.FieldDropdown([["\ubb34\uc74c", "0"], [Lang.General.note_c, "1"], [Lang.General.note_c + "#", "2"], [Lang.General.note_d, "3"], [Lang.General.note_d + "#", "4"], [Lang.General.note_e, "5"], [Lang.General.note_f, "6"], [Lang.General.note_f + "#", "7"], [Lang.General.note_g, "8"], [Lang.General.note_g + "#", "9"], [Lang.General.note_a, "10"], [Lang.General.note_a + "#", "11"], [Lang.General.note_b, "12"]]), "NOTE").appendField("\uc744(\ub97c)").appendField(new Blockly.FieldDropdown([["1", 
  "0"], ["2", "1"], ["3", "2"], ["4", "3"], ["5", "4"], ["6", "5"]]), "OCTAVE").appendField("\uc625\ud0c0\ube0c\ub85c").appendField(new Blockly.FieldDropdown([["2\ubd84\uc74c\ud45c", "2"], ["4\ubd84\uc74c\ud45c", "4"], ["8\ubd84\uc74c\ud45c", "8"], ["16\ubd84\uc74c\ud45c", "16"]]), "DURATION");
  this.appendDummyInput().appendField("\uae38\uc774\ub9cc\ud07c \uc18c\ub9ac\ub0b4\uae30").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.neobot_play_note_for = function(a, b) {
  a = Entry.hw.sendQueue;
  if (b.isStart) {
    if (1 == b.timeFlag) {
      return b;
    }
    delete b.timeFlag;
    delete b.isStart;
    Entry.hw.sendQueue.SND = 0;
    Entry.engine.isContinue = !1;
    return b.callReturn();
  }
  var c = b.getNumberField("NOTE", b), d = b.getNumberField("OCTAVE", b), e = b.getNumberField("DURATION", b), c = c + 12 * d;
  b.isStart = !0;
  b.timeFlag = 1;
  65 < c && (c = 65);
  a.SND = c;
  setTimeout(function() {
    b.timeFlag = 0;
  }, 1 / e * 2E3);
  return b;
};
Entry.Roborobo_Roduino = {name:"roborobo_roduino", INSTRUCTION:{DIGITAL_READ:1, DIGITAL_SET_MODE:2, DIGITAL_WRITE:3, ANALOG_WRITE:4, ANALOG_READ:5, MOTOR:6, COLOR:7}, setZero:function() {
  for (var a = 0;5 > a;a++) {
    Entry.hw.sendQueue[a] = 0;
  }
  this.ColorPin = [0, 0, 0];
  Entry.hw.update();
}, setSendData:function(a) {
  Entry.hw.sendQueue = a;
  Entry.hw.update();
  this.wait(32);
}, wait:function(a) {
  for (var b = (new Date).getTime(), c = b;c < b + a;) {
    c = (new Date).getTime();
  }
}, ColorPin:[0, 0, 0]};
Entry.Roborobo_SchoolKit = {name:"roborobo_schoolkit", INSTRUCTION:{DIGITAL_READ:1, DIGITAL_WRITE:2, MOTOR:3, COLOR:4, SERVO:5}, setZero:function() {
  for (var a = 0;5 > a;a++) {
    Entry.hw.sendQueue[a] = 0;
  }
  this.ColorPin = [0, 0, 0];
  Entry.hw.update();
}, setSendData:function(a) {
  Entry.hw.sendQueue = a;
  Entry.hw.update();
  this.wait(32);
}, wait:function(a) {
  for (var b = (new Date).getTime(), c = b;c < b + a;) {
    c = (new Date).getTime();
  }
}, ColorPin:[0, 0, 0]};
Blockly.Blocks.roduino_on_block = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_on);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.roduino_on_block = function(a, b) {
  return "1";
};
Blockly.Blocks.roduino_off_block = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_off);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.roduino_off_block = function(a, b) {
  return "0";
};
Blockly.Blocks.roduino_get_analog_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.roduino_get_analog_number = function(a, b) {
  return b.getStringField("PORT");
};
Blockly.Blocks.roduino_get_port_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.roduino_get_port_number = function(a, b) {
  return b.getStringField("PORT");
};
Blockly.Blocks.roduino_get_analog_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_analog_value_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_analog_value_2).appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.roduino_get_analog_value = function(a, b) {
  a = parseInt(b.getValue("VALUE", b));
  Entry.Roduino.setSendData([Entry.Roduino.INSTRUCTION.ANALOG_READ, a]);
  return Entry.hw.getAnalogPortValue(a);
};
Blockly.Blocks.roduino_get_digital_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_get_digital_value_1);
  this.appendValueInput("VALUE").setCheck("Number");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_sensor_value_2).appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.roduino_get_digital_value = function(a, b) {
  a = b.getNumberValue("VALUE");
  Entry.Roborobo_Roduino.setSendData([Entry.Roborobo_Roduino.INSTRUCTION.DIGITAL_READ, a]);
  return Entry.hw.portData[a - 2];
};
Blockly.Blocks.roduino_get_color = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_color + " ").appendField(new Blockly.FieldDropdown([[Lang.Blocks.roborobo_color_red, "red"], [Lang.Blocks.roborobo_color_green, "green"], [Lang.Blocks.roborobo_color_blue, "blue"], [Lang.Blocks.roborobo_color_yellow, "yellow"]]), "VALUE").appendField(Lang.Blocks.roborobo_color_detected);
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.roduino_get_color = function(a, b) {
  a = 0;
  b = b.getField("VALUE", b);
  var c = [Entry.hw.portData[Entry.Roborobo_Roduino.ColorPin[0] - 2], Entry.hw.portData[Entry.Roborobo_Roduino.ColorPin[1] - 2], Entry.hw.portData[Entry.Roborobo_Roduino.ColorPin[2] - 2]];
  switch(b) {
    case "red":
      1 == c[0] && 0 == c[1] && 0 == c[2] && (a = 1);
      break;
    case "green":
      0 == c[0] && 1 == c[1] && 0 == c[2] && (a = 1);
      break;
    case "blue":
      0 == c[0] && 0 == c[1] && 1 == c[2] && (a = 1);
      break;
    case "yellow":
      1 == c[0] && 1 == c[1] && 1 == c[2] && (a = 1);
  }
  return a;
};
Blockly.Blocks.roduino_set_digital = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_pin_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_pin_2);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.roborobo_on, "on"], [Lang.Blocks.roborobo_off, "off"]]), "OPERATOR").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.roduino_set_digital = function(a, b) {
  a = b.getNumberValue("VALUE");
  var c = b.getField("OPERATOR");
  Entry.Roborobo_Roduino.setSendData([Entry.Roborobo_Roduino.INSTRUCTION.DIGITAL_WRITE, a, "on" == c ? 1 : 0]);
  return b.callReturn();
};
Blockly.Blocks.roduino_motor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.roborobo_motor1, "motor1"], [Lang.Blocks.roborobo_motor2, "motor2"]]), "MODE");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.roborobo_motor_CW, "cw"], [Lang.Blocks.roborobo_motor_CCW, "ccw"], [Lang.Blocks.roborobo_motor_stop, "stop"]]), "OPERATOR").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.roduino_motor = function(a, b) {
  pin2 = 0;
  var c;
  value2 = 0;
  a = b.getField("MODE");
  c = b.getField("OPERATOR");
  "motor1" == a ? (a = 9, pin2 = 10) : (a = 11, pin2 = 12);
  "cw" == c ? (c = 1, value2 = 0) : "ccw" == c ? (c = 0, value2 = 1) : value2 = c = 0;
  Entry.Roborobo_Roduino.setSendData([Entry.Roborobo_Roduino.INSTRUCTION.MOTOR, a, c, pin2, value2]);
  return b.callReturn();
};
Blockly.Blocks.roduino_set_color_pin = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_color + "R : ");
  this.appendValueInput("RED").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(" G : ");
  this.appendValueInput("GREEN").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(" B : ");
  this.appendValueInput("BLUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.roduino_set_color_pin = function(a, b) {
  a = b.getNumberValue("RED", b);
  var c = b.getNumberValue("GREEN", b), d = b.getNumberValue("BLUE", b);
  Entry.Roborobo_Roduino.ColorPin = [a, c, d];
  Entry.Roborobo_Roduino.setSendData([Entry.Roborobo_Roduino.INSTRUCTION.COLOR, a, c, d]);
  return b.callReturn();
};
Blockly.Blocks.schoolkit_on_block = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_on);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.schoolkit_on_block = function(a, b) {
  return "1";
};
Blockly.Blocks.schoolkit_off_block = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_off);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.schoolkit_off_block = function(a, b) {
  return "0";
};
Blockly.Blocks.schoolkit_get_out_port_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["OUT1", "2"], ["OUT2", "3"], ["OUT3", "4"], ["OUT4", "5"], ["OUT5", "6"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.schoolkit_get_out_port_number = function(a, b) {
  return b.getNumberField("PORT");
};
Blockly.Blocks.schoolkit_set_output = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_pin_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_pin_2);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.roborobo_on, "on"], [Lang.Blocks.roborobo_off, "off"]]), "OPERATOR").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.schoolkit_set_output = function(a, b) {
  a = b.getNumberValue("VALUE");
  var c = b.getField("OPERATOR");
  Entry.Roborobo_SchoolKit.setSendData([Entry.Roborobo_SchoolKit.INSTRUCTION.DIGITAL_WRITE, a, "on" == c ? 1 : 0]);
  return b.callReturn();
};
Blockly.Blocks.schoolkit_get_in_port_number = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["IN1", "7"], ["IN2", "8"], ["IN3", "9"], ["IN4", "10"], ["IN5", "11"], ["IN6", "12"], ["IN7", "13"]]), "PORT");
  this.appendDummyInput().appendField(" ");
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.schoolkit_get_in_port_number = function(a, b) {
  return b.getNumberField("PORT");
};
Blockly.Blocks.schoolkit_get_input_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_get_digital_value_1);
  this.appendValueInput("VALUE").setCheck("Number");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_sensor_value_2).appendField(" ");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.schoolkit_get_input_value = function(a, b) {
  a = b.getNumberValue("VALUE");
  Entry.Roborobo_SchoolKit.setSendData([Entry.Roborobo_SchoolKit.INSTRUCTION.DIGITAL_READ, a]);
  return Entry.hw.portData[a - 7];
};
Blockly.Blocks.schoolkit_motor = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.roborobo_motor1, "motor1"], [Lang.Blocks.roborobo_motor2, "motor2"]]), "MODE");
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.roborobo_motor_CW, "cw"], [Lang.Blocks.roborobo_motor_CCW, "ccw"], [Lang.Blocks.roborobo_motor_stop, "stop"]]), "OPERATOR").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.schoolkit_motor = function(a, b) {
  var c;
  c = b.getField("MODE");
  a = b.getField("OPERATOR");
  var d = b.getNumberValue("VALUE");
  c = "motor1" == c ? 7 : 8;
  255 < d ? d = 255 : 0 > d && (d = 0);
  "cw" == a ? Entry.Roborobo_SchoolKit.setSendData([Entry.Roborobo_SchoolKit.INSTRUCTION.MOTOR, 1, c, d]) : "ccw" == a ? Entry.Roborobo_SchoolKit.setSendData([Entry.Roborobo_SchoolKit.INSTRUCTION.MOTOR, 2, c, d]) : "stop" == a && Entry.Roborobo_SchoolKit.setSendData([Entry.Roborobo_SchoolKit.INSTRUCTION.MOTOR, 0, c, d]);
  return b.callReturn();
};
Blockly.Blocks.schoolkit_set_servo_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_pin_1);
  this.appendValueInput("PIN").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_num_pin_2);
  this.appendDummyInput().appendField(" : ");
  this.appendValueInput("VALUE").setCheck(["Number", "String", null]);
  this.appendDummyInput().appendField(Lang.Blocks.roborobo_degree);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.schoolkit_set_servo_value = function(a, b) {
  a = b.getNumberValue("PIN");
  var c = b.getNumberValue("VALUE");
  0 > c ? c = 0 : 180 < c && (c = 180);
  Entry.Roborobo_SchoolKit.setSendData([Entry.Roborobo_SchoolKit.INSTRUCTION.SERVO, a, c]);
  return b.callReturn();
};
Entry.Robotis_carCont = {INSTRUCTION:{NONE:0, WRITE:3, READ:2}, CONTROL_TABLE:{CM_LED:[67, 1], CM_SPRING_RIGHT:[69, 1, 69, 2], CM_SPRING_LEFT:[70, 1, 69, 2], CM_SWITCH:[71, 1], CM_SOUND_DETECTED:[86, 1], CM_SOUND_DETECTING:[87, 1], CM_IR_LEFT:[91, 2, 91, 4], CM_IR_RIGHT:[93, 2, 91, 4], CM_CALIBRATION_LEFT:[95, 2], CM_CALIBRATION_RIGHT:[97, 2], AUX_MOTOR_SPEED_LEFT:[152, 2], AUX_MOTOR_SPEED_RIGHT:[154, 2]}, setZero:function() {
  Entry.hw.sendQueue.setZero = [1];
  this.update();
  this.setRobotisData(null);
  Entry.hw.sendQueue.setZero = null;
  this.update();
  this.setRobotisData([[Entry.Robotis_carCont.INSTRUCTION.WRITE, 152, 2, 0], [Entry.Robotis_carCont.INSTRUCTION.WRITE, 154, 2, 0]]);
  this.update();
}, name:"robotis_carCont", delay:40, postCallReturn:function(a, b, c) {
  if (0 >= c) {
    return this.setRobotisData(b), this.update(), a.callReturn();
  }
  if (a.isStart) {
    if (1 == a.timeFlag) {
      return this.setRobotisData(null), this.update(), a;
    }
    delete a.timeFlag;
    delete a.isStart;
    Entry.engine.isContinue = !1;
    this.update();
    return a.callReturn();
  }
  a.isStart = !0;
  a.timeFlag = 1;
  this.setRobotisData(b);
  this.update();
  setTimeout(function() {
    a.timeFlag = 0;
  }, c);
  return a;
}, wait:function(a, b) {
  Entry.hw.socket.send(JSON.stringify(a));
  for (var c = a = (new Date).getTime();c < a + b;) {
    c = (new Date).getTime();
  }
}, update:function() {
  Entry.hw.update();
  var a = Entry.hw.sendQueue.ROBOTIS_DATA;
  a && a.forEach(function(b) {
    b.send = !0;
  });
  this.setRobotisData(null);
}, filterSendData:function() {
  var a = Entry.hw.sendQueue.ROBOTIS_DATA;
  return a ? a.filter(function(b) {
    return !0 !== b.send;
  }) : null;
}, setRobotisData:function(a) {
  var b = this.filterSendData();
  Entry.hw.sendQueue.ROBOTIS_DATA = null == a ? b : b ? b.concat(a) : a;
}};
Entry.Robotis_openCM70 = {INSTRUCTION:{NONE:0, WRITE:3, READ:2}, CONTROL_TABLE:{CM_LED_R:[79, 1], CM_LED_G:[80, 1], CM_LED_B:[81, 1], CM_BUZZER_INDEX:[84, 1], CM_BUZZER_TIME:[85, 1], CM_SOUND_DETECTED:[86, 1], CM_SOUND_DETECTING:[87, 1], CM_USER_BUTTON:[26, 1], CM_MOTION:[66, 1], AUX_SERVO_POSITION:[152, 2], AUX_IR:[168, 2], AUX_TOUCH:[202, 1], AUX_TEMPERATURE:[234, 1], AUX_ULTRASONIC:[242, 1], AUX_MAGNETIC:[250, 1], AUX_MOTION_DETECTION:[258, 1], AUX_COLOR:[266, 1], AUX_CUSTOM:[216, 2], AUX_BRIGHTNESS:[288, 
2], AUX_HYDRO_THEMO_HUMIDITY:[274, 1], AUX_HYDRO_THEMO_TEMPER:[282, 1], AUX_SERVO_MODE:[126, 1], AUX_SERVO_SPEED:[136, 2], AUX_MOTOR_SPEED:[136, 2], AUX_LED_MODULE:[210, 1]}, setZero:function() {
  Entry.hw.sendQueue.setZero = [1];
  Entry.Robotis_carCont.update();
  Entry.Robotis_carCont.setRobotisData(null);
  Entry.hw.sendQueue.setZero = null;
  Entry.Robotis_carCont.update();
  Entry.Robotis_carCont.setRobotisData([[Entry.Robotis_openCM70.INSTRUCTION.WRITE, 136, 2, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 138, 2, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 140, 2, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 142, 2, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 144, 2, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 146, 2, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 79, 1, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 80, 1, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 
  81, 1, 0]]);
  Entry.Robotis_carCont.update();
}, name:"robotis_openCM70", delay:15};
Blockly.Blocks.robotis_openCM70_cm_custom_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_cm_custom);
  this.appendDummyInput().appendField("(");
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(")");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["BYTE", "BYTE"], ["WORD", "WORD"], ["DWORD", "DWORD"]]), "SIZE");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_value);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.robotis_openCM70_cm_custom_value = function(a, b) {
  a = Entry.Robotis_openCM70.INSTRUCTION.READ;
  var c = 0, d = b.getStringField("SIZE");
  "BYTE" == d ? c = 1 : "WORD" == d ? c = 2 : "DWORD" == d && (c = 4);
  b = b.getNumberValue("VALUE");
  Entry.Robotis_carCont.setRobotisData([[a, b, c, 0, c]]);
  Entry.Robotis_carCont.update();
  return Entry.hw.portData[b];
};
Blockly.Blocks.robotis_openCM70_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_cm);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown(this.sensorList()), "SENSOR");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_value);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}, sensorList:function() {
  var a = [];
  a.push([Lang.Blocks.robotis_cm_sound_detected, "CM_SOUND_DETECTED"]);
  a.push([Lang.Blocks.robotis_cm_sound_detecting, "CM_SOUND_DETECTING"]);
  a.push([Lang.Blocks.robotis_cm_user_button, "CM_USER_BUTTON"]);
  return a;
}};
Entry.block.robotis_openCM70_sensor_value = function(a, b) {
  a = Entry.Robotis_openCM70.INSTRUCTION.READ;
  var c = 0, d = 0, e = 0, f = 0;
  b = b.getStringField("SENSOR");
  "CM_SOUND_DETECTED" == b ? (e = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[1], c = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[0], d = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[1]) : "CM_SOUND_DETECTING" == b ? (e = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[1], c = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[0], 
  d = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[1]) : "CM_USER_BUTTON" == b && (e = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[1], c = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[0], d = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[1]);
  e += 0 * f;
  Entry.Robotis_carCont.setRobotisData([[a, c, d, 0, f]]);
  Entry.Robotis_carCont.update();
  return Entry.hw.portData[e];
};
Blockly.Blocks.robotis_openCM70_aux_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown(this.portList()), "PORT");
  this.appendDummyInput().appendField(" ");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown(this.sensorList()), "SENSOR");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_value);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}, portList:function() {
  var a = [];
  a.push([Lang.Blocks.robotis_common_port_3, "PORT_3"]);
  a.push([Lang.Blocks.robotis_common_port_4, "PORT_4"]);
  a.push([Lang.Blocks.robotis_common_port_5, "PORT_5"]);
  a.push([Lang.Blocks.robotis_common_port_6, "PORT_6"]);
  return a;
}, sensorList:function() {
  var a = [];
  a.push([Lang.Blocks.robotis_aux_servo_position, "AUX_SERVO_POSITION"]);
  a.push([Lang.Blocks.robotis_aux_ir, "AUX_IR"]);
  a.push([Lang.Blocks.robotis_aux_touch, "AUX_TOUCH"]);
  a.push([Lang.Blocks.robotis_aux_brightness, "AUX_BRIGHTNESS"]);
  a.push([Lang.Blocks.robotis_aux_hydro_themo_humidity, "AUX_HYDRO_THEMO_HUMIDITY"]);
  a.push([Lang.Blocks.robotis_aux_hydro_themo_temper, "AUX_HYDRO_THEMO_TEMPER"]);
  a.push([Lang.Blocks.robotis_aux_temperature, "AUX_TEMPERATURE"]);
  a.push([Lang.Blocks.robotis_aux_ultrasonic, "AUX_ULTRASONIC"]);
  a.push([Lang.Blocks.robotis_aux_magnetic, "AUX_MAGNETIC"]);
  a.push([Lang.Blocks.robotis_aux_motion_detection, "AUX_MOTION_DETECTION"]);
  a.push([Lang.Blocks.robotis_aux_color, "AUX_COLOR"]);
  a.push([Lang.Blocks.robotis_aux_custom, "AUX_CUSTOM"]);
  return a;
}};
Entry.block.robotis_openCM70_aux_sensor_value = function(a, b) {
  a = Entry.Robotis_openCM70.INSTRUCTION.READ;
  var c = 0, d = 0, e = 0, f = 0, g = b.getStringField("PORT");
  b = b.getStringField("SENSOR");
  var h = 0;
  "PORT_3" == g ? h = 2 : "PORT_4" == g ? h = 3 : "PORT_5" == g ? h = 4 : "PORT_6" == g && (h = 5);
  "AUX_SERVO_POSITION" == b ? (e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1], c = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1]) : "AUX_IR" == b ? (e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[1], c = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[0], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[1]) : 
  "AUX_TOUCH" == b ? (e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[1], c = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[0], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[1]) : "AUX_TEMPERATURE" == b ? (e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[1], c = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[0], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[1]) : 
  "AUX_BRIGHTNESS" == b ? (e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[1], c = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[0], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[1]) : "AUX_HYDRO_THEMO_HUMIDITY" == b ? (e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[1], c = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[0], 
  d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[1]) : "AUX_HYDRO_THEMO_TEMPER" == b ? (e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[1], c = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[0], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[1]) : "AUX_ULTRASONIC" == b ? (e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[1], 
  c = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[0], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[1]) : "AUX_MAGNETIC" == b ? (e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[1], c = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[0], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[1]) : "AUX_MOTION_DETECTION" == b ? (e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[1], 
  c = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[0], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[1]) : "AUX_COLOR" == b ? (e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[1], c = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[0], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[1]) : "AUX_CUSTOM" == b && (e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[1], 
  c = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[0], d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[1]);
  e += h * f;
  0 != h && (d = 6 * f);
  Entry.Robotis_carCont.setRobotisData([[a, c, d, 0, f]]);
  Entry.Robotis_carCont.update();
  return Entry.hw.portData[e];
};
Blockly.Blocks.robotis_openCM70_cm_buzzer_index = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_cm);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_cm_buzzer_index);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.General.note_a + "(0)", "0"], [Lang.General.note_a + "#(1)", "1"], [Lang.General.note_b + "(2)", "2"], [Lang.General.note_c + "(3)", "3"], [Lang.General.note_c + "#(4)", "4"], [Lang.General.note_d + "(5)", "5"], [Lang.General.note_d + "#(6)", "6"], [Lang.General.note_e + "(7)", "7"], [Lang.General.note_f + "(8)", "8"], [Lang.General.note_f + "#(9)", "9"], [Lang.General.note_g + "(10)", "10"], [Lang.General.note_g + "#(11)", "11"], 
  [Lang.General.note_a + "(12)", "12"], [Lang.General.note_a + "#(13)", "13"], [Lang.General.note_b + "(14)", "14"], [Lang.General.note_c + "(15)", "15"], [Lang.General.note_c + "#(16)", "16"], [Lang.General.note_d + "(17)", "17"], [Lang.General.note_d + "#(18)", "18"], [Lang.General.note_e + "(19)", "19"], [Lang.General.note_f + "(20)", "20"], [Lang.General.note_f + "#(21)", "21"], [Lang.General.note_g + "(22)", "22"], [Lang.General.note_g + "#(23)", "23"], [Lang.General.note_a + "(24)", "24"], 
  [Lang.General.note_a + "#(25)", "25"], [Lang.General.note_b + "(26)", "26"], [Lang.General.note_c + "(27)", "27"], [Lang.General.note_c + "#(28)", "28"], [Lang.General.note_d + "(29)", "29"], [Lang.General.note_d + "#(30)", "30"], [Lang.General.note_e + "(31)", "31"], [Lang.General.note_f + "(32)", "32"], [Lang.General.note_f + "#(33)", "33"], [Lang.General.note_g + "(34)", "34"], [Lang.General.note_g + "#(35)", "35"], [Lang.General.note_a + "(36)", "36"], [Lang.General.note_a + "#(37)", "37"], 
  [Lang.General.note_b + "(38)", "38"], [Lang.General.note_c + "(39)", "39"], [Lang.General.note_c + "#(40)", "40"], [Lang.General.note_d + "(41)", "41"], [Lang.General.note_d + "#(42)", "42"], [Lang.General.note_e + "(43)", "43"], [Lang.General.note_f + "(44)", "44"], [Lang.General.note_f + "#(45)", "45"], [Lang.General.note_g + "(46)", "46"], [Lang.General.note_g + "#(47)", "47"], [Lang.General.note_a + "(48)", "48"], [Lang.General.note_a + "#(49)", "49"], [Lang.General.note_b + "(50)", "50"], 
  [Lang.General.note_c + "(51)", "51"]]), "CM_BUZZER_INDEX").appendField(Lang.Blocks.LOOKS_dialog_time_2);
  this.appendValueInput("CM_BUZZER_TIME").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.LOOKS_dialog_time_3).appendField(Lang.Blocks.robotis_common_play_buzzer).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_cm_buzzer_index = function(a, b) {
  a = b.getField("CM_BUZZER_INDEX", b);
  var c = b.getNumberValue("CM_BUZZER_TIME", b), d = Entry.Robotis_openCM70.INSTRUCTION.WRITE, e, f, g;
  e = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[0];
  f = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[1];
  g = parseInt(10 * c);
  50 < g && (g = 50);
  return Entry.Robotis_carCont.postCallReturn(b, [[d, e, f, g], [d, Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[0], Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[1], a]], 1E3 * c);
};
Blockly.Blocks.robotis_openCM70_cm_buzzer_melody = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_cm);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_cm_buzzer_melody);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"], ["12", "12"], ["13", "13"], ["14", "14"], ["15", "15"], ["16", "16"], ["17", "17"], ["18", "18"], ["19", "19"], ["20", "20"], ["21", "21"], ["22", "22"], ["23", "23"], ["24", "24"]]), "CM_BUZZER_MELODY");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_index_number);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_play_buzzer).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_cm_buzzer_melody = function(a, b) {
  a = b.getField("CM_BUZZER_MELODY", b);
  var c = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
  return Entry.Robotis_carCont.postCallReturn(b, [[c, Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[0], Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[1], 255], [c, Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[0], Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[1], a]], 1E3);
};
Blockly.Blocks.robotis_openCM70_cm_sound_detected_clear = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_cm_clear_sound_detected).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_cm_sound_detected_clear = function(a, b) {
  return Entry.Robotis_carCont.postCallReturn(b, [[Entry.Robotis_openCM70.INSTRUCTION.WRITE, Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[0], Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[1], 0]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_cm_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_cm);
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_red_color, "CM_LED_R"], [Lang.Blocks.robotis_common_green_color, "CM_LED_G"], [Lang.Blocks.robotis_common_blue_color, "CM_LED_B"]]), "CM_LED").appendField("LED").appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_on, "1"], [Lang.Blocks.robotis_common_off, "0"]]), "VALUE").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_cm_led = function(a, b) {
  a = b.getField("CM_LED", b);
  var c = b.getField("VALUE", b), d = Entry.Robotis_openCM70.INSTRUCTION.WRITE, e = 0, f = 0;
  "CM_LED_R" == a ? (e = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_R[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_R[1]) : "CM_LED_G" == a ? (e = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_G[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_G[1]) : "CM_LED_B" == a && (e = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_B[0], f = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_B[1]);
  return Entry.Robotis_carCont.postCallReturn(b, [[d, e, f, c]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_cm_motion = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_motion);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_index_number);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_play_motion).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_cm_motion = function(a, b) {
  a = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
  var c, d, e;
  c = Entry.Robotis_openCM70.CONTROL_TABLE.CM_MOTION[0];
  d = Entry.Robotis_openCM70.CONTROL_TABLE.CM_MOTION[1];
  e = b.getNumberValue("VALUE", b);
  return Entry.Robotis_carCont.postCallReturn(b, [[a, c, d, e]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_aux_motor_speed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_port_1, "1"], [Lang.Blocks.robotis_common_port_2, "2"]]), "PORT").appendField(Lang.Blocks.robotis_openCM70_aux_motor_speed_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_clockwhise, "CW"], [Lang.Blocks.robotis_common_counter_clockwhise, "CCW"]]), "DIRECTION_ANGLE").appendField(Lang.Blocks.robotis_openCM70_aux_motor_speed_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_aux_motor_speed = function(a, b) {
  a = b.getField("PORT", b);
  var c = b.getField("DIRECTION_ANGLE", b), d = b.getNumberValue("VALUE"), e = Entry.Robotis_openCM70.INSTRUCTION.WRITE, f, g;
  f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[0];
  g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[1];
  "CW" == c ? (d += 1024, 2047 < d && (d = 2047)) : 1023 < d && (d = 1023);
  return Entry.Robotis_carCont.postCallReturn(b, [[e, f + (a - 1) * g, g, d]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_aux_servo_mode = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_port_3, "3"], [Lang.Blocks.robotis_common_port_4, "4"], [Lang.Blocks.robotis_common_port_5, "5"], [Lang.Blocks.robotis_common_port_6, "6"]]), "PORT").appendField(Lang.Blocks.robotis_openCM70_aux_servo_mode_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_wheel_mode, "0"], [Lang.Blocks.robotis_common_joint_mode, "1"]]), "MODE");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_aux_servo_mode = function(a, b) {
  a = b.getField("PORT", b);
  var c = b.getField("MODE", b), d = Entry.Robotis_openCM70.INSTRUCTION.WRITE, e, f;
  e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[0];
  f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[1];
  return Entry.Robotis_carCont.postCallReturn(b, [[d, e + (a - 1) * f, f, c]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_aux_servo_speed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_port_3, "3"], [Lang.Blocks.robotis_common_port_4, "4"], [Lang.Blocks.robotis_common_port_5, "5"], [Lang.Blocks.robotis_common_port_6, "6"]]), "PORT").appendField(Lang.Blocks.robotis_openCM70_aux_servo_speed_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_clockwhise, "CW"], [Lang.Blocks.robotis_common_counter_clockwhise, "CCW"]]), "DIRECTION_ANGLE").appendField(Lang.Blocks.robotis_openCM70_aux_servo_speed_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_aux_servo_speed = function(a, b) {
  a = b.getField("PORT", b);
  var c = b.getField("DIRECTION_ANGLE", b), d = b.getNumberValue("VALUE"), e = Entry.Robotis_openCM70.INSTRUCTION.WRITE, f, g;
  f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[0];
  g = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[1];
  "CW" == c ? (d += 1024, 2047 < d && (d = 2047)) : 1023 < d && (d = 1023);
  return Entry.Robotis_carCont.postCallReturn(b, [[e, f + (a - 1) * g, g, d]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_aux_servo_position = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_port_3, "3"], [Lang.Blocks.robotis_common_port_4, "4"], [Lang.Blocks.robotis_common_port_5, "5"], [Lang.Blocks.robotis_common_port_6, "6"]]), "PORT").appendField(Lang.Blocks.robotis_openCM70_aux_servo_position_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_aux_servo_position = function(a, b) {
  a = b.getField("PORT", b);
  var c = b.getNumberValue("VALUE"), d = Entry.Robotis_openCM70.INSTRUCTION.WRITE, e, f;
  e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0];
  f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1];
  1023 < c ? c = 1023 : 0 > c && (c = 0);
  return Entry.Robotis_carCont.postCallReturn(b, [[d, e + (a - 1) * f, f, c]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_aux_led_module = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_port_3, "3"], [Lang.Blocks.robotis_common_port_4, "4"], [Lang.Blocks.robotis_common_port_5, "5"], [Lang.Blocks.robotis_common_port_6, "6"]]), "PORT").appendField(Lang.Blocks.robotis_openCM70_aux_led_module_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_cm_led_both + Lang.Blocks.robotis_common_off, "0"], [Lang.Blocks.robotis_cm_led_right + Lang.Blocks.robotis_common_on, "1"], [Lang.Blocks.robotis_cm_led_left + 
  Lang.Blocks.robotis_common_on, "2"], [Lang.Blocks.robotis_cm_led_both + Lang.Blocks.robotis_common_on, "3"]]), "LED_MODULE");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_aux_led_module = function(a, b) {
  a = b.getField("PORT", b);
  var c = b.getField("LED_MODULE", b), d = Entry.Robotis_openCM70.INSTRUCTION.WRITE, e, f;
  e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_LED_MODULE[0];
  f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_LED_MODULE[1];
  return Entry.Robotis_carCont.postCallReturn(b, [[d, e + (a - 1) * f, f, c]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_aux_custom = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_port_3, "3"], [Lang.Blocks.robotis_common_port_4, "4"], [Lang.Blocks.robotis_common_port_5, "5"], [Lang.Blocks.robotis_common_port_6, "6"]]), "PORT").appendField(Lang.Blocks.robotis_openCM70_aux_custom_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_aux_custom = function(a, b) {
  a = b.getField("PORT", b);
  var c = b.getNumberValue("VALUE"), d = Entry.Robotis_openCM70.INSTRUCTION.WRITE, e, f;
  e = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[0];
  f = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[1];
  return Entry.Robotis_carCont.postCallReturn(b, [[d, e + (a - 1) * f, f, c]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_openCM70_cm_custom = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_cm_custom);
  this.appendDummyInput().appendField("(");
  this.appendValueInput("ADDRESS").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(")");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_case_01);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_openCM70_cm_custom = function(a, b) {
  a = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
  var c, d;
  c = b.getNumberValue("ADDRESS");
  d = b.getNumberValue("VALUE");
  return Entry.Robotis_carCont.postCallReturn(b, [[a, c, 65535 < d ? 4 : 255 < d ? 2 : 1, d]], Entry.Robotis_openCM70.delay);
};
Blockly.Blocks.robotis_carCont_sensor_value = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_cm_spring_left, "CM_SPRING_LEFT"], [Lang.Blocks.robotis_cm_spring_right, "CM_SPRING_RIGHT"], [Lang.Blocks.robotis_cm_switch, "CM_SWITCH"], [Lang.Blocks.robotis_cm_sound_detected, "CM_SOUND_DETECTED"], [Lang.Blocks.robotis_cm_sound_detecting, "CM_SOUND_DETECTING"], [Lang.Blocks.robotis_cm_ir_left, "CM_IR_LEFT"], [Lang.Blocks.robotis_cm_ir_right, "CM_IR_RIGHT"], [Lang.Blocks.robotis_cm_calibration_left, 
  "CM_CALIBRATION_LEFT"], [Lang.Blocks.robotis_cm_calibration_right, "CM_CALIBRATION_RIGHT"]]), "SENSOR").appendField(" ").appendField(Lang.Blocks.robotis_common_value);
  this.setOutput(!0, "Number");
  this.setInputsInline(!0);
}};
Entry.block.robotis_carCont_sensor_value = function(a, b) {
  a = Entry.Robotis_carCont.INSTRUCTION.READ;
  var c = 0, d = 0, e = 0, f = 0;
  b = b.getStringField("SENSOR");
  "CM_SPRING_LEFT" == b ? (e = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[0], f = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[1], c = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[2], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[3]) : "CM_SPRING_RIGHT" == b ? (e = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[0], f = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[1], c = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[2], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[3]) : 
  "CM_SWITCH" == b ? (e = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[0], f = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[1], c = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[0], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[1]) : "CM_SOUND_DETECTED" == b ? (e = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[0], f = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[1], c = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[0], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[1]) : 
  "CM_SOUND_DETECTING" == b ? (e = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[0], f = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[1], c = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[0], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[1]) : "CM_IR_LEFT" == b ? (e = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[0], f = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[1], c = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[2], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[3]) : 
  "CM_IR_RIGHT" == b ? (e = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[0], f = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[1], c = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[2], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[3]) : "CM_CALIBRATION_LEFT" == b ? (e = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[0], f = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[1], c = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[0], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[1]) : 
  "CM_CALIBRATION_RIGHT" == b ? (e = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[0], f = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[1], c = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[0], d = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[1]) : "CM_BUTTON_STATUS" == b && (e = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[0], f = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[1], c = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[0], 
  d = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[1]);
  Entry.Robotis_carCont.setRobotisData([[a, c, d, 0, f]]);
  Entry.Robotis_carCont.update();
  return Entry.hw.portData[e];
};
Blockly.Blocks.robotis_carCont_cm_led = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_cm_led_4).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_on, "1"], [Lang.Blocks.robotis_common_off, "0"]]), "VALUE_LEFT").appendField(", ").appendField(Lang.Blocks.robotis_cm_led_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_on, "1"], [Lang.Blocks.robotis_common_off, "0"]]), "VALUE_RIGHT").appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_carCont_cm_led = function(a, b) {
  a = b.getField("VALUE_LEFT", b);
  var c = b.getField("VALUE_RIGHT", b), d = Entry.Robotis_carCont.INSTRUCTION.WRITE, e, f, g = 0;
  e = Entry.Robotis_carCont.CONTROL_TABLE.CM_LED[0];
  f = Entry.Robotis_carCont.CONTROL_TABLE.CM_LED[1];
  1 == a && 1 == c ? g = 9 : 1 == a && 0 == c && (g = 8);
  0 == a && 1 == c && (g = 1);
  return Entry.Robotis_carCont.postCallReturn(b, [[d, e, f, g]], Entry.Robotis_carCont.delay);
};
Blockly.Blocks.robotis_carCont_cm_sound_detected_clear = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotis_cm_clear_sound_detected).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_carCont_cm_sound_detected_clear = function(a, b) {
  return Entry.Robotis_carCont.postCallReturn(b, [[Entry.Robotis_carCont.INSTRUCTION.WRITE, Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[0], Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[1], 0]], Entry.Robotis_carCont.delay);
};
Blockly.Blocks.robotis_carCont_aux_motor_speed = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.General.left, "LEFT"], [Lang.General.right, "RIGHT"]]), "DIRECTION").appendField(Lang.Blocks.robotis_carCont_aux_motor_speed_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotis_common_clockwhise, "CW"], [Lang.Blocks.robotis_common_counter_clockwhise, "CCW"]]), "DIRECTION_ANGLE").appendField(Lang.Blocks.robotis_carCont_aux_motor_speed_2);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_carCont_aux_motor_speed = function(a, b) {
  var c = b.getField("DIRECTION", b);
  a = b.getField("DIRECTION_ANGLE", b);
  var d = b.getNumberValue("VALUE"), e = Entry.Robotis_carCont.INSTRUCTION.WRITE, f;
  "LEFT" == c ? (c = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_LEFT[0], f = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_LEFT[1]) : (c = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_RIGHT[0], f = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_RIGHT[1]);
  "CW" == a ? (d += 1024, 2047 < d && (d = 2047)) : 1023 < d && (d = 1023);
  return Entry.Robotis_carCont.postCallReturn(b, [[e, c, f, d]], Entry.Robotis_carCont.delay);
};
Blockly.Blocks.robotis_carCont_cm_calibration = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.General.left, "LEFT"], [Lang.General.right, "RIGHT"]]), "DIRECTION").appendField(Lang.Blocks.robotis_carCont_calibration_1);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.robotis_common_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotis_carCont_cm_calibration = function(a, b) {
  var c = b.getField("DIRECTION", b);
  a = b.getNumberValue("VALUE");
  var d = Entry.Robotis_carCont.INSTRUCTION.WRITE, e;
  "LEFT" == c ? (c = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[0], e = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[1]) : (c = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[0], e = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[1]);
  return Entry.Robotis_carCont.postCallReturn(b, [[d, c, e, a]], Entry.Robotis_carCont.delay);
};
Entry.robotori = {PORT_MAP:{A0:0, A1:0, A2:0, A3:0, A4:0, A5:0, D2:0, D3:0, D10:0, D11:0, D12:0, D13:0, AOUT5:0, AOUT6:0, AOUT9:0, SERVO:90, rightMotor:0, leftMotor:0}, setZero:function() {
  var a = Entry.robotori.PORT_MAP, b = Entry.hw.sendQueue, c;
  for (c in a) {
    b[c] = a[c];
  }
  Entry.hw.update();
}, name:"robotori", monitorTemplate:{imgPath:"hw/robotori.png", width:395, height:372, listPorts:{A0:{name:"A0", type:"input", pos:{x:0, y:0}}, A1:{name:"A1", type:"input", pos:{x:0, y:0}}, A2:{name:"A2", type:"input", pos:{x:0, y:0}}, A3:{name:"A3", type:"input", pos:{x:0, y:0}}, A4:{name:"A4", type:"input", pos:{x:0, y:0}}, A5:{name:"A5", type:"input", pos:{x:0, y:0}}, D2:{name:"D2", type:"input", pos:{x:0, y:0}}, D3:{name:"D3", type:"input", pos:{x:0, y:0}}}, mode:"both"}};
Blockly.Blocks.robotori_digitalInput = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotori_D2_Input, "D2"], [Lang.Blocks.robotori_D3_Input, "D3"]]), "DEVICE");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.robotori_digitalInput = function(a, b) {
  a = Entry.hw.portData;
  b = b.getField("DEVICE");
  return a[b];
};
Blockly.Blocks.robotori_digitalOutput = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("Digital Out").appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotori_D10_Output, "D10"], [Lang.Blocks.robotori_D11_Output, "D11"], [Lang.Blocks.robotori_D12_Output, "D12"], [Lang.Blocks.robotori_D13_Output, "D13"]]), "DEVICE").appendField("pin").appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotori_On, "ON"], [Lang.Blocks.robotori_Off, "OFF"]]), "VALUE");
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotori_digitalOutput = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getStringField("DEVICE", b), d = b.getStringField("VALUE", b);
  a.D10 = "D10" == c && "ON" == d ? 1 : 0;
  a.D11 = "D11" == c && "ON" == d ? 1 : 0;
  a.D12 = "D12" == c && "ON" == d ? 1 : 0;
  a.D13 = "D13" == c && "ON" == d ? 1 : 0;
  return b.callReturn();
};
Blockly.Blocks.robotori_analogInput = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotori_A0_Input, "A0"], [Lang.Blocks.robotori_A1_Input, "A1"], [Lang.Blocks.robotori_A2_Input, "A2"], [Lang.Blocks.robotori_A3_Input, "A3"], [Lang.Blocks.robotori_A4_Input, "A4"], [Lang.Blocks.robotori_A5_Input, "A5"]]), "DEVICE");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.robotori_analogInput = function(a, b) {
  a = Entry.hw.portData;
  b = b.getField("DEVICE");
  return a[b];
};
Blockly.Blocks.robotori_analogOutput = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotori_analog).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotori_analog5, "AOUT5"], [Lang.Blocks.robotori_analog6, "AOUT6"], [Lang.Blocks.robotori_analog9, "AOUT9"]]), "DEVICE").appendField(Lang.Blocks.robotori_pin_OutputValue);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotori_analogOutput = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getStringField("DEVICE", b), d = b.getNumberValue("VALUE", b);
  "AOUT5" == c && (a.AOUT5 = d);
  "AOUT6" == c && (a.AOUT6 = d);
  "AOUT9" == c && (a.AOUT9 = d);
  return b.callReturn();
};
Blockly.Blocks.robotori_servo = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotori_Servo);
  this.appendValueInput("SERVO").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotori_servo = function(a, b) {
  Entry.hw.sendQueue.SERVO = b.getNumberValue("SERVO");
  return b.callReturn();
};
Blockly.Blocks.robotori_dc_direction = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.robotori_DC).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotori_DC_rightmotor, "RIGHT_MOTOR"], [Lang.Blocks.robotori_DC_leftmotor, "LEFT_MOTOR"]]), "DEVICE").appendField(Lang.Blocks.robotori_DC_select).appendField(new Blockly.FieldDropdown([[Lang.Blocks.robotori_DC_STOP, "STOP"], [Lang.Blocks.robotori_DC_CW, "CW"], [Lang.Blocks.robotori_DC_CCW, "CCW"]]), "VALUE");
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.robotori_dc_direction = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getStringField("DEVICE", b), d = b.getStringField("VALUE", b);
  "RIGHT_MOTOR" == c && ("STOP" == d ? a.RIGHT_MOTOR = 255 : "CW" == d ? a.RIGHT_MOTOR = 0 : "CCW" == d && (a.RIGHT_MOTOR = 180));
  "LEFT_MOTOR" == c && ("STOP" == d ? a.LEFT_MOTOR = 255 : "CW" == d ? a.LEFT_MOTOR = 0 : "CCW" == d && (a.LEFT_MOTOR = 180));
  return b.callReturn();
};
Entry.Xbot = {PORT_MAP:{rightWheel:0, leftWheel:0, head:90, armR:90, armL:90, analogD5:127, analogD6:127, D4:0, D7:0, D12:0, D13:0, ledR:0, ledG:0, ledB:0, lcdNum:0, lcdTxt:"                ", note:262, duration:0}, setZero:function() {
  var a = Entry.Xbot.PORT_MAP, b = Entry.hw.sendQueue, c;
  for (c in a) {
    b[c] = a[c];
  }
  Entry.hw.update();
  Entry.Xbot.removeAllTimeouts();
}, timeouts:[], removeTimeout:function(a) {
  clearTimeout(a);
  var b = this.timeouts;
  a = b.indexOf(a);
  0 <= a && b.splice(a, 1);
}, removeAllTimeouts:function() {
  var a = this.timeouts, b;
  for (b in a) {
    clearTimeout(a[b]);
  }
  this.timeouts = [];
}, name:"xbot_epor_edge"};
Blockly.Blocks.xbot_digitalInput = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([[Lang.Blocks.XBOT_D2_digitalInput, "D2"], [Lang.Blocks.XBOT_D3_digitalInput, "D3"], [Lang.Blocks.XBOT_D11_digitalInput, "D11"]]), "DEVICE");
  this.setInputsInline(!0);
  this.setOutput(!0, "Boolean");
}};
Entry.block.xbot_digitalInput = function(a, b) {
  a = Entry.hw.portData;
  b = b.getField("DEVICE");
  return a[b];
};
Blockly.Blocks.xbot_analogValue = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("").appendField(new Blockly.FieldDropdown([[Lang.Blocks.XBOT_CDS, "light"], [Lang.Blocks.XBOT_MIC, "mic"], [Lang.Blocks.XBOT_analog0, "adc0"], [Lang.Blocks.XBOT_analog1, "adc1"], [Lang.Blocks.XBOT_analog2, "adc2"], [Lang.Blocks.XBOT_analog3, "adc3"]]), "DEVICE");
  this.setInputsInline(!0);
  this.setOutput(!0, "Number");
}};
Entry.block.xbot_analogValue = function(a, b) {
  a = Entry.hw.portData;
  b = b.getField("DEVICE");
  return a[b];
};
Blockly.Blocks.xbot_digitalOutput = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_digital).appendField(new Blockly.FieldDropdown([["LED", "D13"], ["D4", "D4"], ["D7", "D7"], ["D12 ", "D12"]]), "DEVICE").appendField(Lang.Blocks.XBOT_pin_OutputValue).appendField(new Blockly.FieldDropdown([[Lang.Blocks.XBOT_High, "HIGH"], [Lang.Blocks.XBOT_Low, "LOW"]]), "VALUE");
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_digitalOutput = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getStringField("DEVICE", b), d = b.getStringField("VALUE", b);
  a.D13 = "D13" == c && "HIGH" == d ? 1 : 0;
  a.D4 = "D4" == c && "HIGH" == d ? 1 : 0;
  a.D7 = "D7" == c && "HIGH" == d ? 1 : 0;
  a.D12 = "D12" == c && "HIGH" == d ? 1 : 0;
  return b.callReturn();
};
Blockly.Blocks.xbot_analogOutput = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_analog).appendField(new Blockly.FieldDropdown([["D5", "analogD5"], ["D6", "analogD6"]]), "DEVICE").appendField(Lang.Blocks.XBOT_pin_Output_Value);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_analogOutput = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getStringField("DEVICE", b), d = b.getNumberValue("VALUE", b);
  "analogD5" == c ? a.analogD5 = d : "analogD6" == c && (a.analogD6 = d);
  return b.callReturn();
};
Blockly.Blocks.xbot_servo = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_Servo).appendField(new Blockly.FieldDropdown([[Lang.Blocks.XBOT_Head, "head"], [Lang.Blocks.XBOT_ArmR, "right"], [Lang.Blocks.XBOT_ArmL, "left"]]), "DEVICE").appendField(Lang.Blocks.XBOT_angle);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_servo = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getStringField("DEVICE", b), d = b.getNumberValue("VALUE", b);
  "head" == c ? a.head = d : "right" == c ? a.armR = d : "left" == c && (a.armL = d);
  return b.callReturn();
};
Blockly.Blocks.xbot_oneWheel = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_DC).appendField(new Blockly.FieldDropdown([[Lang.Blocks.XBOT_rightWheel, "rightWheel"], [Lang.Blocks.XBOT_leftWheel, "leftWheel"], [Lang.Blocks.XBOT_bothWheel, "bothWheel"]]), "DEVICE").appendField(Lang.Blocks.XBOT_speed);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_oneWheel = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getStringField("DEVICE", b), d = b.getNumberValue("VALUE", b);
  "rightWheel" == c ? a.rightWheel = d : "leftWheel" == c ? a.leftWheel = d : a.rightWheel = a.leftWheel = d;
  return b.callReturn();
};
Blockly.Blocks.xbot_twoWheel = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_rightSpeed);
  this.appendValueInput("rightWheel").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_leftSpeed);
  this.appendValueInput("leftWheel").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_twoWheel = function(a, b) {
  a = Entry.hw.sendQueue;
  a.rightWheel = b.getNumberValue("rightWheel");
  a.leftWheel = b.getNumberValue("leftWheel");
  return b.callReturn();
};
Blockly.Blocks.xbot_rgb = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_RGBLED_R);
  this.appendValueInput("ledR").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_RGBLED_G);
  this.appendValueInput("ledG").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_RGBLED_B);
  this.appendValueInput("ledB").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_rgb = function(a, b) {
  a = Entry.hw.sendQueue;
  a.ledR = b.getNumberValue("ledR");
  a.ledG = b.getNumberValue("ledG");
  a.ledB = b.getNumberValue("ledB");
  return b.callReturn();
};
Blockly.Blocks.xbot_rgb_picker = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_RGBLED_color).appendField(new Blockly.FieldColour("#ff0000"), "VALUE").appendField(Lang.Blocks.XBOT_set).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_rgb_picker = function(a, b) {
  a = b.getStringField("VALUE");
  var c = Entry.hw.sendQueue;
  c.ledR = parseInt(.3 * parseInt(a.substr(1, 2), 16));
  c.ledG = parseInt(.3 * parseInt(a.substr(3, 2), 16));
  c.ledB = parseInt(.3 * parseInt(a.substr(5, 2), 16));
  return b.callReturn();
};
Blockly.Blocks.xbot_buzzer = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField(Lang.Blocks.HAMSTER_play_note_for_1).appendField(new Blockly.FieldDropdown([[Lang.Blocks.XBOT_c, "C"], [Lang.Blocks.XBOT_d, "D"], [Lang.Blocks.XBOT_e, "E"], [Lang.Blocks.XBOT_f, "F"], [Lang.Blocks.XBOT_g, "G"], [Lang.Blocks.XBOT_a, "A"], [Lang.Blocks.XBOT_b, "B"]]), "NOTE").appendField(" ").appendField(new Blockly.FieldDropdown([["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]]), "OCTAVE").appendField(Lang.Blocks.HAMSTER_play_note_for_3);
  this.appendValueInput("VALUE").setCheck(["Number", "String"]);
  this.appendDummyInput().appendField(Lang.Blocks.XBOT_melody_ms).appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_buzzer = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getStringField("NOTE", b), d = b.getStringField("OCTAVE", b), e = b.getNumberValue("VALUE", b), c = c + d;
  a.note = "C2" == c ? 65 : "D2" == c ? 73 : "E2" == c ? 82 : "F2" == c ? 87 : "G2" == c ? 98 : "A2" == c ? 110 : "B2" == c ? 123 : "C3" == c ? 131 : "D3" == c ? 147 : "E3" == c ? 165 : "F3" == c ? 175 : "G3" == c ? 196 : "A3" == c ? 220 : "B3" == c ? 247 : "C4" == c ? 262 : "D4" == c ? 294 : "E4" == c ? 330 : "F4" == c ? 349 : "G4" == c ? 392 : "A4" == c ? 440 : "B4" == c ? 494 : "C5" == c ? 523 : "D5" == c ? 587 : "E5" == c ? 659 : "F5" == c ? 698 : "G5" == c ? 784 : "A5" == c ? 880 : "B5" == c ? 
  988 : "C6" == c ? 1047 : "D6" == c ? 1175 : "E6" == c ? 1319 : "F6" == c ? 1397 : "G6" == c ? 1568 : "A6" == c ? 1760 : "B6" == c ? 1976 : "C7" == c ? 2093 : "D7" == c ? 2349 : "E7" == c ? 2637 : "F7" == c ? 2794 : "G7" == c ? 3136 : "A7" == c ? 3520 : "B7" == c ? 3951 : 262;
  a.duration = 40 * e;
  return b.callReturn();
};
Blockly.Blocks.xbot_lcd = {init:function() {
  this.setColour("#00979D");
  this.appendDummyInput().appendField("LCD").appendField(new Blockly.FieldDropdown([["0", "0"], ["1", "1"]]), "LINE").appendField(Lang.Blocks.XBOT_Line).appendField(", ").appendField(Lang.Blocks.XBOT_outputValue);
  this.appendValueInput("VALUE").setCheck(["String", "Number"]);
  this.appendDummyInput().appendField(new Blockly.FieldIcon(Entry.mediaFilePath + "block_icon/hardware_03.png", "*"));
  this.setInputsInline(!0);
  this.setPreviousStatement(!0);
  this.setNextStatement(!0);
}};
Entry.block.xbot_lcd = function(a, b) {
  a = Entry.hw.sendQueue;
  var c = b.getNumberField("LINE", b), d = b.getStringValue("VALUE", b);
  0 == c ? (a.lcdNum = 0, a.lcdTxt = d) : 1 == c && (a.lcdNum = 1, a.lcdTxt = d);
  return b.callReturn();
};
Entry.Collection = function(a) {
  this.length = 0;
  this._hashMap = {};
  this._observers = [];
  this.set(a);
};
(function(a, b) {
  a.set = function(a) {
    for (;this.length;) {
      b.pop.call(this);
    }
    var c = this._hashMap, e;
    for (e in c) {
      delete c[e];
    }
    if (void 0 !== a) {
      e = 0;
      for (var f = a.length;e < f;e++) {
        var g = a[e];
        c[g.id] = g;
        b.push.call(this, g);
      }
    }
  };
  a.push = function(a) {
    this._hashMap[a.id] = a;
    b.push.call(this, a);
  };
  a.unshift = function() {
    for (var a = Array.prototype.slice.call(arguments, 0), d = this._hashMap, e = a.length - 1;0 <= e;e--) {
      var f = a[e];
      b.unshift.call(this, f);
      d[f.id] = f;
    }
  };
  a.insert = function(a, d) {
    b.splice.call(this, d, 0, a);
    this._hashMap[a.id] = a;
  };
  a.has = function(b) {
    return !!this._hashMap[b];
  };
  a.get = function(b) {
    return this._hashMap[b];
  };
  a.at = function(b) {
    return this[b];
  };
  a.getAll = function() {
    for (var b = this.length, a = [], e = 0;e < b;e++) {
      a.push(this[e]);
    }
    return a;
  };
  a.indexOf = function(a) {
    return b.indexOf.call(this, a);
  };
  a.find = function(b) {
    for (var a = [], c, f = 0, g = this.length;f < g;f++) {
      c = !0;
      var h = this[f], k;
      for (k in b) {
        if (b[k] != h[k]) {
          c = !1;
          break;
        }
      }
      c && a.push(h);
    }
    return a;
  };
  a.pop = function() {
    var a = b.pop.call(this);
    delete this._hashMap[a.id];
    return a;
  };
  a.shift = function() {
    var a = b.shift.call(this);
    delete this._hashMap[a.id];
    return a;
  };
  a.slice = function(a, d) {
    a = b.slice.call(this, a, d);
    d = this._hashMap;
    for (var c in a) {
      delete d[a[c].id];
    }
    return a;
  };
  a.remove = function(b) {
    var a = this.indexOf(b);
    -1 < a && (delete this._hashMap[b.id], this.splice(a, 1));
  };
  a.splice = function(a, d) {
    var c = b.slice.call(arguments, 2), f = this._hashMap;
    d = void 0 === d ? this.length - a : d;
    for (var g = b.splice.call(this, a, d), h = 0, k = g.length;h < k;h++) {
      delete f[g[h].id];
    }
    h = 0;
    for (k = c.length;h < k;h++) {
      f = c[h], b.splice.call(this, a++, 0, f), this._hashMap[f.id] = f;
    }
    return g;
  };
  a.clear = function() {
    for (;this.length;) {
      b.pop.call(this);
    }
    this._hashMap = {};
  };
  a.map = function(b, a) {
    for (var c = [], d = 0, g = this.length;d < g;d++) {
      c.push(b(this[d], a));
    }
    return c;
  };
  a.moveFromTo = function(a, d) {
    var c = this.length - 1;
    0 > a || 0 > d || a > c || d > c || b.splice.call(this, d, 0, b.splice.call(this, a, 1)[0]);
  };
  a.sort = function() {
  };
  a.fromJSON = function() {
  };
  a.toJSON = function() {
    for (var b = [], a = 0, e = this.length;a < e;a++) {
      b.push(this[a].toJSON());
    }
    return b;
  };
  a.observe = function() {
  };
  a.unobserve = function() {
  };
  a.notify = function() {
  };
  a.destroy = function() {
  };
})(Entry.Collection.prototype, Array.prototype);
Entry.Event = function(a) {
  this._sender = a;
  this._listeners = [];
};
(function(a) {
  a.attach = function(b, a) {
    var c = this;
    b = {obj:b, fn:a, destroy:function() {
      c.detach(this);
    }};
    this._listeners.push(b);
    return b;
  };
  a.detach = function(b) {
    var a = this._listeners;
    b = a.indexOf(b);
    if (-1 < b) {
      return a.splice(b, 1);
    }
  };
  a.clear = function() {
    for (var b = this._listeners;b.length;) {
      b.pop();
    }
  };
  a.notify = function() {
    var b = arguments;
    this._listeners.slice().forEach(function(a) {
      a.fn.apply(a.obj, b);
    });
  };
})(Entry.Event.prototype);
Entry.Utils = {};
Entry.overridePrototype = function() {
  Number.prototype.mod = function(a) {
    return (this % a + a) % a;
  };
  String.prototype.repeat || (String.prototype.repeat = function(a) {
    if (null == this) {
      throw new TypeError("can't convert " + this + " to object");
    }
    var b = "" + this;
    a = +a;
    a != a && (a = 0);
    if (0 > a) {
      throw new RangeError("repeat count must be non-negative");
    }
    if (Infinity == a) {
      throw new RangeError("repeat count must be less than infinity");
    }
    a = Math.floor(a);
    if (0 == b.length || 0 == a) {
      return "";
    }
    if (268435456 <= b.length * a) {
      throw new RangeError("repeat count must not overflow maximum string size");
    }
    for (var c = "";;) {
      1 == (a & 1) && (c += b);
      a >>>= 1;
      if (0 == a) {
        break;
      }
      b += b;
    }
    return c;
  });
};
Entry.Utils.generateId = function() {
  return ("0000" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).substr(-4);
};
Entry.Utils.intersectArray = function(a, b) {
  for (var c = [], d = 0;d < a.length;d++) {
    for (var e = 0;e < b.length;e++) {
      if (a[d] == b[e]) {
        c.push(a[d]);
        break;
      }
    }
  }
  return c;
};
Entry.Utils.isPointInMatrix = function(a, b, c) {
  c = void 0 === c ? 0 : c;
  var d = a.offsetX ? a.x + a.offsetX : a.x, e = a.offsetY ? a.y + a.offsety : a.y;
  return d - c <= b.x && d + a.width + c >= b.x && e - c <= b.y && e + a.height + c >= b.y;
};
Entry.Utils.colorDarken = function(a, b) {
  function c(b) {
    2 != b.length && (b = "0" + b);
    return b;
  }
  var d, e;
  7 === a.length ? (d = parseInt(a.substr(1, 2), 16), e = parseInt(a.substr(3, 2), 16), a = parseInt(a.substr(5, 2), 16)) : (d = parseInt(a.substr(1, 2), 16), e = parseInt(a.substr(2, 2), 16), a = parseInt(a.substr(3, 2), 16));
  b = void 0 === b ? .7 : b;
  d = c(Math.floor(d * b).toString(16));
  e = c(Math.floor(e * b).toString(16));
  a = c(Math.floor(a * b).toString(16));
  return "#" + d + e + a;
};
Entry.Utils.colorLighten = function(a, b) {
  b = 0 === b ? 0 : b || 20;
  a = Entry.Utils.hexToHsl(a);
  a.l += b / 100;
  a.l = Math.min(1, Math.max(0, a.l));
  return Entry.Utils.hslToHex(a);
};
Entry.Utils.bound01 = function(a, b) {
  var c = a;
  "string" == typeof c && -1 != c.indexOf(".") && 1 === parseFloat(c) && (a = "100%");
  c = "string" === typeof a && -1 != a.indexOf("%");
  a = Math.min(b, Math.max(0, parseFloat(a)));
  c && (a = parseInt(a * b, 10) / 100);
  return 1E-6 > Math.abs(a - b) ? 1 : a % b / parseFloat(b);
};
Entry.Utils.hexToHsl = function(a) {
  var b, c;
  7 === a.length ? (b = parseInt(a.substr(1, 2), 16), c = parseInt(a.substr(3, 2), 16), a = parseInt(a.substr(5, 2), 16)) : (b = parseInt(a.substr(1, 2), 16), c = parseInt(a.substr(2, 2), 16), a = parseInt(a.substr(3, 2), 16));
  b = Entry.Utils.bound01(b, 255);
  c = Entry.Utils.bound01(c, 255);
  a = Entry.Utils.bound01(a, 255);
  var d = Math.max(b, c, a), e = Math.min(b, c, a), f, g = (d + e) / 2;
  if (d == e) {
    f = e = 0;
  } else {
    var h = d - e, e = .5 < g ? h / (2 - d - e) : h / (d + e);
    switch(d) {
      case b:
        f = (c - a) / h + (c < a ? 6 : 0);
        break;
      case c:
        f = (a - b) / h + 2;
        break;
      case a:
        f = (b - c) / h + 4;
    }
    f /= 6;
  }
  return {h:360 * f, s:e, l:g};
};
Entry.Utils.hslToHex = function(a) {
  function b(b, a, c) {
    0 > c && (c += 1);
    1 < c && --c;
    return c < 1 / 6 ? b + 6 * (a - b) * c : .5 > c ? a : c < 2 / 3 ? b + (a - b) * (2 / 3 - c) * 6 : b;
  }
  function c(b) {
    return 1 == b.length ? "0" + b : "" + b;
  }
  var d, e;
  e = Entry.Utils.bound01(a.h, 360);
  d = Entry.Utils.bound01(a.s, 1);
  a = Entry.Utils.bound01(a.l, 1);
  if (0 === d) {
    d = a = e = a;
  } else {
    var f = .5 > a ? a * (1 + d) : a + d - a * d, g = 2 * a - f;
    d = b(g, f, e + 1 / 3);
    a = b(g, f, e);
    e = b(g, f, e - 1 / 3);
  }
  a *= 255;
  e *= 255;
  return "#" + [c(Math.round(255 * d).toString(16)), c(Math.round(a).toString(16)), c(Math.round(e).toString(16))].join("");
};
Entry.Utils.bindGlobalEvent = function(a) {
  var b = $(document);
  void 0 === a && (a = "resize mousedown mousemove keydown keyup dispose".split(" "));
  -1 < a.indexOf("resize") && (Entry.windowReszied && ($(window).off("resize"), Entry.windowReszied.clear()), Entry.windowResized = new Entry.Event(window), $(window).on("resize", function(b) {
    Entry.windowResized.notify(b);
  }));
  -1 < a.indexOf("mousedown") && (Entry.documentMousedown && (b.off("mousedown"), Entry.documentMousedown.clear()), Entry.documentMousedown = new Entry.Event(window), b.on("mousedown", function(b) {
    Entry.documentMousedown.notify(b);
  }));
  -1 < a.indexOf("mousemove") && (Entry.documentMousemove && (b.off("touchmove mousemove"), Entry.documentMousemove.clear()), Entry.mouseCoordinate = {}, Entry.documentMousemove = new Entry.Event(window), b.on("touchmove mousemove", function(b) {
    b.originalEvent && b.originalEvent.touches && (b = b.originalEvent.touches[0]);
    Entry.documentMousemove.notify(b);
    Entry.mouseCoordinate.x = b.clientX;
    Entry.mouseCoordinate.y = b.clientY;
  }));
  -1 < a.indexOf("keydown") && (Entry.keyPressed && (b.off("keydown"), Entry.keyPressed.clear()), Entry.pressedKeys = [], Entry.keyPressed = new Entry.Event(window), b.on("keydown", function(b) {
    var a = b.keyCode;
    0 > Entry.pressedKeys.indexOf(a) && Entry.pressedKeys.push(a);
    Entry.keyPressed.notify(b);
  }));
  -1 < a.indexOf("keyup") && (Entry.keyUpped && (b.off("keyup"), Entry.keyUpped.clear()), Entry.keyUpped = new Entry.Event(window), b.on("keyup", function(b) {
    var a = Entry.pressedKeys.indexOf(b.keyCode);
    -1 < a && Entry.pressedKeys.splice(a, 1);
    Entry.keyUpped.notify(b);
  }));
  -1 < a.indexOf("dispose") && (Entry.disposeEvent && Entry.disposeEvent.clear(), Entry.disposeEvent = new Entry.Event(window), Entry.documentMousedown && Entry.documentMousedown.attach(this, function(b) {
    Entry.disposeEvent.notify(b);
  }));
};
Entry.Utils.makeActivityReporter = function() {
  Entry.activityReporter = new Entry.ActivityReporter;
  Entry.commander && Entry.commander.addReporter(Entry.activityReporter);
  return Entry.activityReporter;
};
Entry.Utils.initEntryEvent_ = function() {
  Entry.events_ || (Entry.events_ = []);
};
Entry.sampleColours = [];
Entry.assert = function(a, b) {
  if (!a) {
    throw Error(b || "Assert failed");
  }
};
Entry.parseTexttoXML = function(a) {
  var b;
  window.ActiveXObject ? (b = new ActiveXObject("Microsoft.XMLDOM"), b.async = "false", b.loadXML(a)) : b = (new DOMParser).parseFromString(a, "text/xml");
  return b;
};
Entry.createElement = function(a, b) {
  a = a instanceof HTMLElement ? a : document.createElement(a);
  b && (a.id = b);
  a.hasClass = function(b) {
    return this.className.match(new RegExp("(\\s|^)" + b + "(\\s|$)"));
  };
  a.addClass = function(b) {
    for (var a = this.className, c = 0;c < arguments.length;c++) {
      b = arguments[c], this.hasClass(b) || (a += " " + b);
    }
    this.className = a;
  };
  a.removeClass = function(b) {
    for (var a = this.className, c = 0;c < arguments.length;c++) {
      b = arguments[c], this.hasClass(b) && (a = a.replace(new RegExp("(\\s|^)" + b + "(\\s|$)"), " "));
    }
    this.className = a;
  };
  a.bindOnClick = function(b) {
    $(this).on("click tab", function(a) {
      a.stopImmediatePropagation();
      b.call(this, a);
    });
  };
  return a;
};
Entry.makeAutolink = function(a) {
  return a ? a.replace(/(http|https|ftp|telnet|news|irc):\/\/([-/.a-zA-Z0-9_~#%$?&=:200-377()][^)\]}]+)/gi, "<a href='$1://$2' target='_blank'>$1://$2</a>").replace(/([xA1-xFEa-z0-9_-]+@[xA1-xFEa-z0-9-]+.[a-z0-9-]+)/gi, "<a href='mailto:$1'>$1</a>") : "";
};
Entry.generateHash = function() {
  return ("0000" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).substr(-4);
};
Entry.addEventListener = function(a, b) {
  this.events_ || (this.events_ = {});
  this.events_[a] || (this.events_[a] = []);
  b instanceof Function && this.events_[a].push(b);
  return !0;
};
Entry.dispatchEvent = function(a, b) {
  this.events_ || (this.events_ = {});
  if (this.events_[a]) {
    for (var c = 0, d = this.events_[a].length;c < d;c++) {
      this.events_[a][c].call(window, b);
    }
  }
};
Entry.removeEventListener = function(a, b) {
  if (this.events_[a]) {
    for (var c = 0, d = this.events_[a].length;c < d;c++) {
      if (this.events_[a][c] === b) {
        this.events_[a].splice(c, 1);
        break;
      }
    }
  }
};
Entry.removeAllEventListener = function(a) {
  this.events_ && this.events_[a] && delete this.events_[a];
};
Entry.addTwoNumber = function(a, b) {
  if (isNaN(a) || isNaN(b)) {
    return a + b;
  }
  a += "";
  b += "";
  var c = a.indexOf("."), d = b.indexOf("."), e = 0, f = 0;
  0 < c && (e = a.length - c - 1);
  0 < d && (f = b.length - d - 1);
  return 0 < e || 0 < f ? e >= f ? (parseFloat(a) + parseFloat(b)).toFixed(e) : (parseFloat(a) + parseFloat(b)).toFixed(f) : parseInt(a) + parseInt(b);
};
Entry.hex2rgb = function(a) {
  return (a = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a)) ? {r:parseInt(a[1], 16), g:parseInt(a[2], 16), b:parseInt(a[3], 16)} : null;
};
Entry.rgb2hex = function(a, b, c) {
  return "#" + (16777216 + (a << 16) + (b << 8) + c).toString(16).slice(1);
};
Entry.generateRgb = function() {
  return {r:Math.floor(256 * Math.random()), g:Math.floor(256 * Math.random()), b:Math.floor(256 * Math.random())};
};
Entry.adjustValueWithMaxMin = function(a, b, c) {
  return a > c ? c : a < b ? b : a;
};
Entry.isExist = function(a, b, c) {
  for (var d = 0;d < c.length;d++) {
    if (c[d][b] == a) {
      return c[d];
    }
  }
  return !1;
};
Entry.getColourCodes = function() {
  return "transparent #660000 #663300 #996633 #003300 #003333 #003399 #000066 #330066 #660066 #FFFFFF #990000 #993300 #CC9900 #006600 #336666 #0033FF #000099 #660099 #990066 #000000 #CC0000 #CC3300 #FFCC00 #009900 #006666 #0066FF #0000CC #663399 #CC0099 #333333 #FF0000 #FF3300 #FFFF00 #00CC00 #009999 #0099FF #0000FF #9900CC #FF0099 #666666 #CC3333 #FF6600 #FFFF33 #00FF00 #00CCCC #00CCFF #3366FF #9933FF #FF00FF #999999 #FF6666 #FF6633 #FFFF66 #66FF66 #66CCCC #00FFFF #3399FF #9966FF #FF66FF #BBBBBB #FF9999 #FF9966 #FFFF99 #99FF99 #66FFCC #99FFFF #66CCff #9999FF #FF99FF #CCCCCC #FFCCCC #FFCC99 #FFFFCC #CCFFCC #99FFCC #CCFFFF #99CCFF #CCCCFF #FFCCFF".split(" ");
};
Entry.removeElement = function(a) {
  a && a.parentNode && a.parentNode.removeChild(a);
};
Entry.getElementsByClassName = function(a) {
  for (var b = [], c = document.getElementsByTagName("*"), d = 0;d < c.length;d++) {
    -1 < (" " + c[d].className + " ").indexOf(" " + a + " ") && b.push(c[d]);
  }
  return b;
};
Entry.parseNumber = function(a) {
  return "string" != typeof a || isNaN(Number(a)) ? "number" != typeof a || isNaN(Number(a)) ? !1 : a : Number(a);
};
Entry.countStringLength = function(a) {
  var b, c = 0;
  for (b = 0;b < a.length;b++) {
    255 < a.charCodeAt(b) ? c += 2 : c++;
  }
  return c;
};
Entry.cutStringByLength = function(a, b) {
  var c, d = 0;
  for (c = 0;d < b && c < a.length;c++) {
    255 < a.charCodeAt(c) ? d += 2 : d++;
  }
  return a.substr(0, c);
};
Entry.isChild = function(a, b) {
  if (!b) {
    for (;b.parentNode;) {
      if ((b = b.parentNode) == a) {
        return !0;
      }
    }
  }
  return !1;
};
Entry.launchFullScreen = function(a) {
  a.requestFullscreen ? a.requestFullscreen() : a.mozRequestFulScreen ? a.mozRequestFulScreen() : a.webkitRequestFullscreen ? a.webkitRequestFullscreen() : a.msRequestFullScreen && a.msRequestFullScreen();
};
Entry.exitFullScreen = function() {
  document.exitFullScreen ? document.exitFullScreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen && document.webkitExitFullscreen();
};
Entry.isPhone = function() {
  return !1;
};
Entry.getKeyCodeMap = function() {
  return {65:"a", 66:"b", 67:"c", 68:"d", 69:"e", 70:"f", 71:"g", 72:"h", 73:"i", 74:"j", 75:"k", 76:"l", 77:"m", 78:"n", 79:"o", 80:"p", 81:"q", 82:"r", 83:"s", 84:"t", 85:"u", 86:"v", 87:"w", 88:"x", 89:"y", 90:"z", 32:Lang.Blocks.START_press_some_key_space, 37:Lang.Blocks.START_press_some_key_left, 38:Lang.Blocks.START_press_some_key_up, 39:Lang.Blocks.START_press_some_key_right, 40:Lang.Blocks.START_press_some_key_down, 48:"0", 49:"1", 50:"2", 51:"3", 52:"4", 53:"5", 54:"6", 55:"7", 56:"8", 57:"9", 
  13:Lang.Blocks.START_press_some_key_enter};
};
Entry.checkCollisionRect = function(a, b) {
  return !(a.y + a.height < b.y || a.y > b.y + b.height || a.x + a.width < b.x || a.x > b.x + b.width);
};
Entry.bindAnimationCallback = function(a, b) {
  a.addEventListener("webkitAnimationEnd", b, !1);
  a.addEventListener("animationend", b, !1);
  a.addEventListener("oanimationend", b, !1);
};
Entry.cloneSimpleObject = function(a) {
  var b = {}, c;
  for (c in a) {
    b[c] = a[c];
  }
  return b;
};
Entry.nodeListToArray = function(a) {
  for (var b = Array(a.length), c = -1, d = a.length;++c !== d;b[c] = a[c]) {
  }
  return b;
};
Entry.computeInputWidth = function(a) {
  var b = document.getElementById("entryInputForComputeWidth");
  b || (b = document.createElement("span"), b.setAttribute("id", "entryInputForComputeWidth"), b.className = "elem-element", document.body.appendChild(b));
  b.innerHTML = a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
  return Number(b.offsetWidth + 10) + "px";
};
Entry.isArrowOrBackspace = function(a) {
  return -1 < [37, 38, 39, 40, 8].indexOf(a);
};
Entry.hexStringToBin = function(a) {
  for (var b = [], c = 0;c < a.length - 1;c += 2) {
    b.push(parseInt(a.substr(c, 2), 16));
  }
  return String.fromCharCode.apply(String, b);
};
Entry.findObjsByKey = function(a, b, c) {
  for (var d = [], e = 0;e < a.length;e++) {
    a[e][b] == c && d.push(a[e]);
  }
  return d;
};
Entry.factorials = [];
Entry.factorial = function(a) {
  return 0 === a || 1 == a ? 1 : 0 < Entry.factorials[a] ? Entry.factorials[a] : Entry.factorials[a] = Entry.factorial(a - 1) * a;
};
Entry.getListRealIndex = function(a, b) {
  if (isNaN(a)) {
    switch(a) {
      case "FIRST":
        a = 1;
        break;
      case "LAST":
        a = b.array_.length;
        break;
      case "RANDOM":
        a = Math.floor(Math.random() * b.array_.length) + 1;
    }
  }
  return a;
};
Entry.toRadian = function(a) {
  return a * Math.PI / 180;
};
Entry.toDegrees = function(a) {
  return 180 * a / Math.PI;
};
Entry.getPicturesJSON = function(a) {
  for (var b = [], c = 0, d = a.length;c < d;c++) {
    var e = a[c], f = {};
    f._id = e._id;
    f.id = e.id;
    f.dimension = e.dimension;
    f.filename = e.filename;
    f.fileurl = e.fileurl;
    f.name = e.name;
    f.scale = e.scale;
    b.push(f);
  }
  return b;
};
Entry.getSoundsJSON = function(a) {
  for (var b = [], c = 0, d = a.length;c < d;c++) {
    var e = a[c], f = {};
    f._id = e._id;
    f.duration = e.duration;
    f.ext = e.ext;
    f.id = e.id;
    f.filename = e.filename;
    f.fileurl = e.fileurl;
    f.name = e.name;
    b.push(f);
  }
  return b;
};
Entry.cutDecimal = function(a) {
  return Math.round(100 * a) / 100;
};
Entry.getBrowserType = function() {
  if (Entry.userAgent) {
    return Entry.userAgent;
  }
  var a = navigator.userAgent, b, c = a.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
  if (/trident/i.test(c[1])) {
    return b = /\brv[ :]+(\d+)/g.exec(a) || [], "IE " + (b[1] || "");
  }
  if ("Chrome" === c[1] && (b = a.match(/\b(OPR|Edge)\/(\d+)/), null != b)) {
    return b.slice(1).join(" ").replace("OPR", "Opera");
  }
  c = c[2] ? [c[1], c[2]] : [navigator.appName, navigator.appVersion, "-?"];
  null != (b = a.match(/version\/(\d+)/i)) && c.splice(1, 1, b[1]);
  a = c.join(" ");
  return Entry.userAgent = a;
};
Entry.setBasicBrush = function(a) {
  var b = new createjs.Graphics;
  b.thickness = 1;
  b.rgb = Entry.hex2rgb("#ff0000");
  b.opacity = 100;
  b.setStrokeStyle(1);
  b.beginStroke("rgba(255,0,0,1)");
  var c = new createjs.Shape(b);
  Entry.stage.selectedObjectContainer.addChild(c);
  a.brush && (a.brush = null);
  a.brush = b;
  a.shape && (a.shape = null);
  a.shape = c;
};
Entry.setCloneBrush = function(a, b) {
  var c = new createjs.Graphics;
  c.thickness = b.thickness;
  c.rgb = b.rgb;
  c.opacity = b.opacity;
  c.setStrokeStyle(c.thickness);
  c.beginStroke("rgba(" + c.rgb.r + "," + c.rgb.g + "," + c.rgb.b + "," + c.opacity / 100 + ")");
  b = new createjs.Shape(c);
  Entry.stage.selectedObjectContainer.addChild(b);
  a.brush && (a.brush = null);
  a.brush = c;
  a.shape && (a.shape = null);
  a.shape = b;
};
Entry.isFloat = function(a) {
  return /\d+\.{1}\d+$/.test(a);
};
Entry.getStringIndex = function(a) {
  if (!a) {
    return "";
  }
  for (var b = {string:a, index:1}, c = 0, d = [], e = a.length - 1;0 < e;--e) {
    var f = a.charAt(e);
    if (isNaN(f)) {
      break;
    } else {
      d.unshift(f), c = e;
    }
  }
  0 < c && (b.string = a.substring(0, c), b.index = parseInt(d.join("")) + 1);
  return b;
};
Entry.getOrderedName = function(a, b, c) {
  if (!a) {
    return "untitled";
  }
  if (!b || 0 === b.length) {
    return a;
  }
  c || (c = "name");
  for (var d = 0, e = Entry.getStringIndex(a), f = 0, g = b.length;f < g;f++) {
    var h = Entry.getStringIndex(b[f][c]);
    e.string === h.string && h.index > d && (d = h.index);
  }
  return 0 < d ? e.string + d : a;
};
Entry.changeXmlHashId = function(a) {
  if (/function_field/.test(a.getAttribute("type"))) {
    for (var b = a.getElementsByTagName("mutation"), c = 0, d = b.length;c < d;c++) {
      b[c].setAttribute("hashid", Entry.generateHash());
    }
  }
  return a;
};
Entry.getMaxFloatPoint = function(a) {
  for (var b = 0, c = 0, d = a.length;c < d;c++) {
    var e = String(a[c]), f = e.indexOf(".");
    -1 !== f && (e = e.length - (f + 1), e > b && (b = e));
  }
  return Math.min(b, 20);
};
Entry.convertToRoundedDecimals = function(a, b) {
  return isNaN(a) || !this.isFloat(a) ? a : Number(Math.round(a + "e" + b) + "e-" + b);
};
Entry.attachEventListener = function(a, b, c) {
  setTimeout(function() {
    a.addEventListener(b, c);
  }, 0);
};
Entry.deAttachEventListener = function(a, b, c) {
  a.removeEventListener(b, c);
};
Entry.isEmpty = function(a) {
  if (!a) {
    return !0;
  }
  for (var b in a) {
    if (a.hasOwnProperty(b)) {
      return !1;
    }
  }
  return !0;
};
Entry.Utils.disableContextmenu = function(a) {
  if (a) {
    $(a).on("contextmenu", function(b) {
      b.stopPropagation();
      b.preventDefault();
      return !1;
    });
  }
};
Entry.Utils.isRightButton = function(a) {
  return 2 == a.button || a.ctrlKey;
};
Entry.Utils.isTouchEvent = function(a) {
  return "mousedown" !== a.type.toLowerCase();
};
Entry.Utils.inherit = function(a, b) {
  function c() {
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  return b;
};
Entry.bindAnimationCallbackOnce = function(a, b) {
  a.one("webkitAnimationEnd animationendo animationend", b);
};
Entry.Utils.isInInput = function(a) {
  return "textarea" == a.target.type || "text" == a.target.type;
};
Entry.Utils.isFunction = function(a) {
  return "function" === typeof a;
};
Entry.Utils.addFilters = function(a, b) {
  a = a.elem("defs");
  var c = a.elem("filter", {id:"entryTrashcanFilter_" + b});
  c.elem("feGaussianBlur", {"in":"SourceAlpha", stdDeviation:2, result:"blur"});
  c.elem("feOffset", {"in":"blur", dx:1, dy:1, result:"offsetBlur"});
  c = c.elem("feMerge");
  c.elem("feMergeNode", {"in":"offsetBlur"});
  c.elem("feMergeNode", {"in":"SourceGraphic"}, c);
  c = a.elem("filter", {id:"entryBlockShadowFilter_" + b, height:"200%"});
  c.elem("feOffset", {result:"offOut", in:"SourceGraphic", dx:0, dy:1});
  c.elem("feColorMatrix", {result:"matrixOut", in:"offOut", type:"matrix", values:"0.7 0 0 0 0 0 0.7 0 0 0 0 0 0.7 0 0 0 0 0 1 0"});
  c.elem("feBlend", {in:"SourceGraphic", in1:"offOut", mode:"normal"});
  b = a.elem("filter", {id:"entryBlockHighlightFilter_" + b});
  b.elem("feOffset", {result:"offOut", in:"SourceGraphic", dx:0, dy:0});
  b.elem("feColorMatrix", {result:"matrixOut", in:"offOut", type:"matrix", values:"1.3 0 0 0 0 0 1.3 0 0 0 0 0 1.3 0 0 0 0 0 1 0"});
};
Entry.Utils.addBlockPattern = function(a, b) {
  a = a.elem("pattern", {id:"blockHoverPattern_" + b, class:"blockHoverPattern", patternUnits:"userSpaceOnUse", patternTransform:"translate(12, 0)", x:0, y:0, width:125, height:33, style:"display: none"});
  b = Entry.mediaFilePath + "block_pattern_(order).png";
  for (var c = 1;5 > c;c++) {
    a.elem("image", {class:"pattern" + c, href:b.replace("(order)", c), x:0, y:0, width:125, height:33});
  }
  return {pattern:a};
};
Entry.Utils.COLLISION = {NONE:0, UP:1, RIGHT:2, LEFT:3, DOWN:4};
Entry.Utils.createMouseEvent = function(a, b) {
  var c = document.createEvent("MouseEvent");
  c.initMouseEvent(a, !0, !0, window, 0, 0, 0, b.clientX, b.clientY, !1, !1, !1, !1, 0, null);
  return c;
};
Entry.Utils.xmlToJsonData = function(a) {
  a = $.parseXML(a);
  var b = [];
  a = a.childNodes[0].childNodes;
  for (var c in a) {
    var d = a[c];
    if (d.tagName) {
      var e = {category:d.getAttribute("id"), blocks:[]}, d = d.childNodes;
      for (c in d) {
        var f = d[c];
        f.tagName && (f = f.getAttribute("type")) && e.blocks.push(f);
      }
      b.push(e);
    }
  }
  return b;
};
Entry.Utils.stopProjectWithToast = function(a, b, c) {
  var d = a.block;
  b = b || "\ub7f0\ud0c0\uc784 \uc5d0\ub7ec \ubc1c\uc0dd";
  Entry.toast && !c && Entry.toast.alert(Lang.Msgs.warn, Lang.Workspace.check_runtime_error, !0);
  Entry.engine && Entry.engine.toggleStop();
  "workspace" === Entry.type && (a.block && "funcBlock" in a.block ? d = a.block.funcBlock : a.funcExecutor && (d = a.funcExecutor.scope.block, a = a.type.replace("func_", ""), Entry.Func.edit(Entry.variableContainer.functions_[a])), d && (Entry.container.selectObject(d.getCode().object.id, !0), d.view.getBoard().activateBlock(d)));
  throw Error(b);
};
Entry.Utils.AsyncError = function(a) {
  this.name = "AsyncError";
  this.message = a || "\ube44\ub3d9\uae30 \ud638\ucd9c \ub300\uae30";
};
Entry.Utils.AsyncError.prototype = Error();
Entry.Utils.AsyncError.prototype.constructor = Entry.Utils.AsyncError;
Entry.Utils.isChrome = function() {
  return /chrom(e|ium)/.test(navigator.userAgent.toLowerCase());
};
Entry.Utils.waitForWebfonts = function(a, b) {
  var c = 0;
  if (a && a.length) {
    for (var d = 0, e = a.length;d < e;++d) {
      (function(d) {
        function e() {
          f && f.offsetWidth != k && (++c, f.parentNode.removeChild(f), f = null);
          if (c >= a.length && (l && clearInterval(l), c == a.length)) {
            return b(), !0;
          }
        }
        var f = document.createElement("span");
        f.innerHTML = "giItT1WQy@!-/#";
        f.style.position = "absolute";
        f.style.left = "-10000px";
        f.style.top = "-10000px";
        f.style.fontSize = "300px";
        f.style.fontFamily = "sans-serif";
        f.style.fontVariant = "normal";
        f.style.fontStyle = "normal";
        f.style.fontWeight = "normal";
        f.style.letterSpacing = "0";
        document.body.appendChild(f);
        var k = f.offsetWidth;
        f.style.fontFamily = d;
        var l;
        e() || (l = setInterval(e, 50));
      })(a[d]);
    }
  } else {
    return b && b(), !0;
  }
};
window.requestAnimFrame = function() {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(a) {
    window.setTimeout(a, 1E3 / 60);
  };
}();
Entry.isMobile = function() {
  if (Entry.device) {
    return "tablet" === Entry.device;
  }
  var a = window.platform;
  if (a && a.type && ("tablet" === a.type || "mobile" === a.type)) {
    return Entry.device = "tablet", !0;
  }
  Entry.device = "desktop";
  return !1;
};
Entry.Utils.convertMouseEvent = function(a) {
  return a.originalEvent && a.originalEvent.touches ? a.originalEvent.touches[0] : a;
};
Entry.Utils.convertIntToHex = function(a) {
  return a.toString(16).toUpperCase();
};
Entry.Utils.hasSpecialCharacter = function(a) {
  return /!|@|#|\$|%|\^|&|\*|\(|\)|\+|=|-|\[|\]|\\|\'|;|,|\.|\/|{|}|\||\"|:|<|>|\?/g.test(a);
};
Entry.Utils.debounce = function(a, b, c) {
  var d;
  return function() {
    var e = this, f = arguments, g = c && !d;
    clearTimeout(d);
    d = setTimeout(function() {
      d = null;
      c || a.apply(e, f);
    }, b);
    g && a.apply(e, f);
    return d;
  };
};
Entry.Utils.isNewVersion = function(a, b) {
  try {
    a = a.replace("v", "");
    b = b.replace("v", "");
    var c = a.split("."), d = b.split("."), e = c.length < d.length ? c.length : d.length;
    a = !1;
    b = !0;
    for (var f = 0;f < e;f++) {
      Number(c[f]) < Number(d[f]) ? (a = !0, b = !1) : Number(c[f]) > Number(d[f]) && (b = !1);
    }
    b && c.length < d.length && (a = !0);
    return a;
  } catch (g) {
    return !1;
  }
};
Entry.Utils.getBlockCategory = function() {
  var a = {}, b;
  return function(c) {
    if (c) {
      if (a[c]) {
        return a[c];
      }
      b || (b = EntryStatic.getAllBlocks());
      for (var d = 0;d < b.length;d++) {
        var e = b[d], f = e.category;
        if (-1 < e.blocks.indexOf(c)) {
          return a[c] = f;
        }
      }
    }
  };
}();
Entry.Utils.getUniqObjectsBlocks = function(a) {
  a = a || Entry.container.objects_;
  var b = [];
  a.forEach(function(a) {
    a = a.script;
    a instanceof Entry.Code || (a = new Entry.Code(a));
    a.getBlockList().forEach(function(a) {
      0 > b.indexOf(a.type) && b.push(a.type);
    });
  });
  return b;
};
Entry.Utils.makeCategoryDataByBlocks = function(a) {
  if (a) {
    for (var b = this, c = EntryStatic.getAllBlocks(), d = {}, e = 0;e < c.length;e++) {
      var f = c[e];
      f.blocks = [];
      d[f.category] = e;
    }
    a.forEach(function(a) {
      var e = b.getBlockCategory(a), e = d[e];
      void 0 !== e && c[e].blocks.push(a);
    });
    a = EntryStatic.getAllBlocks();
    for (e = 0;e < a.length;e++) {
      var f = a[e], g = f.blocks;
      if ("func" === f.category) {
        a.splice(e, 1);
      } else {
        var h = c[e].blocks, k = [];
        g.forEach(function(b) {
          -1 < h.indexOf(b) && k.push(b);
        });
        c[e].blocks = k;
      }
    }
    return c;
  }
};
Entry.Utils.blur = function() {
  var a = document.activeElement;
  a && a.blur && a.blur();
};
Entry.Utils.getWindow = function(a) {
  if (a) {
    for (var b = 0;b < window.frames.length;b++) {
      var c = window.frames[b];
      if (c.Entry && c.Entry.hashId === a) {
        return c;
      }
    }
  }
};
Entry.Utils.restrictAction = function(a, b) {
  a = a || [];
  a = a.map(function(b) {
    return b[0];
  });
  var c = function(c) {
    c = c || window.event;
    console.log(c);
    0 > a.indexOf(c.target || c.srcElement) ? (c.preventDefault || (c.returnValue = !1, c.cancelBubble = !0), c.preventDefault(), c.stopPropagation()) : b();
  };
  this._restrictHandler = c;
  var d = Entry.getDom();
  d.addEventListener ? (d.addEventListener("click", c, !0), d.addEventListener("mousedown", c, !0), d.addEventListener("touchstart", c, !0)) : (d.attachEvent("onclick", c), d.attachEvent("onmousedown", c), d.attachEvent("ontouchstart", c));
};
Entry.Utils.allowAction = function() {
  var a = Entry.getDom();
  this._restrictHandler && (a.addEventListener ? (a.removeEventListener("click", this._restrictHandler, !0), a.removeEventListener("mousedown", this._restrictHandler, !0), a.removeEventListener("touchstart", this._restrictHandler, !0)) : (a.detachEvent("onclick", this._restrictHandler), a.detachEvent("onmousedown", this._restrictHandler), a.detachEvent("ontouchstart", this._restrictHandler)), delete this._restrictHandler);
};
Entry.Model = function(a, b) {
  var c = Entry.Model;
  c.generateSchema(a);
  c.generateSetter(a);
  c.generateObserve(a);
  (void 0 === b || b) && Object.seal(a);
  return a;
};
(function(a) {
  a.generateSchema = function(b) {
    var a = b.schema;
    if (void 0 !== a) {
      a = JSON.parse(JSON.stringify(a));
      b.data = {};
      for (var d in a) {
        (function(c) {
          b.data[c] = a[c];
          Object.defineProperty(b, c, {get:function() {
            return b.data[c];
          }});
        })(d);
      }
      b._toJSON = this._toJSON;
    }
  };
  a.generateSetter = function(b) {
    b.set = this.set;
  };
  a.set = function(b, a) {
    var c = {}, e;
    for (e in this.data) {
      void 0 !== b[e] && (b[e] === this.data[e] ? delete b[e] : (c[e] = this.data[e], this.data[e] = b[e] instanceof Array ? b[e].concat() : b[e]));
    }
    a || this.notify(Object.keys(b), c);
  };
  a.generateObserve = function(b) {
    b.observers = [];
    b.observe = this.observe;
    b.unobserve = this.unobserve;
    b.notify = this.notify;
  };
  a.observe = function(b, a, d, e) {
    d = new Entry.Observer(this.observers, b, a, d);
    if (!1 !== e) {
      b[a]([]);
    }
    return d;
  };
  a.unobserve = function(b) {
    b.destroy();
  };
  a.notify = function(b, a) {
    "string" === typeof b && (b = [b]);
    var c = this;
    c.observers.map(function(d) {
      var e = b;
      void 0 !== d.attrs && (e = Entry.Utils.intersectArray(d.attrs, b));
      if (e.length) {
        d.object[d.funcName](e.map(function(b) {
          return {name:b, object:c, oldValue:a[b]};
        }));
      }
    });
  };
  a._toJSON = function() {
    var b = {}, a;
    for (a in this.data) {
      b[a] = this.data[a];
    }
    return b;
  };
})(Entry.Model);
Entry.Observer = function(a, b, c, d) {
  this.parent = a;
  this.object = b;
  this.funcName = c;
  this.attrs = d;
  a.push(this);
};
(function(a) {
  a.destroy = function() {
    var b = this.parent, a = b.indexOf(this);
    -1 < a && b.splice(a, 1);
    return this;
  };
})(Entry.Observer.prototype);
Entry.STATIC = {OBJECT:0, ENTITY:1, SPRITE:2, SOUND:3, VARIABLE:4, FUNCTION:5, SCENE:6, MESSAGE:7, BLOCK_MODEL:8, BLOCK_RENDER_MODEL:9, BOX_MODEL:10, THREAD_MODEL:11, DRAG_INSTANCE:12, BLOCK_STATIC:0, BLOCK_MOVE:1, BLOCK_FOLLOW:2, RETURN:0, CONTINUE:1, BREAK:2, PASS:3, COMMAND_TYPES:{addThread:101, destroyThread:102, destroyBlock:103, recoverBlock:104, insertBlock:105, separateBlock:106, moveBlock:107, cloneBlock:108, uncloneBlock:109, scrollBoard:110, setFieldValue:111, selectObject:201, "do":301, 
undo:302, redo:303, editPicture:401, uneditPicture:402, processPicture:403, unprocessPicture:404}};
Entry.Command = {};
(function(a) {
  a.do = {type:Entry.STATIC.COMMAND_TYPES["do"], log:function(b) {
    return [a["do"].type];
  }};
  a.undo = {type:Entry.STATIC.COMMAND_TYPES.undo, log:function(b) {
    return [a.undo.type];
  }};
  a.redo = {type:Entry.STATIC.COMMAND_TYPES.redo, log:function(b) {
    return [a.redo.type];
  }};
})(Entry.Command);
Entry.Commander = function(a) {
  if ("workspace" == a || "phone" == a) {
    Entry.stateManager = new Entry.StateManager;
  }
  Entry.do = this.do.bind(this);
  Entry.undo = this.undo.bind(this);
  this.editor = {};
  this.reporters = [];
  this._tempStorage = null;
  Entry.Command.editor = this.editor;
};
(function(a) {
  a.do = function(b) {
    var a = this, d = Array.prototype.slice.call(arguments);
    d.shift();
    var e = Entry.Command[b];
    Entry.stateManager && Entry.stateManager.addCommand.apply(Entry.stateManager, [b, this, this.do, e.undo].concat(e.state.apply(this, d)));
    e = Entry.Command[b].do.apply(this, d);
    setTimeout(function() {
      a.report("do");
      a.report(b, d);
    }, 0);
    return {value:e, isPass:this.isPass.bind(this)};
  };
  a.undo = function() {
    var b = Array.prototype.slice.call(arguments), a = b.shift(), d = Entry.Command[a];
    this.report("undo");
    Entry.stateManager && Entry.stateManager.addCommand.apply(Entry.stateManager, [a, this, this.do, d.undo].concat(d.state.apply(this, b)));
    return {value:Entry.Command[a].do.apply(this, b), isPass:this.isPass.bind(this)};
  };
  a.redo = function() {
    var b = Array.prototype.slice.call(arguments), a = b.shift(), d = Entry.Command[a];
    that.report("redo");
    Entry.stateManager && Entry.stateManager.addCommand.apply(Entry.stateManager, [a, this, this.undo, a].concat(d.state.apply(null, b)));
    d.undo.apply(this, b);
  };
  a.setCurrentEditor = function(b, a) {
    this.editor[b] = a;
  };
  a.isPass = function(b) {
    b = void 0 === b ? !0 : b;
    if (Entry.stateManager) {
      var a = Entry.stateManager.getLastCommand();
      a && (a.isPass = b);
    }
  };
  a.addReporter = function(b) {
    this.reporters.push(b);
  };
  a.removeReporter = function(b) {
    b = this.reporters.indexOf(b);
    -1 < b && this.reporters.splice(b, 1);
  };
  a.report = function(b, a) {
    var c = this.reporters;
    if (0 !== c.length) {
      var e;
      e = b && Entry.Command[b] && Entry.Command[b].log ? Entry.Command[b].log.apply(this, a) : a;
      c.forEach(function(b) {
        b.add(e);
      });
    }
  };
})(Entry.Commander.prototype);
(function(a) {
  a.addThread = {type:Entry.STATIC.COMMAND_TYPES.addThread, do:function(b) {
    return this.editor.board.code.createThread(b);
  }, state:function(b) {
    b.length && (b[0].id = Entry.Utils.generateId());
    return [b];
  }, log:function(b) {
    b = this.editor.board.code.getThreads().pop();
    return [a.addThread.type, ["thread", b.stringify()], ["code", this.editor.board.code.stringify()]];
  }, undo:"destroyThread"};
  a.destroyThread = {type:Entry.STATIC.COMMAND_TYPES.destroyThread, do:function(b) {
    this.editor.board.findById(b[0].id).destroy(!0, !0);
  }, state:function(b) {
    return [this.editor.board.findById(b[0].id).thread.toJSON()];
  }, log:function(b) {
    b = b[0].id;
    this.editor.board.findById(b);
    return [a.destroyThread.type, ["blockId", b], ["code", this.editor.board.code.stringify()]];
  }, undo:"addThread"};
  a.destroyBlock = {type:Entry.STATIC.COMMAND_TYPES.destroyBlock, do:function(b) {
    "string" === typeof b && (b = this.editor.board.findById(b));
    b.doDestroy(!0);
  }, state:function(b) {
    "string" === typeof b && (b = this.editor.board.findById(b));
    return [b.toJSON(), b.pointer()];
  }, log:function(b) {
    "string" === typeof b && (b = this.editor.board.findById(b));
    return [a.destroyBlock.type, ["blockId", b.id], ["code", this.editor.board.code.stringify()]];
  }, undo:"recoverBlock"};
  a.recoverBlock = {type:Entry.STATIC.COMMAND_TYPES.recoverBlock, do:function(b, a) {
    b = this.editor.board.code.createThread([b]).getFirstBlock();
    "string" === typeof b && (b = this.editor.board.findById(b));
    this.editor.board.insert(b, a);
  }, state:function(b) {
    "string" !== typeof b && (b = b.id);
    return [b];
  }, log:function(b, c) {
    b = this.editor.board.findById(b.id);
    return [a.recoverBlock.type, ["block", b.stringify()], ["pointer", c], ["code", this.editor.board.code.stringify()]];
  }, undo:"destroyBlock"};
  a.insertBlock = {type:Entry.STATIC.COMMAND_TYPES.insertBlock, do:function(b, a, d) {
    "string" === typeof b && (b = this.editor.board.findById(b));
    this.editor.board.insert(b, a, d);
  }, state:function(b, a) {
    "string" === typeof b && (b = this.editor.board.findById(b));
    a = [b.id];
    var c = b.targetPointer();
    a.push(c);
    "string" !== typeof b && "basic" === b.getBlockType() && a.push(b.thread.getCount(b));
    return a;
  }, log:function(b, c, d) {
    "string" === typeof b && (b = this.editor.board.findById(b));
    return [a.insertBlock.type, ["blockId", b.id], ["targetPointer", b.targetPointer()], ["count", d], ["code", this.editor.board.code.stringify()]];
  }, undo:"insertBlock"};
  a.separateBlock = {type:Entry.STATIC.COMMAND_TYPES.separateBlock, do:function(b) {
    b.view && b.view._toGlobalCoordinate(Entry.DRAG_MODE_DRAG);
    b.doSeparate();
  }, state:function(b) {
    var a = [b.id], d = b.targetPointer();
    a.push(d);
    "basic" === b.getBlockType() && a.push(b.thread.getCount(b));
    return a;
  }, log:function(b) {
    "string" === typeof b && (b = this.editor.board.findById(b));
    return [a.separateBlock.type, ["blockId", b.id], ["x", b.x], ["y", b.y], ["code", this.editor.board.code.stringify()]];
  }, undo:"insertBlock"};
  a.moveBlock = {type:Entry.STATIC.COMMAND_TYPES.moveBlock, do:function(b, a, d) {
    void 0 !== a ? (b = this.editor.board.findById(b), b.moveTo(a, d)) : b._updatePos();
  }, state:function(b) {
    "string" === typeof b && (b = this.editor.board.findById(b));
    return [b.id, b.x, b.y];
  }, log:function(b, c, d) {
    return [a.moveBlock.type, ["blockId", b.id], ["x", b.x], ["y", b.y], ["code", this.editor.board.code.stringify()]];
  }, undo:"moveBlock"};
  a.cloneBlock = {type:Entry.STATIC.COMMAND_TYPES.cloneBlock, do:function(b) {
    "string" === typeof b && (b = this.editor.board.findById(b));
    this.editor.board.code.createThread(b.copy());
  }, state:function(b) {
    "string" !== typeof b && (b = b.id);
    return [b];
  }, log:function(b) {
    "string" === typeof b && (b = this.editor.board.findById(b));
    var c = this.editor.board.code.getThreads().pop();
    return [a.cloneBlock.type, ["blockId", b.id], ["thread", c.stringify()], ["code", this.editor.board.code.stringify()]];
  }, undo:"uncloneBlock"};
  a.uncloneBlock = {type:Entry.STATIC.COMMAND_TYPES.uncloneBlock, do:function(b) {
    b = this.editor.board.code.getThreads().pop().getFirstBlock();
    this._tempStorage = b.id;
    b.destroy(!0, !0);
  }, state:function(b) {
    return [b];
  }, log:function(b) {
    b = this._tempStorage;
    this._tempStorage = null;
    return [a.uncloneBlock.type, ["blockId", b], ["code", this.editor.board.code.stringify()]];
  }, undo:"cloneBlock"};
  a.scrollBoard = {type:Entry.STATIC.COMMAND_TYPES.scrollBoard, do:function(b, a, d) {
    d || this.editor.board.scroller._scroll(b, a);
    delete this.editor.board.scroller._diffs;
  }, state:function(b, a) {
    return [-b, -a];
  }, log:function(b, c) {
    return [a.scrollBoard.type, ["dx", b], ["dy", c]];
  }, undo:"scrollBoard"};
  a.setFieldValue = {type:Entry.STATIC.COMMAND_TYPES.setFieldValue, do:function(b, a, d, e, f) {
    a.setValue(f, !0);
  }, state:function(b, a, d, e, f) {
    return [b, a, d, f, e];
  }, log:function(b, c, d, e, f) {
    return [a.setFieldValue.type, ["pointer", d], ["newValue", f], ["code", this.editor.board.code.stringify()]];
  }, undo:"setFieldValue"};
})(Entry.Command);
(function(a) {
  a.selectObject = {type:Entry.STATIC.COMMAND_TYPES.selectObject, do:function(b) {
    return Entry.container.selectObject(b);
  }, state:function(b) {
    if ((b = Entry.playground) && b.object) {
      return [b.object.id];
    }
  }, log:function(b) {
    return [b];
  }, undo:"selectObject"};
})(Entry.Command);
(function(a) {
  a.editPicture = {type:Entry.STATIC.COMMAND_TYPES.editPicture, do:function(b, a) {
    Entry.playground.painter.lc.canRedo() && Entry.playground.painter.lc.redo();
  }, state:function(b) {
  }, log:function(b) {
    return [b];
  }, undo:"uneditPicture"};
  a.uneditPicture = {type:Entry.STATIC.COMMAND_TYPES.uneditPicture, do:function(b, a) {
    Entry.playground.painter.lc.undo();
  }, state:function(b) {
  }, log:function(b) {
    return [b];
  }, undo:"editPicture"};
  a.processPicture = {type:Entry.STATIC.COMMAND_TYPES.processPicture, do:function(b, a) {
    Entry.playground.painter.lc.canRedo() && Entry.playground.painter.lc.redo();
  }, state:function(b) {
  }, log:function(b) {
    return [b];
  }, undo:"unprocessPicture", isPass:!0};
  a.unprocessPicture = {type:Entry.STATIC.COMMAND_TYPES.unprocessPicture, do:function(b, a) {
    Entry.playground.painter.lc.undo();
  }, state:function(b) {
  }, log:function(b) {
    return [b];
  }, undo:"processPicture", isPass:!0};
})(Entry.Command);
(function(a) {
  a.playgroundChangeViewMode = function() {
    return {type:"changeViewMode", do:function(b, a) {
      a = Entry.playground;
      a.changeViewMode(b);
      "code" === b && a.blockMenu.reDraw();
    }, state:function(b, a) {
      return [a, b];
    }, log:function(b, a, d) {
      return ["changeViewMode", ["oldType", a], ["newType", b]];
    }, undo:"playgroundChangeViewMode", dom:["playground", "&0"]};
  }();
})(Entry.Command);
Entry.Container = function() {
  this.objects_ = [];
  this.cachedPicture = {};
  this.inputValue = {};
  this.currentObjects_ = this.copiedObject = null;
  this._extensionObjects = [];
  Entry.addEventListener("workspaceChangeMode", function() {
    var a = Entry.getMainWS();
    a && a.getMode() === Entry.Workspace.MODE_VIMBOARD && this.objects_.forEach(function(b) {
      b.script && b.script.destroyView();
    });
  }.bind(this));
};
Entry.Container.prototype.generateView = function(a, b) {
  var c = this;
  this._view = a;
  this._view.addClass("entryContainer");
  this._view.addClass("entryContainerWorkspace");
  this._view.setAttribute("id", "entryContainerWorkspaceId");
  a = Entry.createElement("div");
  a.addClass("entryAddObjectWorkspace");
  a.innerHTML = Lang.Workspace.add_object;
  a.bindOnClick(function(b) {
    Entry.dispatchEvent("openSpriteManager");
  });
  a = Entry.createElement("div");
  b = "entryContainerListWorkspaceWrapper";
  Entry.isForLecture && (b += " lecture");
  a.addClass(b);
  Entry.Utils.disableContextmenu(a);
  $(a).bind("mousedown touchstart", function(b) {
    function a(b) {
      n && 5 < Math.sqrt(Math.pow(b.pageX - n.x, 2) + Math.pow(b.pageY - n.y, 2)) && g && (clearTimeout(g), g = null);
    }
    function d(b) {
      b.stopPropagation();
      h.unbind(".container");
      g && (clearTimeout(g), g = null);
    }
    var g = null, h = $(document), k = b.type, l = !1;
    if (Entry.Utils.isRightButton(b)) {
      c._rightClick(b), l = !0;
    } else {
      var n = {x:b.clientX, y:b.clientY};
      "touchstart" !== k || l || (b.stopPropagation(), b = Entry.Utils.convertMouseEvent(b), g = setTimeout(function() {
        g && (g = null, c._rightClick(b));
      }, 1E3), h.bind("mousemove.container touchmove.container", a), h.bind("mouseup.container touchend.container", d));
    }
  });
  this._view.appendChild(a);
  b = Entry.createElement("ul");
  a.appendChild(b);
  this._extensionListView = Entry.Dom(b, {class:"entryContainerExtensions"});
  b = Entry.createElement("ul");
  b.addClass("entryContainerListWorkspace");
  a.appendChild(b);
  this.listView_ = b;
  this.enableSort();
};
Entry.Container.prototype.enableSort = function() {
  $ && $(this.listView_).sortable({start:function(a, b) {
    b.item.data("start_pos", b.item.index());
  }, stop:function(a, b) {
    a = b.item.data("start_pos");
    b = b.item.index();
    Entry.container.moveElement(a, b);
  }, axis:"y", cancel:"input.selectedEditingObject"});
};
Entry.Container.prototype.disableSort = function() {
  $ && $(this.listView_).sortable("destroy");
};
Entry.Container.prototype.updateListView = function() {
  if (this.listView_) {
    for (var a = this.listView_;a.hasChildNodes();) {
      a.removeChild(a.lastChild);
    }
    var b = document.createDocumentFragment("div"), c = this.getCurrentObjects(), d;
    for (d in c) {
      var e = c[d];
      !e.view_ && e.generateView();
      b.appendChild(e.view_);
    }
    a.appendChild(b);
    Entry.stage.sortZorder();
    return !0;
  }
};
Entry.Container.prototype.setObjects = function(a) {
  for (var b in a) {
    var c = new Entry.EntryObject(a[b]);
    this.objects_.push(c);
  }
  this.updateObjectsOrder();
  !this.updateListView() && Entry.stage.sortZorder();
  Entry.variableContainer.updateViews();
  a = Entry.type;
  ("workspace" == a || "phone" == a) && (a = this.getCurrentObjects()[0]) && this.selectObject(a.id);
};
Entry.Container.prototype.getPictureElement = function(a, b) {
  if (a = this.getObject(b).getPicture(a)) {
    return a.view;
  }
  throw Error("No picture found");
};
Entry.Container.prototype.setPicture = function(a) {
  var b = this.getObject(a.objectId), c;
  for (c in b.pictures) {
    if (a.id === b.pictures[c].id) {
      var d = {};
      d.dimension = a.dimension;
      d.id = a.id;
      d.filename = a.filename;
      d.fileurl = a.fileurl;
      d.name = a.name;
      d.view = b.pictures[c].view;
      b.pictures[c] = d;
      return;
    }
  }
  throw Error("No picture found");
};
Entry.Container.prototype.selectPicture = function(a, b) {
  b = this.getObject(b);
  if (a = b.getPicture(a)) {
    return b.selectedPicture = a, b.entity.setImage(a), b.updateThumbnailView(), b.id;
  }
  throw Error("No picture found");
};
Entry.Container.prototype.addObject = function(a, b) {
  var c = new Entry.EntryObject(a);
  c.name = Entry.getOrderedName(c.name, this.objects_);
  Entry.stateManager && Entry.stateManager.addCommand("add object", this, this.removeObject, c);
  c.scene || (c.scene = Entry.scene.selectedScene);
  "number" == typeof b ? a.sprite.category && "background" == a.sprite.category.main ? (c.setLock(!0), this.objects_.push(c)) : this.objects_.splice(b, 0, c) : a.sprite.category && "background" == a.sprite.category.main ? this.objects_.push(c) : this.objects_.unshift(c);
  c.generateView();
  this.setCurrentObjects();
  this.updateObjectsOrder();
  this.updateListView();
  this.selectObject(c.id);
  Entry.variableContainer.updateViews();
  return new Entry.State(this, this.removeObject, c);
};
Entry.Container.prototype.addExtension = function(a) {
  this._extensionObjects.push(a);
  this._extensionListView.append(a.renderView());
};
Entry.Container.prototype.addCloneObject = function(a, b) {
  a = a.toJSON();
  var c = Entry.generateHash();
  Entry.variableContainer.addCloneLocalVariables({objectId:a.id, newObjectId:c, json:a});
  a.id = c;
  a.scene = b || Entry.scene.selectedScene;
  this.addObject(a);
};
Entry.Container.prototype.removeObject = function(a) {
  var b = this.objects_.indexOf(a), c = a.toJSON();
  Entry.stateManager && Entry.stateManager.addCommand("remove object", this, this.addObject, c, b);
  c = new Entry.State(this.addObject, c, b);
  a.destroy();
  this.objects_.splice(b, 1);
  this.setCurrentObjects();
  Entry.stage.sortZorder();
  b = this.getCurrentObjects();
  b.length ? this.selectObject(b[0].id) : (this.selectObject(), Entry.playground.flushPlayground());
  Entry.toast.success(Lang.Workspace.remove_object, a.name + " " + Lang.Workspace.remove_object_msg);
  Entry.variableContainer.removeLocalVariables(a.id);
  Entry.playground.reloadPlayground();
  return c;
};
Entry.Container.prototype.selectObject = function(a, b) {
  a = this.getObject(a);
  var c = Entry.getMainWS();
  b && a && Entry.scene.selectScene(a.scene);
  this.mapObjectOnScene(function(b) {
    !b.view_ && b.generateView();
    b.view_ && b.view_.removeClass("selectedObject");
    b.isSelected_ = !1;
  });
  if (a) {
    if (a.view_ && a.view_.addClass("selectedObject"), a.isSelected_ = !0, c && c.vimBoard && Entry.isTextMode) {
      b = c.vimBoard._currentObject;
      var d = c.vimBoard._parser;
      if (d && d._onError) {
        if (b && a.id != b.id) {
          if (Entry.scene.isSceneCloning) {
            Entry.container.selectObject(b.id);
          } else {
            try {
              c._syncTextCode();
            } catch (e) {
            }
            d && !d._onError ? Entry.container.selectObject(a.id, !0) : Entry.container.selectObject(b.id, !0);
          }
          return;
        }
      } else {
        if (b && a.id != b.id) {
          if (Entry.scene.isSceneCloning) {
            Entry.container.selectObject(b.id);
            return;
          }
          try {
            c._syncTextCode();
          } catch (e) {
          }
          if (d && d._onError) {
            Entry.container.selectObject(b.id, !0);
            return;
          }
        }
      }
    }
  } else {
    c && c.vimBoard && c.vimBoard.clearText();
  }
  Entry.playground && Entry.playground.injectObject(a);
  "minimize" != Entry.type && Entry.engine.isState("stop") && Entry.stage.selectObject(a);
};
Entry.Container.prototype.getAllObjects = function() {
  return this.objects_;
};
Entry.Container.prototype.getObject = function(a) {
  !a && Entry.playground && Entry.playground.object && (a = Entry.playground.object.id);
  for (var b = this.objects_.length, c = 0;c < b;c++) {
    var d = this.objects_[c];
    if (d.id == a) {
      return d;
    }
  }
};
Entry.Container.prototype.getEntity = function(a) {
  if (a = this.getObject(a)) {
    return a.entity;
  }
  Entry.toast.alert(Lang.Msgs.runtime_error, Lang.Workspace.object_not_found, !0);
};
Entry.Container.prototype.getVariable = function(a) {
  for (var b = 0;b < this.variables_.length;b++) {
    var c = this.variables_[b];
    if (c.getId() == a || c.getName() == a) {
      return c;
    }
  }
};
Entry.Container.prototype.moveElement = function(a, b, c) {
  var d;
  d = this.getCurrentObjects();
  a = this.getAllObjects().indexOf(d[a]);
  b = this.getAllObjects().indexOf(d[b]);
  !c && Entry.stateManager && Entry.stateManager.addCommand("reorder object", Entry.container, Entry.container.moveElement, b, a, !0);
  this.objects_.splice(b, 0, this.objects_.splice(a, 1)[0]);
  this.setCurrentObjects();
  Entry.container.updateListView();
  Entry.requestUpdate = !0;
  return new Entry.State(Entry.container, Entry.container.moveElement, b, a, !0);
};
Entry.Container.prototype.moveElementByBlock = function(a, b) {
  a = this.getCurrentObjects().splice(a, 1)[0];
  this.getCurrentObjects().splice(b, 0, a);
  Entry.stage.sortZorder();
  this.updateListView();
};
Entry.Container.prototype.getDropdownList = function(a, b) {
  var c = [];
  switch(a) {
    case "sprites":
      var d = this.getCurrentObjects(), e = d.length;
      for (a = 0;a < e;a++) {
        b = d[a], c.push([b.name, b.id]);
      }
      break;
    case "spritesWithMouse":
      d = this.getCurrentObjects();
      e = d.length;
      for (a = 0;a < e;a++) {
        b = d[a], c.push([b.name, b.id]);
      }
      c.push([Lang.Blocks.mouse_pointer, "mouse"]);
      break;
    case "spritesWithSelf":
      d = this.getCurrentObjects();
      e = d.length;
      for (a = 0;a < e;a++) {
        b = d[a], c.push([b.name, b.id]);
      }
      c.push([Lang.Blocks.self, "self"]);
      break;
    case "collision":
      c.push([Lang.Blocks.mouse_pointer, "mouse"]);
      d = this.getCurrentObjects();
      e = d.length;
      for (a = 0;a < e;a++) {
        b = d[a], c.push([b.name, b.id]);
      }
      c.push([Lang.Blocks.wall, "wall"]);
      c.push([Lang.Blocks.wall_up, "wall_up"]);
      c.push([Lang.Blocks.wall_down, "wall_down"]);
      c.push([Lang.Blocks.wall_right, "wall_right"]);
      c.push([Lang.Blocks.wall_left, "wall_left"]);
      break;
    case "pictures":
      b = Entry.playground.object || b;
      if (!b) {
        break;
      }
      b = b.pictures;
      for (a = 0;a < b.length;a++) {
        d = b[a], c.push([d.name, d.id]);
      }
      break;
    case "messages":
      b = Entry.variableContainer.messages_;
      for (a = 0;a < b.length;a++) {
        d = b[a], c.push([d.name, d.id]);
      }
      break;
    case "variables":
      b = Entry.variableContainer.variables_;
      for (a = 0;a < b.length;a++) {
        d = b[a], d.object_ && Entry.playground.object && d.object_ != Entry.playground.object.id || c.push([d.getName(), d.getId()]);
      }
      c && 0 !== c.length || c.push([Lang.Blocks.VARIABLE_variable, "null"]);
      break;
    case "lists":
      b = Entry.playground.object || b;
      d = Entry.variableContainer.lists_;
      for (a = 0;a < d.length;a++) {
        e = d[a], e.object_ && b && e.object_ != b.id || c.push([e.getName(), e.getId()]);
      }
      c && 0 !== c.length || c.push([Lang.Blocks.VARIABLE_list, "null"]);
      break;
    case "scenes":
      b = Entry.scene.scenes_;
      for (a = 0;a < b.length;a++) {
        d = b[a], c.push([d.name, d.id]);
      }
      break;
    case "sounds":
      b = Entry.playground.object || b;
      if (!b) {
        break;
      }
      b = b.sounds;
      for (a = 0;a < b.length;a++) {
        d = b[a], c.push([d.name, d.id]);
      }
      break;
    case "clone":
      c.push([Lang.Blocks.oneself, "self"]);
      this.getCurrentObjects().forEach(function(b) {
        c.push([b.name, b.id]);
      });
      break;
    case "objectSequence":
      for (e = this.getCurrentObjects().length, a = 0;a < e;a++) {
        c.push([(a + 1).toString(), a.toString()]);
      }
  }
  c.length || (c = [[Lang.Blocks.no_target, "null"]]);
  return c;
};
Entry.Container.prototype.clearRunningState = function() {
  this.mapObject(function(a) {
    a.clearExecutor();
  });
};
Entry.Container.prototype.clearRunningStateOnScene = function() {
  this.mapObjectOnScene(function(a) {
    a.clearExecutor();
  });
};
Entry.Container.prototype.mapObject = function(a, b) {
  for (var c = this.objects_.length, d = [], e = 0;e < c;e++) {
    d.push(a(this.objects_[e], b));
  }
  return d;
};
Entry.Container.prototype.mapObjectOnScene = function(a, b) {
  for (var c = this.getCurrentObjects(), d = c.length, e = [], f = 0;f < this._extensionObjects.length;f++) {
    var g = this._extensionObjects[f];
    e.push(a(g, b));
  }
  for (f = 0;f < d;f++) {
    g = c[f], e.push(a(g, b));
  }
  return e;
};
Entry.Container.prototype.mapEntity = function(a, b) {
  for (var c = this.objects_.length, d = [], e = 0;e < c;e++) {
    d.push(a(this.objects_[e].entity, b));
  }
  return d;
};
Entry.Container.prototype.mapEntityOnScene = function(a, b) {
  for (var c = this.getCurrentObjects(), d = c.length, e = [], f = 0;f < d;f++) {
    e.push(a(c[f].entity, b));
  }
  return e;
};
Entry.Container.prototype.mapEntityIncludeClone = function(a, b) {
  for (var c = this.objects_, d = c.length, e = [], f = 0;f < d;f++) {
    var g = c[f], h = g.clonedEntities.length;
    e.push(a(g.entity, b));
    for (var k = 0;k < h;k++) {
      var l = g.clonedEntities[k];
      l && !l.isStamp && e.push(a(l, b));
    }
  }
  return e;
};
Entry.Container.prototype.mapEntityIncludeCloneOnScene = function(a, b) {
  for (var c = this.getCurrentObjects(), d = c.length, e = [], f = 0;f < this._extensionObjects.length;f++) {
    var g = this._extensionObjects[f];
    e.push(a(g.entity, b));
  }
  for (f = 0;f < d;f++) {
    var g = c[f], h = g.clonedEntities.length;
    e.push(a(g.entity, b));
    for (var k = 0;k < h;k++) {
      var l = g.clonedEntities[k];
      l && !l.isStamp && e.push(a(l, b));
    }
  }
  return e;
};
Entry.Container.prototype.getCachedPicture = function(a) {
  Entry.assert("string" == typeof a, "pictureId must be string");
  return this.cachedPicture[a];
};
Entry.Container.prototype.cachePicture = function(a, b) {
  this.cachedPicture[a] = b;
};
Entry.Container.prototype.toJSON = function() {
  for (var a = [], b = this.objects_.length, c = 0;c < b;c++) {
    a.push(this.objects_[c].toJSON());
  }
  return a;
};
Entry.Container.prototype.takeSequenceSnapshot = function() {
  for (var a = this.objects_.length, b = this.objects_, c = 0;c < a;c++) {
    b[c].index = c;
  }
};
Entry.Container.prototype.loadSequenceSnapshot = function() {
  for (var a = this.objects_.length, b = Array(a), c = 0;c < a;c++) {
    var d = this.objects_[c];
    b[d.index || c] = d;
    delete d.index;
  }
  this.objects_ = b;
  this.setCurrentObjects();
  Entry.stage.sortZorder();
  this.updateListView();
};
Entry.Container.prototype.getInputValue = function() {
  return this.inputValue.getValue();
};
Entry.Container.prototype.setInputValue = function(a) {
  this.inputValue.complete || (a ? this.inputValue.setValue(a) : this.inputValue.setValue(0), Entry.stage.hideInputField(), Entry.console && Entry.console.stopInput(a), this.inputValue.complete = !0);
};
Entry.Container.prototype.resetSceneDuringRun = function() {
  this.mapEntityOnScene(function(a) {
    a.loadSnapshot();
    a.object.filters = [];
    a.resetFilter();
    a.dialog && a.dialog.remove();
    a.shape && a.removeBrush();
  });
  this.clearRunningStateOnScene();
};
Entry.Container.prototype.setCopiedObject = function(a) {
  this.copiedObject = a;
};
Entry.Container.prototype.updateObjectsOrder = function() {
  for (var a = Entry.scene.getScenes(), b = [], c = 0;c < a.length;c++) {
    for (var d = this.getSceneObjects(a[c]), e = 0;e < d.length;e++) {
      b.push(d[e]);
    }
  }
  this.objects_ = b;
};
Entry.Container.prototype.getSceneObjects = function(a) {
  a = a || Entry.scene.selectedScene;
  for (var b = [], c = this.getAllObjects(), d = 0;d < c.length;d++) {
    a.id == c[d].scene.id && b.push(c[d]);
  }
  return b;
};
Entry.Container.prototype.setCurrentObjects = function() {
  this.currentObjects_ = this.getSceneObjects();
};
Entry.Container.prototype.getCurrentObjects = function() {
  var a = this.currentObjects_;
  a && 0 !== a.length || this.setCurrentObjects();
  return this.currentObjects_;
};
Entry.Container.prototype.getProjectWithJSON = function(a) {
  a.objects = Entry.container.toJSON();
  a.variables = Entry.variableContainer.getVariableJSON();
  a.messages = Entry.variableContainer.getMessageJSON();
  a.scenes = Entry.scene.toJSON();
  return a;
};
Entry.Container.prototype.blurAllInputs = function() {
  this.getSceneObjects().map(function(a) {
    a = a.view_.getElementsByTagName("input");
    for (var b = 0, c = a.length;b < c;b++) {
      a[b].blur();
    }
  });
};
Entry.Container.prototype.showProjectAnswer = function() {
  var a = this.inputValue;
  a && a.setVisible(!0);
};
Entry.Container.prototype.hideProjectAnswer = function(a, b) {
  var c = this.inputValue;
  if (c && c.isVisible() && !Entry.engine.isState("run")) {
    for (var d = Entry.container.getAllObjects(), e = ["ask_and_wait", "get_canvas_input_value", "set_visible_answer"], f = 0, g = d.length;f < g;f++) {
      for (var h = d[f].script, k = 0;k < e.length;k++) {
        var l = h.getBlockList(!1, e[k]);
        if (b) {
          var n = l.indexOf(a);
          -1 < n && l.splice(n, 1);
        }
        if (0 < l.length) {
          return;
        }
      }
    }
    c.setVisible(!1);
  }
};
Entry.Container.prototype.getView = function() {
  return this._view;
};
Entry.Container.prototype.resize = function() {
};
Entry.Container.prototype._rightClick = function(a) {
  a.stopPropagation && a.stopPropagation();
  var b = [{text:Lang.Blocks.Paste_blocks, enable:!Entry.engine.isState("run") && !!Entry.container.copiedObject, callback:function() {
    Entry.container.copiedObject ? Entry.container.addCloneObject(Entry.container.copiedObject) : Entry.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.object_not_found_for_paste);
  }}];
  Entry.ContextMenu.show(b, "workspace-contextmenu", {x:a.clientX, y:a.clientY});
};
Entry.Container.prototype.removeFuncBlocks = function(a) {
  this.objects_.forEach(function(b) {
    b.script.removeBlocksByType(a);
  });
};
Entry.Container.prototype.clear = function() {
  this.objects_.map(function(a) {
    a.destroy();
  });
  this.objects_ = [];
  Entry.playground.flushPlayground();
};
Entry.Container.prototype.selectNeighborObject = function(a) {
  var b = this.getCurrentObjects();
  if (b && 0 !== b.length) {
    var c = b.indexOf(Entry.playground.object), d = b.length;
    switch(a) {
      case "prev":
        0 > --c && (c = b.length - 1);
        break;
      case "next":
        c = ++c % d;
    }
    (a = b[c]) && Entry.container.selectObject(a.id);
  }
};
Entry.db = {data:{}, typeMap:{}};
(function(a) {
  a.add = function(b) {
    this.data[b.id] = b;
    var a = b.type;
    void 0 === this.typeMap[a] && (this.typeMap[a] = {});
    this.typeMap[a][b.id] = b;
  };
  a.has = function(b) {
    return this.data.hasOwnProperty(b);
  };
  a.remove = function(b) {
    this.has(b) && (delete this.typeMap[this.data[b].type][b], delete this.data[b]);
  };
  a.get = function(b) {
    return this.data[b];
  };
  a.find = function() {
  };
  a.clear = function() {
    this.data = {};
    this.typeMap = {};
  };
})(Entry.db);
Entry.Dom = function(a, b) {
  var c = /<(\w+)>/, d;
  d = a instanceof HTMLElement ? $(a) : a instanceof jQuery ? a : c.test(a) ? $(a) : $("<" + a + "></" + a + ">");
  if (void 0 === b) {
    return d;
  }
  b.id && d.attr("id", b.id);
  b.class && d.addClass(b.class);
  b.classes && b.classes.map(function(b) {
    d.addClass(b);
  });
  b.src && d.attr("src", b.src);
  b.parent && b.parent.append(d);
  d.bindOnClick = function() {
    var b, a, c = function(b) {
      b.stopImmediatePropagation();
      b.handled || (b.handled = !0, a.call(this, b));
    };
    1 < arguments.length ? (a = arguments[1] instanceof Function ? arguments[1] : function() {
    }, b = "string" === typeof arguments[0] ? arguments[0] : "") : a = arguments[0] instanceof Function ? arguments[0] : function() {
    };
    if (b) {
      $(this).on("click tab", b, c);
    } else {
      $(this).on("click tab", c);
    }
  };
  return d;
};
Entry.SVG = function(a, b) {
  a = b ? b : document.getElementById(a);
  return Entry.SVG.createElement(a);
};
Entry.SVG.NS = "http://www.w3.org/2000/svg";
Entry.SVG.NS_XLINK = "http://www.w3.org/1999/xlink";
Entry.SVG.createElement = function(a, b) {
  var c;
  c = "string" === typeof a ? document.createElementNS(Entry.SVG.NS, a) : a;
  if (b) {
    b.href && (c.setAttributeNS(Entry.SVG.NS_XLINK, "href", b.href), delete b.href);
    for (var d in b) {
      c.setAttribute(d, b[d]);
    }
  }
  c.elem = Entry.SVG.createElement;
  c.attr = Entry.SVG.attr;
  c.addClass = Entry.SVG.addClass;
  c.removeClass = Entry.SVG.removeClass;
  c.hasClass = Entry.SVG.hasClass;
  c.remove = Entry.SVG.remove;
  c.removeAttr = Entry.SVG.removeAttr;
  "text" === a && c.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
  this instanceof SVGElement && this.appendChild(c);
  return c;
};
Entry.SVG.attr = function(a, b) {
  if ("string" === typeof a) {
    var c = {};
    c[a] = b;
    a = c;
  }
  if (a) {
    a.href && (this.setAttributeNS(Entry.SVG.NS_XLINK, "href", a.href), delete a.href);
    for (var d in a) {
      this.setAttribute(d, a[d]);
    }
  }
  return this;
};
Entry.SVG.addClass = function(a) {
  for (var b = this.getAttribute("class"), c = 0;c < arguments.length;c++) {
    a = arguments[c], this.hasClass(a) || (b += " " + a);
  }
  this.setAttribute("class", b);
  return this;
};
Entry.SVG.removeClass = function(a) {
  for (var b = this.getAttribute("class"), c = 0;c < arguments.length;c++) {
    a = arguments[c], this.hasClass(a) && (b = b.replace(new RegExp("(\\s|^)" + a + "(\\s|$)"), " "));
  }
  this.setAttribute("class", b);
  return this;
};
Entry.SVG.hasClass = function(a) {
  var b = this.getAttribute("class");
  return b ? b.match(new RegExp("(\\s|^)" + a + "(\\s|$)")) : !1;
};
Entry.SVG.remove = function() {
  this.parentNode && this.parentNode.removeChild(this);
};
Entry.SVG.removeAttr = function(a) {
  this.removeAttribute(a);
};
Entry.Dialog = function(a, b, c, d) {
  a.dialog && a.dialog.remove();
  a.dialog = this;
  this.parent = a;
  this.padding = 10;
  this.border = 2;
  "number" == typeof b && (b = String(b));
  Entry.console && Entry.console.print(b, c);
  this.message_ = b = b.match(/.{1,15}/g).join("\n");
  this.mode_ = c;
  "speak" !== c && "ask" !== c || this.generateSpeak();
  d || Entry.stage.loadDialog(this);
};
Entry.Dialog.prototype.generateSpeak = function() {
  this.object = new createjs.Container;
  var a = new createjs.Text;
  a.font = "15px NanumGothic";
  a.textBaseline = "top";
  a.textAlign = "left";
  a.text = this.message_;
  var b = a.getTransformedBounds(), c = b.height, b = 10 <= b.width ? b.width : 17, d = new createjs.Shape;
  d.graphics.f("#f5f5f5").ss(2, "round").s("#6FC0DD").rr(-this.padding, -this.padding, b + 2 * this.padding, c + 2 * this.padding, this.padding);
  this.object.addChild(d);
  this.object.regX = b / 2;
  this.object.regY = c / 2;
  this.width = b;
  this.height = c;
  this.notch = this.createSpeakNotch("ne");
  this.update();
  this.object.addChild(this.notch);
  this.object.addChild(a);
  Entry.requestUpdate = !0;
};
Entry.Dialog.prototype.update = function() {
  var a = this.parent.object.getTransformedBounds();
  if (!a && "textBox" === this.parent.type) {
    if (this._isNoContentTried) {
      delete this._isNoContentTried;
      return;
    }
    this.parent.setText(" ");
    a = this.parent.object.getTransformedBounds();
    this._isNoContentTried = !0;
  }
  var b = "";
  -135 < a.y - this.height - 20 - this.border ? (this.object.y = a.y - this.height / 2 - 20 - this.padding, b += "n") : (this.object.y = a.y + a.height + this.height / 2 + 20 + this.padding, b += "s");
  240 > a.x + a.width + this.width ? (this.object.x = a.x + a.width + this.width / 2, b += "e") : (this.object.x = a.x - this.width / 2, b += "w");
  this.notch.type != b && (this.object.removeChild(this.notch), this.notch = this.createSpeakNotch(b), this.object.addChild(this.notch));
  this._isNoContentTried && this.parent.setText("");
  Entry.requestUpdate = !0;
};
Entry.Dialog.prototype.createSpeakNotch = function(a) {
  var b = new createjs.Shape;
  b.type = a;
  "ne" == a ? b.graphics.f("#f5f5f5").ss(2, "round").s("#6FC0DD").mt(0, this.height + this.padding - 1.5).lt(-10, this.height + this.padding + 20).lt(20, this.height + this.padding - 1.5) : "nw" == a ? b.graphics.f("#f5f5f5").ss(2, "round").s("#6FC0DD").mt(this.width, this.height + this.padding - 1.5).lt(this.width + 10, this.height + this.padding + 20).lt(this.width - 20, this.height + this.padding - 1.5) : "se" == a ? b.graphics.f("#f5f5f5").ss(2, "round").s("#6FC0DD").mt(0, -this.padding + 1.5).lt(-10, 
  -this.padding - 20).lt(20, -this.padding + 1.5) : "sw" == a && b.graphics.f("#f5f5f5").ss(2, "round").s("#6FC0DD").mt(this.width, -this.padding + 1.5).lt(this.width + 10, -this.padding - 20).lt(this.width - 20, -this.padding + 1.5);
  return b;
};
Entry.Dialog.prototype.remove = function() {
  Entry.stage.unloadDialog(this);
  this.parent.dialog = null;
  Entry.requestUpdate = !0;
};
Entry.DoneProject = function(a) {
  this.generateView(a);
};
var p = Entry.DoneProject.prototype;
p.init = function(a) {
  this.projectId = a;
};
p.generateView = function(a) {
  var b = Entry.createElement("div");
  b.addClass("entryContainerDoneWorkspace");
  this.doneContainer = b;
  var c = Entry.createElement("iframe");
  c.setAttribute("id", "doneProjectframe");
  c.setAttribute("frameborder", 0);
  c.setAttribute("src", "/api/iframe/project/" + a);
  this.doneProjectFrame = c;
  this.doneContainer.appendChild(c);
  b.addClass("entryRemove");
};
p.getView = function() {
  return this.doneContainer;
};
p.resize = function() {
  document.getElementById("entryContainerWorkspaceId");
  var a = document.getElementById("doneProjectframe"), b = this.doneContainer.offsetWidth;
  a.width = b + "px";
  a.height = 9 * b / 16 + "px";
};
Entry.Engine = function() {
  function a(b) {
    var a = b.keyCode || b.which, d = Entry.stage.inputField;
    32 == a && d && d.hasFocus() || -1 < [37, 38, 39, 40, 32].indexOf(a) && b.preventDefault();
  }
  this.state = "stop";
  this.popup = null;
  this.isUpdating = !0;
  this.speeds = [1, 15, 30, 45, 60];
  this._mouseMoved = !1;
  Entry.keyPressed && Entry.keyPressed.attach(this, this.captureKeyEvent);
  Entry.addEventListener("canvasClick", function(b) {
    Entry.engine.fireEvent("mouse_clicked");
  });
  Entry.addEventListener("canvasClickCanceled", function(b) {
    Entry.engine.fireEvent("mouse_click_cancled");
  });
  Entry.addEventListener("entityClick", function(b) {
    Entry.engine.fireEventOnEntity("when_object_click", b);
  });
  Entry.addEventListener("entityClickCanceled", function(b) {
    Entry.engine.fireEventOnEntity("when_object_click_canceled", b);
  });
  "phone" != Entry.type && (Entry.addEventListener("stageMouseMove", function(b) {
    this._mouseMoved = !0;
  }.bind(this)), Entry.addEventListener("stageMouseOut", function(b) {
    Entry.engine.hideMouseView();
  }));
  Entry.addEventListener("run", function() {
    $(window).bind("keydown", a);
  });
  Entry.addEventListener("stop", function() {
    $(window).unbind("keydown", a);
  });
  setInterval(function() {
    this._mouseMoved && (this.updateMouseView(), this._mouseMoved = !1);
  }.bind(this), 100);
  Entry.message = new Entry.Event(window);
};
Entry.Engine.prototype.generateView = function(a, b) {
  if (b && "workspace" != b) {
    "minimize" == b ? (this.view_ = a, this.view_.addClass("entryEngine"), this.view_.addClass("entryEngineMinimize"), this.maximizeButton = Entry.createElement("button"), this.maximizeButton.addClass("entryEngineButtonMinimize"), this.maximizeButton.addClass("entryMaximizeButtonMinimize"), this.view_.appendChild(this.maximizeButton), this.maximizeButton.bindOnClick(function(b) {
      Entry.engine.toggleFullscreen();
    }), this.coordinateButton = Entry.createElement("button"), this.coordinateButton.addClass("entryEngineButtonMinimize"), this.coordinateButton.addClass("entryCoordinateButtonMinimize"), this.view_.appendChild(this.coordinateButton), this.coordinateButton.bindOnClick(function(b) {
      this.hasClass("toggleOn") ? this.removeClass("toggleOn") : this.addClass("toggleOn");
      Entry.stage.toggleCoordinator();
    }), this.stopButton = Entry.createElement("button"), this.stopButton.addClass("entryEngineButtonMinimize"), this.stopButton.addClass("entryStopButtonMinimize"), this.stopButton.addClass("entryRemove"), this.stopButton.innerHTML = Lang.Workspace.stop, this.view_.appendChild(this.stopButton), this.stopButton.bindOnClick(function(b) {
      this.blur();
      Entry.engine.toggleStop();
    }), this.pauseButton = Entry.createElement("button"), this.pauseButton.innerHTML = Lang.Workspace.pause, this.pauseButton.addClass("entryEngineButtonMinimize"), this.pauseButton.addClass("entryPauseButtonMinimize"), this.pauseButton.addClass("entryRemove"), this.view_.appendChild(this.pauseButton), this.pauseButton.bindOnClick(function(b) {
      this.blur();
      Entry.engine.togglePause();
    }), this.mouseView = Entry.createElement("div"), this.mouseView.addClass("entryMouseViewMinimize"), this.mouseView.addClass("entryRemove"), this.view_.appendChild(this.mouseView), Entry.addEventListener("loadComplete", function() {
      this.runButton = Entry.Dom("div", {class:"entryRunButtonBigMinimize", parent:$("#entryCanvasWrapper")});
      this.runButton.bindOnClick(function(b) {
        Entry.engine.toggleRun();
      });
    }.bind(this))) : "phone" == b && (this.view_ = a, this.view_.addClass("entryEngine", "entryEnginePhone"), this.headerView_ = Entry.createElement("div", "entryEngineHeader"), this.headerView_.addClass("entryEngineHeaderPhone"), this.view_.appendChild(this.headerView_), this.maximizeButton = Entry.createElement("button"), this.maximizeButton.addClass("entryEngineButtonPhone", "entryMaximizeButtonPhone"), this.headerView_.appendChild(this.maximizeButton), this.maximizeButton.bindOnClick(function(b) {
      Entry.engine.footerView_.addClass("entryRemove");
      Entry.engine.headerView_.addClass("entryRemove");
      Entry.launchFullScreen(Entry.engine.view_);
    }), document.addEventListener("fullscreenchange", function(b) {
      Entry.engine.exitFullScreen();
    }), document.addEventListener("webkitfullscreenchange", function(b) {
      Entry.engine.exitFullScreen();
    }), document.addEventListener("mozfullscreenchange", function(b) {
      Entry.engine.exitFullScreen();
    }), this.footerView_ = Entry.createElement("div", "entryEngineFooter"), this.footerView_.addClass("entryEngineFooterPhone"), this.view_.appendChild(this.footerView_), this.runButton = Entry.createElement("button"), this.runButton.addClass("entryEngineButtonPhone", "entryRunButtonPhone"), Entry.objectAddable && this.runButton.addClass("small"), this.runButton.innerHTML = Lang.Workspace.run, this.footerView_.appendChild(this.runButton), this.runButton.bindOnClick(function(b) {
      Entry.engine.toggleRun();
    }), this.stopButton = Entry.createElement("button"), this.stopButton.addClass("entryEngineButtonPhone", "entryStopButtonPhone", "entryRemove"), Entry.objectAddable && this.stopButton.addClass("small"), this.stopButton.innerHTML = Lang.Workspace.stop, this.footerView_.appendChild(this.stopButton), this.stopButton.bindOnClick(function(b) {
      Entry.engine.toggleStop();
    }));
  } else {
    this.view_ = a;
    this.view_.addClass("entryEngine_w");
    this.view_.addClass("entryEngineWorkspace_w");
    var c = Entry.createElement("button");
    this.speedButton = c;
    this.speedButton.addClass("entrySpeedButtonWorkspace", "entryEngineTopWorkspace", "entryEngineButtonWorkspace_w");
    this.view_.appendChild(this.speedButton);
    this.speedButton.bindOnClick(function(b) {
      Entry.engine.toggleSpeedPanel();
      c.blur();
    });
    this.maximizeButton = Entry.createElement("button");
    this.maximizeButton.addClass("entryEngineButtonWorkspace_w", "entryEngineTopWorkspace", "entryMaximizeButtonWorkspace_w");
    this.view_.appendChild(this.maximizeButton);
    this.maximizeButton.bindOnClick(function(b) {
      Entry.engine.toggleFullscreen();
      this.blur();
    });
    var d = Entry.createElement("button");
    this.coordinateButton = d;
    this.coordinateButton.addClass("entryEngineButtonWorkspace_w", "entryEngineTopWorkspace", "entryCoordinateButtonWorkspace_w");
    this.view_.appendChild(this.coordinateButton);
    this.coordinateButton.bindOnClick(function(b) {
      this.hasClass("toggleOn") ? this.removeClass("toggleOn") : this.addClass("toggleOn");
      d.blur();
      this.blur();
      Entry.stage.toggleCoordinator();
    });
    this.addButton = Entry.createElement("button");
    this.addButton.addClass("entryEngineButtonWorkspace_w");
    this.addButton.addClass("entryAddButtonWorkspace_w");
    this.addButton.innerHTML = Lang.Workspace.add_object;
    this.addButton.bindOnClick(function(b) {
      Entry.dispatchEvent("openSpriteManager");
      this.blur();
    });
    this.view_.appendChild(this.addButton);
    this.runButton = Entry.createElement("button");
    this.runButton.addClass("entryEngineButtonWorkspace_w");
    this.runButton.addClass("entryRunButtonWorkspace_w");
    this.runButton.innerHTML = Lang.Workspace.run;
    this.view_.appendChild(this.runButton);
    this.runButton.bindOnClick(function(b) {
      Entry.engine.toggleRun();
      this.blur();
    });
    this.runButton2 = Entry.createElement("button");
    this.runButton2.addClass("entryEngineButtonWorkspace_w");
    this.runButton2.addClass("entryRunButtonWorkspace_w2");
    this.view_.appendChild(this.runButton2);
    this.runButton2.bindOnClick(function(b) {
      this.blur();
      Entry.engine.toggleRun();
    });
    this.stopButton = Entry.createElement("button");
    this.stopButton.addClass("entryEngineButtonWorkspace_w");
    this.stopButton.addClass("entryStopButtonWorkspace_w");
    this.stopButton.addClass("entryRemove");
    this.stopButton.innerHTML = Lang.Workspace.stop;
    this.view_.appendChild(this.stopButton);
    this.stopButton.bindOnClick(function(b) {
      this.blur();
      Entry.engine.toggleStop();
    });
    this.stopButton2 = Entry.createElement("button");
    this.stopButton2.addClass("entryEngineButtonWorkspace_w");
    this.stopButton2.addClass("entryStopButtonWorkspace_w2");
    this.stopButton2.addClass("entryRemove");
    this.stopButton2.innerHTML = Lang.Workspace.stop;
    this.view_.appendChild(this.stopButton2);
    this.stopButton2.bindOnClick(function(b) {
      this.blur();
      Entry.engine.toggleStop();
    });
    this.pauseButton = Entry.createElement("button");
    this.pauseButton.addClass("entryEngineButtonWorkspace_w");
    this.pauseButton.addClass("entryPauseButtonWorkspace_w");
    this.pauseButton.addClass("entryRemove");
    this.view_.appendChild(this.pauseButton);
    this.pauseButton.bindOnClick(function(b) {
      this.blur();
      Entry.engine.togglePause();
    });
    this.mouseView = Entry.createElement("div");
    this.mouseView.addClass("entryMouseViewWorkspace_w");
    this.mouseView.addClass("entryRemove");
    this.view_.appendChild(this.mouseView);
  }
};
Entry.Engine.prototype.toggleSpeedPanel = function() {
  if (this.speedPanelOn) {
    this.speedPanelOn = !1, $(Entry.stage.canvas.canvas).animate({top:"24px"}), this.coordinateButton.removeClass("entryRemove"), this.maximizeButton.removeClass("entryRemove"), this.mouseView.removeClass("entryRemoveElement"), $(this.speedLabel_).remove(), delete this.speedLabel_, $(this.speedProgress_).fadeOut(null, function(b) {
      $(this).remove();
      delete this.speedProgress_;
    }), $(this.speedHandle_).remove(), delete this.speedHandle_;
  } else {
    this.speedPanelOn = !0;
    $(Entry.stage.canvas.canvas).animate({top:"41px"});
    this.coordinateButton.addClass("entryRemove");
    this.maximizeButton.addClass("entryRemove");
    this.mouseView.addClass("entryRemoveElement");
    this.speedLabel_ = Entry.createElement("div", "entrySpeedLabelWorkspace");
    this.speedLabel_.innerHTML = Lang.Workspace.speed;
    this.view_.insertBefore(this.speedLabel_, this.maximizeButton);
    this.speedProgress_ = Entry.createElement("table", "entrySpeedProgressWorkspace");
    for (var a = Entry.createElement("tr"), b = this.speeds, c = 0;5 > c;c++) {
      (function(c) {
        var d = Entry.createElement("td", "progressCell" + c);
        d.bindOnClick(function() {
          Entry.engine.setSpeedMeter(b[c]);
        });
        a.appendChild(d);
      })(c);
    }
    this.view_.insertBefore(this.speedProgress_, this.maximizeButton);
    this.speedProgress_.appendChild(a);
    this.speedHandle_ = Entry.createElement("div", "entrySpeedHandleWorkspace");
    var d = (Entry.interfaceState.canvasWidth - 84) / 5;
    $(this.speedHandle_).bind("mousedown.speedPanel touchstart.speedPanel", function(b) {
      function a(b) {
        b.stopPropagation();
        b = Entry.Utils.convertMouseEvent(b);
        b = Math.floor((b.clientX - 80) / (5 * d) * 5);
        0 > b || 4 < b || Entry.engine.setSpeedMeter(Entry.engine.speeds[b]);
      }
      function c(b) {
        $(document).unbind(".speedPanel");
      }
      b.stopPropagation && b.stopPropagation();
      b.preventDefault && b.preventDefault();
      if (0 === b.button || b.originalEvent && b.originalEvent.touches) {
        Entry.Utils.convertMouseEvent(b), b = $(document), b.bind("mousemove.speedPanel touchmove.speedPanel", a), b.bind("mouseup.speedPanel touchend.speedPanel", c);
      }
    });
    this.view_.insertBefore(this.speedHandle_, this.maximizeButton);
    this.setSpeedMeter(Entry.FPS);
  }
};
Entry.Engine.prototype.setSpeedMeter = function(a) {
  var b = this.speeds.indexOf(a);
  0 > b || (b = Math.min(4, b), b = Math.max(0, b), this.speedPanelOn && (this.speedHandle_.style.left = (Entry.interfaceState.canvasWidth - 80) / 10 * (2 * b + 1) + 80 - 9 + "px"), Entry.FPS != a && (clearInterval(this.ticker), this.ticker = setInterval(this.update, Math.floor(1E3 / a)), Entry.FPS = a));
};
Entry.Engine.prototype.start = function(a) {
  createjs.Ticker.setFPS(Entry.FPS);
  this.ticker || (this.ticker = setInterval(this.update, Math.floor(1E3 / Entry.FPS)));
};
Entry.Engine.prototype.stop = function() {
  createjs.Ticker.reset();
  clearInterval(this.ticker);
  this.ticker = null;
};
Entry.Engine.prototype.update = function() {
  Entry.engine.isState("run") && (Entry.engine.computeObjects(), Entry.hw.update());
};
Entry.Engine.prototype.computeObjects = function() {
  Entry.container.mapObjectOnScene(this.computeFunction);
};
Entry.Engine.prototype.computeFunction = function(a) {
  a.script.tick();
};
Entry.Engine.computeThread = function(a, b) {
  Entry.engine.isContinue = !0;
  for (a = !1;b && Entry.engine.isContinue && !a;) {
    Entry.engine.isContinue = !b.isRepeat;
    var c = b.run();
    a = c && c === b;
    b = c;
  }
  return b;
};
Entry.Engine.prototype.isState = function(a) {
  return -1 < this.state.indexOf(a);
};
Entry.Engine.prototype.run = function() {
  this.isState("run") ? this.toggleStop() : (this.isState("stop") || this.isState("pause")) && this.toggleRun();
};
Entry.Engine.prototype.toggleRun = function() {
  if ("pause" === this.state) {
    this.togglePause();
  } else {
    var a = document.activeElement;
    a && a.blur && a.blur();
    Entry.playground && Entry.playground.mainWorkspace && (a = Entry.playground.mainWorkspace, a.mode == Entry.Workspace.MODE_VIMBOARD && a._syncTextCode());
    Entry.addActivity("run");
    "stop" == this.state && (Entry.container.mapEntity(function(b) {
      b.takeSnapshot();
    }), Entry.variableContainer.mapVariable(function(b) {
      b.takeSnapshot();
    }), Entry.variableContainer.mapList(function(b) {
      b.takeSnapshot();
    }), this.projectTimer.takeSnapshot(), Entry.container.inputValue.takeSnapshot(), Entry.container.takeSequenceSnapshot(), Entry.scene.takeStartSceneSnapshot(), this.state = "run", this.fireEvent("start"));
    this.state = "run";
    "mobile" == Entry.type && this.view_.addClass("entryEngineBlueWorkspace");
    this.runButton && (this.pauseButton.innerHTML = Lang.Workspace.pause, this.runButton.addClass("run"), this.runButton.addClass("entryRemove"), this.stopButton.removeClass("entryRemove"), this.pauseButton && this.pauseButton.removeClass("entryRemove"), this.runButton2 && this.runButton2.addClass("entryRemove"), this.stopButton2 && this.stopButton2.removeClass("entryRemove"));
    this.isUpdating || (Entry.engine.update(), Entry.engine.isUpdating = !0);
    Entry.stage.selectObject();
    Entry.dispatchEvent("run");
  }
};
Entry.Engine.prototype.toggleStop = function() {
  Entry.addActivity("stop");
  var a = Entry.container, b = Entry.variableContainer;
  a.mapEntity(function(b) {
    b.loadSnapshot();
    b.object.filters = [];
    b.resetFilter();
    b.dialog && b.dialog.remove();
    b.brush && b.removeBrush();
  });
  b.mapVariable(function(b) {
    b.loadSnapshot();
  });
  b.mapList(function(b) {
    b.loadSnapshot();
  });
  this.stopProjectTimer();
  a.clearRunningState();
  a.loadSequenceSnapshot();
  this.projectTimer.loadSnapshot();
  Entry.container.inputValue.loadSnapshot();
  Entry.scene.loadStartSceneSnapshot();
  Entry.Func.clearThreads();
  createjs.Sound.setVolume(1);
  createjs.Sound.stop();
  this.view_.removeClass("entryEngineBlueWorkspace");
  this.runButton && (this.runButton.removeClass("entryRemove"), this.stopButton.addClass("entryRemove"), this.pauseButton && this.pauseButton.addClass("entryRemove"), this.runButton2 && this.runButton2.removeClass("entryRemove"), this.stopButton2 && this.stopButton2.addClass("entryRemove"));
  this.state = "stop";
  Entry.dispatchEvent("stop");
  Entry.stage.hideInputField();
  (function(b) {
    b && b.getMode() === Entry.Workspace.MODE_VIMBOARD && b.codeToText();
  })(Entry.getMainWS());
};
Entry.Engine.prototype.togglePause = function() {
  var a = Entry.engine.projectTimer;
  "pause" == this.state ? (a.pausedTime += (new Date).getTime() - a.pauseStart, a.isPaused ? a.pauseStart = (new Date).getTime() : delete a.pauseStart, this.state = "run", this.runButton && (this.pauseButton.innerHTML = Lang.Workspace.pause, this.runButton.addClass("entryRemove"), this.runButton2 && this.runButton2.addClass("entryRemove"))) : (this.state = "pause", a.isPaused && (a.pausedTime += (new Date).getTime() - a.pauseStart), a.pauseStart = (new Date).getTime(), this.runButton && (this.pauseButton.innerHTML = 
  Lang.Workspace.restart, this.runButton.removeClass("entryRemove"), this.stopButton.removeClass("entryRemove"), this.runButton2 && this.runButton2.removeClass("entryRemove")));
};
Entry.Engine.prototype.fireEvent = function(a) {
  "run" === this.state && Entry.container.mapEntityIncludeCloneOnScene(this.raiseEvent, a);
};
Entry.Engine.prototype.raiseEvent = function(a, b) {
  a.parent.script.raiseEvent(b, a);
};
Entry.Engine.prototype.fireEventOnEntity = function(a, b) {
  "run" == this.state && Entry.container.mapEntityIncludeCloneOnScene(this.raiseEventOnEntity, [b, a]);
};
Entry.Engine.prototype.raiseEventOnEntity = function(a, b) {
  a === b[0] && a.parent.script.raiseEvent(b[1], a);
};
Entry.Engine.prototype.captureKeyEvent = function(a, b) {
  var c = a.keyCode, d = Entry.type;
  if (!Entry.Utils.isInInput(a) || b) {
    a.ctrlKey && "workspace" == d ? 83 == c ? (a.preventDefault(), Entry.dispatchEvent("saveWorkspace")) : 82 == c ? (a.preventDefault(), Entry.engine.run()) : 90 == c && (a.preventDefault(), Entry.dispatchEvent(a.shiftKey ? "redo" : "undo")) : Entry.engine.isState("run") && Entry.container.mapEntityIncludeCloneOnScene(Entry.engine.raiseKeyEvent, ["keyPress", c]), Entry.engine.isState("stop") && "workspace" === d && 37 <= c && 40 >= c && Entry.stage.moveSprite(a);
  }
};
Entry.Engine.prototype.raiseKeyEvent = function(a, b) {
  return a.parent.script.raiseEvent(b[0], a, String(b[1]));
};
Entry.Engine.prototype.updateMouseView = function() {
  var a = Entry.stage.mouseCoordinate;
  this.mouseView.textContent = "X : " + a.x + ", Y : " + a.y;
  this.mouseView.removeClass("entryRemove");
};
Entry.Engine.prototype.hideMouseView = function() {
  this.mouseView.addClass("entryRemove");
};
Entry.Engine.prototype.toggleFullscreen = function() {
  if (this.popup) {
    this.popup.remove(), this.popup = null;
  } else {
    this.popup = new Entry.Popup;
    if ("workspace" != Entry.type) {
      var a = $(document);
      $(this.popup.body_).css("top", a.scrollTop());
      $("body").css("overflow", "hidden");
      popup.window_.appendChild(Entry.stage.canvas.canvas);
      popup.window_.appendChild(Entry.engine.runButton[0]);
    }
    popup.window_.appendChild(Entry.engine.view_);
  }
  Entry.windowResized.notify();
};
Entry.Engine.prototype.exitFullScreen = function() {
  document.webkitIsFullScreen || document.mozIsFullScreen || document.isFullScreen || (Entry.engine.footerView_.removeClass("entryRemove"), Entry.engine.headerView_.removeClass("entryRemove"));
  Entry.windowResized.notify();
};
Entry.Engine.prototype.showProjectTimer = function() {
  Entry.engine.projectTimer && this.projectTimer.setVisible(!0);
};
Entry.Engine.prototype.hideProjectTimer = function(a, b) {
  var c = this.projectTimer;
  if (c && c.isVisible() && !this.isState("run")) {
    for (var d = Entry.container.getAllObjects(), e = ["get_project_timer_value", "reset_project_timer", "set_visible_project_timer", "choose_project_timer_action"], f = 0, g = d.length;f < g;f++) {
      for (var h = d[f].script, k = 0;k < e.length;k++) {
        var l = h.getBlockList(!1, e[k]);
        if (b) {
          var n = l.indexOf(a);
          -1 < n && l.splice(n, 1);
        }
        if (0 < l.length) {
          return;
        }
      }
    }
    c.setVisible(!1);
  }
};
Entry.Engine.prototype.clearTimer = function() {
  clearInterval(this.ticker);
  clearInterval(this.projectTimer.tick);
};
Entry.Engine.prototype.startProjectTimer = function() {
  var a = this.projectTimer;
  a && (a.start = (new Date).getTime(), a.isInit = !0, a.pausedTime = 0, a.tick = setInterval(function(b) {
    Entry.engine.updateProjectTimer();
  }, 1E3 / 60));
};
Entry.Engine.prototype.stopProjectTimer = function() {
  var a = this.projectTimer;
  a && (this.updateProjectTimer(0), a.isPaused = !1, a.isInit = !1, a.pausedTime = 0, clearInterval(a.tick));
};
Entry.Engine.prototype.updateProjectTimer = function(a) {
  var b = Entry.engine, c = b.projectTimer;
  if (c) {
    var d = (new Date).getTime();
    "undefined" == typeof a ? c.isPaused || b.isState("pause") || c.setValue((d - c.start - c.pausedTime) / 1E3) : (c.setValue(a), c.pausedTime = 0, c.start = d);
  }
};
Entry.Engine.prototype.raiseMessage = function(a) {
  Entry.message.notify(Entry.variableContainer.getMessage(a));
  return Entry.container.mapEntityIncludeCloneOnScene(this.raiseKeyEvent, ["when_message_cast", a]);
};
Entry.EntityObject = function(a) {
  this.parent = a;
  this.type = a.objectType;
  this.flip = !1;
  this.collision = Entry.Utils.COLLISION.NONE;
  this.id = Entry.generateHash();
  "sprite" == this.type ? (this.object = new createjs.Bitmap, this.effect = {}, this.setInitialEffectValue()) : "textBox" == this.type && (this.object = new createjs.Container, this.textObject = new createjs.Text, this.textObject.font = "20px Nanum Gothic", this.textObject.textBaseline = "middle", this.textObject.textAlign = "center", this.bgObject = new createjs.Shape, this.bgObject.graphics.setStrokeStyle(1).beginStroke("#f00").drawRect(0, 0, 100, 100), this.object.addChild(this.bgObject), this.object.addChild(this.textObject), 
  this.fontType = "Nanum Gothic", this.fontSize = 20, this.strike = this.underLine = this.fontItalic = this.fontBold = !1);
  this.object.entity = this;
  this.object.cursor = "pointer";
  this.object.on("mousedown", function(b) {
    var a = this.entity.parent.id;
    Entry.dispatchEvent("entityClick", this.entity);
    Entry.stage.isObjectClick = !0;
    "minimize" != Entry.type && Entry.engine.isState("stop") && (this.offset = {x:-this.parent.x + this.entity.getX() - (.75 * b.stageX - 240), y:-this.parent.y - this.entity.getY() - (.75 * b.stageY - 135)}, this.cursor = "move", this.entity.initCommand(), Entry.container.selectObject(a));
  });
  this.object.on("pressup", function(b) {
    Entry.dispatchEvent("entityClickCanceled", this.entity);
    this.cursor = "pointer";
    this.entity.checkCommand();
  });
  this.object.on("pressmove", function(b) {
    "minimize" != Entry.type && Entry.engine.isState("stop") && !this.entity.parent.getLock() && (this.entity.doCommand(), this.entity.setX(.75 * b.stageX - 240 + this.offset.x), this.entity.setY(-(.75 * b.stageY - 135) - this.offset.y), Entry.stage.updateObject());
  });
};
Entry.EntityObject.prototype.injectModel = function(a, b) {
  "sprite" == this.type ? this.setImage(a) : "textBox" == this.type && (a = this.parent, b.text = b.text || a.text || a.name, this.setFont(b.font), this.setBGColour(b.bgColor), this.setColour(b.colour), this.setUnderLine(b.underLine), this.setStrike(b.strike), this.setText(b.text));
  b && this.syncModel_(b);
};
Entry.EntityObject.prototype.syncModel_ = function(a) {
  this.setX(a.x);
  this.setY(a.y);
  this.setRegX(a.regX);
  this.setRegY(a.regY);
  this.setScaleX(a.scaleX);
  this.setScaleY(a.scaleY);
  this.setRotation(a.rotation);
  this.setDirection(a.direction, !0);
  this.setLineBreak(a.lineBreak);
  this.setWidth(a.width);
  this.setHeight(a.height);
  this.setText(a.text);
  this.setTextAlign(a.textAlign);
  this.setFontSize(a.fontSize || this.getFontSize());
  this.setVisible(a.visible);
};
Entry.EntityObject.prototype.initCommand = function() {
  Entry.engine.isState("stop") && (this.isCommandValid = !1, Entry.stateManager && Entry.stateManager.addCommand("edit entity", this, this.restoreEntity, this.toJSON()));
};
Entry.EntityObject.prototype.doCommand = function() {
  this.isCommandValid = !0;
};
Entry.EntityObject.prototype.checkCommand = function() {
  Entry.engine.isState("stop") && !this.isCommandValid && Entry.dispatchEvent("cancelLastCommand");
};
Entry.EntityObject.prototype.restoreEntity = function(a) {
  var b = this.toJSON();
  this.syncModel_(a);
  Entry.dispatchEvent("updateObject");
  Entry.stateManager && Entry.stateManager.addCommand("restore object", this, this.restoreEntity, b);
};
Entry.EntityObject.prototype.setX = function(a) {
  "number" == typeof a && (this.x = a, this.object.x = this.x, this.isClone || this.parent.updateCoordinateView(), this.updateDialog(), Entry.requestUpdate = !0);
};
Entry.EntityObject.prototype.getX = function() {
  return this.x;
};
Entry.EntityObject.prototype.setY = function(a) {
  "number" == typeof a && (this.y = a, this.object.y = -this.y, this.isClone || this.parent.updateCoordinateView(), this.updateDialog(), Entry.requestUpdate = !0);
};
Entry.EntityObject.prototype.getY = function() {
  return this.y;
};
Entry.EntityObject.prototype.getDirection = function() {
  return this.direction;
};
Entry.EntityObject.prototype.setDirection = function(a, b) {
  a || (a = 0);
  "vertical" != this.parent.getRotateMethod() || b || (0 <= this.direction && 180 > this.direction) == (0 <= a && 180 > a) || (this.setScaleX(-this.getScaleX()), Entry.stage.updateObject(), this.flip = !this.flip);
  this.direction = a.mod(360);
  this.object.direction = this.direction;
  this.isClone || this.parent.updateRotationView();
  Entry.dispatchEvent("updateObject");
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.setRotation = function(a) {
  "free" != this.parent.getRotateMethod() && (a = 0);
  this.rotation = a.mod(360);
  this.object.rotation = this.rotation;
  this.updateDialog();
  this.isClone || this.parent.updateRotationView();
  Entry.dispatchEvent("updateObject");
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getRotation = function() {
  return this.rotation;
};
Entry.EntityObject.prototype.setRegX = function(a) {
  "textBox" == this.type && (a = 0);
  this.regX = a;
  this.object.regX = this.regX;
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getRegX = function() {
  return this.regX;
};
Entry.EntityObject.prototype.setRegY = function(a) {
  "textBox" == this.type && (a = 0);
  this.regY = a;
  this.object.regY = this.regY;
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getRegY = function() {
  return this.regY;
};
Entry.EntityObject.prototype.setScaleX = function(a) {
  this.scaleX = a;
  this.object.scaleX = this.scaleX;
  this.parent.updateCoordinateView();
  this.updateDialog();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getScaleX = function() {
  return this.scaleX;
};
Entry.EntityObject.prototype.setScaleY = function(a) {
  this.scaleY = a;
  this.object.scaleY = this.scaleY;
  this.parent.updateCoordinateView();
  this.updateDialog();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getScaleY = function() {
  return this.scaleY;
};
Entry.EntityObject.prototype.setSize = function(a) {
  1 > a && (a = 1);
  a /= this.getSize();
  this.setScaleX(this.getScaleX() * a);
  this.setScaleY(this.getScaleY() * a);
  this.isClone || this.parent.updateCoordinateView();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getSize = function() {
  return (this.getWidth() * Math.abs(this.getScaleX()) + this.getHeight() * Math.abs(this.getScaleY())) / 2;
};
Entry.EntityObject.prototype.setWidth = function(a) {
  this.width = a;
  this.object.width = this.width;
  this.textObject && this.getLineBreak() && (this.textObject.lineWidth = this.width);
  this.updateDialog();
  this.updateBG();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getWidth = function() {
  return this.width;
};
Entry.EntityObject.prototype.setHeight = function(a) {
  this.height = a;
  this.textObject && (this.object.height = this.height, this.alignTextBox());
  this.updateDialog();
  this.updateBG();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getHeight = function() {
  return this.height;
};
Entry.EntityObject.prototype.setColour = function(a) {
  a || (a = "#000000");
  this.colour = a;
  this.textObject && (this.textObject.color = this.colour);
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getColour = function() {
  return this.colour;
};
Entry.EntityObject.prototype.setBGColour = function(a) {
  a || (a = "transparent");
  this.bgColor = a;
  this.updateBG();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getBGColour = function() {
  return this.bgColor;
};
Entry.EntityObject.prototype.setUnderLine = function(a) {
  void 0 === a && (a = !1);
  this.underLine = a;
  this.textObject.underLine = a;
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getUnderLine = function() {
  return this.underLine;
};
Entry.EntityObject.prototype.setStrike = function(a) {
  void 0 === a && (a = !1);
  this.strike = a;
  this.textObject.strike = a;
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getStrike = function() {
  return this.strike;
};
Entry.EntityObject.prototype.getFont = function() {
  var a = [];
  this.fontBold && a.push("bold");
  this.fontItalic && a.push("italic");
  a.push(this.getFontSize() + "px");
  a.push(this.fontType);
  return a.join(" ");
};
Entry.EntityObject.prototype.setFont = function(a) {
  if ("textBox" == this.parent.objectType && this.font !== a) {
    a || (a = "20px Nanum Gothic");
    var b = a.split(" "), c;
    if (c = -1 < b.indexOf("bold")) {
      b.splice(c - 1, 1), this.setFontBold(!0);
    }
    if (c = -1 < b.indexOf("italic")) {
      b.splice(c - 1, 1), this.setFontItalic(!0);
    }
    c = parseInt(b.shift());
    this.setFontSize(c);
    this.setFontType(b.join(" "));
    this.font = this.getFont();
    this.textObject.font = a;
    Entry.stage.update();
    this.setWidth(this.textObject.getMeasuredWidth());
    this.updateBG();
    Entry.stage.updateObject();
  }
};
Entry.EntityObject.prototype.setLineHeight = function() {
  switch(this.getFontType()) {
    case "Nanum Gothic Coding":
      this.textObject.lineHeight = this.fontSize;
      break;
    default:
      this.textObject.lineHeight = 0;
  }
};
Entry.EntityObject.prototype.syncFont = function() {
  this.textObject.font = this.getFont();
  this.setLineHeight();
  Entry.stage.update();
  this.getLineBreak() || this.setWidth(this.textObject.getMeasuredWidth());
  Entry.stage.updateObject();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getFontType = function() {
  return this.fontType;
};
Entry.EntityObject.prototype.setFontType = function(a) {
  "textBox" == this.parent.objectType && (this.fontType = a ? a : "Nanum Gothic", this.syncFont());
};
Entry.EntityObject.prototype.getFontSize = function(a) {
  return this.fontSize;
};
Entry.EntityObject.prototype.setFontSize = function(a) {
  "textBox" == this.parent.objectType && this.fontSize != a && (this.fontSize = a ? a : 20, this.syncFont(), this.alignTextBox());
};
Entry.EntityObject.prototype.setFontBold = function(a) {
  this.fontBold = a;
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.toggleFontBold = function() {
  this.fontBold = !this.fontBold;
  this.syncFont();
  return this.fontBold;
};
Entry.EntityObject.prototype.setFontItalic = function(a) {
  this.fontItalic = a;
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.toggleFontItalic = function() {
  this.fontItalic = !this.fontItalic;
  this.syncFont();
  return this.fontItalic;
};
Entry.EntityObject.prototype.setFontName = function(a) {
  for (var b = this.font.split(" "), c = [], d = 0, e = b.length;d < e;d++) {
    ("bold" === b[d] || "italic" === b[d] || -1 < b[d].indexOf("px")) && c.push(b[d]);
  }
  this.setFont(c.join(" ") + " " + a);
};
Entry.EntityObject.prototype.getFontName = function() {
  if ("textBox" == this.type) {
    if (!this.font) {
      return "";
    }
    for (var a = this.font.split(" "), b = [], c = 0, d = a.length;c < d;c++) {
      "bold" !== a[c] && "italic" !== a[c] && -1 === a[c].indexOf("px") && b.push(a[c]);
    }
    return b.join(" ").trim();
  }
};
Entry.EntityObject.prototype.setText = function(a) {
  "textBox" == this.parent.objectType && (void 0 === a && (a = ""), this.text = a, this.textObject.text = this.text, this.lineBreak || (this.setWidth(this.textObject.getMeasuredWidth()), this.parent.updateCoordinateView()), this.updateBG(), Entry.stage.updateObject());
};
Entry.EntityObject.prototype.getText = function() {
  return this.text;
};
Entry.EntityObject.prototype.setTextAlign = function(a) {
  "textBox" == this.parent.objectType && (void 0 === a && (a = Entry.TEXT_ALIGN_CENTER), this.textAlign = a, this.textObject.textAlign = Entry.TEXT_ALIGNS[this.textAlign], this.alignTextBox(), this.updateBG(), Entry.stage.updateObject());
};
Entry.EntityObject.prototype.getTextAlign = function() {
  return this.textAlign;
};
Entry.EntityObject.prototype.setLineBreak = function(a) {
  if ("textBox" == this.parent.objectType) {
    void 0 === a && (a = !1);
    var b = this.lineBreak;
    this.lineBreak = a;
    b && !this.lineBreak ? (this.textObject.lineWidth = null, this.setHeight(this.textObject.getMeasuredLineHeight()), this.setText(this.getText().replace(/\n/g, ""))) : !b && this.lineBreak && (this.setFontSize(this.getFontSize() * this.getScaleX()), this.setHeight(3 * this.textObject.getMeasuredLineHeight()), this.setWidth(this.getWidth() * this.getScaleX()), this.setScaleX(1), this.setScaleY(1), this.textObject.lineWidth = this.getWidth(), this.alignTextBox());
    Entry.stage.updateObject();
  }
};
Entry.EntityObject.prototype.getLineBreak = function() {
  return this.lineBreak;
};
Entry.EntityObject.prototype.setVisible = function(a) {
  void 0 === a && (a = !0);
  this.visible = a;
  this.object.visible = this.visible;
  this.dialog && this.syncDialogVisible();
  Entry.requestUpdate = !0;
  return this.visible;
};
Entry.EntityObject.prototype.getVisible = function() {
  return this.visible;
};
Entry.EntityObject.prototype.setImage = function(a) {
  var b = this;
  delete a._id;
  Entry.assert("sprite" == this.type, "Set image is only for sprite object");
  a.id || (a.id = Entry.generateHash());
  this.picture = a;
  var c = this.picture.dimension, d = this.getRegX() - this.getWidth() / 2, e = this.getRegY() - this.getHeight() / 2;
  this.setWidth(c.width);
  this.setHeight(c.height);
  c.scaleX || (c.scaleX = this.getScaleX(), c.scaleY = this.getScaleY());
  this.setScaleX(this.scaleX);
  this.setScaleY(this.scaleY);
  this.setRegX(this.width / 2 + d);
  this.setRegY(this.height / 2 + e);
  var f = a.id + this.id, g = Entry.container.getCachedPicture(f);
  g ? (Entry.image = g, this.object.image = g, this.object.cache(0, 0, this.getWidth(), this.getHeight())) : (g = new Image, a.fileurl ? g.src = a.fileurl : (a = a.filename, g.src = Entry.defaultPath + "/uploads/" + a.substring(0, 2) + "/" + a.substring(2, 4) + "/image/" + a + ".png"), this.object.image = g, this.object.cache(0, 0, this.getWidth(), this.getHeight()), g.onload = function(a) {
    Entry.container.cachePicture(f, g);
    Entry.image = g;
    b.object.image = g;
    b.object.cache(0, 0, b.getWidth(), b.getHeight());
    Entry.requestUpdate = !0;
  });
  Entry.dispatchEvent("updateObject");
};
Entry.EntityObject.prototype.applyFilter = function(a) {
  function b(b, a) {
    for (var c in b) {
      if (b[c] !== a[c]) {
        return !1;
      }
    }
    return !0;
  }
  var c = this.effect, d = this.object;
  if (a || !b(c, this.getInitialEffectValue())) {
    (function(b, a) {
      var c = [], d = Entry.adjustValueWithMaxMin;
      b.brightness = b.brightness;
      var e = new createjs.ColorMatrix;
      e.adjustColor(d(b.brightness, -100, 100), 0, 0, 0);
      e = new createjs.ColorMatrixFilter(e);
      c.push(e);
      b.hue = b.hue.mod(360);
      e = new createjs.ColorMatrix;
      e.adjustColor(0, 0, 0, b.hue);
      e = new createjs.ColorMatrixFilter(e);
      c.push(e);
      var e = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], f = 10.8 * b.hsv * Math.PI / 180, n = Math.cos(f), f = Math.sin(f), m = Math.abs(b.hsv / 100);
      1 < m && (m -= Math.floor(m));
      0 < m && .33 >= m ? e = [1, 0, 0, 0, 0, 0, n, f, 0, 0, 0, -1 * f, n, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1] : .66 >= m ? e = [n, 0, f, 0, 0, 0, 1, 0, 0, 0, f, 0, n, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1] : .99 >= m && (e = [n, f, 0, 0, 0, -1 * f, n, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);
      e = (new createjs.ColorMatrix).concat(e);
      e = new createjs.ColorMatrixFilter(e);
      c.push(e);
      a.alpha = b.alpha = d(b.alpha, 0, 1);
      a.filters = c;
    })(c, d), d.cache(0, 0, this.getWidth(), this.getHeight()), Entry.requestUpdate = !0;
  }
};
Entry.EntityObject.prototype.resetFilter = function() {
  "sprite" == this.parent.objectType && (this.object.filters = [], this.setInitialEffectValue(), this.object.alpha = this.effect.alpha, this.object.cache(0, 0, this.getWidth(), this.getHeight()), Entry.requestUpdate = !0);
};
Entry.EntityObject.prototype.updateDialog = function() {
  this.dialog && this.dialog.update();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.takeSnapshot = function() {
  this.snapshot_ = this.toJSON();
  this.collision = Entry.Utils.COLLISION.NONE;
};
Entry.EntityObject.prototype.loadSnapshot = function() {
  this.snapshot_ && this.syncModel_(this.snapshot_);
  "sprite" == this.parent.objectType && this.setImage(this.parent.getPicture());
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.removeClone = function() {
  if (this.isClone) {
    this.dialog && this.dialog.remove();
    this.brush && this.removeBrush();
    Entry.stage.unloadEntity(this);
    var a = this.parent.clonedEntities.indexOf(this);
    this.parent.clonedEntities.splice(a, 1);
    Entry.Utils.isFunction(this.clearExecutor) && this.clearExecutor();
  }
};
Entry.EntityObject.prototype.clearExecutor = function() {
  this.parent.script.clearExecutorsByEntity(this);
};
Entry.EntityObject.prototype.toJSON = function() {
  var a = {};
  a.x = Entry.cutDecimal(this.getX());
  a.y = Entry.cutDecimal(this.getY());
  a.regX = Entry.cutDecimal(this.getRegX());
  a.regY = Entry.cutDecimal(this.getRegY());
  a.scaleX = this.getScaleX();
  a.scaleY = this.getScaleY();
  a.rotation = Entry.cutDecimal(this.getRotation());
  a.direction = Entry.cutDecimal(this.getDirection());
  a.width = Entry.cutDecimal(this.getWidth());
  a.height = Entry.cutDecimal(this.getHeight());
  a.font = this.getFont();
  a.visible = this.getVisible();
  "textBox" == this.parent.objectType && (a.colour = this.getColour(), a.text = this.getText(), a.textAlign = this.getTextAlign(), a.lineBreak = this.getLineBreak(), a.bgColor = this.getBGColour(), a.underLine = this.getUnderLine(), a.strike = this.getStrike(), a.fontSize = this.getFontSize());
  return a;
};
Entry.EntityObject.prototype.setInitialEffectValue = function() {
  this.effect = this.getInitialEffectValue();
  Entry.requestUpdate = !0;
};
Entry.EntityObject.prototype.getInitialEffectValue = function() {
  return {blur:0, hue:0, hsv:0, brightness:0, contrast:0, saturation:0, alpha:1};
};
Entry.EntityObject.prototype.removeBrush = function() {
  Entry.stage.selectedObjectContainer.removeChild(this.shape);
  this.shape = this.brush = null;
};
Entry.EntityObject.prototype.updateBG = function() {
  if (this.bgObject) {
    this.bgObject.graphics.clear();
    var a = this.getWidth(), b = this.getHeight();
    this.bgObject.graphics.setStrokeStyle(1).beginStroke().beginFill(this.getBGColour()).drawRect(-a / 2, -b / 2, a, b);
    if (this.getLineBreak()) {
      this.bgObject.x = 0;
    } else {
      switch(this.getTextAlign()) {
        case Entry.TEXT_ALIGN_LEFT:
          this.bgObject.x = a / 2;
          break;
        case Entry.TEXT_ALIGN_CENTER:
          this.bgObject.x = 0;
          break;
        case Entry.TEXT_ALIGN_RIGHT:
          this.bgObject.x = -a / 2;
      }
    }
  }
};
Entry.EntityObject.prototype.alignTextBox = function() {
  if ("textBox" == this.type) {
    var a = this.textObject;
    if (this.lineBreak) {
      var b = a.getMeasuredLineHeight();
      a.y = b / 2 - this.getHeight() / 2;
      switch(this.textAlign) {
        case Entry.TEXT_ALIGN_CENTER:
          a.x = 0;
          break;
        case Entry.TEXT_ALIGN_LEFT:
          a.x = -this.getWidth() / 2;
          break;
        case Entry.TEXT_ALIGN_RIGHT:
          a.x = this.getWidth() / 2;
      }
      a.maxHeight = this.getHeight();
    } else {
      a.x = 0, a.y = 0;
    }
  }
};
Entry.EntityObject.prototype.syncDialogVisible = function() {
  this.dialog && (this.dialog.object.visible = this.visible);
};
Entry.Extension = function() {
};
(function(a) {
  a.renderView = function() {
  };
  a.toggleInformation = function() {
  };
})(Entry.Extension.prototype);
Entry.TargetChecker = function(a, b) {
  this.isForEdit = b;
  this.goals = [];
  this.unachievedGoals = [];
  this.isForEdit && (this.watchingBlocks = [], Entry.playground.mainWorkspace.blockMenu.unbanClass("checker"), Entry.addEventListener("run", this.reRegisterAll.bind(this)));
  this.isSuccess = this.isFail = !1;
  this.entity = this;
  this.parent = this;
  Entry.achieve = this.achieveCheck.bind(this);
  Entry.achieveEvent = new Entry.Event;
  Entry.addEventListener("stop", this.reset.bind(this));
  Entry.registerAchievement = this.registerAchievement.bind(this);
  this.script = new Entry.Code(a ? a : [], this);
};
Entry.Utils.inherit(Entry.Extension, Entry.TargetChecker);
(function(a) {
  a.renderView = function() {
    this._view = Entry.Dom("li", {class:"targetChecker"});
    this._view.bindOnClick(function(b) {
      Entry.playground.injectObject(this);
    }.bind(this));
    this.updateView();
    this.isForEdit || this._view.addClass("entryRemove");
    return this._view;
  };
  a.generateView = function() {
  };
  a.updateView = function() {
    if (this._view) {
      var b = this.goals.length;
      this._view.text("\ubaa9\ud45c : " + (b - this.unachievedGoals.length) + " / " + b);
      this.isSuccess ? this._view.addClass("success") : this._view.removeClass("success");
      this.isFail ? this._view.addClass("fail") : this._view.removeClass("fail");
    }
  };
  a.achieveCheck = function(b, a) {
    this.isFail || (a = String(a), b ? this.achieveGoal(a) : this.fail(a));
  };
  a.achieveGoal = function(b) {
    this.isSuccess || this.isFail || 0 > this.unachievedGoals.indexOf(b) || (this.unachievedGoals.splice(this.unachievedGoals.indexOf(b), 1), 0 === this.unachievedGoals.length && (this.isSuccess = !0, Entry.achieveEvent.notify("success")), this.updateView());
  };
  a.fail = function() {
    this.isSuccess || this.isFail || (this.isFail = !0, Entry.achieveEvent.notify("fail"), this.updateView());
  };
  a.reset = function() {
    this.unachievedGoals = this.goals.concat();
    this.isSuccess = this.isFail = !1;
    this.updateView();
  };
  a.registerAchievement = function(b) {
    this.isForEdit && this.watchingBlocks.push(b);
    b.params[1] && this.goals.indexOf(0 > b.params[0]) && this.goals.push(b.params[0]);
    this.reset();
  };
  a.reRegisterAll = function() {
    var b = this.script.getBlockList(!1, "check_lecture_goal");
    this.watchingBlocks = b;
    this.goals = _.uniq(b.filter(function(b) {
      return 1 === b.params[1];
    }).map(function(b) {
      return b.params[0] + "";
    }));
  };
  a.clearExecutor = function() {
    this.script.clearExecutors();
  };
})(Entry.TargetChecker.prototype);
Entry.Func = function(a) {
  this.id = a ? a.id : Entry.generateHash();
  var b;
  a && a.content && 4 < a.content.length && (b = a.content);
  this.content = b ? new Entry.Code(b) : new Entry.Code([[{type:"function_create", copyable:!1, deletable:!1, x:40, y:40}]]);
  this._backupContent = this.blockMenuBlock = this.block = null;
  this.hashMap = {};
  this.paramMap = {};
  Entry.generateFunctionSchema(this.id);
  if (a) {
    a = this.content._blockMap;
    for (var c in a) {
      Entry.Func.registerParamBlock(a[c].type);
    }
    Entry.Func.generateWsBlock(this);
  }
  Entry.Func.registerFunction(this);
  Entry.Func.updateMenu();
};
Entry.Func.threads = {};
Entry.Func.registerFunction = function(a) {
  if (Entry.playground) {
    var b = Entry.playground.mainWorkspace;
    b && (this._targetFuncBlock = b.getBlockMenu().code.createThread([{type:"func_" + a.id, category:"func", x:-9999}]), a.blockMenuBlock = this._targetFuncBlock);
  }
};
Entry.Func.executeFunction = function(a) {
  var b = this.threads[a];
  if (b = Entry.Engine.computeThread(b.entity, b)) {
    return this.threads[a] = b, !0;
  }
  delete this.threads[a];
  return !1;
};
Entry.Func.clearThreads = function() {
  this.threads = {};
};
Entry.Func.prototype.init = function(a) {
  this.id = a.id;
  this.content = Blockly.Xml.textToDom(a.content);
  this.block = Blockly.Xml.textToDom("<xml>" + a.block + "</xml>").childNodes[0];
};
Entry.Func.prototype.destroy = function() {
  this.blockMenuBlock.destroy();
};
Entry.Func.edit = function(a) {
  this.unbindFuncChangeEvent();
  this.unbindWorkspaceStateChangeEvent();
  this.cancelEdit();
  Entry.Func.isEdit = !0;
  this.targetFunc = a;
  this.initEditView(a.content);
  this.bindFuncChangeEvent();
  this.updateMenu();
  setTimeout(function() {
    this._backupContent = a.content.stringify();
  }.bind(this), 0);
};
Entry.Func.initEditView = function(a) {
  this.menuCode || this.setupMenuCode();
  var b = Entry.getMainWS();
  b.setMode(Entry.Workspace.MODE_OVERLAYBOARD);
  b.changeOverlayBoardCode(a);
  this._workspaceStateEvent = b.changeEvent.attach(this, function(a) {
    this.endEdit(a || "cancelEdit");
    b.getMode() === Entry.Workspace.MODE_VIMBOARD && b.blockMenu.banClass("functionInit");
  });
  a.board.alignThreads();
};
Entry.Func.endEdit = function(a) {
  this.unbindFuncChangeEvent();
  this.unbindWorkspaceStateChangeEvent();
  this.targetFunc && this.targetFunc.content && this.targetFunc.content.destroyView();
  switch(a) {
    case "save":
      this.save();
      break;
    case "cancelEdit":
      this.cancelEdit();
  }
  this._backupContent = null;
  delete this.targetFunc;
  this.updateMenu();
  Entry.Func.isEdit = !1;
};
Entry.Func.save = function() {
  this.targetFunc.generateBlock(!0);
  Entry.variableContainer.saveFunction(this.targetFunc);
  var a = Entry.getMainWS();
  a && a.overlayModefrom == Entry.Workspace.MODE_VIMBOARD && (a = {}, a.boardType = Entry.Workspace.MODE_VIMBOARD, a.textType = Entry.Vim.TEXT_TYPE_PY, a.runType = Entry.Vim.WORKSPACE_MODE, Entry.getMainWS().setMode(a), Entry.variableContainer.functionAddButton_.addClass("disable"));
};
Entry.Func.syncFuncName = function(a) {
  var b = 0;
  a = a.split(" ");
  var c = "", d;
  d = Blockly.mainWorkspace.getAllBlocks();
  for (var e = 0;e < d.length;e++) {
    var f = d[e];
    if ("function_general" === f.type) {
      for (var f = f.inputList, g = 0;g < f.length;g++) {
        var h = f[g];
        0 < h.fieldRow.length && h.fieldRow[0] instanceof Blockly.FieldLabel && void 0 != h.fieldRow[0].text_ && (c += h.fieldRow[0].text_, c += " ");
      }
      c = c.trim();
      if (c === this.srcFName && this.srcFName.split(" ").length == a.length) {
        for (c = 0;c < f.length;c++) {
          if (h = f[c], 0 < h.fieldRow.length && h.fieldRow[0] instanceof Blockly.FieldLabel && void 0 != h.fieldRow[0].text_) {
            if (void 0 === a[b]) {
              f.splice(c, 1);
              break;
            } else {
              h.fieldRow[0].text_ = a[b];
            }
            b++;
          }
        }
      }
      c = "";
      b = 0;
    }
  }
  b = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
  Blockly.mainWorkspace.clear();
  Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, b);
};
Entry.Func.cancelEdit = function() {
  if (this.targetFunc) {
    this.targetFunc.block ? this._backupContent && (this.targetFunc.content.load(this._backupContent), Entry.generateFunctionSchema(this.targetFunc.id), Entry.Func.generateWsBlock(this.targetFunc)) : (this._targetFuncBlock.destroy(), delete Entry.variableContainer.functions_[this.targetFunc.id], delete Entry.variableContainer.selected);
    Entry.variableContainer.updateList();
    var a = Entry.getMainWS();
    a && a.overlayModefrom == Entry.Workspace.MODE_VIMBOARD && (a = {}, a.boardType = Entry.Workspace.MODE_VIMBOARD, a.textType = Entry.Vim.TEXT_TYPE_PY, a.runType = Entry.Vim.WORKSPACE_MODE, Entry.getMainWS().setMode(a), Entry.variableContainer.functionAddButton_.addClass("disable"));
  }
};
Entry.Func.getMenuXml = function() {
  var a = [];
  this.targetFunc || (a = a.concat(this.createBtn));
  if (this.targetFunc) {
    var b = this.FIELD_BLOCK, b = b.replace("#1", Entry.generateHash()), b = b.replace("#2", Entry.generateHash()), b = Blockly.Xml.textToDom(b).childNodes, a = a.concat(Entry.nodeListToArray(b));
  }
  for (var c in Entry.variableContainer.functions_) {
    b = Entry.variableContainer.functions_[c], b === this.targetFunc ? (b = Entry.Func.generateBlock(this.targetFunc, Blockly.Xml.workspaceToDom(Entry.Func.workspace), b.id).block, a.push(b)) : a.push(b.block);
  }
  return a;
};
Entry.Func.syncFunc = function() {
  var a = Entry.Func;
  if (a.targetFunc) {
    var b = a.workspace.topBlocks_[0].toString(), c = a.workspace.topBlocks_.length;
    (a.fieldText != b || a.workspaceLength != c) && 1 > Blockly.Block.dragMode_ && (a.updateMenu(), a.fieldText = b, a.workspaceLength = c);
  }
};
Entry.Func.setupMenuCode = function() {
  var a = Entry.playground.mainWorkspace;
  if (a) {
    var a = a.getBlockMenu(), b = a.code;
    this._fieldLabel = b.createThread([{type:"function_field_label", category:"func", x:-9999}]).getFirstBlock();
    this._fieldString = b.createThread([{type:"function_field_string", category:"func", x:-9999, params:[{type:this.requestParamBlock("string")}]}]).getFirstBlock();
    this._fieldBoolean = b.createThread([{type:"function_field_boolean", category:"func", x:-9999, params:[{type:this.requestParamBlock("boolean")}]}]).getFirstBlock();
    this.menuCode = b;
    a.align();
  }
};
Entry.Func.refreshMenuCode = function() {
  if (Entry.playground.mainWorkspace) {
    this.menuCode || this.setupMenuCode();
    var a = Entry.block[this._fieldString.params[0].type].changeEvent._listeners.length;
    2 < a && this._fieldString.params[0].changeType(this.requestParamBlock("string"));
    a = Entry.block[this._fieldBoolean.params[0].type].changeEvent._listeners.length;
    2 < a && this._fieldBoolean.params[0].changeType(this.requestParamBlock("boolean"));
  }
};
Entry.Func.requestParamBlock = function(a) {
  var b = Entry.generateHash(), c;
  switch(a) {
    case "string":
      c = Entry.block.function_param_string;
      break;
    case "boolean":
      c = Entry.block.function_param_boolean;
      break;
    default:
      return null;
  }
  b = a + "Param_" + b;
  a = Entry.Func.createParamBlock(b, c, a);
  Entry.block[b] = a;
  return b;
};
Entry.Func.registerParamBlock = function(a) {
  -1 < a.indexOf("stringParam") ? Entry.Func.createParamBlock(a, Entry.block.function_param_string, a) : -1 < a.indexOf("booleanParam") && Entry.Func.createParamBlock(a, Entry.block.function_param_boolean, a);
};
Entry.Func.createParamBlock = function(a, b, c) {
  var d = function() {
  };
  c = "string" === c ? "function_param_string" : "function_param_boolean";
  d.prototype = b;
  d = new d;
  d.changeEvent = new Entry.Event;
  d.template = Lang.template[c];
  return Entry.block[a] = d;
};
Entry.Func.updateMenu = function() {
  var a = Entry.getMainWS();
  if (a) {
    var b = a.getBlockMenu();
    this.targetFunc ? (!this.menuCode && this.setupMenuCode(), b.banClass("functionInit", !0), b.unbanClass("functionEdit", !0)) : (!a.isVimMode() && b.unbanClass("functionInit", !0), b.banClass("functionEdit", !0));
    "func" === b.lastSelector && b.align();
  }
};
Entry.Func.prototype.edit = function() {
  Entry.Func.isEdit || (Entry.Func.isEdit = !0, Entry.Func.svg ? this.parentView.appendChild(this.svg) : Entry.Func.initEditView());
};
Entry.Func.generateBlock = function(a) {
  a = Entry.block["func_" + a.id];
  var b = {template:a.template, params:a.params}, c = /(%\d)/mi, d = a.template.split(c), e = "", f = 0, g = 0, h;
  for (h in d) {
    var k = d[h];
    c.test(k) ? (k = Number(k.split("%")[1]) - 1, k = a.params[k], "Indicator" !== k.type && ("boolean" === k.accept ? (e += Lang.template.function_param_boolean + (f ? f : ""), f++) : (e += Lang.template.function_param_string + (g ? g : ""), g++))) : e += k;
  }
  return {block:b, description:e};
};
Entry.Func.prototype.generateBlock = function(a) {
  a = Entry.Func.generateBlock(this);
  this.block = a.block;
  this.description = a.description;
};
Entry.Func.generateWsBlock = function(a) {
  this.unbindFuncChangeEvent();
  a = a ? a : this.targetFunc;
  var b = a.content.getEventMap("funcDef")[0];
  if (b) {
    for (var c = b.params[0], d = 0, e = 0, f = [], g = "", b = a.hashMap, h = a.paramMap;c;) {
      var k = c.params[0];
      switch(c.type) {
        case "function_field_label":
          g = g + " " + k;
          break;
        case "function_field_boolean":
          Entry.Mutator.mutate(k.type, {template:Lang.Blocks.FUNCTION_logical_variable + " " + (d ? d : "")});
          b[k.type] = !1;
          h[k.type] = d + e;
          d++;
          f.push({type:"Block", accept:"boolean"});
          g += " %" + (d + e);
          break;
        case "function_field_string":
          Entry.Mutator.mutate(k.type, {template:Lang.Blocks.FUNCTION_character_variable + " " + (e ? e : "")}), b[k.type] = !1, h[k.type] = d + e, e++, g += " %" + (d + e), f.push({type:"Block", accept:"string"});
      }
      c = c.getOutputBlock();
    }
    d++;
    g += " %" + (d + e);
    f.push({type:"Indicator", img:"block_icon/function_03.png", size:12});
    c = "func_" + a.id;
    d = Entry.block[c];
    e = !1;
    if (d.template !== g) {
      e = !0;
    } else {
      if (d.params.length === f.length) {
        for (h = 0;h < d.params.length - 1;h++) {
          var k = d.params[h], l = f[h];
          if (k.type !== l.type || k.accept !== l.accept) {
            e = !0;
            break;
          }
        }
      }
    }
    e && Entry.Mutator.mutate(c, {params:f, template:g});
    for (var n in b) {
      b[n] ? (f = -1 < n.indexOf("string") ? Lang.Blocks.FUNCTION_character_variable : Lang.Blocks.FUNCTION_logical_variable, Entry.Mutator.mutate(n, {template:f})) : b[n] = !0;
    }
    this.bindFuncChangeEvent(a);
  }
};
Entry.Func.bindFuncChangeEvent = function(a) {
  a = a ? a : this.targetFunc;
  !this._funcChangeEvent && a.content.getEventMap("funcDef")[0].view && (this._funcChangeEvent = a.content.getEventMap("funcDef")[0].view._contents[1].changeEvent.attach(this, this.generateWsBlock));
};
Entry.Func.unbindFuncChangeEvent = function() {
  this._funcChangeEvent && (this._funcChangeEvent.destroy(), delete this._funcChangeEvent);
};
Entry.Func.unbindWorkspaceStateChangeEvent = function() {
  this._workspaceStateEvent && (this._workspaceStateEvent.destroy(), delete this._workspaceStateEvent);
};
Entry.Helper = function() {
  this.visible = !1;
  Entry.addEventListener("workspaceChangeMode", function() {
    this._blockView && this.renderBlock(this._blockView.type);
  }.bind(this));
  this.resize = Entry.Utils.debounce(this.resize, 300);
};
p = Entry.Helper.prototype;
p.generateView = function(a, b) {
  if (!this.parentView_) {
    this.parentView_ = a;
    this.blockHelpData = EntryStatic.blockInfo;
    this.view = b = Entry.createElement("div", "entryBlockHelperWorkspace");
    Entry.isForLecture && b.addClass("lecture");
    this.parentView_.appendChild(b);
    this._contentView = a = Entry.createElement("div", "entryBlockHelperContentWorkspace");
    var c = Entry.createElement("div");
    c.addClass("entryBlockHelperTitle textModeElem");
    c.innerHTML = "\uba85\ub839\uc5b4";
    a.appendChild(c);
    a.addClass("entryBlockHelperIntro");
    Entry.isForLecture && a.addClass("lecture");
    b.appendChild(a);
    this.blockHelperContent_ = a;
    this.blockHelperView_ = b;
    b = Entry.createElement("div", "entryBlockHelperBlockWorkspace");
    this.blockHelperContent_.appendChild(b);
    c = Entry.createElement("div");
    c.addClass("entryBlockHelperTitle textModeElem");
    c.innerHTML = "\uc124\uba85";
    a.appendChild(c);
    c = Entry.createElement("div", "entryBlockHelperDescriptionWorkspace");
    c.addClass("entryBlockHelperContent selectAble");
    this.blockHelperContent_.appendChild(c);
    c.innerHTML = Lang.Helper.Block_click_msg;
    this.blockHelperDescription_ = c;
    c = Entry.createElement("div");
    c.addClass("entryBlockHelperTitle textModeElem");
    c.innerHTML = "\uc694\uc18c";
    a.appendChild(c);
    this._elementsTitle = c;
    this._elementsContainer = Entry.createElement("div", "entryBlockHelperElementsContainer");
    this._elementsContainer.addClass("entryBlockHelperContent textModeElem selectAble");
    a.appendChild(this._elementsContainer);
    "undefined" !== typeof CodeMirror && (c = Entry.createElement("div"), c.addClass("entryBlockHelperTitle textModeElem"), c.innerHTML = "\uc608\uc2dc \ucf54\ub4dc", a.appendChild(c), c = Entry.createElement("div", "entryBlockHelperCodeMirrorContainer"), c.addClass("textModeElem"), a.appendChild(c), this.codeMirror = CodeMirror(c, {lineNumbers:!0, value:"", mode:{name:"python"}, indentUnit:4, theme:"default", viewportMargin:10, styleActiveLine:!1, readOnly:!0}), this._doc = this.codeMirror.getDoc(), 
    this._codeMirror = this.codeMirror, c = Entry.createElement("div"), c.addClass("entryBlockHelperTitle textModeElem"), c.innerHTML = "\uc608\uc2dc \uc124\uba85", a.appendChild(c), this._codeMirrorDesc = Entry.createElement("div"), this._codeMirrorDesc.addClass("entryBlockHelperContent textModeElem selectAble"), a.appendChild(this._codeMirrorDesc));
    this._renderView = new Entry.RenderView($(b), "LEFT_MOST");
    this.code = new Entry.Code([]);
    this.code.isFor = "blockHelper";
    this._renderView.changeCode(this.code);
    this.first = !0;
  }
};
p.bindWorkspace = function(a) {
  a && (this._blockViewObserver && this._blockViewObserver.destroy(), this.workspace = a, this._renderView && (this._renderView.workspace = a), this._blockViewObserver = a.observe(this, "_updateSelectedBlock", ["selectedBlockView"]));
};
p._updateSelectedBlock = function() {
  var a = this.workspace.selectedBlockView;
  if (a && this.visible && a != this._blockView) {
    var b = a.block.type;
    this._blockView = a;
    this.renderBlock(b);
  }
};
p.renderBlock = function(a) {
  var b = Lang.Helper[a];
  if (a && this.visible && b && !Entry.block[a].isPrimitive) {
    this.first && (this.blockHelperContent_.removeClass("entryBlockHelperIntro"), this.first = !1);
    this.code.clear();
    var c = Entry.block[a].def || {type:a};
    if (this.workspace.getMode() === Entry.Workspace.MODE_VIMBOARD) {
      this._contentView.addClass("textMode");
      this.blockHelperDescription_.innerHTML = Lang.PythonHelper[a + "_desc"];
      b = Lang.PythonHelper[a + "_elements"];
      this._elementsContainer.innerHTML = "";
      if (b) {
        for (this._elementsTitle.removeClass("entryRemove"), b = b.split("%next");b.length;) {
          var d = b.shift().split("-- "), e = Entry.createElement("div");
          e.addClass("entryBlockHelperElementsContainer");
          var f = Entry.createElement("div");
          f.innerHTML = d[0];
          f.addClass("elementLeft");
          var g = Entry.createElement("div");
          g.addClass("elementRight");
          g.innerHTML = d[1];
          e.appendChild(f);
          e.appendChild(g);
          this._elementsContainer.appendChild(e);
        }
      } else {
        this._elementsTitle.addClass("entryRemove");
      }
      this._codeMirrorDesc.innerHTML = Lang.PythonHelper[a + "_exampleDesc"];
      this._codeMirror.setValue(Lang.PythonHelper[a + "_exampleCode"]);
      this.codeMirror.refresh();
      c = Entry.block[a].pyHelpDef || c;
    } else {
      this._contentView.removeClass("textMode"), this.blockHelperDescription_.innerHTML = b;
    }
    this.code.createThread([c]);
    this.code.board.align();
    this.code.board.resize();
    this._renderView.align();
    this._renderView.setDomSize();
  }
};
p.getView = function() {
  return this.view;
};
p.resize = function() {
  this.codeMirror && this.codeMirror.refresh();
};
Entry.HWMontior = {};
Entry.HWMonitor = function(a) {
  this.svgDom = Entry.Dom($('<svg id="hwMonitor" width="100%" height="100%"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'));
  this._hwModule = a;
  var b = this;
  Entry.addEventListener("windowResized", function() {
    var a = b._hwModule.monitorTemplate.mode;
    "both" == a && (b.resize(), b.resizeList());
    "list" == a ? b.resizeList() : b.resize();
  });
  Entry.addEventListener("hwModeChange", function() {
    b.changeMode();
  });
  this.changeOffset = 0;
  this.scale = .5;
  this._listPortViews = {};
};
(function(a) {
  a.initView = function() {
    this.svgDom = Entry.Dom($('<svg id="hwMonitor" width="100%" height="100%"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'));
  };
  a.generateView = function() {
    this.snap = Entry.SVG("hwMonitor");
    this._svgGroup = this.snap.elem("g");
    this._portMap = {n:[], e:[], s:[], w:[]};
    var b = this._hwModule.monitorTemplate, a = {href:Entry.mediaFilePath + b.imgPath, x:-b.width / 2, y:-b.height / 2, width:b.width, height:b.height};
    this._portViews = {};
    this.hwView = this._svgGroup.elem("image");
    this.hwView = this.hwView.attr(a);
    this._template = b;
    b = b.ports;
    this.pathGroup = null;
    this.pathGroup = this._svgGroup.elem("g");
    var a = [], d;
    for (d in b) {
      var e = this.generatePortView(b[d], "_svgGroup");
      this._portViews[d] = e;
      a.push(e);
    }
    a.sort(function(b, a) {
      return b.box.x - a.box.x;
    });
    var f = this._portMap;
    a.map(function(b) {
      (1 > (Math.atan2(-b.box.y, b.box.x) / Math.PI + 2) % 2 ? f.n : f.s).push(b);
    });
    this.resize();
  };
  a.toggleMode = function(b) {
    var a = this._hwModule.monitorTemplate;
    "list" == b ? (a.TempPort = null, this._hwModule.monitorTemplate.ports && (this._hwModule.monitorTemplate.TempPort = this._hwModule.monitorTemplate.ports, this._hwModule.monitorTemplate.listPorts = this.addPortEle(this._hwModule.monitorTemplate.listPorts, this._hwModule.monitorTemplate.ports)), $(this._svglistGroup).remove(), this._svgGroup && $(this._svgGroup).remove(), $(this._pathGroup).remove(), this._hwModule.monitorTemplate.mode = "list", this.generateListView()) : (this._hwModule.monitorTemplate.TempPort && 
    (this._hwModule.monitorTemplate.ports = this._hwModule.monitorTemplate.TempPort, this._hwModule.monitorTemplate.listPorts = this.removePortEle(this._hwModule.monitorTemplate.listPorts, this._hwModule.monitorTemplate.ports)), $(this._svglistGroup).remove(), this._hwModule.monitorTemplate.mode = "both", this.generateListView(), this.generateView());
  };
  a.setHwmonitor = function(b) {
    this._hwmodule = b;
  };
  a.changeMode = function(b) {
    "both" == this._hwModule.monitorTemplate.mode ? this.toggleMode("list") : "list" == this._hwModule.monitorTemplate.mode && this.toggleMode("both");
  };
  a.addPortEle = function(b, a) {
    if ("object" != typeof a) {
      return b;
    }
    for (var c in a) {
      b[c] = a[c];
    }
    return b;
  };
  a.removePortEle = function(b, a) {
    if ("object" != typeof a) {
      return b;
    }
    for (var c in a) {
      delete b[c];
    }
    return b;
  };
  a.generateListView = function() {
    this._portMapList = {n:[]};
    this._svglistGroup = null;
    this.listsnap = Entry.SVG("hwMonitor");
    this._svglistGroup = this.listsnap.elem("g");
    var b = this._hwModule.monitorTemplate;
    this._template = b;
    b = b.listPorts;
    this.pathGroup = this._svglistGroup.elem("g");
    var a = [], d;
    for (d in b) {
      var e = this.generatePortView(b[d], "_svglistGroup");
      this._listPortViews[d] = e;
      a.push(e);
    }
    var f = this._portMapList;
    a.map(function(b) {
      f.n.push(b);
    });
    this.resizeList();
  };
  a.generatePortView = function(b, a) {
    a = this[a].elem("g");
    a.addClass("hwComponent");
    var c;
    c = this.pathGroup.elem("path").attr({d:"m0,0", fill:"none", stroke:"input" === b.type ? "#00979d" : "#A751E3", "stroke-width":3});
    var e = a.elem("rect").attr({x:0, y:0, width:150, height:22, rx:4, ry:4, fill:"#fff", stroke:"#a0a1a1"}), f = a.elem("text").attr({x:4, y:12, fill:"#000", "class":"hwComponentName", "alignment-baseline":"central"});
    f.textContent = b.name;
    f = f.getComputedTextLength();
    a.elem("rect").attr({x:f + 8, y:2, width:30, height:18, rx:9, ry:9, fill:"input" === b.type ? "#00979d" : "#A751E3"});
    var g = a.elem("text").attr({x:f + 13, y:12, fill:"#fff", "class":"hwComponentValue", "alignment-baseline":"central"});
    g.textContent = 0;
    f += 40;
    e.attr({width:f});
    return {group:a, value:g, type:b.type, path:c, box:{x:b.pos.x - this._template.width / 2, y:b.pos.y - this._template.height / 2, width:f}, width:f};
  };
  a.getView = function() {
    return this.svgDom;
  };
  a.update = function() {
    var b = Entry.hw.portData, a = Entry.hw.sendQueue, d = this._hwModule.monitorTemplate.mode, e = this._hwModule.monitorTemplate.keys || [], f = [];
    if ("list" == d) {
      f = this._listPortViews;
    } else {
      if ("both" == d) {
        if (f = this._listPortViews, this._portViews) {
          for (var g in this._portViews) {
            f[g] = this._portViews[g];
          }
        }
      } else {
        f = this._portViews;
      }
    }
    if (a) {
      for (g in a) {
        0 != a[g] && f[g] && (f[g].type = "output");
      }
    }
    for (var h in f) {
      if (d = f[h], "input" == d.type) {
        var k = b[h];
        0 < e.length && $.each(e, function(b, a) {
          if ($.isPlainObject(k)) {
            k = k[a] || 0;
          } else {
            return !1;
          }
        });
        d.value.textContent = k ? k : 0;
        d.group.getElementsByTagName("rect")[1].attr({fill:"#00979D"});
      } else {
        k = a[h], 0 < e.length && $.each(e, function(b, a) {
          if ($.isPlainObject(k)) {
            k = k[a] || 0;
          } else {
            return !1;
          }
        }), d.value.textContent = k ? k : 0, d.group.getElementsByTagName("rect")[1].attr({fill:"#A751E3"});
      }
    }
  };
  a.resize = function() {
    this.hwView && this.hwView.attr({transform:"scale(" + this.scale + ")"});
    if (this.svgDom) {
      var b = this.svgDom.get(0).getBoundingClientRect();
    }
    this._svgGroup.attr({transform:"translate(" + b.width / 2 + "," + b.height / 1.8 + ")"});
    this._rect = b;
    0 >= this._template.height || 0 >= b.height || (this.scale = b.height / this._template.height * this._template.height / 1E3, this.align());
  };
  a.resizeList = function() {
    var b = this.svgDom.get(0).getBoundingClientRect();
    this._svglistGroup.attr({transform:"translate(" + b.width / 2 + "," + b.height / 2 + ")"});
    this._rect = b;
    this.alignList();
  };
  a.align = function() {
    var b;
    b = this._portMap.s.concat();
    this._alignNS(b, this.scale / 3 * this._template.height + 5, 27);
    b = this._portMap.n.concat();
    this._alignNS(b, -this._template.height * this.scale / 3 - 32, -27);
    b = this._portMap.e.concat();
    this._alignEW(b, -this._template.width * this.scale / 3 - 5, -27);
    b = this._portMap.w.concat();
    this._alignEW(b, this._template.width * this.scale / 3 - 32, -27);
  };
  a.alignList = function() {
    var b;
    b = this._hwModule.monitorTemplate.listPorts;
    for (var a = b.length, d = 0;d < b.length;d++) {
      b[d].group.attr({transform:"translate(" + this._template.width * (d / a - .5) + "," + (-this._template.width / 2 - 30) + ")"});
    }
    b = this._portMapList.n.concat();
    this._alignNSList(b, -this._template.width * this.scale / 2 - 32, -27);
  };
  a._alignEW = function(b, a, d) {
    var c = b.length, f = this._rect.height - 50;
    tP = -f / 2;
    bP = f / 2;
    height = this._rect.height;
    listVLine = wholeHeight = 0;
    mode = this._hwModule.monitorTemplate;
    for (f = 0;f < c;f++) {
      wholeHeight += b[f].height + 5;
    }
    wholeHeight < bP - tP && (bP = wholeHeight / 2 + 3, tP = -wholeHeight / 2 - 3);
    for (;1 < c;) {
      var g = b.shift(), f = b.pop(), h = tP, k = bP, l = d;
      wholeWidth <= bP - tP ? (tP += g.width + 5, bP -= f.width + 5, l = 0) : 0 === b.length ? (tP = (tP + bP) / 2 - 3, bP = tP + 6) : (tP = Math.max(tP, -width / 2 + g.width) + 15, bP = Math.min(bP, width / 2 - f.width) - 15);
      wholeWidth -= g.width + f.width + 10;
      a += l;
    }
    b.length && b[0].group.attr({transform:"translate(" + a + ",60)"});
    g && rPort && (this._movePort(g, a, tP, h), this._movePort(rPort, a, bP, k));
  };
  a._alignNS = function(b, a, d) {
    for (var c = -this._rect.width / 2, f = this._rect.width / 2, g = this._rect.width, h = 0, k = 0;k < b.length;k++) {
      h += b[k].width + 5;
    }
    h < f - c && (f = h / 2 + 3, c = -h / 2 - 3);
    for (;1 < b.length;) {
      var k = b.shift(), l = b.pop(), n = c, m = f, t = d;
      h <= f - c ? (c += k.width + 5, f -= l.width + 5, t = 0) : 0 === b.length ? (c = (c + f) / 2 - 3, f = c + 6) : (c = Math.max(c, -g / 2 + k.width) + 15, f = Math.min(f, g / 2 - l.width) - 15);
      this._movePort(k, c, a, n);
      this._movePort(l, f, a, m);
      h -= k.width + l.width + 10;
      a += t;
    }
    b.length && this._movePort(b[0], (f + c - b[0].width) / 2, a, 100);
  };
  a._alignNSList = function(b, a) {
    a = this._rect.width;
    initX = -this._rect.width / 2 + 10;
    initY = -this._rect.height / 2 + 10;
    for (var c = listLine = wholeWidth = 0;c < b.length;c++) {
      wholeWidth += b[c].width;
    }
    for (var e = 0, f = 0, g = initX, h, k, l = 0, c = 0;c < b.length;c++) {
      k = b[c], c != b.length - 1 && (l = b[c + 1]), f += k.width, lP = initX, h = initY + 30 * e, k.group.attr({transform:"translate(" + lP + "," + h + ")"}), initX += k.width + 10, f > a - (k.width + l.width / 2.2) && (e += 1, initX = g, f = 0);
    }
  };
  a._movePort = function(b, a, d, e) {
    var c = a, g = b.box.x * this.scale, h = b.box.y * this.scale;
    a > e ? (c = a - b.width, a = a > g && g > e ? "M" + g + "," + d + "L" + g + "," + h : "M" + (a + e) / 2 + "," + d + "l0," + (h > d ? 28 : -3) + "H" + g + "L" + g + "," + h) : a = a < g && g < e ? "m" + g + "," + d + "L" + g + "," + h : "m" + (e + a) / 2 + "," + d + "l0," + (h > d ? 28 : -3) + "H" + g + "L" + g + "," + h;
    b.group.attr({transform:"translate(" + c + "," + d + ")"});
    b.path.attr({d:a});
  };
})(Entry.HWMonitor.prototype);
Entry.HW = function() {
  this.sessionRoomId = localStorage.getItem("entryhwRoomId");
  this.sessionRoomId || (this.sessionRoomId = this.createRandomRoomId(), localStorage.setItem("entryhwRoomId", this.sessionRoomId));
  this.connectTrial = 0;
  this.isFirstConnect = !0;
  this.requireVerion = "v1.6.1";
  this.downloadPath = "http://download.play-entry.org/apps/Entry_HW_1.6.4_Setup.exe";
  this.downloadPathOsx = "http://download.play-entry.org/apps/Entry_HW-1.6.4.dmg";
  this.hwPopupCreate();
  this.initSocket();
  this.connected = !1;
  this.portData = {};
  this.sendQueue = {};
  this.outputQueue = {};
  this.settingQueue = {};
  this.socketType = this.hwModule = this.selectedDevice = null;
  Entry.addEventListener("stop", this.setZero);
  this.hwInfo = {"1.1":Entry.Arduino, "1.9":Entry.ArduinoExt, "1.2":Entry.SensorBoard, "1.3":Entry.CODEino, "1.4":Entry.joystick, "1.5":Entry.dplay, "1.6":Entry.nemoino, "1.7":Entry.Xbot, "1.8":Entry.ardublock, "1.A":Entry.Cobl, "2.4":Entry.Hamster, "2.5":Entry.Albert, "3.1":Entry.Bitbrick, "4.2":Entry.Arduino, "5.1":Entry.Neobot, "7.1":Entry.Robotis_carCont, "7.2":Entry.Robotis_openCM70, "8.1":Entry.Arduino, "10.1":Entry.Roborobo_Roduino, "10.2":Entry.Roborobo_SchoolKit, "12.1":Entry.EV3, "B.1":Entry.Codestar, 
  "A.1":Entry.SmartBoard, "C.1":Entry.DaduBlock, "D.1":Entry.robotori, "F.1":Entry.byrobot_dronefighter_controller, "F.2":Entry.byrobot_dronefighter_drive, "F.3":Entry.byrobot_dronefighter_flight};
};
Entry.HW.TRIAL_LIMIT = 2;
p = Entry.HW.prototype;
p.createRandomRoomId = function() {
  return "xxxxxxxxyx".replace(/[xy]/g, function(a) {
    var b = 16 * Math.random() | 0;
    return ("x" == a ? b : b & 3 | 8).toString(16);
  });
};
p.connectWebSocket = function(a, b) {
  var c = this, d = io(a, b);
  d.io.reconnectionAttempts(Entry.HW.TRIAL_LIMIT);
  d.io.reconnectionDelayMax(1E3);
  d.io.timeout(1E3);
  d.on("connect", function() {
    c.socketType = "WebSocket";
    c.initHardware(d);
  });
  d.on("mode", function(b) {
    0 === d.mode && 1 === b && c.disconnectHardware();
    c.socketMode = b;
    d.mode = b;
  });
  d.on("message", function(b) {
    if (b.data && "string" === typeof b.data) {
      switch(b.data) {
        case "disconnectHardware":
          c.disconnectHardware();
          break;
        default:
          var a = JSON.parse(b.data);
          c.checkDevice(a, b.version);
          c.updatePortData(a);
      }
    }
  });
  d.on("disconnect", function() {
    c.initSocket();
  });
  return d;
};
p.initSocket = function() {
  try {
    this.connected = !1;
    this.tlsSocketIo && this.tlsSocketIo.removeAllListeners();
    this.socketIo && this.socketIo.removeAllListeners();
    this.isOpenHardware || this.checkOldClient();
    if (-1 < location.protocol.indexOf("https")) {
      this.tlsSocketIo = this.connectWebSocket("https://hardware.play-entry.org:23518", {query:{client:!0, roomId:this.sessionRoomId}});
    } else {
      try {
        this.socketIo = this.connectWebSocket("http://127.0.0.1:23518", {query:{client:!0, roomId:this.sessionRoomId}});
      } catch (a) {
      }
      try {
        this.tlsSocketIo = this.connectWebSocket("https://hardware.play-entry.org:23518", {query:{client:!0, roomId:this.sessionRoomId}});
      } catch (a) {
      }
    }
    Entry.dispatchEvent("hwChanged");
  } catch (a) {
  }
};
p.checkOldClient = function() {
  try {
    var a = this, b = new WebSocket("wss://hardware.play-entry.org:23518");
    b.onopen = function() {
      a.popupHelper.show("newVersion", !0);
      b.close();
    };
  } catch (c) {
  }
};
p.retryConnect = function() {
  this.isOpenHardware = !1;
  Entry.HW.TRIAL_LIMIT = 5;
  this.initSocket();
};
p.openHardwareProgram = function() {
  var a = this;
  this.isOpenHardware = !0;
  Entry.HW.TRIAL_LIMIT = 5;
  this.executeHardware();
  this.socket && this.socket.connected || setTimeout(function() {
    a.initSocket();
  }, 1E3);
};
p.initHardware = function(a) {
  this.socket = a;
  this.connectTrial = 0;
  this.connected = !0;
  Entry.dispatchEvent("hwChanged");
  Entry.playground && Entry.playground.object && Entry.playground.setMenu(Entry.playground.object.objectType);
};
p.disconnectHardware = function() {
  Entry.propertyPanel.removeMode("hw");
  this.hwModule = this.selectedDevice = void 0;
  Entry.dispatchEvent("hwChanged");
};
p.disconnectedSocket = function() {
  this.tlsSocketIo.close();
  this.socketIo && this.socketIo.close();
  Entry.propertyPanel.removeMode("hw");
  this.socket = void 0;
  this.connectTrial = 0;
  this.connected = !1;
  this.hwModule = this.selectedDevice = void 0;
  Entry.dispatchEvent("hwChanged");
  Entry.toast.alert("\ud558\ub4dc\uc6e8\uc5b4 \ud504\ub85c\uadf8\ub7a8 \uc5f0\uacb0 \uc885\ub8cc", "\ud558\ub4dc\uc6e8\uc5b4 \ud504\ub85c\uadf8\ub7a8\uacfc\uc758 \uc5f0\uacb0\uc774 \uc885\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.", !1);
};
p.setDigitalPortValue = function(a, b) {
  this.sendQueue[a] = b;
  this.removePortReadable(a);
};
p.getAnalogPortValue = function(a) {
  return this.connected ? this.portData["a" + a] : 0;
};
p.getDigitalPortValue = function(a) {
  if (!this.connected) {
    return 0;
  }
  this.setPortReadable(a);
  return void 0 !== this.portData[a] ? this.portData[a] : 0;
};
p.setPortReadable = function(a) {
  this.sendQueue.readablePorts || (this.sendQueue.readablePorts = []);
  var b = !1, c;
  for (c in this.sendQueue.readablePorts) {
    if (this.sendQueue.readablePorts[c] == a) {
      b = !0;
      break;
    }
  }
  b || this.sendQueue.readablePorts.push(a);
};
p.removePortReadable = function(a) {
  if (this.sendQueue.readablePorts || Array.isArray(this.sendQueue.readablePorts)) {
    var b, c;
    for (c in this.sendQueue.readablePorts) {
      if (this.sendQueue.readablePorts[c] == a) {
        b = Number(c);
        break;
      }
    }
    this.sendQueue.readablePorts = void 0 != b ? this.sendQueue.readablePorts.slice(0, b).concat(this.sendQueue.readablePorts.slice(b + 1, this.sendQueue.readablePorts.length)) : [];
  }
};
p.update = function() {
  this.socket && (this.socket.disconnected || this.socket.emit("message", {data:JSON.stringify(this.sendQueue), mode:this.socket.mode, type:"utf8"}));
};
p.updatePortData = function(a) {
  this.portData = a;
  this.hwMonitor && "hw" == Entry.propertyPanel.selected && this.hwMonitor.update();
};
p.closeConnection = function() {
  this.socket && this.socket.close();
};
p.downloadConnector = function() {
  window.open("MacIntel" === navigator.platform ? this.downloadPathOsx : this.downloadPath, "_blank").focus();
};
p.downloadGuide = function() {
  window.open("http://download.play-entry.org/data/hardware_manual.zip", "download");
};
p.downloadSource = function() {
  window.open("http://play-entry.com/down/board.ino", "_blank").focus();
};
p.setZero = function() {
  Entry.hw.hwModule && Entry.hw.hwModule.setZero();
};
p.checkDevice = function(a, b) {
  void 0 !== a.company && (a = [Entry.Utils.convertIntToHex(a.company), ".", Entry.Utils.convertIntToHex(a.model)].join(""), a != this.selectedDevice && (Entry.Utils.isNewVersion(b, this.requireVerion) && this.popupHelper.show("newVersion", !0), this.selectedDevice = a, this.hwModule = this.hwInfo[a], Entry.dispatchEvent("hwChanged"), Entry.toast.success("\ud558\ub4dc\uc6e8\uc5b4 \uc5f0\uacb0 \uc131\uacf5", "\ud558\ub4dc\uc6e8\uc5b4 \uc544\uc774\ucf58\uc744 \ub354\ube14\ud074\ub9ad\ud558\uba74, \uc13c\uc11c\uac12\ub9cc \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.", 
  !1), this.hwModule.monitorTemplate && (this.hwMonitor ? (this.hwMonitor._hwModule = this.hwModule, this.hwMonitor.initView()) : this.hwMonitor = new Entry.HWMonitor(this.hwModule), Entry.propertyPanel.addMode("hw", this.hwMonitor), b = this.hwModule.monitorTemplate, "both" == b.mode ? (b.mode = "list", this.hwMonitor.generateListView(), b.mode = "general", this.hwMonitor.generateView(), b.mode = "both") : "list" == b.mode ? this.hwMonitor.generateListView() : this.hwMonitor.generateView())));
};
p.banHW = function() {
  var a = this.hwInfo, b;
  for (b in a) {
    Entry.playground.mainWorkspace.blockMenu.banClass(a[b].name, !0);
  }
};
p.executeHardware = function() {
  function a(b) {
    navigator.msLaunchUri(b, function() {
    }, function() {
      d.popupHelper.show("hwDownload", !0);
    });
  }
  function b(b) {
    var a = document.createElement("iframe");
    a.src = "about:blank";
    a.style = "display:none";
    document.getElementsByTagName("body")[0].appendChild(a);
    var c = null, c = setTimeout(function() {
      var e = !1;
      try {
        a.contentWindow.location.href = b, e = !0;
      } catch (n) {
        "NS_ERROR_UNKNOWN_PROTOCOL" == n.name && (e = !1);
      }
      e || d.popupHelper.show("hwDownload", !0);
      document.getElementsByTagName("body")[0].removeChild(a);
      clearTimeout(c);
    }, 500);
  }
  function c(b) {
    var a = !1;
    window.focus();
    $(window).one("blur", function() {
      a = !0;
    });
    Entry.dispatchEvent("workspaceUnbindUnload", !0);
    location.assign(encodeURI(b));
    setTimeout(function() {
      Entry.dispatchEvent("workspaceBindUnload", !0);
    }, 100);
    setTimeout(function() {
      0 == a && d.popupHelper.show("hwDownload", !0);
      window.onblur = null;
    }, 3E3);
  }
  var d = this, e = {_bNotInstalled:!1, init:function(b, a) {
    this._w = window.open("/views/hwLoading.html", "entry_hw_launcher", "width=220, height=225,  top=" + window.screenTop + ", left=" + window.screenLeft);
    var c = null, c = setTimeout(function() {
      e.runViewer(b, a);
      clearInterval(c);
    }, 1E3);
  }, runViewer:function(b, a) {
    this._w.document.write("<iframe src='" + b + "' onload='opener.Entry.hw.ieLauncher.set()' style='display:none;width:0;height:0'></iframe>");
    var c = 0, d = null, d = setInterval(function() {
      try {
        this._w.location.href;
      } catch (t) {
        this._bNotInstalled = !0;
      }
      if (10 < c) {
        clearInterval(d);
        var b = 0, e = null, e = setInterval(function() {
          b++;
          this._w.closed || 2 < b ? clearInterval(e) : this._w.close();
          this._bNotInstalled = !1;
          c = 0;
        }.bind(this), 5E3);
        a(!this._bNotInstalled);
      }
      c++;
    }.bind(this), 100);
  }, set:function() {
    this._bNotInstalled = !0;
  }};
  d.ieLauncher = e;
  var f = "entryhw://-roomId:" + this.sessionRoomId;
  0 < navigator.userAgent.indexOf("MSIE") || 0 < navigator.userAgent.indexOf("Trident") ? void 0 != navigator.msLaunchUri ? a(f) : 9 > (0 < document.documentMode ? document.documentMode : navigator.userAgent.match(/(?:MSIE) ([0-9.]+)/)[1]) ? alert(Lang.msgs.not_support_browser) : e.init(f, function(b) {
    0 == b && d.popupHelper.show("hwDownload", !0);
  }) : 0 < navigator.userAgent.indexOf("Firefox") ? b(f) : 0 < navigator.userAgent.indexOf("Chrome") || 0 < navigator.userAgent.indexOf("Safari") ? c(f) : alert(Lang.msgs.not_support_browser);
};
p.hwPopupCreate = function() {
  var a = this;
  this.popupHelper || (this.popupHelper = window.popupHelper ? window.popupHelper : new Entry.popupHelper(!0));
  this.popupHelper.addPopup("newVersion", {type:"confirm", title:Lang.Msgs.new_version_title, setPopupLayout:function(b) {
    var c = Entry.Dom("div", {class:"contentArea"}), d = Entry.Dom("div", {class:"textArea", parent:c}), e = Entry.Dom("div", {class:"text1", parent:d}), f = Entry.Dom("div", {class:"text2", parent:d}), g = Entry.Dom("div", {class:"text3", parent:d}), d = Entry.Dom("div", {class:"text4", parent:d}), h = Entry.Dom("div", {classes:["popupCancelBtn", "popupDefaultBtn"], parent:c}), k = Entry.Dom("div", {classes:["popupOkBtn", "popupDefaultBtn"], parent:c});
    e.text(Lang.Msgs.new_version_text1);
    f.html(Lang.Msgs.new_version_text2);
    g.text(Lang.Msgs.new_version_text3);
    d.text(Lang.Msgs.new_version_text4);
    h.text(Lang.Buttons.cancel);
    k.html(Lang.Msgs.new_version_download);
    c.bindOnClick(".popupDefaultBtn", function(b) {
      $(this).hasClass("popupOkBtn") && a.downloadConnector();
      a.popupHelper.hide("newVersion");
    });
    b.append(c);
  }});
  this.popupHelper.addPopup("hwDownload", {type:"confirm", title:Lang.Msgs.not_install_title, setPopupLayout:function(b) {
    var c = Entry.Dom("div", {class:"contentArea"}), d = Entry.Dom("div", {class:"textArea", parent:c}), e = Entry.Dom("div", {class:"text1", parent:d}), f = Entry.Dom("div", {class:"text2", parent:d}), g = Entry.Dom("div", {class:"text3", parent:d}), d = Entry.Dom("div", {class:"text4", parent:d}), h = Entry.Dom("div", {classes:["popupCancelBtn", "popupDefaultBtn"], parent:c}), k = Entry.Dom("div", {classes:["popupOkBtn", "popupDefaultBtn"], parent:c});
    e.text(Lang.Msgs.hw_download_text1);
    f.html(Lang.Msgs.hw_download_text2);
    g.text(Lang.Msgs.hw_download_text3);
    d.text(Lang.Msgs.hw_download_text4);
    h.text(Lang.Buttons.cancel);
    k.html(Lang.Msgs.hw_download_btn);
    c.bindOnClick(".popupDefaultBtn", function(b) {
      $(this).hasClass("popupOkBtn") && a.downloadConnector();
      a.popupHelper.hide("hwDownload");
    });
    b.append(c);
  }});
};
Entry.PropertyPanel = function() {
  this.modes = {};
  this.selected = null;
};
(function(a) {
  a.generateView = function(b, a) {
    this._view = Entry.Dom("div", {class:"propertyPanel", parent:$(b)});
    this._tabView = Entry.Dom("div", {class:"propertyTab", parent:this._view});
    this._contentView = Entry.Dom("div", {class:"propertyContent", parent:this._view});
    this._cover = Entry.Dom("div", {classes:["propertyPanelCover", "entryRemove"], parent:this._view});
    b = Entry.Dom("div", {class:"entryObjectSelectedImgWorkspace", parent:this._view});
    this.initializeSplitter(b);
  };
  a.addMode = function(b, a) {
    this.modes[b] && this.removeMode(b);
    var c = a.getView(), c = Entry.Dom(c, {parent:this._contentView}), e = Entry.Dom("<div>" + Lang.Menus[b] + "</div>", {classes:["propertyTabElement", "propertyTab" + b], parent:this._tabView}), f = this;
    e.bind("click", function() {
      f.select(b);
    });
    "console" == b && a.codeMirror.refresh();
    this.modes[b] && (this.modes[b].tabDom.remove(), this.modes[b].contentDom.remove(), "hw" == b && ($(this.modes).removeClass(".propertyTabhw"), $(".propertyTabhw").unbind("dblclick")));
    this.modes[b] = {obj:a, tabDom:e, contentDom:c};
    "hw" == b && $(".propertyTabhw").bind("dblclick", function() {
      Entry.dispatchEvent("hwModeChange");
    });
  };
  a.removeMode = function(b) {
    this.modes[b] && (this.modes[b].tabDom.remove(), this.modes[b].contentDom.remove(), "hw" == b && ($(this.modes).removeClass(".propertyTabhw"), $(".propertyTabhw").unbind("dblclick")));
    (b = Object.keys(this.modes)) && 0 < b.length && this.select(b[0]);
  };
  a.resize = function(b) {
    this._view.css({width:b + "px", top:9 * b / 16 + 123 - 22 + "px"});
    430 <= b ? this._view.removeClass("collapsed") : this._view.addClass("collapsed");
    Entry.dispatchEvent("windowResized");
    b = this.selected;
    var a = this.modes[b].obj;
    "hw" == b ? this.modes.hw.obj.listPorts ? a.resizeList() : a.resize && a.resize() : a.resize && a.resize();
  };
  a.select = function(b) {
    for (var a in this.modes) {
      var d = this.modes[a];
      d.tabDom.removeClass("selected");
      d.contentDom.addClass("entryRemove");
      $(d.contentDom).detach();
      d.obj.visible = !1;
    }
    a = this.modes[b];
    $(this._contentView).append(a.contentDom);
    a.tabDom.addClass("selected");
    a.contentDom.removeClass("entryRemove");
    a.obj.resize && a.obj.resize();
    a.obj.visible = !0;
    this.selected = b;
  };
  a.initializeSplitter = function(b) {
    var a = this;
    b.bind("mousedown touchstart", function(b) {
      a._cover.removeClass("entryRemove");
      a._cover._isVisible = !0;
      Entry.container.disableSort();
      Entry.container.splitterEnable = !0;
      Entry.documentMousemove && (Entry.container.resizeEvent = Entry.documentMousemove.attach(this, function(b) {
        Entry.container.splitterEnable && Entry.resizeElement({canvasWidth:b.clientX || b.x});
      }));
    });
    $(document).bind("mouseup touchend", function(b) {
      if (b = Entry.container.resizeEvent) {
        Entry.container.splitterEnable = !1, Entry.documentMousemove.detach(b), delete Entry.container.resizeEvent;
      }
      a._cover._isVisible && (a._cover._isVisible = !1, a._cover.addClass("entryRemove"));
      Entry.container.enableSort();
    });
  };
})(Entry.PropertyPanel.prototype);
Entry.init = function(a, b) {
  Entry.assert("object" === typeof b, "Init option is not object");
  this.events_ = {};
  this.interfaceState = {menuWidth:264};
  Entry.Utils.bindGlobalEvent("resize mousedown mousemove keydown keyup dispose".split(" "));
  this.options = b;
  this.parseOptions(b);
  this.mediaFilePath = (b.libDir ? b.libDir : "/lib") + "/entryjs/images/";
  this.defaultPath = b.defaultDir || "";
  this.blockInjectPath = b.blockInjectDir || "";
  "workspace" == this.type && this.isPhone() && (this.type = "phone");
  this.initialize_();
  this.view_ = a;
  $(this.view_).addClass("entry");
  "tablet" === this.device && $(this.view_).addClass("tablet");
  Entry.initFonts(b.fonts);
  this.createDom(a, this.type);
  this.loadInterfaceState();
  this.overridePrototype();
  this.maxCloneLimit = 302;
  this.cloudSavable = !0;
  this.startTime = (new Date).getTime();
  document.onkeydown = function(b) {
    Entry.dispatchEvent("keyPressed", b);
  };
  document.onkeyup = function(b) {
    Entry.dispatchEvent("keyUpped", b);
  };
  window.onresize = function(b) {
    Entry.dispatchEvent("windowResized", b);
  };
  window.onbeforeunload = this.beforeUnload;
  Entry.addEventListener("saveWorkspace", function(b) {
    Entry.addActivity("save");
  });
  Entry.addEventListener("showBlockHelper", function(b) {
    Entry.propertyPanel.select("helper");
  });
  "IE" != Entry.getBrowserType().substr(0, 2) || window.flashaudio ? createjs.Sound.registerPlugins([createjs.WebAudioPlugin]) : (createjs.FlashAudioPlugin.swfPath = this.mediaFilePath + "media/", createjs.Sound.registerPlugins([createjs.FlashAudioPlugin]), window.flashaudio = !0);
  Entry.soundQueue = new createjs.LoadQueue;
  Entry.soundQueue.installPlugin(createjs.Sound);
  Entry.loadAudio_([Entry.mediaFilePath + "sounds/click.mp3", Entry.mediaFilePath + "sounds/click.wav", Entry.mediaFilePath + "sounds/click.ogg"], "entryMagneting");
  Entry.loadAudio_([Entry.mediaFilePath + "sounds/delete.mp3", Entry.mediaFilePath + "sounds/delete.ogg", Entry.mediaFilePath + "sounds/delete.wav"], "entryDelete");
  createjs.Sound.stop();
};
Entry.changeContainer = function(a) {
  a.appendChild(this.view_);
};
Entry.loadAudio_ = function(a, b) {
  if (window.Audio && a.length) {
    for (;0 < a.length;) {
      a = a[0];
      a.match(/\/([^.]+)./);
      Entry.soundQueue.loadFile({id:b, src:a, type:createjs.LoadQueue.SOUND});
      break;
    }
  }
};
Entry.initialize_ = function() {
  this.stage = new Entry.Stage;
  Entry.engine && Entry.engine.clearTimer();
  this.engine = new Entry.Engine;
  this.propertyPanel = new Entry.PropertyPanel;
  this.container = new Entry.Container;
  this.helper = new Entry.Helper;
  this.youtube = new Entry.Youtube;
  this.variableContainer = new Entry.VariableContainer;
  this.commander = new Entry.Commander(this.type);
  this.scene = new Entry.Scene;
  this.playground = new Entry.Playground;
  this.toast = new Entry.Toast;
  this.hw && this.hw.closeConnection();
  this.hw = new Entry.HW;
  if (Entry.enableActivityLogging) {
    this.reporter = new Entry.Reporter(!1);
  } else {
    if ("workspace" == this.type || "phone" == this.type) {
      this.reporter = new Entry.Reporter(!0);
    }
  }
};
Entry.createDom = function(a, b) {
  if (b && "workspace" != b) {
    "minimize" == b ? (c = Entry.createElement("canvas"), c.className = "entryCanvasWorkspace minimize", c.id = "entryCanvas", c.width = 640, c.height = 360, d = Entry.createElement("div", "entryCanvasWrapper"), d.appendChild(c), a.appendChild(d), this.canvas_ = c, this.stage.initStage(this.canvas_), d = Entry.createElement("div"), a.appendChild(d), this.engineView = d, this.engine.generateView(this.engineView, b)) : "phone" == b && (this.stateManagerView = c = Entry.createElement("div"), this.stateManager.generateView(this.stateManagerView, 
    b), d = Entry.createElement("div"), a.appendChild(d), this.engineView = d, this.engine.generateView(this.engineView, b), c = Entry.createElement("canvas"), c.addClass("entryCanvasPhone"), c.id = "entryCanvas", c.width = 640, c.height = 360, d.insertBefore(c, this.engine.footerView_), this.canvas_ = c, this.stage.initStage(this.canvas_), c = Entry.createElement("div"), a.appendChild(c), this.containerView = c, this.container.generateView(this.containerView, b), c = Entry.createElement("div"), 
    a.appendChild(c), this.playgroundView = c, this.playground.generateView(this.playgroundView, b));
  } else {
    Entry.documentMousedown.attach(this, this.cancelObjectEdit);
    var c = Entry.createElement("div");
    a.appendChild(c);
    this.sceneView = c;
    this.scene.generateView(this.sceneView, b);
    c = Entry.createElement("div");
    this.sceneView.appendChild(c);
    this.stateManagerView = c;
    this.stateManager.generateView(this.stateManagerView, b);
    var d = Entry.createElement("div");
    a.appendChild(d);
    this.engineView = d;
    this.engine.generateView(this.engineView, b);
    c = Entry.createElement("canvas");
    c.addClass("entryCanvasWorkspace");
    c.id = "entryCanvas";
    c.width = 640;
    c.height = 360;
    d.insertBefore(c, this.engine.addButton);
    c.addEventListener("mousewheel", function(b) {
      var a = Entry.variableContainer.getListById(Entry.stage.mouseCoordinate);
      b = 0 < b.wheelDelta ? !0 : !1;
      for (var c = 0;c < a.length;c++) {
        var d = a[c];
        d.scrollButton_.y = b ? 46 <= d.scrollButton_.y ? d.scrollButton_.y - 23 : 23 : d.scrollButton_.y + 23;
        d.updateView();
      }
    });
    this.canvas_ = c;
    this.stage.initStage(this.canvas_);
    c = Entry.createElement("div");
    this.propertyPanel.generateView(a, b);
    this.containerView = c;
    this.container.generateView(this.containerView, b);
    this.propertyPanel.addMode("object", this.container);
    this.helper.generateView(this.containerView, b);
    this.propertyPanel.addMode("helper", this.helper);
    c = Entry.createElement("div");
    a.appendChild(c);
    this.playgroundView = c;
    this.playground.generateView(this.playgroundView, b);
    this.propertyPanel.select("object");
    this.helper.bindWorkspace(this.playground.mainWorkspace);
  }
};
Entry.start = function(a) {
  "invisible" !== Entry.type && (this.FPS || (this.FPS = 60), Entry.assert("number" == typeof this.FPS, "FPS must be number"), Entry.engine.start(this.FPS));
};
Entry.stop = function() {
  "invisible" !== Entry.type && (this.FPS = null, Entry.engine.stop());
};
Entry.parseOptions = function(a) {
  this.type = a.type;
  this.hashId = a.hashId;
  a.device && (this.device = a.device);
  this.projectSaveable = a.projectsaveable;
  void 0 === this.projectSaveable && (this.projectSaveable = !0);
  this.objectAddable = a.objectaddable;
  void 0 === this.objectAddable && (this.objectAddable = !0);
  this.objectEditable = a.objectEditable;
  void 0 === this.objectEditable && (this.objectEditable = !0);
  this.objectEditable || (this.objectAddable = !1);
  this.objectDeletable = a.objectdeletable;
  void 0 === this.objectDeletable && (this.objectDeletable = !0);
  this.soundEditable = a.soundeditable;
  void 0 === this.soundEditable && (this.soundEditable = !0);
  this.pictureEditable = a.pictureeditable;
  void 0 === this.pictureEditable && (this.pictureEditable = !0);
  this.sceneEditable = a.sceneEditable;
  void 0 === this.sceneEditable && (this.sceneEditable = !0);
  this.functionEnable = a.functionEnable;
  void 0 === this.functionEnable && (this.functionEnable = !0);
  this.messageEnable = a.messageEnable;
  void 0 === this.messageEnable && (this.messageEnable = !0);
  this.variableEnable = a.variableEnable;
  void 0 === this.variableEnable && (this.variableEnable = !0);
  this.listEnable = a.listEnable;
  void 0 === this.listEnable && (this.listEnable = !0);
  this.hasVariableManager = a.hasvariablemanager;
  this.variableEnable || this.messageEnable || this.listEnable || this.functionEnable ? void 0 === this.hasVariableManager && (this.hasVariableManager = !0) : this.hasVariableManager = !1;
  this.isForLecture = a.isForLecture;
  this.textCodingEnable = a.textCodingEnable;
};
Entry.initFonts = function(a) {
  this.fonts = a;
  a || (this.fonts = []);
};
Entry.Activity = function(a, b) {
  this.name = a;
  this.timestamp = new Date;
  a = [];
  if (void 0 !== b) {
    for (var c = 0, d = b.length;c < d;c++) {
      var e = b[c];
      a.push({key:e[0], value:e[1]});
    }
  }
  this.data = a;
};
Entry.ActivityReporter = function() {
  this._activities = [];
};
(function(a) {
  a.add = function(b) {
    if (b && 0 !== b.length) {
      if (!(b instanceof Entry.Activity)) {
        var a = b.shift();
        b = new Entry.Activity(a, b);
      }
      this._activities.push(b);
    }
  };
  a.clear = function() {
    this._activities = [];
  };
  a.get = function() {
    return this._activities;
  };
  a.report = function() {
  };
})(Entry.ActivityReporter.prototype);
Entry.State = function(a, b, c, d) {
  this.caller = b;
  this.func = c;
  3 < arguments.length && (this.params = Array.prototype.slice.call(arguments).slice(3));
  this.message = a;
  this.time = Entry.getUpTime();
  this.isPass = Entry.Command[a] ? Entry.Command[a].isPass : !1;
};
Entry.State.prototype.generateMessage = function() {
};
Entry.StateManager = function() {
  this.undoStack_ = [];
  this.redoStack_ = [];
  this.isIgnore = this.isRestore = !1;
  Entry.addEventListener("cancelLastCommand", function(a) {
    Entry.stateManager.cancelLastCommand();
  });
  Entry.addEventListener("run", function(a) {
    Entry.stateManager.updateView();
  });
  Entry.addEventListener("stop", function(a) {
    Entry.stateManager.updateView();
  });
  Entry.addEventListener("saveWorkspace", function(a) {
    Entry.stateManager.addStamp();
  });
  Entry.addEventListener("undo", function(a) {
    Entry.stateManager.undo();
  });
  Entry.addEventListener("redo", function(a) {
    Entry.stateManager.redo();
  });
};
Entry.StateManager.prototype.generateView = function(a, b) {
};
Entry.StateManager.prototype.addCommand = function(a, b, c, d) {
  if (!this.isIgnoring()) {
    if (this.isRestoring()) {
      var e = new Entry.State, f = Array.prototype.slice.call(arguments);
      Entry.State.prototype.constructor.apply(e, f);
      this.redoStack_.push(e);
      Entry.reporter && Entry.reporter.report(e);
    } else {
      e = new Entry.State, f = Array.prototype.slice.call(arguments), Entry.State.prototype.constructor.apply(e, f), this.undoStack_.push(e), Entry.reporter && Entry.reporter.report(e), this.updateView();
    }
    Entry.creationChangedEvent && Entry.creationChangedEvent.notify();
  }
};
Entry.StateManager.prototype.cancelLastCommand = function() {
  this.canUndo() && (this.undoStack_.pop(), this.updateView(), Entry.creationChangedEvent && Entry.creationChangedEvent.notify());
};
Entry.StateManager.prototype.getLastCommand = function() {
  return this.undoStack_[this.undoStack_.length - 1];
};
Entry.StateManager.prototype.undo = function() {
  if (this.canUndo() && !this.isRestoring()) {
    this.addActivity("undo");
    for (this.startRestore();this.undoStack_.length;) {
      var a = this.undoStack_.pop();
      a.func.apply(a.caller, a.params);
      if (!0 !== a.isPass) {
        break;
      }
    }
    this.updateView();
    this.endRestore();
    Entry.creationChangedEvent && Entry.creationChangedEvent.notify();
  }
};
Entry.StateManager.prototype.redo = function() {
  if (this.canRedo() && !this.isRestoring()) {
    for (this.addActivity("redo");this.redoStack_.length;) {
      var a = this.redoStack_.pop();
      a.func.apply(a.caller, a.params);
      if (!0 !== a.isPass) {
        break;
      }
    }
    this.updateView();
    Entry.creationChangedEvent && Entry.creationChangedEvent.notify();
  }
};
Entry.StateManager.prototype.updateView = function() {
  this.undoButton && this.redoButton && (this.canUndo() ? this.undoButton.addClass("active") : this.undoButton.removeClass("active"), this.canRedo() ? this.redoButton.addClass("active") : this.redoButton.removeClass("active"));
};
Entry.StateManager.prototype.startRestore = function() {
  this.isRestore = !0;
};
Entry.StateManager.prototype.endRestore = function() {
  this.isRestore = !1;
};
Entry.StateManager.prototype.isRestoring = function() {
  return this.isRestore;
};
Entry.StateManager.prototype.startIgnore = function() {
  this.isIgnore = !0;
};
Entry.StateManager.prototype.endIgnore = function() {
  this.isIgnore = !1;
};
Entry.StateManager.prototype.isIgnoring = function() {
  return this.isIgnore;
};
Entry.StateManager.prototype.canUndo = function() {
  return 0 < this.undoStack_.length && Entry.engine.isState("stop");
};
Entry.StateManager.prototype.canRedo = function() {
  return 0 < this.redoStack_.length && Entry.engine.isState("stop");
};
Entry.StateManager.prototype.addStamp = function() {
  this.stamp = Entry.generateHash();
  this.undoStack_.length && (this.undoStack_[this.undoStack_.length - 1].stamp = this.stamp);
};
Entry.StateManager.prototype.isSaved = function() {
  return 0 === this.undoStack_.length || this.undoStack_[this.undoStack_.length - 1].stamp == this.stamp && "string" == typeof this.stamp;
};
Entry.StateManager.prototype.addActivity = function(a) {
  Entry.reporter && Entry.reporter.report(new Entry.State(a));
};
Entry.BlockModel = function() {
  Entry.Model(this);
};
Entry.BlockModel.prototype.schema = {id:null, x:0, y:0, type:null, params:{}, statements:{}, prev:null, next:null, view:null};
Entry.BlockRenderModel = function() {
  Entry.Model(this);
};
Entry.BlockRenderModel.prototype.schema = {id:0, type:Entry.STATIC.BLOCK_RENDER_MODEL, x:0, y:0, width:0, height:0, magneting:!1};
Entry.BoxModel = function() {
  Entry.Model(this);
};
Entry.BoxModel.prototype.schema = {id:0, type:Entry.STATIC.BOX_MODEL, x:0, y:0, width:0, height:0};
Entry.DragInstance = function(a) {
  Entry.Model(this);
  this.set(a);
};
Entry.DragInstance.prototype.schema = {type:Entry.STATIC.DRAG_INSTANCE, startX:0, startY:0, offsetX:0, offsetY:0, absX:0, absY:0, prev:null, height:0, mode:0, isNew:!1};
Entry.ThreadModel = function() {
  Entry.Model(this);
};
Entry.ThreadModel.prototype.schema = {id:0, type:Entry.STATIC.THREAD_MODEL, x:0, y:0, width:0, minWidth:0, height:0};
Entry.EntryObject = function(a) {
  var b = this;
  if (a) {
    this.id = a.id;
    this.name = a.name || a.sprite.name;
    this.text = a.text || this.name;
    this.objectType = a.objectType;
    this.objectType || (this.objectType = "sprite");
    this.script = new Entry.Code(a.script ? a.script : [], this);
    this.pictures = a.sprite.pictures;
    this.sounds = [];
    this.sounds = a.sprite.sounds;
    for (var c = 0;c < this.sounds.length;c++) {
      this.sounds[c].id || (this.sounds[c].id = Entry.generateHash()), Entry.initSound(this.sounds[c]);
    }
    this.lock = a.lock ? a.lock : !1;
    this.isEditing = !1;
    "sprite" == this.objectType && (this.selectedPicture = a.selectedPictureId ? this.getPicture(a.selectedPictureId) : this.pictures[0]);
    this.scene = Entry.scene.getSceneById(a.scene) || Entry.scene.selectedScene;
    this.setRotateMethod(a.rotateMethod);
    this.entity = new Entry.EntityObject(this);
    this.entity.injectModel(this.selectedPicture ? this.selectedPicture : null, a.entity ? a.entity : this.initEntity(a));
    this.clonedEntities = [];
    Entry.stage.loadObject(this);
    for (c in this.pictures) {
      (function(a) {
        a.objectId = this.id;
        a.id || (a.id = Entry.generateHash());
        var c = new Image;
        if (a.fileurl) {
          c.src = a.fileurl;
        } else {
          if (a.fileurl) {
            c.src = a.fileurl;
          } else {
            var d = a.filename;
            c.src = Entry.defaultPath + "/uploads/" + d.substring(0, 2) + "/" + d.substring(2, 4) + "/image/" + d + ".png";
          }
        }
        Entry.Loader.addQueue();
        c.onload = function(c) {
          Entry.container.cachePicture(a.id + b.entity.id, this);
          Entry.requestUpdate = !0;
          Entry.Loader.removeQueue();
        };
        c.onerror = function(b) {
          Entry.Loader.removeQueue();
        };
      })(this.pictures[c]);
    }
  }
};
Entry.EntryObject.prototype.generateView = function() {
  if ("workspace" == Entry.type) {
    var a = Entry.createElement("li", this.id);
    document.createDocumentFragment("div").appendChild(a);
    a.addClass("entryContainerListElementWorkspace");
    a.object = this;
    Entry.Utils.disableContextmenu(a);
    var b = this;
    longPressTimer = null;
    $(a).bind("mousedown touchstart", function(a) {
      function c(b) {
        b.stopPropagation();
        h && 5 < Math.sqrt(Math.pow(b.pageX - h.x, 2) + Math.pow(b.pageY - h.y, 2)) && longPressTimer && (clearTimeout(longPressTimer), longPressTimer = null);
      }
      function d(b) {
        b.stopPropagation();
        e.unbind(".object");
        longPressTimer && (clearTimeout(longPressTimer), longPressTimer = null);
      }
      Entry.container.getObject(this.id) && Entry.container.selectObject(this.id);
      var e = $(document), f = a.type, g = !1;
      if (Entry.Utils.isRightButton(a)) {
        a.stopPropagation(), Entry.documentMousedown.notify(a), g = !0, b._rightClick(a);
      } else {
        var h = {x:a.clientX, y:a.clientY};
        "touchstart" !== f || g || (a.stopPropagation(), Entry.documentMousedown.notify(a), longPressTimer = setTimeout(function() {
          longPressTimer && (longPressTimer = null, b._rightClick(a));
        }, 1E3), e.bind("mousemove.object touchmove.object", c), e.bind("mouseup.object touchend.object", d));
      }
    });
    this.view_ = a;
    var c = this, a = Entry.createElement("ul");
    a.addClass("objectInfoView");
    Entry.objectEditable || a.addClass("entryHide");
    var d = Entry.createElement("li");
    d.addClass("objectInfo_visible");
    this.entity.getVisible() || d.addClass("objectInfo_unvisible");
    d.bindOnClick(function(b) {
      Entry.engine.isState("run") || (b = c.entity, b.setVisible(!b.getVisible()) ? this.removeClass("objectInfo_unvisible") : this.addClass("objectInfo_unvisible"));
    });
    var e = Entry.createElement("li");
    e.addClass("objectInfo_unlock");
    this.getLock() && e.addClass("objectInfo_lock");
    e.bindOnClick(function(b) {
      Entry.engine.isState("run") || (b = c, b.setLock(!b.getLock()) ? this.addClass("objectInfo_lock") : this.removeClass("objectInfo_lock"), b.updateInputViews(b.getLock()));
    });
    a.appendChild(d);
    a.appendChild(e);
    this.view_.appendChild(a);
    a = Entry.createElement("div");
    a.addClass("entryObjectThumbnailWorkspace");
    this.view_.appendChild(a);
    this.thumbnailView_ = a;
    a = Entry.createElement("div");
    a.addClass("entryObjectWrapperWorkspace");
    this.view_.appendChild(a);
    d = Entry.createElement("input");
    d.bindOnClick(function(b) {
      b.preventDefault();
      this.readOnly || (this.focus(), this.select());
    });
    d.addClass("entryObjectNameWorkspace");
    a.appendChild(d);
    this.nameView_ = d;
    this.nameView_.entryObject = this;
    d.setAttribute("readonly", !0);
    var f = this;
    this.nameView_.onblur = function(b) {
      this.entryObject.name = this.value;
      Entry.playground.reloadPlayground();
    };
    this.nameView_.onkeypress = function(b) {
      13 == b.keyCode && f.editObjectValues(!1);
    };
    this.nameView_.value = this.name;
    d = Entry.createElement("div");
    d.addClass("entryObjectEditWorkspace");
    d.object = this;
    this.editView_ = d;
    this.view_.appendChild(d);
    $(d).mousedown(function(a) {
      var c = b.isEditing;
      a.stopPropagation();
      Entry.documentMousedown.notify(a);
      Entry.engine.isState("run") || !1 !== c || (b.editObjectValues(!c), Entry.playground.object !== b && Entry.container.selectObject(b.id), b.nameView_.select());
    });
    d.blur = function(a) {
      b.editObjectComplete();
    };
    Entry.objectEditable && Entry.objectDeletable && (d = Entry.createElement("div"), d.addClass("entryObjectDeleteWorkspace"), d.object = this, this.deleteView_ = d, this.view_.appendChild(d), d.bindOnClick(function(b) {
      Entry.engine.isState("run") || Entry.container.removeObject(this.object);
    }));
    d = Entry.createElement("div");
    d.addClass("entryObjectInformationWorkspace");
    d.object = this;
    this.isInformationToggle = !1;
    a.appendChild(d);
    this.informationView_ = d;
    a = Entry.createElement("div");
    a.addClass("entryObjectRotationWrapperWorkspace");
    a.object = this;
    this.view_.appendChild(a);
    d = Entry.createElement("span");
    d.addClass("entryObjectCoordinateWorkspace");
    a.appendChild(d);
    e = Entry.createElement("span");
    e.addClass("entryObjectCoordinateSpanWorkspace");
    e.innerHTML = "X:";
    var g = Entry.createElement("input");
    g.addClass("entryObjectCoordinateInputWorkspace");
    g.setAttribute("readonly", !0);
    g.bindOnClick(function(b) {
      b.stopPropagation();
      this.select();
    });
    var h = Entry.createElement("span");
    h.addClass("entryObjectCoordinateSpanWorkspace");
    h.innerHTML = "Y:";
    var k = Entry.createElement("input");
    k.addClass("entryObjectCoordinateInputWorkspace entryObjectCoordinateInputWorkspace_right");
    k.bindOnClick(function(b) {
      b.stopPropagation();
      this.select();
    });
    k.setAttribute("readonly", !0);
    var l = Entry.createElement("span");
    l.addClass("entryObjectCoordinateSizeWorkspace");
    l.innerHTML = Lang.Workspace.Size + " : ";
    var n = Entry.createElement("input");
    n.addClass("entryObjectCoordinateInputWorkspace", "entryObjectCoordinateInputWorkspace_size");
    n.bindOnClick(function(b) {
      b.stopPropagation();
      this.select();
    });
    n.setAttribute("readonly", !0);
    d.appendChild(e);
    d.appendChild(g);
    d.appendChild(h);
    d.appendChild(k);
    d.appendChild(l);
    d.appendChild(n);
    d.xInput_ = g;
    d.yInput_ = k;
    d.sizeInput_ = n;
    this.coordinateView_ = d;
    c = this;
    g.onkeypress = function(b) {
      13 == b.keyCode && c.editObjectValues(!1);
    };
    g.onblur = function(b) {
      isNaN(g.value) || c.entity.setX(Number(g.value));
      c.updateCoordinateView();
      Entry.stage.updateObject();
    };
    k.onkeypress = function(b) {
      13 == b.keyCode && c.editObjectValues(!1);
    };
    k.onblur = function(b) {
      isNaN(k.value) || c.entity.setY(Number(k.value));
      c.updateCoordinateView();
      Entry.stage.updateObject();
    };
    n.onkeypress = function(b) {
      13 == b.keyCode && c.editObjectValues(!1);
    };
    n.onblur = function(b) {
      isNaN(n.value) || c.entity.setSize(Number(n.value));
      c.updateCoordinateView();
      Entry.stage.updateObject();
    };
    d = Entry.createElement("div");
    d.addClass("entryObjectRotateLabelWrapperWorkspace");
    this.view_.appendChild(d);
    this.rotateLabelWrapperView_ = d;
    e = Entry.createElement("span");
    e.addClass("entryObjectRotateSpanWorkspace");
    e.innerHTML = Lang.Workspace.rotation + " : ";
    var m = Entry.createElement("input");
    m.addClass("entryObjectRotateInputWorkspace");
    m.setAttribute("readonly", !0);
    m.bindOnClick(function(b) {
      b.stopPropagation();
      this.select();
    });
    this.rotateSpan_ = e;
    this.rotateInput_ = m;
    h = Entry.createElement("span");
    h.addClass("entryObjectDirectionSpanWorkspace");
    h.innerHTML = Lang.Workspace.direction + " : ";
    var t = Entry.createElement("input");
    t.addClass("entryObjectDirectionInputWorkspace");
    t.setAttribute("readonly", !0);
    t.bindOnClick(function(b) {
      b.stopPropagation();
      this.select();
    });
    this.directionInput_ = t;
    d.appendChild(e);
    d.appendChild(m);
    d.appendChild(h);
    d.appendChild(t);
    d.rotateInput_ = m;
    d.directionInput_ = t;
    c = this;
    m.onkeypress = function(b) {
      13 == b.keyCode && c.editObjectValues(!1);
    };
    m.onblur = function(b) {
      b = m.value;
      -1 != b.indexOf("\u02da") && (b = b.substring(0, b.indexOf("\u02da")));
      isNaN(b) || c.entity.setRotation(Number(b));
      c.updateRotationView();
      Entry.stage.updateObject();
    };
    t.onkeypress = function(b) {
      13 == b.keyCode && c.editObjectValues(!1);
    };
    t.onblur = function(b) {
      b = t.value;
      -1 != b.indexOf("\u02da") && (b = b.substring(0, b.indexOf("\u02da")));
      isNaN(b) || c.entity.setDirection(Number(b));
      c.updateRotationView();
      Entry.stage.updateObject();
    };
    d = Entry.createElement("div");
    d.addClass("rotationMethodWrapper");
    a.appendChild(d);
    this.rotationMethodWrapper_ = d;
    a = Entry.createElement("span");
    a.addClass("entryObjectRotateMethodLabelWorkspace");
    d.appendChild(a);
    a.innerHTML = Lang.Workspace.rotate_method + " : ";
    a = Entry.createElement("div");
    a.addClass("entryObjectRotateModeWorkspace entryObjectRotateModeAWorkspace");
    a.object = this;
    this.rotateModeAView_ = a;
    d.appendChild(a);
    a.bindOnClick(function(b) {
      Entry.engine.isState("run") || this.object.getLock() || (this.object.initRotateValue("free"), this.object.setRotateMethod("free"));
    });
    a = Entry.createElement("div");
    a.addClass("entryObjectRotateModeWorkspace entryObjectRotateModeBWorkspace");
    a.object = this;
    this.rotateModeBView_ = a;
    d.appendChild(a);
    a.bindOnClick(function(b) {
      Entry.engine.isState("run") || this.object.getLock() || (this.object.initRotateValue("vertical"), this.object.setRotateMethod("vertical"));
    });
    a = Entry.createElement("div");
    a.addClass("entryObjectRotateModeWorkspace entryObjectRotateModeCWorkspace");
    a.object = this;
    this.rotateModeCView_ = a;
    d.appendChild(a);
    a.bindOnClick(function(b) {
      Entry.engine.isState("run") || this.object.getLock() || (this.object.initRotateValue("none"), this.object.setRotateMethod("none"));
    });
    this.updateThumbnailView();
    this.updateCoordinateView();
    this.updateRotateMethodView();
    this.updateInputViews();
    this.updateCoordinateView(!0);
    this.updateRotationView(!0);
    return this.view_;
  }
  if ("phone" == Entry.type) {
    return a = Entry.createElement("li", this.id), a.addClass("entryContainerListElementWorkspace"), a.object = this, a.bindOnClick(function(b) {
      Entry.container.getObject(this.id) && Entry.container.selectObject(this.id);
    }), $ && (b = this, context.attach("#" + this.id, [{text:Lang.Workspace.context_rename, href:"/", action:function(b) {
      b.preventDefault();
    }}, {text:Lang.Workspace.context_duplicate, href:"/", action:function(a) {
      a.preventDefault();
      Entry.container.addCloneObject(b);
    }}, {text:Lang.Workspace.context_remove, href:"/", action:function(a) {
      a.preventDefault();
      Entry.container.removeObject(b);
    }}])), this.view_ = a, a = Entry.createElement("ul"), a.addClass("objectInfoView"), d = Entry.createElement("li"), d.addClass("objectInfo_visible"), e = Entry.createElement("li"), e.addClass("objectInfo_lock"), a.appendChild(d), a.appendChild(e), this.view_.appendChild(a), a = Entry.createElement("div"), a.addClass("entryObjectThumbnailWorkspace"), this.view_.appendChild(a), this.thumbnailView_ = a, a = Entry.createElement("div"), a.addClass("entryObjectWrapperWorkspace"), this.view_.appendChild(a), 
    d = Entry.createElement("input"), d.addClass("entryObjectNameWorkspace"), a.appendChild(d), this.nameView_ = d, this.nameView_.entryObject = this, this.nameView_.onblur = function() {
      this.entryObject.name = this.value;
      Entry.playground.reloadPlayground();
    }, this.nameView_.onkeypress = function(b) {
      13 == b.keyCode && c.editObjectValues(!1);
    }, this.nameView_.value = this.name, Entry.objectEditable && Entry.objectDeletable && (d = Entry.createElement("div"), d.addClass("entryObjectDeletePhone"), d.object = this, this.deleteView_ = d, this.view_.appendChild(d), d.bindOnClick(function(b) {
      Entry.engine.isState("run") || Entry.container.removeObject(this.object);
    })), d = Entry.createElement("button"), d.addClass("entryObjectEditPhone"), d.object = this, d.bindOnClick(function(b) {
      if (b = Entry.container.getObject(this.id)) {
        Entry.container.selectObject(b.id), Entry.playground.injectObject(b);
      }
    }), this.view_.appendChild(d), d = Entry.createElement("div"), d.addClass("entryObjectInformationWorkspace"), d.object = this, this.isInformationToggle = !1, a.appendChild(d), this.informationView_ = d, d = Entry.createElement("div"), d.addClass("entryObjectRotateLabelWrapperWorkspace"), this.view_.appendChild(d), this.rotateLabelWrapperView_ = d, e = Entry.createElement("span"), e.addClass("entryObjectRotateSpanWorkspace"), e.innerHTML = Lang.Workspace.rotation + " : ", m = Entry.createElement("input"), 
    m.addClass("entryObjectRotateInputWorkspace"), this.rotateSpan_ = e, this.rotateInput_ = m, h = Entry.createElement("span"), h.addClass("entryObjectDirectionSpanWorkspace"), h.innerHTML = Lang.Workspace.direction + " : ", t = Entry.createElement("input"), t.addClass("entryObjectDirectionInputWorkspace"), this.directionInput_ = t, d.appendChild(e), d.appendChild(m), d.appendChild(h), d.appendChild(t), d.rotateInput_ = m, d.directionInput_ = t, c = this, m.onkeypress = function(b) {
      13 == b.keyCode && (b = m.value, -1 != b.indexOf("\u02da") && (b = b.substring(0, b.indexOf("\u02da"))), isNaN(b) || c.entity.setRotation(Number(b)), c.updateRotationView(), m.blur());
    }, m.onblur = function(b) {
      c.entity.setRotation(c.entity.getRotation());
      Entry.stage.updateObject();
    }, t.onkeypress = function(b) {
      13 == b.keyCode && (b = t.value, -1 != b.indexOf("\u02da") && (b = b.substring(0, b.indexOf("\u02da"))), isNaN(b) || c.entity.setDirection(Number(b)), c.updateRotationView(), t.blur());
    }, t.onblur = function(b) {
      c.entity.setDirection(c.entity.getDirection());
      Entry.stage.updateObject();
    }, a = Entry.createElement("div"), a.addClass("entryObjectRotationWrapperWorkspace"), a.object = this, this.view_.appendChild(a), d = Entry.createElement("span"), d.addClass("entryObjectCoordinateWorkspace"), a.appendChild(d), e = Entry.createElement("span"), e.addClass("entryObjectCoordinateSpanWorkspace"), e.innerHTML = "X:", g = Entry.createElement("input"), g.addClass("entryObjectCoordinateInputWorkspace"), h = Entry.createElement("span"), h.addClass("entryObjectCoordinateSpanWorkspace"), 
    h.innerHTML = "Y:", k = Entry.createElement("input"), k.addClass("entryObjectCoordinateInputWorkspace entryObjectCoordinateInputWorkspace_right"), l = Entry.createElement("span"), l.addClass("entryObjectCoordinateSpanWorkspace"), l.innerHTML = Lang.Workspace.Size, n = Entry.createElement("input"), n.addClass("entryObjectCoordinateInputWorkspace", "entryObjectCoordinateInputWorkspace_size"), d.appendChild(e), d.appendChild(g), d.appendChild(h), d.appendChild(k), d.appendChild(l), d.appendChild(n), 
    d.xInput_ = g, d.yInput_ = k, d.sizeInput_ = n, this.coordinateView_ = d, c = this, g.onkeypress = function(b) {
      13 == b.keyCode && (isNaN(g.value) || c.entity.setX(Number(g.value)), c.updateCoordinateView(), c.blur());
    }, g.onblur = function(b) {
      c.entity.setX(c.entity.getX());
      Entry.stage.updateObject();
    }, k.onkeypress = function(b) {
      13 == b.keyCode && (isNaN(k.value) || c.entity.setY(Number(k.value)), c.updateCoordinateView(), c.blur());
    }, k.onblur = function(b) {
      c.entity.setY(c.entity.getY());
      Entry.stage.updateObject();
    }, d = Entry.createElement("div"), d.addClass("rotationMethodWrapper"), a.appendChild(d), this.rotationMethodWrapper_ = d, a = Entry.createElement("span"), a.addClass("entryObjectRotateMethodLabelWorkspace"), d.appendChild(a), a.innerHTML = Lang.Workspace.rotate_method + " : ", a = Entry.createElement("div"), a.addClass("entryObjectRotateModeWorkspace"), a.addClass("entryObjectRotateModeAWorkspace"), a.object = this, this.rotateModeAView_ = a, d.appendChild(a), a.bindOnClick(function(b) {
      Entry.engine.isState("run") || this.object.setRotateMethod("free");
    }), a = Entry.createElement("div"), a.addClass("entryObjectRotateModeWorkspace"), a.addClass("entryObjectRotateModeBWorkspace"), a.object = this, this.rotateModeBView_ = a, d.appendChild(a), a.bindOnClick(function(b) {
      Entry.engine.isState("run") || this.object.setRotateMethod("vertical");
    }), a = Entry.createElement("div"), a.addClass("entryObjectRotateModeWorkspace"), a.addClass("entryObjectRotateModeCWorkspace"), a.object = this, this.rotateModeCView_ = a, d.appendChild(a), a.bindOnClick(function(b) {
      Entry.engine.isState("run") || this.object.setRotateMethod("none");
    }), this.updateThumbnailView(), this.updateCoordinateView(), this.updateRotateMethodView(), this.updateInputViews(), this.view_;
  }
};
Entry.EntryObject.prototype.setName = function(a) {
  Entry.assert("string" == typeof a, "object name must be string");
  this.name = a;
  this.nameView_.value = a;
};
Entry.EntryObject.prototype.setText = function(a) {
  Entry.assert("string" == typeof a, "object text must be string");
  this.text = a;
};
Entry.EntryObject.prototype.setScript = function(a) {
  this.script = a;
};
Entry.EntryObject.prototype.getScriptText = function() {
  return JSON.stringify(this.script.toJSON());
};
Entry.EntryObject.prototype.initEntity = function(a) {
  var b = {};
  b.x = b.y = 0;
  b.rotation = 0;
  b.direction = 90;
  if ("sprite" == this.objectType) {
    var c = a.sprite.pictures[0].dimension;
    b.regX = c.width / 2;
    b.regY = c.height / 2;
    b.scaleX = b.scaleY = "background" == a.sprite.category.main || "new" == a.sprite.category.main ? Math.max(270 / c.height, 480 / c.width) : "new" == a.sprite.category.main ? 1 : 200 / (c.width + c.height);
    b.width = c.width;
    b.height = c.height;
  } else {
    if ("textBox" == this.objectType) {
      if (b.regX = 25, b.regY = 12, b.scaleX = b.scaleY = 1.5, b.width = 50, b.height = 24, b.text = a.text, a.options) {
        if (a = a.options, c = "", a.bold && (c += "bold "), a.italic && (c += "italic "), b.underline = a.underline, b.strike = a.strike, b.font = c + "20px " + a.font.family, b.colour = a.colour, b.bgColor = a.background, b.lineBreak = a.lineBreak) {
          b.width = 256, b.height = .5625 * b.width, b.regX = b.width / 2, b.regY = b.height / 2;
        }
      } else {
        b.underline = !1, b.strike = !1, b.font = "20px Nanum Gothic", b.colour = "#000000", b.bgColor = "#ffffff";
      }
    }
  }
  return b;
};
Entry.EntryObject.prototype.updateThumbnailView = function() {
  if ("sprite" == this.objectType) {
    if (this.entity.picture.fileurl) {
      this.thumbnailView_.style.backgroundImage = 'url("' + this.entity.picture.fileurl + '")';
    } else {
      var a = this.entity.picture.filename;
      this.thumbnailView_.style.backgroundImage = 'url("' + Entry.defaultPath + "/uploads/" + a.substring(0, 2) + "/" + a.substring(2, 4) + "/thumb/" + a + '.png")';
    }
  } else {
    "textBox" == this.objectType && (this.thumbnailView_.style.backgroundImage = "url(" + (Entry.mediaFilePath + "/text_icon.png") + ")");
  }
};
Entry.EntryObject.prototype.updateCoordinateView = function(a) {
  if ((this.isSelected() || a) && this.coordinateView_ && this.coordinateView_.xInput_ && this.coordinateView_.yInput_) {
    a = this.coordinateView_.xInput_.value;
    var b = this.coordinateView_.yInput_.value, c = this.coordinateView_.sizeInput_.value, d = this.entity.getX().toFixed(1), e = this.entity.getY().toFixed(1), f = this.entity.getSize().toFixed(1);
    a != d && (this.coordinateView_.xInput_.value = d);
    b != e && (this.coordinateView_.yInput_.value = e);
    c != f && (this.coordinateView_.sizeInput_.value = f);
  }
};
Entry.EntryObject.prototype.updateRotationView = function(a) {
  if (this.isSelected() && this.view_ || a) {
    a = "", "free" == this.getRotateMethod() ? (this.rotateSpan_.removeClass("entryRemove"), this.rotateInput_.removeClass("entryRemove"), a += this.entity.getRotation().toFixed(1), this.rotateInput_.value = a + "\u02da") : (this.rotateSpan_.addClass("entryRemove"), this.rotateInput_.addClass("entryRemove")), a = "" + this.entity.getDirection().toFixed(1), this.directionInput_.value = a + "\u02da";
  }
};
Entry.EntryObject.prototype.select = function(a) {
  console.log(this);
};
Entry.EntryObject.prototype.addPicture = function(a, b) {
  Entry.stateManager && Entry.stateManager.addCommand("add sprite", this, this.removePicture, a.id);
  a.objectId = this.id;
  b || 0 === b ? (this.pictures.splice(b, 0, a), Entry.playground.injectPicture(this)) : this.pictures.push(a);
  return new Entry.State(this, this.removePicture, a.id);
};
Entry.EntryObject.prototype.removePicture = function(a) {
  if (2 > this.pictures.length) {
    return !1;
  }
  a = this.getPicture(a);
  var b = this.pictures.indexOf(a);
  Entry.stateManager && Entry.stateManager.addCommand("remove sprite", this, this.addPicture, a, b);
  this.pictures.splice(b, 1);
  a === this.selectedPicture && Entry.playground.selectPicture(this.pictures[0]);
  Entry.playground.injectPicture(this);
  Entry.playground.reloadPlayground();
  return new Entry.State(this, this.addPicture, a, b);
};
Entry.EntryObject.prototype.getPicture = function(a) {
  if (!a) {
    return this.selectedPicture;
  }
  a = a.trim();
  for (var b = this.pictures, c = b.length, d = 0;d < c;d++) {
    if (b[d].id == a) {
      return b[d];
    }
  }
  for (d = 0;d < c;d++) {
    if (b[d].name == a) {
      return b[d];
    }
  }
  a = Entry.parseNumber(a);
  if ((!1 !== a || "boolean" != typeof a) && c >= a && 0 < a) {
    return b[a - 1];
  }
  throw Error("No picture found");
};
Entry.EntryObject.prototype.setPicture = function(a) {
  for (var b in this.pictures) {
    if (a.id === this.pictures[b].id) {
      this.pictures[b] = a;
      return;
    }
  }
  throw Error("No picture found");
};
Entry.EntryObject.prototype.getPrevPicture = function(a) {
  for (var b = this.pictures, c = b.length, d = 0;d < c;d++) {
    if (b[d].id == a) {
      return b[0 == d ? c - 1 : d - 1];
    }
  }
};
Entry.EntryObject.prototype.getNextPicture = function(a) {
  for (var b = this.pictures, c = b.length, d = 0;d < c;d++) {
    if (b[d].id == a) {
      return b[d == c - 1 ? 0 : d + 1];
    }
  }
};
Entry.EntryObject.prototype.selectPicture = function(a) {
  var b = this.getPicture(a);
  if (b) {
    this.selectedPicture = b, this.entity.setImage(b), this.updateThumbnailView();
  } else {
    throw Error("No picture with pictureId : " + a);
  }
};
Entry.EntryObject.prototype.addSound = function(a, b) {
  a.id || (a.id = Entry.generateHash());
  Entry.stateManager && Entry.stateManager.addCommand("add sound", this, this.removeSound, a.id);
  Entry.initSound(a, b);
  b || 0 === b ? (this.sounds.splice(b, 0, a), Entry.playground.injectSound(this)) : this.sounds.push(a);
  return new Entry.State(this, this.removeSound, a.id);
};
Entry.EntryObject.prototype.removeSound = function(a) {
  var b;
  b = this.getSound(a);
  a = this.sounds.indexOf(b);
  Entry.stateManager && Entry.stateManager.addCommand("remove sound", this, this.addSound, b, a);
  this.sounds.splice(a, 1);
  Entry.playground.reloadPlayground();
  Entry.playground.injectSound(this);
  return new Entry.State(this, this.addSound, b, a);
};
Entry.EntryObject.prototype.getRotateMethod = function() {
  this.rotateMethod || (this.rotateMethod = "free");
  return this.rotateMethod;
};
Entry.EntryObject.prototype.setRotateMethod = function(a) {
  a || (a = "free");
  this.rotateMethod = a;
  this.updateRotateMethodView();
  Entry.stage.selectedObject && Entry.stage.selectedObject.entity && (Entry.stage.updateObject(), Entry.stage.updateHandle());
};
Entry.EntryObject.prototype.initRotateValue = function(a) {
  this.rotateMethod != a && (a = this.entity, a.rotation = 0, a.direction = 90, a.flip = !1);
};
Entry.EntryObject.prototype.updateRotateMethodView = function() {
  var a = this.rotateMethod;
  this.rotateModeAView_ && (this.rotateModeAView_.removeClass("selected"), this.rotateModeBView_.removeClass("selected"), this.rotateModeCView_.removeClass("selected"), "free" == a ? this.rotateModeAView_.addClass("selected") : "vertical" == a ? this.rotateModeBView_.addClass("selected") : this.rotateModeCView_.addClass("selected"), this.updateRotationView());
};
Entry.EntryObject.prototype.toggleInformation = function(a) {
  this.setRotateMethod(this.getRotateMethod());
  void 0 === a && (a = this.isInformationToggle = !this.isInformationToggle);
  a ? this.view_.addClass("informationToggle") : this.view_.removeClass("informationToggle");
};
Entry.EntryObject.prototype.addCloneEntity = function(a, b, c) {
  this.clonedEntities.length > Entry.maxCloneLimit || (a = new Entry.EntityObject(this), b ? (a.injectModel(b.picture ? b.picture : null, b.toJSON()), a.snapshot_ = b.snapshot_, b.effect && (a.effect = Entry.cloneSimpleObject(b.effect), a.applyFilter()), b.brush && Entry.setCloneBrush(a, b.brush)) : (a.injectModel(this.entity.picture ? this.entity.picture : null, this.entity.toJSON(a)), a.snapshot_ = this.entity.snapshot_, this.entity.effect && (a.effect = Entry.cloneSimpleObject(this.entity.effect), 
  a.applyFilter()), this.entity.brush && Entry.setCloneBrush(a, this.entity.brush)), Entry.engine.raiseEventOnEntity(a, [a, "when_clone_start"]), a.isClone = !0, a.isStarted = !0, this.addCloneVariables(this, a, b ? b.variables : null, b ? b.lists : null), this.clonedEntities.push(a), Entry.stage.loadEntity(a));
};
Entry.EntryObject.prototype.initializeSplitter = function(a) {
  a.onmousedown = function(b) {
    Entry.container.disableSort();
    Entry.container.splitterEnable = !0;
  };
  document.addEventListener("mousemove", function(b) {
    Entry.container.splitterEnable && Entry.resizeElement({canvasWidth:b.x || b.clientX});
  });
  document.addEventListener("mouseup", function(b) {
    Entry.container.splitterEnable = !1;
    Entry.container.enableSort();
  });
};
Entry.EntryObject.prototype.isSelected = function() {
  return this.isSelected_;
};
Entry.EntryObject.prototype.toJSON = function() {
  var a = {};
  a.id = this.id;
  a.name = this.name;
  "textBox" == this.objectType && (a.text = this.text);
  a.script = this.getScriptText();
  "sprite" == this.objectType && (a.selectedPictureId = this.selectedPicture.id);
  a.objectType = this.objectType;
  a.rotateMethod = this.getRotateMethod();
  a.scene = this.scene.id;
  a.sprite = {pictures:Entry.getPicturesJSON(this.pictures), sounds:Entry.getSoundsJSON(this.sounds)};
  a.lock = this.lock;
  a.entity = this.entity.toJSON();
  return a;
};
Entry.EntryObject.prototype.destroy = function() {
  Entry.stage.unloadEntity(this.entity);
  this.view_ && Entry.removeElement(this.view_);
};
Entry.EntryObject.prototype.getSound = function(a) {
  a = a.trim();
  for (var b = this.sounds, c = b.length, d = 0;d < c;d++) {
    if (b[d].id == a) {
      return b[d];
    }
  }
  for (d = 0;d < c;d++) {
    if (b[d].name == a) {
      return b[d];
    }
  }
  a = Entry.parseNumber(a);
  if ((!1 !== a || "boolean" != typeof a) && c >= a && 0 < a) {
    return b[a - 1];
  }
  throw Error("No Sound");
};
Entry.EntryObject.prototype.addCloneVariables = function(a, b, c, d) {
  b.variables = [];
  b.lists = [];
  c || (c = Entry.findObjsByKey(Entry.variableContainer.variables_, "object_", a.id));
  d || (d = Entry.findObjsByKey(Entry.variableContainer.lists_, "object_", a.id));
  for (a = 0;a < c.length;a++) {
    b.variables.push(c[a].clone());
  }
  for (a = 0;a < d.length;a++) {
    b.lists.push(d[a].clone());
  }
};
Entry.EntryObject.prototype.getLock = function() {
  return this.lock;
};
Entry.EntryObject.prototype.setLock = function(a) {
  this.lock = a;
  Entry.stage.updateObject();
  return a;
};
Entry.EntryObject.prototype.updateInputViews = function(a) {
  a = a || this.getLock();
  var b = [this.nameView_, this.coordinateView_.xInput_, this.coordinateView_.yInput_, this.rotateInput_, this.directionInput_, this.coordinateView_.sizeInput_];
  if (a && 1 != b[0].getAttribute("readonly")) {
    for (a = 0;a < b.length;a++) {
      b[a].removeClass("selectedEditingObject"), b[a].setAttribute("readonly", !1), this.isEditing = !1;
    }
  }
};
Entry.EntryObject.prototype.editObjectValues = function(a) {
  var b;
  b = this.getLock() ? [this.nameView_] : [this.coordinateView_.xInput_, this.coordinateView_.yInput_, this.rotateInput_, this.directionInput_, this.coordinateView_.sizeInput_];
  if (a) {
    var c = this.nameView_;
    $(b).removeClass("selectedNotEditingObject");
    $(c).removeClass("selectedNotEditingObject");
    window.setTimeout(function() {
      $(c).removeAttr("readonly");
      c.addClass("selectedEditingObject");
    });
    for (a = 0;a < b.length;a++) {
      $(b[a]).removeAttr("readonly"), b[a].addClass("selectedEditingObject");
    }
    this.isEditing = !0;
  } else {
    for (a = 0;a < b.length;a++) {
      b[a].blur(!0);
    }
    this.nameView_.blur(!0);
    this.blurAllInput();
    this.isEditing = !1;
  }
};
Entry.EntryObject.prototype.blurAllInput = function() {
  var a;
  document.getElementsByClassName("");
  $(".selectedEditingObject").removeClass("selectedEditingObject");
  a = [this.nameView_, this.coordinateView_.xInput_, this.coordinateView_.yInput_, this.rotateInput_, this.directionInput_, this.coordinateView_.sizeInput_];
  for (var b = 0;b < a.length;b++) {
    var c = a[b];
    c.addClass("selectedNotEditingObject");
    c.setAttribute("readonly", !0);
  }
};
Entry.EntryObject.prototype.addStampEntity = function(a) {
  a = new Entry.StampEntity(this, a);
  Entry.stage.loadEntity(a);
  this.clonedEntities.push(a);
  Entry.stage.sortZorder();
};
Entry.EntryObject.prototype.getClonedEntities = function() {
  var a = [];
  this.clonedEntities.map(function(b) {
    b.isStamp || a.push(b);
  });
  return a;
};
Entry.EntryObject.prototype.getStampEntities = function() {
  var a = [];
  this.clonedEntities.map(function(b) {
    b.isStamp && a.push(b);
  });
  return a;
};
Entry.EntryObject.prototype.clearExecutor = function() {
  this.script.clearExecutors();
  for (var a = this.clonedEntities.length;0 < a;a--) {
    this.clonedEntities[a - 1].removeClone();
  }
  this.clonedEntities = [];
};
Entry.EntryObject.prototype._rightClick = function(a) {
  var b = this, c = [{text:Lang.Workspace.context_rename, callback:function(a) {
    a.stopPropagation();
    b.setLock(!1);
    b.editObjectValues(!0);
    b.nameView_.select();
  }}, {text:Lang.Workspace.context_duplicate, enable:!Entry.engine.isState("run"), callback:function() {
    Entry.container.addCloneObject(b);
  }}, {text:Lang.Workspace.context_remove, callback:function() {
    Entry.container.removeObject(b);
  }}, {text:Lang.Workspace.copy_file, callback:function() {
    Entry.container.setCopiedObject(b);
  }}, {text:Lang.Blocks.Paste_blocks, enable:!Entry.engine.isState("run") && !!Entry.container.copiedObject, callback:function() {
    Entry.container.copiedObject ? Entry.container.addCloneObject(Entry.container.copiedObject) : Entry.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.object_not_found_for_paste);
  }}];
  a = Entry.Utils.convertMouseEvent(a);
  Entry.ContextMenu.show(c, "workspace-contextmenu", {x:a.clientX, y:a.clientY});
};
Entry.Painter = function() {
  this.toolbox = {selected:"cursor"};
  this.stroke = {enabled:!1, fillColor:"#000000", lineColor:"#000000", thickness:1, fill:!0, transparent:!1, style:"line", locked:!1};
  this.file = {id:Entry.generateHash(), name:"\uc0c8\uadf8\ub9bc", modified:!1, mode:"new"};
  this.font = {name:"KoPub Batang", size:20, style:"normal"};
  this.selectArea = {};
  this.firstStatement = !1;
};
Entry.Painter.prototype.initialize = function(a) {
  this.generateView(a);
  this.canvas = document.getElementById("entryPainterCanvas");
  this.canvas_ = document.getElementById("entryPainterCanvas_");
  this.stage = new createjs.Stage(this.canvas);
  this.stage.autoClear = !0;
  this.stage.enableDOMEvents(!0);
  this.stage.enableMouseOver(10);
  this.stage.mouseMoveOutside = !0;
  createjs.Touch.enable(this.stage);
  this.objectContainer = new createjs.Container;
  this.objectContainer.name = "container";
  this.stage.addChild(this.objectContainer);
  this.ctx = this.stage.canvas.getContext("2d");
  this.ctx.imageSmoothingEnabled = !1;
  this.ctx.webkitImageSmoothingEnabled = !1;
  this.ctx.mozImageSmoothingEnabled = !1;
  this.ctx.msImageSmoothingEnabled = !1;
  this.ctx.oImageSmoothingEnabled = !1;
  this.ctx_ = this.canvas_.getContext("2d");
  this.initDashedLine();
  this.initPicture();
  this.initCoordinator();
  this.initHandle();
  this.initDraw();
  var b = this;
  Entry.addEventListener("textUpdate", function() {
    var a = b.inputField.value();
    "" === a ? (b.inputField.hide(), delete b.inputField) : (b.inputField.hide(), b.drawText(a), b.selectToolbox("cursor"));
  });
  this.selectToolbox("cursor");
};
Entry.Painter.prototype.initHandle = function() {
  this._handle = new createjs.Container;
  this._handle.rect = new createjs.Shape;
  this._handle.addChild(this._handle.rect);
  var a = new createjs.Container;
  a.name = "move";
  a.width = 90;
  a.height = 90;
  a.x = 90;
  a.y = 90;
  a.rect = new createjs.Shape;
  var b = this;
  a.rect.on("mousedown", function(c) {
    "cursor" === b.toolbox.selected && (b.initCommand(), this.offset = {x:this.parent.x - this.x - c.stageX, y:this.parent.y - this.y - c.stageY}, this.parent.handleMode = "move", a.isSelectCenter = !1);
  });
  a.rect.on("pressmove", function(c) {
    "cursor" !== b.toolbox.selected || a.isSelectCenter || (b.doCommand(), this.parent.x = c.stageX + this.offset.x, this.parent.y = c.stageY + this.offset.y, b.updateImageHandle());
  });
  a.on("mouseup", function(a) {
    b.checkCommand();
  });
  a.rect.cursor = "move";
  a.addChild(a.rect);
  a.notch = new createjs.Shape;
  a.addChild(a.notch);
  a.NEHandle = this.generateCornerHandle();
  a.addChild(a.NEHandle);
  a.NWHandle = this.generateCornerHandle();
  a.addChild(a.NWHandle);
  a.SWHandle = this.generateCornerHandle();
  a.addChild(a.SWHandle);
  a.SEHandle = this.generateCornerHandle();
  a.addChild(a.SEHandle);
  a.EHandle = this.generateXHandle();
  a.addChild(a.EHandle);
  a.WHandle = this.generateXHandle();
  a.addChild(a.WHandle);
  a.NHandle = this.generateYHandle();
  a.addChild(a.NHandle);
  a.SHandle = this.generateYHandle();
  a.addChild(a.SHandle);
  a.RHandle = new createjs.Shape;
  a.RHandle.graphics.ss(2, 2, 0).beginFill("#888").s("#c1c7cd").f("#c1c7cd").dr(-2, -2, 8, 8);
  a.RHandle.on("mousedown", function(a) {
    b.initCommand();
  });
  a.RHandle.on("pressmove", function(a) {
    b.doCommand();
    var c = a.stageX - this.parent.x;
    a = a.stageY - this.parent.y;
    this.parent.rotation = 0 <= c ? Math.atan(a / c) / Math.PI * 180 + 90 : Math.atan(a / c) / Math.PI * 180 + 270;
    b.updateImageHandle();
  });
  a.RHandle.cursor = "crosshair";
  a.addChild(a.RHandle);
  a.on("mouseup", function(a) {
    b.checkCommand();
  });
  a.visible = !1;
  this.handle = a;
  this.stage.addChild(a);
  this.updateImageHandleCursor();
};
Entry.Painter.prototype.generateCornerHandle = function() {
  var a = this, b = new createjs.Shape;
  b.graphics.beginFill("#c1c7cd").ss(2, 2, 0).s("#c1c7cd").dr(-4, -4, 8, 8);
  b.on("mousedown", function(b) {
    a.initCommand();
    this.offset = {x:b.stageX - this.parent.x + this.parent.regX, y:b.stageY - this.parent.y + this.parent.regY};
  });
  b.on("pressmove", function(b) {
    a.doCommand();
    var c = Math.sqrt(Math.abs((b.stageX - this.parent.x + this.parent.regX) / this.offset.x * (b.stageY - this.parent.y + this.parent.regY) / this.offset.y));
    10 < this.parent.width * c && 10 < this.parent.height * c && (this.parent.width *= c, this.parent.height *= c, this.offset = {x:b.stageX - this.parent.x + this.parent.regX, y:b.stageY - this.parent.y + this.parent.regY});
    a.updateImageHandle();
  });
  b.on("mouseup", function(b) {
    a.checkCommand();
  });
  return b;
};
Entry.Painter.prototype.generateXHandle = function() {
  var a = this, b = new createjs.Shape;
  b.graphics.beginFill("#c1c7cd").ss(2, 2, 0).s("#c1c7cd").dr(-4, -4, 8, 8);
  b.on("mousedown", function(b) {
    a.initCommand();
    this.offset = {x:b.stageX - this.parent.x + this.parent.regX};
  });
  b.on("pressmove", function(b) {
    a.doCommand();
    var c = Math.abs((b.stageX - this.parent.x + this.parent.regX) / this.offset.x);
    10 < this.parent.width * c && (this.parent.width *= c, this.offset = {x:b.stageX - this.parent.x + this.parent.regX});
    a.updateImageHandle();
  });
  b.on("mouseup", function(b) {
    a.checkCommand();
  });
  return b;
};
Entry.Painter.prototype.generateYHandle = function() {
  var a = this, b = new createjs.Shape;
  b.graphics.beginFill("#c1c7cd").ss(2, 2, 0).s("#c1c7cd").dr(-4, -4, 8, 8);
  b.on("mousedown", function(b) {
    a.initCommand();
    this.offset = {y:b.stageY - this.parent.y + this.parent.regY};
  });
  b.on("pressmove", function(b) {
    a.doCommand();
    var c = Math.abs((b.stageY - this.parent.y + this.parent.regY) / this.offset.y);
    10 < this.parent.height * c && (this.parent.height *= c, this.offset = {y:b.stageY - this.parent.y + this.parent.regY});
    a.updateImageHandle();
  });
  b.on("mouseup", function(b) {
    a.checkCommand();
  });
  return b;
};
Entry.Painter.prototype.updateImageHandle = function() {
  if (this.handle.visible) {
    var a = this.handle, b = a.direction, c = a.width, d = a.height, e = a.regX, f = a.regY;
    a.rect.graphics.clear().f("rgba(0,0,1,0.01)").ss(2, 2, 0).s("#c1c7cd").lt(-c / 2, -d / 2).lt(0, -d / 2).lt(0, -d / 2).lt(+c / 2, -d / 2).lt(+c / 2, +d / 2).lt(-c / 2, +d / 2).cp();
    a.notch.graphics.clear().f("rgba(0,0,1,0.01)").ss(2, 2, 0).s("#c1c7cd").lt(0, -d / 2).lt(0, -d / 2 - 20).cp();
    a.NEHandle.x = +a.width / 2;
    a.NEHandle.y = -a.height / 2;
    a.NWHandle.x = -a.width / 2;
    a.NWHandle.y = -a.height / 2;
    a.SWHandle.x = -a.width / 2;
    a.SWHandle.y = +a.height / 2;
    a.SEHandle.x = +a.width / 2;
    a.SEHandle.y = +a.height / 2;
    a.EHandle.x = +a.width / 2;
    a.EHandle.y = 0;
    a.WHandle.x = -a.width / 2;
    a.WHandle.y = 0;
    a.NHandle.x = 0;
    a.NHandle.y = -a.height / 2;
    a.SHandle.x = 0;
    a.SHandle.y = +a.height / 2;
    a.RHandle.x = -2;
    a.RHandle.y = -a.height / 2 - 20 - 2;
    this.handle.visible && (c = this.selectedObject, this.selectedObject.text ? (c.width = this.selectedObject.width, c.height = this.selectedObject.height) : (c.width = c.image.width, c.height = c.image.height), c.scaleX = a.width / c.width, c.scaleY = a.height / c.height, c.x = a.x, c.y = a.y, c.regX = c.width / 2 + e / c.scaleX, c.regY = c.height / 2 + f / c.scaleY, c.rotation = a.rotation, c.direction = b, this.selectArea.x1 = a.x - a.width / 2, this.selectArea.y1 = a.y - a.height / 2, this.selectArea.x2 = 
    a.width, this.selectArea.y2 = a.height, this.objectWidthInput.value = Math.abs(c.width * c.scaleX).toFixed(0), this.objectHeightInput.value = Math.abs(c.height * c.scaleY).toFixed(0), this.objectRotateInput.value = (1 * c.rotation).toFixed(0));
    this.updateImageHandleCursor();
    this.stage.update();
  }
};
Entry.Painter.prototype.updateImageHandleCursor = function() {
  var a = this.handle;
  a.rect.cursor = "move";
  a.RHandle.cursor = "crosshair";
  for (var b = ["nwse-resize", "ns-resize", "nesw-resize", "ew-resize"], c = Math.floor((a.rotation + 22.5) % 180 / 45), d = 0;d < c;d++) {
    b.push(b.shift());
  }
  a.NHandle.cursor = b[1];
  a.NEHandle.cursor = b[2];
  a.EHandle.cursor = b[3];
  a.SEHandle.cursor = b[0];
  a.SHandle.cursor = b[1];
  a.SWHandle.cursor = b[2];
  a.WHandle.cursor = b[3];
  a.NWHandle.cursor = b[0];
};
Entry.Painter.prototype.clearCanvas = function(a) {
  this.clearHandle();
  a || this.initCommand();
  this.objectContainer.removeAllChildren();
  this.stage.update();
  this.colorLayerData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
  a = 0;
  for (var b = this.colorLayerData.data.length;a < b;a++) {
    this.colorLayerData.data[a] = 255, this.colorLayerData.data[a + 1] = 255, this.colorLayerData.data[a + 2] = 255, this.colorLayerData.data[a + 3] = 255;
  }
  this.reloadContext();
};
Entry.Painter.prototype.newPicture = function() {
  var a = {dimension:{height:1, width:1}, fileurl:Entry.mediaFilePath + "_1x1.png", name:Lang.Workspace.new_picture};
  a.id = Entry.generateHash();
  Entry.playground.addPicture(a, !0);
};
Entry.Painter.prototype.initPicture = function() {
  var a = this;
  Entry.addEventListener("pictureSelected", function(b) {
    a.selectToolbox("cursor");
    if (a.file.id !== b.id) {
      a.file.modified && confirm("\uc218\uc815\ub41c \ub0b4\uc6a9\uc744 \uc800\uc7a5\ud558\uc2dc\uaca0\uc2b5\ub2c8\uae4c?") && (a.file_ = JSON.parse(JSON.stringify(a.file)), a.file_save(!0));
      a.file.modified = !1;
      a.clearCanvas(!0);
      var c = new Image;
      c.id = b.id ? b.id : Entry.generateHash();
      a.file.id = c.id;
      a.file.name = b.name;
      a.file.mode = "edit";
      c.src = b.fileurl ? b.fileurl : Entry.defaultPath + "/uploads/" + b.filename.substring(0, 2) + "/" + b.filename.substring(2, 4) + "/image/" + b.filename + ".png";
      c.onload = function(b) {
        a.addImage(b.target);
      };
    }
  });
  Entry.addEventListener("pictureImport", function(b) {
    a.addPicture(b);
  });
  Entry.addEventListener("pictureNameChanged", function(b) {
    a.file.name = b.name;
  });
  Entry.addEventListener("pictureClear", function(b) {
    a.file.modified = !1;
    a.file.id = "";
    a.file.name = "";
    a.clearCanvas();
  });
};
Entry.Painter.prototype.initDraw = function() {
  var a = this;
  this.stage.on("stagemousedown", function(b) {
    a.stagemousedown(b);
  });
  this.stage.on("stagemouseup", function(b) {
    a.stagemouseup(b);
  });
  this.stage.on("stagemousemove", function(b) {
    a.stagemousemove(b);
  });
};
Entry.Painter.prototype.selectObject = function(a, b) {
  this.selectedObject = a;
  this.handle.visible = a.visible;
  b ? (this.handle.width = this.copy.width, this.handle.height = this.copy.height, this.handle.x = this.selectArea.x1 + this.copy.width / 2, this.handle.y = this.selectArea.y1 + this.copy.height / 2) : (this.handle.width = a.scaleX * a.image.width, this.handle.height = a.scaleY * a.image.height, this.handle.x = a.x, this.handle.y = a.y, this.handle.regX = +(a.regX - a.image.width / 2) * a.scaleX, this.handle.regY = +(a.regY - a.image.height / 2) * a.scaleY);
  this.handle.rotation = a.rotation;
  this.handle.direction = 0;
  this.updateImageHandle();
};
Entry.Painter.prototype.selectTextObject = function(a) {
  this.selectedObject = a;
  var b = a.getTransformedBounds();
  this.handle.visible = a.visible;
  a.width || (this.selectedObject.width = b.width);
  a.height || (this.selectedObject.height = b.height);
  this.handle.width = a.scaleX * this.selectedObject.width;
  this.handle.height = a.scaleY * this.selectedObject.height;
  this.handle.x = a.x;
  this.handle.y = a.y;
  a.regX || (a.regX = a.width / 2);
  a.regY || (a.regY = a.height / 2);
  this.handle.regX = (a.regX - this.selectedObject.width / 2) * a.scaleX;
  this.handle.regY = (a.regY - this.selectedObject.height / 2) * a.scaleY;
  this.handle.rotation = a.rotation;
  this.handle.direction = 0;
  this.updateImageHandle();
};
Entry.Painter.prototype.updateHandle = function() {
  -1 < this.stage.getChildIndex(this._handle) && this.stage.removeChild(this._handle);
  -1 === this.stage.getChildIndex(this.handle) && this.stage.addChild(this.handle);
  var a = new createjs.Shape;
  a.graphics.clear().beginFill("#000").rect(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2);
  this.handle.rect.hitArea = a;
  this.handle.rect.graphics.clear().setStrokeStyle(1, "round").beginStroke("#000000").drawDashedRect(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2, 4);
  this.stage.update();
};
Entry.Painter.prototype.updateHandle_ = function() {
  this.stage.getChildIndex(-1 < this._handle) && this.stage.addChild(this._handle);
  this._handle.rect.graphics.clear().setStrokeStyle(1, "round").beginStroke("#cccccc").drawDashedRect(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2, 2);
  this.stage.update();
};
Entry.Painter.prototype.matchTolerance = function(a, b, c, d, e) {
  var f = this.colorLayerData.data[a], g = this.colorLayerData.data[a + 1];
  a = this.colorLayerData.data[a + 2];
  return f >= b - e / 100 * b && f <= b + e / 100 * b && g >= c - e / 100 * c && g <= c + e / 100 * c && a >= d - e / 100 * d && a <= d + e / 100 * d;
};
Entry.Painter.prototype.matchColorOnly = function(a, b, c, d) {
  return b === this.colorLayerData.data[a] && c === this.colorLayerData.data[a + 1] && d === this.colorLayerData.data[a + 2] ? !0 : !1;
};
Entry.Painter.prototype.matchColor = function(a, b, c, d, e) {
  return b === this.colorLayerData.data[a] && c === this.colorLayerData.data[a + 1] && d === this.colorLayerData.data[a + 2] && e === this.colorLayerData.data[a + 3] ? !0 : !1;
};
Entry.Painter.prototype.colorPixel = function(a, b, c, d, e) {
  e || (e = 255);
  this.stroke.transparent && (e = d = c = b = 0);
  this.colorLayerData.data[a] = b;
  this.colorLayerData.data[a + 1] = c;
  this.colorLayerData.data[a + 2] = d;
  this.colorLayerData.data[a + 3] = e;
};
Entry.Painter.prototype.pickStrokeColor = function(a) {
  a = 4 * (Math.round(a.stageY) * this.canvas.width + Math.round(a.stageX));
  this.stroke.lineColor = Entry.rgb2hex(this.colorLayerData.data[a], this.colorLayerData.data[a + 1], this.colorLayerData.data[a + 2]);
  document.getElementById("entryPainterAttrCircle").style.backgroundColor = this.stroke.lineColor;
  document.getElementById("entryPainterAttrCircleInput").value = this.stroke.lineColor;
};
Entry.Painter.prototype.drawText = function(a) {
  var b = document.getElementById("entryPainterAttrFontStyle").value, c = document.getElementById("entryPainterAttrFontName").value, d = document.getElementById("entryPainterAttrFontSize").value;
  a = new createjs.Text(a, b + " " + d + 'px "' + c + '"', this.stroke.lineColor);
  a.textBaseline = "top";
  a.x = this.oldPt.x;
  a.y = this.oldPt.y;
  this.objectContainer.addChild(a);
  this.selectTextObject(a);
  this.file.modified = !0;
};
Entry.Painter.prototype.addImage = function(a) {
  var b = new createjs.Bitmap(a);
  this.objectContainer.addChild(b);
  b.x = this.stage.canvas.width / 2;
  b.y = this.stage.canvas.height / 2;
  b.regX = b.image.width / 2 | 0;
  b.regY = b.image.height / 2 | 0;
  if (540 < b.image.height) {
    var c = 540 / b.image.height;
    b.scaleX = c;
    b.scaleY = c;
  }
  b.name = a.id;
  b.id = a.id;
  this.selectObject(b);
  this.stage.update();
};
Entry.Painter.prototype.createBrush = function() {
  this.initCommand();
  this.brush = new createjs.Shape;
  this.objectContainer.addChild(this.brush);
  this.stage.update();
};
Entry.Painter.prototype.createEraser = function() {
  this.initCommand();
  this.eraser = new createjs.Shape;
  this.objectContainer.addChild(this.eraser);
  this.stage.update();
};
Entry.Painter.prototype.clearHandle = function() {
  this.handle.visible && (this.handle.visible = !1);
  this.coordinator.visible && (this.coordinator.visible = !1);
  this.stage.update();
};
Entry.Painter.prototype.initCommand = function() {
  var a = !1;
  this.handle.visible && (a = !0, this.handle.visible = !1);
  var b = !1;
  this.coordinator.visible && (b = !0, this.coordinator.visible = !1);
  (a || b) && this.stage.update();
  this.isCommandValid = !1;
  this.colorLayerModel = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
  Entry.stateManager && this.firstStatement && Entry.stateManager.addCommand("edit sprite", this, this.restorePainter, this.colorLayerModel);
  this.firstStatement = !0;
  a && (this.handle.visible = !0);
  b && (this.coordinator.visible = !0);
  (a || b) && this.stage.update();
};
Entry.Painter.prototype.doCommand = function() {
  this.isCommandValid = !0;
};
Entry.Painter.prototype.checkCommand = function() {
  this.isCommandValid || Entry.dispatchEvent("cancelLastCommand");
};
Entry.Painter.prototype.restorePainter = function(a) {
  this.clearHandle();
  var b = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
  this.ctx.putImageData(a, 0, 0);
  a = new Image;
  a.src = this.canvas.toDataURL();
  var c = this;
  a.onload = function(b) {
    b = new createjs.Bitmap(b.target);
    c.objectContainer.removeAllChildren();
    c.objectContainer.addChild(b);
  };
  Entry.stateManager && Entry.stateManager.addCommand("restore sprite", this, this.restorePainter, b);
};
Entry.Painter.prototype.platten = function() {
  this.colorLayerData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
  this.reloadContext();
};
Entry.Painter.prototype.fill = function() {
  if (!this.stroke.locked) {
    this.stroke.locked = !0;
    this.initCommand();
    this.doCommand();
    this.clearHandle();
    var a = this.canvas.width, b = this.canvas.height;
    this.colorLayerData = this.ctx.getImageData(0, 0, a, b);
    var c = new createjs.Point(this.stage.mouseX, this.stage.mouseY);
    c.x = Math.round(c.x);
    c.y = Math.round(c.y);
    for (var d = 4 * (c.y * a + c.x), e = this.colorLayerData.data[d], f = this.colorLayerData.data[d + 1], g = this.colorLayerData.data[d + 2], h = this.colorLayerData.data[d + 3], k, l, c = [[c.x, c.y]], n = Entry.hex2rgb(this.stroke.lineColor);c.length;) {
      for (var d = c.pop(), m = d[0], t = d[1], d = 4 * (t * a + m);0 <= t && this.matchColor(d, e, f, g, h);) {
        --t, d -= 4 * a;
      }
      d += 4 * a;
      t += 1;
      for (l = k = !1;t < b - 1 && this.matchColor(d, e, f, g, h);) {
        t += 1, this.colorPixel(d, n.r, n.g, n.b), 0 < m && (this.matchColor(d - 4, e, f, g, h) ? k || (c.push([m - 1, t]), k = !0) : k && (k = !1)), m < a - 1 && (this.matchColor(d + 4, e, f, g, h) ? l || (c.push([m + 1, t]), l = !0) : l && (l = !1)), d += 4 * a;
      }
      if (1080 < c.length) {
        break;
      }
    }
    this.file.modified = !0;
    this.reloadContext();
  }
};
Entry.Painter.prototype.reloadContext = function() {
  delete this.selectedObject;
  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
  this.ctx.putImageData(this.colorLayerData, 0, 0);
  var a = new Image;
  a.src = this.canvas.toDataURL();
  var b = this;
  a.onload = function(a) {
    a = new createjs.Bitmap(a.target);
    b.objectContainer.removeAllChildren();
    b.objectContainer.addChild(a);
    b.stroke.locked = !1;
  };
};
Entry.Painter.prototype.move_pen = function() {
  var a = new createjs.Point(this.oldPt.x + this.stage.mouseX >> 1, this.oldPt.y + this.stage.mouseY >> 1);
  this.brush.graphics.setStrokeStyle(this.stroke.thickness, "round").beginStroke(this.stroke.lineColor).moveTo(a.x, a.y).curveTo(this.oldPt.x, this.oldPt.y, this.oldMidPt.x, this.oldMidPt.y);
  this.oldPt.x = this.stage.mouseX;
  this.oldPt.y = this.stage.mouseY;
  this.oldMidPt.x = a.x;
  this.oldMidPt.y = a.y;
  this.file.modified = !0;
  this.stage.update();
};
Entry.Painter.prototype.move_line = function() {
  this.brush.graphics.clear().beginStroke(this.stroke.lineColor).setStrokeStyle(this.stroke.thickness, "round").moveTo(this.oldPt.x, this.oldPt.y).lineTo(this.stage.mouseX, this.stage.mouseY);
  this.file.modified = !0;
  this.stage.update();
};
Entry.Painter.prototype.move_rect = function() {
  var a = this.stage.mouseX - this.oldPt.x, b = this.stage.mouseY - this.oldPt.y;
  event.shiftKey && (b = a);
  this.stroke.fill ? 0 === this.stroke.thickness ? this.brush.graphics.clear().setStrokeStyle(this.stroke.thickness, "round").beginFill(this.stroke.fillColor).drawRect(this.oldPt.x, this.oldPt.y, a, b) : this.brush.graphics.clear().beginStroke(this.stroke.lineColor).setStrokeStyle(this.stroke.thickness, "round").beginFill(this.stroke.fillColor).drawRect(this.oldPt.x, this.oldPt.y, a, b) : 0 === this.stroke.thickness ? this.brush.graphics.clear().setStrokeStyle(this.stroke.thickness, "round").drawRect(this.oldPt.x, 
  this.oldPt.y, a, b) : this.brush.graphics.clear().beginStroke(this.stroke.lineColor).setStrokeStyle(this.stroke.thickness, "round").drawRect(this.oldPt.x, this.oldPt.y, a, b);
  this.file.modified = !0;
  this.stage.update();
};
Entry.Painter.prototype.move_circle = function() {
  var a = this.stage.mouseX - this.oldPt.x, b = this.stage.mouseY - this.oldPt.y;
  event.shiftKey && (b = a);
  this.stroke.fill ? 0 === this.stroke.thickness ? this.brush.graphics.clear().beginStroke(this.stroke.fillColor).setStrokeStyle(this.stroke.thickness, "round").beginFill(this.stroke.fillColor).drawEllipse(this.oldPt.x, this.oldPt.y, a, b) : this.brush.graphics.clear().beginStroke(this.stroke.lineColor).setStrokeStyle(this.stroke.thickness, "round").beginFill(this.stroke.fillColor).drawEllipse(this.oldPt.x, this.oldPt.y, a, b) : this.stroke.fill || (0 === this.stroke.thickness ? this.brush.graphics.clear().drawEllipse(this.oldPt.x, 
  this.oldPt.y, a, b) : this.brush.graphics.clear().beginStroke(this.stroke.lineColor).setStrokeStyle(this.stroke.thickness, "round").drawEllipse(this.oldPt.x, this.oldPt.y, a, b));
  this.file.modified = !0;
  this.stage.update();
};
Entry.Painter.prototype.edit_copy = function() {
  this.selectArea ? (this.clearHandle(), this.selectedObject && delete this.selectedObject, this.copyLayerData = this.ctx.getImageData(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2), this.copy = {}, this.copy.width = this.selectArea.x2, this.copy.height = this.selectArea.y2, this.canvas_.width = this.copy.width, this.canvas_.height = this.copy.height, this.ctx_.clearRect(0, 0, this.canvas_.width, this.canvas_.height), this.ctx_.putImageData(this.copyLayerData, 0, 
  0)) : alert("\ubcf5\uc0ac\ud560 \uc601\uc5ed\uc744 \uc120\ud0dd\ud558\uc138\uc694.");
};
Entry.Painter.prototype.edit_cut = function() {
  this.selectArea ? (this.clearHandle(), this.selectedObject && delete this.selectedObject, this.copyLayerData = this.ctx.getImageData(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2), this.copy = {}, this.copy.width = this.selectArea.x2, this.copy.height = this.selectArea.y2, this.canvas_.width = this.copy.width, this.canvas_.height = this.copy.height, this.ctx_.clearRect(0, 0, this.canvas_.width, this.canvas_.height), this.ctx_.putImageData(this.copyLayerData, 0, 
  0), this.ctx.clearRect(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2), this.colorLayerData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height), this.reloadContext(), this.file.modified = !0) : alert("\uc790\ub97c \uc601\uc5ed\uc744 \uc120\ud0dd\ud558\uc138\uc694.");
};
Entry.Painter.prototype.edit_paste = function() {
  var a = new Image;
  a.src = this.canvas_.toDataURL();
  var b = this;
  a.onload = function(a) {
    a = new createjs.Bitmap(a.target);
    a.x = b.canvas.width / 2;
    a.y = b.canvas.height / 2;
    a.regX = b.copy.width / 2 | 0;
    a.regY = b.copy.height / 2 | 0;
    a.id = Entry.generateHash();
    b.objectContainer.addChild(a);
    b.selectObject(a, !0);
  };
  this.file.modified = !0;
};
Entry.Painter.prototype.edit_select = function() {
  this.clearHandle();
  this.selectedObject && delete this.selectedObject;
  this.copyLayerData = this.ctx.getImageData(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2);
  this.copy = {};
  this.copy.width = this.selectArea.x2;
  this.copy.height = this.selectArea.y2;
  this.canvas_.width = this.copy.width;
  this.canvas_.height = this.copy.height;
  this.ctx_.clearRect(0, 0, this.canvas_.width, this.canvas_.height);
  this.ctx_.putImageData(this.copyLayerData, 0, 0);
  this.ctx.clearRect(this.selectArea.x1, this.selectArea.y1, this.selectArea.x2, this.selectArea.y2);
  this.colorLayerData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
  this.ctx.putImageData(this.colorLayerData, 0, 0);
  var a = new Image;
  a.src = this.canvas.toDataURL();
  var b = this;
  a.onload = function(a) {
    a = new createjs.Bitmap(a.target);
    b.objectContainer.removeAllChildren();
    b.objectContainer.addChild(a);
    a = new Image;
    a.src = b.canvas_.toDataURL();
    a.onload = function(a) {
      a = new createjs.Bitmap(a.target);
      a.x = b.selectArea.x1 + b.copy.width / 2;
      a.y = b.selectArea.y1 + b.copy.height / 2;
      a.regX = b.copy.width / 2 | 0;
      a.regY = b.copy.height / 2 | 0;
      a.id = Entry.generateHash();
      a.name = a.id;
      b.objectContainer.addChild(a);
      b.selectObject(a, !0);
    };
  };
};
Entry.Painter.prototype.move_erase = function(a) {
  a = new createjs.Point(this.oldPt.x + this.stage.mouseX >> 1, this.oldPt.y + this.stage.mouseY >> 1);
  this.eraser.graphics.setStrokeStyle(this.stroke.thickness, "round").beginStroke("#ffffff").moveTo(a.x, a.y).curveTo(this.oldPt.x, this.oldPt.y, this.oldMidPt.x, this.oldMidPt.y);
  this.oldPt.x = this.stage.mouseX;
  this.oldPt.y = this.stage.mouseY;
  this.oldMidPt.x = a.x;
  this.oldMidPt.y = a.y;
  this.file.modified = !0;
  this.stage.update();
};
Entry.Painter.prototype.settingShapeBlur = function() {
  this.objectWidthInput.blur();
  this.objectHeightInput.blur();
  this.objectRotateInput.blur();
};
Entry.Painter.prototype.stagemousedown = function(a) {
  "picture" == Entry.playground.getViewMode() && (this.settingShapeBlur(), this.oldPt = new createjs.Point(a.stageX, a.stageY), this.oldMidPt = this.oldPt.clone(), "select" === this.toolbox.selected ? this.stage.addChild(this._handle) : "spoid" === this.toolbox.selected ? this.pickStrokeColor(a) : "text" === this.toolbox.selected ? (this.showInputField(a), this.stage.update()) : "erase" === this.toolbox.selected ? (this.createEraser(), this.stroke.enabled = !0) : "fill" === this.toolbox.selected ? 
  this.fill() : "cursor" !== this.toolbox.selected && (this.createBrush(), this.stroke.enabled = !0));
};
Entry.Painter.prototype.stagemousemove = function(a) {
  "picture" == Entry.playground.getViewMode() && ("select" === this.toolbox.selected && -1 < this.stage.getChildIndex(this._handle) ? (this.selectArea.x1 = this.oldPt.x, this.selectArea.y1 = this.oldPt.y, this.selectArea.x2 = a.stageX - this.oldPt.x, this.selectArea.y2 = a.stageY - this.oldPt.y, this.updateHandle_()) : this.stroke.enabled && (this.doCommand(), "pen" === this.toolbox.selected ? this.move_pen(a) : "line" === this.toolbox.selected ? this.move_line(a) : "rect" === this.toolbox.selected ? 
  this.move_rect(a) : "circle" === this.toolbox.selected ? this.move_circle(a) : "erase" === this.toolbox.selected && this.move_erase(a)), this.painterTopStageXY.innerHTML = "x:" + a.stageX.toFixed(1) + ", y:" + a.stageY.toFixed(1));
};
Entry.Painter.prototype.stagemouseup = function(a) {
  "picture" == Entry.playground.getViewMode() && ("select" === this.toolbox.selected ? (this.selectArea.x1 = this.oldPt.x, this.selectArea.y1 = this.oldPt.y, this.selectArea.x2 = a.stageX - this.oldPt.x, this.selectArea.y2 = a.stageY - this.oldPt.y, this.stage.removeChild(this._handle), this.stage.update(), 0 < this.selectArea.x2 && 0 < this.selectArea.y2 && this.edit_select(), this.selectToolbox("cursor")) : "cursor" !== this.toolbox.selected && this.stroke.enabled && (-1 < this.objectContainer.getChildIndex(this.eraser) && 
  this.eraser.graphics.endStroke(), -1 < this.objectContainer.getChildIndex(this.brush) && this.brush.graphics.endStroke(), this.clearHandle(), this.platten(), this.stroke.enabled = !1, this.checkCommand()));
};
Entry.Painter.prototype.file_save = function(a) {
  this.clearHandle();
  this.transparent();
  this.trim();
  var b = this.canvas_.toDataURL();
  Entry.dispatchEvent("saveCanvasImage", {file:a ? this.file_ : this.file, image:b});
  this.file.modified = !1;
};
Entry.Painter.prototype.transparent = function() {
  var a = this.canvas.width, b = this.canvas.height;
  this.colorLayerData = this.ctx.getImageData(0, 0, a, b);
  var c = a * (b - 1) * 4, d = 4 * (a - 1), e = 4 * (a * b - 1);
  this.matchColorOnly(0, 255, 255, 255) ? this.fillTransparent(1, 1) : this.matchColorOnly(c, 255, 255, 255) ? this.fillTransparent(1, b) : this.matchColorOnly(d, 255, 255, 255) ? this.fillTransparent(a, 1) : this.matchColorOnly(e, 255, 255, 255) && this.fillTransparent(a, b);
};
Entry.Painter.prototype.fillTransparent = function(a, b) {
  this.stage.mouseX = a;
  this.stage.mouseY = b;
  this.stroke.transparent = !0;
  this.fill();
};
Entry.Painter.prototype.trim = function() {
  var a = this.canvas.width, b = this.ctx.getImageData(0, 0, a, this.canvas.height), c = b.data.length, d, e = null, f = null, g = null, h = null, k;
  for (d = 0;d < c;d += 4) {
    0 !== b.data[d + 3] && (g = d / 4 % a, k = ~~(d / 4 / a), null === e && (e = k), null === f ? f = g : g < f && (f = g), null === h ? h = k : h < k && (h = k));
  }
  a = h - e;
  b = g - f;
  0 === a || 0 === b ? (e = this.ctx.getImageData(0, 0, 1, 1), e.data[0] = 255, e.data[1] = 255, e.data[2] = 255, e.data[3] = 255, this.canvas_.width = 1, this.canvas_.height = 1) : (e = this.ctx.getImageData(f, e, b, a), this.canvas_.width = b, this.canvas_.height = a);
  this.ctx_.putImageData(e, 0, 0);
};
Entry.Painter.prototype.showInputField = function(a) {
  this.inputField ? (Entry.dispatchEvent("textUpdate"), delete this.inputField) : (this.initCommand(), this.doCommand(), this.inputField = new CanvasInput({canvas:document.getElementById("entryPainterCanvas"), fontSize:20, fontFamily:this.font.name, fontColor:"#000", width:650, padding:8, borderWidth:1, borderColor:"#000", borderRadius:3, boxShadow:"1px 1px 0px #fff", innerShadow:"0px 0px 5px rgba(0, 0, 0, 0.5)", x:a.stageX, y:a.stageY, onsubmit:function() {
    Entry.dispatchEvent("textUpdate");
  }}), this.inputField.show());
};
Entry.Painter.prototype.addPicture = function(a) {
  this.initCommand();
  var b = new Image;
  b.id = Entry.generateHash();
  b.src = a.fileurl ? a.fileurl : Entry.defaultPath + "/uploads/" + a.filename.substring(0, 2) + "/" + a.filename.substring(2, 4) + "/image/" + a.filename + ".png";
  var c = this;
  b.onload = function(b) {
    c.addImage(b.target);
    c.selectToolbox("cursor");
  };
};
Entry.Painter.prototype.initCoordinator = function() {
  var a = new createjs.Container, b = new createjs.Bitmap(Entry.mediaFilePath + "/workspace_coordinate.png");
  a.addChild(b);
  this.stage.addChild(a);
  a.visible = !1;
  this.coordinator = a;
};
Entry.Painter.prototype.toggleCoordinator = function() {
  this.coordinator.visible = !this.coordinator.visible;
  this.stage.update();
};
Entry.Painter.prototype.initDashedLine = function() {
  createjs.Graphics.prototype.dashedLineTo = function(a, b, c, d, e) {
    this.moveTo(a, b);
    var f = c - a, g = d - b;
    e = Math.floor(Math.sqrt(f * f + g * g) / e);
    for (var f = f / e, g = g / e, h = 0;h++ < e;) {
      a += f, b += g, this[0 === h % 2 ? "moveTo" : "lineTo"](a, b);
    }
    this[0 === h % 2 ? "moveTo" : "lineTo"](c, d);
    return this;
  };
  createjs.Graphics.prototype.drawDashedRect = function(a, b, c, d, e) {
    this.moveTo(a, b);
    c = a + c;
    d = b + d;
    this.dashedLineTo(a, b, c, b, e);
    this.dashedLineTo(c, b, c, d, e);
    this.dashedLineTo(c, d, a, d, e);
    this.dashedLineTo(a, d, a, b, e);
    return this;
  };
  createjs.Graphics.prototype.drawResizableDashedRect = function(a, b, c, d, e, f) {
    this.moveTo(a, b);
    c = a + c;
    d = b + d;
    this.dashedLineTo(a + f, b, c - f, b, e);
    this.dashedLineTo(c, b + f, c, d - f, e);
    this.dashedLineTo(c - f, d, a + f, d, e);
    this.dashedLineTo(a, d - f, a, b + f, e);
    return this;
  };
};
Entry.Painter.prototype.generateView = function(a) {
  var b = this;
  this.view_ = a;
  if (!Entry.type || "workspace" == Entry.type) {
    this.view_.addClass("entryPainterWorkspace");
    var c = Entry.createElement("div", "entryPainterTop");
    c.addClass("entryPlaygroundPainterTop");
    this.view_.appendChild(c);
    var d = Entry.createElement("div", "entryPainterToolbox");
    d.addClass("entryPlaygroundPainterToolbox");
    this.view_.appendChild(d);
    var e = Entry.createElement("div", "entryPainterToolboxTop");
    e.addClass("entryPainterToolboxTop");
    d.appendChild(e);
    var f = Entry.createElement("div", "entryPainterContainer");
    f.addClass("entryPlaygroundPainterContainer");
    this.view_.appendChild(f);
    e = Entry.createElement("canvas", "entryPainterCanvas");
    e.width = 960;
    e.height = 540;
    e.addClass("entryPlaygroundPainterCanvas");
    f.appendChild(e);
    e = Entry.createElement("canvas", "entryPainterCanvas_");
    e.addClass("entryRemove");
    e.width = 960;
    e.height = 540;
    f.appendChild(e);
    var g = Entry.createElement("div", "entryPainterAttr");
    g.addClass("entryPlaygroundPainterAttr");
    this.view_.appendChild(g);
    this.flipObject = Entry.createElement("div", "entryPictureFlip");
    this.flipObject.addClass("entryPlaygroundPainterFlip");
    g.appendChild(this.flipObject);
    e = Entry.createElement("div", "entryPictureFlipX");
    e.title = "\uc88c\uc6b0\ub4a4\uc9d1\uae30";
    e.bindOnClick(function() {
      b.selectedObject && (b.selectedObject.scaleX *= -1, b.selectedObject.text ? b.selectTextObject(b.selectedObject) : b.selectObject(b.selectedObject), b.updateImageHandle(), b.stage.update());
    });
    e.addClass("entryPlaygroundPainterFlipX");
    this.flipObject.appendChild(e);
    e = Entry.createElement("div", "entryPictureFlipY");
    e.title = "\uc0c1\ud558\ub4a4\uc9d1\uae30";
    e.bindOnClick(function() {
      b.selectedObject && (b.selectedObject.scaleY *= -1, b.selectedObject.text ? b.selectTextObject(b.selectedObject) : b.selectObject(b.selectedObject), b.updateImageHandle(), b.stage.update());
    });
    e.addClass("entryPlaygroundPainterFlipY");
    this.flipObject.appendChild(e);
    Entry.addEventListener("windowResized", function(b) {
      var c = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
      b = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
      var d = parseInt(document.getElementById("entryCanvas").style.width), c = c - (d + 240), d = b - 349;
      a.style.width = c + "px";
      f.style.width = c - 54 + "px";
      f.style.height = d + "px";
      g.style.top = d + 30 + "px";
      g.style.height = b - d + "px";
    });
    var h = Entry.createElement("nav", "entryPainterTopMenu");
    h.addClass("entryPlaygroundPainterTopMenu");
    c.appendChild(h);
    e = Entry.createElement("ul");
    h.appendChild(e);
    var k = Entry.createElement("li");
    h.appendChild(k);
    h = Entry.createElement("a", "entryPainterTopMenuFileNew");
    h.bindOnClick(function() {
      b.newPicture();
    });
    h.addClass("entryPlaygroundPainterTopMenuFileNew");
    h.innerHTML = Lang.Workspace.new_picture;
    k.appendChild(h);
    h = Entry.createElement("li", "entryPainterTopMenuFile");
    h.addClass("entryPlaygroundPainterTopMenuFile");
    h.innerHTML = Lang.Workspace.painter_file;
    e.appendChild(h);
    k = Entry.createElement("ul");
    h.appendChild(k);
    h = Entry.createElement("li");
    k.appendChild(h);
    var l = Entry.createElement("a", "entryPainterTopMenuFileSave");
    l.bindOnClick(function() {
      b.file_save(!1);
    });
    l.addClass("entryPainterTopMenuFileSave");
    l.innerHTML = Lang.Workspace.painter_file_save;
    h.appendChild(l);
    h = Entry.createElement("li");
    k.appendChild(h);
    k = Entry.createElement("a", "entryPainterTopMenuFileSaveAs");
    k.bindOnClick(function() {
      b.file.mode = "new";
      b.file_save(!1);
    });
    k.addClass("entryPlaygroundPainterTopMenuFileSaveAs");
    k.innerHTML = Lang.Workspace.painter_file_saveas;
    h.appendChild(k);
    k = Entry.createElement("li", "entryPainterTopMenuEdit");
    k.addClass("entryPlaygroundPainterTopMenuEdit");
    k.innerHTML = Lang.Workspace.painter_edit;
    e.appendChild(k);
    e = Entry.createElement("ul");
    k.appendChild(e);
    k = Entry.createElement("li");
    e.appendChild(k);
    h = Entry.createElement("a", "entryPainterTopMenuEditImportLink");
    h.bindOnClick(function() {
      Entry.dispatchEvent("openPictureImport");
    });
    h.addClass("entryPainterTopMenuEditImport");
    h.innerHTML = Lang.Workspace.get_file;
    k.appendChild(h);
    k = Entry.createElement("li");
    e.appendChild(k);
    h = Entry.createElement("a", "entryPainterTopMenuEditCopy");
    h.bindOnClick(function() {
      b.edit_copy();
    });
    h.addClass("entryPlaygroundPainterTopMenuEditCopy");
    h.innerHTML = Lang.Workspace.copy_file;
    k.appendChild(h);
    k = Entry.createElement("li");
    e.appendChild(k);
    h = Entry.createElement("a", "entryPainterTopMenuEditCut");
    h.bindOnClick(function() {
      b.edit_cut();
    });
    h.addClass("entryPlaygroundPainterTopMenuEditCut");
    h.innerHTML = Lang.Workspace.cut_picture;
    k.appendChild(h);
    k = Entry.createElement("li");
    e.appendChild(k);
    h = Entry.createElement("a", "entryPainterTopMenuEditPaste");
    h.bindOnClick(function() {
      b.edit_paste();
    });
    h.addClass("entryPlaygroundPainterTopMenuEditPaste");
    h.innerHTML = Lang.Workspace.paste_picture;
    k.appendChild(h);
    k = Entry.createElement("li");
    e.appendChild(k);
    e = Entry.createElement("a", "entryPainterTopMenuEditEraseAll");
    e.addClass("entryPlaygroundPainterTopMenuEditEraseAll");
    e.innerHTML = Lang.Workspace.remove_all;
    e.bindOnClick(function() {
      b.clearCanvas();
    });
    k.appendChild(e);
    this.painterTopStageXY = e = Entry.createElement("div", "entryPainterTopStageXY");
    e.addClass("entryPlaygroundPainterTopStageXY");
    c.appendChild(e);
    e = Entry.createElement("ul", "entryPainterTopToolbar");
    e.addClass("entryPlaygroundPainterTopToolbar");
    c.appendChild(e);
    c = Entry.createElement("li", "entryPainterTopToolbarUndo");
    c.bindOnClick(function() {
    });
    c.addClass("entryPlaygroundPainterTopToolbar");
    e.appendChild(c);
    c = Entry.createElement("li", "entryPainterTopToolbarRedo");
    c.bindOnClick(function() {
    });
    c.addClass("entryPlaygroundPainterTopToolbar");
    e.appendChild(c);
    c = Entry.createElement("ul");
    c.addClass("entryPlaygroundPainterToolboxContainer");
    d.appendChild(c);
    this.toolboxCursor = Entry.createElement("li", "entryPainterToolboxCursor");
    this.toolboxCursor.title = "\uc774\ub3d9";
    this.toolboxCursor.bindOnClick(function() {
      b.selectToolbox("cursor");
    });
    this.toolboxCursor.addClass("entryPlaygroundPainterToolboxCursor");
    c.appendChild(this.toolboxCursor);
    this.toolboxSelect = Entry.createElement("li", "entryPainterToolboxSelect");
    this.toolboxSelect.title = "\uc790\ub974\uae30";
    this.toolboxSelect.bindOnClick(function() {
      b.selectToolbox("select");
    });
    this.toolboxSelect.addClass("entryPlaygroundPainterToolboxSelect");
    c.appendChild(this.toolboxSelect);
    this.toolboxPen = Entry.createElement("li", "entryPainterToolboxPen");
    this.toolboxPen.title = "\ud39c";
    this.toolboxPen.bindOnClick(function() {
      b.selectToolbox("pen");
    });
    this.toolboxPen.addClass("entryPlaygroundPainterToolboxPen");
    c.appendChild(this.toolboxPen);
    this.toolboxLine = Entry.createElement("li", "entryPainterToolboxLine");
    this.toolboxLine.title = "\uc9c1\uc120";
    this.toolboxLine.bindOnClick(function() {
      b.selectToolbox("line");
    });
    this.toolboxLine.addClass("entryPlaygroundPainterToolboxLine");
    c.appendChild(this.toolboxLine);
    this.toolboxRect = Entry.createElement("li", "entryPainterToolboxRect");
    this.toolboxRect.title = "\uc0ac\uac01\ud615";
    this.toolboxRect.bindOnClick(function() {
      b.selectToolbox("rect");
    });
    this.toolboxRect.addClass("entryPlaygroundPainterToolboxRect");
    c.appendChild(this.toolboxRect);
    this.toolboxCircle = Entry.createElement("li", "entryPainterToolboxCircle");
    this.toolboxCircle.title = "\uc6d0";
    this.toolboxCircle.bindOnClick(function() {
      b.selectToolbox("circle");
    });
    this.toolboxCircle.addClass("entryPlaygroundPainterToolboxCircle");
    c.appendChild(this.toolboxCircle);
    this.toolboxText = Entry.createElement("li", "entryPainterToolboxText");
    this.toolboxText.title = "\uae00\uc0c1\uc790";
    this.toolboxText.bindOnClick(function() {
      b.selectToolbox("text");
    });
    this.toolboxText.addClass("entryPlaygroundPainterToolboxText");
    c.appendChild(this.toolboxText);
    this.toolboxFill = Entry.createElement("li", "entryPainterToolboxFill");
    this.toolboxFill.bindOnClick(function() {
      b.selectToolbox("fill");
    });
    this.toolboxFill.addClass("entryPlaygroundPainterToolboxFill");
    c.appendChild(this.toolboxFill);
    this.toolboxErase = Entry.createElement("li", "entryPainterToolboxErase");
    this.toolboxErase.title = "\uc9c0\uc6b0\uae30";
    this.toolboxErase.bindOnClick(function() {
      b.selectToolbox("erase");
    });
    this.toolboxErase.addClass("entryPlaygroundPainterToolboxErase");
    c.appendChild(this.toolboxErase);
    d = Entry.createElement("li", "entryPainterToolboxCoordinate");
    d.title = "\uc88c\ud45c";
    d.bindOnClick(function() {
      b.toggleCoordinator();
    });
    d.addClass("entryPlaygroundPainterToolboxCoordinate");
    c.appendChild(d);
    this.attrResizeArea = Entry.createElement("fieldset", "painterAttrResize");
    this.attrResizeArea.addClass("entryPlaygroundPainterAttrResize");
    g.appendChild(this.attrResizeArea);
    d = Entry.createElement("legend");
    d.innerHTML = Lang.Workspace.picture_size;
    this.attrResizeArea.appendChild(d);
    d = Entry.createElement("div", "painterAttrWrapper");
    d.addClass("painterAttrWrapper");
    this.attrResizeArea.appendChild(d);
    c = Entry.createElement("div");
    c.addClass("entryPlaygroundPainterAttrResizeX");
    d.appendChild(c);
    e = Entry.createElement("div");
    e.addClass("entryPlaygroundPainterAttrResizeXTop");
    e.innerHTML = "X";
    c.appendChild(e);
    this.objectWidthInput = Entry.createElement("input", "entryPainterAttrWidth");
    this.objectWidthInput.onblur = function() {
      if (isNaN(this.value)) {
        return alert("\uc22b\uc790\ub9cc \uc785\ub825 \uac00\ub2a5\ud569\ub2c8\ub2e4."), !1;
      }
      b.handle.width = this.value;
      b.updateImageHandle();
    };
    this.objectWidthInput.addClass("entryPlaygroundPainterNumberInput");
    c.appendChild(this.objectWidthInput);
    c = Entry.createElement("div");
    c.addClass("entryPlaygroundPainterSizeText");
    c.innerHTML = "x";
    d.appendChild(c);
    c = Entry.createElement("div");
    c.addClass("entryPlaygroundAttrReiszeY");
    d.appendChild(c);
    d = Entry.createElement("div");
    d.addClass("entryPlaygroundPainterAttrResizeYTop");
    d.innerHTML = "Y";
    c.appendChild(d);
    this.objectHeightInput = Entry.createElement("input", "entryPainterAttrHeight");
    this.objectHeightInput.onblur = function() {
      if (isNaN(this.value)) {
        return alert("\uc22b\uc790\ub9cc \uc785\ub825 \uac00\ub2a5\ud569\ub2c8\ub2e4."), !1;
      }
      b.handle.height = this.value;
      b.updateImageHandle();
    };
    this.objectHeightInput.addClass("entryPlaygroundPainterNumberInput");
    c.appendChild(this.objectHeightInput);
    this.attrRotateArea = Entry.createElement("div", "painterAttrRotateArea");
    this.attrRotateArea.addClass("painterAttrRotateArea");
    g.appendChild(this.attrRotateArea);
    d = Entry.createElement("div");
    d.addClass("painterAttrRotateName");
    d.innerHTML = Lang.Workspace.picture_rotation;
    this.attrRotateArea.appendChild(d);
    d = Entry.createElement("fieldset", "entryPainterAttrRotate");
    d.addClass("entryPlaygroundPainterAttrRotate");
    this.attrRotateArea.appendChild(d);
    c = Entry.createElement("div");
    c.addClass("painterAttrRotateTop");
    c.innerHTML = "\u03bf";
    d.appendChild(c);
    this.objectRotateInput = Entry.createElement("input", "entryPainterAttrDegree");
    this.objectRotateInput.onblur = function() {
      if (isNaN(this.value)) {
        return alert("\uc22b\uc790\ub9cc \uc785\ub825 \uac00\ub2a5\ud569\ub2c8\ub2e4."), !1;
      }
      360 <= this.value ? this.value %= 360 : 0 > this.value && (this.value = 360 + this.value % 360);
      b.handle.rotation = this.value;
      b.updateImageHandle();
    };
    this.objectRotateInput.addClass("entryPlaygroundPainterNumberInput");
    this.objectRotateInput.defaultValue = "0";
    d.appendChild(this.objectRotateInput);
    this.attrColorArea = Entry.createElement("fieldset", "entryPainterAttrColor");
    this.attrColorArea.addClass("entryPlaygroundPainterAttrColor");
    g.appendChild(this.attrColorArea);
    var n = Entry.createElement("div");
    n.addClass("entryPlaygroundPainterAttrColorContainer");
    this.attrColorArea.appendChild(n);
    this.attrCircleArea = Entry.createElement("div");
    this.attrCircleArea.addClass("painterAttrCircleArea");
    g.appendChild(this.attrCircleArea);
    d = Entry.createElement("div", "entryPainterAttrCircle");
    d.addClass("painterAttrCircle");
    this.attrCircleArea.appendChild(d);
    this.attrCircleArea.painterAttrCircle = d;
    d = Entry.createElement("input", "entryPainterAttrCircleInput");
    d.value = "#000000";
    d.addClass("painterAttrCircleInput");
    this.attrCircleArea.appendChild(d);
    this.attrColorSpoid = Entry.createElement("div");
    this.attrColorSpoid.bindOnClick(function() {
      b.selectToolbox("spoid");
    });
    this.attrColorSpoid.addClass("painterAttrColorSpoid");
    g.appendChild(this.attrColorSpoid);
    Entry.getColourCodes().forEach(function(a) {
      var c = Entry.createElement("div");
      c.addClass("entryPlaygroundPainterAttrColorElement");
      "transparent" === a ? c.style.backgroundImage = "url(" + (Entry.mediaFilePath + "/transparent.png") + ")" : c.style.backgroundColor = a;
      c.bindOnClick(function(c) {
        "transparent" === a ? (b.stroke.transparent = !0, b.stroke.lineColor = "#ffffff") : (b.stroke.transparent = !1, u && (document.getElementById("entryPainterShapeBackgroundColor").style.backgroundColor = a, b.stroke.fillColor = a), u || (document.getElementById("entryPainterShapeLineColor").style.backgroundColor = a, b.stroke.lineColor = a));
        document.getElementById("entryPainterAttrCircle").style.backgroundColor = b.stroke.lineColor;
        document.getElementById("entryPainterAttrCircleInput").value = a;
      });
      n.appendChild(c);
    });
    this.attrThickArea = Entry.createElement("div", "painterAttrThickArea");
    this.attrThickArea.addClass("entryPlaygroundentryPlaygroundPainterAttrThickArea");
    g.appendChild(this.attrThickArea);
    d = Entry.createElement("legend");
    d.addClass("painterAttrThickName");
    d.innerHTML = Lang.Workspace.thickness;
    this.attrThickArea.appendChild(d);
    var m = Entry.createElement("fieldset", "entryPainterAttrThick");
    m.addClass("entryPlaygroundPainterAttrThick");
    this.attrThickArea.appendChild(m);
    d = Entry.createElement("div");
    d.addClass("paintAttrThickTop");
    m.appendChild(d);
    e = Entry.createElement("select", "entryPainterAttrThick");
    e.addClass("entryPlaygroundPainterAttrThickInput");
    e.size = "1";
    e.onchange = function(a) {
      b.stroke.thickness = a.target.value;
    };
    for (d = 1;10 >= d;d++) {
      c = Entry.createElement("option"), c.value = d, c.innerHTML = d, e.appendChild(c);
    }
    m.appendChild(e);
    d = Entry.createElement("div", "entryPainterShapeLineColor");
    d.addClass("painterAttrShapeLineColor");
    c = Entry.createElement("div", "entryPainterShapeInnerBackground");
    c.addClass("painterAttrShapeInnerBackground");
    d.appendChild(c);
    m.appendChild(d);
    this.attrThickArea.painterAttrShapeLineColor = d;
    m.bindOnClick(function() {
      t.style.zIndex = "1";
      this.style.zIndex = "10";
      u = !1;
    });
    this.attrBackgroundArea = Entry.createElement("div", "painterAttrBackgroundArea");
    this.attrBackgroundArea.addClass("entryPlaygroundPainterBackgroundArea");
    g.appendChild(this.attrBackgroundArea);
    d = Entry.createElement("fieldset", "entryPainterAttrbackground");
    d.addClass("entryPlaygroundPainterAttrBackground");
    this.attrBackgroundArea.appendChild(d);
    c = Entry.createElement("div");
    c.addClass("paintAttrBackgroundTop");
    d.appendChild(c);
    var t = Entry.createElement("div", "entryPainterShapeBackgroundColor");
    t.addClass("painterAttrShapeBackgroundColor");
    this.attrBackgroundArea.painterAttrShapeBackgroundColor = t;
    c.appendChild(t);
    var u = !1;
    t.bindOnClick(function(b) {
      m.style.zIndex = "1";
      this.style.zIndex = "10";
      u = !0;
    });
    this.attrFontArea = Entry.createElement("div", "painterAttrFont");
    this.attrFontArea.addClass("entryPlaygroundPainterAttrFont");
    g.appendChild(this.attrFontArea);
    e = Entry.createElement("div");
    e.addClass("entryPlaygroundPainterAttrTop");
    this.attrFontArea.appendChild(e);
    d = Entry.createElement("div");
    d.addClass("entryPlaygroundPaintAttrTop_");
    e.appendChild(d);
    d = Entry.createElement("legend");
    d.addClass("panterAttrFontTitle");
    d.innerHTML = Lang.Workspace.textStyle;
    k = Entry.createElement("select", "entryPainterAttrFontName");
    k.addClass("entryPlaygroundPainterAttrFontName");
    k.size = "1";
    k.onchange = function(a) {
      b.font.name = a.target.value;
    };
    for (d = 0;d < Entry.fonts.length;d++) {
      h = Entry.fonts[d], c = Entry.createElement("option"), c.value = h.family, c.innerHTML = h.name, k.appendChild(c);
    }
    e.appendChild(k);
    e = Entry.createElement("div");
    e.addClass("painterAttrFontSizeArea");
    this.attrFontArea.appendChild(e);
    d = Entry.createElement("div");
    d.addClass("painterAttrFontSizeTop");
    e.appendChild(d);
    k = Entry.createElement("select", "entryPainterAttrFontSize");
    k.addClass("entryPlaygroundPainterAttrFontSize");
    k.size = "1";
    k.onchange = function(a) {
      b.font.size = a.target.value;
    };
    for (d = 20;72 >= d;d++) {
      c = Entry.createElement("option"), c.value = d, c.innerHTML = d, k.appendChild(c);
    }
    e.appendChild(k);
    e = Entry.createElement("div");
    e.addClass("entryPlaygroundPainterAttrFontStyleArea");
    this.attrFontArea.appendChild(e);
    d = Entry.createElement("div");
    d.addClass("entryPlaygroundPainterAttrFontTop");
    e.appendChild(d);
    k = Entry.createElement("select", "entryPainterAttrFontStyle");
    k.addClass("entryPlaygroundPainterAttrFontStyle");
    k.size = "1";
    k.onchange = function(a) {
      b.font.style = a.target.value;
    };
    h = [{label:"\ubcf4\ud1b5", value:"normal"}, {label:"\uad75\uac8c", value:"bold"}, {label:"\uae30\uc6b8\uc784", value:"italic"}];
    for (d = 0;d < h.length;d++) {
      l = h[d], c = Entry.createElement("option"), c.value = l.value, c.innerHTML = l.label, k.appendChild(c);
    }
    e.appendChild(k);
    this.attrLineArea = Entry.createElement("div", "painterAttrLineStyle");
    this.attrLineArea.addClass("entryPlaygroundPainterAttrLineStyle");
    g.appendChild(this.attrLineArea);
    var x = Entry.createElement("div");
    x.addClass("entryPlaygroundPainterAttrLineStyleLine");
    this.attrLineArea.appendChild(x);
    var v = Entry.createElement("div");
    v.addClass("entryPlaygroundPaitnerAttrLineArea");
    this.attrLineArea.appendChild(v);
    d = Entry.createElement("div");
    d.addClass("entryPlaygroundPainterAttrLineStyleLine1");
    v.appendChild(d);
    d.value = "line";
    var q = Entry.createElement("div");
    q.addClass("painterAttrLineStyleBackgroundLine");
    x.bindOnClick(function(b) {
      v.removeClass("entryRemove");
    });
    v.blur = function(b) {
      this.addClass("entryRemove");
    };
    v.onmouseleave = function(b) {
      this.addClass("entryRemove");
    };
    d.bindOnClick(function(b) {
      this.attrLineArea.removeClass(x);
      this.attrLineArea.appendChild(q);
      this.attrLineArea.onchange(b);
      v.blur();
    });
    q.bindOnClick(function(b) {
      v.removeClass("entryRemove");
    });
    this.attrLineArea.onchange = function(a) {
      b.stroke.style = a.target.value;
    };
    v.blur();
  }
};
Entry.Painter.prototype.restoreHandle = function() {
  this.selectedObject && !1 === this.handle.visible && (this.handle.visible = !0, this.stage.update());
};
Entry.Painter.prototype.initDisplay = function() {
  this.stroke.enabled = !1;
  this.toolboxCursor.addClass("entryPlaygroundPainterToolboxCursor");
  this.toolboxCursor.removeClass("entryToolboxCursorClicked");
  this.toolboxSelect.addClass("entryPlaygroundPainterToolboxSelect");
  this.toolboxSelect.removeClass("entryToolboxSelectClicked");
  this.toolboxPen.addClass("entryPlaygroundPainterToolboxPen");
  this.toolboxPen.removeClass("entryToolboxPenClicked");
  this.toolboxLine.addClass("entryPlaygroundPainterToolboxLine");
  this.toolboxLine.removeClass("entryToolboxLineClicked");
  this.toolboxRect.addClass("entryPlaygroundPainterToolboxRect");
  this.toolboxRect.removeClass("entryToolboxRectClicked");
  this.toolboxCircle.addClass("entryPlaygroundPainterToolboxCircle");
  this.toolboxCircle.removeClass("entryToolBoxCircleClicked");
  this.toolboxText.addClass("entryPlaygroundPainterToolboxText");
  this.toolboxText.removeClass("entryToolBoxTextClicked");
  this.toolboxFill.addClass("entryPlaygroundPainterToolboxFill");
  this.toolboxFill.removeClass("entryToolBoxFillClicked");
  this.toolboxErase.addClass("entryPlaygroundPainterToolboxErase");
  this.toolboxErase.removeClass("entryToolBoxEraseClicked");
  this.attrColorSpoid.addClass("painterAttrColorSpoid");
  this.attrColorSpoid.removeClass("painterAttrColorSpoidClicked");
  this.attrResizeArea.addClass("entryRemove");
  this.attrRotateArea.addClass("entryRemove");
  this.attrThickArea.addClass("entryRemove");
  this.attrFontArea.addClass("entryRemove");
  this.attrLineArea.addClass("entryRemove");
  this.attrColorArea.addClass("entryRemove");
  this.attrCircleArea.addClass("entryRemove");
  this.attrColorSpoid.addClass("entryRemove");
  this.attrFontArea.addClass("entryRemove");
  this.attrBackgroundArea.addClass("entryRemove");
  this.flipObject.addClass("entryRemove");
  this.attrThickArea.painterAttrShapeLineColor.addClass("entryRemove");
  this.attrBackgroundArea.painterAttrShapeBackgroundColor.addClass("entryRemove");
  this.attrCircleArea.painterAttrCircle.addClass("entryRemove");
  this.inputField && !this.inputField._isHidden && (this.inputField.hide(), this.stage.update());
};
Entry.Painter.prototype.selectToolbox = function(a) {
  this.toolbox.selected = a;
  "erase" != a && $(".entryPlaygroundPainterContainer").removeClass("dd");
  this.initDisplay();
  "cursor" !== a && this.clearHandle();
  "text" !== a && this.inputField && delete this.inputField;
  switch(a) {
    case "cursor":
      this.restoreHandle();
      this.toolboxCursor.addClass("entryToolboxCursorClicked");
      this.attrResizeArea.removeClass("entryRemove");
      this.attrRotateArea.removeClass("entryRemove");
      this.flipObject.removeClass("entryRemove");
      break;
    case "select":
      this.toolboxSelect.addClass("entryToolboxSelectClicked");
      break;
    case "pen":
      this.toolboxPen.addClass("entryToolboxPenClicked");
      this.attrThickArea.removeClass("entryRemove");
      this.attrColorArea.removeClass("entryRemove");
      this.attrCircleArea.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("entryRemove");
      this.attrThickArea.painterAttrShapeLineColor.removeClass("entryRemove");
      break;
    case "line":
      this.toolboxLine.addClass("entryToolboxLineClicked");
      this.attrThickArea.removeClass("entryRemove");
      this.attrColorArea.removeClass("entryRemove");
      this.attrCircleArea.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("entryRemove");
      this.attrThickArea.painterAttrShapeLineColor.removeClass("entryRemove");
      break;
    case "rect":
      this.toolboxRect.addClass("entryToolboxRectClicked");
      this.attrThickArea.removeClass("entryRemove");
      this.attrColorArea.removeClass("entryRemove");
      this.attrCircleArea.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("entryRemove");
      this.attrBackgroundArea.removeClass("entryRemove");
      this.attrThickArea.painterAttrShapeLineColor.removeClass("entryRemove");
      this.attrBackgroundArea.painterAttrShapeBackgroundColor.removeClass("entryRemove");
      break;
    case "circle":
      this.toolboxCircle.addClass("entryToolBoxCircleClicked");
      this.attrThickArea.removeClass("entryRemove");
      this.attrColorArea.removeClass("entryRemove");
      this.attrCircleArea.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("entryRemove");
      this.attrThickArea.painterAttrShapeLineColor.removeClass("entryRemove");
      this.attrBackgroundArea.removeClass("entryRemove");
      this.attrBackgroundArea.painterAttrShapeBackgroundColor.removeClass("entryRemove");
      break;
    case "text":
      this.toolboxText.addClass("entryToolBoxTextClicked");
      this.attrFontArea.removeClass("entryRemove");
      this.attrColorArea.removeClass("entryRemove");
      this.attrCircleArea.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("entryRemove");
      this.attrCircleArea.painterAttrCircle.removeClass("entryRemove");
      break;
    case "fill":
      this.toolboxFill.addClass("entryToolBoxFillClicked");
      this.attrColorArea.removeClass("entryRemove");
      this.attrCircleArea.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("entryRemove");
      this.attrCircleArea.painterAttrCircle.removeClass("entryRemove");
      break;
    case "erase":
      $(".entryPlaygroundPainterContainer").addClass("dd");
      this.toolboxErase.addClass("entryToolBoxEraseClicked");
      this.attrThickArea.removeClass("entryRemove");
      break;
    case "spoid":
      this.attrColorArea.removeClass("entryRemove");
      this.attrCircleArea.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("entryRemove");
      this.attrColorSpoid.removeClass("painterAttrColorSpoid");
      this.attrColorSpoid.addClass("painterAttrColorSpoidClicked");
      break;
    case "coordinate":
      this.toggleCoordinator();
  }
};
Entry.Painter2 = function(a) {
  this.view = a;
  this.baseUrl = Entry.painterBaseUrl || "/lib/literallycanvas/lib/img";
  this.file = {id:Entry.generateHash(), name:"\uc0c8\uadf8\ub9bc", modified:!1, mode:"new"};
  Entry.addEventListener("pictureImport", function(b) {
    this.addPicture(b);
  }.bind(this));
  this.clipboard = null;
};
(function(a) {
  a.initialize = function() {
    if (!this.lc) {
      var b = this.baseUrl, a = new Image;
      a.src = b + "/transparent-pattern.png";
      this.lc = LC.init(this.view, {imageURLPrefix:b, zoomMax:3, zoomMin:.5, toolbarPosition:"bottom", imageSize:{width:960, height:540}, backgroundShapes:[LC.createShape("Rectangle", {x:0, y:0, width:960, height:540, strokeWidth:0, strokeColor:"transparent"})]});
      a.onload = function() {
        this.lc.repaintLayer("background");
      }.bind(this);
      b = function(b) {
        b.shape && !b.opts && b.shape.isPass || b.opts && b.opts.isPass ? Entry.do("processPicture", b, this.lc) : Entry.do("editPicture", b, this.lc);
        this.file.modified = !0;
      }.bind(this);
      this.lc.on("clear", b);
      this.lc.on("shapeEdit", b);
      this.lc.on("shapeSave", b);
      this.lc.on("toolChange", function(b) {
        this.updateEditMenu();
      }.bind(this));
      this.lc.on("lc-pointerdrag", this.stagemousemove.bind(this));
      this.lc.on("lc-pointermove", this.stagemousemove.bind(this));
      this.initTopBar();
      this.updateEditMenu();
      Entry.keyPressed && Entry.keyPressed.attach(this, this._keyboardPressControl);
      Entry.keyUpped && Entry.keyUpped.attach(this, this._keyboardUpControl);
    }
  };
  a.show = function() {
    this.lc || this.initialize();
    this.isShow = !0;
  };
  a.hide = function() {
    this.isShow = !1;
  };
  a.changePicture = function(b) {
    this.file && this.file.id === b.id || (this.file.modified && confirm("\uc218\uc815\ub41c \ub0b4\uc6a9\uc744 \uc800\uc7a5\ud558\uc2dc\uaca0\uc2b5\ub2c8\uae4c?") && this.file_save(!0), this.file.modified = !1, this.lc.clear(!1), this.file.id = b.id ? b.id : Entry.generateHash(), this.file.name = b.name, this.file.mode = "edit", this.addPicture(b, !0));
  };
  a.addPicture = function(b, a) {
    var c = new Image;
    c.src = b.fileurl ? b.fileurl : Entry.defaultPath + "/uploads/" + b.filename.substring(0, 2) + "/" + b.filename.substring(2, 4) + "/image/" + b.filename + ".png";
    b = b.dimension;
    var e = LC.createShape("Image", {x:480, y:270, width:b.width, height:b.height, image:c});
    this.lc.saveShape(e, !a);
    c.onload = function() {
      this.lc.setTool(this.lc.tools.SelectShape);
      this.lc.tool.setShape(this.lc, e);
    }.bind(this);
  };
  a.copy = function() {
    if ("SelectShape" === this.lc.tool.name && this.lc.tool.selectedShape) {
      var b = this.lc.tool.selectedShape;
      this.clipboard = {className:b.className, data:b.toJSON()};
      this.updateEditMenu();
    }
  };
  a.cut = function() {
    "SelectShape" === this.lc.tool.name && this.lc.tool.selectedShape && (this.copy(), this.lc.removeShape(this.lc.tool.selectedShape), this.lc.tool.setShape(this.lc, null));
  };
  a.paste = function() {
    if (this.clipboard) {
      var b = this.lc.addShape(this.clipboard);
      this.lc.setTool(this.lc.tools.SelectShape);
      this.lc.tool.setShape(this.lc, b);
    }
  };
  a.updateEditMenu = function() {
    var b = "SelectShape" === this.lc.tool.name ? "block" : "none";
    this._cutButton.style.display = b;
    this._copyButton.style.display = b;
    this._pasteButton.style.display = this.clipboard ? "block" : "none";
  };
  a.file_save = function() {
    this.lc.trigger("dispose");
    var b = this.lc.getImage().toDataURL();
    this.file_ = JSON.parse(JSON.stringify(this.file));
    Entry.dispatchEvent("saveCanvasImage", {file:this.file_, image:b});
    this.file.modified = !1;
  };
  a.newPicture = function() {
    var b = {dimension:{height:1, width:1}, fileurl:Entry.mediaFilePath + "_1x1.png", name:Lang.Workspace.new_picture};
    b.id = Entry.generateHash();
    Entry.playground.addPicture(b, !0);
  };
  a._keyboardPressControl = function(b) {
    if (this.isShow && !Entry.Utils.isInInput(b)) {
      var a = b.keyCode || b.which, d = b.ctrlKey;
      8 == a || 46 == a ? (this.cut(), b.preventDefault()) : d && (67 == a ? this.copy() : 88 == a && this.cut());
      d && 86 == a && this.paste();
      this.lc.trigger("keyDown", b);
    }
  };
  a._keyboardUpControl = function(b) {
    this.lc.trigger("keyUp", b);
  };
  a.initTopBar = function() {
    var b = this, a = Entry.createElement(document.getElementById("canvas-top-menu"));
    a.addClass("entryPlaygroundPainterTop");
    a.addClass("entryPainterTop");
    var d = Entry.createElement("nav", "entryPainterTopMenu");
    d.addClass("entryPlaygroundPainterTopMenu");
    a.appendChild(d);
    var e = Entry.createElement("ul");
    d.appendChild(e);
    var f = Entry.createElement("li");
    d.appendChild(f);
    d = Entry.createElement("a", "entryPainterTopMenuFileNew");
    d.bindOnClick(function() {
      b.newPicture();
    });
    d.addClass("entryPlaygroundPainterTopMenuFileNew");
    d.innerHTML = Lang.Workspace.new_picture;
    f.appendChild(d);
    d = Entry.createElement("li", "entryPainterTopMenuFile");
    d.addClass("entryPlaygroundPainterTopMenuFile");
    d.innerHTML = Lang.Workspace.painter_file;
    e.appendChild(d);
    f = Entry.createElement("ul");
    d.appendChild(f);
    d = Entry.createElement("li");
    f.appendChild(d);
    var g = Entry.createElement("a", "entryPainterTopMenuFileSave");
    g.bindOnClick(function() {
      b.file_save(!1);
    });
    g.addClass("entryPainterTopMenuFileSave");
    g.innerHTML = Lang.Workspace.painter_file_save;
    d.appendChild(g);
    d = Entry.createElement("li");
    f.appendChild(d);
    f = Entry.createElement("a", "entryPainterTopMenuFileSaveAs");
    f.bindOnClick(function() {
      b.file.mode = "new";
      b.file_save(!1);
    });
    f.addClass("entryPlaygroundPainterTopMenuFileSaveAs");
    f.innerHTML = Lang.Workspace.painter_file_saveas;
    d.appendChild(f);
    f = Entry.createElement("li", "entryPainterTopMenuEdit");
    f.addClass("entryPlaygroundPainterTopMenuEdit");
    f.innerHTML = Lang.Workspace.painter_edit;
    e.appendChild(f);
    e = Entry.createElement("ul");
    f.appendChild(e);
    f = Entry.createElement("li");
    e.appendChild(f);
    d = Entry.createElement("a", "entryPainterTopMenuEditImportLink");
    d.bindOnClick(function() {
      Entry.dispatchEvent("openPictureImport");
    });
    d.addClass("entryPainterTopMenuEditImport");
    d.innerHTML = Lang.Workspace.get_file;
    f.appendChild(d);
    f = Entry.createElement("li");
    e.appendChild(f);
    d = Entry.createElement("a", "entryPainterTopMenuEditCopy");
    d.bindOnClick(function() {
      b.copy();
    });
    d.addClass("entryPlaygroundPainterTopMenuEditCopy");
    d.innerHTML = Lang.Workspace.copy_file;
    f.appendChild(d);
    this._copyButton = f;
    f = Entry.createElement("li");
    e.appendChild(f);
    d = Entry.createElement("a", "entryPainterTopMenuEditCut");
    d.bindOnClick(function() {
      b.cut();
    });
    d.addClass("entryPlaygroundPainterTopMenuEditCut");
    d.innerHTML = Lang.Workspace.cut_picture;
    f.appendChild(d);
    this._cutButton = f;
    f = Entry.createElement("li");
    e.appendChild(f);
    d = Entry.createElement("a", "entryPainterTopMenuEditPaste");
    d.bindOnClick(function() {
      b.paste();
    });
    d.addClass("entryPlaygroundPainterTopMenuEditPaste");
    d.innerHTML = Lang.Workspace.paste_picture;
    f.appendChild(d);
    this._pasteButton = f;
    f = Entry.createElement("li");
    e.appendChild(f);
    e = Entry.createElement("a", "entryPainterTopMenuEditEraseAll");
    e.addClass("entryPlaygroundPainterTopMenuEditEraseAll");
    e.innerHTML = Lang.Workspace.remove_all;
    e.bindOnClick(function() {
      b.lc.clear();
    });
    f.appendChild(e);
    this.painterTopStageXY = e = Entry.createElement("div", "entryPainterTopStageXY");
    e.addClass("entryPlaygroundPainterTopStageXY");
    a.appendChild(e);
    Entry.addEventListener("pictureSelected", this.changePicture.bind(this));
  };
  a.stagemousemove = function(b) {
    this.painterTopStageXY.textContent = "x:" + b.x.toFixed(1) + ", y:" + b.y.toFixed(1);
  };
})(Entry.Painter2.prototype);
Entry.BlockParser = function(a) {
  this.syntax = a;
  this._iterVariableCount = 0;
  this._iterVariableChunk = ["i", "j", "k"];
};
(function(a) {
  a.Code = function(b) {
    if (b instanceof Entry.Thread) {
      return this.Thread(b);
    }
    if (b instanceof Entry.Block) {
      return this.Block(b);
    }
    var a = "";
    b = b.getThreads();
    for (var d = 0;d < b.length;d++) {
      a += this.Thread(b[d]);
    }
    return a;
  };
  a.Thread = function(b) {
    if (b instanceof Entry.Block) {
      return this.Block(b);
    }
    var a = "";
    b = b.getBlocks();
    for (var d = 0;d < b.length;d++) {
      a += this.Block(b[d]);
    }
    return a;
  };
  a.Block = function(b) {
    var a = b._schema.syntax;
    return a ? this[a[0]](b) : "";
  };
  a.Program = function(b) {
    return "";
  };
  a.Scope = function(b) {
    b = b._schema.syntax.concat();
    return b.splice(1, b.length - 1).join(".") + "();\n";
  };
  a.BasicFunction = function(b) {
    b = this.Thread(b.statements[0]);
    return "function promise() {\n" + this.indent(b) + "}\n";
  };
  a.BasicIteration = function(b) {
    var a = b.params[0], d = this.publishIterateVariable();
    b = this.Thread(b.statements[0]);
    this.unpublishIterateVariable();
    return "for (var " + d + " = 0; " + d + " < " + a + "; " + d + "++){\n" + this.indent(b) + "}\n";
  };
  a.BasicIf = function(b) {
    var a = this.Thread(b.statements[0]);
    return "if (" + b._schema.syntax.concat()[1] + ") {\n" + this.indent(a) + "}\n";
  };
  a.BasicWhile = function(b) {
    var a = this.Thread(b.statements[0]);
    return "while (" + b._schema.syntax.concat()[1] + ") {\n" + this.indent(a) + "}\n";
  };
  a.indent = function(b) {
    var a = "    ";
    b = b.split("\n");
    b.pop();
    return a += b.join("\n    ") + "\n";
  };
  a.publishIterateVariable = function() {
    var b = "", a = this._iterVariableCount;
    do {
      b = this._iterVariableChunk[a % 3] + b, a = parseInt(a / 3) - 1, 0 === a && (b = this._iterVariableChunk[0] + b);
    } while (0 < a);
    this._iterVariableCount++;
    return b;
  };
  a.unpublishIterateVariable = function() {
    this._iterVariableCount && this._iterVariableCount--;
  };
})(Entry.BlockParser.prototype);
Entry.JSParser = function(a) {
  this.syntax = a;
  this.scopeChain = [];
  this.scope = null;
};
(function(a) {
  a.Program = function(b) {
    var a = [], d = [];
    d.push({type:this.syntax.Program});
    var e = this.initScope(b), d = d.concat(this.BlockStatement(b));
    this.unloadScope();
    a.push(d);
    return a = a.concat(e);
  };
  a.Identifier = function(b, a) {
    return a ? a[b.name] : this.scope[b.name];
  };
  a.ExpressionStatement = function(b) {
    b = b.expression;
    return this[b.type](b);
  };
  a.ForStatement = function(b) {
    var a = b.init, d = b.test, e = b.update, f = b.body;
    if (this.syntax.ForStatement) {
      throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    var f = this[f.type](f), a = a.declarations[0].init.value, g = d.operator, d = d.right.value, h = 0;
    "++" != e.operator && (e = a, a = d, d = e);
    switch(g) {
      case "<":
        h = d - a;
        break;
      case "<=":
        h = d + 1 - a;
        break;
      case ">":
        h = a - d;
        break;
      case ">=":
        h = a + 1 - d;
    }
    return this.BasicIteration(b, h, f);
  };
  a.BlockStatement = function(b) {
    var a = [];
    b = b.body;
    for (var d = 0;d < b.length;d++) {
      var e = b[d], f = this[e.type](e);
      if (f) {
        if (void 0 === f.type) {
          throw {message:"\ud574\ub2f9\ud558\ub294 \ube14\ub85d\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.", node:e};
        }
        f && a.push(f);
      }
    }
    return a;
  };
  a.EmptyStatement = function(b) {
    throw {message:"empty\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.DebuggerStatement = function(b) {
    throw {message:"debugger\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.WithStatement = function(b) {
    throw {message:"with\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.ReturnStaement = function(b) {
    throw {message:"return\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.LabeledStatement = function(b) {
    throw {message:"label\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.BreakStatement = function(b) {
    throw {message:"break\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.ContinueStatement = function(b) {
    throw {message:"continue\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.IfStatement = function(b) {
    if (this.syntax.IfStatement) {
      throw {message:"if\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    return this.BasicIf(b);
  };
  a.SwitchStatement = function(b) {
    throw {message:"switch\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.SwitchCase = function(b) {
    throw {message:"switch ~ case\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.ThrowStatement = function(b) {
    throw {message:"throw\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.TryStatement = function(b) {
    throw {message:"try\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.CatchClause = function(b) {
    throw {message:"catch\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.WhileStatement = function(b) {
    var a = b.body, d = this.syntax.WhileStatement, a = this[a.type](a);
    if (d) {
      throw {message:"while\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    return this.BasicWhile(b, a);
  };
  a.DoWhileStatement = function(b) {
    throw {message:"do ~ while\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.ForInStatement = function(b) {
    throw {message:"for ~ in\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.FunctionDeclaration = function(b) {
    if (this.syntax.FunctionDeclaration) {
      throw {message:"function\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    return null;
  };
  a.VariableDeclaration = function(b) {
    throw {message:"var\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.ThisExpression = function(b) {
    return this.scope.this;
  };
  a.ArrayExpression = function(b) {
    throw {message:"array\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.ObjectExpression = function(b) {
    throw {message:"object\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.Property = function(b) {
    throw {message:"init, get, set\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.FunctionExpression = function(b) {
    throw {message:"function\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.UnaryExpression = function(b) {
    throw {message:b.operator + "\uc740(\ub294) \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
  };
  a.UnaryOperator = function() {
    return "- + ! ~ typeof void delete".split(" ");
  };
  a.updateOperator = function() {
    return ["++", "--"];
  };
  a.BinaryOperator = function() {
    return "== != === !== < <= > >= << >> >>> + - * / % , ^ & in instanceof".split(" ");
  };
  a.AssignmentExpression = function(b) {
    throw {message:b.operator + "\uc740(\ub294) \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
  };
  a.AssignmentOperator = function() {
    return "= += -= *= /= %= <<= >>= >>>= ,= ^= &=".split(" ");
  };
  a.LogicalExpression = function(b) {
    throw {message:b.operator + "\uc740(\ub294) \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
  };
  a.LogicalOperator = function() {
    return ["||", "&&"];
  };
  a.MemberExpression = function(b) {
    var a = b.object, d = b.property;
    console.log(a.type);
    a = this[a.type](a);
    console.log(a);
    d = this[d.type](d, a);
    if (Object(a) !== a || Object.getPrototypeOf(a) !== Object.prototype) {
      throw {message:a + "\uc740(\ub294) \uc798\ubabb\ub41c \uba64\ubc84 \ubcc0\uc218\uc785\ub2c8\ub2e4.", node:b};
    }
    a = d;
    if (!a) {
      throw {message:d + "\uc774(\uac00) \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.", node:b};
    }
    return a;
  };
  a.ConditionalExpression = function(b) {
    throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.UpdateExpression = function(b) {
    throw {message:b.operator + "\uc740(\ub294) \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub801\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
  };
  a.CallExpression = function(b) {
    b = b.callee;
    return {type:this[b.type](b)};
  };
  a.NewExpression = function(b) {
    throw {message:"new\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.SequenceExpression = function(b) {
    throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.initScope = function(b) {
    if (null === this.scope) {
      var a = function() {
      };
      a.prototype = this.syntax.Scope;
    } else {
      a = function() {
      }, a.prototype = this.scope;
    }
    this.scope = new a;
    this.scopeChain.push(this.scope);
    return this.scanDefinition(b);
  };
  a.unloadScope = function() {
    this.scopeChain.pop();
    this.scope = this.scopeChain.length ? this.scopeChain[this.scopeChain.length - 1] : null;
  };
  a.scanDefinition = function(b) {
    b = b.body;
    for (var a = [], d = 0;d < b.length;d++) {
      var e = b[d];
      "FunctionDeclaration" === e.type && (this.scope[e.id.name] = this.scope.promise, this.syntax.BasicFunction && (e = e.body, a.push([{type:this.syntax.BasicFunction, statements:[this[e.type](e)]}])));
    }
    return a;
  };
  a.BasicFunction = function(b, a) {
    return null;
  };
  a.BasicIteration = function(b, a, d) {
    var c = this.syntax.BasicIteration;
    if (!c) {
      throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    return {params:[a], type:c, statements:[d]};
  };
  a.BasicWhile = function(b, a) {
    var c = b.test.raw;
    if (this.syntax.BasicWhile[c]) {
      return {type:this.syntax.BasicWhile[c], statements:[a]};
    }
    throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b.test};
  };
  a.BasicIf = function(b) {
    var a = b.consequent, a = this[a.type](a);
    try {
      var d = "", e = "===" === b.test.operator ? "==" : b.test.operator;
      if ("Identifier" === b.test.left.type && "Literal" === b.test.right.type) {
        d = b.test.left.name + " " + e + " " + b.test.right.raw;
      } else {
        if ("Literal" === b.test.left.type && "Identifier" === b.test.right.type) {
          d = b.test.right.name + " " + e + " " + b.test.left.raw;
        } else {
          throw Error();
        }
      }
      if (this.syntax.BasicIf[d]) {
        return Array.isArray(a) || "object" !== typeof a || (a = [a]), {type:this.syntax.BasicIf[d], statements:[a]};
      }
      throw Error();
    } catch (f) {
      throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b.test};
    }
  };
})(Entry.JSParser.prototype);
Entry.ParserOld = {};
Entry.Parser = function(a, b, c) {
  this._mode = a;
  this.syntax = {};
  this.codeMirror = c;
  this._lang = b || "js";
  this.availableCode = [];
  "maze" === a && (this._stageId = Number(Ntry.configManager.getConfig("stageId")), "object" == typeof NtryData && this.setAvailableCode(NtryData.config[this._stageId].availableCode, NtryData.player[this._stageId].code));
  this.mappingSyntax(a);
  switch(this._lang) {
    case "js":
      this._parser = new Entry.JSParser(this.syntax);
      b = this.syntax;
      var d = {}, e;
      for (e in b.Scope) {
        d[e + "();\n"] = b.Scope[e];
      }
      "BasicIf" in b && (d.front = "BasicIf");
      CodeMirror.commands.javascriptComplete = function(b) {
        CodeMirror.showHint(b, null, {globalScope:d});
      };
      c.on("keyup", function(b, a) {
        !b.state.completionActive && 65 <= a.keyCode && 95 >= a.keyCode && CodeMirror.showHint(b, null, {completeSingle:!1, globalScope:d});
      });
      break;
    case "block":
      this._parser = new Entry.BlockParser(this.syntax);
  }
};
(function(a) {
  a.parse = function(b) {
    var a = null;
    switch(this._lang) {
      case "js":
        try {
          var d = acorn.parse(b), a = this._parser.Program(d);
        } catch (e) {
          this.codeMirror && (e instanceof SyntaxError ? (b = {from:{line:e.loc.line - 1, ch:e.loc.column - 2}, to:{line:e.loc.line - 1, ch:e.loc.column + 1}}, e.message = "\ubb38\ubc95 \uc624\ub958\uc785\ub2c8\ub2e4.") : (b = this.getLineNumber(e.node.start, e.node.end), b.message = e.message, b.severity = "error", this.codeMirror.markText(b.from, b.to, {className:"CodeMirror-lint-mark-error", __annotation:b, clearOnEnter:!0})), Entry.toast.alert("Error", e.message)), a = [];
        }
        break;
      case "block":
        b = this._parser.Code(b).match(/(.*{.*[\S|\s]+?}|.+)/g), a = Array.isArray(b) ? b.reduce(function(b, a, c) {
          1 === c && (b += "\n");
          return (-1 < a.indexOf("function") ? a + b : b + a) + "\n";
        }) : "";
    }
    return a;
  };
  a.getLineNumber = function(b, a) {
    var c = this.codeMirror.getValue(), e = {from:{}, to:{}};
    b = c.substring(0, b).split(/\n/gi);
    e.from.line = b.length - 1;
    e.from.ch = b[b.length - 1].length;
    a = c.substring(0, a).split(/\n/gi);
    e.to.line = a.length - 1;
    e.to.ch = a[a.length - 1].length;
    return e;
  };
  a.mappingSyntax = function(b) {
    for (var a = Object.keys(Entry.block), d = 0;d < a.length;d++) {
      var e = a[d], f = Entry.block[e];
      if (f.mode === b && -1 < this.availableCode.indexOf(e) && (f = f.syntax)) {
        for (var g = this.syntax, h = 0;h < f.length;h++) {
          var k = f[h];
          if (h === f.length - 2 && "function" === typeof f[h + 1]) {
            g[k] = f[h + 1];
            break;
          }
          g[k] || (g[k] = {});
          h === f.length - 1 ? g[k] = e : g = g[k];
        }
      }
    }
  };
  a.setAvailableCode = function(b, a) {
    var c = [];
    b.forEach(function(b, a) {
      b.forEach(function(b, a) {
        c.push(b.type);
      });
    });
    a instanceof Entry.Code ? a.getBlockList().forEach(function(b) {
      b.type !== NtryData.START && -1 === c.indexOf(b.type) && c.push(b.type);
    }) : a.forEach(function(b, a) {
      b.forEach(function(b, a) {
        b.type !== NtryData.START && -1 === c.indexOf(b.type) && c.push(b.type);
      });
    });
    this.availableCode = this.availableCode.concat(c);
  };
})(Entry.Parser.prototype);
Entry.Pdf = function(a) {
  this.generateView(a);
};
p = Entry.Pdf.prototype;
p.generateView = function(a) {
  var b = Entry.createElement("div", "entryPdfWorkspace");
  b.addClass("entryRemove");
  this._view = b;
  var c = "/pdfjs/web/viewer.html";
  a && "" != a && (c += "?file=" + a);
  pdfViewIframe = Entry.createElement("iframe", "entryPdfIframeWorkspace");
  pdfViewIframe.setAttribute("id", "pdfViewIframe");
  pdfViewIframe.setAttribute("frameborder", 0);
  pdfViewIframe.setAttribute("src", c);
  b.appendChild(pdfViewIframe);
};
p.getView = function() {
  return this._view;
};
p.resize = function() {
  var a = document.getElementById("entryContainerWorkspaceId"), b = document.getElementById("pdfViewIframe");
  w = a.offsetWidth;
  b.width = w + "px";
  b.height = 9 * w / 16 + "px";
};
Entry.FieldTrashcan = function(a) {
  a && this.setBoard(a);
  this.dragBlockObserver = this.dragBlock = null;
  this.isOver = !1;
  Entry.windowResized && Entry.windowResized.attach(this, this.setPosition);
};
(function(a) {
  a._generateView = function() {
    this.svgGroup = this.board.svg.elem("g");
    this.renderStart();
    this._addControl();
  };
  a.renderStart = function() {
    var b = Entry.mediaFilePath + "delete_";
    this.trashcanTop = this.svgGroup.elem("image", {href:b + "cover.png", width:60, height:20});
    this.svgGroup.elem("image", {href:b + "body.png", y:20, width:60, height:60});
  };
  a._addControl = function() {
    $(this.svgGroup).bind("mousedown", function(b) {
      Entry.Utils.isRightButton(b) && (b.stopPropagation(), $("#entryWorkspaceBoard").css("background", "white"));
    });
  };
  a.updateDragBlock = function() {
    var b = this.board.dragBlock, a = this.dragBlockObserver;
    a && (a.destroy(), this.dragBlockObserver = null);
    b ? this.dragBlockObserver = b.observe(this, "checkBlock", ["x", "y"]) : (this.isOver && this.dragBlock && !this.dragBlock.block.getPrevBlock() && (this.dragBlock.block.doDestroyBelow(!0), createjs.Sound.play("entryDelete")), this.tAnimation(!1));
    this.dragBlock = b;
  };
  a.checkBlock = function() {
    var b = this.dragBlock;
    if (b && b.block.isDeletable()) {
      var a = this.board.offset(), d = this.getPosition(), e = d.x + a.left, a = d.y + a.top, f, g;
      if (b = b.dragInstance) {
        f = b.offsetX, g = b.offsetY;
      }
      this.tAnimation(f >= e && g >= a);
    }
  };
  a.align = function() {
    var b = this.getPosition();
    this.svgGroup.attr({transform:"translate(" + b.x + "," + b.y + ")"});
  };
  a.setPosition = function() {
    if (this.board) {
      var b = this.board.svgDom;
      this._x = b.width() - 110;
      this._y = b.height() - 110;
      this.align();
    }
  };
  a.getPosition = function() {
    return {x:this._x, y:this._y};
  };
  a.tAnimation = function(b) {
    if (b !== this.isOver) {
      b = void 0 === b ? !0 : b;
      var a, d = this.trashcanTop;
      a = b ? {translateX:15, translateY:-25, rotateZ:30} : {translateX:0, translateY:0, rotateZ:0};
      $(d).velocity(a, {duration:50});
      this.isOver = b;
    }
  };
  a.setBoard = function(b) {
    this._dragBlockObserver && this._dragBlockObserver.destroy();
    this.board = b;
    this.svgGroup || this._generateView();
    var a = b.svg, d = a.firstChild;
    d ? a.insertBefore(this.svgGroup, d) : a.appendChild(this.svgGroup);
    this._dragBlockObserver = b.observe(this, "updateDragBlock", ["dragBlock"]);
    this.svgGroup.attr({filter:"url(#entryTrashcanFilter_" + b.suffix + ")"});
    this.setPosition();
  };
})(Entry.FieldTrashcan.prototype);
Entry.Queue = function() {
  this.tail = this.head = null;
};
function Node(a) {
  this.data = a;
  this.next = null;
}
(function(a) {
  a.enqueue = function(b) {
    b = new Node(b);
    null === this.head ? this.head = b : this.tail.next = b;
    this.tail = b;
  };
  a.dequeue = function() {
    var b;
    null !== this.head && (b = this.head.data, this.head = this.head.next);
    return b;
  };
  a.clear = function() {
    for (;this.dequeue();) {
    }
  };
  a.toString = function() {
    for (var b = this.head, a = [];b;) {
      a.push(b.data), b = b.next;
    }
    return a.toString();
  };
})(Entry.Queue.prototype);
Entry.TextCodingUtil = {};
(function(a) {
  this._funcParams;
  this._funcParamQ;
  this._currentObject;
  a.initQueue = function() {
    this._funcParamQ = new Entry.Queue;
    this._funcNameQ = new Entry.Queue;
  };
  a.clearQueue = function() {
    this._funcParamQ.clear();
    this._funcNameQ.clear();
  };
  a.indent = function(b) {
    var a = "\t";
    b = b.split("\n");
    b.pop();
    a += b.join("\n\t");
    return a = "\t" + a.trim();
  };
  a.isNumeric = function(b) {
    b = String(Math.abs(b));
    return b.match(/^-?\d+$|^-\d+$/) || b.match(/^-?\d+\.\d+$/) ? !0 : !1;
  };
  a.isBinaryOperator = function(b) {
    return "==" == b || ">" == b || "<" == b || ">=" == b || "<=" == b || "+" == b || "-" == b || "*" == b || "/" == b ? !0 : !1;
  };
  a.binaryOperatorConvert = function(b) {
    switch(b) {
      case "==":
        b = "EQUAL";
        break;
      case ">":
        b = "GREATER";
        break;
      case "<":
        b = "LESS";
        break;
      case ">=":
        b = "GREATER_OR_EQUAL";
        break;
      case "<=":
        b = "LESS_OR_EQUAL";
        break;
      case "+":
        b = "PLUS";
        break;
      case "-":
        b = "MINUS";
        break;
      case "*":
        b = "MULTIFLY";
        break;
      case "/":
        b = "DIVIDE";
    }
    return b;
  };
  a.logicalExpressionConvert = function(b) {
    switch(b) {
      case "&&":
        b = null;
        break;
      case "||":
        b = null;
    }
    return b;
  };
  a.dropdownDynamicNameToIdConvertor = function(b, a, d) {
    if (Entry.getMainWS() && Entry.getMainWS().vimBoard) {
      var c = Entry.getMainWS().vimBoard;
      if (c) {
        var f = c._currentScene;
      }
    }
    if ("scenes" == a) {
      var g = Entry.scene.getScenes(), h;
      for (h in g) {
        if (d = g[h], b == d.name) {
          return d.id;
        }
      }
    } else {
      if ("spritesWithMouse" == a || "spritesWithSelf" == a || "collision" == a || "clone" == a) {
        var g = Entry.container.getAllObjects(), k;
        for (k in g) {
          if (d = g[k], d.scene.id == f.id && b == d.name) {
            return d.id;
          }
        }
      } else {
        if ("variables" == a) {
          var l = Entry.variableContainer.variables_;
          for (g in l) {
            if (f = l[g], f.name_ == b) {
              if (d) {
                if (d.id == f.object_) {
                  return f.id_;
                }
              } else {
                return f.id_;
              }
            }
          }
        } else {
          if ("lists" == a) {
            for (g in l = Entry.variableContainer.lists_, l) {
              if (f = l[g], f.name_ == b) {
                if (d) {
                  if (d.id == f.object_) {
                    return f.id_;
                  }
                } else {
                  return f.id_;
                }
              }
            }
          } else {
            if ("messages" == a) {
              for (g in d = Entry.variableContainer.messages_, d) {
                if (l = d[g], l.name == b) {
                  return l.id;
                }
              }
            } else {
              if ("pictures" == a) {
                for (l in d = c._currentObject, g = d.pictures, g) {
                  if (d = g[l], d.name == b) {
                    return d.id;
                  }
                }
              } else {
                if ("sounds" == a) {
                  for (l in d = c._currentObject, g = d.sounds, g) {
                    if (d = g[l], d.name == b) {
                      return d.id;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return b;
  };
  a.dropdownDynamicIdToNameConvertor = function(b, a) {
    var c;
    if ("variables" == a) {
      var e = Entry.variableContainer.variables_, f;
      for (f in e) {
        var g = e[f];
        if (g.id_ == b) {
          c = g.object_ ? "self." + g.name_ : g.name_;
          break;
        }
      }
    } else {
      if ("lists" == a) {
        for (f in g = Entry.variableContainer.lists_, g) {
          if (e = g[f], e.id_ == b) {
            c = e.object_ ? "self." + e.name_ : e.name_;
            break;
          }
        }
      } else {
        if ("messages" == a) {
          for (f in g = Entry.variableContainer.messages_, g) {
            if (e = g[f], e.id == b) {
              c = e.name;
              break;
            }
          }
        } else {
          if ("pictures" == a) {
            for (e in f = Entry.container.getAllObjects(), f) {
              var h = f[e], h = h.pictures;
              for (g in h) {
                if (a = h[g], a.id == b) {
                  return c = a.name;
                }
              }
            }
          } else {
            if ("sounds" == a) {
              for (e in f = Entry.container.getAllObjects(), f) {
                for (g in h = f[e], h = h.sounds, h) {
                  if (a = h[g], a.id == b) {
                    return c = a.name;
                  }
                }
              }
            } else {
              if ("scenes" == a) {
                for (h in e = Entry.scene.getScenes(), e) {
                  if (g = e[h], g.id == b) {
                    c = g.name;
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
    return c;
  };
  a.getDynamicIdByNumber = function(b, a) {
    var c = b;
    if (Entry.getMainWS() && Entry.getMainWS().vimBoard) {
      c = Entry.getMainWS().vimBoard;
    } else {
      return c;
    }
    var e = c._currentObject;
    if ("number" == typeof b) {
      if (c = "None", "pictures" == a.menuName) {
        if (0 < b) {
          a = Entry.container.getAllObjects();
          for (var f in a) {
            var g = a[f];
            if (g.id == e.id && (g = g.pictures[b - 1])) {
              c = g.name;
              break;
            }
          }
        }
      } else {
        if ("sounds" == a.menuName && 0 < b) {
          for (f in a = Entry.container.getAllObjects(), a) {
            if (g = a[f], g.id == e.id && (g = g.sounds[b - 1])) {
              c = g.name;
              break;
            }
          }
        }
      }
    } else {
      c = Entry.TextCodingUtil.dropdownDynamicNameToIdConvertor(b, a.menuName);
    }
    return c;
  };
  a.isLocalType = function(b, a) {
    if ("variables" == a) {
      a = Entry.variableContainer.variables_;
      for (var c in a) {
        var e = a[c];
        if (e.id_ == b) {
          if (e.object_) {
            return !0;
          }
          break;
        }
      }
    } else {
      if ("lists" == a) {
        for (c in a = Entry.variableContainer.lists_, a) {
          if (e = a[c], e.id_ == b) {
            if (e.object_) {
              return !0;
            }
            break;
          }
        }
      }
    }
    return !1;
  };
  a.binaryOperatorValueConvertor = function(b) {
    switch(b) {
      case '"EQUAL"':
        b = "==";
        break;
      case '"GREATER"':
        b = ">";
        break;
      case '"LESS"':
        b = "<";
        break;
      case '"GREATER_OR_EQUAL"':
        b = ">=";
        break;
      case '"LESS_OR_EQUAL"':
        b = "<=";
        break;
      case '"\uadf8\ub9ac\uace0"':
        b = "&&";
        break;
      case '"\ub610\ub294"':
        b = "||";
        break;
      case '"PLUS"':
        b = "+";
        break;
      case '"MINUS"':
        b = "-";
        break;
      case '"MULTI"':
        b = "*";
        break;
      case '"DIVIDE"':
        b = "/";
    }
    return b;
  };
  a.variableListFilter = function(b, a, d) {
    if ("None" == d) {
      return d;
    }
    var c = d;
    b = b.data.type;
    "change_variable" == b || "set_variable" == b || "get_variable" == b ? 1 == a && (c = eval(d)) : "length_of_list" == b || "is_included_in_list" == b ? 2 == a && (c = eval(d)) : "value_of_index_from_list" == b ? 2 == a ? c = eval(d) : 4 == a && this.isNumeric(d) && (c = d - 1) : "remove_value_from_list" == b ? 2 == a ? c = eval(d) : 1 == a && this.isNumeric(d) && (c = d - 1) : "insert_value_to_list" == b ? 2 == a ? c = eval(d) : 3 == a && this.isNumeric(d) && (c = d - 1) : "change_value_list_index" == 
    b ? 1 == a ? c = eval(d) : 2 == a && this.isNumeric(d) && (c = d - 1) : "add_value_to_list" == b && 2 == a && (c = eval(d));
    return c;
  };
  a.isGlobalVariableExisted = function(b) {
    var a = Entry.variableContainer.variables_, d;
    for (d in a) {
      var e = a[d];
      if (null === e.object_ && e.name_ == b) {
        return !0;
      }
    }
    return !1;
  };
  a.updateGlobalVariable = function(b, a) {
    var c = Entry.variableContainer.variables_, e;
    for (e in c) {
      var f = c[e];
      if (null === f.object_ && f.name_ == b) {
        c = f.toJSON();
        c.name = b;
        c.value = a;
        f.syncModel_(c);
        Entry.variableContainer.updateList();
        break;
      }
    }
  };
  a.createGlobalVariable = function(b, a) {
    this.isGlobalVariableExisted(b) || (Entry.variableContainer.addVariable({name:b, value:a, variableType:"variable"}), Entry.variableContainer.updateList());
  };
  a.isLocalVariableExisted = function(b, a) {
    var c = Entry.variableContainer.variables_, e;
    for (e in c) {
      var f = c[e];
      if (f.object_ === a.id && f.name_ == b) {
        return !0;
      }
    }
    return !1;
  };
  a.updateLocalVariable = function(b, a, d) {
    var c = Entry.variableContainer.variables_, f;
    for (f in c) {
      var g = c[f];
      if (g.object_ === d.id && g.name_ == b) {
        d = g.toJSON();
        d.name = b;
        d.value = a;
        g.syncModel_(d);
        Entry.variableContainer.updateList();
        break;
      }
    }
  };
  a.createLocalVariable = function(b, a, d) {
    this.isLocalVariableExisted(b, d) || (Entry.variableContainer.addVariable({name:b, value:a, object:d.id, variableType:"variable"}), Entry.variableContainer.updateList());
  };
  a.isLocalVariable = function(b) {
    var a = Entry.playground.object, d = Entry.variableContainer.variables_, e;
    for (e in d) {
      var f = d[e];
      if (f.object_ == a.id && f.id_ == b) {
        return !0;
      }
    }
    return !1;
  };
  a.isGlobalListExisted = function(b) {
    var a = Entry.variableContainer.lists_, d;
    for (d in a) {
      var e = a[d];
      if (null === e.object_ && e.name_ == b) {
        return !0;
      }
    }
    return !1;
  };
  a.updateGlobalList = function(b, a) {
    var c = Entry.variableContainer.lists_, e;
    for (e in c) {
      var f = c[e];
      if (null === f.object_ && f.name_ == b) {
        list = {x:f.x_, y:f.y_, id:f.id_, visible:f.visible_, name:b, isCloud:f.isCloud_, width:f.width_, height:f.height_, array:a};
        f.syncModel_(list);
        f.updateView();
        Entry.variableContainer.updateList();
        break;
      }
    }
  };
  a.createGlobalList = function(b, a) {
    this.isGlobalListExisted(b) || (Entry.variableContainer.addList({name:b, array:a, variableType:"list"}), Entry.variableContainer.updateList());
  };
  a.isLocalListExisted = function(b, a) {
    if (!a) {
      return !1;
    }
    var c = Entry.variableContainer.lists_, e;
    for (e in c) {
      var f = c[e];
      if (f.object_ === a.id && f.name_ == b) {
        return !0;
      }
    }
    return !1;
  };
  a.updateLocalList = function(b, a, d) {
    var c = Entry.variableContainer.lists_, f;
    for (f in c) {
      var g = c[f];
      if (g.object_ === d.id && g.name_ == b) {
        g.syncModel_({x:g.x_, y:g.y_, id:g.id_, visible:g.visible_, name:b, isCloud:g.isCloud_, width:g.width_, height:g.height_, array:a});
        g.updateView();
        Entry.variableContainer.updateList();
        break;
      }
    }
  };
  a.createLocalList = function(b, a, d) {
    this.isLocalListExisted(b, d) || (Entry.variableContainer.addList({name:b, array:a, object:d.id, variableType:"list"}), Entry.variableContainer.updateList());
  };
  a.isLocalList = function(b) {
    var a = Entry.playground.object, d = Entry.variableContainer.lists_, e;
    for (e in d) {
      var f = d[e];
      if (f.object_ == a.id && f.id_ == b) {
        return !0;
      }
    }
    return !1;
  };
  a.createMessage = function(b) {
    Entry.isExist(b, "name", Entry.variableContainer.messages_) || (Entry.variableContainer.addMessage({name:b}), Entry.variableContainer.updateList());
  };
  a.isEventBlock = function(b) {
    b = b.data.type;
    return "when_run_button_click" == b || "when_some_key_pressed" == b || "mouse_clicked" == b || "mouse_click_cancled" == b || "when_object_click" == b || "when_object_click_canceled" == b || "when_message_cast" == b || "when_scene_start" == b || "when_clone_start" == b ? !0 : !1;
  };
  a.isEntryEventBlockWithParam = function(b) {
    b = b.data.type;
    return "when_some_key_pressed" == b || "when_message_cast" == b ? !0 : !1;
  };
  a.isEventBlockByType = function(b) {
    return "when_run_button_click" == b || "when_some_key_pressed" == b || "mouse_clicked" == b || "mouse_click_cancled" == b || "when_object_click" == b || "when_object_click_canceled" == b || "when_message_cast" == b || "when_scene_start" == b || "when_clone_start" == b ? !0 : !1;
  };
  a.makeDefinition = function(b) {
    var a = /(%.)/mi;
    b = Entry.block[b.data.type].syntax.py[0].split(a);
    for (var d = "", e = 0;e < b.length;e++) {
      var f = b[e], d = a.test(f) ? d + "event" : d + f;
    }
    return d;
  };
  a.entryEventFilter = function(b) {
    var a = b.indexOf("("), d = b.indexOf(")"), e = b.substring(0, a);
    b = b.substring(a + 1, d);
    if (b = b.replace(/\"/g, "")) {
      b = isNaN(b) ? b.replace(/ /g, "_space_") : "num" + b, "None" == b && (b = "none");
    }
    return e + "(" + b + "):\n";
  };
  a.entryEventFuncFilter = function(b) {
    var a = !1;
    b = b.split("\n");
    for (var d in b) {
      var e = b[d], f = b[d].trim(), g = f.indexOf(":"), h = "";
      0 < g && (h = f.substring(0, g + 1));
      h = h.split("(");
      h = h[0];
      "def when_press_key" == h || "def when_get_signal" == h ? (e = e.replace(/def /, ""), g = e.indexOf(":"), f = a = "", 0 < g && (a = e.substring(0, g), f = e.substring(g + 1, e.length)), e = f ? a.concat("\n").concat(f.trim()) : a, b[d] = e, a = !0) : a && (e = b[d], e = e.replace(/\t/g, "    "), e = e.replace(/    /, ""), b[d] = e);
    }
    return b.join("\n");
  };
  a.eventBlockSyntaxFilter = function(b) {
    if ("when_start" == b || "when_press_key" == b || "when_click_mouse_on" == b || "when_click_mouse_off" == b || "when_click_object_on" == b || "when_click_object_off" == b || "when_get_signal" == b || "when_start_scene" == b || "when_make_clone" == b) {
      return "def " + b;
    }
  };
  a.isEntryEventFunc = function(b) {
    return "def when_start" == b || "def when_press_key" == b || "def when_click_mouse_on" == b || "def when_click_mouse_off" == b || "def when_click_object_on" == b || "def when_click_object_off" == b || "def when_get_signal" == b || "def when_start_scene" == b || "def when_make_clone" == b ? !0 : !1;
  };
  a.isEntryEventFuncByFullText = function(b) {
    var a = b.indexOf("(");
    b = b.substring(0, a);
    return "def when_start" == b || "def when_press_key" == b || "def when_click_mouse_on" == b || "def when_click_mouse_off" == b || "def when_click_object_on" == b || "def when_click_object_off" == b || "def when_get_signal" == b || "def when_start_scene" == b || "def when_make_clone" == b || "def entry_event_start" == b || "def entry_event_key" == b || "def entry_event_mouse_down" == b || "def entry_event_mouse_up" == b || "def entry_event_object_down" == b || "def entry_event_object_up" == b || 
    "def entry_event_signal" == b || "def entry_event_scene_start" == b || "def entry_event_clone_create" == b ? !0 : !1;
  };
  a.eventBlockSyntaxFilter = function(b) {
    if ("when_start" == b || "when_press_key" == b || "when_click_mouse_on" == b || "when_click_mouse_off" == b || "when_click_object_on" == b || "when_click_object_off" == b || "when_get_signal" == b || "when_start_scene" == b || "when_make_clone" == b || "entry_event_start" == b || "entry_event_key" == b || "entry_event_mouse_down" == b || "entry_event_mouse_up" == b || "entry_event_object_down" == b || "entry_event_object_up" == b || "entry_event_signal" == b || "entry_event_scene_start" == b || 
    "entry_event_clone_create" == b) {
      return "def " + b;
    }
  };
  a.isEntryEventFuncName = function(b) {
    return "when_start" == b || "when_press_key" == b || "when_click_mouse_on" == b || "when_click_mouse_off" == b || "when_click_object_on" == b || "when_click_object_off" == b || "when_get_signal" == b || "when_start_scene" == b || "when_make_clone" == b || "entry_event_start" == b || "entry_event_key" == b || "entry_event_mouse_down" == b || "entry_event_mouse_up" == b || "entry_event_object_down" == b || "entry_event_object_up" == b || "entry_event_signal" == b || "entry_event_scene_start" == 
    b || "entry_event_clone_create" == b ? !0 : !1;
  };
  a.isEntryEventFuncByType = function(b) {
    return "when_run_button_click" == b || "when_some_key_pressed" == b || "mouse_clicked" == b || "mouse_click_cancled" == b || "when_object_click" == b || "when_object_click_canceled" == b || "when_message_cast" == b || "when_scene_start" == b || "when_clone_start" == b ? !0 : !1;
  };
  a.isEntryEventFuncNameWithParam = function(b) {
    var a = b.lastIndexOf("_");
    return 0 < a && (b = b.substring(0, a), "when_press_key" == b || "when_get_signal" == b) ? !0 : !1;
  };
  a.searchFuncDefParam = function(b) {
    "function_field_label" == b.data.type && this._funcNameQ.enqueue(b.data.params[0]);
    return b && b.data && b.data.params && b.data.params[1] ? ("function_field_string" != b.data.type && "function_field_boolean" != b.data.type || this._funcParamQ.enqueue(b.data.params[0].data.type), this.searchFuncDefParam(b.data.params[1])) : b;
  };
  a.isEntryEventFuncTypeWithParam = function(b) {
    return "when_some_key_pressed" == b.type || "when_message_cast" == b.type ? !0 : !1;
  };
  a.isEntryEventDesignatedParamName = function(b) {
    var a = !1;
    "key" == b ? a = !0 : "signal" == b && (a = !0);
    return a;
  };
  a.gatherFuncDefParam = function(b) {
    if (b && b.data) {
      if (b.data.params[0]) {
        if (b.data.params[0].data) {
          var a = b.data.params[0].data.type;
          "function_field_string" != b.data.type && "function_field_boolean" != b.data.type || this._funcParamQ.enqueue(a);
        } else {
          "function_field_label" == b.data.type && this._funcNameQ.enqueue(b.data.params[0]);
        }
      }
      if (b.data.params[1]) {
        var d = this.searchFuncDefParam(b.data.params[1]);
        d.data.params[0].data && (a = d.data.params[0].data.type, "function_field_string" != d.data.type && "function_field_boolean" != d.data.type || this._funcParamQ.enqueue(a));
        d.data.params[1] && d.data.params[1].data.params[0].data && (a = d.data.params[1].data.params[0].data.type, "function_field_string" != d.data.params[1].data.type && "function_field_boolean" != d.data.params[1].data.type || this._funcParamQ.enqueue(a));
      }
    }
    return d;
  };
  a.getLastParam = function(b) {
    b && b.data && b.data.params[1] && (b = this.getLastParam(b.data.params[1]));
    return b;
  };
  a.isFuncContentsMatch = function(b, a, d, e, f) {
    var c = !0;
    if (a.length != b.length) {
      return !1;
    }
    for (var h = 0;h < b.length && c;h++) {
      var c = !1, k = b[h], l = a[h];
      if (k && !l) {
        c = !1;
        break;
      }
      if (!k && l) {
        c = !1;
        break;
      }
      if (k._schema && k._schema.template) {
        var n = k._schema.template.trim().split(" ")[0] == l.funcName ? !0 : !1;
      }
      if (l.type == k.data.type || n) {
        c = !0;
        f != l.type && (c = !1);
        var m = l.params, t = k.data.params, u = [];
        if (void 0 == m || null == m) {
          m = [];
        }
        if (void 0 == t || null == t) {
          t = [];
        }
        t.map(function(b, a) {
          b && u.push(b);
        });
        t = u;
        u = [];
        m.map(function(b, a) {
          b && u.push(b);
        });
        m = u;
        if (m.length == t.length) {
          for (var c = !0, x = 0;x < m.length && c;x++) {
            if (c = !1, "object" !== typeof m[x]) {
              c = m[x] == t[x] ? !0 : !1;
            } else {
              if (m[x].name) {
                var v = e[m[x].name];
                v ? t[x].data.type == v && (c = !0) : m[x].params && t[x].data.params && m[x].params[0] == t[x].data.params[0] && (c = !0);
              } else {
                "True" == m[x].type || "False" == m[x].type ? t[x].data ? m[x].type == t[x].data.type && (c = !0) : m[x].type == t[x].type && (c = !0) : m[x].type && m[x].params && (c = this.isFuncContentsParamsMatch(t[x], m[x], d, e));
              }
            }
          }
          if (c && l.statements && 0 != l.statements.length) {
            for (var q in l.statements) {
              c = this.isFuncContentsMatch(k.data.statements[q]._data, l.statements[q], d, e);
            }
          }
        } else {
          c = !1;
          break;
        }
      } else {
        c = !1;
        break;
      }
    }
    return c;
  };
  a.isFuncContentsParamsMatch = function(b, a, d, e) {
    var c = a.type, g = b.data.type;
    "text" == c ? c = "literal" : "number" == c ? c = "literal" : a.isParamFromFunc && (c = e[c]);
    "text" == g ? g = "literal" : "number" == g && (g = "literal");
    if (c == g) {
      if (a = a.params, c = b.data.params, a || c) {
        if (a.length == c.length) {
          b = !0;
          for (var h in a) {
            if (!b) {
              break;
            }
            b = !1;
            var g = a[h], k = c[h];
            if (g || k) {
              if ("object" !== typeof g) {
                g == k && (b = !0);
              } else {
                if (g.name) {
                  var l = e[g.name];
                  l ? k.data.type == l && (b = !0) : g.params[0] == k.data.params[0] && (b = !0);
                } else {
                  "True" == g.type || "False" == g.type ? k.data ? g.type == k.data.type && (b = !0) : g.type == k.type && (b = !0) : g.type && g.params && (b = this.isFuncContentsParamsMatch(k, g, d, e));
                }
              }
            } else {
              b = !0;
            }
          }
        } else {
          b = !1;
        }
      } else {
        b = !0;
      }
    } else {
      b = !1;
    }
    return b;
  };
  a.isParamBlock = function(b) {
    b = b.type;
    return "ai_boolean_distance" == b || "ai_distance_value" == b || "ai_boolean_object" == b || "ai_boolean_and" == b ? !0 : !1;
  };
  a.hasBlockInfo = function(b, a) {
    var c = !1, e;
    for (e in a) {
      var f = a[e];
      if (e == b.type) {
        for (var g in f) {
          var h = f[g];
          if (h.start == b.start && h.end == b.end) {
            c = !0;
            break;
          }
        }
      }
    }
    return c;
  };
  a.makeFuncParamBlock = function(b, a, d) {
    var c = b.params, f;
    for (f in c) {
      var g = c[f];
      if (g && "object" == typeof g) {
        if (g.type && g.params && 0 != g.params.length) {
          this.makeFuncParamBlock(g, a, d);
        } else {
          if (g.type && g.params && 0 == g.params.length) {
            var h = g.type;
            if (h = a[h]) {
              g = {}, g.type = h, g.params = [], b.params[f] = g;
            }
          } else {
            g.name ? (h = g.name, (h = a[h]) ? (g = {}, g.type = h, g.params = [], b.params[f] = g) : "get_variable" != g.type && (g = g.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, g, d, Entry.TextCodingError.SUBJECT_CONV_VARIABLE))) : g.object && g.property && (g = g.object.name + "." + g.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, g, 
            d, Entry.TextCodingError.SUBJECT_CONV_VARIABLE));
          }
        }
      }
    }
    if ((b = b.statements) && b[0] && 0 != b[0].length) {
      var c = b[0], k;
      for (k in c) {
        this.makeFuncParamBlock(c[k], a, d);
      }
    }
    if (b && b[1] && 0 != b[1].length) {
      k = b[1];
      for (var l in k) {
        this.makeFuncParamBlock(k[l], a, d);
      }
    }
  };
  a.updateBlockInfo = function(b, a) {
    var c = a[b.type];
    if (c && Array.isArray(c) && 0 != c.legnth) {
      for (var e in c) {
        if (a = c[e], a.start == b.start && a.end == b.end) {
          break;
        } else {
          var f = {};
          f.start = b.start;
          f.end = b.end;
          c.push(f);
        }
      }
    } else {
      a[b.type] = [], f = {}, f.start = b.start, f.end = b.end, a[b.type].push(f);
    }
  };
  a.assembleRepeatWhileTrueBlock = function(b, a) {
    if ("repeat_while_true" == b.data.type) {
      b = a.split(" ");
      var c = b.length - 1, e = b[c];
      "until" == e ? (b.splice(1, 0, "not"), b.splice(c + 1, 1), a = b.join(" ")) : "while" == e && (b.splice(c, 1), a = b.join(" "));
    }
    return a;
  };
  a.isJudgementBlock = function(b) {
    return "is_clicked" == b || "is_press_some_key" == b || "reach_something" == b || "boolean_basic_operator" == b || "boolean_and" == b || "boolean_or" == b || "boolean_not" == b ? !0 : !1;
  };
  a.isCalculationBlock = function(b) {
    return "calc_basic" == b || "calc_rand" == b || "coordinate_mouse" == b || "coordinate_object" == b || "get_sound_volume" == b || "quotient_and_mod" == b || "calc_operation" == b || "get_project_timer_value" == b || "get_date" == b || "distance_something" == b || "get_sound_duration" == b || "length_of_string" == b || "combine_something" == b || "char_at" == b || "substring" == b || "index_of_string" == b || "replace_string" == b || "change_string_case" == b ? !0 : !1;
  };
  a.isVariableDeclarationBlock = function(b) {
    return "set_variable" == b ? !0 : !1;
  };
  a.isHWParamBlock = function(b) {
    return "hamster_hand_found" == b || "hamster_value" == b || "arduino_get_port_number" == b || "arduino_get_number_sensor_value" == b || "arduino_get_digital_value" == b || "arduino_convert_scale" == b || "arduino_ext_get_analog_value" == b || "arduino_ext_get_analog_value_map" == b || "arduino_ext_get_ultrasonic_value" == b || "arduino_ext_get_digital" == b || "arduino_ext_tone_list" == b || "arduino_ext_octave_list" == b ? !0 : !1;
  };
  a.isMaterialBlock = function(b) {
    return "get_canvas_input_value" == b || "get_variable" == b || "value_of_index_from_list" == b || "length_of_list" == b || "is_included_in_list" == b ? !0 : !1;
  };
  a.jsAdjustSyntax = function(b, a) {
    if ("ai_boolean_distance" == b.data.type) {
      var c = a.split(" ");
      b = c[0].split("_");
      b[1] = b[1].substring(1, b[1].length - 1);
      b[1] = b[1].toLowerCase();
      b = b.join("_");
      a = c[1];
      a = this.bTojBinaryOperatorConvertor(a);
      c = c[2];
      b = b + " " + a + " " + c;
    } else {
      "ai_boolean_object" == b.data.type ? (c = a.split(" "), b = c[0].split("_"), b[1] = b[1].substring(1, b[1].length - 1), b[1] = b[1].toLowerCase(), b = b.join("_"), a = c[1], c = c[2], b = b + " " + a + " " + c) : "ai_distance_value" == b.data.type ? (c = a.split(" "), b = c[0].split("_"), b[1] = b[1].substring(1, b[1].length - 1), b[1] = b[1].toLowerCase(), b = b.join("_")) : b = a;
    }
    return b;
  };
  a.bTojBinaryOperatorConvertor = function(b) {
    var a;
    switch(b) {
      case "'BIGGER'":
        a = ">";
        break;
      case "'BIGGER_EQUAL'":
        a = ">=";
        break;
      case "'EQUAL'":
        a = "==";
        break;
      case "'SMALLER'":
        a = "<";
        break;
      case "'SMALLER_EQUAL'":
        a = "<=";
    }
    return a;
  };
  a.jTobBinaryOperatorConvertor = function(b) {
    var a;
    switch(b) {
      case ">":
        a = "BIGGER";
        break;
      case ">=":
        a = "BIGGER_EQUAL";
        break;
      case "==":
        a = "EQUAL";
        break;
      case "<":
        a = "SMALLER";
        break;
      case "<=":
        a = "SMALLER_EQUAL";
    }
    return a;
  };
  a.radarVariableConvertor = function(b) {
    return b.split("_")[1].toUpperCase();
  };
  a.tTobDropdownValueConvertor = function(b) {
    return "stone" == b ? "OBSTACLE" : "wall" == b ? b.toUpperCase() : "item" == b ? b.toUpperCase() : b;
  };
  a.canConvertTextModeForOverlayMode = function(b) {
    var a;
    Entry.getMainWS().oldMode == Entry.Workspace.MODE_OVERLAYBOARD && b == Entry.Workspace.MODE_VIMBOARD && (a = Lang.TextCoding[Entry.TextCodingError.ALERT_FUNCTION_EDITOR]);
    return a;
  };
  a.isNamesIncludeSpace = function() {
    var b = Entry.variableContainer;
    if (b) {
      for (var a = b.variables_ || [], d = 0;d < a.length;d++) {
        if (/ /.test(a[d].name_)) {
          return Lang.TextCoding[Entry.TextCodingError.ALERT_VARIABLE_EMPTY_TEXT];
        }
      }
      a = b.lists_ || [];
      for (d = 0;d < a.length;d++) {
        if (/ /.test(a[d].name_)) {
          return Lang.TextCoding[Entry.TextCodingError.ALERT_LIST_EMPTY_TEXT];
        }
      }
      a = b.functions_ || {};
      for (d in a) {
        if (b = a[d].content._data[0]._data[0], "function_create" == b.data.type) {
          if (2 == b.params.length) {
            if (b = b.params[0], "function_field_label" == b.data.type) {
              if (b = b.data.params, 2 == b.length) {
                if (void 0 == b[1]) {
                  if (/ /.test(b[0])) {
                    return Lang.TextCoding[Entry.TextCodingError.ALERT_FUNCTION_NAME_EMPTY_TEXT];
                  }
                } else {
                  if ("function_field_label" == b[1].data.type || this.hasFunctionFieldLabel(b[1])) {
                    return Lang.TextCoding[Entry.TextCodingError.ALERT_FUNCTION_NAME_FIELD_MULTI];
                  }
                }
              } else {
                return Lang.TextCoding[Entry.TextCodingError.ALERT_FUNCTION_NAME_DISORDER];
              }
            } else {
              return Lang.TextCoding[Entry.TextCodingError.ALERT_FUNCTION_NAME_DISORDER];
            }
          } else {
            return Lang.TextCoding[Entry.TextCodingError.ALERT_FUNCTION_NAME_DISORDER];
          }
        } else {
          return Lang.TextCoding[Entry.TextCodingError.ALERT_FUNCTION_NAME_DISORDER];
        }
      }
      return !1;
    }
  };
  a.isNameIncludeSpace = function(b, a) {
    return "variable" == a && / /.test(b) ? Lang.TextCoding[Entry.TextCodingError.ALERT_VARIABLE_EMPTY_TEXT_ADD_CHANGE] : "list" == a && / /.test(b) ? Lang.TextCoding[Entry.TextCodingError.ALERT_LIST_EMPTY_TEXT_ADD_CHANGE] : "function" == a && / /.test(b) ? Lang.TextCoding[Entry.TextCodingError.ALERT_FUNCTION_NAME_EMPTY_TEXT_ADD_CHANGE] : !1;
  };
  a.hasFunctionFieldLabel = function(b) {
    if (b && b.data) {
      if ("function_field_label" == b.data.type) {
        return !0;
      }
      b = b.data.params;
      if (b[0]) {
        var a = b[0].data.type;
        if ("function_field_label" == a || b[0].data.params && this.hasFunctionFieldLabel(b[0])) {
          return !0;
        }
      }
      return b[1] && (a = b[1].data.type, "function_field_label" == a || b[1].data.params && this.hasFunctionFieldLabel(b[1])) ? !0 : !1;
    }
  };
  a.makeExpressionStatementForEntryEvent = function(b, a) {
    var c = {}, e = {type:"CallExpression"}, f = {};
    f.name = b;
    f.type = "Identifier";
    e.callee = f;
    arguments = [];
    f = {type:"Literal"};
    f.value = a;
    arguments.push(f);
    e.arguments = arguments;
    c.expression = e;
    c.type = "ExpressionStatement";
    return c;
  };
  a.setMathParams = function(b, a) {
    var c;
    "pow" == b ? (c = "square", a[3] = c) : "sqrt" == b ? (c = "root", a[3] = c) : "sin" == b ? (c = "sin", a[3] = c) : "cos" == b ? (c = "cos", a[3] = c) : "tan" == b ? (c = "tan", a[3] = c) : "asin" == b ? (c = "asin_radian", a[3] = c) : "acos" == b ? (c = "acos_radian", a[3] = c) : "atan" == b ? (c = "atan_radian", a[3] = c) : "log" == b ? (c = "ln", a[3] = c) : "log10" == b ? (c = "log", a[3] = c) : "floor" == b ? (c = "floor", a[3] = c) : "ceil" == b ? (c = "ceil", a[3] = c) : "round" == b ? 
    (c = "round", a[3] = c) : "factorial" == b ? (c = "factorial", a[3] = c) : "fabs" == b && (c = "abs", a[3] = c);
    return c;
  };
  a.isMathExpression = function(b) {
    return "Entry.math_operation" == b.split("(")[0] ? !0 : !1;
  };
  a.makeMathExpression = function(b) {
    var a = b, d = b.split("(")[1].split(",");
    b = d[0];
    d = d[1];
    d = d.substring(2, d.length - 2).trim();
    "square" == d ? (mathProperty = "pow", a = "math." + mathProperty, a = a + "(" + b + ")") : "root" == d ? (mathProperty = "sqrt", a = "math." + mathProperty, a = a + "(" + b + ")") : "sin" == d ? (mathProperty = "sin", a = "math." + mathProperty, a = a + "(" + b + ")") : "cos" == d ? (mathProperty = "cos", a = "math." + mathProperty, a = a + "(" + b + ")") : "tan" == d ? (mathProperty = "tan", a = "math." + mathProperty, a = a + "(" + b + ")") : "asin_radian" == d ? (mathProperty = "asin", a = 
    "math." + mathProperty, a = a + "(" + b + ")") : "acos_radian" == d ? (mathProperty = "acos", a = "math." + mathProperty, a = a + "(" + b + ")") : "atan_radian" == d ? (mathProperty = "atan", a = "math." + mathProperty, a = a + "(" + b + ")") : "ln" == d ? (mathProperty = "log", a = "math." + mathProperty, a = a + "(" + b + ")") : "log" == d ? (mathProperty = "log10", a = "math." + mathProperty, a = a + "(" + b + ")") : "floor" == d ? (mathProperty = "floor", a = "math." + mathProperty, a = a + 
    "(" + b + ")") : "ceil" == d ? (mathProperty = "ceil", a = "math." + mathProperty, a = a + "(" + b + ")") : "round" == d ? (mathProperty = "round", a = "math." + mathProperty, a = a + "(" + b + ")") : "factorial" == d ? (mathProperty = "factorial", a = "math." + mathProperty, a = a + "(" + b + ")") : "abs" == d && (mathProperty = "fabs", a = "math." + mathProperty, a = a + "(" + b + ")");
    return a;
  };
  a.generateVariablesDeclaration = function() {
    var b = "", a = Entry.playground.object, d = Entry.variableContainer;
    if (d) {
      for (var d = d.variables_ || [], e = d.length - 1;0 <= e;e--) {
        var f = d[e], g = f.name_, h = f.value_;
        if (f.object_) {
          if (f.object_ == a.id) {
            g = "self." + g;
          } else {
            continue;
          }
        }
        "string" === typeof h && (h = '"()"'.replace("()", h));
        b += g + " = " + h + "\n";
      }
      return b;
    }
  };
  a.generateListsDeclaration = function() {
    var b = "", a = Entry.playground.object, d = Entry.variableContainer;
    if (d) {
      targets = d.lists_ || [];
      for (d = targets.length - 1;0 <= d;d--) {
        var e = targets[d], f = e.name_, g = "", h = e.array_;
        if (e.object_) {
          if (e.object_ == a.id) {
            f = "self." + f;
          } else {
            continue;
          }
        }
        for (var k in h) {
          e = h[k].data, isNaN(e) && (e = '"' + e + '"'), g += e, k != h.length - 1 && (g += ", ");
        }
        b += f + " = [" + g + "]\n";
      }
      return b;
    }
  };
  a.isVariableNumber = function(b, a) {
    var c = Entry.playground.object, e = Entry.variableContainer.variables_, f;
    for (f in e) {
      var g = e[f];
      if ("global" == a) {
        if (null === g.object_ && g.id_ == b && !isNaN(g.value_)) {
          return !0;
        }
      } else {
        if ("local" == a && g.object_ === c.id && g.id_ == b && !isNaN(g.value_)) {
          return !0;
        }
      }
    }
    return !1;
  };
  a.generateForStmtIndex = function(b, a) {
    var c = Math.floor(b / 3);
    a = ["i", "j", "k"][b % 3] + (a || "");
    return c ? this.generateForStmtIndex(c - 1, a) : a;
  };
  a.isExpressionLiteral = function(b, a) {
    switch(b.type) {
      case "CallExpression":
        if ("MemberExpression" === b.callee.type && (b = b.callee.property.name, b = a["%2"][b])) {
          return "basic_string_field" === Entry.block[b.key].skeleton;
        }
        break;
      case "Literal":
        return !0;
    }
    return !1;
  };
})(Entry.TextCodingUtil);
Entry.Workspace = function(a) {
  Entry.Model(this, !1);
  this.dSetMode = Entry.Utils.debounce(this.setMode, 200);
  this.observe(this, "_handleChangeBoard", ["selectedBoard"], !1);
  this.trashcan = new Entry.FieldTrashcan;
  var b = a.blockMenu;
  b && (this.blockMenu = new Entry.BlockMenu(b.dom, b.align, b.categoryData, b.scroll), this.blockMenu.workspace = this, this.blockMenu.observe(this, "_setSelectedBlockView", ["selectedBlockView"], !1));
  if (b = a.board) {
    b.workspace = this, this.board = new Entry.Board(b), this.board.observe(this, "_setSelectedBlockView", ["selectedBlockView"], !1), this.set({selectedBoard:this.board});
  }
  if (b = a.vimBoard) {
    this.vimBoard = new Entry.Vim(b.dom), this.vimBoard.workspace = this;
  }
  this.board && this.vimBoard && this.vimBoard.hide();
  Entry.GlobalSvg.createDom();
  this.mode = Entry.Workspace.MODE_BOARD;
  Entry.keyPressed && Entry.keyPressed.attach(this, this._keyboardControl);
  this.changeEvent = new Entry.Event(this);
  Entry.commander.setCurrentEditor("board", this.board);
  this.textType = void 0 !== a.textType ? a.textType : Entry.Vim.TEXT_TYPE_PY;
  this.mode = this.oldMode = Entry.Workspace.MODE_BOARD;
};
Entry.Workspace.MODE_BOARD = 0;
Entry.Workspace.MODE_VIMBOARD = 1;
Entry.Workspace.MODE_OVERLAYBOARD = 2;
(function(a) {
  a.schema = {selectedBlockView:null, selectedBoard:null};
  a.getBoard = function() {
    return this.board;
  };
  a.getSelectedBoard = function() {
    return this.selectedBoard;
  };
  a.getBlockMenu = function() {
    return this.blockMenu;
  };
  a.getVimBoard = function() {
    return this.vimBoard;
  };
  a.getMode = function() {
    return this.mode;
  };
  a.setMode = function(b, a) {
    isNaN(b) ? (this.mode = b.boardType, this.runType = b.runType, this.textType = b.textType) : this.mode = b;
    this.mode = Number(this.mode);
    if (this.oldMode !== this.mode) {
      var c = Entry.Vim, e = Entry.Workspace, f = this.blockMenu;
      switch(this.mode) {
        case e.MODE_VIMBOARD:
          if (alert_message = Entry.TextCodingUtil.isNamesIncludeSpace()) {
            alert(alert_message);
            b = {};
            b.boardType = e.MODE_BOARD;
            b.textType = -1;
            Entry.getMainWS().setMode(b);
            break;
          }
          this.board && this.board.hide();
          this.overlayBoard && this.overlayBoard.hide();
          f.banClass("functionInit");
          this.set({selectedBoard:this.vimBoard});
          this.vimBoard.show();
          this.codeToText(this.board.code, b);
          f.renderText();
          this.board.clear();
          this.oldTextType = this.textType;
          break;
        case e.MODE_BOARD:
          try {
            this.board.show(), f.unbanClass("functionInit"), this.set({selectedBoard:this.board}), this.textToCode(this.oldMode, this.oldTextType), this.overlayBoard && this.overlayBoard.hide(), f.renderBlock(), this.oldTextType = this.textType, this.vimBoard && this.vimBoard.hide();
          } catch (g) {
            this.board && this.board.code && this.board.code.clear(), this.board && this.board.hide(), this.set({selectedBoard:this.vimBoard}), f.banClass("functionInit"), this.mode = e.MODE_VIMBOARD, this.oldTextType == c.TEXT_TYPE_JS ? (b.boardType = e.MODE_VIMBOARD, b.textType = c.TEXT_TYPE_JS, b.runType = c.MAZE_MODE, this.oldTextType = c.TEXT_TYPE_JS) : this.oldTextType == c.TEXT_TYPE_PY && (b.boardType = e.MODE_VIMBOARD, b.textType = c.TEXT_TYPE_PY, b.runType = c.WORKSPACE_MODE, this.oldTextType = 
            c.TEXT_TYPE_PY), Entry.getMainWS().setMode(b);
          }
          Entry.commander.setCurrentEditor("board", this.board);
          break;
        case e.MODE_OVERLAYBOARD:
          this.oldMode == e.MODE_VIMBOARD ? this.overlayModefrom = e.MODE_VIMBOARD : this.oldMode == e.MODE_BOARD && (this.overlayModefrom = e.MODE_BOARD), this.overlayBoard || this.initOverlayBoard(), this.overlayBoard.show(), this.set({selectedBoard:this.overlayBoard}), Entry.commander.setCurrentEditor("board", this.overlayBoard);
      }
      this.oldMode = this.mode;
      Entry.isTextMode = this.mode == e.MODE_VIMBOARD ? !0 : !1;
      Entry.dispatchEvent("workspaceChangeMode");
      this.changeEvent.notify(a);
      Entry.dispatchEvent("cancelBlockMenuDynamic");
    }
  };
  a.changeBoardCode = function(b, a) {
    this._syncTextCode();
    var c = this.mode === Entry.Workspace.MODE_VIMBOARD;
    this.board.changeCode(b, c, a);
    c && (b = {}, b.textType = this.textType, b.boardType = this.boardType, b.runType = this.runType, this.codeToText(this.board.code, b));
  };
  a.changeOverlayBoardCode = function(b) {
    this.overlayBoard && this.overlayBoard.changeCode(b);
  };
  a.changeBlockMenuCode = function(b) {
    this.blockMenu.changeCode(b);
  };
  a.textToCode = function(b, a) {
    if (this.vimBoard && b === Entry.Workspace.MODE_VIMBOARD) {
      b = this.vimBoard.textToCode(a);
      var c = this.board.code;
      c.load(b);
      this.changeBoardCode(c);
      setTimeout(function() {
        c.view && (c.view.reDraw(), this.board.alignThreads());
      }.bind(this), 0);
    }
  };
  a.codeToText = function(b, a) {
    if (this.vimBoard) {
      return b = b || this.board.code, a = a || {textType:this.textType, boardType:this.boardType, runType:this.runType}, this.vimBoard.codeToText(b, a);
    }
  };
  a.getCodeToText = function(b) {
    if (this.vimBoard) {
      return this.vimBoard.getCodeToText(b);
    }
  };
  a._setSelectedBlockView = function() {
    this.set({selectedBlockView:this.board.selectedBlockView || this.blockMenu.selectedBlockView || (this.overlayBoard ? this.overlayBoard.selectedBlockView : null)});
  };
  a.initOverlayBoard = function() {
    this.overlayBoard = new Entry.Board({dom:this.board.view, workspace:this, isOverlay:!0});
    this.overlayBoard.changeCode(new Entry.Code([]));
    this.overlayBoard.workspace = this;
    this.overlayBoard.observe(this, "_setSelectedBlockView", ["selectedBlockView"], !1);
  };
  a._keyboardControl = function(b, a) {
    if (!Entry.Loader || Entry.Loader.isLoaded()) {
      var c = b.keyCode || b.which, e = b.ctrlKey, f = b.shiftKey, g = b.altKey, h = Entry.playground, k = h && h.object ? h.object : void 0;
      if (!Entry.Utils.isInInput(b) || a) {
        a = this._isVimMode();
        var l = this.selectedBlockView;
        if (e) {
          switch(c) {
            case 86:
              (c = this.selectedBoard) && c instanceof Entry.Board && Entry.clipboard && Entry.do("addThread", Entry.clipboard).value.getFirstBlock().copyToClipboard();
              break;
            case 219:
              if (!k && a) {
                alert("\uc624\ube0c\uc81d\ud2b8\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc624\ube0c\uc81d\ud2b8\ub97c \ucd94\uac00\ud55c \ud6c4 \uc2dc\ub3c4\ud574\uc8fc\uc138\uc694.");
                return;
              }
              if (Entry.getMainWS().oldMode == Entry.Workspace.MODE_OVERLAYBOARD) {
                return;
              }
              if (c = Entry.TextCodingUtil.isNamesIncludeSpace()) {
                alert(c);
                return;
              }
              this.dSetMode({boardType:Entry.Workspace.MODE_BOARD, textType:-1});
              b.preventDefault();
              break;
            case 221:
              if (!k && this.oldMode === Entry.Workspace.MODE_BOARD) {
                alert("\uc624\ube0c\uc81d\ud2b8\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc624\ube0c\uc81d\ud2b8\ub97c \ucd94\uac00\ud55c \ud6c4 \uc2dc\ub3c4\ud574\uc8fc\uc138\uc694.");
                return;
              }
              if (c = Entry.TextCodingUtil.canConvertTextModeForOverlayMode(Entry.Workspace.MODE_VIMBOARD)) {
                alert(c);
                return;
              }
              if (c = Entry.TextCodingUtil.isNamesIncludeSpace()) {
                alert(c);
                return;
              }
              this.dSetMode({boardType:Entry.Workspace.MODE_VIMBOARD, textType:Entry.Vim.TEXT_TYPE_PY, runType:Entry.Vim.WORKSPACE_MODE});
              b.preventDefault();
              break;
            case 67:
              l && !l.isInBlockMenu && l.block.isDeletable() && l.block.copyToClipboard();
              break;
            case 88:
              l && !l.isInBlockMenu && l.block.isDeletable() && function(b) {
                b.copyToClipboard();
                b.destroy(!0, !0);
                l.getBoard().setSelectedBlock(null);
              }(l.block);
          }
        } else {
          if (g) {
            if (!k) {
              alert("\uc624\ube0c\uc81d\ud2b8\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc624\ube0c\uc81d\ud2b8\ub97c \ucd94\uac00\ud55c \ud6c4 \uc2dc\ub3c4\ud574\uc8fc\uc138\uc694.");
              return;
            }
            switch(c) {
              case 49:
                h.changeViewMode("code");
                b.preventDefault();
                break;
              case 50:
                h.changeViewMode("picture");
                b.preventDefault();
                break;
              case 51:
                h.changeViewMode("sound");
                b.preventDefault();
                break;
              case 52:
                h.toggleOnVariableView();
                h.changeViewMode("variable");
                b.preventDefault();
                break;
              case 219:
                Entry.container && (b.preventDefault(), Entry.container.selectNeighborObject("prev"));
                break;
              case 221:
                Entry.container && (b.preventDefault(), Entry.container.selectNeighborObject("next"));
            }
          } else {
            if (f) {
              switch(c) {
                case 9:
                  a && (CodeMirror.commands.indentLess(this.vimBoard.codeMirror), b.preventDefault());
              }
            } else {
              switch(c) {
                case 9:
                  a && (CodeMirror.commands.indentMore(this.vimBoard.codeMirror), b.preventDefault());
                  break;
                case 8:
                case 46:
                  l && !l.isInBlockMenu && l.block.isDeletable() && (Entry.do("destroyBlock", l.block), this.board.set({selectedBlockView:null}), b.preventDefault());
              }
            }
          }
        }
        setTimeout(function() {
          Entry.disposeEvent && Entry.disposeEvent.notify(b);
        }, 0);
      }
    }
  };
  a._handleChangeBoard = function() {
    var b = this.selectedBoard;
    b && b.constructor === Entry.Board && this.trashcan.setBoard(b);
  };
  a._syncTextCode = function() {
    if (!(this.mode !== Entry.Workspace.MODE_VIMBOARD || Entry.engine && Entry.engine.isState("run"))) {
      var b = this.vimBoard.textToCode(this.textType), a = this.board.code;
      a && a.load(b);
    }
  };
  a.addVimBoard = function(b) {
    this.vimBoard || (this.vimBoard = new Entry.Vim(b), this.vimBoard.workspace = this, this.vimBoard.hide());
  };
  a.getParserType = function() {
    return this.vimBoard._parserType;
  };
  a.getBlockViewRenderMode = function() {
    switch(this.mode) {
      case Entry.Workspace.MODE_BOARD:
      case Entry.Workspace.MODE_OVERLAYBOARD:
        return Entry.BlockView.RENDER_MODE_BLOCK;
      case Entry.Workspace.MODE_VIMBOARD:
        return Entry.BlockView.RENDER_MODE_TEXT;
    }
  };
  a._isVimMode = function() {
    return this.oldMode === Entry.Workspace.MODE_VIMBOARD;
  };
  a.isVimMode = a._isVimMode;
})(Entry.Workspace.prototype);
Entry.BlockDriver = function() {
};
(function(a) {
  a.convert = function() {
    var b = new Date, a;
    for (a in Entry.block) {
      "function" === typeof Entry.block[a] && this._convertBlock(a);
    }
    console.log((new Date).getTime() - b.getTime());
  };
  a._convertBlock = function(b) {
    function a(b) {
      var c = {type:b.getAttribute("type"), index:{}};
      b = $(b).children();
      if (!b) {
        return c;
      }
      for (var d = 0;d < b.length;d++) {
        var e = b[d], f = e.tagName, g = $(e).children()[0], h = e.getAttribute("name");
        "value" === f ? "block" == g.nodeName && (c.params || (c.params = []), c.params.push(a(g)), c.index[h] = c.params.length - 1) : "field" === f && (c.params || (c.params = []), c.params.push(e.textContent), c.index[h] = c.params.length - 1);
      }
      return c;
    }
    var d = Blockly.Blocks[b], e = EntryStatic.blockInfo[b], f, g;
    if (e && (f = e.class, g = e.isNotFor, e = e.xml)) {
      var e = $.parseXML(e), h = a(e.childNodes[0]);
    }
    d = (new Entry.BlockMockup(d, h, b)).toJSON();
    d.class = f;
    d.isNotFor = g;
    _.isEmpty(d.paramsKeyMap) && delete d.paramsKeyMap;
    _.isEmpty(d.statementsKeyMap) && delete d.statementsKeyMap;
    d.func = Entry.block[b];
    -1 < "NUMBER TRUE FALSE TEXT FUNCTION_PARAM_BOOLEAN FUNCTION_PARAM_STRING TRUE_UN".split(" ").indexOf(b.toUpperCase()) && (d.isPrimitive = !0);
    Entry.block[b] = d;
  };
})(Entry.BlockDriver.prototype);
Entry.BlockMockup = function(a, b, c) {
  this.templates = [];
  this.params = [];
  this.statements = [];
  this.color = "";
  this.output = this.isNext = this.isPrev = !1;
  this.fieldCount = 0;
  this.events = {};
  this.def = b || {};
  this.paramsKeyMap = {};
  this.statementsKeyMap = {};
  this.definition = {params:[], type:this.def.type};
  this.simulate(a);
  this.def = this.definition;
};
(function(a) {
  a.simulate = function(b) {
    b.sensorList && (this.sensorList = b.sensorList);
    b.portList && (this.portList = b.portList);
    b.init.call(this);
    b.whenAdd && (this.events.blockViewAdd || (this.events.blockViewAdd = []), this.events.blockViewAdd.push(b.whenAdd));
    b.whenRemove && (this.events.blockViewDestroy || (this.events.blockViewDestroy = []), this.events.blockViewDestroy.push(b.whenRemove));
  };
  a.toJSON = function() {
    function b(a) {
      if (a && (a = a.params)) {
        for (var c = 0;c < a.length;c++) {
          var d = a[c];
          d && (delete d.index, b(d));
        }
      }
    }
    var a = "";
    this.output ? a = "Boolean" === this.output ? "basic_boolean_field" : "basic_string_field" : !this.isPrev && this.isNext ? a = "basic_event" : 1 == this.statements.length ? a = "basic_loop" : 2 == this.statements.length ? a = "basic_double_loop" : this.isPrev && this.isNext ? a = "basic" : this.isPrev && !this.isNext && (a = "basic_without_next");
    b(this.def);
    var d = /dummy_/mi, e;
    for (e in this.paramsKeyMap) {
      d.test(e) && delete this.paramsKeyMap[e];
    }
    for (e in this.statementsKeyMap) {
      d.test(e) && delete this.statementsKeyMap[e];
    }
    return {color:this.color, skeleton:a, statements:this.statements, template:this.templates.filter(function(b) {
      return "string" === typeof b;
    }).join(" "), params:this.params, events:this.events, def:this.def, paramsKeyMap:this.paramsKeyMap, statementsKeyMap:this.statementsKeyMap};
  };
  a.appendDummyInput = function() {
    return this;
  };
  a.appendValueInput = function(b) {
    this.def && this.def.index && (void 0 !== this.def.index[b] ? this.definition.params.push(this.def.params[this.def.index[b]]) : this.definition.params.push(null));
    this.params.push({type:"Block", accept:"string"});
    this._addToParamsKeyMap(b);
    this.templates.push(this.getFieldCount());
    return this;
  };
  a.appendStatementInput = function(b) {
    this._addToStatementsKeyMap(b);
    this.statements.push({accept:"basic"});
  };
  a.setCheck = function(b) {
    var a = this.params;
    "Boolean" === b && (a[a.length - 1].accept = "boolean");
  };
  a.appendField = function(b, a) {
    if (!b) {
      return this;
    }
    "string" === typeof b && 0 < b.length ? a ? (b = {type:"Text", text:b, color:a}, this.params.push(b), this._addToParamsKeyMap(), this.templates.push(this.getFieldCount()), this.def && this.def.index && void 0 !== this.def.index[a] ? this.definition.params.push(this.def.params[this.def.index[a]]) : this.definition.params.push(void 0)) : this.templates.push(b) : b.constructor == Blockly.FieldIcon ? ("start" === b.type ? this.params.push({type:"Indicator", img:b.src_, size:17, position:{x:0, y:-2}}) : 
    this.params.push({type:"Indicator", img:b.src_, size:12}), this._addToParamsKeyMap(), this.templates.push(this.getFieldCount()), this.definition && this.definition.params.push(null)) : b.constructor == Blockly.FieldDropdown ? (this.params.push({type:"Dropdown", options:b.menuGenerator_, value:b.menuGenerator_[0][1], fontSize:11}), this._addToParamsKeyMap(a), this.templates.push(this.getFieldCount()), this.def && this.def.index && void 0 !== this.def.index[a] ? this.definition.params.push(this.def.params[this.def.index[a]]) : 
    this.definition.params.push(void 0)) : b.constructor == Blockly.FieldDropdownDynamic ? (this.params.push({type:"DropdownDynamic", value:null, menuName:b.menuName_, fontSize:11}), this.templates.push(this.getFieldCount()), this.def && this.def.index && void 0 !== this.def.index[a] ? this.definition.params.push(this.def.params[this.def.index[a]]) : this.definition.params.push(void 0), this._addToParamsKeyMap(a)) : b.constructor == Blockly.FieldTextInput ? (this.params.push({type:"TextInput", value:10}), 
    this.templates.push(this.getFieldCount()), this._addToParamsKeyMap(a)) : b.constructor == Blockly.FieldAngle ? (this.params.push({type:"Angle"}), this.templates.push(this.getFieldCount()), this.def && this.def.index && void 0 !== this.def.index[a] ? this.definition.params.push(this.def.params[this.def.index[a]]) : this.definition.params.push(null), this._addToParamsKeyMap(a)) : b.constructor == Blockly.FieldKeydownInput ? (this.params.push({type:"Keyboard", value:81}), this.templates.push(this.getFieldCount()), 
    void 0 !== this.def.index[a] ? this.definition.params.push(this.def.params[this.def.index[a]]) : this.definition.params.push(void 0), this._addToParamsKeyMap(a)) : b.constructor == Blockly.FieldColour ? (this.params.push({type:"Color"}), this.templates.push(this.getFieldCount()), this._addToParamsKeyMap(a)) : console.log("else", b);
    return this;
  };
  a.setColour = function(b) {
    this.color = b;
  };
  a.setInputsInline = function() {
  };
  a.setOutput = function(b, a) {
    b && (this.output = a);
  };
  a.setPreviousStatement = function(b) {
    this.isPrev = b;
  };
  a.setNextStatement = function(b) {
    this.isNext = b;
  };
  a.setEditable = function(b) {
  };
  a.getFieldCount = function() {
    this.fieldCount++;
    return "%" + this.fieldCount;
  };
  a._addToParamsKeyMap = function(b) {
    b = b ? b : "dummy_" + Entry.Utils.generateId();
    var a = this.paramsKeyMap;
    a[b] = Object.keys(a).length;
  };
  a._addToStatementsKeyMap = function(b) {
    b = b ? b : "dummy_" + Entry.Utils.generateId();
    var a = this.statementsKeyMap;
    a[b] = Object.keys(a).length;
  };
})(Entry.BlockMockup.prototype);
Entry.Playground = function() {
  this.enableArduino = this.isTextBGMode_ = !1;
  this.viewMode_ = "default";
  Entry.addEventListener("textEdited", this.injectText);
  Entry.addEventListener("hwChanged", this.updateHW);
};
Entry.Playground.prototype.setMode = function(a) {
  console.log("playground setMode", a);
  this.mainWorkspace.setMode(a);
};
Entry.Playground.prototype.generateView = function(a, b) {
  this.view_ = a;
  this.view_.addClass("entryPlayground");
  b && "workspace" != b ? "phone" == b && (this.view_.addClass("entryPlaygroundPhone"), a = Entry.createElement("div", "entryCategoryTab"), a.addClass("entryPlaygroundTabPhone"), Entry.view_.insertBefore(a, this.view_), this.generateTabView(a), this.tabView_ = a, a = Entry.createElement("div", "entryCurtain"), a.addClass("entryPlaygroundCurtainPhone"), a.addClass("entryRemove"), a.innerHTML = Lang.Workspace.cannot_edit_click_to_stop, a.bindOnClick(function() {
    Entry.engine.toggleStop();
  }), this.view_.appendChild(a), this.curtainView_ = a, Entry.pictureEditable && (a = Entry.createElement("div", "entryPicture"), a.addClass("entryPlaygroundPicturePhone"), a.addClass("entryRemove"), this.view_.appendChild(a), this.generatePictureView(a), this.pictureView_ = a), a = Entry.createElement("div", "entryText"), a.addClass("entryRemove"), this.view_.appendChild(a), this.generateTextView(a), this.textView_ = a, Entry.soundEditable && (a = Entry.createElement("div", "entrySound"), a.addClass("entryPlaygroundSoundWorkspacePhone"), 
  a.addClass("entryRemove"), this.view_.appendChild(a), this.generateSoundView(a), this.soundView_ = a), a = Entry.createElement("div", "entryDefault"), this.view_.appendChild(a), this.generateDefaultView(a), this.defaultView_ = a, a = Entry.createElement("div", "entryCode"), a.addClass("entryPlaygroundCodePhone"), this.view_.appendChild(a), this.generateCodeView(a), this.codeView_ = this.codeView_ = a, Entry.addEventListener("run", function(b) {
    Entry.playground.curtainView_.removeClass("entryRemove");
  }), Entry.addEventListener("stop", function(b) {
    Entry.playground.curtainView_.addClass("entryRemove");
  })) : (this.view_.addClass("entryPlaygroundWorkspace"), a = Entry.createElement("div", "entryCategoryTab"), a.addClass("entryPlaygroundTabWorkspace"), this.view_.appendChild(a), this.generateTabView(a), this.tabView_ = a, a = Entry.createElement("div", "entryCurtain"), a.addClass("entryPlaygroundCurtainWorkspace"), a.addClass("entryRemove"), b = Lang.Workspace.cannot_edit_click_to_stop.split("."), a.innerHTML = b[0] + ".<br/>" + b[1], a.addEventListener("click", function() {
    Entry.engine.toggleStop();
  }), this.view_.appendChild(a), this.curtainView_ = a, Entry.pictureEditable && (a = Entry.createElement("div", "entryPicture"), a.addClass("entryPlaygroundPictureWorkspace"), a.addClass("entryRemove"), this.view_.appendChild(a), this.generatePictureView(a), this.pictureView_ = a), a = Entry.createElement("div", "entryText"), a.addClass("entryPlaygroundTextWorkspace"), a.addClass("entryRemove"), this.view_.appendChild(a), this.generateTextView(a), this.textView_ = a, Entry.soundEditable && (a = 
  Entry.createElement("div", "entrySound"), a.addClass("entryPlaygroundSoundWorkspace"), a.addClass("entryRemove"), this.view_.appendChild(a), this.generateSoundView(a), this.soundView_ = a), a = Entry.createElement("div", "entryDefault"), a.addClass("entryPlaygroundDefaultWorkspace"), this.view_.appendChild(a), this.generateDefaultView(a), this.defaultView_ = a, a = Entry.createElement("div", "entryCode"), a.addClass("entryPlaygroundCodeWorkspace"), a.addClass("entryRemove"), this.view_.appendChild(a), 
  this.generateCodeView(a), this.codeView_ = a, b = Entry.createElement("div"), b.addClass("entryPlaygroundResizeWorkspace", "entryRemove"), this.resizeHandle_ = b, this.view_.appendChild(b), this.initializeResizeHandle(b), this.codeView_ = a, Entry.addEventListener("run", function(b) {
    Entry.playground.curtainView_.removeClass("entryRemove");
  }), Entry.addEventListener("stop", function(b) {
    Entry.playground.curtainView_.addClass("entryRemove");
  }));
};
Entry.Playground.prototype.generateDefaultView = function(a) {
  return a;
};
Entry.Playground.prototype.generateTabView = function(a) {
  var b = this, c = Entry.createElement("ul");
  c.addClass("entryTabListWorkspace");
  this.tabList_ = c;
  a.appendChild(c);
  this.tabViewElements = {};
  a = Entry.createElement("li", "entryCodeTab");
  a.innerHTML = Lang.Workspace.tab_code;
  a.addClass("entryTabListItemWorkspace entryTabSelected");
  c.appendChild(a);
  a.bindOnClick(function(a) {
    Entry.do("playgroundChangeViewMode", "code", b.selectedViewMode);
  });
  this._codeTab = this.tabViewElements.code = a;
  Entry.pictureEditable && (a = Entry.createElement("li", "entryPictureTab"), a.innerHTML = Lang.Workspace.tab_picture, a.addClass("entryTabListItemWorkspace"), c.appendChild(a), a.bindOnClick(function(b) {
    Entry.playground.changeViewMode("picture");
  }), this.tabViewElements.picture = a, a = Entry.createElement("li", "entryTextboxTab"), a.innerHTML = Lang.Workspace.tab_text, a.addClass("entryTabListItemWorkspace"), c.appendChild(a), a.bindOnClick(function(b) {
    Entry.playground.changeViewMode("text");
  }), this.tabViewElements.text = a, a.addClass("entryRemove"));
  Entry.soundEditable && (a = Entry.createElement("li", "entrySoundTab"), a.innerHTML = Lang.Workspace.tab_sound, a.addClass("entryTabListItemWorkspace"), c.appendChild(a), a.bindOnClick(function(b) {
    Entry.playground.changeViewMode("sound");
  }), this.tabViewElements.sound = a);
  Entry.hasVariableManager && (a = Entry.createElement("li", "entryVariableTab"), a.innerHTML = Lang.Workspace.tab_attribute, a.addClass("entryTabListItemWorkspace entryVariableTabWorkspace"), c.appendChild(a), a.bindOnClick(function(b) {
    Entry.playground.toggleOnVariableView();
    Entry.playground.changeViewMode("variable");
  }), this.tabViewElements.variable = a);
};
Entry.Playground.prototype.generateCodeView = function(a) {
  var b = this.createVariableView();
  a.appendChild(b);
  this.variableView_ = b;
  a = Entry.Dom(a);
  b = Entry.Dom("div", {parent:a, id:"entryWorkspaceBoard", class:"entryWorkspaceBoard"});
  a = {blockMenu:{dom:Entry.Dom("div", {parent:a, id:"entryWorkspaceBlockMenu", class:"entryWorkspaceBlockMenu"}), align:"LEFT", categoryData:EntryStatic.getAllBlocks(), scroll:!0}, board:{dom:b}};
  Entry.textCodingEnable && (a.vimBoard = {dom:b});
  this.mainWorkspace = new Entry.Workspace(a);
  this.blockMenu = this.mainWorkspace.blockMenu;
  this.board = this.mainWorkspace.board;
  this.blockMenu.banClass("checker");
  this.vimBoard = this.mainWorkspace.vimBoard;
  Entry.hw && this.updateHW();
};
Entry.Playground.prototype.generatePictureView = function(a) {
  if ("workspace" == Entry.type) {
    var b = Entry.createElement("div", "entryAddPicture");
    b.addClass("entryPlaygroundAddPicture");
    b.bindOnClick(function(b) {
      Entry.dispatchEvent("openPictureManager");
    });
    var c = Entry.createElement("div", "entryAddPictureInner");
    c.addClass("entryPlaygroundAddPictureInner");
    c.innerHTML = Lang.Workspace.picture_add;
    b.appendChild(c);
    a.appendChild(b);
    b = Entry.createElement("ul", "entryPictureList");
    b.addClass("entryPlaygroundPictureList");
    $ && $(b).sortable({start:function(b, a) {
      a.item.data("start_pos", a.item.index());
    }, stop:function(b, a) {
      b = a.item.data("start_pos");
      a = a.item.index();
      Entry.playground.movePicture(b, a);
    }, axis:"y"});
    a.appendChild(b);
    this.pictureListView_ = b;
    b = Entry.createElement("div", "entryPainter");
    b.addClass("entryPlaygroundPainter");
    a.appendChild(b);
    this.painter = new Entry.Painter2(b);
  } else {
    "phone" == Entry.type && (b = Entry.createElement("div", "entryAddPicture"), b.addClass("entryPlaygroundAddPicturePhone"), b.bindOnClick(function(b) {
      Entry.dispatchEvent("openPictureManager");
    }), c = Entry.createElement("div", "entryAddPictureInner"), c.addClass("entryPlaygroundAddPictureInnerPhone"), c.innerHTML = Lang.Workspace.picture_add, b.appendChild(c), a.appendChild(b), b = Entry.createElement("ul", "entryPictureList"), b.addClass("entryPlaygroundPictureListPhone"), $ && $(b).sortable({start:function(b, a) {
      a.item.data("start_pos", a.item.index());
    }, stop:function(b, a) {
      b = a.item.data("start_pos");
      a = a.item.index();
      Entry.playground.movePicture(b, a);
    }, axis:"y"}), a.appendChild(b), this.pictureListView_ = b);
  }
};
Entry.Playground.prototype.generateTextView = function(a) {
  var b = Entry.createElement("div");
  a.appendChild(b);
  var c = Entry.createElement("div");
  c.addClass("textProperties");
  b.appendChild(c);
  a = Entry.createElement("div");
  a.addClass("entryTextFontSelect");
  c.appendChild(a);
  var d = Entry.createElement("select", "entryPainterAttrFontName");
  d.addClass("entryPlaygroundPainterAttrFontName", "entryTextFontSelecter");
  d.size = "1";
  d.onchange = function(b) {
    b = b.target.value;
    if ("Nanum Pen Script" == b || "Jeju Hallasan" == b) {
      var a = m.value;
      Entry.playground.object.entity.getLineBreak() && (a = t.value);
      null != /[\u4E00-\u9FFF]/.exec(a) && (b = "KoPub Batang", d.value = b, alert(Lang.Menus.not_supported_text));
    }
    Entry.playground.object.entity.setFontType(b);
  };
  for (var e = 0;e < Entry.fonts.length;e++) {
    var f = Entry.fonts[e], g = Entry.createElement("option");
    g.value = f.family;
    g.innerHTML = f.name;
    d.appendChild(g);
  }
  this.fontName_ = d;
  a.appendChild(d);
  a = Entry.createElement("ul");
  a.addClass("entryPlayground_text_buttons");
  c.appendChild(a);
  e = Entry.createElement("li");
  e.addClass("entryPlaygroundTextAlignLeft");
  e.bindOnClick(function(b) {
    Entry.playground.setFontAlign(Entry.TEXT_ALIGN_LEFT);
  });
  a.appendChild(e);
  this.alignLeftBtn = e;
  e = Entry.createElement("li");
  e.addClass("entryPlaygroundTextAlignCenter");
  e.bindOnClick(function(b) {
    Entry.playground.setFontAlign(Entry.TEXT_ALIGN_CENTER);
  });
  a.appendChild(e);
  this.alignCenterBtn = e;
  e = Entry.createElement("li");
  e.addClass("entryPlaygroundTextAlignRight");
  e.bindOnClick(function(b) {
    Entry.playground.setFontAlign(Entry.TEXT_ALIGN_RIGHT);
  });
  a.appendChild(e);
  this.alignRightBtn = e;
  e = Entry.createElement("li");
  a.appendChild(e);
  c = Entry.createElement("a");
  e.appendChild(c);
  c.bindOnClick(function() {
    Entry.playground.object.entity.toggleFontBold() ? h.src = Entry.mediaFilePath + "text_button_bold_true.png" : h.src = Entry.mediaFilePath + "text_button_bold_false.png";
  });
  var h = Entry.createElement("img", "entryPlaygroundText_boldImage");
  c.appendChild(h);
  h.src = Entry.mediaFilePath + "text_button_bold_false.png";
  e = Entry.createElement("li");
  a.appendChild(e);
  c = Entry.createElement("a");
  e.appendChild(c);
  c.bindOnClick(function() {
    var b = !Entry.playground.object.entity.getUnderLine() || !1;
    k.src = Entry.mediaFilePath + "text_button_underline_" + b + ".png";
    Entry.playground.object.entity.setUnderLine(b);
  });
  var k = Entry.createElement("img", "entryPlaygroundText_underlineImage");
  c.appendChild(k);
  k.src = Entry.mediaFilePath + "text_button_underline_false.png";
  e = Entry.createElement("li");
  a.appendChild(e);
  c = Entry.createElement("a");
  e.appendChild(c);
  c.bindOnClick(function() {
    Entry.playground.object.entity.toggleFontItalic() ? l.src = Entry.mediaFilePath + "text_button_italic_true.png" : l.src = Entry.mediaFilePath + "/text_button_italic_false.png";
  });
  var l = Entry.createElement("img", "entryPlaygroundText_italicImage");
  c.appendChild(l);
  l.src = Entry.mediaFilePath + "text_button_italic_false.png";
  e = Entry.createElement("li");
  a.appendChild(e);
  c = Entry.createElement("a");
  e.appendChild(c);
  c.bindOnClick(function() {
    var b = !Entry.playground.object.entity.getStrike() || !1;
    Entry.playground.object.entity.setStrike(b);
    n.src = Entry.mediaFilePath + "text_button_strike_" + b + ".png";
  });
  var n = Entry.createElement("img", "entryPlaygroundText_strikeImage");
  c.appendChild(n);
  n.src = Entry.mediaFilePath + "text_button_strike_false.png";
  c = Entry.createElement("li");
  a.appendChild(c);
  e = Entry.createElement("a");
  c.appendChild(e);
  e.bindOnClick(function() {
    Entry.playground.toggleColourChooser("foreground");
  });
  c = Entry.createElement("img");
  e.appendChild(c);
  c.src = Entry.mediaFilePath + "text_button_color_false.png";
  c = Entry.createElement("li");
  a.appendChild(c);
  a = Entry.createElement("a");
  c.appendChild(a);
  a.bindOnClick(function() {
    Entry.playground.toggleColourChooser("background");
  });
  c = Entry.createElement("img");
  a.appendChild(c);
  c.src = Entry.mediaFilePath + "text_button_background_false.png";
  c = Entry.createElement("div");
  c.addClass("entryPlayground_fgColorDiv");
  f = Entry.createElement("div");
  f.addClass("entryPlayground_bgColorDiv");
  e.appendChild(c);
  a.appendChild(f);
  c = Entry.createElement("div");
  c.addClass("entryPlaygroundTextColoursWrapper");
  this.coloursWrapper = c;
  e.appendChild(c);
  f = Entry.getColourCodes();
  for (e = 0;e < f.length;e++) {
    g = Entry.createElement("div"), g.addClass("modal_colour"), g.setAttribute("colour", f[e]), g.style.backgroundColor = f[e], 0 === e && g.addClass("modalColourTrans"), g.bindOnClick(function(b) {
      Entry.playground.setTextColour(b.target.getAttribute("colour"));
    }), c.appendChild(g);
  }
  c.style.display = "none";
  c = Entry.createElement("div");
  c.addClass("entryPlaygroundTextBackgroundsWrapper");
  this.backgroundsWrapper = c;
  a.appendChild(c);
  for (e = 0;e < f.length;e++) {
    g = Entry.createElement("div"), g.addClass("modal_colour"), g.setAttribute("colour", f[e]), g.style.backgroundColor = f[e], 0 === e && g.addClass("modalColourTrans"), g.bindOnClick(function(b) {
      Entry.playground.setBackgroundColour(b.target.getAttribute("colour"));
    }), c.appendChild(g);
  }
  c.style.display = "none";
  var m = Entry.createElement("input");
  m.addClass("entryPlayground_textBox");
  a = function() {
    var b = Entry.getElementsByClassName("entryPlaygroundPainterAttrFontName")[0];
    "Nanum Pen Script" != b.value && "Jeju Hallasan" != b.value || null == /[\u4E00-\u9FFF]/.exec(this.value) || (b.value = "KoPub Batang", Entry.playground.object.entity.setFontType("KoPub Batang"), alert(Lang.Menus.not_supported_text));
    Entry.playground.object.setText(this.value);
    Entry.playground.object.entity.setText(this.value);
  };
  m.onkeyup = a;
  m.onchange = a;
  m.onblur = function() {
    Entry.dispatchEvent("textEdited");
  };
  this.textEditInput = m;
  b.appendChild(m);
  var t = Entry.createElement("textarea");
  t.addClass("entryPlayground_textArea");
  t.style.display = "none";
  t.onkeyup = a;
  t.onchange = a;
  t.onblur = function() {
    Entry.dispatchEvent("textEdited");
  };
  this.textEditArea = t;
  b.appendChild(t);
  a = Entry.createElement("div");
  a.addClass("entryPlaygroundFontSizeWrapper");
  b.appendChild(a);
  this.fontSizeWrapper = a;
  var u = Entry.createElement("div");
  u.addClass("entryPlaygroundFontSizeSlider");
  a.appendChild(u);
  var x = Entry.createElement("div");
  x.addClass("entryPlaygroundFontSizeIndicator");
  u.appendChild(x);
  this.fontSizeIndiciator = x;
  var v = Entry.createElement("div");
  v.addClass("entryPlaygroundFontSizeKnob");
  u.appendChild(v);
  this.fontSizeKnob = v;
  e = Entry.createElement("div");
  e.addClass("entryPlaygroundFontSizeLabel");
  e.innerHTML = "\uae00\uc790 \ud06c\uae30";
  a.appendChild(e);
  var q = !1, z = 0;
  v.onmousedown = function(b) {
    q = !0;
    z = $(u).offset().left;
  };
  v.addEventListener("touchstart", function(b) {
    q = !0;
    z = $(u).offset().left;
  });
  document.addEventListener("mousemove", function(b) {
    q && (b = b.pageX - z, b = Math.max(b, 5), b = Math.min(b, 88), v.style.left = b + "px", b /= .88, x.style.width = b + "%", Entry.playground.object.entity.setFontSize(b));
  });
  document.addEventListener("touchmove", function(b) {
    q && (b = b.touches[0].pageX - z, b = Math.max(b, 5), b = Math.min(b, 88), v.style.left = b + "px", b /= .88, x.style.width = b + "%", Entry.playground.object.entity.setFontSize(b));
  });
  document.addEventListener("mouseup", function(b) {
    q = !1;
  });
  document.addEventListener("touchend", function(b) {
    q = !1;
  });
  a = Entry.createElement("div");
  a.addClass("entryPlaygroundLinebreakWrapper");
  b.appendChild(a);
  b = Entry.createElement("hr");
  b.addClass("entryPlaygroundLinebreakHorizontal");
  a.appendChild(b);
  b = Entry.createElement("div");
  b.addClass("entryPlaygroundLinebreakButtons");
  a.appendChild(b);
  e = Entry.createElement("img");
  e.bindOnClick(function() {
    Entry.playground.toggleLineBreak(!1);
    B.innerHTML = Lang.Menus.linebreak_off_desc_1;
    y.innerHTML = Lang.Menus.linebreak_off_desc_2;
    C.innerHTML = Lang.Menus.linebreak_off_desc_3;
  });
  e.src = Entry.mediaFilePath + "text-linebreak-off-true.png";
  b.appendChild(e);
  this.linebreakOffImage = e;
  e = Entry.createElement("img");
  e.bindOnClick(function() {
    Entry.playground.toggleLineBreak(!0);
    B.innerHTML = Lang.Menus.linebreak_on_desc_1;
    y.innerHTML = Lang.Menus.linebreak_on_desc_2;
    C.innerHTML = Lang.Menus.linebreak_on_desc_3;
  });
  e.src = Entry.mediaFilePath + "text-linebreak-on-false.png";
  b.appendChild(e);
  this.linebreakOnImage = e;
  b = Entry.createElement("div");
  b.addClass("entryPlaygroundLinebreakDescription");
  a.appendChild(b);
  var B = Entry.createElement("p");
  B.innerHTML = Lang.Menus.linebreak_off_desc_1;
  b.appendChild(B);
  a = Entry.createElement("ul");
  b.appendChild(a);
  var y = Entry.createElement("li");
  y.innerHTML = Lang.Menus.linebreak_off_desc_2;
  a.appendChild(y);
  var C = Entry.createElement("li");
  C.innerHTML = Lang.Menus.linebreak_off_desc_3;
  a.appendChild(C);
};
Entry.Playground.prototype.generateSoundView = function(a) {
  if ("workspace" == Entry.type) {
    var b = Entry.createElement("div", "entryAddSound");
    b.addClass("entryPlaygroundAddSound");
    b.bindOnClick(function(b) {
      Entry.dispatchEvent("openSoundManager");
    });
    var c = Entry.createElement("div", "entryAddSoundInner");
    c.addClass("entryPlaygroundAddSoundInner");
    c.innerHTML = Lang.Workspace.sound_add;
    b.appendChild(c);
    a.appendChild(b);
    b = Entry.createElement("ul", "entrySoundList");
    b.addClass("entryPlaygroundSoundList");
    $ && $(b).sortable({start:function(b, a) {
      a.item.data("start_pos", a.item.index());
    }, stop:function(b, a) {
      b = a.item.data("start_pos");
      a = a.item.index();
      Entry.playground.moveSound(b, a);
    }, axis:"y"});
    a.appendChild(b);
    this.soundListView_ = b;
  } else {
    "phone" == Entry.type && (b = Entry.createElement("div", "entryAddSound"), b.addClass("entryPlaygroundAddSoundPhone"), b.bindOnClick(function(b) {
      Entry.dispatchEvent("openSoundManager");
    }), c = Entry.createElement("div", "entryAddSoundInner"), c.addClass("entryPlaygroundAddSoundInnerPhone"), c.innerHTML = Lang.Workspace.sound_add, b.appendChild(c), a.appendChild(b), b = Entry.createElement("ul", "entrySoundList"), b.addClass("entryPlaygroundSoundListPhone"), $ && $(b).sortable({start:function(b, a) {
      a.item.data("start_pos", a.item.index());
    }, stop:function(b, a) {
      b = a.item.data("start_pos");
      a = a.item.index();
      Entry.playground.moveSound(b, a);
    }, axis:"y"}), a.appendChild(b), this.soundListView_ = b);
  }
};
Entry.Playground.prototype.injectObject = function(a) {
  if (!a) {
    this.changeViewMode("code"), this.object = null;
  } else {
    if (a !== this.object) {
      this.object && this.object.toggleInformation(!1);
      this.object = a;
      this.setMenu(a.objectType);
      this.injectCode();
      "sprite" == a.objectType && Entry.pictureEditable ? (this.tabViewElements.text && this.tabViewElements.text.addClass("entryRemove"), this.tabViewElements.picture && this.tabViewElements.picture.removeClass("entryRemove")) : "textBox" == a.objectType && (this.tabViewElements.picture && this.tabViewElements.picture.addClass("entryRemove"), this.tabViewElements.text && this.tabViewElements.text.removeClass("entryRemove"));
      var b = this.viewMode_;
      "default" == b ? this.changeViewMode("code") : "picture" != b && "text" != b || "textBox" != a.objectType ? "text" != b && "picture" != b || "sprite" != a.objectType ? "sound" == b && this.changeViewMode("sound") : this.changeViewMode("picture") : this.changeViewMode("text");
      this.reloadPlayground();
    }
  }
};
Entry.Playground.prototype.injectCode = function() {
  var a = this.object.script, b = this.mainWorkspace, c = Entry.getMainWS();
  Entry.textCodingEnable && c && !c.vimBoard._parser._onError && (c.vimBoard._changedObject ? (c.vimBoard._currentObject = c.vimBoard._changedObject, c.vimBoard._currentScene = c.vimBoard._changedObject.scene) : Entry.playground && (c.vimBoard._currentObject = Entry.playground.object, c.vimBoard._currentScene = Entry.playground.object.scene), Entry.playground && Entry.textCodingEnable && (c.vimBoard._changedObject = Entry.playground.object, c.vimBoard._currentScene = Entry.playground.object.scene));
  b.changeBoardCode(a, function() {
    b.getBoard().adjustThreadsPosition();
  });
};
Entry.Playground.prototype.injectPicture = function() {
  var a = this.pictureListView_;
  if (a) {
    for (;a.hasChildNodes();) {
      a.removeChild(a.lastChild);
    }
    if (this.object) {
      for (var b = this.object.pictures, c = 0, d = b.length;c < d;c++) {
        var e = b[c];
        !e.view && Entry.playground.generatePictureElement(e);
        (e = b[c].view) || console.log(e);
        e.orderHolder.innerHTML = c + 1;
        a.appendChild(e);
      }
      this.selectPicture(this.object.selectedPicture);
    } else {
      Entry.dispatchEvent("pictureClear");
    }
  }
};
Entry.Playground.prototype.addPicture = function(a, b) {
  a = Entry.cloneSimpleObject(a);
  delete a.id;
  delete a.view;
  a = JSON.parse(JSON.stringify(a));
  a.id = Entry.generateHash();
  a.name = Entry.getOrderedName(a.name, this.object.pictures);
  this.generatePictureElement(a);
  this.object.addPicture(a);
  this.injectPicture();
  this.selectPicture(a);
};
Entry.Playground.prototype.setPicture = function(a) {
  var b = Entry.container.getPictureElement(a.id, a.objectId), c = $(b);
  if (b) {
    a.view = b;
    b.picture = a;
    b = c.find("#t_" + a.id)[0];
    if (a.fileurl) {
      b.style.backgroundImage = 'url("' + a.fileurl + '")';
    } else {
      var d = a.filename;
      b.style.backgroundImage = 'url("' + Entry.defaultPath + "/uploads/" + d.substring(0, 2) + "/" + d.substring(2, 4) + "/thumb/" + d + '.png")';
    }
    c.find("#s_" + a.id)[0].innerHTML = a.dimension.width + " X " + a.dimension.height;
  }
  Entry.container.setPicture(a);
};
Entry.Playground.prototype.downloadPicture = function(a) {
  a = Entry.playground.object.getPicture(a);
  a.fileurl ? window.open(a.fileurl) : window.open("/api/sprite/download/image/" + encodeURIComponent(a.filename) + "/" + encodeURIComponent(a.name) + ".png");
};
Entry.Playground.prototype.clonePicture = function(a) {
  a = Entry.playground.object.getPicture(a);
  this.addPicture(a, !0);
};
Entry.Playground.prototype.selectPicture = function(a) {
  for (var b = this.object.pictures, c = 0, d = b.length;c < d;c++) {
    var e = b[c];
    e.id === a.id ? e.view.addClass("entryPictureSelected") : e.view.removeClass("entryPictureSelected");
  }
  var f;
  a && a.id && (f = Entry.container.selectPicture(a.id, a.objectId));
  this.object.id === f && Entry.dispatchEvent("pictureSelected", a);
};
Entry.Playground.prototype.movePicture = function(a, b) {
  this.object.pictures.splice(b, 0, this.object.pictures.splice(a, 1)[0]);
  this.injectPicture();
  Entry.stage.sortZorder();
};
Entry.Playground.prototype.injectText = function() {
  if (Entry.playground.object) {
    Entry.playground.textEditInput.value = Entry.playground.object.entity.getText();
    Entry.playground.textEditArea.value = Entry.playground.object.entity.getText();
    Entry.playground.fontName_.value = Entry.playground.object.entity.getFontName();
    if (Entry.playground.object.entity.font) {
      var a = -1 < Entry.playground.object.entity.font.indexOf("bold") || !1;
      $("#entryPlaygroundText_boldImage").attr("src", Entry.mediaFilePath + "text_button_bold_" + a + ".png");
      a = -1 < Entry.playground.object.entity.font.indexOf("italic") || !1;
      $("#entryPlaygroundText_italicImage").attr("src", Entry.mediaFilePath + "text_button_italic_" + a + ".png");
    }
    a = Entry.playground.object.entity.getUnderLine() || !1;
    $("#entryPlaygroundText_underlineImage").attr("src", Entry.mediaFilePath + "text_button_underline_" + a + ".png");
    a = Entry.playground.object.entity.getStrike() || !1;
    $("#entryPlaygroundText_strikeImage").attr("src", Entry.mediaFilePath + "text_button_strike_" + a + ".png");
    $(".entryPlayground_fgColorDiv").css("backgroundColor", Entry.playground.object.entity.colour);
    $(".entryPlayground_bgColorDiv").css("backgroundColor", Entry.playground.object.entity.bgColour);
    Entry.playground.toggleLineBreak(Entry.playground.object.entity.getLineBreak());
    Entry.playground.object.entity.getLineBreak() && ($(".entryPlaygroundLinebreakDescription > p").html(Lang.Menus.linebreak_on_desc_1), $(".entryPlaygroundLinebreakDescription > ul > li").eq(0).html(Lang.Menus.linebreak_on_desc_2), $(".entryPlaygroundLinebreakDescription > ul > li").eq(1).html(Lang.Menus.linebreak_on_desc_3));
    Entry.playground.setFontAlign(Entry.playground.object.entity.getTextAlign());
    a = Entry.playground.object.entity.getFontSize();
    Entry.playground.fontSizeIndiciator.style.width = a + "%";
    Entry.playground.fontSizeKnob.style.left = .88 * a + "px";
  }
};
Entry.Playground.prototype.injectSound = function() {
  var a = this.soundListView_;
  if (a) {
    for (;a.hasChildNodes();) {
      a.removeChild(a.lastChild);
    }
    if (this.object) {
      for (var b = this.object.sounds, c = 0, d = b.length;c < d;c++) {
        var e = b[c];
        !e.view && Entry.playground.generateSoundElement(e);
        e = e.view;
        e.orderHolder.innerHTML = c + 1;
        a.appendChild(e);
      }
    }
  }
};
Entry.Playground.prototype.moveSound = function(a, b) {
  this.object.sounds.splice(b, 0, this.object.sounds.splice(a, 1)[0]);
  this.updateListViewOrder("sound");
  Entry.stage.sortZorder();
};
Entry.Playground.prototype.addSound = function(a, b) {
  a = Entry.cloneSimpleObject(a);
  delete a.view;
  delete a.id;
  a = JSON.parse(JSON.stringify(a));
  a.id = Entry.generateHash();
  a.name = Entry.getOrderedName(a.name, this.object.sounds);
  this.generateSoundElement(a);
  this.object.addSound(a);
  this.injectSound();
};
Entry.Playground.prototype.changeViewMode = function(a) {
  for (var b in this.tabViewElements) {
    this.tabViewElements[b].removeClass("entryTabSelected");
  }
  "default" != a && this.tabViewElements[a].addClass("entryTabSelected");
  if ("variable" != a) {
    var c = this.view_.children;
    for (b = 0;b < c.length;b++) {
      var d = c[b];
      -1 < d.id.toUpperCase().indexOf(a.toUpperCase()) ? d.removeClass("entryRemove") : d.addClass("entryRemove");
    }
    Entry.pictureEditable && ("picture" == a ? (this.painter.show(), this.pictureView_.object && this.pictureView_.object == this.object || (this.pictureView_.object = this.object, this.injectPicture())) : this.painter.hide());
    if ("sound" == a && (!this.soundView_.object || this.soundView_.object != this.object)) {
      this.soundView_.object = this.object, this.injectSound();
    } else {
      if ("text" == a && "textBox" == this.object.objectType || this.textView_.object != this.object) {
        this.textView_.object = this.object, this.injectText();
      }
    }
    "code" == a && this.resizeHandle_ && this.resizeHandle_.removeClass("entryRemove");
    Entry.engine.isState("run") && this.curtainView_.removeClass("entryRemove");
    this.selectedViewMode = this.viewMode_ = a;
    this.toggleOffVariableView();
  }
};
Entry.Playground.prototype.createVariableView = function() {
  var a = Entry.createElement("div");
  Entry.type && "workspace" != Entry.type ? "phone" == Entry.type && a.addClass("entryVariablePanelPhone") : a.addClass("entryVariablePanelWorkspace");
  this.variableViewWrapper_ = a;
  Entry.variableContainer.createDom(a);
  return a;
};
Entry.Playground.prototype.toggleOnVariableView = function() {
  Entry.playground.changeViewMode("code");
  this.hideBlockMenu();
  Entry.variableContainer.updateList();
  this.variableView_.removeClass("entryRemove");
  this.resizeHandle_.removeClass("entryRemove");
};
Entry.Playground.prototype.toggleOffVariableView = function() {
  this.showBlockMenu();
  this.variableView_.addClass("entryRemove");
};
Entry.Playground.prototype.editBlock = function() {
  var a = Entry.playground;
  Entry.stateManager && Entry.stateManager.addCommand("edit block", a, a.restoreBlock, a.object, a.object.getScriptText());
};
Entry.Playground.prototype.mouseupBlock = function() {
  if (Entry.reporter) {
    var a = Entry.playground, b = a.object;
    Entry.reporter.report(new Entry.State("edit block mouseup", a, a.restoreBlock, b, b.getScriptText()));
  }
};
Entry.Playground.prototype.restoreBlock = function(a, b) {
  Entry.container.selectObject(a.id);
  Entry.stateManager && Entry.stateManager.addCommand("restore block", this, this.restoreBlock, this.object, this.object.getScriptText());
  Blockly.Xml.textToDom(b);
};
Entry.Playground.prototype.setMenu = function(a) {
  if (this.currentObjectType != a) {
    var b = this.blockMenu;
    b.unbanClass(this.currentObjectType);
    b.banClass(a);
    b.setMenu();
    b.selectMenu(0, !0);
    this.currentObjectType = a;
  }
};
Entry.Playground.prototype.hideTabs = function() {
  var a = ["picture", "text", "sound", "variable"], b;
  for (b in a) {
    this.hideTab([a[b]]);
  }
};
Entry.Playground.prototype.hideTab = function(a) {
  this.tabViewElements[a] && (this.tabViewElements[a].addClass("hideTab"), this.tabViewElements[a].removeClass("showTab"));
};
Entry.Playground.prototype.showTabs = function() {
  var a = ["picture", "text", "sound", "variable"], b;
  for (b in a) {
    this.showTab(a[b]);
  }
};
Entry.Playground.prototype.showTab = function(a) {
  this.tabViewElements[a] && (this.tabViewElements[a].addClass("showTab"), this.tabViewElements[a].removeClass("hideTab"));
};
Entry.Playground.prototype.initializeResizeHandle = function(a) {
  $(a).bind("mousedown touchstart", function(b) {
    Entry.playground.resizing = !0;
    Entry.documentMousemove && (Entry.playground.resizeEvent = Entry.documentMousemove.attach(this, function(b) {
      Entry.playground.resizing && Entry.resizeElement({menuWidth:b.clientX - Entry.interfaceState.canvasWidth});
    }));
  });
  $(document).bind("mouseup touchend", function(b) {
    if (b = Entry.playground.resizeEvent) {
      Entry.playground.resizing = !1, Entry.documentMousemove.detach(b), delete Entry.playground.resizeEvent;
    }
  });
};
Entry.Playground.prototype.reloadPlayground = function() {
  var a = this.mainWorkspace;
  a && (a.getBlockMenu().reDraw(), a.getBoard().reDraw());
};
Entry.Playground.prototype.flushPlayground = function() {
  this.object = null;
  if (Entry.playground && Entry.playground.view_) {
    this.injectPicture();
    this.injectSound();
    var a = Entry.playground.mainWorkspace.getBoard();
    a.clear();
    a.changeCode(null);
  }
};
Entry.Playground.prototype.refreshPlayground = function() {
  Entry.playground && Entry.playground.view_ && ("picture" === this.getViewMode() && this.injectPicture(), "sound" === this.getViewMode() && this.injectSound());
};
Entry.Playground.prototype.updateListViewOrder = function(a) {
  a = "picture" == a ? this.pictureListView_.childNodes : this.soundListView_.childNodes;
  for (var b = 0, c = a.length;b < c;b++) {
    a[b].orderHolder.innerHTML = b + 1;
  }
};
Entry.Playground.prototype.generatePictureElement = function(a) {
  function b() {
    if ("" === this.value.trim()) {
      Entry.deAttachEventListener(this, "blur", b), alert("\uc774\ub984\uc744 \uc785\ub825\ud558\uc5ec \uc8fc\uc138\uc694."), this.focus(), Entry.attachEventListener(this, "blur", b);
    } else {
      for (var a = $(".entryPlaygroundPictureName"), c = 0;c < a.length;c++) {
        if (a.eq(c).val() == f.value && a[c] != this) {
          Entry.deAttachEventListener(this, "blur", b);
          alert("\uc774\ub984\uc774 \uc911\ubcf5 \ub418\uc5c8\uc2b5\ub2c8\ub2e4.");
          this.focus();
          Entry.attachEventListener(this, "blur", b);
          return;
        }
      }
      a = this.value;
      this.picture.name = a;
      if (c = Entry.playground) {
        if (c.object) {
          var d = c.object.getPicture(this.picture.id);
          d && (d.name = a);
        }
        (d = c.painter) && d.file && (d.file.name = a);
        c.reloadPlayground();
      }
      Entry.dispatchEvent("pictureNameChanged", this.picture);
    }
  }
  var c = Entry.createElement("li", a.id);
  a.view = c;
  c.addClass("entryPlaygroundPictureElement");
  c.picture = a;
  c.bindOnClick(function(b) {
    Entry.playground.selectPicture(this.picture);
  });
  Entry.Utils.disableContextmenu(a.view);
  $(a.view).on("contextmenu", function() {
    Entry.ContextMenu.show([{text:Lang.Workspace.context_rename, callback:function() {
      f.focus();
    }}, {text:Lang.Workspace.context_duplicate, callback:function() {
      Entry.playground.clonePicture(a.id);
    }}, {text:Lang.Workspace.context_remove, callback:function() {
      Entry.playground.object.removePicture(a.id) ? (Entry.removeElement(c), Entry.toast.success(Lang.Workspace.shape_remove_ok, a.name + " " + Lang.Workspace.shape_remove_ok_msg)) : Entry.toast.alert(Lang.Workspace.shape_remove_fail, Lang.Workspace.shape_remove_fail_msg);
    }}, {divider:!0}, {text:Lang.Workspace.context_download, callback:function() {
      Entry.playground.downloadPicture(a.id);
    }}], "workspace-contextmenu");
  });
  var d = Entry.createElement("div");
  d.addClass("entryPlaygroundPictureOrder");
  c.orderHolder = d;
  c.appendChild(d);
  d = Entry.createElement("div", "t_" + a.id);
  d.addClass("entryPlaygroundPictureThumbnail");
  if (a.fileurl) {
    d.style.backgroundImage = 'url("' + a.fileurl + '")';
  } else {
    var e = a.filename;
    d.style.backgroundImage = 'url("' + Entry.defaultPath + "/uploads/" + e.substring(0, 2) + "/" + e.substring(2, 4) + "/thumb/" + e + '.png")';
  }
  c.appendChild(d);
  var f = Entry.createElement("input");
  f.addClass("entryPlaygroundPictureName");
  f.addClass("entryEllipsis");
  f.picture = a;
  f.value = a.name;
  Entry.attachEventListener(f, "blur", b);
  f.onkeypress = function(b) {
    13 == b.keyCode && this.blur();
  };
  c.appendChild(f);
  d = Entry.createElement("div", "s_" + a.id);
  d.addClass("entryPlaygroundPictureSize");
  d.innerHTML = a.dimension.width + " X " + a.dimension.height;
  c.appendChild(d);
};
Entry.Playground.prototype.generateSoundElement = function(a) {
  var b = Entry.createElement("sound", a.id);
  a.view = b;
  b.addClass("entryPlaygroundSoundElement");
  b.sound = a;
  Entry.Utils.disableContextmenu(a.view);
  $(a.view).on("contextmenu", function() {
    Entry.ContextMenu.show([{text:Lang.Workspace.context_rename, callback:function() {
      g.focus();
    }}, {text:Lang.Workspace.context_duplicate, callback:function() {
      Entry.playground.addSound(a, !0);
    }}, {text:Lang.Workspace.context_remove, callback:function() {
      Entry.playground.object.removeSound(a.id) ? (Entry.removeElement(b), Entry.toast.success(Lang.Workspace.sound_remove_ok, a.name + " " + Lang.Workspace.sound_remove_ok_msg)) : Entry.toast.alert(Lang.Workspace.sound_remove_fail, "");
      Entry.removeElement(b);
    }}], "workspace-contextmenu");
  });
  var c = Entry.createElement("div");
  c.addClass("entryPlaygroundSoundOrder");
  b.orderHolder = c;
  b.appendChild(c);
  var d = Entry.createElement("div");
  d.addClass("entryPlaygroundSoundThumbnail");
  d.addClass("entryPlaygroundSoundPlay");
  var e = !1, f;
  d.addEventListener("click", function() {
    e ? (e = !1, d.removeClass("entryPlaygroundSoundStop"), d.addClass("entryPlaygroundSoundPlay"), f.stop()) : (e = !0, d.removeClass("entryPlaygroundSoundPlay"), d.addClass("entryPlaygroundSoundStop"), f = createjs.Sound.play(a.id), f.addEventListener("complete", function(b) {
      d.removeClass("entryPlaygroundSoundStop");
      d.addClass("entryPlaygroundSoundPlay");
      e = !1;
    }), f.addEventListener("loop", function(b) {
    }), f.addEventListener("failed", function(b) {
    }));
  });
  b.appendChild(d);
  var g = Entry.createElement("input");
  g.addClass("entryPlaygroundSoundName");
  g.sound = a;
  g.value = a.name;
  var h = document.getElementsByClassName("entryPlaygroundSoundName");
  g.onblur = function() {
    if ("" === this.value) {
      alert("\uc774\ub984\uc744 \uc785\ub825\ud558\uc5ec \uc8fc\uc138\uc694."), this.focus();
    } else {
      for (var b = 0, a = 0;a < h.length;a++) {
        if (h[a].value == g.value && (b += 1, 1 < b)) {
          alert("\uc774\ub984\uc774 \uc911\ubcf5 \ub418\uc5c8\uc2b5\ub2c8\ub2e4.");
          this.focus();
          return;
        }
      }
      this.sound.name = this.value;
      Entry.playground.reloadPlayground();
    }
  };
  g.onkeypress = function(b) {
    13 == b.keyCode && this.blur();
  };
  b.appendChild(g);
  c = Entry.createElement("div");
  c.addClass("entryPlaygroundSoundLength");
  c.innerHTML = a.duration + " \ucd08";
  b.appendChild(c);
};
Entry.Playground.prototype.toggleColourChooser = function(a) {
  "foreground" === a ? "none" === this.coloursWrapper.style.display ? (this.coloursWrapper.style.display = "block", this.backgroundsWrapper.style.display = "none") : this.coloursWrapper.style.display = "none" : "background" === a && ("none" === this.backgroundsWrapper.style.display ? (this.backgroundsWrapper.style.display = "block", this.coloursWrapper.style.display = "none") : this.backgroundsWrapper.style.display = "none");
};
Entry.Playground.prototype.setTextColour = function(a) {
  Entry.playground.object.entity.setColour(a);
  Entry.playground.toggleColourChooser("foreground");
  $(".entryPlayground_fgColorDiv").css("backgroundColor", a);
};
Entry.Playground.prototype.setBackgroundColour = function(a) {
  Entry.playground.object.entity.setBGColour(a);
  Entry.playground.toggleColourChooser("background");
  $(".entryPlayground_bgColorDiv").css("backgroundColor", a);
};
Entry.Playground.prototype.isTextBGMode = function() {
  return this.isTextBGMode_;
};
Entry.Playground.prototype.checkVariables = function() {
  Entry.forEBS || (Entry.variableContainer.lists_.length ? this.blockMenu.unbanClass("listNotExist") : this.blockMenu.banClass("listNotExist"), Entry.variableContainer.variables_.length ? this.blockMenu.unbanClass("variableNotExist") : this.blockMenu.banClass("variableNotExist"));
};
Entry.Playground.prototype.getViewMode = function() {
  return this.viewMode_;
};
Entry.Playground.prototype.updateHW = function() {
  var a = Entry.playground.mainWorkspace.blockMenu;
  if (a) {
    var b = Entry.hw;
    b && b.connected ? (a.banClass("arduinoDisconnected", !0), b.banHW(), b.hwModule ? (a.banClass("arduinoConnect", !0), a.unbanClass("arduinoConnected", !0), a.unbanClass(b.hwModule.name)) : (a.banClass("arduinoConnected", !0), a.unbanClass("arduinoConnect", !0))) : (a.banClass("arduinoConnected", !0), a.banClass("arduinoConnect", !0), a.unbanClass("arduinoDisconnected", !0), Entry.hw.banHW());
    a.reDraw();
  }
};
Entry.Playground.prototype.toggleLineBreak = function(a) {
  this.object && "textBox" == this.object.objectType && (a ? (Entry.playground.object.entity.setLineBreak(!0), $(".entryPlayground_textArea").css("display", "block"), $(".entryPlayground_textBox").css("display", "none"), this.linebreakOffImage.src = Entry.mediaFilePath + "text-linebreak-off-false.png", this.linebreakOnImage.src = Entry.mediaFilePath + "text-linebreak-on-true.png", this.fontSizeWrapper.removeClass("entryHide")) : (Entry.playground.object.entity.setLineBreak(!1), $(".entryPlayground_textArea").css("display", 
  "none"), $(".entryPlayground_textBox").css("display", "block"), this.linebreakOffImage.src = Entry.mediaFilePath + "text-linebreak-off-true.png", this.linebreakOnImage.src = Entry.mediaFilePath + "text-linebreak-on-false.png", this.fontSizeWrapper.addClass("entryHide")));
};
Entry.Playground.prototype.setFontAlign = function(a) {
  if ("textBox" == this.object.objectType) {
    this.alignLeftBtn.removeClass("toggle");
    this.alignCenterBtn.removeClass("toggle");
    this.alignRightBtn.removeClass("toggle");
    switch(a) {
      case Entry.TEXT_ALIGN_LEFT:
        this.alignLeftBtn.addClass("toggle");
        break;
      case Entry.TEXT_ALIGN_CENTER:
        this.alignCenterBtn.addClass("toggle");
        break;
      case Entry.TEXT_ALIGN_RIGHT:
        this.alignRightBtn.addClass("toggle");
    }
    this.object.entity.setTextAlign(a);
  }
};
Entry.Playground.prototype.hideBlockMenu = function() {
  this.mainWorkspace.getBlockMenu().hide();
};
Entry.Playground.prototype.showBlockMenu = function() {
  this.mainWorkspace.getBlockMenu().show();
};
Entry.Playground.prototype.getDom = function(a) {
  if (1 === a.length) {
    switch(a.shift()) {
      case "code":
        return this._codeTab;
    }
  }
};
Entry.Popup = function() {
  Entry.assert(!window.popup, "Popup exist");
  this.body_ = Entry.createElement("div");
  this.body_.addClass("entryPopup");
  this.body_.bindOnClick(function(a) {
    a.target == this && this.popup.remove();
  });
  this.body_.popup = this;
  document.body.appendChild(this.body_);
  this.window_ = Entry.createElement("div");
  this.window_.addClass("entryPopupWindow");
  "tablet" === Entry.device && this.window_.addClass("tablet");
  this.window_.bindOnClick(function() {
  });
  Entry.addEventListener("windowResized", this.resize);
  window.popup = this;
  this.resize();
  this.body_.appendChild(this.window_);
};
Entry.Popup.prototype.remove = function() {
  for (;this.window_.hasChildNodes();) {
    "workspace" == Entry.type ? Entry.view_.insertBefore(this.window_.firstChild, Entry.container.view_) : Entry.view_.insertBefore(this.window_.lastChild, Entry.view_.firstChild);
  }
  $("body").css("overflow", "auto");
  Entry.removeElement(this.body_);
  window.popup = null;
  Entry.removeEventListener("windowResized", this.resize);
  Entry.engine.popup = null;
  Entry.windowResized.notify();
};
Entry.Popup.prototype.resize = function(a) {
  a = window.popup.window_;
  var b = .9 * window.innerWidth, c = .9 * window.innerHeight - 35;
  9 * b <= 16 * c ? c = b / 16 * 9 + 35 : (b = 16 * c / 9, c += 35);
  a.style.width = String(b) + "px";
  a.style.height = String(c) + "px";
  Entry.stage && Entry.stage.updateBoundRect();
};
Entry.popupHelper = function(a) {
  this.popupList = {};
  this.nextPopupList = [];
  this.nowContent;
  a && (window.popupHelper = null);
  Entry.assert(!window.popupHelper, "Popup exist");
  var b = ["confirm", "spinner"], c = ["entryPopupHelperTopSpan", "entryPopupHelperBottomSpan", "entryPopupHelperLeftSpan", "entryPopupHelperRightSpan"];
  this.body_ = Entry.Dom("div", {classes:["entryPopup", "hiddenPopup", "popupHelper"]});
  var d = this;
  this.body_.bindOnClick(function(a) {
    if (!(d.nowContent && -1 < b.indexOf(d.nowContent.prop("type")))) {
      var e = $(a.target);
      c.forEach(function(b) {
        e.hasClass(b) && d.hide();
      });
      a.target == d && d.hide();
    }
  });
  window.popupHelper = this;
  this.body_.prop("popup", this);
  Entry.Dom("div", {class:"entryPopupHelperTopSpan", parent:this.body_});
  a = Entry.Dom("div", {class:"entryPopupHelperMiddleSpan", parent:this.body_});
  Entry.Dom("div", {class:"entryPopupHelperBottomSpan", parent:this.body_});
  Entry.Dom("div", {class:"entryPopupHelperLeftSpan", parent:a});
  this.window_ = Entry.Dom("div", {class:"entryPopupHelperWindow", parent:a});
  Entry.Dom("div", {class:"entryPopupHelperRightSpan", parent:a});
  $("body").append(this.body_);
};
Entry.popupHelper.prototype.clearPopup = function() {
  for (var a = this.popupWrapper_.children.length - 1;2 < a;a--) {
    this.popupWrapper_.removeChild(this.popupWrapper_.children[a]);
  }
};
Entry.popupHelper.prototype.addPopup = function(a, b) {
  var c = Entry.Dom("div"), d = Entry.Dom("div", {class:"entryPopupHelperCloseButton"});
  d.bindOnClick(function() {
    b.closeEvent ? b.closeEvent(this) : this.hide();
  }.bind(this));
  var e = Entry.Dom("div", {class:"entryPopupHelperWrapper"});
  e.append(d);
  b.title && (d = Entry.Dom("div", {class:"entryPopupHelperTitle"}), e.append(d), d.text(b.title));
  c.addClass(a);
  c.append(e);
  c.popupWrapper_ = e;
  c.prop("type", b.type);
  "function" === typeof b.setPopupLayout && b.setPopupLayout(c);
  c._obj = b;
  this.popupList[a] = c;
};
Entry.popupHelper.prototype.hasPopup = function(a) {
  return !!this.popupList[a];
};
Entry.popupHelper.prototype.setPopup = function(a) {
};
Entry.popupHelper.prototype.remove = function(a) {
  0 < this.window_.children().length && this.window_.children().remove();
  delete this.popupList[a];
  this.nowContent = void 0;
  this.body_.addClass("hiddenPopup");
  0 < this.nextPopupList.length && this.show(this.nextPopupList.shift());
};
Entry.popupHelper.prototype.resize = function(a) {
};
Entry.popupHelper.prototype.show = function(a, b) {
  function c(b) {
    d.window_.append(d.popupList[b]);
    d.nowContent = d.popupList[b];
    d.body_.removeClass("hiddenPopup");
  }
  var d = this;
  b ? 0 < this.window_.children().length ? this.nextPopupList.push(a) : (this.window_.children().detach(), c(a)) : (this.window_.children().detach(), c(a));
  if (this.nowContent && this.nowContent._obj && this.nowContent._obj.onShow) {
    this.nowContent._obj.onShow();
  }
};
Entry.popupHelper.prototype.hide = function() {
  this.nowContent = void 0;
  this.body_.addClass("hiddenPopup");
  this.window_.children().detach();
  0 < this.nextPopupList.length && this.show(this.nextPopupList.shift());
};
Entry.PopupList = function(a) {
  this.view = a;
};
(function(a) {
  a.getView = function() {
    return this.view;
  };
  a.resize = function() {
  };
})(Entry.PopupList.prototype);
Entry.getStartProject = function(a) {
  return {category:"\uae30\ud0c0", scenes:[{name:"\uc7a5\uba74 1", id:"7dwq"}], variables:[{name:"\ucd08\uc2dc\uacc4", id:"brih", visible:!1, value:"0", variableType:"timer", x:150, y:-70, array:[], object:null, isCloud:!1}, {name:"\ub300\ub2f5", id:"1vu8", visible:!1, value:"0", variableType:"answer", x:150, y:-100, array:[], object:null, isCloud:!1}], objects:[{id:"7y0y", name:"\uc5d4\ud2b8\ub9ac\ubd07", script:[[{type:"when_run_button_click", x:40, y:50}, {type:"repeat_basic", statements:[[{type:"move_direction"}]]}]], 
  selectedPictureId:"vx80", objectType:"sprite", rotateMethod:"free", scene:"7dwq", sprite:{sounds:[{duration:1.3, ext:".mp3", id:"8el5", fileurl:a + "media/bark.mp3", name:"\uac15\uc544\uc9c0 \uc9d6\ub294\uc18c\ub9ac"}], pictures:[{id:"vx80", fileurl:a + "media/entrybot1.png", name:Lang.Blocks.walking_entryBot + "1", scale:100, dimension:{width:284, height:350}}, {id:"4t48", fileurl:a + "media/entrybot2.png", name:Lang.Blocks.walking_entryBot + "2", scale:100, dimension:{width:284, height:350}}]}, 
  entity:{x:0, y:0, regX:142, regY:175, scaleX:.3154574132492113, scaleY:.3154574132492113, rotation:0, direction:90, width:284, height:350, visible:!0}, lock:!1, active:!0}], speed:60};
};
Entry.Reporter = function(a) {
  this.projectId = this.userId = null;
  this.isRealTime = a;
  this.activities = [];
};
Entry.Reporter.prototype.start = function(a, b, c) {
  this.isRealTime && (-1 < window.location.href.indexOf("localhost") ? this.io = io("localhost:7000") : this.io = io("play04.play-entry.com:7000"), this.io.emit("activity", {message:"start", userId:b, projectId:a, time:c}));
  this.userId = b;
  this.projectId = a;
};
Entry.Reporter.prototype.report = function(a) {
  if (!this.isRealTime || this.io) {
    var b = [], c;
    for (c in a.params) {
      var d = a.params[c];
      "object" !== typeof d ? b.push(d) : d.id && b.push(d.id);
    }
    a = {message:a.message, userId:this.userId, projectId:this.projectId, time:a.time, params:b};
    this.isRealTime ? this.io.emit("activity", a) : this.activities.push(a);
  }
};
Entry.Scene = function() {
  var a = this;
  this.scenes_ = [];
  this.selectedScene = null;
  this.maxCount = 20;
  $(window).on("resize", function(b) {
    a.resize();
  });
  a.disposeEvent = Entry.disposeEvent.attach(this, function(b) {
    var a = document.activeElement;
    a && a !== b.target && $(a).hasClass("entrySceneFieldWorkspace") && a.blur();
  });
};
Entry.Scene.prototype.generateView = function(a, b) {
  var c = this;
  this.view_ = a;
  this.view_.addClass("entryScene");
  b && "workspace" != b || (this.view_.addClass("entrySceneWorkspace"), $(this.view_).on("mousedown", function(b) {
    var a = $(this).offset(), d = $(window), g = b.pageX - a.left + d.scrollLeft();
    b = b.pageY - a.top + d.scrollTop();
    b = 40 - b;
    a = -40 / 55;
    d = $(c.selectedScene.view).find(".entrySceneRemoveButtonCoverWorkspace").offset().left;
    !(g < d || g > d + 55) && b > 40 + a * (g - d) && (g = c.getNextScene()) && (g = $(g.view), $(document).trigger("mouseup"), g.trigger("mousedown"));
  }), a = Entry.createElement("ul"), a.addClass("entrySceneListWorkspace"), Entry.sceneEditable && $ && $(a).sortable({start:function(b, a) {
    a.item.data("start_pos", a.item.index());
    $(a.item[0]).clone(!0);
  }, stop:function(b, a) {
    b = a.item.data("start_pos");
    a = a.item.index();
    Entry.scene.moveScene(b, a);
  }, axis:"x", tolerance:"pointer"}), this.view_.appendChild(a), this.listView_ = a, Entry.sceneEditable && (a = Entry.createElement("span"), a.addClass("entrySceneElementWorkspace"), a.addClass("entrySceneAddButtonWorkspace"), a.bindOnClick(function(b) {
    Entry.engine.isState("run") || Entry.scene.addScene();
  }), this.view_.appendChild(a), this.addButton_ = a));
};
Entry.Scene.prototype.generateElement = function(a) {
  var b = this, c = Entry.createElement("li", a.id);
  document.createDocumentFragment("div").appendChild(c);
  c.addClass("entrySceneElementWorkspace entrySceneButtonWorkspace minValue");
  $(c).on("mousedown", function(b) {
    Entry.engine.isState("run") ? b.preventDefault() : Entry.scene.selectScene(a);
  });
  var d = Entry.createElement("input");
  d.addClass("entrySceneFieldWorkspace");
  d.value = a.name;
  Entry.sceneEditable || (d.disabled = "disabled");
  var e = Entry.createElement("span");
  e.addClass("entrySceneLeftWorkspace");
  c.appendChild(e);
  e = Entry.createElement("span");
  e.addClass("entrySceneInputCover");
  c.appendChild(e);
  a.inputWrapper = e;
  d.onkeyup = function(c) {
    c = c.keyCode;
    Entry.isArrowOrBackspace(c) || (a.name = this.value, 13 == c && this.blur(), 10 < this.value.length && (this.value = this.value.substring(0, 10), a.name = this.value, this.blur()), setTimeout(function() {
      b.resize();
    }, 0));
  };
  d.onblur = function(c) {
    d.value = this.value;
    a.name = this.value;
    b.resize();
  };
  e.appendChild(d);
  e = Entry.createElement("span");
  e.addClass("entrySceneRemoveButtonCoverWorkspace");
  c.appendChild(e);
  if (Entry.sceneEditable) {
    var f = Entry.createElement("button");
    f.addClass("entrySceneRemoveButtonWorkspace");
    f.scene = a;
    f.bindOnClick(function(b) {
      b.stopPropagation();
      Entry.engine.isState("run") || confirm(Lang.Workspace.will_you_delete_scene) && Entry.scene.removeScene(this.scene);
    });
    e.appendChild(f);
  }
  Entry.Utils.disableContextmenu(c);
  $(c).on("contextmenu", function() {
    var b = [{text:Lang.Workspace.duplicate_scene, enable:Entry.engine.isState("stop") && !this.isMax(), callback:function() {
      Entry.scene.cloneScene(a);
    }}];
    Entry.ContextMenu.show(b, "workspace-contextmenu");
  }.bind(this));
  return a.view = c;
};
Entry.Scene.prototype.updateView = function() {
  if (!Entry.type || "workspace" == Entry.type) {
    for (var a = this.listView_, b = $(a).children().length;b < this.getScenes().length;b++) {
      a.appendChild(this.getScenes()[b].view);
    }
    this.addButton_ && (this.getScenes(), this.isMax() ? this.addButton_.addClass("entryRemove") : this.addButton_.removeClass("entryRemove"));
  }
  this.resize();
};
Entry.Scene.prototype.addScenes = function(a) {
  if ((this.scenes_ = a) && 0 !== a.length) {
    for (var b = 0, c = a.length;b < c;b++) {
      this.generateElement(a[b]);
    }
  } else {
    this.scenes_ = [], this.scenes_.push(this.createScene());
  }
  this.selectScene(this.getScenes()[0]);
};
Entry.Scene.prototype.addScene = function(a, b) {
  void 0 === a && (a = this.createScene());
  a.view || this.generateElement(a);
  b || "number" == typeof b ? this.getScenes().splice(b, 0, a) : this.getScenes().push(a);
  Entry.stage.objectContainers.push(Entry.stage.createObjectContainer(a));
  this.selectScene(a);
  this.updateView();
  return a;
};
Entry.Scene.prototype.removeScene = function(a) {
  if (1 >= this.getScenes().length) {
    Entry.toast.alert(Lang.Msgs.runtime_error, Lang.Workspace.Scene_delete_error, !1);
  } else {
    var b = this.getScenes().indexOf(this.getSceneById(a.id));
    this.getScenes().splice(b, 1);
    for (var b = Entry.container.getSceneObjects(a), c = 0;c < b.length;c++) {
      Entry.container.removeObject(b[c]);
    }
    Entry.stage.removeObjectContainer(a);
    $(a.view).remove();
    this.selectScene();
  }
};
Entry.Scene.prototype.selectScene = function(a) {
  a = a || this.getScenes()[0];
  if (!this.selectedScene || this.selectedScene.id != a.id) {
    Entry.engine.isState("run") && Entry.container.resetSceneDuringRun();
    var b = this.selectedScene;
    b && (b.view.removeClass("selectedScene"), b = document.activeElement, $(b).hasClass("entrySceneFieldWorkspace") && b.blur());
    this.selectedScene = a;
    a.view.addClass("selectedScene");
    Entry.container.setCurrentObjects();
    Entry.stage.objectContainers && 0 !== Entry.stage.objectContainers.length && Entry.stage.selectObjectContainer(a);
    if ((b = Entry.container.getCurrentObjects()[0]) && "minimize" != Entry.type) {
      Entry.container.selectObject(b.id), Entry.playground.refreshPlayground();
    } else {
      if (Entry.isTextMode) {
        if ((b = Entry.getMainWS()) && b.vimBoard) {
          var c = b.vimBoard._currentObject, d = b.vimBoard._currentScene, e = b.vimBoard._parser;
          try {
            a.id != d.id && b._syncTextCode();
          } catch (f) {
          }
          if (e._onError) {
            Entry.container.selectObject(c.id, !0);
            return;
          }
        }
        b && b.vimBoard && b.vimBoard.clearText();
      }
      Entry.stage.selectObject(null);
      Entry.playground.flushPlayground();
      Entry.variableContainer.updateList();
    }
    Entry.container.listView_ || Entry.stage.sortZorder();
    Entry.container.updateListView();
    this.updateView();
    Entry.requestUpdate = !0;
  }
};
Entry.Scene.prototype.toJSON = function() {
  for (var a = [], b = this.getScenes().length, c = 0;c < b;c++) {
    var d = this.getScenes()[c], e = d.view, f = d.inputWrapper;
    delete d.view;
    delete d.inputWrapper;
    a.push(JSON.parse(JSON.stringify(d)));
    d.view = e;
    d.inputWrapper = f;
  }
  return a;
};
Entry.Scene.prototype.moveScene = function(a, b) {
  this.getScenes().splice(b, 0, this.getScenes().splice(a, 1)[0]);
  Entry.container.updateObjectsOrder();
  Entry.stage.sortZorder();
  $(".entrySceneElementWorkspace").removeAttr("style");
};
Entry.Scene.prototype.getSceneById = function(a) {
  for (var b = this.getScenes(), c = 0;c < b.length;c++) {
    if (b[c].id == a) {
      return b[c];
    }
  }
  return !1;
};
Entry.Scene.prototype.getScenes = function() {
  return this.scenes_;
};
Entry.Scene.prototype.takeStartSceneSnapshot = function() {
  this.sceneBeforeRun = this.selectedScene;
};
Entry.Scene.prototype.loadStartSceneSnapshot = function() {
  this.selectScene(this.sceneBeforeRun);
  this.sceneBeforeRun = null;
};
Entry.Scene.prototype.createScene = function() {
  var a = {name:Lang.Blocks.SCENE + " " + (this.getScenes().length + 1), id:Entry.generateHash()};
  this.generateElement(a);
  return a;
};
Entry.Scene.prototype.cloneScene = function(a) {
  if (this.isMax()) {
    Entry.toast.alert(Lang.Msgs.runtime_error, Lang.Workspace.Scene_add_error, !1);
  } else {
    var b = {name:(Lang.Workspace.cloned_scene + a.name).substring(0, 10), id:Entry.generateHash()};
    this.generateElement(b);
    this.addScene(b);
    a = Entry.container.getSceneObjects(a);
    try {
      this.isSceneCloning = !0;
      for (var c = a.length - 1;0 <= c;c--) {
        Entry.container.addCloneObject(a[c], b.id);
      }
      this._focusSceneNameField(b);
      this.isSceneCloning = !1;
    } catch (d) {
    }
  }
};
Entry.Scene.prototype.resize = function() {
  var a = this.getScenes(), b = this.selectedScene, c = a[0];
  if (0 !== a.length && c) {
    var d = $(c.view).offset().left;
    parseFloat($(b.view).css("margin-left"));
    var c = Math.floor($(this.view_).width() - d - 5), e = d + 15, d = 0, f;
    for (f in a) {
      var g = a[f], h = g.view;
      h.addClass("minValue");
      var h = $(h), k = parseFloat(Entry.computeInputWidth(g.name)), l = 10 * k / 9;
      g === this.selectedScene && (d = l - k);
      $(g.inputWrapper).width(l + "px");
      e += h.width() + -40;
    }
    if (e > c) {
      for (f in g = a.length - 1, c = c - Math.round($(b.view).width()) - 30.5 * g - d, c = Math.floor(c / g), a) {
        g = a[f], b.id != g.id ? (g.view.removeClass("minValue"), $(g.inputWrapper).width(c)) : g.view.addClass("minValue");
      }
    }
  }
};
Entry.Scene.prototype.getNextScene = function() {
  var a = this.getScenes();
  return a[a.indexOf(this.selectedScene) + 1];
};
Entry.Scene.prototype.isMax = function() {
  return this.scenes_.length >= this.maxCount;
};
Entry.Scene.prototype.clear = function() {
  this.scenes_.map(function(a) {
    Entry.stage.removeObjectContainer(a);
  });
  $(this.listView_).html("");
  this.scenes_ = [];
};
Entry.Scene.prototype._focusSceneNameField = function(a) {
  (a = $(a.view).find("input")) && a.focus && a.focus();
};
Entry.Script = function(a) {
  this.entity = a;
};
p = Entry.Script.prototype;
p.init = function(a, b, c) {
  Entry.assert("BLOCK" == a.tagName.toUpperCase(), a.tagName);
  this.type = a.getAttribute("type");
  this.id = Number(a.getAttribute("id"));
  a.getElementsByTagName("mutation").length && a.getElementsByTagName("mutation")[0].hasAttribute("hashid") && (this.hashId = a.childNodes[0].getAttribute("hashid"));
  "REPEAT" == this.type.substr(0, 6).toUpperCase() && (this.isRepeat = !0);
  b instanceof Entry.Script && (this.previousScript = b, b.parentScript && (this.parentScript = b.parentScript));
  c instanceof Entry.Script && (this.parentScript = c);
  a = a.childNodes;
  for (b = 0;b < a.length;b++) {
    if (c = a[b], "NEXT" == c.tagName.toUpperCase()) {
      this.nextScript = new Entry.Script(this.entity), this.register && (this.nextScript.register = this.register), this.nextScript.init(a[b].childNodes[0], this);
    } else {
      if ("VALUE" == c.tagName.toUpperCase()) {
        this.values || (this.values = {});
        var d = new Entry.Script(this.entity);
        this.register && (d.register = this.register);
        d.init(c.childNodes[0]);
        this.values[c.getAttribute("name")] = d;
      } else {
        "FIELD" == c.tagName.toUpperCase() ? (this.fields || (this.fields = {}), this.fields[c.getAttribute("name")] = c.textContent) : "STATEMENT" == c.tagName.toUpperCase() && (this.statements || (this.statements = {}), d = new Entry.Script(this.entity), this.register && (d.register = this.register), d.init(c.childNodes[0], null, this), d.key = c.getAttribute("name"), this.statements[c.getAttribute("name")] = d);
      }
    }
  }
};
p.clone = function(a, b) {
  var c = new Entry.Script(a);
  c.id = this.id;
  c.type = this.type;
  c.isRepeat = this.isRepeat;
  if (this.parentScript && !this.previousScript && 2 != b) {
    c.parentScript = this.parentScript.clone(a);
    for (var d = c.parentScript.statements[this.key] = c;d.nextScript;) {
      d = d.nextScript, d.parentScript = c.parentScript;
    }
  }
  this.nextScript && 1 != b && (c.nextScript = this.nextScript.clone(a, 0), c.nextScript.previousScript = this);
  this.previousScript && 0 !== b && (c.previousScript = this.previousScript.clone(a, 1), c.previousScript.previousScript = this);
  if (this.fields) {
    c.fields = {};
    for (var e in this.fields) {
      c.fields[e] = this.fields[e];
    }
  }
  if (this.values) {
    for (e in c.values = {}, this.values) {
      c.values[e] = this.values[e].clone(a);
    }
  }
  if (this.statements) {
    for (e in c.statements = {}, this.statements) {
      for (c.statements[e] = this.statements[e].clone(a, 2), d = c.statements[e], d.parentScript = c;d.nextScript;) {
        d = d.nextScript, d.parentScript = c;
      }
    }
  }
  return c;
};
p.getStatement = function(a) {
  return this.statements[a];
};
p.compute = function() {
};
p.getValue = function(a) {
  return this.values[a].run();
};
p.getNumberValue = function(a) {
  return Number(this.values[a].run());
};
p.getStringValue = function(a) {
  return String(this.values[a].run());
};
p.getBooleanValue = function(a) {
  return this.values[a].run() ? !0 : !1;
};
p.getField = function(a) {
  return this.fields[a];
};
p.getStringField = function(a) {
  return String(this.fields[a]);
};
p.getNumberField = function(a) {
  return Number(this.fields[a]);
};
p.callReturn = function() {
  return this.nextScript ? this.nextScript : this.parentScript ? this.parentScript : null;
};
p.run = function() {
  return Entry.block[this.type](this.entity, this);
};
Entry.Stage = function() {
  this.variables = {};
  this.background = new createjs.Shape;
  this.background.graphics.beginFill("#ffffff").drawRect(-480, -240, 960, 480);
  this.objectContainers = [];
  this.selectedObjectContainer = null;
  this.variableContainer = new createjs.Container;
  this.dialogContainer = new createjs.Container;
  this.selectedObject = null;
  this.isObjectClick = !1;
};
Entry.Stage.prototype.initStage = function(a) {
  this.canvas = new createjs.Stage(a.id);
  this.canvas.x = 320;
  this.canvas.y = 180;
  this.canvas.scaleX = this.canvas.scaleY = 2 / 1.5;
  createjs.Touch.enable(this.canvas);
  this.canvas.enableMouseOver(10);
  this.canvas.mouseMoveOutside = !0;
  this.canvas.addChild(this.background);
  this.canvas.addChild(this.variableContainer);
  this.canvas.addChild(this.dialogContainer);
  this.inputField = null;
  this.initCoordinator();
  this.initHandle();
  this.mouseCoordinate = {x:0, y:0};
  if (Entry.isPhone()) {
    a.ontouchstart = function(b) {
      Entry.dispatchEvent("canvasClick", b);
      Entry.stage.isClick = !0;
    }, a.ontouchend = function(b) {
      Entry.stage.isClick = !1;
      Entry.dispatchEvent("canvasClickCanceled", b);
    };
  } else {
    var b = function(b) {
      Entry.dispatchEvent("canvasClick", b);
      Entry.stage.isClick = !0;
    };
    a.onmousedown = b;
    a.ontouchstart = b;
    b = function(b) {
      Entry.stage.isClick = !1;
      Entry.dispatchEvent("canvasClickCanceled", b);
    };
    a.onmouseup = b;
    a.ontouchend = b;
    $(document).click(function(b) {
      Entry.stage.focused = "entryCanvas" === b.target.id ? !0 : !1;
    });
  }
  Entry.addEventListener("canvasClick", function(b) {
    Entry.stage.isObjectClick = !1;
  });
  Entry.windowResized.attach(this, function() {
    Entry.stage.updateBoundRect();
  });
  $(window).scroll(function() {
    Entry.stage.updateBoundRect();
  });
  b = function(b) {
    b.preventDefault();
    var a = Entry.stage.getBoundRect(), c;
    -1 < Entry.getBrowserType().indexOf("IE") ? (c = 480 * ((b.pageX - a.left - document.documentElement.scrollLeft) / a.width - .5), b = -270 * ((b.pageY - a.top - document.documentElement.scrollTop) / a.height - .5)) : b.changedTouches ? (c = 480 * ((b.changedTouches[0].pageX - a.left - document.body.scrollLeft) / a.width - .5), b = -270 * ((b.changedTouches[0].pageY - a.top - document.body.scrollTop) / a.height - .5)) : (c = 480 * ((b.pageX - a.left - document.body.scrollLeft) / a.width - .5), 
    b = -270 * ((b.pageY - a.top - document.body.scrollTop) / a.height - .5));
    Entry.stage.mouseCoordinate = {x:c.toFixed(1), y:b.toFixed(1)};
    Entry.dispatchEvent("stageMouseMove");
  };
  a.onmousemove = b;
  a.ontouchmove = b;
  a.onmouseout = function(b) {
    Entry.dispatchEvent("stageMouseOut");
  };
  Entry.addEventListener("updateObject", function(b) {
    Entry.engine.isState("stop") && Entry.stage.updateObject();
  });
  Entry.addEventListener("canvasInputComplete", function(b) {
    try {
      var a = Entry.stage.inputField.value();
      Entry.stage.hideInputField();
      if (a) {
        var c = Entry.container;
        c.setInputValue(a);
        c.inputValue.complete = !0;
      }
    } catch (f) {
    }
  });
  this.initWall();
  this.render();
};
Entry.Stage.prototype.render = function() {
  Entry.stage.timer && clearTimeout(Entry.stage.timer);
  var a = (new Date).getTime();
  Entry.stage.update();
  a = (new Date).getTime() - a;
  Entry.stage.timer = setTimeout(Entry.stage.render, 16 - a % 16 + 16 * Math.floor(a / 16));
};
Entry.Stage.prototype.update = function() {
  "invisible" !== Entry.type && (Entry.requestUpdate ? (Entry.engine.isState("stop") && this.objectUpdated ? (this.canvas.update(), this.objectUpdated = !1) : this.canvas.update(), this.inputField && !this.inputField._isHidden && this.inputField.render(), Entry.requestUpdateTwice ? Entry.requestUpdateTwice = !1 : Entry.requestUpdate = !1) : Entry.requestUpdate = !1);
};
Entry.Stage.prototype.loadObject = function(a) {
  var b = a.entity.object;
  this.getObjectContainerByScene(a.scene).addChild(b);
  Entry.requestUpdate = !0;
};
Entry.Stage.prototype.loadEntity = function(a) {
  Entry.stage.getObjectContainerByScene(a.parent.scene).addChild(a.object);
  this.sortZorder();
  Entry.requestUpdate = !0;
};
Entry.Stage.prototype.unloadEntity = function(a) {
  Entry.stage.getObjectContainerByScene(a.parent.scene).removeChild(a.object);
  Entry.requestUpdate = !0;
};
Entry.Stage.prototype.loadVariable = function(a) {
  var b = a.view_;
  this.variables[a.id] = b;
  this.variableContainer.addChild(b);
  Entry.requestUpdate = !0;
};
Entry.Stage.prototype.removeVariable = function(a) {
  this.variableContainer.removeChild(a.view_);
  Entry.requestUpdate = !0;
};
Entry.Stage.prototype.loadDialog = function(a) {
  this.dialogContainer.addChild(a.object);
};
Entry.Stage.prototype.unloadDialog = function(a) {
  this.dialogContainer.removeChild(a.object);
};
Entry.Stage.prototype.sortZorder = function() {
  for (var a = Entry.container.getCurrentObjects(), b = this.selectedObjectContainer, c = 0, d = a.length - 1;0 <= d;d--) {
    for (var e = a[d], f = e.entity, e = e.clonedEntities, g = 0, h = e.length;g < h;g++) {
      e[g].shape && b.setChildIndex(e[g].shape, c++), b.setChildIndex(e[g].object, c++);
    }
    f.shape && b.setChildIndex(f.shape, c++);
    b.setChildIndex(f.object, c++);
  }
  Entry.requestUpdate = !0;
};
Entry.Stage.prototype.initCoordinator = function() {
  var a = new createjs.Container, b = new createjs.Bitmap(Entry.mediaFilePath + "workspace_coordinate.png");
  b.scaleX = .5;
  b.scaleY = .5;
  b.x = -240;
  b.y = -135;
  a.addChild(b);
  this.canvas.addChild(a);
  a.visible = !1;
  this.coordinator = a;
};
Entry.Stage.prototype.toggleCoordinator = function() {
  this.coordinator.visible = !this.coordinator.visible;
  Entry.requestUpdate = !0;
};
Entry.Stage.prototype.selectObject = function(a) {
  this.selectedObject = a ? a : null;
  this.updateObject();
};
Entry.Stage.prototype.initHandle = function() {
  this.handle = new EaselHandle(this.canvas);
  this.handle.setChangeListener(this, this.updateHandle);
  this.handle.setEditStartListener(this, this.startEdit);
  this.handle.setEditEndListener(this, this.endEdit);
};
Entry.Stage.prototype.updateObject = function() {
  if ("invisible" !== Entry.type && (Entry.requestUpdate = !0, this.handle.setDraggable(!0), !this.editEntity)) {
    var a = this.selectedObject;
    if (a) {
      "textBox" == a.objectType ? this.handle.toggleCenter(!1) : this.handle.toggleCenter(!0);
      "free" == a.getRotateMethod() ? this.handle.toggleRotation(!0) : this.handle.toggleRotation(!1);
      this.handle.toggleDirection(!0);
      a.getLock() ? (this.handle.toggleRotation(!1), this.handle.toggleDirection(!1), this.handle.toggleResize(!1), this.handle.toggleCenter(!1), this.handle.setDraggable(!1)) : this.handle.toggleResize(!0);
      this.handle.setVisible(!0);
      var b = a.entity;
      this.handle.setWidth(b.getScaleX() * b.getWidth());
      this.handle.setHeight(b.getScaleY() * b.getHeight());
      var c, d;
      if ("textBox" == b.type) {
        if (b.getLineBreak()) {
          c = b.regX * b.scaleX, d = -b.regY * b.scaleY;
        } else {
          var e = b.getTextAlign();
          d = -b.regY * b.scaleY;
          switch(e) {
            case Entry.TEXT_ALIGN_LEFT:
              c = -b.getWidth() / 2 * b.scaleX;
              break;
            case Entry.TEXT_ALIGN_CENTER:
              c = b.regX * b.scaleX;
              break;
            case Entry.TEXT_ALIGN_RIGHT:
              c = b.getWidth() / 2 * b.scaleX;
          }
        }
      } else {
        c = (b.regX - b.width / 2) * b.scaleX, d = (b.height / 2 - b.regY) * b.scaleY;
      }
      e = b.getRotation() / 180 * Math.PI;
      this.handle.setX(b.getX() - c * Math.cos(e) - d * Math.sin(e));
      this.handle.setY(-b.getY() - c * Math.sin(e) + d * Math.cos(e));
      this.handle.setRegX((b.regX - b.width / 2) * b.scaleX);
      this.handle.setRegY((b.regY - b.height / 2) * b.scaleY);
      this.handle.setRotation(b.getRotation());
      this.handle.setDirection(b.getDirection());
      this.objectUpdated = !0;
      this.handle.setVisible(a.entity.getVisible());
      a.entity.getVisible() && this.handle.render();
    } else {
      this.handle.setVisible(!1);
    }
  }
};
Entry.Stage.prototype.updateHandle = function() {
  this.editEntity = !0;
  var a = this.handle, b = this.selectedObject.entity;
  if (b.lineBreak) {
    b.setHeight(a.height / b.getScaleY()), b.setWidth(a.width / b.getScaleX());
  } else {
    if (0 !== b.width) {
      var c = Math.abs(a.width / b.width);
      b.flip && (c *= -1);
      b.setScaleX(c);
    }
    0 !== b.height && b.setScaleY(a.height / b.height);
  }
  c = a.rotation / 180 * Math.PI;
  if ("textBox" == b.type) {
    var d;
    if (b.getLineBreak()) {
      b.setX(a.x), b.setY(-a.y);
    } else {
      switch(b.getTextAlign()) {
        case Entry.TEXT_ALIGN_LEFT:
          b.setX(a.x - a.width / 2 * Math.cos(c));
          b.setY(-a.y + a.width / 2 * Math.sin(c));
          break;
        case Entry.TEXT_ALIGN_CENTER:
          b.setX(a.x);
          b.setY(-a.y);
          break;
        case Entry.TEXT_ALIGN_RIGHT:
          b.setX(a.x + a.width / 2 * Math.cos(c)), b.setY(-a.y - a.width / 2 * Math.sin(c));
      }
    }
  } else {
    d = b.width / 2 + a.regX / b.scaleX, b.setX(a.x + a.regX * Math.cos(c) - a.regY * Math.sin(c)), b.setRegX(d), d = b.height / 2 + a.regY / b.scaleY, b.setY(-a.y - a.regX * Math.sin(c) - a.regY * Math.cos(c)), b.setRegY(d);
  }
  b.setDirection(a.direction);
  b.setRotation(a.rotation);
  this.selectedObject.entity.doCommand();
  this.editEntity = !1;
};
Entry.Stage.prototype.startEdit = function() {
  this.selectedObject.entity.initCommand();
};
Entry.Stage.prototype.endEdit = function() {
  this.selectedObject.entity.checkCommand();
};
Entry.Stage.prototype.initWall = function() {
  var a = new createjs.Container, b = new Image;
  b.src = Entry.mediaFilePath + "media/bound.png";
  a.up = new createjs.Bitmap;
  a.up.scaleX = 16;
  a.up.y = -165;
  a.up.x = -240;
  a.up.image = b;
  a.addChild(a.up);
  a.down = new createjs.Bitmap;
  a.down.scaleX = 16;
  a.down.y = 135;
  a.down.x = -240;
  a.down.image = b;
  a.addChild(a.down);
  a.right = new createjs.Bitmap;
  a.right.scaleY = 9;
  a.right.y = -135;
  a.right.x = 240;
  a.right.image = b;
  a.addChild(a.right);
  a.left = new createjs.Bitmap;
  a.left.scaleY = 9;
  a.left.y = -135;
  a.left.x = -270;
  a.left.image = b;
  a.addChild(a.left);
  this.canvas.addChild(a);
  this.wall = a;
};
Entry.Stage.prototype.showInputField = function(a) {
  a = 1 / 1.5;
  this.inputField || (this.inputField = new CanvasInput({canvas:document.getElementById("entryCanvas"), fontSize:30 * a, fontFamily:"NanumGothic", fontColor:"#212121", width:556 * a, height:26 * a, padding:8 * a, borderWidth:1 * a, borderColor:"#000", borderRadius:3 * a, boxShadow:"none", innerShadow:"0px 0px 5px rgba(0, 0, 0, 0.5)", x:202 * a, y:450 * a, topPosition:!0, onsubmit:function() {
    Entry.dispatchEvent("canvasInputComplete");
  }}));
  a = new createjs.Container;
  var b = new Image;
  b.src = Entry.mediaFilePath + "confirm_button.png";
  var c = new createjs.Bitmap;
  c.scaleX = .23;
  c.scaleY = .23;
  c.x = 160;
  c.y = 89;
  c.cursor = "pointer";
  c.image = b;
  a.addChild(c);
  a.on("mousedown", function(b) {
    Entry.dispatchEvent("canvasInputComplete");
  });
  this.inputSubmitButton || (this.inputField.value(""), this.canvas.addChild(a), this.inputSubmitButton = a);
  this.inputField.show();
  Entry.requestUpdateTwice = !0;
};
Entry.Stage.prototype.hideInputField = function() {
  this.inputField && this.inputField.value() && this.inputField.value("");
  this.inputSubmitButton && (this.canvas.removeChild(this.inputSubmitButton), this.inputSubmitButton = null);
  this.inputField && this.inputField.hide();
  Entry.requestUpdate = !0;
};
Entry.Stage.prototype.initObjectContainers = function() {
  var a = Entry.scene.scenes_;
  if (a && 0 !== a.length) {
    for (var b = 0;b < a.length;b++) {
      this.objectContainers[b] = this.createObjectContainer(a[b]);
    }
    this.selectedObjectContainer = this.objectContainers[0];
  } else {
    a = this.createObjectContainer(Entry.scene.selectedScene), this.objectContainers.push(a), this.selectedObjectContainer = a;
  }
  "invisible" !== Entry.type && this.canvas.addChild(this.selectedObjectContainer);
  this.selectObjectContainer(Entry.scene.selectedScene);
};
Entry.Stage.prototype.selectObjectContainer = function(a) {
  if (this.canvas) {
    for (var b = this.objectContainers, c = 0;c < b.length;c++) {
      this.canvas.removeChild(b[c]);
    }
    this.selectedObjectContainer = this.getObjectContainerByScene(a);
    this.canvas.addChildAt(this.selectedObjectContainer, 2);
  }
};
Entry.Stage.prototype.reAttachToCanvas = function() {
  for (var a = [this.selectedObjectContainer, this.variableContainer, this.coordinator, this.handle, this.dialogContainer], b = 0;b < a.length;b++) {
    this.canvas.removeChild(a[b]), this.canvas.addChild(a[b]);
  }
  console.log(this.canvas.getChildIndex(this.selectedObjectContainer));
};
Entry.Stage.prototype.createObjectContainer = function(a) {
  var b = new createjs.Container;
  b.scene = a;
  return b;
};
Entry.Stage.prototype.removeObjectContainer = function(a) {
  var b = this.objectContainers;
  a = this.getObjectContainerByScene(a);
  this.canvas && this.canvas.removeChild(a);
  b.splice(this.objectContainers.indexOf(a), 1);
};
Entry.Stage.prototype.getObjectContainerByScene = function(a) {
  for (var b = this.objectContainers, c = 0;c < b.length;c++) {
    if (b[c].scene.id == a.id) {
      return b[c];
    }
  }
};
Entry.Stage.prototype.moveSprite = function(a) {
  if (this.selectedObject && Entry.stage.focused && !this.selectedObject.getLock()) {
    var b = 5;
    a.shiftKey && (b = 1);
    var c = this.selectedObject.entity;
    switch(a.keyCode) {
      case 38:
        c.setY(c.getY() + b);
        break;
      case 40:
        c.setY(c.getY() - b);
        break;
      case 37:
        c.setX(c.getX() - b);
        break;
      case 39:
        c.setX(c.getX() + b);
    }
    this.updateObject();
  }
};
Entry.Stage.prototype.getBoundRect = function(a) {
  return this._boundRect ? this._boundRect : this.updateBoundRect();
};
Entry.Stage.prototype.updateBoundRect = function(a) {
  return this._boundRect = this.canvas.canvas.getBoundingClientRect();
};
Entry.StampEntity = function(a, b) {
  this.parent = a;
  this.type = a.objectType;
  this.isStamp = this.isClone = !0;
  this.width = b.getWidth();
  this.height = b.getHeight();
  "sprite" == this.type && (this.object = b.object.clone(!0), this.object.filters = null, b.effect && (this.effect = Entry.cloneSimpleObject(b.effect), this.applyFilter()));
  this.object.entity = this;
};
(function(a, b) {
  a.applyFilter = b.applyFilter;
  a.removeClone = b.removeClone;
  a.getWidth = b.getWidth;
  a.getHeight = b.getHeight;
  a.getInitialEffectValue = b.getInitialEffectValue;
})(Entry.StampEntity.prototype, Entry.EntityObject.prototype);
Entry.JsAstGenerator = function() {
};
(function(a) {
  a.generate = function(b) {
    return arcon.parse(b);
  };
})(Entry.JsAstGenerator.prototype);
Entry.PyAstGenerator = function() {
};
(function(a) {
  a.generate = function(b) {
    var a = filbert.parse, d = {locations:!0, ranges:!0};
    try {
      return a(b, d);
    } catch (g) {
      b = g.message.split("'");
      a = Entry.TextCodingError.TITLE_SYNTAX;
      console.log("msgTokens", b);
      if ("Unexpected token" == b[0].trim()) {
        var d = Entry.TextCodingError.MESSAGE_SYNTAX_UNEXPECTED_TOKEN, e = Entry.TextCodingError.SUBJECT_SYNTAX_TOKEN;
      } else {
        "Unexpected character" == b[0].trim() ? (d = Entry.TextCodingError.MESSAGE_SYNTAX_UNEXPECTED_CHARACTER, e = Entry.TextCodingError.SUBJECT_SYNTAX_CHARACTER) : "Unexpected indent" == b[0].trim() ? (d = Entry.TextCodingError.MESSAGE_SYNTAX_UNEXPECTED_CHARACTER, e = Entry.TextCodingError.SUBJECT_SYNTAX_INDENT) : (d = Entry.TextCodingError.MESSAGE_SYNTAX_DEFAULT, e = Entry.TextCodingError.SUBJECT_SYNTAX_DEFAULT);
      }
      if (b[1]) {
        var f = b[1];
      }
      g.title = Lang.TextCoding[a];
      g.message = Lang.TextCoding[d];
      g.keyword = f ? f : "";
      g.subject = Lang.TextCoding[e];
      throw g;
    }
  };
})(Entry.PyAstGenerator.prototype);
Entry.Map = function() {
  this._map = {repo:{}};
};
(function(a) {
  a.getKey = function(b) {
    return b;
  };
  a.put = function(b, a) {
    b = this.getKey(b);
    this._map.repo[b] = a;
  };
  a.contains = function(b) {
    b = this.getKey(b);
    return this._map.repo[b] ? !0 : !1;
  };
  a.get = function(b) {
    b = this.getKey(b);
    return this._map.repo[b] ? this._map.repo[b] : null;
  };
  a.remove = function(b) {
    var a = this.getKey(b);
    this.contains(b) && (this._map.repo[a] = void 0);
  };
  a.clear = function() {
    this._map.repo = {};
  };
  a.toString = function() {
    return this._map.repo;
  };
})(Entry.Map.prototype);
Entry.TextCodingError = {};
(function(a) {
  a.TITLE_SYNTAX = "title_syntax";
  a.TITLE_CONVERTING = "title_converting";
  a.MESSAGE_SYNTAX_DEFAULT = "message_syntax_default";
  a.MESSAGE_SYNTAX_UNEXPECTED_TOKEN = "message_syntax_unexpected_token";
  a.MESSAGE_SYNTAX_UNEXPECTED_CHARACTER = "message_syntax_unexpected_character";
  a.MESSAGE_SYNTAX_UNEXPECTED_INDENT = "message_syntax_unexpected_indent";
  a.MESSAGE_CONV_DEFAULT = "message_conv_default";
  a.MESSAGE_CONV_NO_SUPPORT = "message_conv_no_support";
  a.MESSAGE_CONV_NO_VARIABLE = "message_conv_no_variable";
  a.MESSAGE_CONV_NO_LIST = "message_conv_no_list";
  a.MESSAGE_CONV_NO_OBJECT = "message_conv_no_object";
  a.MESSAGE_CONV_NO_FUNCTION = "message_conv_no_function";
  a.MESSAGE_CONV_NO_ENTRY_EVENT_FUNCTION = "message_conv_no_entry_event_function";
  a.SUBJECT_SYNTAX_DEFAULT = "subject_syntax_default";
  a.SUBJECT_SYNTAX_TOKEN = "subject_syntax_token";
  a.SUBJECT_SYNTAX_CHARACTER = "subject_syntax_character";
  a.SUBJECT_SYNTAX_INDENT = "subject_syntax_indent";
  a.SUBJECT_CONV_DEFAULT = "subject_conv_default";
  a.SUBJECT_CONV_GENERAL = "subject_conv_general";
  a.SUBJECT_CONV_VARIABLE = "subject_conv_variable";
  a.SUBJECT_CONV_LIST = "subject_conv_list";
  a.SUBJECT_CONV_OBJECT = "subject_conv_object";
  a.SUBJECT_CONV_FUNCTION = "subject_conv_function";
  a.ALERT_VARIABLE_EMPTY_TEXT_ADD_CHANGE = "alert_variable_empty_text_add_change";
  a.ALERT_LIST_EMPTY_TEXT_ADD_CHANGE = "alert_list_empty_text_add_change";
  a.ALERT_FUNCTION_NAME_EMPTY_TEXT_ADD_CHANGE = "alert_function_name_empty_text_add_change";
  a.ALERT_VARIABLE_EMPTY_TEXT = "alert_variable_empty_text";
  a.ALERT_LIST_EMPTY_TEXT = "alert_list_empty_text";
  a.ALERT_FUNCTION_NAME_EMPTY_TEXT = "alert_function_name_empty_text";
  a.ALERT_FUNCTION_NAME_FIELD_MULTI = "alert_function_name_field_multi";
  a.ALERT_FUNCTION_NAME_DISORDER = "alert_function_name_disorder";
  a.ALERT_FUNCTION_EDITOR = "alert_function_editor";
  a.ALERT_FUNCTION_NO_SUPPORT = "alert_function_no_support";
  a.ALERT_LIST_NO_SUPPORT = "alert_list_no_support";
  a.ALERT_VARIABLE_NO_SUPPORT = "alert_variable_no_support";
  a.ALERT_SIGNAL_NO_SUPPORT = "alert_signal_no_support";
  a.ALERT_LEGACY_NO_SUPPORT = "alert_legacy_no_support";
  a.ALERT_NO_SAVE_ON_ERROR = "alert_no_save_on_error";
  var b = {};
  a.error = function(a, d, e, f, g) {
    console.log("error control", a, d, e, f);
    a = this.getErrorInfo(a, d, e, f, g);
    b.title = a.title;
    b.message = a.message;
    b.line = f;
    throw b;
  };
  a.getErrorInfo = function(b, a, e, f, g) {
    var c = {};
    c.title = Lang.TextCoding[b];
    a = Lang.TextCoding[a];
    c.message = "[" + (g ? Lang.TextCoding[g] : Lang.TextCoding[this.SUBJECT_CONV_GENERAL]) + "] " + (e ? "'" + e + "' " : "") + " : " + a + " (line " + f + ")";
    return c;
  };
})(Entry.TextCodingError);
Entry.PyHint = function(a) {
  this.syntax = a;
  this.scope = {};
  this.lastHW = null;
  this.scope._global = [];
  this.scope._list = [];
  for (var b in a) {
    a[b].syntax && 0 > b.indexOf("%") && 0 > a[b].key.indexOf("function_field") ? this.scope._global.push(b) : "if" === b.substr(0, 2) ? this.scope._global.push(b) : "while" === b.substr(0, 5) && this.scope._global.push(b);
  }
  this.addScope("Entry");
  this.addScope("random");
  this.addScope("math");
  this.addScope("%2", "_list");
  this._blockMenu = Entry.playground.mainWorkspace.blockMenu;
  CodeMirror.registerHelper("hint", "python", this.pythonHint.bind(this));
  a = function(b) {
    Entry.hw.hwModule ? (b = Entry.hw.hwModule.name, b = b[0].toUpperCase() + b.slice(1), "ArduinoExt" === b && (b = "Arduino"), this.addScope(b), this.lastHW = b) : (this.removeScope(this.lastHW), this.lastHW = null);
  }.bind(this);
  Entry.addEventListener("hwChanged", a);
  Entry.hw.hwModule && a();
};
(function(a) {
  a.pythonHint = function(b) {
    var a = b.getCursor(), d = b.getLineTokens(a.line);
    b = d.pop();
    for (var e = [], f = [];b && a.ch <= b.start;) {
      b = d.pop();
    }
    if (!b) {
      return null;
    }
    var g, h = b.start, k = this.hintFunc, l = this.syntax;
    switch(b.type) {
      case "builtin":
        g = d[d.length - 2] && "def" === d[d.length - 2].string ? null : b.string;
      case "def":
        !g && (e = d[d.length - 2]) && (g = "def " + b.string, h = e.start);
      case "keyword":
        g || (g = b.string);
      case "variable":
        g || (g = b.string);
        e = this.fuzzySearch(this.getScope("_global"), g);
        e = e.map(function(b) {
          var a = l, c = b.split("#")[0], c = c.split("\n").join(" "), c = c.replace(/%\d+/gi, ""), c = c.replace(/\$\d+/gi, ""), d;
          -1 < b.indexOf(".") && (b = b.split("."), a = l[b[0]], d = b.shift(), b = b.join("."));
          a[b].key && f.push(a[b].key);
          return {displayText:c, hint:k, syntax:a[b], localKey:d};
        });
        break;
      case "property":
        var n = d[d.length - 2];
        if (n) {
          g = this.getScope(n.string);
          g.length ? g = this.fuzzySearch(g, b.string) : Entry.variableContainer.getListByName(n.string) ? (g = this.fuzzySearch(this.getScope("%2"), b.string), n.string = "%2") : g = [];
          var e = g.map(function(b) {
            var a = b.split("#")[0], a = a.split("\n")[0];
            return {displayText:a, hint:k, syntax:l[n.string][b]};
          }), m = this.syntax[n.string], f = g.map(function(b) {
            return m[b].key;
          });
        }
    }
    f.length ? this._blockMenu._setDynamic(f) : this._blockMenu._cancelDynamic();
    return {list:e, from:CodeMirror.Pos(a.line, h), to:CodeMirror.Pos(a.line, b.end)};
  };
  a.addScope = function(b) {
    if (this.syntax[b] && !this.scope[b]) {
      var a = this.syntax[b], d = Object.keys(a), d = d.filter(function(b) {
        return 0 > b.indexOf("#") && !Entry.block[a[b].key].deprecated;
      });
      this.scope[b] = d;
      this.scope._global.unshift(b);
      d = d.map(function(a) {
        return b + "." + a;
      });
      this.scope._global = this.scope._global.concat(d);
    }
  };
  a.removeScope = function(b) {
    if (this.scope[b]) {
      var a = this.syntax[b], d = Object.keys(a), d = d.filter(function(b) {
        return 0 > b.indexOf("#") && !Entry.block[a[b].key].deprecated;
      }), d = d.map(function(a) {
        return b + "." + a;
      });
      for (this.scope._global.splice(this.scope._global.indexOf(b), 1);d.length;) {
        var e = d.pop();
        this.scope._global.splice(this.scope._global.indexOf(e), 1);
      }
      delete this.scope[b];
    }
  };
  a.getScope = function(b) {
    return this.scope[b] ? this.scope[b] : [];
  };
  a.fuzzySearch = function(b, a, d) {
    d = d || {};
    d.escapeLetter = "#";
    b = Entry.Utils.fuzzy.filter(a, b, d).slice(0, 20);
    return b = b.map(function(b) {
      return b.original;
    });
  };
  a.hintFunc = function(b, a, d) {
    var c;
    c = d.syntax;
    var f = a.from.ch;
    c.syntax ? (c = c.syntax, d.localKey && (c = d.localKey + "." + c), c = c.split("."), 1 < c.length && c.shift(), c = c.join("."), -1 < c.indexOf("%") ? (f += c.indexOf("%"), c = c.replace(/%\d+/gi, "")) : f += c.length, c = c.replace(/\$\d+/gi, "")) : (c = d.displayText + ".", f += c.length);
    -1 < c.indexOf("\n") && (c = c.split("\n").join("\n" + "\t".repeat(a.from.ch)));
    if (-1 < c.indexOf(":")) {
      for (var g = b.getCursor(), g = b.getLineTokens(g.line), h = g.shift();g.length && "keyword" !== h.type;) {
        h = g.shift();
      }
      f -= a.from.ch - h.start;
      a.from.ch = h.start;
    }
    b.replaceRange(c, a.from, a.to);
    b.setCursor({line:a.from.line, ch:f});
    Entry.helper.renderBlock(d.syntax.key);
  };
})(Entry.PyHint.prototype);
Entry.BlockToJsParser = function(a, b) {
  this._type = "BlockToJsParser";
  this.syntax = a;
  this._parentParser = b;
  this._iterVariableCount = 0;
  this._iterVariableChunk = ["i", "j", "k"];
};
(function(a) {
  a.Code = function(b, a) {
    console.log("BToJCodeParser", b);
    this._parseMode = a;
    if (b instanceof Entry.Block) {
      return this.Block(b);
    }
    a = "";
    b = b._data;
    for (var c = 0;c < b.length;c++) {
      a += this.Thread(b[c]);
    }
    return a.trim();
  };
  a.Thread = function(b) {
    if (b instanceof Entry.Block) {
      return this.Block(b);
    }
    var a = "";
    b = b.getBlocks();
    for (var d = 0;d < b.length;d++) {
      var e = b[d];
      d != b.length - 1 ? (e = this.Block(e), this._parseMode == Entry.Parser.PARSE_GENERAL ? a += e + "\n" : this._parseMode == Entry.Parser.PARSE_SYNTAX && (a = e + "\n")) : (e = this.Block(e), this._parseMode == Entry.Parser.PARSE_GENERAL ? a += e : this._parseMode == Entry.Parser.PARSE_SYNTAX && (a = e));
    }
    return a + "\n";
  };
  a.Block = function(b) {
    var a = b._schema.syntax.js ? b._schema.syntax.js : b._schema.syntax;
    return a ? b = this[a[0]](b) : "";
  };
  a.Program = function(b) {
    return "";
  };
  a.Scope = function(b) {
    var a = !1, d = "", e = /(%.)/mi;
    if (b._schema.syntax.js) {
      var f = b._schema.syntax.js.concat(), a = !0;
    } else {
      f = b._schema.syntax.concat();
    }
    console.log("scope syntax", f);
    f.shift();
    f = f[0].split(e);
    console.log("syntaxTokens", f);
    for (var g = b._schema.params, h = b.data.params, k = 0;k < f.length;k++) {
      var l = f[k];
      0 !== l.length && "Scope" !== l && ("Judge" === l ? a = !0 : e.test(l) ? (l = l.split("%")[1], l = parseInt(l) - 1, g[l] && "Image" != g[l].type && ("Block" == g[l].type ? (l = this.Block(h[l]), d += l) : d += this[g[l].type](h[l], g[l]))) : d += l);
    }
    console.log("js result", d);
    "#" == d.charAt(d.length - 1) && (a = !0, d = d.substring(0, d.length - 1), d = d.trim());
    a || (d += "();");
    d = Entry.TextCodingUtil.jsAdjustSyntax(b, d);
    console.log("js result2", d);
    return d;
  };
  a.BasicFunction = function(b) {
    b = this.Thread(b.statements[0]);
    return "function promise() {\n" + this.indent(b).trim() + "}";
  };
  a.BasicIteration = function(b) {
    var a = b.params[0], d = this.publishIterateVariable();
    b = this.Thread(b.statements[0]);
    this.unpublishIterateVariable();
    return "for (var " + d + " = 0; " + d + " < " + a + "; " + d + "++) {\n" + this.indent(b) + "}";
  };
  a.BasicIf = function(b) {
    if (2 == b.data.statements.length) {
      var a = this.Thread(b.statements[0]), d = this.Thread(b.statements[1]), e = b._schema.syntax.concat(), e = (b = b.data.params[0]) && "True" == b.data.type ? e[1] : void 0 === b ? e[1] : this.Block(b), a = "if (" + e + ") {\n" + this.indent(a) + "}\nelse {\n" + this.indent(d) + "}\n";
    } else {
      a = this.Thread(b.statements[0]), e = b._schema.syntax.concat(), e = (b = b.data.params[0]) && "True" == b.data.type ? e[1] : void 0 === b ? e[1] : this.Block(b), a = "if (" + e + ") {\n" + this.indent(a) + "}\n";
    }
    return a;
  };
  a.BasicWhile = function(b) {
    var a = this.Thread(b.statements[0]);
    return "while (" + b._schema.syntax.concat()[1] + ") {\n" + this.indent(a) + "}\n";
  };
  a.indent = function(b) {
    var a = "";
    b = b.split("\n");
    for (var d in b) {
      var e = b[d];
      0 != e.length && (a += "\t" + e + "\n");
    }
    return a;
  };
  a.publishIterateVariable = function() {
    var b = "", a = this._iterVariableCount;
    do {
      b = this._iterVariableChunk[a % 3] + b, a = parseInt(a / 3) - 1, 0 === a && (b = this._iterVariableChunk[0] + b);
    } while (0 < a);
    this._iterVariableCount++;
    return b;
  };
  a.unpublishIterateVariable = function() {
    this._iterVariableCount && this._iterVariableCount--;
  };
  a.Dropdown = function(b) {
    "OBSTACLE" == b ? b = "stone" : "ITEM" == b ? b = b.toLowerCase() : "WALL" == b && (b = b.toLowerCase());
    return "'" + b + "'";
  };
  a.TextInput = function(b) {
    return b;
  };
  a.DropdownDynamic = function(b, a) {
    return b = "null" == b ? "none" : Entry.TextCodingUtil.dropdownDynamicValueConvertor(b, a);
  };
  a.searchSyntax = function(b) {
    b instanceof Entry.BlockView && (b = b.block);
    return this._parentParser.parse(b, Entry.Parser.PARSE_SYNTAX);
  };
})(Entry.BlockToJsParser.prototype);
Entry.KeyboardCode = {};
(function(a) {
  a.map = {backspace:8, tab:9, enter:13, shift:16, ctrl:17, alt:18, pausebreak:19, capslock:20, esc:27, space:32, pageup:33, pagedown:34, end:35, home:36, left:37, up:38, right:39, down:40, insert:45, "delete":46, 0:48, 1:49, 2:50, 3:51, 4:52, 5:53, 6:54, 7:55, 8:56, 9:57, a:65, b:66, c:67, d:68, e:69, f:70, g:71, h:72, i:73, j:74, k:75, l:76, m:77, n:78, o:79, p:80, q:81, r:82, s:83, t:84, u:85, v:86, w:87, x:88, y:89, z:90, windows:91, rightclick:93, numpad0:96, numpad1:97, numpad2:98, numpad3:99, 
  numpad4:100, numpad5:101, numpad6:102, numpad7:103, numpad8:104, numpad9:105, "numpad*":106, "numpad+":107, "numpad-":109, "numpad.":110, "numpad/":111, f1:112, f2:113, f3:114, f4:115, f5:116, f6:117, f7:118, f8:119, f9:120, f10:121, f11:122, f12:123, numlock:144, scrolllock:145, mycomputer:182, mycalculator:183, ";":186, "=":187, ",":188, "-":189, ".":190, "/":191, "`":192, "[":219, "\\":220, "]":221, "'":222};
})(Entry.KeyboardCode);
Entry.BlockToPyParser = function(a) {
  this._type = "BlockToPyParser";
  this._funcParamMap = new Entry.Map;
  this._funcDefMap = {};
  this._listDeclaration = this._variableDeclaration = null;
  this._forIdCharIndex = 0;
};
(function(a) {
  a.Code = function(b, a) {
    this._parseMode = a;
    if (b) {
      if (b instanceof Entry.Thread) {
        return this.Thread(b);
      }
      if (b instanceof Entry.Block) {
        return this.Block(b);
      }
      a = "";
      b = b.getThreads();
      for (var c = 0;c < b.length;c++) {
        this._forIdCharIndex = 0, a += this.Thread(b[c]) + "\n";
      }
      return a = a.trim();
    }
  };
  a.Thread = function(b) {
    if (b instanceof Entry.Block) {
      return this.Block(b);
    }
    var a = "";
    b = b.getBlocks();
    for (var d = !1, e = "", f = "", g = 0;g < b.length;g++) {
      var h = b[g];
      this._parseMode == Entry.Parser.PARSE_GENERAL ? 0 == g ? (d = Entry.TextCodingUtil.isEventBlock(h)) ? e = this.Block(h) + "\n" : f += this.Block(h) + "\n" : 0 != g && (h = this.Block(h) + "\n", f += h) : this._parseMode == Entry.Parser.PARSE_SYNTAX && (a = (d = Entry.TextCodingUtil.isEventBlock(h)) ? "" : this.Block(h) + "\n");
    }
    this._parseMode == Entry.Parser.PARSE_GENERAL && (d && (f = Entry.TextCodingUtil.indent(f)), a = e + f + "\n");
    return a = a.trim() + "\n";
  };
  a.Block = function(b, a) {
    a = "";
    var c, e, f;
    if (c = this.searchSyntax(b)) {
      e = c.syntax;
    }
    if (this.isFunc(b)) {
      if (this._hasRootFunc || (this._rootFuncId = b.data.type, this._funcDefMap[b.data.type] = this.makeFuncDef(b, this._hasRootFunc), this._hasRootFunc = !1), this.isRegisteredFunc(b) && (e = this.makeFuncSyntax(b)), this._parseMode == Entry.Parser.PARSE_SYNTAX) {
        return e;
      }
    } else {
      this.isFuncStmtParam(b) && (a += b.data.type);
    }
    if (!e || null == e) {
      return a;
    }
    var g = /(%.)/mi, h = /(\$.)/mi;
    e = e.split(g);
    for (var k = b._schema.params, l = b.data.params, n = 0;n < e.length;n++) {
      if (f = e[n], 0 !== f.length) {
        if ("% " == f) {
          a += f;
        } else {
          if (g.test(f)) {
            f = f.split("%")[1];
            var m = Number(f) - 1;
            if (k[m] && "Indicator" != k[m].type) {
              if ("Block" == k[m].type) {
                f = this.Block(l[m]).trim();
                if (c.textParams && c.textParams[m]) {
                  var t = c.textParams[m];
                }
                if (m = this._funcParamMap.get(f)) {
                  f = m;
                } else {
                  var m = f.split("_"), u = m[0];
                  2 == m.length && ("stringParam" == u ? f = "string_param" : "booleanParam" == u && (f = "boolean_param"));
                }
                t && "index" == t.paramType && (isNaN(f) ? (m = f.split("+"), " 1)" == m[m.length - 1] ? (delete m[m.length - 1], f = m.join("+"), f = f.substring(1, f.length - 2)) : f += " - 1") : --f);
                t && "integer" == t.paramType && (isNaN(f) || 0 === f % 1 || (a = a.replace("randint", "uniform")));
                a += f;
              } else {
                f = c.textParams ? c.textParams : [], f = this["Field" + k[m].type](l[m], f[m]), a += f, c && "repeat_while_true" == c.key && (a = Entry.TextCodingUtil.assembleRepeatWhileTrueBlock(b, a));
              }
            }
          } else {
            if (h.test(f)) {
              for (f = f.split(h), u = 0;u < f.length;u++) {
                m = f[u], 0 !== m.length && (h.test(m) ? (m = Number(m.split("$")[1]) - 1, a += Entry.TextCodingUtil.indent(this.Thread(b.statements[m]))) : a += m);
              }
            } else {
              c && "repeat_basic" == c.key && 0 == n && (f = f.split(" "), f[1] = Entry.TextCodingUtil.generateForStmtIndex(this._forIdCharIndex++), f = f.join(" ")), a += f;
            }
          }
        }
      }
    }
    return a;
  };
  a.searchSyntax = function(b) {
    var a;
    b instanceof Entry.BlockView ? (a = b.block._schema, applliedParams = b.block.data.params) : b instanceof Entry.Block ? (a = b._schema, applliedParams = b.params) : a = b;
    if (a && a.syntax) {
      for (b = a.syntax.py.concat();b.length;) {
        a = !1;
        var d = b.shift();
        if ("string" === typeof d) {
          return {syntax:d, template:d};
        }
        if (d.params) {
          for (var e = 0;e < d.params.length;e++) {
            if (d.params[e] && d.params[e] !== applliedParams[e]) {
              a = !0;
              break;
            }
          }
        }
        d.template || (d.template = d.syntax);
        if (!a) {
          return d;
        }
      }
    }
    return null;
  };
  a.FieldAngle = function(b, a) {
    a && a.converter && (b = a.converter(b));
    return b;
  };
  a.FieldColor = function(b, a) {
    a && a.converter && (b = a.converter(null, b));
    return b;
  };
  a.FieldDropdown = function(b, a) {
    if ("object" == typeof b) {
      return "None".replace(/\"/gm, "");
    }
    if (a && a.converter && a.options) {
      var c = a.options, e;
      for (e in c) {
        var f = c[e][0], g = c[e][1];
        if (b == g) {
          return a.converter(f, g);
        }
      }
      b = a.converter(b, b);
    }
    return b;
  };
  a.FieldDropdownDynamic = function(b, a) {
    if ("object" == typeof b) {
      return "None".replace(/\"/gm, "");
    }
    if (a && a.converter && a.options) {
      var c = a.options, e;
      for (e in c) {
        var f = c[e][0], g = c[e][1];
        if (b == g) {
          return (b = Entry.TextCodingUtil.dropdownDynamicIdToNameConvertor(g, a.menuName)) && (f = b), a.converter(f, g);
        }
      }
      b = (g = Entry.TextCodingUtil.dropdownDynamicIdToNameConvertor(b, a.menuName)) ? a.converter(g, g) : a.converter(b, b);
      /None/.test(b) && (b = b.replace(/\"/gm, ""));
    }
    return b;
  };
  a.FieldImage = function(b, a) {
    a && a.converter && (b = a.converter(null, b));
    return b;
  };
  a.FieldIndicator = function(b, a) {
    return b;
  };
  a.FieldKeyboard = function(b, a) {
    if (/None/.test(b)) {
      return b.replace(/\"/gm, "");
    }
    var c = Entry.KeyboardCode.map, e;
    for (e in c) {
      if (c[e] == b) {
        b = e;
        break;
      }
    }
    a && a.converter && (b = a.converter(b, null));
    return b = b.toLowerCase();
  };
  a.FieldOutput = function(b, a) {
    return b;
  };
  a.FieldText = function(b, a) {
    a && a.converter && (b = a.converter(null, b));
    return b;
  };
  a.FieldTextInput = function(b, a) {
    if ("number" != typeof b) {
      b = b.replace("\t", "    ");
      var c = b.split(/ /);
      b.length == c.length - 1 && (b = '"()"'.replace("()", b));
    }
    a && a.converter && (b = a.converter(null, b));
    return b;
  };
  a.FieldNumber = function(b, a) {
    a && a.converter && (b = a.converter(null, b));
    return b;
  };
  a.isFunc = function(b) {
    return b && b.data && b.data.type ? "func" == b.data.type.split("_")[0] ? !0 : !1 : !1;
  };
  a.isRegisteredFunc = function(b) {
    b = b.data.type.split("_");
    return Entry.variableContainer.functions_[b[1]] ? !0 : !1;
  };
  a.isFuncStmtParam = function(b) {
    if (!b || !b.data || !b.data.type) {
      return !1;
    }
    b = b.data.type.split("_")[0];
    return "stringParam" == b || "booleanParam" == b ? !0 : !1;
  };
  a.makeFuncSyntax = function(b) {
    if (b && b._schema) {
      if (b._schema.template) {
        var a = b._schema.template.trim();
      } else {
        if (b._schema.params) {
          var d = b._schema.params;
        } else {
          b && !b._schema && this._hasRootFunc && (b = Entry.block[this._rootFuncId], d = b.block.params, a = b.block.template);
        }
      }
    }
    b = /(%.)/mi;
    if (a) {
      var e = a.trim().split(b);
    }
    var f = a = "", g;
    for (g in e) {
      var h = e[g].trim();
      if (b.test(h)) {
        if (h = h.split("%")[1], 1 != h) {
          var h = h - 1, k = h - 1;
          d && d[k] && "Indicator" == d[k].type || (f += "%".concat(h).concat(", "));
        }
      } else {
        h = h.split(" "), a += h.join("__");
      }
    }
    k = f.lastIndexOf(",");
    f = f.substring(0, k);
    return a.trim().concat("(").concat(f.trim()).concat(")");
  };
  a.makeFuncDef = function(b, a) {
    if (this.isRegisteredFunc(b)) {
      var c = "";
      if (b = this.getFuncInfo(b)) {
        var c = c + b.name, e = "";
        if (b.params && 0 != b.params.length) {
          for (var f in b.params) {
            e += b.params[f], f != b.params.length - 1 && (e = e.concat(", "));
          }
          e = e.trim();
        }
        c = c.concat("(").concat(e).concat(")");
        if (a) {
          return c;
        }
        this._hasRootFunc = !0;
        c = ("def " + c).concat(":\n");
        if (b.statements && b.statements.length) {
          a = "";
          for (var g in b.statements) {
            f = b.statements[g], a = this.getFuncInfo(f) ? a + this.makeFuncDef(f, !0).concat("\n") : a + this.Block(f).concat("\n");
          }
          c += Entry.TextCodingUtil.indent(a).concat("\n");
        }
        return c.trim();
      }
    }
  };
  a.getFuncInfo = function(b) {
    var a = {}, d = b.data.type.split("_")[1];
    if (d) {
      var e = Entry.variableContainer.functions_[d];
      if (!e) {
        return null;
      }
    } else {
      return null;
    }
    var d = e.block.template, f = d.search(/(%.)/), d = d.substring(0, f).trim().split(" ").join("__");
    Entry.TextCodingUtil.initQueue();
    Entry.TextCodingUtil.gatherFuncDefParam(e.content._data[0]._data[0].data.params[0]);
    var g = [];
    if (!this._hasRootFunc) {
      for (;l = Entry.TextCodingUtil._funcParamQ.dequeue();) {
        g.push(l);
      }
    }
    Entry.TextCodingUtil.clearQueue();
    var h = [];
    if (this._hasRootFunc) {
      var k = b.data.params;
      for (n in k) {
        var l = k[n];
        if (l) {
          f = this.Block(l);
          if (paramType = this._funcParamMap.get(f)) {
            f = paramType;
          }
          h.push(f);
        }
      }
    } else {
      for (f in g) {
        b = g[f];
        var n = b.search("_"), n = b.substring(0, n);
        "stringParam" == n ? k = "param" + (parseInt(f) + 1) : "booleanParam" == n && (k = "param" + (parseInt(f) + 1));
        k && (h.push(k), this._funcParamMap.put(b, k));
      }
    }
    e = e.content._data[0]._data;
    n = [];
    for (k = 1;k < e.length;k++) {
      n.push(e[k]);
    }
    d && (a.name = d);
    0 != h.length && (a.params = h);
    0 != n.length && (a.statements = n);
    return a;
  };
})(Entry.BlockToPyParser.prototype);
Entry.JsToBlockParser = function(a) {
  this._type = "JsToBlockParser";
  this.syntax = a;
  this.scopeChain = [];
  this.scope = null;
  this._blockCount = 0;
  this._blockInfo = {};
};
(function(a) {
  a.Program = function(b) {
    var a = [], d = [];
    d.push({type:this.syntax.Program});
    for (var e in b) {
      var f = b[e];
      if ("Program" != f.type) {
        return;
      }
      this.initScope(f);
      var f = this.BlockStatement(f), g;
      for (g in f) {
        d.push(f[g]);
      }
      this.unloadScope();
      0 != d.length && a.push(d);
    }
    return a;
  };
  a.Identifier = function(b) {
    return b.name;
  };
  a.Literal = function(b, a) {
    return !0 === b.value ? {type:"True"} : !1 === b.value ? {type:"False"} : "ai_distance_value" == a ? b.value : "ai_boolean_object" == a ? b.value : {type:"text", params:[b.value]};
  };
  a.ExpressionStatement = function(b) {
    b = b.expression;
    return this[b.type](b);
  };
  a.ForStatement = function(b) {
    var a = b.init, d = b.test, e = b.update, f = b.body;
    if (this.syntax.ForStatement) {
      throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    var f = this[f.type](f), a = a.declarations[0].init.value, g = d.operator, d = d.right.value, h = 0;
    "++" != e.operator && (e = a, a = d, d = e);
    switch(g) {
      case "<":
        h = d - a;
        break;
      case "<=":
        h = d + 1 - a;
        break;
      case ">":
        h = a - d;
        break;
      case ">=":
        h = a + 1 - d;
    }
    return this.BasicIteration(b, h, f);
  };
  a.BlockStatement = function(b) {
    var a = [];
    b = b.body;
    for (var d = 0;d < b.length;d++) {
      var e = b[d], f = this[e.type](e);
      Entry.TextCodingUtil.hasBlockInfo(e, this._blockInfo) || this._blockCount++;
      Entry.TextCodingUtil.updateBlockInfo(e, this._blockInfo);
      if (f) {
        if (void 0 === f.type) {
          throw {title:"\ube14\ub85d\ubcc0\ud658 \uc624\ub958", message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ube14\ub85d\uc785\ub2c8\ub2e4.", node:e, blockCount:this._blockCount};
        }
        Entry.TextCodingUtil.isParamBlock(f) || f && a.push(f);
      }
    }
    return a;
  };
  a.EmptyStatement = function(b) {
    throw {message:"empty\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.DebuggerStatement = function(b) {
    throw {message:"debugger\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.WithStatement = function(b) {
    throw {message:"with\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.ReturnStaement = function(b) {
    throw {message:"return\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.LabeledStatement = function(b) {
    throw {message:"label\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.BreakStatement = function(b) {
    throw {message:"break\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.ContinueStatement = function(b) {
    throw {message:"continue\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.IfStatement = function(b) {
    if (this.syntax.BasicIf) {
      return this.BasicIf(b);
    }
    throw {message:"if\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.SwitchStatement = function(b) {
    throw {message:"switch\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.SwitchCase = function(b) {
    throw {message:"switch ~ case\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.ThrowStatement = function(b) {
    throw {message:"throw\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.TryStatement = function(b) {
    throw {message:"try\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.CatchClause = function(b) {
    throw {message:"catch\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.WhileStatement = function(b) {
    var a = b.body, d = this.syntax.WhileStatement, a = this[a.type](a);
    if (d) {
      throw {message:"while\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    return this.BasicWhile(b, a);
  };
  a.DoWhileStatement = function(b) {
    throw {message:"do ~ while\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.ForInStatement = function(b) {
    throw {message:"for ~ in\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.FunctionDeclaration = function(b) {
    if (this.syntax.FunctionDeclaration) {
      throw {message:"function\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    return null;
  };
  a.VariableDeclaration = function(b) {
    throw {message:"var\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.ThisExpression = function(b) {
    return this.scope.this;
  };
  a.ArrayExpression = function(b) {
    throw {message:"array\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.ObjectExpression = function(b) {
    throw {message:"object\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.Property = function(b) {
    throw {message:"init, get, set\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.FunctionExpression = function(b) {
    throw {message:"function\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.UnaryExpression = function(b) {
    throw {message:b.operator + "\uc740(\ub294) \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
  };
  a.UnaryOperator = function() {
    return "- + ! ~ typeof void delete".split(" ");
  };
  a.updateOperator = function() {
    return ["++", "--"];
  };
  a.BinaryOperator = function() {
    return "== != === !== < <= > >= << >> >>> + - * / % , ^ & in instanceof".split(" ");
  };
  a.AssignmentExpression = function(b) {
    throw {message:b.operator + "\uc740(\ub294) \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
  };
  a.AssignmentOperator = function() {
    return "= += -= *= /= %= <<= >>= >>>= ,= ^= &=".split(" ");
  };
  a.BinaryExpression = function(b) {
    var a, d = {};
    a = String(b.operator);
    var e = b.left.name;
    switch(a) {
      case "==":
        var f = "object_up" == e || "object_right" == e || "object_down" == e ? "ai_boolean_object" : "radar_up" == e || "radar_right" == e || "radar_down" == e ? "ai_boolean_distance" : null;
        break;
      case "<":
        f = "ai_boolean_distance";
        break;
      case "<=":
        f = "ai_boolean_distance";
        break;
      case ">":
        f = "ai_boolean_distance";
        break;
      case ">=":
        f = "ai_boolean_distance";
    }
    if (f) {
      e = [];
      a = b.left;
      if ("Literal" == a.type || "Identifier" == a.type) {
        arguments = [];
        arguments.push(a);
        a = Entry.block[f].params;
        for (var g in a) {
          var h = a[g].type;
          "Indicator" == h ? (h = {raw:null, type:"Literal", value:null}, g < arguments.length && arguments.splice(g, 0, h)) : "Text" == h && (h = {raw:"", type:"Literal", value:""}, g < arguments.length && arguments.splice(g, 0, h));
        }
        for (var k in arguments) {
          a = arguments[k], h = this[a.type](a), (h = Entry.TextCodingUtil.radarVariableConvertor(h)) && null != h && e.push(h);
        }
      } else {
        h = this[a.type](a), (h = Entry.TextCodingUtil.radarVariableConvertor(h)) && e.push(h);
      }
      if (a = String(b.operator)) {
        (h = a = Entry.TextCodingUtil.jTobBinaryOperatorConvertor(a)) && e.push(h), d.operator = a;
      }
      a = b.right;
      if ("Literal" == a.type || "Identifier" == a.type) {
        arguments = [];
        arguments.push(a);
        a = Entry.block[f].params;
        for (g in a) {
          h = a[g].type, "Indicator" == h ? (h = {raw:null, type:"Literal", value:null}, g < arguments.length && arguments.splice(g, 0, h)) : "Text" == h && (h = {raw:"", type:"Literal", value:""}, g < arguments.length && arguments.splice(g, 0, h));
        }
        for (k in arguments) {
          if (a = arguments[k], h = this[a.type](a), "string" == typeof h && (g = h.split("_"), "radar" == g[0] && (a = {type:"ai_distance_value", params:[]}, a.params.push(g[1].toUpperCase()), h = a)), h && null != h && ("ai_boolean_object" == f && (h = h.params[0], e.splice(1, 1)), h = Entry.TextCodingUtil.tTobDropdownValueConvertor(h), e.push(h), console.log("rigth param", e), e[2] && "text" != e[2].type && "ai_distance_value" != e[2].type)) {
            throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b.test};
          }
        }
      } else {
        h = this[a.type](a), "ai_boolean_object" == f && (h = h.params[0], e.splice(1, 1)), h && e.push(h);
      }
      d.type = f;
      d.params = e;
    } else {
      throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b.test};
    }
    return d;
  };
  a.LogicalExpression = function(b) {
    var a = {}, d = String(b.operator);
    switch(d) {
      case "&&":
        var e = "ai_boolean_and";
        break;
      default:
        e = "ai_boolean_and";
    }
    var f = [], d = b.left;
    if ("Literal" == d.type || "Identifier" == d.type) {
      arguments = [];
      arguments.push(d);
      var d = Entry.block[e].params, g;
      for (g in d) {
        var h = d[g].type;
        "Indicator" == h ? (h = {raw:null, type:"Literal", value:null}, g < arguments.length && arguments.splice(g, 0, h)) : "Text" == h && (h = {raw:"", type:"Literal", value:""}, g < arguments.length && arguments.splice(g, 0, h));
      }
      for (var k in arguments) {
        d = arguments[k], (d = this[d.type](d)) && null != d && f.push(d);
      }
    } else {
      (d = this[d.type](d)) && f.push(d);
    }
    if (d = String(b.operator)) {
      d = Entry.TextCodingUtil.logicalExpressionConvert(d), f.push(d);
    }
    d = b.right;
    if ("Literal" == d.type || "Identifier" == d.type) {
      arguments = [];
      arguments.push(d);
      d = Entry.block[e].params;
      for (g in d) {
        h = d[g].type, "Indicator" == h ? (h = {raw:null, type:"Literal", value:null}, g < arguments.length && arguments.splice(g, 0, h)) : "Text" == h && (h = {raw:"", type:"Literal", value:""}, g < arguments.length && arguments.splice(g, 0, h));
      }
      for (k in arguments) {
        d = arguments[k], (d = this[d.type](d)) && null != d && f.push(d);
      }
      if ("True" != f[0].type && "ai_boolean_distance" != f[0].type && "ai_boolean_object" != f[0].type && "ai_boolean_and" != f[0].type && "ai_distance_value" != f[0].type) {
        throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub801\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
      }
      if ("True" != f[2].type && "ai_boolean_distance" != f[2].type && "ai_boolean_object" != f[2].type && "ai_boolean_and" != f[2].type && "ai_distance_value" != f[2].type) {
        throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub801\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
      }
    } else {
      (d = this[d.type](d)) && f.push(d);
    }
    a.type = e;
    a.params = f;
    return a;
  };
  a.LogicalOperator = function() {
    return ["||", "&&"];
  };
  a.MemberExpression = function(b) {
    var a = b.object, d = b.property, a = this[a.type](a), d = this[d.type](d, a);
    if (Object(a) !== a || Object.getPrototypeOf(a) !== Object.prototype) {
      throw {message:a + "\uc740(\ub294) \uc798\ubabb\ub41c \uba64\ubc84 \ubcc0\uc218\uc785\ub2c8\ub2e4.", node:b};
    }
    a = d;
    if (!a) {
      throw {message:d + "\uc774(\uac00) \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.", node:b};
    }
    return a;
  };
  a.ConditionalExpression = function(b) {
    throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.UpdateExpression = function(b) {
    throw {message:b.operator + "\uc740(\ub294) \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba85\ub801\uc5b4 \uc785\ub2c8\ub2e4.", node:b};
  };
  a.CallExpression = function(b) {
    var a = b.callee;
    b = b.arguments;
    for (var d = [], a = this[a.type](a), a = this.syntax.Scope[a], e = Entry.block[a], f = 0;f < b.length;f++) {
      var g = b[f], g = this[g.type](g, a);
      "Dropdown" != e.params[f].type && "Block" === e.params[f].type && (g = "string" == typeof g ? {type:"text", params:[g]} : "number" == typeof g ? {type:"number", params:[g]} : g);
      d.push(g);
    }
    return {type:a, params:d};
  };
  a.NewExpression = function(b) {
    throw {message:"new\ub294 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.SequenceExpression = function(b) {
    throw {message:"SequenceExpression \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
  };
  a.initScope = function(b) {
    if (null === this.scope) {
      var a = function() {
      };
      a.prototype = this.syntax.Scope;
    } else {
      a = function() {
      }, a.prototype = this.scope;
    }
    this.scope = new a;
    this.scopeChain.push(this.scope);
    return this.scanDefinition(b);
  };
  a.unloadScope = function() {
    this.scopeChain.pop();
    this.scope = this.scopeChain.length ? this.scopeChain[this.scopeChain.length - 1] : null;
  };
  a.scanDefinition = function(b) {
    b = b.body;
    for (var a = [], d = 0;d < b.length;d++) {
      var e = b[d];
      "FunctionDeclaration" === e.type && (this.scope[e.id.name] = this.scope.promise, this.syntax.BasicFunction && (e = e.body, a.push([{type:this.syntax.BasicFunction, statements:[this[e.type](e)]}])));
    }
    return a;
  };
  a.BasicFunction = function(b, a) {
    return null;
  };
  a.BasicIteration = function(b, a, d) {
    if (10 < a) {
      throw {message:"\ubc18\ubcf5 \uc22b\uc790\uac12\uc774 10\uc744 \ub118\uc73c\uba74 \uc548\ub429\ub2c8\ub2e4.", node:b.test};
    }
    var c = this.syntax.BasicIteration;
    if (!c) {
      throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b};
    }
    return {params:[a], type:c, statements:[d]};
  };
  a.BasicWhile = function(b, a) {
    var c = b.test.raw;
    if (this.syntax.BasicWhile[c]) {
      return {type:this.syntax.BasicWhile[c], statements:[a]};
    }
    throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b.test};
  };
  a.BasicIf = function(b) {
    var a = {params:[], statements:[]}, d, e = [], f = [], g = [], h = b.consequent;
    if (h) {
      var k = this[h.type](h);
    }
    if (h = b.alternate) {
      var l = this[h.type](h);
    }
    try {
      var n = b.test.operator ? "===" === b.test.operator ? "==" : b.test.operator : null, m = b.test.left && b.test.right ? b.test.left.name + b.test.right.value : null;
      if ("frontwall" == m && "==" == n) {
        d = this.syntax.BasicIf["front == 'wall'"];
      } else {
        if ("fronthump" == m && "==" == n) {
          d = this.syntax.BasicIf["front == 'hump'"];
        } else {
          if ("frontstone" == m && "==" == n) {
            d = this.syntax.BasicIf["front == 'stone'"];
          } else {
            if ("frontbee" == m && "==" == n) {
              d = this.syntax.BasicIf["front == 'bee'"];
            } else {
              if (b.test.value || b.test.left && b.test.right) {
                d = "ai_if_else";
                var t = this[b.test.type](b.test, this.syntax.Scope);
                g.push(t);
              } else {
                throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b.test};
              }
            }
          }
        }
      }
      d ? (k && 0 != k.length && a.statements.push(k), l && 0 != l.length && a.statements.push(l), d && (a.type = d), g && 0 != g.length && (a.params = g)) : (k && 0 != k.length && (e = k), l && 0 != l.length && (f = l), d && (a.type = d), g && 0 != g.length && (a.params = g), a.statements = [e, f]);
      return a;
    } catch (u) {
      throw {message:"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ud45c\ud604\uc2dd \uc785\ub2c8\ub2e4.", node:b.test};
    }
  };
  a.searchSyntax = function(b) {
    return null;
  };
})(Entry.JsToBlockParser.prototype);
Entry.PyToBlockParser = function(a) {
  this._type = "PyToBlockParser";
  this.blockSyntax = a;
  this._funcMap = new Entry.Map;
};
(function(a) {
  a.Program = function(b) {
    try {
      this.codeInit();
      for (var a in b) {
        if ("Program" != b[a].type) {
          return;
        }
        this.threadInit();
        this._threadCount++;
        var d = b[a].body;
        this._isEntryEventExisted = !1;
        for (a in d) {
          var e = d[a], f = this[e.type](e);
          this.isLastBlock && Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_DEFAULT, void 0, this._blockCount);
          if (f && f.type) {
            var g = this.searchSyntax(Entry.block[f.type]);
            if (g) {
              var h = g.blockType;
            }
            if ("event" == h) {
              this._isEntryEventExisted = !0;
            } else {
              if ("last" == h) {
                this.isLastBlock = !0;
              } else {
                if ("variable" == h && !this._isEntryEventExisted) {
                  continue;
                }
              }
            }
            if (Entry.TextCodingUtil.isEntryEventFuncByType(f.type)) {
              if (this._thread.push(f), f.contents) {
                for (var k in f.contents) {
                  this.extractContents(f.contents[k], this._thread);
                }
              }
            } else {
              this._thread.push(f);
            }
          }
        }
        0 != this._thread.length && this._code.push(this._thread);
      }
      return this._code;
    } catch (l) {
      throw b = {}, b.title = l.title, b.message = l.message, b.line = l.line, b;
    }
  };
  a.ExpressionStatement = function(b) {
    var a = {};
    b = b.expression;
    this._blockCount++;
    b.callee && Entry.TextCodingUtil.isEntryEventFuncName(b.callee.name) && this._blockCount--;
    b.type && (b = this[b.type](b), b.type && b.params ? (a.type = b.type, a.params = b.params) : b.type ? a.type = b.type : a = b, b.funcName && (a.funcName = b.funcName));
    !a.type && a.name && Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, a.name, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return a;
  };
  a.CallExpression = function(b) {
    var a = {}, d = [], e, f = b.callee, g = this[f.type](f), arguments = b.arguments, h = 0;
    if ("Identifier" == f.type) {
      a.callee = g;
      var k = Entry.TextCodingUtil.eventBlockSyntaxFilter(g.name);
      if (arguments && 0 != arguments.length) {
        for (var l in arguments) {
          var n = arguments[l];
          if ("Identifier" == n.type) {
            var m = n.name;
          } else {
            "Literal" == n.type ? m = n.value : "MemberExpression" == n.type && (m = n.object.name + "." + n.property.name);
          }
          var t = k + "#" + m, u = this.getBlockSyntax(t);
          u && (e = u.key);
        }
      }
      if (!e) {
        if (arguments && 0 != arguments.length) {
          var x = "";
          for (l in arguments) {
            n = arguments[l], "Identifier" == n.type ? x += n.name : "Literal" == n.type ? x += n.value : "MemberExpression" == n.type && (x += n.object.name + "." + n.property.name), l != arguments.length - 1 && (x += ",");
          }
        }
        t = k + "(" + x + ")";
        if (u = this.getBlockSyntax(t)) {
          e = u.key;
        }
      }
      !e && (t = k, u = this.getBlockSyntax(t)) && (e = u.key);
      if (!e) {
        var v = g.name;
        if (-1 != g.name.search("__getParam")) {
          return a;
        }
        if (g.name && 0 != arguments.length && "Literal" == arguments[0].type && !this._funcMap.get(v)) {
          var q = g.name;
          Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        }
      }
      f && "when_get_signal" == f.name && (m = b.arguments[0]) && m.value && "None" != m.value && Entry.TextCodingUtil.createMessage(m.value);
    } else {
      n = g.object;
      k = null;
      g.property && "call" == g.property.name && 0 == g.property.userCode && g.object && g.object.statements && (a.statements = n.statements);
      g.object && (g.object.name ? k = String(g.object.name).concat(".").concat(String(g.property.name)) : g.object.object && (k = String(g.object.object.name).concat(".").concat(String(g.object.property.name)).concat(".").concat(String(g.property.name))));
      a.callee = k;
      arguments && 0 != arguments.length && (n = arguments[0], "Identifier" == n.type ? m = n.name : "Literal" == n.type ? m = n.value : "MemberExpression" == n.type && (m = n.object.name + "." + n.property.name), t = k + "#" + m, u = this.getBlockSyntax(t)) && (e = u.key, u.replaceBlockType && (e = u.replaceBlockType));
      if (!e) {
        if (arguments && 0 != arguments.length) {
          for (l in x = "", arguments) {
            n = arguments[l], "Identifier" == n.type ? x += n.name : "Literal" == n.type ? x += n.value : "MemberExpression" == n.type && (x += n.object.name + "." + n.property.name), l != arguments.length - 1 && (x += ",");
          }
        }
        t = k + "(" + String(x) + ")";
        if (u = this.getBlockSyntax(t)) {
          e = u.key, u.replaceBlockType && (e = u.replaceBlockType);
        }
      }
      !e && (t = k, u = this.getBlockSyntax(t)) && (e = u.key, u.replaceBlockType && (e = u.replaceBlockType));
      if (f.object) {
        if ("Math" === f.object.name) {
          if ("pow" === f.property.name) {
            if (t = "(%2 ** 2)", u = this.getBlockSyntax(t)) {
              e = u.key;
            }
          } else {
            if ("floor" === f.property.name) {
              t = "(%2 // %4)";
              if (u = this.getBlockSyntax(t)) {
                e = u.key;
                var z = Entry.block[e], v = z.params, z = z.def.params;
              }
              if (b.arguments && b.arguments[0]) {
                return m = b.arguments[0], m.left && (r = this[m.left.type](m.left, v[1], z[1], u.textParams[1]), d[1] = r), m.right && (r = this[m.right.type](m.right, v[3], z[3], u.textParams[3]), d[3] = r), a.type = e, a.params = d, a;
              }
            }
          }
        } else {
          "Entry" == f.object.name && ("send_signal" == f.property.name ? (m = b.arguments[0]) && m.value && Entry.TextCodingUtil.createMessage(m.value) : "send_signal_wait" == f.property.name && (m = b.arguments[0]) && m.value && Entry.TextCodingUtil.createMessage(m.value));
        }
      }
      if (f.property) {
        if ("range" == f.property.name) {
          if (t = "%1#number", u = this.getBlockSyntax(t)) {
            e = u.key;
          }
        } else {
          if ("add" == f.property.name) {
            t = "(%1 %2 %3)#calc_basic";
            if (u = this.getBlockSyntax(t)) {
              e = u.key;
            }
            v = {raw:"PLUS", type:"Literal", value:"PLUS"};
            2 == arguments.length && arguments.splice(1, 0, v);
            a.operator = "PLUS";
          } else {
            if ("multiply" == f.property.name) {
              t = "(%1 %2 %3)#calc_basic";
              if (u = this.getBlockSyntax(t)) {
                e = u.key;
              }
              v = {raw:"MULTI", type:"Literal", value:"MULTI"};
              2 == arguments.length && arguments.splice(1, 0, v);
              a.operator = "MULTI";
            } else {
              if ("in" == f.property.name) {
                if (t = "%4 in %2", u = this.getBlockSyntax(t)) {
                  e = u.key;
                }
              } else {
                if ("len" == f.property.name) {
                  t = "len";
                  if (b.arguments && b.arguments[0]) {
                    if (n = b.arguments[0], "Literal" == n.type) {
                      t = "len#length_of_string";
                    } else {
                      if ("Identifier" == n.type) {
                        if (this.isFuncParam(n.name) || Entry.TextCodingUtil.isGlobalVariableExisted(n.name) || Entry.TextCodingUtil.isLocalVariableExisted(n.name, this._currentObject)) {
                          t = "len#length_of_string";
                        }
                      } else {
                        if ("MemberExpression" == n.type) {
                          if (Entry.TextCodingUtil.isGlobalListExisted(n.object.name) || Entry.TextCodingUtil.isLocalListExisted(n.object.name) || Entry.TextCodingUtil.isGlobalVariableExisted(n.property.name) || Entry.TextCodingUtil.isLocalVariableExisted(n.property.name, this._currentObject)) {
                            t = "len#length_of_string";
                          }
                        } else {
                          t = "len#length_of_string";
                        }
                      }
                    }
                  }
                  if (u = this.getBlockSyntax(t)) {
                    e = u.key;
                  }
                } else {
                  if ("append" == f.property.name) {
                    if (t = "%2.append", u = this.getBlockSyntax(t)) {
                      e = u.key;
                    }
                  } else {
                    if ("insert" == f.property.name) {
                      if (t = "%2.insert", u = this.getBlockSyntax(t)) {
                        e = u.key;
                      }
                    } else {
                      if ("pop" == f.property.name) {
                        if (t = "%2.pop", u = this.getBlockSyntax(t)) {
                          e = u.key;
                        }
                      } else {
                        if ("subscriptIndex" == f.property.name) {
                          if (b.arguments && b.arguments[0]) {
                            if (n = b.arguments[0], Entry.TextCodingUtil.isExpressionLiteral(n, this.blockSyntax)) {
                              if (t = "%2[%4]#char_at", u = this.getBlockSyntax(t)) {
                                e = u.key;
                              }
                            } else {
                              "" != n.type && (t = "%2[%4]", u = this.getBlockSyntax(t)) && (e = u.key);
                            }
                          }
                        } else {
                          if ("_pySlice" == f.property.name) {
                            if (t = "%2[%4:%6]", u = this.getBlockSyntax(t)) {
                              e = u.key;
                            }
                          } else {
                            if ("find" == f.property.name) {
                              if (t = "%2.find", u = this.getBlockSyntax(t)) {
                                e = u.key;
                              }
                            } else {
                              if ("replace" == f.property.name) {
                                if (t = "%2.replace", u = this.getBlockSyntax(t)) {
                                  e = u.key;
                                }
                              } else {
                                if ("upper" == f.property.name) {
                                  if (t = "%2.upper", u = this.getBlockSyntax(t)) {
                                    e = u.key;
                                  }
                                } else {
                                  if ("lower" == f.property.name) {
                                    if (t = "%2.lower", u = this.getBlockSyntax(t)) {
                                      e = u.key;
                                    }
                                  } else {
                                    "randint" == f.property.name && (b.arguments && b.arguments[0] && (n = b.arguments[0], "Literal" == n.type && (v = n.value, !isNaN(v) && 0 !== v % 1 && (t = "random.uniform(%2, %4)", u = this.getBlockSyntax(t)))) && (e = u.key), b.arguments && b.arguments[1] && (n = b.arguments[1], "Literal" == n.type && (v = n.value, !isNaN(v) && 0 !== v % 1 && (t = "random.uniform(%2, %4)", u = this.getBlockSyntax(t)))) && (e = u.key));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      !e && g.object && g.object.name && (q = f.property && f.property.name ? g.object.name + "." + f.property.name : g.object.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL));
    }
    if (e) {
      var z = Entry.block[e], v = z.params, z = z.def.params, B;
      for (B in v) {
        g = v[B].type, "Indicator" == g ? d[B] = null : "Text" == g && (d[B] = null);
      }
      g = this.getParamIndex(t);
      if (f && f.property) {
        if ("append" == f.property.name) {
          if (f.object) {
            if (f.object.object) {
              if ("self" == f.object.object.name) {
                var y = f.object.property.name;
                if (!Entry.TextCodingUtil.isLocalListExisted(y, this._currentObject)) {
                  return Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, y, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST), a;
                }
              }
            } else {
              if (y = f.object.name, !Entry.TextCodingUtil.isGlobalListExisted(y) && !Entry.TextCodingUtil.isLocalListExisted(y, this._currentObject)) {
                return Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, y, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST), a;
              }
            }
          }
          y = this.ParamDropdownDynamic(y, v[1], z[1]);
          d[g[0]] = y;
          h++;
        } else {
          if ("pop" == f.property.name) {
            if (f.object) {
              if (f.object.object) {
                if ("self" == f.object.object.name && (y = f.object.property.name, !Entry.TextCodingUtil.isLocalListExisted(y, this._currentObject))) {
                  return Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, y, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST), a;
                }
              } else {
                if (y = f.object.name, !Entry.TextCodingUtil.isGlobalListExisted(y)) {
                  return Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, y, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST), a;
                }
              }
            }
            y = this.ParamDropdownDynamic(y, v[1], z[1]);
            d[g[0]] = y;
            h++;
          } else {
            if ("insert" == f.property.name) {
              if (f.object) {
                if (f.object.object) {
                  if ("self" == f.object.object.name && (y = f.object.property.name, !Entry.TextCodingUtil.isLocalListExisted(y, this._currentObject))) {
                    return Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, y, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST), a;
                  }
                } else {
                  if (y = f.object.name, !Entry.TextCodingUtil.isGlobalListExisted(y)) {
                    return Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, y, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST), a;
                  }
                }
              }
              y = this.ParamDropdownDynamic(y, v[1], z[1]);
              d[g[0]] = y;
              h++;
            }
          }
        }
      }
      h = 0 + h;
      if (u.textParams) {
        var C = u.textParams;
      }
      a.arguments = [];
      for (var A in arguments) {
        if (y = !1, m = arguments[A]) {
          m.calleeName = k;
          C || (C = []);
          var r = this[m.type](m, v[g[h]], z[g[h]], C[g[h]]);
          r && r.data && (r = r.data);
          r && this.isFuncParam(r.name) && (m = {}, m.type = r.name, m.params = [], m.isParamFromFunc = !0, r = m);
          r && ((x = u.keyOption) || 0 === x ? r.object && r.property.name ? (m = r.object.name + "." + r.property.name, x == m && (y = !0)) : "text" != r.type && "number" != r.type || !r.params || 0 == r.params.length || (m = r.params[0], x == m && (y = !0)) : r.object && r.property.name && "self" != r.object.name && (m = r.object.name + "." + r.property.name, r = {}, r.value = m, r = this.Literal(r, v[g[h]], z[g[h]], C[g[h]])));
          y || (y = g[h++], void 0 !== y && (d[y] = r, a.arguments.push(r), r && (r.object && r.object.object ? "self" == r.object.object.name ? (y = r.object.property.name, "char_at" == r.type ? Entry.TextCodingUtil.isLocalVariableExisted(y, this._currentObject) || (q = y, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE)) : Entry.TextCodingUtil.isLocalListExisted(y, 
          this._currentObject) || (q = y, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST))) : (y = r.object.object.name, Entry.TextCodingUtil.isGlobalListExisted(y, this._currentObject) || (q = y, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST))) : 
          r.object ? f.property && "in" == f.property.name ? "self" == r.object.name ? (y = r.property.name, Entry.TextCodingUtil.isLocalListExisted(y, this._currentObject) || (q = r.object.name + "." + r.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST))) : (q = y = r.object.name, r.object.listType && "global" == r.object.listType && (Entry.TextCodingUtil.isGlobalListExisted(y) || 
          Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST))) : f.property && "len" == f.property.name ? "self" == r.object.name ? (y = r.property.name, "len#length_of_string" == t ? Entry.TextCodingUtil.isLocalVariableExisted(y, this._currentObject) || this.isFuncParam(y) || (q = r.object.name + "." + r.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, 
          Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE)) : "len" != t || Entry.TextCodingUtil.isLocalListExisted(y, this._currentObject) || (q = y, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST))) : (y = r.object.name, r.object.listType && "global" == r.listType ? Entry.TextCodingUtil.isGlobalListExisted(y) || 
          (q = y, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)) : !r.variableType || "global" != r.variableType || Entry.TextCodingUtil.isGlobalVariableExisted(y) || this.isFuncParam(y) || (q = y, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE))) : 
          "__pythonRuntime.ops.subscriptIndex" == r.property.callee ? r.object.type || (y = r.object.name, Entry.TextCodingUtil.isGlobalListExisted(y) || this.isFuncParam(y) || (q = y, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST))) : "self" == r.object.name ? (y = r.property.name, r.property && "local" == r.property.listType ? Entry.TextCodingUtil.isLocalListExisted(y, 
          this._currentObject) || (q = r.object.name + "." + r.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)) : r.property && "local" == r.property.variableType && !Entry.TextCodingUtil.isLocalVariableExisted(y, this._currentObject) && (q = r.object.name + "." + r.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, 
          q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE))) : "Hamster" != r.object.name && (q = y = r.object.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_OBJECT, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_OBJECT)) : r.name && (f.property && "in" == f.property.name ? (y = r.name, r.listType && "global" == r.listType ? Entry.TextCodingUtil.isGlobalListExisted(y) || (q = y, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, 
          Entry.TextCodingError.MESSAGE_CONV_NO_LIST, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)) : !r.variableType || "global" != r.variableType || Entry.TextCodingUtil.isGlobalVariableExisted(y) || this.isFuncParam(y) || (q = y, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE))) : f.property && "len" == f.property.name ? (y = r.name, "len#length_of_string" == 
          t ? r.listType && "global" == r.listType ? Entry.TextCodingUtil.isGlobalListExisted(y) || (q = y, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)) : !r.variableType || "global" != r.variableType || Entry.TextCodingUtil.isGlobalVariableExisted(y) || this.isFuncParam(y) || (q = y, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, 
          q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE)) : "len" == t && (r.listType && "global" == r.listType ? Entry.TextCodingUtil.isGlobalListExisted(y) || (q = y, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)) : !r.variableType || "global" != r.variableType || Entry.TextCodingUtil.isGlobalVariableExisted(y) || this.isFuncParam(y) || (q = y, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, 
          Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE)))) : (y = r.name, this.isFuncParam(y) || ("global" == r.variableType ? Entry.TextCodingUtil.isGlobalVariableExisted(y) || this.isFuncParam(y) || (q = y, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE)) : "global" != r.listType || Entry.TextCodingUtil.isGlobalListExisted(y) || 
          (q = y, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE))))))));
        }
      }
      if (f.object && f.property) {
        if ("range" == f.property.name) {
          if (!(2 < d.length)) {
            if (2 == d.length) {
              for (B in d) {
                if (r = d[B], q = {}, A = [, "MINUS"], "object" != typeof r || "text" != r.type && "number" != r.type || (d[B] = r.params[0]), 1 == B) {
                  if ("string" != typeof d[0] && "number" != typeof d[0] || "string" != typeof d[1] && "number" != typeof d[1]) {
                    if ("string" == typeof d[0] || "number" == typeof d[0]) {
                      a = {}, r = [], r.push(d[0]), a.type = "text", a.params = r, d[0] = a;
                    }
                    if ("string" == typeof d[1] || "number" == typeof d[1]) {
                      a = {}, r = [], r.push(d[1]), a.type = e, a.params = r, d[1] = a;
                    }
                    A[0] = d[1];
                    A[2] = d[0];
                    q.type = "calc_basic";
                    q.params = A;
                    return a = q;
                  }
                  d = parseInt(d[1]) - parseInt(d[0]);
                  isNaN(d) ? (r = [], r.push(10)) : (r = [], r.push(d));
                  d = r;
                }
              }
            } else {
              if (1 == d.length) {
                if ("object" != typeof r) {
                  r = d[0], d.splice(0, 1, r);
                } else {
                  if (r = d[0], e = r.type, d = r.params, r.isParamFromFunc) {
                    var D = !0;
                  }
                }
              }
            }
          }
        } else {
          if ("add" == f.property.name) {
            for (B in d) {
              if ((r = d[B]) && r.type) {
                if ("text" == r.type || "number" == r.type) {
                  if (r.params && 0 != r.params.length && (B = r.params[0], "number" != typeof B)) {
                    break;
                  }
                } else {
                  if ("get_variable" == r.type) {
                    if (y = r.params[0], !Entry.TextCodingUtil.isVariableNumber(y, r.variableType)) {
                      break;
                    }
                  } else {
                    if ("combine_something" == r.type) {
                      break;
                    }
                  }
                }
              }
            }
          } else {
            "len" == f.property.name ? "len" == t && (B = d[1], B = this.ParamDropdownDynamic(B.name, v[1], z[1]), d[1] = B) : "in" == f.property.name ? (B = d[1], B = this.ParamDropdownDynamic(B.name, v[1], z[1]), d[1] = B) : "pop" == f.property.name ? d[0].type ? "number" == d[0].type || "text" == d[0].type ? isNaN(d[0].params[0]) || (d[0].params[0] += 1) : "get_variable" == d[0].type ? (q = {type:"calc_basic"}, r = [], r[0] = d[0], r[1] = "PLUS", r[2] = {type:"number", params:[1]}, q.params = 
            r, d[0] = q) : "calc_basic" == d[0].type ? d[0].params && "MINUS" == d[0].params[1] && d[0].params[2] && d[0].params[2].params && "1" == d[0].params[2].params[0] ? d[0] = d[0].params[0] : (q = {type:"calc_basic"}, r = [], r[0] = d[0], r[1] = "PLUS", r[2] = {type:"number", params:[1]}, q.params = r, d[0] = q) : (q = {type:"calc_basic"}, r = [], r[0] = d[0], r[1] = "PLUS", r[2] = {type:"number", params:[1]}, q.params = r, d[0] = q) : this.isFuncParam(d[0].name) ? (q = {type:"calc_basic"}, 
            r = [], r[0] = d[0], r[1] = "PLUS", r[2] = {type:"number", params:[1]}, q.params = r, d[0] = q) : Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_DEFAULT, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_DEFAULT) : "insert" == f.property.name ? d[2].type ? "number" == d[2].type || "text" == d[2].type ? isNaN(d[2].params && d[2].params[0]) || (d[2].params[0] += 1) : "get_variable" == d[2].type ? (q = {type:"calc_basic"}, r = 
            [], r[0] = d[2], r[1] = "PLUS", r[2] = {type:"number", params:[1]}, q.params = r, d[2] = q) : "calc_basic" == d[2].type ? d[2].params && "MINUS" == d[2].params[1] && d[2].params[2] && d[2].params[2].params && "1" == d[2].params[2].params[0] ? d[2] = d[2].params[0] : (q = {type:"calc_basic"}, r = [], r[0] = d[2], r[1] = "PLUS", r[2] = {type:"number", params:[1]}, q.params = r, d[2] = q) : (q = {type:"calc_basic"}, r = [], r[0] = d[2], r[1] = "PLUS", r[2] = {type:"number", params:[1]}, 
            q.params = r, d[2] = q) : this.isFuncParam(d[2].name) ? (q = {type:"calc_basic"}, r = [], r[0] = d[2], r[1] = "PLUS", r[2] = {type:"number", params:[1]}, q.params = r, d[2] = q) : Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_DEFAULT, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_DEFAULT) : "subscriptIndex" == f.property.name ? d[3].type ? "number" == d[3].type || "text" == d[3].type ? isNaN(d[3].params[0]) || (d[3].params[0] += 
            1) : "get_variable" == d[3].type ? (q = {type:"calc_basic"}, r = [], r[0] = d[3], r[1] = "PLUS", r[2] = {type:"number", params:[1]}, q.params = r, d[3] = q) : "calc_basic" == d[3].type && (d[3].params && "MINUS" == d[3].params[1] && d[3].params[2] && d[3].params[2].params && "1" == d[3].params[2].params[0] ? d[3] = d[3].params[0] : (q = {type:"calc_basic"}, r = [], r[0] = d[3], r[1] = "PLUS", r[2] = {type:"number", params:[1]}, q.params = r, d[3] = q)) : this.isFuncParam(d[3].name) ? 
            (q = {type:"calc_basic"}, r = [], r[0] = d[3], r[1] = "PLUS", r[2] = {type:"number", params:[1]}, q.params = r, d[3] = q) : Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_DEFAULT, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_DEFAULT) : "_pySlice" == f.property.name ? f.object && (r = this[f.object.type](f.object), A = [], A[1] = r, d[1].type ? "number" == d[1].type || "text" == d[1].type ? isNaN(d[1].params[0]) || (d[1].params[0] += 
            1) : "get_variable" == d[1].type ? (q = {type:"calc_basic"}, r = [], r[0] = d[1], r[1] = "PLUS", r[2] = {type:"number", params:[1]}, q.params = r, d[1] = q) : "calc_basic" == d[1].type && (d[1].params && "MINUS" == d[1].params[1] && d[1].params[2] && d[1].params[2].params && "1" == d[1].params[2].params[0] ? d[1] = d[1].params[0] : (q = {type:"calc_basic"}, r = [], r[0] = d[1], r[1] = "PLUS", r[2] = {type:"number", params:[1]}, q.params = r, d[1] = q)) : this.isFuncParam(d[1].name) ? 
            (q = {type:"calc_basic"}, r = [], r[0] = d[1], r[1] = "PLUS", r[2] = {type:"number", params:[1]}, q.params = r, d[1] = q) : Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_DEFAULT, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_DEFAULT), A[3] = d[1], A[5] = d[3], d = A) : "find" == f.property.name ? f.object && (r = this[f.object.type](f.object), A = [], A[1] = r, A[3] = d[1], d = A) : "replace" == f.property.name ? f.object && 
            (r = this[f.object.type](f.object), A = [], A[1] = r, A[3] = d[1], A[5] = d[3], d = A) : "upper" == f.property.name ? f.object && (r = this[f.object.type](f.object), A = [], A[1] = r, A[3] = d[1], d = A) : "lower" == f.property.name && f.object && (r = this[f.object.type](f.object), A = [], A[1] = r, A[3] = d[1], d = A);
          }
        }
      }
      if (f.object && f.property && "Hamster" == f.object.name) {
        if ("wheels" == f.property.name) {
          if (k = f.object.name + "." + f.property.name, !d[1] && (u = this.getBlockSyntax(k + "#SAME"))) {
            e = u.key;
          }
        } else {
          "wheels_by" == f.property.name && (k = f.object.name + "." + f.property.name, !d[1] && (u = this.getBlockSyntax(k + "#SAME"))) && (e = u.key);
        }
      }
      if (u.params && 0 != u.params.length) {
        for (B in u.params) {
          (r = u.params[B]) && (d[B] = r);
        }
      }
      e && (a.type = e);
      d && (a.params = d);
      D && (a.isParamFromFunc = !0);
    } else {
      e = [];
      for (A in arguments) {
        if (m = arguments[A]) {
          if (v = this[m.type](m), "ThisExpression" != m.type) {
            if (!v.type && v.isCallParam) {
              Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_DEFAULT, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_DEFAULT);
            } else {
              if (!v.type && !v.isCallParam && "__pythonRuntime.utils.createParamsObj" != v.callee) {
                if (v.object && "self" == v.object.name) {
                  if (v.property.variableType || v.property.listType) {
                    break;
                  }
                  v.property.variableType || (q = v.object.name + "." + v.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE));
                  v.property.listType || (q = v.object.name + "." + v.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST));
                } else {
                  if (!this.isFuncParam(v.name)) {
                    if (v.variableType || v.listType) {
                      break;
                    }
                    v.variableType || (q = v.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE));
                    v.listType || (q = v.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, q, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST));
                  }
                }
              }
            }
            "__pythonRuntime.utils.createParamsObj" == v.callee ? e = v.arguments : e.push(v);
          }
        }
      }
      a.arguments = e;
    }
    if (a.arguments && a.arguments[0] && "__pythonRuntime.utils.createParamsObj" == a.arguments[0].callee) {
      return a;
    }
    if (a.callee) {
      f = a.callee.name;
      if (a.arguments) {
        for (l in d = [], arguments = a.arguments, arguments) {
          m = arguments[l], d.push(m);
        }
      }
      l = f;
      (e = this._funcMap.get(l)) ? (a = {}, a.type = e, d && 0 != d.length && (a.params = d)) : l == this._currentFuncKey ? Entry.TextCodingUtil.isEntryEventFuncName(a.callee.name) || (a.type = l, a.params = d, a.funcName = f, this._hasReculsiveFunc = !0) : 0 != a.callee.isCallParam || Entry.TextCodingUtil.isEntryEventFuncName(a.callee.name) || (y = a.callee.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_FUNCTION, y, this._blockCount, 
      Entry.TextCodingError.SUBJECT_CONV_FUNCTION));
    }
    return a;
  };
  a.Identifier = function(b, a, d) {
    a = {};
    d = b.name;
    a.name = d;
    if (!0 === b.userCode || !1 === b.userCode) {
      a.userCode = b.userCode;
    }
    if (this.isFuncParam(d)) {
      return a.isCallParam = !1, a;
    }
    if (Entry.TextCodingUtil.isGlobalVariableExisted(d)) {
      a.variableType = "global";
      var c = "%1#get_variable";
    }
    Entry.TextCodingUtil.isLocalVariableExisted(d, this._currentObject) && (a.variableType = "local", c = "%1#get_variable");
    Entry.TextCodingUtil.isGlobalListExisted(d) && (a.listType = "global");
    Entry.TextCodingUtil.isLocalListExisted(d, this._currentObject) && (a.listType = "local");
    if (!c) {
      return a.isCallParam = !1, a;
    }
    if (b = this.getBlockSyntax(c)) {
      var f = b.key;
    }
    if (f) {
      c = Entry.block[f];
      b = c.params;
      var c = c.def.params, g = [], h, k;
      for (k in b) {
        "Text" != b[k].type && (h = this["Param" + b[k].type](d, b[k], c[k]));
      }
      h && g.push(h);
      a.type = f;
      0 != g.length && (a.params = g, a.variableType = "global");
    }
    return a;
  };
  a.VariableDeclaration = function(b) {
    var a = {declarations:[]}, d, e;
    b = b.declarations;
    for (var f in b) {
      var g = b[f];
      (g = this[g.type](g)) && g.isFuncParam && this._funcParams.push(g.name);
      g && a.declarations.push(g);
      g && g.type && (d = g.type);
      g && g.params && (e = g.params);
    }
    d && (a.type = d);
    e && (a.params = e);
    return a;
  };
  a.VariableDeclarator = function(b) {
    var a = {}, d, e;
    this._blockCount++;
    (b.id.name && -1 != b.id.name.search("__") || b.init && b.init.callee && b.init.callee.name && -1 != b.init.callee.name.search("__")) && this._blockCount--;
    var f = b.id, g = b.init;
    if (!f.name || -1 == f.name.search("__params") && -1 == f.name.search("__formalsIndex") && -1 == f.name.search("__args")) {
      if (g.callee && g.callee.name && -1 != g.callee.name.search("__getParam")) {
        return a.isFuncParam = !0, a.name = f.name, a;
      }
      if (g.object && g.object.name && -1 != g.object.name.search("__filbertTmp")) {
        var h;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, h, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_DEFAULT);
      }
      if (g.callee && g.callee.object && g.callee.property) {
        if (g.callee.object.object && g.callee.object.object.name) {
          var k = g.callee.object.object.name;
        }
        if (g.callee.object.property && g.callee.object.property.name) {
          var l = g.callee.object.property.name;
        }
        if (g.callee.property.name) {
          var n = g.callee.property.name;
        }
        k && l && n && (m = k.concat(".").concat(l).concat(".").concat(n));
      }
      "__pythonRuntime.objects.list" == m ? (n = f.name, l = [], Entry.TextCodingUtil.isGlobalListExisted(n) ? this._funcLoop || Entry.TextCodingUtil.updateGlobalList(n, l) : this._funcLoop || Entry.TextCodingUtil.createGlobalList(n, l)) : (n = f.name, h = 0, !h && 0 != h || -1 != n.search("__filbert") || (Entry.TextCodingUtil.isGlobalVariableExisted(n) ? this._funcLoop || Entry.TextCodingUtil.updateGlobalVariable(n, h) : this._funcLoop ? Entry.TextCodingUtil.createGlobalVariable(n, 0) : Entry.TextCodingUtil.createGlobalVariable(n, 
      h)));
      l = this[f.type](f);
      k = this[g.type](g);
      if ("Identifier" == g.type || "MemberExpression" == g.type) {
        k.property && "__pythonRuntime.ops.subscriptIndex" == k.property.callee ? k.object && k.object.object ? "self" != k.object.object.name ? (n = k.object.object.name, Entry.TextCodingUtil.isGlobalListExisted(n) || Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, n, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)) : k.object.property && (n = k.object.property.name, Entry.TextCodingUtil.isLocalListExisted(k.object.property.name, 
        this._currentObject) || Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, n, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)) : k.object && (n = k.object.name, "get_variable" == k.object.type && (Entry.TextCodingUtil.isGlobalListExisted(n) || Entry.TextCodingUtil.isGlobalVariableExisted(n) || Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, n, this._blockCount, 
        Entry.TextCodingError.SUBJECT_CONV_LIST))) : k.object ? "self" != k.object.name ? (h = k.object.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_OBJECT, h, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_OBJECT)) : k.property.name && (n = k.property.name, Entry.TextCodingUtil.isLocalVariableExisted(n, this._currentObject) || Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, 
        n, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE)) : (n = k.name, Entry.TextCodingUtil.isGlobalVariableExisted(n) || (h = n, this.isFuncParam(n) || Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, h, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE)));
      }
      var m;
      if ("__pythonRuntime.objects.list" == m) {
        a.id = l;
        a.init = k;
        n = f.name;
        l = [];
        arguments = k.arguments;
        for (d in arguments) {
          var t = arguments[d], g = {};
          t.type ? (k = t.params[0], "string" === typeof k && '"()"'.replace("()", k), g.data = String(t.params[0])) : t.name && (h = t.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, h, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE));
          isNaN(g) || (g = parseFloat(g));
          l.push(g);
        }
        Entry.TextCodingUtil.isGlobalListExisted(n) ? this._funcLoop || Entry.TextCodingUtil.updateGlobalList(n, l) : this._funcLoop || Entry.TextCodingUtil.createGlobalList(n, l);
      } else {
        n = f.name, "Literal" == g.type ? h = g.value : "Identifier" == g.type ? h = g.name : "UnaryExpression" == g.type ? (h = k.params[0], "string" != typeof h && "number" != typeof h && (h = 0)) : h = 0, isNaN(h) || (h = parseFloat(h)), !h && 0 != h || -1 != n.search("__filbert") || (Entry.TextCodingUtil.isGlobalVariableExisted(n) ? this._funcLoop || Entry.TextCodingUtil.updateGlobalVariable(n, h) : this._funcLoop ? Entry.TextCodingUtil.createGlobalVariable(n, 0) : Entry.TextCodingUtil.createGlobalVariable(n, 
        h)), a.id = l, a.init = k, "Literal" == g.type ? d = this.getBlockSyntax("%1 = %2") : (d = k.params && k.params[0] && k.params[0].name && l.name == k.params[0].name && "PLUS" == k.operator || "MINUS" == k.operator ? "%1 += %2" : "combine_something" == k.type && k.params && k.params[1] && k.params[1].name && l.name == k.params[1].name && "PLUS" == k.operator || "MINUS" == k.operator ? "%1 += %2" : "%1 = %2", d = this.getBlockSyntax(d)), d && (e = d.key), d = e, f = Entry.block[e], e = f.params, 
        f = f.def.params, l.name && (t = this.ParamDropdownDynamic(l.name, e[0], f[0])), e = [], "Literal" == g.type ? (l.params && l.params[0] ? e.push(l.params[0]) : e.push(t), k.params[0] = k.params[0], e.push(k)) : k.params && k.params[0] && l.name == k.params[0].name && "PLUS" == k.operator || "MINUS" == k.operator ? (l.params && l.params[0] ? e.push(l.params[0]) : e.push(t), "MINUS" == k.operator && 0 != k.params[2].params[0] && (k.params[2].params[0] = "-" + k.params[2].params[0]), e.push(k.params[2])) : 
        "combine_something" == k.type && k.params && k.params[1] && l.name == k.params[1].name && "PLUS" == k.operator || "MINUS" == k.operator ? (l.params && l.params[0] ? e.push(l.params[0]) : e.push(t), "MINUS" == k.operator && 0 != k.params[3].params[0] && (k.params[3].params[0] = "-" + k.params[3].params[0]), e.push(k.params[3])) : (l.params && l.params[0] ? e.push(l.params[0]) : e.push(t), e.push(k)), a.type = d, a.params = e;
      }
      return a;
    }
  };
  a.AssignmentExpression = function(b) {
    var a = {}, d = {}, e = [], f, g = b.left;
    if (g.type) {
      var h = this[g.type](g);
    }
    a.left = h;
    operator = String(b.operator);
    var k = b.right;
    if (k.type) {
      var l = this[k.type](k);
    }
    a.right = l;
    switch(operator) {
      case "=":
        if (l && l.callee && l.callee.object) {
          var n = l.callee.object.object.name.concat(".").concat(l.callee.object.property.name).concat(".").concat(l.callee.property.name);
        }
        if (g.name) {
          var m = g.name;
        } else {
          g.object && g.object.name && (m = g.object.name.concat(g.property.name));
        }
        if (k.arguments && 0 != k.arguments.length && k.arguments[0].name) {
          var t = k.arguments[0].name;
        } else {
          k.arguments && 0 != k.arguments.length && k.arguments[0].object ? t = k.arguments[0].object.name.concat(k.arguments[0].property.name) : k.left && k.left.name ? t = k.left.name : k.left && k.left.object && (t = k.left.object.name.concat(k.left.property.name));
        }
        if (h && h.property && "__pythonRuntime.ops.subscriptIndex" == h.property.callee) {
          var u = "%1[%2] = %3", g = this.getBlockSyntax(u), x;
        } else {
          u = m && t && m == t ? "%1 += %2" : "%1 = %2", g = this.getBlockSyntax(u);
        }
        g && (x = g.key);
        d.type = x;
        break;
      case "+=":
        u = "%1 += %2";
        if (g = this.getBlockSyntax(u)) {
          x = g.key;
        }
        d.type = x;
        break;
      case "-=":
        u = "%1 += %2";
        if (g = this.getBlockSyntax(u)) {
          x = g.key;
        }
        d.type = x;
        break;
      case "*=":
        u = "%1 += %2";
        if (g = this.getBlockSyntax(u)) {
          x = g.key;
        }
        d.type = x;
        break;
      case "/=":
        u = "%1 += %2";
        if (g = this.getBlockSyntax(u)) {
          x = g.key;
        }
        d.type = x;
        break;
      case "%=":
        var v = operator;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        break;
      case "<<=":
        v = operator;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        break;
      case ">>=":
        v = operator;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        break;
      case "|=":
        v = operator;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        break;
      case "^=":
        v = operator;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        break;
      case "&=":
        v = operator;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        break;
      default:
        v = operator, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    }
    if (operator) {
      var q = Entry.TextCodingUtil.logicalExpressionConvert(operator);
    }
    a.operator = q;
    h && h.property && "__pythonRuntime.ops.subscriptIndex" == h.property.callee ? h.object && h.object.object ? "self" != h.object.object.name && (v = h.object.object.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_OBJECT, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_OBJECT)) : h.object && !Entry.TextCodingUtil.isGlobalListExisted(h.object.name) && (v = h.object.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, 
    Entry.TextCodingError.MESSAGE_CONV_NO_LIST, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)) : h.object && "self" != h.object.name && (q = h.object.name, Entry.TextCodingUtil.isGlobalListExisted(q) || (v = q, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)));
    if ("Identifier" == k.type || "MemberExpression" == k.type) {
      l && l.property && "__pythonRuntime.ops.subscriptIndex" == l.property.callee ? l.object && l.object.object ? "self" != l.object.object.name ? (q = l.object.object.name, Entry.TextCodingUtil.isGlobalListExisted(q) || (v = l.object.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST))) : !l.object.property || Entry.TextCodingUtil.isLocalListExisted(l.object.property.name, 
      this._currentObject) || Entry.TextCodingUtil.isLocalVariableExisted(l.object.property.name, this._currentObject) || (Entry.TextCodingUtil.isLocalListExisted(l.object.property.name, this._currentObject) || (v = l.object.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)), Entry.TextCodingUtil.isLocalVariableExisted(l.object.property.name, this._currentObject) || 
      (v = l.object.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE))) : !l.object || Entry.TextCodingUtil.isGlobalListExisted(l.object.name) || Entry.TextCodingUtil.isGlobalVariableExisted(l.object.name) || (Entry.TextCodingUtil.isGlobalListExisted(l.object.name) || (v = l.object.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, 
      Entry.TextCodingError.MESSAGE_CONV_NO_LIST, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)), Entry.TextCodingUtil.isGlobalVariableExisted(l.object.name) || (v = l.object.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE))) : l.object ? "self" != l.object.name ? (v = l.object.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, 
      Entry.TextCodingError.MESSAGE_CONV_NO_LIST, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)) : !l.property || Entry.TextCodingUtil.isLocalVariableExisted(l.property.name, this._currentObject) || Entry.TextCodingUtil.isLocalListExisted(l.property.name, this._currentObject) || (Entry.TextCodingUtil.isLocalVariableExisted(l.property.name, this._currentObject) || (v = l.object.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, 
      v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE)), Entry.TextCodingUtil.isLocalListExisted(l.property.name, this._currentObject) || (v = l.object.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST))) : (Entry.TextCodingUtil.isGlobalVariableExisted(l.name), Entry.TextCodingUtil.isGlobalVariableExisted(l.name) || (Entry.TextCodingUtil.isGlobalVariableExisted(l.name) || 
      (v = l.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE)), Entry.TextCodingUtil.isGlobalListExisted(l.name) || (v = l.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST))));
    }
    q = Entry.block[x];
    k = q.params;
    x = q.def.params;
    if ("%1[%2] = %3" == u) {
      h && h.params || Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, v, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE), e.push(h.params[1]), h && h.property && (f = h.property.arguments[0], e.push(f), f = h.property.arguments[1], "number" == f.type || "text" == f.type ? e.push(f) : "get_variable" == f.type ? (h = {type:"calc_basic"}, n = [], n[0] = f, n[1] = "PLUS", n[2] = {type:"number", params:[1]}, h.params = 
      n, e.push(h)) : "calc_basic" == f.type ? "MINUS" == f.params[1] && "1" == f.params[2].params[0] ? e.push(f.params[0]) : (h = {type:"calc_basic"}, n = [], n[0] = f, n[1] = "PLUS", n[2] = {type:"number", params:[1]}, h.params = n, e.push(h)) : (h = {type:"calc_basic"}, n = [], n[0] = f, n[1] = "PLUS", n[2] = {type:"number", params:[1]}, h.params = n, e.push(h))), l && e.push(l), 4 == e.length && e.splice(1, 1), d.params = e;
    } else {
      if ("%1 = %2" == u) {
        if (h && h.object && h.property) {
          if ("self" == h.object.name) {
            if ("__pythonRuntime.objects.list" == n) {
              q = h.property.name;
              h = [];
              arguments = l.arguments;
              for (f in arguments) {
                l = arguments[f], n = {}, isNaN(l.params[0]) || (l.params[0] = parseFloat(l.params[0])), n.data = String(l.params[0]), h.push(n);
              }
              Entry.TextCodingUtil.isLocalListExisted(q, this._currentObject) ? this._funcLoop || Entry.TextCodingUtil.updateLocalList(q, h, this._currentObject) : this._funcLoop || Entry.TextCodingUtil.createLocalList(q, h, this._currentObject);
            } else {
              q = h.property.name;
              f = "number" == l.type || "text" == l.type ? l.params[0] : 0;
              isNaN(f) || (f = parseFloat(f));
              if (f || 0 == f) {
                Entry.TextCodingUtil.isLocalVariableExisted(q, this._currentObject) ? this._funcLoop || Entry.TextCodingUtil.updateLocalVariable(q, f, this._currentObject) : this._funcLoop ? Entry.TextCodingUtil.createLocalVariable(q, 0, this._currentObject) : Entry.TextCodingUtil.createLocalVariable(q, f, this._currentObject);
              }
              q = this.ParamDropdownDynamic(q, k[0], x[0]);
              e.push(q);
              e.push(l);
            }
          }
        } else {
          if ("__pythonRuntime.objects.list" == n) {
            q = h.name;
            h = [];
            arguments = l.arguments;
            for (f in arguments) {
              l = arguments[f], n = {}, n.data = String(l.params[0]), h.push(n);
            }
            Entry.TextCodingUtil.isGlobalListExisted(q) ? this._funcLoop || Entry.TextCodingUtil.updateGlobalList(q, h) : this._funcLoop || Entry.TextCodingUtil.createGlobalList(q, h);
          } else {
            q = h.name;
            if ((f = "number" == l.type || "text" == l.type ? l.params[0] : 0) || 0 == f) {
              Entry.TextCodingUtil.isGlobalVariableExisted(q) ? this._funcLoop || Entry.TextCodingUtil.updateGlobalVariable(q, f) : this._funcLoop ? Entry.TextCodingUtil.createGlobalVariable(q, 0) : Entry.TextCodingUtil.createGlobalVariable(q, f);
            }
            q = this.ParamDropdownDynamic(q, k[0], x[0]);
            e.push(q);
            l.callee && delete l.callee;
            e.push(l);
          }
        }
      } else {
        if ("%1 += %2" == u) {
          if (h && h.object && h.property) {
            if ("self" == h.object.name) {
              q = h.property.name;
              if (!Entry.TextCodingUtil.isLocalVariableExisted(q, this._currentObject)) {
                return a;
              }
              q = this.ParamDropdownDynamic(q, k[0], x[0]);
              e.push(q);
              if ("=" == operator) {
                if ("PLUS" == l.operator) {
                  "combine_something" == l.type ? e.push(l.params[3]) : e.push(l.params[2]);
                } else {
                  if ("MINUS" == l.operator) {
                    if ("calc_basic" != l.type || "text" != l.params[2].type && "number" != l.params[2].type) {
                      return d = {type:"set_variable", params:[]}, d.params.push(h.params[0]), d.params.push(l), d;
                    }
                    l.params[2].params[0] = -l.params[2].params[0];
                    e.push(l.params[2]);
                  } else {
                    if ("MULTI" == l.operator || "DIVIDE" == l.operator) {
                      return d = {type:"set_variable", params:[]}, d.params.push(h.params[0]), d.params.push(l), d;
                    }
                    e.push(l);
                  }
                }
              } else {
                if ("+=" == operator) {
                  e.push(l);
                } else {
                  if ("-=" == operator) {
                    if ("text" == l.type || "number" == l.type) {
                      l.params[0] = -l.params[0], e.push(l);
                    } else {
                      return d = {type:"set_variable", params:[]}, d.params.push(h.params[0]), a = {type:"calc_basic", params:[]}, a.params.push(h), a.params.push("MINUS"), a.params.push(l), d.params.push(a), d;
                    }
                  } else {
                    if ("*=" == operator) {
                      return d = {type:"set_variable", params:[]}, d.params.push(h.params[0]), d.params.push(l), d;
                    }
                    if ("/=" == operator) {
                      return d = {type:"set_variable", params:[]}, d.params.push(h.params[0]), a = {type:"calc_basic", params:[]}, a.params.push(h), a.params.push("DIVIDE"), a.params.push(l), d.params.push(a), d;
                    }
                    e.push(l);
                  }
                }
              }
            }
          } else {
            q = h.name;
            if (!Entry.TextCodingUtil.isGlobalVariableExisted(q)) {
              return a;
            }
            q = this.ParamDropdownDynamic(q, k[0], x[0]);
            e.push(q);
            if ("=" == operator) {
              if ("PLUS" == l.operator) {
                "combine_something" == l.type ? e.push(l.params[3]) : e.push(l.params[2]);
              } else {
                if ("MINUS" == l.operator) {
                  if ("calc_basic" != l.type || "text" != l.params[2].type && "number" != l.params[2].type) {
                    return d = {type:"set_variable", params:[]}, d.params.push(h.params[0]), d.params.push(l), d;
                  }
                  l.params[2].params[0] = -l.params[2].params[0];
                  e.push(l.params[2]);
                } else {
                  if ("MULTI" == l.operator || "DIVIDE" == l.operator) {
                    return d = {type:"set_variable", params:[]}, d.params.push(h.params[0]), d.params.push(l), d;
                  }
                  e.push(l);
                }
              }
            } else {
              if ("+=" == operator) {
                e.push(l);
              } else {
                if ("-=" == operator) {
                  if ("text" == l.type || "number" == l.type) {
                    l.params[0] = -l.params[0], e.push(l);
                  } else {
                    return d = {type:"set_variable", params:[]}, d.params.push(h.params[0]), a = {type:"calc_basic", params:[]}, a.params.push(h), a.params.push("MINUS"), a.params.push(l), d.params.push(a), d;
                  }
                } else {
                  if ("*=" == operator) {
                    return d = {type:"set_variable", params:[]}, d.params.push(h.params[0]), d.params.push(l), d;
                  }
                  if ("/=" == operator) {
                    return d = {type:"set_variable", params:[]}, d.params.push(h.params[0]), a = {type:"calc_basic", params:[]}, a.params.push(h), a.params.push("DIVIDE"), a.params.push(l), d.params.push(a), d;
                  }
                  e.push(l);
                }
              }
            }
          }
        }
      }
    }
    d.params = e;
    a.type = d.type;
    a.params = d.params;
    return a;
  };
  a.Literal = function(b, a, d, e) {
    var c, g = b.value;
    g && isNaN(g) && (g = g.replace(/\t/gm, "    "));
    a || (a = {type:"Block"}, d || (d = "number" == typeof g ? {type:"number"} : {type:"text"}));
    if ("Indicator" == a.type) {
      return null;
    }
    if ("Text" == a.type) {
      return "";
    }
    1 == g || 0 == g || g ? c = a = this["Param" + a.type](g, a, d, e) : b.left && b.operator && b.right && (a = [], d = this[b.left.type](b.left), a.push(d), a.push(b.operator), b = this[b.right.type](b.right), a.push(b), c = a);
    return c;
  };
  a.ParamBlock = function(b, a, d) {
    a = {};
    var c = b, f = [];
    if (!0 === b) {
      return a.type = "True", a;
    }
    if (!1 === b) {
      return a.type = "False", a;
    }
    paramDefMetaType = d ? d.type : "text";
    var g = Entry.block[paramDefMetaType];
    d = g.params;
    var h = g.def.params, g = this.searchSyntax(g).textParams;
    if (d && 0 != d.length) {
      for (var k in d) {
        c = g && g[k] ? this["Param" + d[k].type](b, d[k], h[k], g[k]) : this["Param" + d[k].type](b, d[k], h[k]);
      }
    } else {
      c = b;
    }
    f.push(c);
    a.type = paramDefMetaType;
    a.params = f;
    return a;
  };
  a.ParamAngle = function(b, a, d) {
    return /None/.test(b) ? "None" : b;
  };
  a.ParamTextInput = function(b, a, d) {
    return /None/.test(b) ? "None" : b;
  };
  a.ParamColor = function(b, a, d, e) {
    var c;
    if (/None/.test(b)) {
      return "None";
    }
    e && e.codeMap && (a = eval(e.codeMap), b = b.toLowerCase(), c = a[b]);
    c || (c = b);
    return c;
  };
  a.ParamDropdown = function(b, a, d, e) {
    if (/None/.test(b)) {
      return "None";
    }
    a = a.options;
    for (var c in a) {
      if (d = a[c], b == d[1]) {
        b = d[1];
        break;
      }
    }
    if (!isNaN(b)) {
      return b;
    }
    if (e && e.codeMap) {
      if ((c = e.codeMap) && eval(c)) {
        isNaN(b) && (b = b.toLowerCase());
        var g = eval(c)[b];
      }
      g && (b = g);
    }
    e && "operator" == e.paramType && (b = b.toUpperCase());
    return b;
  };
  a.ParamDropdownDynamic = function(b, a, d, e, f) {
    e && (b = Entry.TextCodingUtil.getDynamicIdByNumber(b, e, this._currentObject));
    b && isNaN(b) && 2 < b.split(".").length && "self" == b.split(".")[0] && (b = b.split(".")[1], f = this._currentObject);
    b = Entry.TextCodingUtil.dropdownDynamicNameToIdConvertor(b, a.menuName, f);
    e && e.codeMap && ((a = e.codeMap) && eval(a) && isNaN(b) && (b = b.toLowerCase()), (a = eval(a)[b]) && (b = a));
    return b;
  };
  a.ParamKeyboard = function(b, a, d) {
    a = b;
    if (/None/.test(b)) {
      return "None";
    }
    (b = isNaN(b) ? Entry.KeyboardCode.map[b.toLowerCase()] : Entry.KeyboardCode.map[b]) && (a = b.toString());
    return a;
  };
  a.Indicator = function(b, a, d) {
  };
  a.MemberExpression = function(b) {
    var a = {}, d;
    d = b.object;
    var e = b.property, f = this[d.type](d);
    a.object = f;
    var g = this[e.type](e);
    a.property = g;
    if ("call" != g.name || 0 != g.userCode) {
      if ("__pythonRuntime.ops.subscriptIndex" == g.callee) {
        if (f.object) {
          if ("self" == f.object.name) {
            var h = f.property.name;
            if (!f.type || "number" != f.type && "text" != f.type && "value_of_index_from_list" != f.type) {
              if (Entry.TextCodingUtil.isLocalListExisted(h, this._currentObject) && (k = "%2[%4]"), Entry.TextCodingUtil.isLocalVariableExisted(h, this._currentObject) && (k = "%2[%4]#char_at"), this.isFuncParam(h) && (k = "%2[%4]#char_at"), !Entry.TextCodingUtil.isLocalListExisted(h, this._currentObject) && !Entry.TextCodingUtil.isLocalVariableExisted(h, this._currentObject) && !this.isFuncParam(h)) {
                return a;
              }
            } else {
              var k = "%2[%4]#char_at";
            }
          } else {
            if (h = f.object.name, !f.type || "number" != f.type && "text" != f.type && "get_canvas_input_value" != f.type && "value_of_index_from_list" != f.type) {
              if (Entry.TextCodingUtil.isGlobalListExisted(h) && (k = "%2[%4]"), Entry.TextCodingUtil.isGlobalVariableExisted(h) && (k = "%2[%4]#char_at"), this.isFuncParam(h) && (k = "%2[%4]#char_at"), !Entry.TextCodingUtil.isGlobalListExisted(h) && !Entry.TextCodingUtil.isGlobalVariableExisted(h) && !this.isFuncParam(h)) {
                return a.type = g.type, a.params = g.params, a;
              }
            } else {
              k = "%2[%4]#char_at";
            }
          }
        } else {
          if (h = f.name, !f.type || "number" != f.type && "text" != f.type && "get_canvas_input_value" != f.type && "value_of_index_from_list" != f.type) {
            if (Entry.TextCodingUtil.isGlobalListExisted(h) && (k = "%2[%4]"), Entry.TextCodingUtil.isGlobalVariableExisted(h) && (k = "%2[%4]#char_at"), this.isFuncParam(h) && (k = "%2[%4]#char_at"), !Entry.TextCodingUtil.isGlobalListExisted(h) && !Entry.TextCodingUtil.isGlobalVariableExisted(h) && !this.isFuncParam(h)) {
              return a.type = g.type, a.params = g.params, a;
            }
          } else {
            k = "%2[%4]#char_at";
          }
        }
        if (!k) {
          return;
        }
        arguments = g.arguments;
        d = this.getBlockSyntax(k);
        var l;
        d && (l = d.key);
        d = l;
        var n = Entry.block[l];
        l = n.params;
        n = n.def.params;
        g = f.object && "self" == f.object.name ? this.ParamDropdownDynamic(h, l[1], n[1], null, this._currentObject) : this.ParamDropdownDynamic(h, l[1], n[1]);
        e = [];
        "%2[%4]" == k ? e[1] = g : "%2[%4]#char_at" == k && (e[1] = f.object && "self" == f.object.name ? f.property : f);
        arguments && arguments[1] && (arguments[1].type ? "number" == arguments[1].type || "text" == arguments[1].type ? e[3] = arguments[1] : "get_variable" == arguments[1].type ? (k = {type:"calc_basic"}, f = [], f[0] = arguments[1], f[1] = "PLUS", f[2] = {type:"number", params:[1]}, k.params = f, e[3] = k) : "calc_basic" == arguments[1].type ? arguments[1].params && "MINUS" == arguments[1].params[1] && arguments[1].params[2] && arguments[1].params[2].params && "1" == arguments[1].params[2].params[0] ? 
        e[3] = arguments[1].params[0] : (k = {type:"calc_basic"}, f = [], f[0] = arguments[1], f[1] = "PLUS", f[2] = {type:"number", params:[1]}, k.params = f, e[3] = k) : (k = {type:"calc_basic"}, f = [], f[0] = arguments[1], f[1] = "PLUS", f[2] = {type:"number", params:[1]}, k.params = f, e[3] = k) : this.isFuncParam(arguments[1].name) ? (k = {type:"calc_basic"}, f = [], f[0] = arguments[1], f[1] = "PLUS", f[2] = {type:"number", params:[1]}, k.params = f, e[3] = k) : Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, 
        Entry.TextCodingError.MESSAGE_CONV_DEFAULT, void 0, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_DEFAULT));
        a.type = d;
        a.params = e;
      } else {
        if (e = [], "self" == f.name) {
          if (d = this.getBlockSyntax("%1#get_variable")) {
            l = d.key;
          }
          d = l;
          n = Entry.block[l];
          l = n.params;
          n = n.def.params;
          h = g.name;
          if (!Entry.TextCodingUtil.isLocalVariableExisted(h, this._currentObject)) {
            return a;
          }
          k = this.ParamDropdownDynamic(h, l[0], n[0], null, this._currentObject);
          e.push(k);
          a.type = d;
          0 != e.length && (a.params = e, a.variableType = "local");
        }
      }
    }
    return a;
  };
  a.WhileStatement = function(b) {
    this._blockCount++;
    var a = {statements:[]}, d = b.test;
    if (d.type) {
      if ("Literal" == d.type) {
        if (!0 === d.value) {
          var e = this.getBlockSyntax("while True:\n$1"), f;
          e && (f = e.key);
        } else {
          var g = d.value;
          Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        }
      } else {
        if ("Identifier" == d.type) {
          if (e = this.getBlockSyntax("while %1 %2\n$1")) {
            f = e.key;
          }
          this.isFuncParam(d.name) || (g = d.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL));
        } else {
          if (e = this.getBlockSyntax("while %1 %2:\n$1")) {
            f = e.key;
          }
        }
      }
    }
    f || Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    e = [];
    if ("Literal" == d.type) {
      arguments = [];
      arguments.push(d);
      var d = Entry.block[f].params, g = Entry.block[f].def.params, h;
      for (h in d) {
        var k = d[h].type;
        "Indicator" == k ? (k = {raw:null, type:"Literal", value:null}, h < arguments.length && arguments.splice(h, 0, k)) : "Text" == k && (k = {raw:"", type:"Literal", value:""}, h < arguments.length && arguments.splice(h, 0, k));
      }
      for (var l in arguments) {
        h = arguments[l], (h = this[h.type](h, d[l], g[l], !0)) && null != h && e.push(h);
      }
    } else {
      (h = this[d.type](d)) && null != h && ("UnaryExpression" == d.type && "!" == d.operator ? "boolean_not" == h.type && (h = h.params[1], e.push(h), e.push("until")) : (e.push(h), e.push("while")));
    }
    l = b.body;
    l = this[l.type](l);
    a.type = f;
    a.statements.push(l.data);
    a.params = e;
    return a;
  };
  a.BlockStatement = function(b) {
    var a = {statements:[], data:[]}, d = [], e = [], f = [];
    b = b.body;
    b[1] && b[1].consequent && b[1].consequent.body && b[1].consequent.body[0] && "ForStatement" == b[1].consequent.body[0].type && this._blockCount++;
    for (var g in b) {
      var h = b[g];
      (h = this[h.type](h)) && null == h || f.push(h);
    }
    a.data = f;
    for (var k in f) {
      if (f[1] && "repeat_basic" == f[1].type) {
        if (0 == k && f[k]) {
          if (f[k].declarations) {
            b = f[0].declarations;
            for (k in b) {
              h = b[k], (h = h.init) && d.push(h);
            }
            a.params = d;
          }
        } else {
          if (1 == k) {
            a.type = f[k].type;
            e = [];
            if ((b = f[k].statements[0]) && 0 != b.length) {
              for (g in b) {
                if (h = b[g]) {
                  if (h.type) {
                    Entry.TextCodingUtil.isJudgementBlock(h.type) || Entry.TextCodingUtil.isCalculationBlock(h.type) || Entry.TextCodingUtil.isMaterialBlock(h.type) || e.push(h);
                  } else {
                    if (h.callee) {
                      var l = h.callee.name;
                    }
                    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, l, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
                  }
                }
              }
            }
            a.statements.push(e);
          }
        }
      } else {
        if (f) {
          if (0 == k) {
            if (f[k] && f[k].declarations) {
              for (k in b = f[k].declarations, b) {
                h = b[k], (h = h.init) && d.push(h);
              }
            } else {
              if ((h = f[k]) && h.type) {
                if (Entry.TextCodingUtil.isJudgementBlock(h.type)) {
                  continue;
                } else {
                  if (Entry.TextCodingUtil.isCalculationBlock(h.type)) {
                    continue;
                  } else {
                    if (Entry.TextCodingUtil.isMaterialBlock(h.type)) {
                      continue;
                    }
                  }
                }
                e.push(h);
              }
            }
          } else {
            if (e = [], (b = f) && 0 != b.length) {
              for (g in b) {
                (h = b[g]) && h.type && !Entry.TextCodingUtil.isJudgementBlock(h.type) && (Entry.TextCodingUtil.isCalculationBlock(h.type) || Entry.TextCodingUtil.isMaterialBlock(h.type) || e.push(h));
              }
            }
          }
          a.params = d;
          a.statements = e;
        }
      }
    }
    return a;
  };
  a.IfStatement = function(b) {
    var a = {statements:[]}, d, e = [], f = b.consequent, g = b.alternate, h = b.test;
    "instanceof" !== h.operator && this._blockCount++;
    d = null != g ? "if_else" : "_if";
    a.type = d;
    if ("Literal" == h.type || "Identifier" == h.type) {
      arguments = [];
      arguments.push(h);
      var k = Entry.block[d].params;
      d = Entry.block[d].def.params;
      for (var l in k) {
        var n = k[l].type;
        "Indicator" == n ? (n = {raw:null, type:"Literal", value:null}, l < arguments.length && arguments.splice(l, 0, n)) : "Text" == n && (n = {raw:"", type:"Literal", value:""}, l < arguments.length && arguments.splice(l, 0, n));
      }
      for (var m in arguments) {
        l = arguments[m], (l = this[l.type](l, k[m], d[m], !0)) && null != l && (e.push(l), l.type || this.isFuncParam(l.name) || Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, l.name, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL));
      }
    } else {
      (l = this[h.type](h)) && null != l && e.push(l);
    }
    e && 0 != e.length && (a.params = e);
    if (null != f) {
      e = [];
      f = this[f.type](f).data;
      for (m in f) {
        if (k = f[m]) {
          k.init && k.type ? (a.type = k.type, (k = k.statements) && (e = k)) : !k.init && k.type && e.push(k);
        }
      }
      0 != e.length && (a.statements[0] = e);
    }
    if (null != g) {
      "instanceof" !== h.operator && this._blockCount++;
      h = [];
      g = this[g.type](g).data;
      for (m in g) {
        (f = g[m]) && f.type && h.push(f);
      }
      0 != h.length && (a.statements[1] = h);
    }
    return a;
  };
  a.ForStatement = function(b) {
    var a = {statements:[]}, d = this.getBlockSyntax("for i in range"), e;
    d && (e = d.key);
    a.type = e;
    if (d = b.init) {
      var f = this[d.type](d);
    }
    a.init = f;
    if (f = b.body.body) {
      for (var g in f) {
        0 != g && (d = f[g], d = this[d.type](d), a.statements.push(d));
      }
    }
    if (g = b.test) {
      var h = this[g.type](g);
    }
    a.test = h;
    if (b = b.update) {
      var k = this[b.type](b);
    }
    a.update = k;
    return a;
  };
  a.ForInStatement = function(b) {
    return null;
  };
  a.BreakStatement = function(b) {
    this._blockCount++;
    b = {};
    var a = this.getBlockSyntax("break"), d;
    a && (d = a.key);
    b.type = d;
    return b;
  };
  a.UnaryExpression = function(b) {
    var a, d, e = {};
    if (b.prefix) {
      var f = b.operator, g = b.argument;
      switch(f) {
        case "-":
          break;
        case "+":
          break;
        case "!":
          d = "boolean_not";
          break;
        case "~":
          Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, f, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
          break;
        case "typeof":
          Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, f, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
          break;
        case "void":
          Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, f, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
          break;
        case "delete":
          Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, f, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
          break;
        default:
          Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, f, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
      }
      var h = [];
      if ("+" == f || "-" == f) {
        0 <= g.value && (g.value = f + g.value), d = this[g.type](g), e.data = d, e.params = d, a = e.params;
      } else {
        if ("!" == f) {
          if ("Literal" == g.type || "Identifier" == g.type) {
            arguments = [];
            arguments.push(g);
            a = Entry.block[d].params;
            var f = Entry.block[d].def.params, k;
            for (k in a) {
              g = a[k].type, "Indicator" == g ? (g = {raw:null, type:"Literal", value:null}, k < arguments.length && arguments.splice(k, 0, g)) : "Text" == g && (g = {raw:"", type:"Literal", value:""}, k < arguments.length && arguments.splice(k, 0, g));
            }
            for (var l in arguments) {
              g = arguments[l], (k = this[g.type](g, a[l], f[l], !0)) && null != k && (h.push(k), h.splice(0, 0, ""), h.splice(2, 0, ""));
            }
          } else {
            if (k = this[g.type](g)) {
              h.push(k), h.splice(0, 0, ""), h.splice(2, 0, "");
            }
          }
          e.type = d;
          e.params = h;
          a = e;
        }
      }
    }
    return a;
  };
  a.LogicalExpression = function(b) {
    var a = {}, d = String(b.operator);
    switch(d) {
      case "&&":
        var e = "(%1 and %3)";
        break;
      case "||":
        e = "(%1 or %3)";
        break;
      default:
        e = "(%1 and %3)";
    }
    var e = this.getBlockSyntax(e), f;
    e && (f = e.key);
    e = [];
    d = b.left;
    if ("Literal" == d.type || "Identifier" == d.type) {
      arguments = [];
      arguments.push(d);
      var d = Entry.block[f].params, g = Entry.block[f].def.params, h;
      for (h in d) {
        var k = d[h].type;
        "Indicator" == k ? (k = {raw:null, type:"Literal", value:null}, h < arguments.length && arguments.splice(h, 0, k)) : "Text" == k && (k = {raw:"", type:"Literal", value:""}, h < arguments.length && arguments.splice(h, 0, k));
      }
      for (var l in arguments) {
        var n = arguments[l];
        (n = this[n.type](n, d[l], g[l], !0)) && null != n && e.push(n);
      }
    } else {
      (n = this[d.type](d)) && e.push(n);
    }
    n.type || !n.name || this.isFuncParam(n.name) || (d = n.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, d, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL));
    if (d = String(b.operator)) {
      n = d = Entry.TextCodingUtil.logicalExpressionConvert(d), e.push(n);
    }
    d = b.right;
    if ("Literal" == d.type || "Identifier" == d.type) {
      arguments = [];
      arguments.push(d);
      d = Entry.block[f].params;
      g = Entry.block[f].def.params;
      for (h in d) {
        k = d[h].type, "Indicator" == k ? (k = {raw:null, type:"Literal", value:null}, h < arguments.length && arguments.splice(h, 0, k)) : "Text" == k && (k = {raw:"", type:"Literal", value:""}, h < arguments.length && arguments.splice(h, 0, k));
      }
      for (l in arguments) {
        n = arguments[l], (n = this[n.type](n, d[l], g[l], !0)) && null != n && e.push(n);
      }
    } else {
      (n = this[d.type](d)) && e.push(n);
    }
    !n.type && n.name && (d = n.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, d, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL));
    a.type = f;
    a.params = e;
    return a;
  };
  a.BinaryExpression = function(b) {
    var a = {}, d = {}, e = String(b.operator);
    switch(e) {
      case "==":
        var f = "(%1 %2 %3)#boolean_basic_operator";
        break;
      case "!=":
        f = "not (%2)";
        break;
      case "===":
        f = "(%1 %2 %3)#boolean_basic_operator";
        break;
      case "!==":
        var g = e;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        break;
      case "<":
        f = "(%1 %2 %3)#boolean_basic_operator";
        break;
      case "<=":
        f = "(%1 %2 %3)#boolean_basic_operator";
        break;
      case ">":
        f = "(%1 %2 %3)#boolean_basic_operator";
        break;
      case ">=":
        f = "(%1 %2 %3)#boolean_basic_operator";
        break;
      case "<<":
        g = e;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        break;
      case ">>":
        g = e;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        break;
      case ">>>":
        g = e;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        break;
      case "+":
        f = "(%1 %2 %3)#calc_basic";
        break;
      case "-":
        f = "(%1 %2 %3)#calc_basic";
        break;
      case "*":
        f = "(%1 %2 %3)#calc_basic";
        break;
      case "/":
        f = "(%1 %2 %3)#calc_basic";
        break;
      case "%":
        f = "(%2 % %4)";
        break;
      case "|":
        g = e;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        break;
      case "^":
        g = e;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        break;
      case "|":
        g = e;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        break;
      case "&":
        g = e;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        break;
      case "in":
        g = e;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
        break;
      case "instanceof":
        break;
      default:
        g = e, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    }
    var h = this.getBlockSyntax(f), k;
    h && (k = h.key);
    if (k) {
      a = [];
      e = b.left;
      if ("Literal" == e.type || "Identifier" == e.type) {
        arguments = [];
        arguments.push(e);
        var e = Entry.block[k].params, l = Entry.block[k].def.params, n;
        for (n in e) {
          var m = e[n].type;
          "Indicator" == m ? (m = {raw:null, type:"Literal", value:null}, n < arguments.length && arguments.splice(n, 0, m)) : "Text" == m && (m = {raw:"", type:"Literal", value:""}, n < arguments.length && arguments.splice(n, 0, m));
        }
        for (var t in arguments) {
          m = arguments[t], (m = this[m.type](m, e[t], l[t], !0)) && "object" == typeof m && m.name && 0 > m.name.indexOf("__filbert") && !this.isFuncParam(m.name) && !Entry.TextCodingUtil.isGlobalVariableExisted(m.name) && (g = m.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE)), m && a.push(m);
        }
      } else {
        "MemberExpression" == e.type ? (m = this[e.type](e)) && m.type ? a.push(m) : m && m.object && m.property && ("__pythonRuntime.ops.subscriptIndex" == m.property.callee ? m.object && m.object.object ? "self" != m.object.object.name ? (g = m.object.object.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)) : m.object.property && !Entry.TextCodingUtil.isLocalListExisted(m.object.property.name, 
        this._currentObject) && (g = m.object.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)) : m.object && !Entry.TextCodingUtil.isGlobalListExisted(m.object.name) && "get_canvas_input_value" != m.object.type && (g = m.object.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, g, this._blockCount, 
        Entry.TextCodingError.SUBJECT_CONV_LIST)) : m.object && m.object.name && 0 > m.object.name.indexOf("__filbert") && ("self" != m.object.name ? (g = m.object.name + "." + m.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_OBJECT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_OBJECT)) : m.property && !Entry.TextCodingUtil.isLocalVariableExisted(m.property.name, this._currentObject) && (g = m.object.name + "." + 
        m.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE))), m.object.name && 0 > m.object.name.indexOf("__filbert") && (e = {type:"text"}, l = [], l.push(m.object.name + "." + m.property.name), e.params = l, a.push(e))) : (m = this[e.type](e)) ? a.push(m) : Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_DEFAULT, 
        g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_DEFAULT);
      }
      if ("boolean_not" == k) {
        return a.splice(0, 0, ""), a.splice(2, 0, ""), d.type = k, d.params = a, d;
      }
      if (e = String(b.operator)) {
        "%" != e && (h = h.textParams[1], (m = h.converter ? h.converter(null, e) : e) && a.push(m)), d.operator = e;
      }
      h = b.right;
      if ("Literal" == h.type || "Identifier" == h.type) {
        arguments = [];
        arguments.push(h);
        e = Entry.block[k].params;
        l = Entry.block[k].def.params;
        for (n in e) {
          m = e[n].type, "Indicator" == m ? (m = {raw:null, type:"Literal", value:null}, n < arguments.length && arguments.splice(n, 0, m)) : "Text" == m && (m = {raw:"", type:"Literal", value:""}, n < arguments.length && arguments.splice(n, 0, m));
        }
        for (t in arguments) {
          m = arguments[t], (m = this[m.type](m, e[t], l[t], !0)) && "object" == typeof m && (m.name && 0 > m.name.indexOf("__filbert") && !m.type && m.isCallParam && !this.isFuncParam(m.name) && !Entry.TextCodingUtil.isGlobalVariableExisted(m.name) && (g = m.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE)), a.push(m));
        }
      } else {
        "MemberExpression" == h.type ? (m = this[h.type](h)) && m.type ? a.push(m) : m.object && m.property && ("__pythonRuntime.ops.subscriptIndex" == m.property.callee ? m.object.object ? "self" != m.object.object.name ? (g = m.object.object.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_OBJECT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_OBJECT)) : m.object.property && !Entry.TextCodingUtil.isLocalListExisted(m.object.property.name, 
        this._currentObject) && (g = m.object.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)) : m.object.name && !Entry.TextCodingUtil.isGlobalListExisted(m.object.name) && (g = m.object.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_LIST, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_LIST)) : 
        m.object && 0 > m.object.name.indexOf("__filbert") && ("self" != m.object.name ? (g = m.object.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_OBJECT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_OBJECT)) : m.property && !Entry.TextCodingUtil.isLocalVariableExisted(m.property.name, this._currentObject) && (g = m.object.name + "." + m.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, 
        Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE))), 0 > m.object.name.indexOf("__filbert") && (e = {type:"text"}, l = [], l.push(m.object.name + "." + m.property.name), e.params = l, a.push(e))) : (m = this[h.type](h)) ? a.push(m) : Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, g, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
      }
      "(%2 % %4)" == f && (tempParams = [], tempParams[1] = a[0], tempParams[3] = a[1], tempParams[5] = "MOD", a = tempParams);
      d.type = k;
      d.params = a;
    } else {
      return a;
    }
    return d;
  };
  a.UpdateExpression = function(b) {
    var a = {}, d = b.argument;
    if (d) {
      var e = this[d.type](d);
    }
    a.argument = e;
    a.operator = b.operator;
    a.prefix = b.prefix;
    return a;
  };
  a.FunctionDeclaration = function(b) {
    var a = {}, d = b.body, e = b.id;
    if (-1 != e.name.search("__getParam")) {
      return a;
    }
    this._funcLoop = !0;
    this._blockCount++;
    if ("Identifier" == e.type) {
      var f = this[e.type](e);
    }
    f && Entry.TextCodingUtil.isEntryEventFuncName(f.name) && this._rootFuncKey && Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_ENTRY_EVENT_FUNCTION, "def " + f.name, this._blockCount, Entry.TextCodingError.SUBJECT_CONV_FUNCTION);
    b = [];
    var a = [], f = f.name, g = d.body && 1 != d.body.length ? d.body.length - 5 : 0;
    if (g || 0 == g) {
      this._currentFuncKey = f + g, this._rootFuncKey || (this._rootFuncKey = this._currentFuncKey);
    }
    var d = this[d.type](d).data, h;
    for (h in d) {
      d[h].declarations && (g = d[h].declarations, 0 < g.length && b.push(g[0].name));
    }
    for (h in d) {
      if (d[h].argument && (g = d[h].argument.statements) && 0 < g.length) {
        var a = [], k;
        for (k in g) {
          var l = g[k];
          l && a.push(l);
        }
      }
    }
    if (Entry.TextCodingUtil.isEntryEventFuncName(e.name)) {
      if (0 != b.length) {
        var n = b[0], n = n.replace(/_space_/g, " "), n = n.replace(/num/g, "");
        "none" == n && (n = "None");
        var m = n;
      }
      b = Entry.TextCodingUtil.makeExpressionStatementForEntryEvent(e.name, m);
      n = this.ExpressionStatement(b);
      n.contents = [];
      for (var t in a) {
        var u = a[t];
        k = {};
        k.type = u.type;
        u.params && (k.params = u.params);
        u.statements && (k.statements = u.statements);
        u.contents && (k.contents = u.contents);
        n.contents.push(k);
      }
      return n;
    }
    var x, v;
    t = {};
    var d = Entry.variableContainer.functions_, q;
    for (q in d) {
      h = d[q];
      Entry.TextCodingUtil.initQueue();
      Entry.TextCodingUtil.gatherFuncDefParam(h.content._data[0]._data[0].data.params[0]);
      g = [];
      e = {};
      for (t = {};m = Entry.TextCodingUtil._funcParamQ.dequeue();) {
        g.push(m);
      }
      for (var z in g) {
        m = g[z], e[m] = z, t[b[z]] = m;
      }
      for (m = [];nameToken = Entry.TextCodingUtil._funcNameQ.dequeue();) {
        m.push(nameToken);
      }
      Entry.TextCodingUtil.clearQueue();
      blockFuncName = m.join("__").trim();
      if (f == blockFuncName) {
        if (b.length == Object.keys(e).length) {
          x = !0;
          m = h.content._data[0]._data;
          v = [];
          for (h = 1;h < m.length;h++) {
            v.push(m[h]);
          }
          v = Entry.TextCodingUtil.isFuncContentsMatch(v, a, e, t, this._currentFuncKey);
        } else {
          v = x = !1;
        }
        if (x && v) {
          u = q;
          break;
        } else {
          if (x && !v) {
            u = q;
            break;
          }
        }
      }
    }
    if (!x || !v) {
      if (x && !v) {
        b = Entry.variableContainer.functions_[u];
        q = b.content._data[0];
        q._data.splice(1, q._data.length - 1);
        for (k in a) {
          z = a[k], Entry.TextCodingUtil.makeFuncParamBlock(z, t, this._blockCount), z = new Entry.Block(z, q), q._data.push(z);
        }
        Entry.variableContainer.saveFunction(b);
      } else {
        x = new Entry.Func;
        x.generateBlock(!0);
        u = x.id;
        z = [];
        for (h = 1;h <= b.length + 1;h++) {
          z.push("%" + h);
        }
        x.block.template = f + " " + z.join(" ");
        q = x.content._data[0];
        z = q._data[0].data.params[0];
        h = z.data.params;
        x.description = "";
        v = f.split("!@#$");
        if (1 < v.length) {
          for (e = 1;e < v.length;e++) {
            d = v[e], g = new Entry.Block({type:"function_field_label"}, q), g.data.params = [], g.data.params.push(d), m = Entry.TextCodingUtil.getLastParam(z), m.data.params[1] = g, x.description += d.concat(" ");
          }
          x.description += " ";
        } else {
          h[0] = f, x.description = f + " ";
        }
        Entry.TextCodingUtil.initQueue();
        if (0 < b.length) {
          for (v = new Entry.Block({type:"function_field_string"}, q), v.data.params = [], e = Entry.Func.requestParamBlock("string"), m = new Entry.Block({type:e}, q), v.data.params.push(m), m = Entry.TextCodingUtil.getLastParam(z), m.data.params[1] = v, x.paramMap[e] = Number(0), t = {}, t[b[0]] = e, z = 1;z < b.length;z++) {
            v = new Entry.Block({type:"function_field_string"}, q), v.data.params = [], e = Entry.Func.requestParamBlock("string"), m = new Entry.Block({type:e}, q), v.data.params.push(m), d = Entry.TextCodingUtil.searchFuncDefParam(h[1]), 0 == d.data.params.length ? d.data.params[0] = m : 1 == d.data.params.length && (d.data.params[1] = v), x.paramMap[e] = Number(z), t[b[z]] = e;
          }
        }
        for (k in a) {
          z = a[k], Entry.TextCodingUtil.makeFuncParamBlock(z, t, this._blockCount), z = new Entry.Block(z, q), q._data.push(z);
        }
        Entry.Func.generateWsBlock(x);
        Entry.variableContainer.saveFunction(x);
      }
      Entry.variableContainer.updateList();
    }
    a = f;
    k = "func".concat("_").concat(u);
    this._funcMap.put(a, k);
    if (u = Entry.variableContainer.functions_[u]) {
      if (u = u.content._data[0]._data, this._hasReculsiveFunc && u) {
        for (n in u) {
          this.convertReculsiveFuncType(u[n]);
        }
      }
    }
    this._rootFuncKey = this._hasReculsiveFunc = this._funcLoop = !1;
    return null;
  };
  a.FunctionExpression = function(b) {
    var a = {};
    b = b.body;
    b = this[b.type](b);
    a.statements = b.data && 0 != b.data.length ? b.data : b.statements;
    return a;
  };
  a.ReturnStatement = function(b) {
    var a = {};
    if (b = b.argument) {
      var d = this[b.type](b);
    }
    d && (a.argument = d);
    return a;
  };
  a.ThisExpression = function(b) {
    var a = {};
    if (b = b.userCode) {
      a.userCode = b;
    }
    return a;
  };
  a.NewExpression = function(b) {
    var a = {}, d = b.callee, d = this[d.type](d), arguments = b.arguments, e = [], f;
    for (f in arguments) {
      var g = arguments[f], g = this[g.type](g);
      e.push(g);
    }
    a.callee = d;
    a.arguments = e;
    return a;
  };
  a.codeInit = function() {
    this.threadInit();
    this._currentObject = Entry.getMainWS().vimBoard._currentObject;
    this._funcMap.clear();
    this._code = [];
    this._blockCount = this._threadCount = 0;
  };
  a.threadInit = function() {
    this._thread = [];
    this._funcParams = [];
    this._rootFuncKey = this._isEntryEventExisted = this._hasReculsiveFunc = this.isLastBlock = this._funcLoop = !1;
  };
  a.isFuncParam = function(b) {
    var a = !1;
    if (0 == this._funcParams.length) {
      return !1;
    }
    for (var d in this._funcParams) {
      if (this._funcParams[d] == b) {
        a = !0;
        break;
      }
    }
    return a;
  };
  a.convertReculsiveFuncType = function(b) {
    if (b && (b && b.data && (funcType = this._funcMap.get(b.data.type)) && (b.data.type = funcType), b && b.data && b.data.statements)) {
      if (b.data.statements[0]) {
        var a = b.data.statements[0]._data, d;
        for (d in a) {
          var e = a[d];
          this.convertReculsiveFuncType(e);
        }
      }
      if (b.data.statements[1]) {
        for (d in b = b.data.statements[1]._data, b) {
          e = b[d], this.convertReculsiveFuncType(e);
        }
      }
    }
  };
  a.convertReculsiveFuncTypeGeneral = function(b, a) {
    for (var c in b) {
      var e = b[c];
      e.type == this._currentFuncKey && (e.type = a);
      if (e.statements) {
        for (var f in e.statements) {
          this.convertReculsiveFuncTypeGeneral(e.statements[f], a);
        }
      }
    }
  };
  a.getBlockSyntax = function(b) {
    if (!b) {
      return null;
    }
    b = b.split(".");
    var a = [];
    a.push(b.shift());
    b = b.join(".");
    "" != b && a.push(b);
    b = a;
    for (a = this.blockSyntax;b.length;) {
      var d = b.shift(), a = a[d];
      if (!a) {
        return null;
      }
    }
    return a ? a : null;
  };
  a.getParamIndex = function(b) {
    var a = {}, d = /(%.)/mi;
    b = this.getBlockSyntax(b).syntax.split(d);
    var e = 0, f;
    for (f in b) {
      var g = b[f];
      d.test(g) && (g = g.split("%")[1], a[e++] = Number(g) - 1);
    }
    return a;
  };
  a.extractContents = function(b, a) {
    var c = this.searchSyntax(Entry.block[b.type]);
    if (c) {
      var e = c.blockType;
    }
    if ("param" != e) {
      if ("event" == e) {
        this._isEntryEventExisted = !0;
      } else {
        if ("last" == e) {
          this.isLastBlock = !0;
        } else {
          if ("variable" == e && !this._isEntryEventExisted) {
            return;
          }
        }
      }
      a.push(b);
      if (b.contents) {
        for (var f in b.contents) {
          b = b.contents[f], this.extractContents(b, a);
        }
      }
      if (b.statements && b.statements[0]) {
        for (var g in b.statements[0]) {
          if (a = b.statements[0][g], a.contents) {
            for (var h in a.contents) {
              this.extractContents(a.contents[h], b.statements[0]);
            }
          }
        }
      }
    }
  };
  a.RegExp = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "RegExp", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.Function = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "Function", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.EmptyStatement = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "EmptyStatement", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.DebuggerStatement = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "DebuggerStatement", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.WithStatement = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "WithStatement", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.LabeledStatement = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "LabeledStatement", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.ContinueStatement = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "ContinueStatement", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.SwitchStatement = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "SwitchStatement", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.SwitchCase = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "SwitchCase", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.ThrowStatement = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "ThrowStatement", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.TryStatement = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "TryStatement", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.CatchClause = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "CatchClause", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.DoWhileStatement = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "DoWhileStatement", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.ArrayExpression = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "ArrayExpression", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.ObjectExpression = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "ObjectExpression", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.Property = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "Property", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.ConditionalExpression = function(b) {
    return b;
  };
  a.SequenceExpression = function(b) {
    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_SUPPORT, "SequenceExpression", this._blockCount, Entry.TextCodingError.SUBJECT_CONV_GENERAL);
    return b;
  };
  a.searchSyntax = function(b) {
    var a;
    b instanceof Entry.BlockView ? (a = b.block._schema, applliedParams = b.block.data.params) : b instanceof Entry.Block ? (a = b._schema, applliedParams = b.params) : a = b;
    if (a && a.syntax) {
      for (b = a.syntax.py.concat();b.length;) {
        a = !1;
        var d = b.shift();
        if ("string" === typeof d) {
          return {syntax:d, template:d};
        }
        if (d.params) {
          for (var e = 0;e < d.params.length;e++) {
            if (d.params[e] && d.params[e] !== applliedParams[e]) {
              a = !0;
              break;
            }
          }
        }
        d.template || (d.template = d.syntax);
        if (!a) {
          return d;
        }
      }
    }
    return null;
  };
})(Entry.PyToBlockParser.prototype);
Entry.Console = function() {
  Entry.propertyPanel && (this.createView(), Entry.propertyPanel.addMode("console", this), Entry.console = this, this._isEditing = !1, this._inputData = null);
};
(function(a) {
  a.createView = function() {
    this.view = new Entry.Dom("div", {id:"entryConsole"});
    this.codeMirror = CodeMirror(this.view[0], {lineNumbers:!1, lineWrapping:!0, value:"", mode:{}, theme:"default", styleActiveLine:!1, lint:!1});
    this._doc = this.codeMirror.getDoc();
    this.codeMirror.on("beforeChange", function(b, a) {
      this._isEditing ? "+delete" === a.origin && 0 === a.to.ch && a.cancel() : a.cancel();
    }.bind(this));
    this.codeMirror.on("keyup", function(b, a) {
      this._isEditing && 13 === a.keyCode && this.endInput();
    }.bind(this));
    this.codeMirror.on("cursorActivity", function(b, a) {
      b.execCommand("goDocEnd");
    });
    Entry.addEventListener("stop", this.clear.bind(this));
    this.clear();
  };
  a.getView = function() {
    return this.view;
  };
  a.clear = function() {
    this.setEditing(!0);
    this.codeMirror.setValue("Entry Console \n");
    this.codeMirror.execCommand("goDocEnd");
    this.setEditing(!1);
  };
  a.print = function(b, a) {
    if (this.visible) {
      this.setEditing(!0);
      this.codeMirror.execCommand("goDocEnd");
      var c = this._doc.getCursor();
      this._doc.replaceRange(b + "\n", {line:c.line, ch:0});
      this._doc.addLineClass(c.line, "text", a);
      "speak" === a && this.setEditing(!1);
      this.codeMirror.execCommand("goDocEnd");
      "ask" === a && (this._doc.addLineClass(c.line + 1, "text", "answer"), this.codeMirror.focus());
    }
  };
  a.endInput = function() {
    var b = this._doc.getCursor(), a = this.codeMirror.lineInfo(b.line);
    "answer" === a.textClass ? (this._inputData = a.text, this._doc.replaceRange("\n", {line:b.line, ch:a.text.length})) : this._inputData = this._doc.getLine(b.line - 1);
    Entry.container.setInputValue(this._inputData);
    this.setEditing(!1);
  };
  a.stopInput = function(b) {
    this.setEditing(!1);
  };
  a.setEditing = function(b) {
    this._isEditing !== b && (this._isEditing = b);
  };
})(Entry.Console.prototype);
Entry.Parser = function(a, b, c, d) {
  this._mode = a;
  this.syntax = {};
  this.codeMirror = c;
  this._lang = d || "blockPy";
  this._type = b;
  this.availableCode = [];
  this._syntax_cache = {};
  this._pyThreadCount = 1;
  this._pyBlockCount = {};
  Entry.Parser.PARSE_GENERAL = 1;
  Entry.Parser.PARSE_SYNTAX = 2;
  Entry.Parser.PARSE_VARIABLE = 3;
  Entry.Parser.PARSE_BLOCK = 4;
  this._onRunError = this._onError = !1;
  this._console = new Entry.Console;
  switch(this._lang) {
    case "js":
      this._execParser = new Entry.JsToBlockParser(this.syntax);
      d = this.syntax;
      for (var e in d.Scope) {
      }
      break;
    case "py":
      this._execParser = new Entry.PyToBlockParser(this.syntax);
      d = this.syntax;
      for (e in d.Scope) {
      }
      break;
    case "blockJs":
      this._execParser = new Entry.BlockToJsParser(this.syntax, this);
      break;
    case "blockPy":
      this._execParser = new Entry.BlockToPyParser(this.syntax);
  }
};
(function(a) {
  a.setParser = function(b, a, d) {
    if (this._mode !== b || this._type !== a) {
      switch(this._mode = b, this._type = a, this._cm = d, this.syntax = this.mappingSyntax(b), a) {
        case Entry.Vim.PARSER_TYPE_JS_TO_BLOCK:
          this._execParser = new Entry.JsToBlockParser(this.syntax);
          this._execParserType = Entry.Vim.PARSER_TYPE_JS_TO_BLOCK;
          break;
        case Entry.Vim.PARSER_TYPE_PY_TO_BLOCK:
          this._execParser = new Entry.PyToBlockParser(this.syntax);
          this._execParserType = Entry.Vim.PARSER_TYPE_PY_TO_BLOCK;
          break;
        case Entry.Vim.PARSER_TYPE_BLOCK_TO_JS:
          this._execParser = new Entry.BlockToJsParser(this.syntax, this);
          b = this.syntax;
          var c = {}, f;
          for (f in b.Scope) {
            c[f + "();\n"] = b.Scope[f];
          }
          d.on("keydown", function(b, a) {
            var d = a.keyCode;
            (65 <= d && 95 >= d || 167 == d || !a.shiftKey && 190 == d) && CodeMirror.showHint(b, null, {completeSingle:!1, globalScope:c});
          });
          this._execParserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS;
          break;
        case Entry.Vim.PARSER_TYPE_BLOCK_TO_PY:
          this._execParser = new Entry.BlockToPyParser(this.syntax), d.setOption("mode", {name:"python", globalVars:!0}), this._execParserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY;
      }
    }
  };
  a.parse = function(b, a) {
    var c = "";
    switch(this._type) {
      case Entry.Vim.PARSER_TYPE_JS_TO_BLOCK:
        try {
          var e = [];
          e.push(b);
          var f = [], g;
          for (g in e) {
            var h = e[g], h = h.trim(), k = acorn.parse(h);
            f.push(k);
          }
          c = this._execParser.Program(f);
        } catch (q) {
          if (this.codeMirror) {
            q instanceof SyntaxError ? (c = {from:{line:q.loc.line - 1, ch:0}, to:{line:q.loc.line - 1, ch:q.loc.column}}, q.message = "\ubb38\ubc95(Syntax) \uc624\ub958\uc785\ub2c8\ub2e4.", q.type = 1) : (c = this.getLineNumber(q.node.start, q.node.end), c.message = q.message, c.severity = "converting error", q.type = 2);
            this.codeMirror.markText(c.from, c.to, {className:"CodeMirror-lint-mark-error", __annotation:c, clearOnEnter:!0});
            c = q.title ? q.title : "\ubb38\ubc95 \uc624\ub958";
            if (2 == q.type && q.message) {
              var l = q.message;
            } else {
              2 != q.type || q.message ? 1 == q.type && (l = "\uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ubb38\ubc95\uc744 \ud655\uc778\ud574\uc8fc\uc138\uc694.") : l = "\uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ucf54\ub4dc\ub97c \ud655\uc778\ud574\uc8fc\uc138\uc694.";
            }
            Entry.toast.alert(c, l);
            c = {};
            c.boardType = Entry.Workspace.MODE_BOARD;
            c.textType = Entry.Vim.TEXT_TYPE_JS;
            c.runType = Entry.Vim.MAZE_MODE;
            Ntry.dispatchEvent("textError", c);
            throw q;
          }
          c = [];
        }
        break;
      case Entry.Vim.PARSER_TYPE_PY_TO_BLOCK:
        try {
          this._pyBlockCount = {};
          this._pyThreadCount = 1;
          var n = new Entry.PyAstGenerator, e = this.makeThreads(b), f = [], m = 0;
          for (g = 0;g < e.length;g++) {
            if (h = e[g], 0 != h.length && (h = h.replace(/\t/gm, "    "), k = n.generate(h))) {
              this._pyThreadCount = m++, this._pyBlockCount[m] = h.split("\n").length - 1, 0 != k.body.length && f.push(k);
            }
          }
          c = this._execParser.Program(f);
          this._onError = !1;
        } catch (q) {
          if (this._onError = !0, c = [], this.codeMirror) {
            if (q instanceof SyntaxError) {
              var t = this.findSyntaxError(q, m), c = {from:{line:t.from.line - 1, ch:t.from.ch}, to:{line:t.to.line - 1, ch:t.to.ch}};
              q.type = "syntax";
            } else {
              t = this.findConvError(q), c = {from:{line:t.from.line - 1, ch:t.from.ch}, to:{line:t.to.line - 1, ch:t.to.ch}}, q.type = "converting";
            }
            this._marker = this.codeMirror.markText(c.from, c.to, {className:"CodeMirror-lint-mark-error", __annotation:c, clearOnEnter:!0, inclusiveLeft:!0, inclusiveRigth:!0, clearWhenEmpty:!1});
            if ("syntax" == q.type) {
              var u = q.title, x = this.makeSyntaxErrorDisplay(q.subject, q.keyword, q.message, t.from.line);
            } else {
              "converting" == q.type && (u = q.title, x = q.message);
            }
            Entry.toast.alert(u, x);
            throw q;
          }
        }
        break;
      case Entry.Vim.PARSER_TYPE_BLOCK_TO_JS:
        c = l = this._execParser.Code(b, a);
        break;
      case Entry.Vim.PARSER_TYPE_BLOCK_TO_PY:
        Entry.getMainWS().blockMenu.renderText();
        c = "";
        if (a === Entry.Parser.PARSE_BLOCK && "func_" === b.type.substr(0, 5)) {
          var v = Object.keys(this._execParser._funcDefMap);
        }
        l = this._execParser.Code(b, a);
        this._pyHinter || (this._pyHinter = new Entry.PyHint(this.syntax));
        this._hasDeclaration || this.initDeclaration();
        if (a == Entry.Parser.PARSE_GENERAL) {
          this.py_variableDeclaration && (c += this.py_variableDeclaration);
          this.py_listDeclaration && (c += this.py_listDeclaration);
          if (this.py_variableDeclaration || this.py_listDeclaration) {
            c += "\n";
          }
          u = this._execParser._funcDefMap;
          x = "";
          for (t in u) {
            x += u[t] + "\n\n";
          }
          c += x;
        } else {
          a === Entry.Parser.PARSE_BLOCK && v && 0 > v.indexOf(b.type) && (c += this._execParser._funcDefMap[b.type] + "\n\n");
        }
        l && (c += l.trim());
        c = c.replace(/\t/g, "    ");
        this._hasDeclaration && this.removeDeclaration();
    }
    return c;
  };
  a.getLineNumber = function(b, a) {
    var c = this.codeMirror.getValue(), e = {from:{}, to:{}};
    b = c.substring(0, b).split(/\n/gi);
    e.from.line = b.length - 1;
    e.from.ch = b[b.length - 1].length;
    a = c.substring(0, a).split(/\n/gi);
    e.to.line = a.length - 1;
    e.to.ch = a[a.length - 1].length;
    return e;
  };
  a.mappingSyntax = function(b) {
    if (this._syntax_cache[b]) {
      return this._syntax_cache[b];
    }
    for (var a = Object.keys(Entry.block), d = {}, e = 0;e < a.length;e++) {
      var f = a[e], g = Entry.block[f];
      if (b === Entry.Vim.MAZE_MODE) {
        if (-1 < this.availableCode.indexOf(f)) {
          var h = g.syntax;
          if (h && !g.syntax.py) {
            for (var g = d, k = 0;k < h.length;k++) {
              var l = h[k];
              if (k === h.length - 2 && "function" === typeof h[k + 1]) {
                g[l] = h[k + 1];
                break;
              }
              g[l] || (g[l] = {});
              k === h.length - 1 ? g[l] = f : g = g[l];
            }
          }
        }
      } else {
        b === Entry.Vim.WORKSPACE_MODE && (l = f, f = null, g.syntax && g.syntax.py && (f = g.syntax.py), f && f.map(function(b) {
          var a, c;
          if ("string" === typeof b) {
            var e = {};
            a = e;
            c = b;
            e.key = l;
            e.syntax = b;
            e.template = b;
          } else {
            a = b, c = b.syntax, b.key = l, b.template || (a.template = b.syntax);
          }
          c = c.split("(");
          c = c[1] && -1 < c[1].indexOf("%") ? 0 != c[0].length ? c[0] : c.join("(") : c.join("(");
          c = c.replace("():", "");
          c = c.replace("()", "");
          b.keyOption && (c += "#" + b.keyOption);
          c = c.split(".");
          b = [];
          b.push(c.shift());
          c = c.join(".");
          "" != c && b.push(c);
          c = b;
          b = d;
          for (e = 0;e < c.length;e++) {
            var f = c[e];
            if (e === c.length - 1) {
              b[f] = a;
              break;
            }
            b[f] || (b[f] = {});
            b = b[f];
          }
        }));
      }
    }
    return this._syntax_cache[b] = d;
  };
  a.setAvailableCode = function(b, a) {
    var c = [], e;
    b instanceof Entry.Code ? e = b.getBlockList() : b.forEach(function(b, a) {
      e.concat(b);
    });
    e.forEach(function(b) {
      c.push(b.type);
    });
    e = [];
    a instanceof Entry.Code ? e = a.getBlockList() : a.forEach(function(b, a) {
      e.concat(b);
    });
    e.forEach(function(b) {
      -1 === c.indexOf(b.type) && c.push(b.type);
    });
    this.availableCode = this.availableCode.concat(c);
  };
  a.findSyntaxError = function(b, a) {
    a = {from:{}, to:{}};
    var c = b.loc.line;
    b = this.codeMirror.getValue().split("\n");
    var e = 0, f;
    for (f in this._pyBlockCount) {
      var g = parseInt(this._pyBlockCount[f]), e = e + g;
    }
    f = c + e + 3;
    f > b.length && (f = b.length);
    b = b[f - 1];
    a.from.line = f;
    a.from.ch = 0;
    a.to.line = f;
    a.to.ch = b.length;
    return a;
  };
  a.findConvError = function(b) {
    var a = {from:{}, to:{}};
    b = b.line - 1;
    for (var d = this.codeMirror.getValue().split("\n"), e = 0, f, g, h = 3;h < d.length;h++) {
      if (f = d[h], 0 == f.trim().length && e++, b + e + 3 == h) {
        g = h + 1;
        break;
      }
    }
    g > d.length && (g = d.length);
    a.from.line = g;
    a.from.ch = 0;
    a.to.line = g;
    a.to.ch = f.length;
    return a;
  };
  a.makeThreads = function(b) {
    b = b.split("\n");
    for (var a = [], d = "", e = !1, f = 3;f < b.length;f++) {
      var g = b[f] + "\n", g = g.replace(/\t/gm, "    ");
      Entry.TextCodingUtil.isEntryEventFuncByFullText(g) ? (g = this.entryEventParamConverter(g), 0 != d.length && a.push(d), d = "", d += g, e = !0) : (Entry.TextCodingUtil.isEntryEventFuncByFullText(g.trim()) && (g = this.entryEventParamConverter(g)), 1 != g.length || e ? 1 != g.length && " " != g.charAt(0) && e && (a.push(d), d = "", e = !1) : (a.push(d), d = ""), d += g);
    }
    a.push(d);
    return a;
  };
  a.entryEventParamConverter = function(b) {
    var a = b.indexOf("("), d = b.indexOf(")"), e = b.substring(0, a);
    b = b.substring(a + 1, d);
    if (b = b.replace(/\"/g, "")) {
      b = isNaN(b) ? isNaN(b.charAt(0)) ? b.replace(/ /g, "_space_") : "num" + b : "num" + b, "None" == b && (b = "none");
    }
    return e + "(" + b + "):\n";
  };
  a.makeSyntaxErrorDisplay = function(b, a, d, e) {
    return "[" + b + "] " + (a ? "'" + a + "' " : "") + " : " + d + " (line " + e + ")";
  };
  a.initDeclaration = function() {
    this.py_variableDeclaration = Entry.TextCodingUtil.generateVariablesDeclaration();
    this.py_listDeclaration = Entry.TextCodingUtil.generateListsDeclaration();
    this._hasDeclaration = !0;
  };
  a.removeDeclaration = function() {
    this.py_listDeclaration = this.py_variableDeclaration = null;
  };
})(Entry.Parser.prototype);
Entry.CodeMap = {};
(function(a) {
  a.Entry = {start_neighbor_scene:[{"\ub2e4\uc74c":"next", "\uc774\uc804":"pre"}], stop_object:[{thisOnly:"self", thisThread:"this", otherThread:"others", self:"thisOnly", "this":"thisThread", others:"otherThread", "\ubaa8\ub4e0":"all", "\uc790\uc2e0":"thisOnly", "\uc774":"thisThread", "\uc790\uc2e0\uc758 \ub2e4\ub978":"otherThread"}], change_to_next_shape:[{prev:"pre", pre:"prev", "\ub2e4\uc74c":"next", "\uc774\uc804":"prev"}], add_effect_amount:[{"\uc0c9\uae54":"color", "\ubc1d\uae30":"brightness", 
  "\ud22c\uba85\ub3c4":"transparency"}], change_effect_amount:[{"\uc0c9\uae54":"color", "\ubc1d\uae30":"brightness", "\ud22c\uba85\ub3c4":"transparency"}], change_object_index:[{front:"FRONT", forward:"FORWARD", backward:"BACKWARD", back:"BACK", "\ub9e8 \uc55e":"FRONT", "\uc55e":"FORWARD", "\ub4a4":"BACKWARD", "\ub9e8 \ub4a4":"BACK"}], set_color:[{red:"#FF0000", orange:"#FF9966", yellow:"#FFFF66", green:"#009900", blue:"#3333FF", navy:"#000099", purple:"#993399", black:"#000000", white:"#FFFFFF", 
  brown:"#990000"}], reach_something:[null, {mouse:"mouse_pointer", wall:"edge", wall_up:"edge_up", wall_down:"edge_down", wall_right:"edge_right", wall_left:"edge_left", mouse_pointer:"mouse", edge:"wall", edge_up:"wall_up", edge_down:"wall_down", edge_right:"wall_right", edge_left:"wall_left", "\ub9c8\uc6b0\uc2a4\ud3ec\uc778\ud130":"mouse"}, null], create_clone:[{"\uc790\uc2e0":"self", self:"self"}], locate:[{mouse:"mouse_pointer", mouse_pointer:"mouse", "\ub9c8\uc6b0\uc2a4\ud3ec\uc778\ud130":"mouse"}], 
  locate_object_time:[null, {mouse:"mouse_pointer", mouse_pointer:"mouse", "\ub9c8\uc6b0\uc2a4\ud3ec\uc778\ud130":"mouse"}], see_angle_object:[{mouse:"mouse_pointer", mouse_pointer:"mouse", "\ub9c8\uc6b0\uc2a4\ud3ec\uc778\ud130":"mouse"}], coordinate_mouse:[null, {X:"x", Y:"y"}, null], coordinate_object:[null, {"\uc790\uc2e0":"self", self:"self"}, null, {"\ud06c\uae30":"size", "\ubc29\ud5a5":"rotation", "\uc774\ub3d9 \ubc29\ud5a5":"direction", "\ubaa8\uc591 \ubc88\ud638":"picture_index", "\ubaa8\uc591 \uc774\ub984":"picture_name", 
  picture_index:"shape_number", picture_name:"shape_name", shape_number:"picture_index", shape_name:"picture_name"}], choose_project_timer_action:[null, {start:"START", stop:"STOP", reset:"RESET"}], set_visible_project_timer:[null, {show:"SHOW", hide:"HIDE"}], get_date:[null, {year:"YEAR", month:"MONTH", day:"DAY", hour:"HOUR", minute:"MINUTE", second:"SECOND"}], distance_something:[null, {mouse:"mouse_pointer", mouse_pointer:"mouse", "\ub9c8\uc6b0\uc2a4\ud3ec\uc778\ud130":"mouse"}], set_visible_answer:[{show:"SHOW", 
  hide:"HIDE"}]};
  a.Arduino = {arduino_ext_analog_list:[{a0:"0", a1:"1", a2:"2", a3:"3", a4:"4", a5:"5"}], arduino_get_digital_toggle:[{on:"high", off:"low", high:"on", low:"off"}]};
  a.Hamster = {hamster_play_note_for:[{4:"hamster.note_c", 5:"hamster.note_c_sharp", 6:"hamster.note_d", 7:"hamster.note_e_flat", 8:"hamster.note_e", 9:"hamster.note_f", 10:"hamster.note_f_sharp", 11:"hamster.note_g", 12:"hamster.note_g_sharp", 13:"hamster.note_a", 14:"hamster.note_b_flat", 15:"hamster.note_b", "hamster.note_c":4, "hamster.note_c_sharp":5, "hamster.note_d_flat":5, "hamster.note_d":6, "hamster.note_e_flat":7, "hamster.note_d_sharp":7, "hamster.note_e":8, "hamster.note_f":9, "hamster.note_f_sharp":10, 
  "hamster.note_g_flat":10, "hamster.note_g":11, "hamster.note_g_sharp":12, "hamster.note_a_flat":12, "hamster.note_a":13, "hamster.note_b_flat":14, "hamster.note_a_sharp":14, "hamster.note_b":15}, null, null]};
})(Entry.CodeMap);
Entry.PyBlockAssembler = function(a) {
  this.blockSyntax = a;
  this._blockStatmentIndex = 0;
  this._blockStatments = [];
};
(function(a) {
  a.Program = function(b) {
    var a = [], d;
    for (d in b) {
      if ("Program" != b[d].type) {
        return;
      }
      var e = [], f = b[d].body;
      console.log("nodes", f);
      for (d in f) {
        var g = f[d], g = this[g.type](g);
        console.log("checkitout", g);
        g = this._assembler[g.type](g);
        e.push(g);
      }
      console.log("thread", e);
      a.push(e);
    }
    return a;
  };
  a.ExpressionStatement = function(b) {
    console.log("ExpressionStatement component", b);
    var a = {};
    b = b.expression;
    "Literal" == b.type ? (b = this[b.type]({type:"Block", accept:"booleanMagnet"}, b), a.type = b.type, result = a, console.log("ExpressionStatement type literal", result)) : (b = this[b.type](b), a.type = b.type, a.params = b.params, result = a, console.log("ExpressionStatement type not literal", result));
    console.log("ExpressionStatement result", result);
    return result;
  };
  a.AssignmentExpression = function(b) {
    console.log("AssignmentExpression component", b);
    var a = [], d;
    d = b.left;
    d.type ? ("Literal" == d.type ? (d = this[d.type](paramsMeta[0], d), console.log("AssignmentExpression left Literal param", d)) : d = this[d.type](d), d && a.push(d), console.log("AssignmentExpression left param", d)) : (d = b.left, this[d.type](d));
    operator = String(b.operator);
    console.log("AssignmentExpression operator", operator);
    operator && (d = operator = Entry.TextCodingUtil.logicalExpressionConvert(operator), a.push(d));
    d = b.right;
    d.type ? ("Literal" == d.type ? (d = this[d.type](paramsMeta[2], d), console.log("AssignmentExpression right Literal param", d)) : d = this[d.type](d), d && a.push(d), console.log("AssignmentExpression right param", d)) : (d = b.right, this[d.type](d));
    console.log("AssignmentExpression params", a);
    console.log("AssignmentExpression result", result);
    return result;
  };
  a.CallExpression = function(b) {
    console.log("CallExpression component", b);
    var a;
    a = {};
    var d = b.callee, d = this[d.type](d);
    console.log("CallExpression calleeData", d, "calleeData typeof", typeof d);
    var e = "object" != typeof d.object ? String(d.object).concat(".").concat(String(d.property)) : String(d.object.object).concat(".").concat(String(d.object.property)).concat(".").concat(String(d.property));
    console.log("CallExpression syntax", e);
    d = this.getBlockType(e);
    console.log("CallExpression type1", d);
    d || "__pythonRuntime.functions.range" == e && (d = "repeat_basic");
    console.log("CallExpression type2", d);
    e = Entry.block[d].params;
    console.log("CallExpression paramsMeta", e);
    var arguments = b.arguments, f = [], g;
    for (g in arguments) {
      var h = arguments[g];
      console.log("CallExpression argument", h);
      if ("Literal" == h.type) {
        var k = e[g];
        "Indicator" == k.type ? (h = null, f.push(h), g--) : (console.log("CallExpression argument index", h.type, g), h = this[h.type](k, h, d, g), f.push(h));
        g == arguments.length - 1 && (console.log("CallExpression in1"), g < e.length && (console.log("CallExpression in2"), f.push(null)));
        console.log("CallExpression i", g);
      }
    }
    console.log("CallExpression params", f);
    a.type = d;
    a.params = f;
    console.log("CallExpression result", a);
    return a;
  };
  a.Literal = function(b, a, d, e) {
    console.log("Literal paramMeta component particularIndex blockType", b, a, d, e);
    a = a.value;
    b = d ? this["Param" + b.type](b, a, d, e) : this["Param" + b.type](b, a);
    console.log("Literal result", b);
    return b;
  };
  a.ParamColor = function(b, a) {
    console.log("ParamColor paramMeta value", b, a);
    console.log("ParamColor result", a);
    return a;
  };
  a.ParamDropdown = function(b, a) {
    console.log("ParamDropdown paramMeta value", b, a);
    console.log("ParamDropdownDynamic result", a);
    return a;
  };
  a.ParamDropdownDynamic = function(b, a) {
    console.log("ParamDropdownDynamic paramMeta value", b, a);
    var c;
    if ("mouse" == a) {
      return "mouse";
    }
    b = b.options;
    for (var e in b) {
      if (console.log("options", b), a == b[e][0]) {
        console.log("options[i][0]", b[e][0]);
        c = b[e][1];
        break;
      }
    }
    console.log("ParamDropdownDynamic result", c);
    return c;
  };
  a.ParamKeyboard = function(b, a) {
    console.log("ParamKeyboard paramMeta value", b, a);
    b = Entry.KeyboardCodeMap.prototype.keyCharToCode[a];
    console.log("ParamKeyboard result", b);
    return b;
  };
  a.ParamBlock = function(b, a, d, e) {
    console.log("ParamBlock paramMeta value blockType", b, a, d, e);
    var c = {}, g = [];
    d = Entry.TextCodingUtil.particularParam(d);
    if (null != d) {
      var h = d[e];
      if (h) {
        h = d[e];
        console.log("ParamBlock particularType", h);
        e = h;
        c.type = e;
        d = Entry.block[e].params;
        console.log("ParamBlock particular block paramsMeta", b);
        var k, l;
        for (l in d) {
          b = d[l];
          b = b.options;
          for (var n in b) {
            h = b[n], a == h[0] && (k = h[1]);
          }
        }
        g.push(k);
        c.params = g;
      } else {
        switch(e = typeof a, e) {
          case "number":
            c.type = "number";
            g.push(a);
            c.params = g;
            break;
          case "boolean":
            1 == a ? c.type = "True" : 0 == a && (c.type = "False");
            break;
          default:
            c.type = "text", g.push(a), c.params = g;
        }
      }
    } else {
      switch(e = typeof a, e) {
        case "number":
          c.type = "number";
          g.push(a);
          c.params = g;
          break;
        case "boolean":
          1 == a ? c.type = "True" : 0 == a && (c.type = "False");
          break;
        default:
          c.type = "text", g.push(a), c.params = g;
      }
    }
    console.log("ParamBlock valueType", e);
    console.log("ParamBlock result", c);
    return c;
  };
  a.Indicator = function(b, a, d) {
  };
  a.MemberExpression = function(b) {
    console.log("MemberExpression component", b);
    var a = {}, d = b.object;
    b = b.property;
    d = this[d.type](d);
    b = this[b.type](b);
    console.log("MemberExpression objectData", d);
    console.log("MemberExpression structure", b);
    a.object = d;
    a.property = b;
    console.log("MemberExpression result", a);
    return a;
  };
  a.Identifier = function(b) {
    console.log("Identifiler component", b);
    b = b.name;
    console.log("Identifiler result", b);
    return b;
  };
  a.WhileStatement = function(b) {
    console.log("WhileStatement component", b);
    var a = {}, d = b.test, e;
    1 == d.value && (e = this.getBlockType("while True:\n$1"));
    console.log("WhileStatement type", e);
    var f = Entry.block[e].params;
    console.log("WhileStatement paramsMeta", f);
    var g = [];
    d && (d.type = "Literal", f = f[0], d = "Indicator" == f.type ? null : this[d.type](f, d), g.push(d));
    d = [];
    b = b.body.body;
    for (var h in b) {
      f = b[h], f = this[f.type](f), d.push(f);
    }
    a.type = e;
    a.params = g;
    a.statements = [];
    a.statements.push(d);
    console.log("WhileStatement result", a);
    return a;
  };
  a.BlockStatement = function(b) {
    console.log("BlockStatement component", b);
    this._blockStatmentIndex = 0;
    this._blockStatments = [];
    var a = {};
    b = b.body;
    for (var d in b) {
      var e = b[d];
      console.log("BlockStatement body", e, "i", d);
      e = this[e.type](e);
      console.log("BlockStatement bodyData", e, "i", d);
      if (e.declarations) {
        console.log("BlockStatement statements type params bodyData", d, e);
        var e = e.declarations, f;
        for (f in e) {
          var g = e[f];
          g.init.type && (a.type = g.init.type);
          g.init.params && (console.log("BlockStatement params", g.init.params), a.params = g.init.params);
          console.log("BlockStatement structure", a, "j", f);
        }
      } else {
        0 == this._blockStatmentIndex && this._blockStatments.push(e);
      }
    }
    a.statements = [this._blockStatments];
    console.log("BlockStatement result", a);
    this._blockStatmentIndex++;
    return a;
  };
  a.IfStatement = function(b) {
    console.log("IfStatement component", b);
    var a = {}, d = [], e = [], f = [], g = [], h = b.test, k = b.alternate, l = b.consequent;
    b = this.getBlockType(null == k ? "if %1:\n$1" : "if %1:\n$1\nelse:\n$2");
    if (null != h) {
      var n = Entry.block[b].params;
      console.log("IfStatement paramsMeta", n);
      d = [];
      h.type = "Literal";
      n = n[0];
      h = "Indicator" == n.type ? null : this[h.type](n, h);
      d.push(h);
    }
    if (null != l) {
      for (var m in l.body) {
        if (h = l.body[m]) {
          h = this[h.type](h), console.log("IfStatement consequent bodyData", h), e.push(h);
        }
      }
    }
    if (null != k) {
      for (m in k.body) {
        if (h = k.body[m]) {
          h = this[h.type](h), console.log("IfStatement alternate bodyData", h), f.push(h);
        }
      }
    }
    0 != e.length && g.push(e);
    0 != f.length && g.push(f);
    a.type = b;
    0 != d.length && (a.params = d);
    0 != g.length && (a.statements = g);
    console.log("IfStatement result", a);
    return a;
  };
  a.VariableDeclaration = function(b) {
    console.log("VariableDeclaration component", b);
    var a = {}, d = [];
    b = b.declarations;
    for (var e in b) {
      var f = b[e], f = this[f.type](f);
      console.log("VariableDeclaration declarationData", f);
      d.push(f);
    }
    a.declarations = d;
    console.log("VariableDeclaration result", a);
    return a;
  };
  a.VariableDeclarator = function(b) {
    console.log("VariableDeclarator component", b);
    var a = {}, d = b.id, e = this[d.type](d);
    console.log("VariableDeclarator idData", e);
    b = b.init;
    b = this[b.type](b);
    console.log("VariableDeclarator initData", b);
    a.id = d;
    a.init = b;
    console.log("VariableDeclarator result", a);
    return a;
  };
  a.BreakStatement = function(b) {
    console.log("BreakStatement component", b);
    b = {};
    var a = this.getBlockType("break");
    b.type = a;
    console.log("BreakStatement result", b);
    return b;
  };
  a.UnaryExpression = function(b) {
    console.log("UnaryExpression component", b);
    var a = [];
    b.prefix && (b = b.operator.concat(b.argument.value), a.push(b));
    result.params = a;
    console.log("UnaryExpression result", result);
    return result;
  };
  a.LogicalExpression = function(b) {
    console.log("LogicalExpression component", b);
    var a = {}, d = String(b.operator);
    switch(d) {
      case "&&":
        var e = "%1 and %3";
        break;
      case "||":
        e = "%1 or %3";
        break;
      default:
        e = "%1 and %3";
    }
    var e = this.getBlockType(e), f = Entry.block[e].params;
    console.log("LogicalExpression paramsMeta", f);
    var g = [], d = b.left;
    d.type ? ("Literal" == d.type ? (d = this[d.type](f[0], d), console.log("LogicalExpression left Literal param", d)) : d = this[d.type](d), d && g.push(d), console.log("LogicalExpression left param", d)) : (d = b.left, this[d.type](d));
    d = String(b.operator);
    console.log("LogicalExpression operator", d);
    d && (d = Entry.TextCodingUtil.logicalExpressionConvert(d), g.push(d));
    d = b.right;
    d.type ? ("Literal" == d.type ? (d = this[d.type](f[2], d), console.log("LogicalExpression right Literal param", d)) : d = this[d.type](d), d && g.push(d), console.log("LogicalExpression right param", d)) : (d = b.right, this[d.type](d));
    a.type = e;
    a.params = g;
    console.log("LogicalExpression result", a);
    return a;
  };
  a.BinaryExpression = function(b) {
    console.log("BinaryExpression component", b);
    var a = {params:[]}, d = String(b.operator);
    console.log("BinaryExpression operator", d);
    if (d) {
      var e = "(%1 %2 %3)";
    }
    console.log("BinaryExpression syntax", e);
    e = this.getBlockType(e);
    console.log("BinaryExpression type", e);
    var f = Entry.block[e].params;
    console.log("BinaryExpression paramsMeta", f);
    var g = [], d = b.left;
    d.type ? ("Literal" == d.type ? (d = this[d.type](f[0], d), console.log("BinaryExpression left Literal param", d)) : d = this[d.type](d), d && g.push(d), console.log("BinaryExpression left param", d)) : (d = b.left, this[d.type](d));
    if (d = String(b.operator)) {
      console.log("BinaryExpression operator", d), (d = Entry.TextCodingUtil.binaryOperatorConvert(d)) && g.push(d);
    }
    d = b.right;
    d.type ? ("Literal" == d.type ? (d = this[d.type](f[2], d), console.log("BinaryExpression right Literal param", d)) : d = this[d.type](d), d && g.push(d), console.log("BinaryExpression right param", d)) : (d = b.right, this[d.type](d));
    console.log("BinaryExpression params", g);
    a.type = e;
    a.params = g;
    console.log("BinaryExpression result", a);
    return a;
  };
  a.getBlockType = function(b) {
    return this.blockSyntax[b];
  };
  a.FunctionDeclaration = function(b) {
    console.log("FunctionDeclaration component", b);
    console.log("FunctionDeclaration result", void 0);
    return b;
  };
  a.RegExp = function(b) {
    console.log("RegExp", b);
    console.log("RegExp result", void 0);
    return b;
  };
  a.Function = function(b) {
    console.log("Function", b);
    console.log("Function result", void 0);
    return b;
  };
  a.EmptyStatement = function(b) {
    console.log("EmptyStatement", b);
    console.log("EmptyStatement result", void 0);
    return b;
  };
  a.DebuggerStatement = function(b) {
    console.log("DebuggerStatement", b);
    console.log("DebuggerStatement result", void 0);
    return b;
  };
  a.WithStatement = function(b) {
    console.log("WithStatement", b);
    console.log("WithStatement result", void 0);
    return b;
  };
  a.ReturnStaement = function(b) {
    console.log("ReturnStaement", b);
    console.log("ReturnStaement result", void 0);
    return b;
  };
  a.LabeledStatement = function(b) {
    console.log("LabeledStatement", b);
    console.log("LabeledStatement result", void 0);
    return b;
  };
  a.BreakStatement = function(b) {
    console.log("BreakStatement", b);
    console.log("BreakStatement result", void 0);
    return b;
  };
  a.ContinueStatement = function(b) {
    console.log("ContinueStatement", b);
    console.log("ContinueStatement result", void 0);
    return b;
  };
  a.SwitchStatement = function(b) {
    console.log("SwitchStatement", b);
    console.log("SwitchStatement result", void 0);
    return b;
  };
  a.SwitchCase = function(b) {
    console.log("SwitchCase", b);
    console.log("SwitchCase result", void 0);
    return b;
  };
  a.ThrowStatement = function(b) {
    console.log("ThrowStatement", b);
    console.log("ThrowStatement result", void 0);
    return b;
  };
  a.TryStatement = function(b) {
    console.log("TryStatement", b);
    console.log("TryStatement result", void 0);
    return b;
  };
  a.CatchClause = function(b) {
    console.log("CatchClause", b);
    console.log("CatchClause result", void 0);
    return b;
  };
  a.DoWhileStatement = function(b) {
    console.log("DoWhileStatement", b);
    console.log("DoWhileStatement result", void 0);
    return b;
  };
  a.ForInStatement = function(b) {
    console.log("ForInStatement", b);
    console.log("ForInStatement result", void 0);
    return b;
  };
  a.FunctionDeclaration = function(b) {
    console.log("FunctionDeclaration", b);
    console.log("FunctionDeclaration result", void 0);
    return b;
  };
  a.ThisExpression = function(b) {
    console.log("ThisExpression", b);
    console.log("ThisExpression result", void 0);
    return b;
  };
  a.ArrayExpression = function(b) {
    console.log("ArrayExpression", b);
    console.log("ArrayExpression result", void 0);
    return b;
  };
  a.ObjectExpression = function(b) {
    console.log("ObjectExpression", b);
    console.log("ObjectExpression result", void 0);
    return b;
  };
  a.Property = function(b) {
    console.log("Property", b);
    console.log("Property result", void 0);
    return b;
  };
  a.FunctionExpression = function(b) {
    console.log("FunctionExpression", b);
    console.log("FunctionExpression result", void 0);
    return b;
  };
  a.UpdateExpression = function(b) {
    console.log("UpdateExpression", b);
    console.log("UpdateExpression result", void 0);
    return b;
  };
  a.ConditionalExpression = function(b) {
    console.log("ConditionalExpression", b);
    console.log("ConditionalExpression result", void 0);
    return b;
  };
  a.NewExpression = function(b) {
    console.log("NewExpression", b);
    console.log("NewExpression result", void 0);
    return b;
  };
  a.SequenceExpression = function(b) {
    console.log("SequenceExpression", b);
    console.log("SequenceExpression result", void 0);
    return b;
  };
})(Entry.PyBlockAssembler.prototype);
Entry.PyToBlockParserTemp = function(a) {
  this._assembler = new Entry.PyBlockAssembler(a);
};
(function(a) {
  a.Program = function(b) {
    var a = [], d;
    for (d in b) {
      if ("Program" != b[d].type) {
        return;
      }
      var e = [], f = b[d].body;
      console.log("nodes", f);
      for (d in f) {
        var g = f[d], g = this[g.type](g);
        console.log("checkitout", g);
        g = this._assembler[g.type](g);
        e.push(g);
      }
      console.log("thread", e);
      a.push(e);
    }
    return a;
  };
  a.Identifier = function(b) {
    console.log("Identifier", b);
    return {type:b.type, name:b.name};
  };
  a.FunctionDeclaration = function(b) {
    console.log("FunctionDeclaration", b);
    var a = this[b.id.type](b.id);
    return {type:b.type, id:a};
  };
  a.Literal = function(b) {
    console.log("Literal", b);
    console.log("typeof node at Literal", typeof b.value);
    var a;
    "string" === typeof b.value ? a = b.value : "boolean" === typeof b.value ? a = b.value : "number" === typeof b.value ? a = b.value : "RegExp" === typeof b.value ? (a = this[typeof b.value](b), a = a.regex.pattern) : a = null;
    console.log("value", a);
    return {type:b.type, value:a};
  };
  a.RegExp = function(b) {
    console.log("RegExp", b);
    return {regex:b.regex};
  };
  a.Function = function(b) {
    console.log("Function", b);
    var a = this[b.id](b), d = [], e;
    for (e in b.params) {
      d.push(b.params[e]);
    }
    b = this[b.body](b);
    return {id:a, params:d, body:b};
  };
  a.ExpressionStatement = function(b) {
    var a = this[b.expression.type](b.expression);
    return {type:b.type, expression:a};
  };
  a.BlockStatement = function(b) {
    console.log("BlockStatement", b);
    var a = [], d;
    for (d in b.body) {
      var e = b.body[d];
      console.log("BlockStatement statement", e);
      e = this[e.type](e);
      console.log("BlockStatement body", e);
      a.push(e);
    }
    console.log("bodies", a);
    return {type:b.type, body:a};
  };
  a.EmptyStatement = function(b) {
    console.log("EmptyStatement", b);
    return {type:b.type};
  };
  a.DebuggerStatement = function(b) {
    console.log("DebuggerStatement", b);
    return {type:b.type};
  };
  a.WithStatement = function(b) {
    console.log("WithStatement", b);
    var a = this[b.object.type](b.object), d = this[b.body.type](b.body);
    return {type:b.type, object:a, body:d};
  };
  a.ReturnStaement = function(b) {
    console.log("ReturnStaement", b);
    var a;
    a = null === b.argument ? null : this[b.argument.type](b.argument);
    return {type:b.type, argument:a};
  };
  a.LabeledStatement = function(b) {
    console.log("LabeledStatement", b);
    var a = this[b.label.type](b.label), d = this[b.body.type](b.body);
    return {type:b.type, label:a, body:d};
  };
  a.BreakStatement = function(b) {
    console.log("BreakStatement", b);
    var a;
    console.log("node.label", b.label);
    b.label && null !== b.label ? (console.log("node.label2", b.label), a = this[b.label.type](b.label)) : (console.log("node.lable1", b.label), a = null);
    console.log("label", a);
    return {type:b.type, label:a};
  };
  a.ContinueStatement = function(b) {
    console.log("ContinueStatement", b);
    var a;
    a = null === b.label ? null : this[b.label.type](b.label);
    return {type:b.type, label:a};
  };
  a.IfStatement = function(b) {
    console.log("IfStatement", b);
    var a = this[b.test.type](b.test), d = {body:[]};
    if (null === b.alternate) {
      d = null;
    } else {
      for (var e in b.alternate.body) {
        var f = b.alternate.body[e], g = this[f.type](f);
        d.body.push(g);
      }
    }
    g = {body:[]};
    for (e in b.consequent.body) {
      f = b.consequent.body[e], f = this[f.type](f), g.body.push(f);
    }
    console.log("alternate", d);
    console.log("consequent", g);
    return {type:b.type, test:a, consequent:g, alternate:d};
  };
  a.SwitchStatement = function(b) {
    console.log("SwitchStatement", b);
    var a = this[b.discriminant.type](b.discriminant), d = [], e;
    for (e in b.cases) {
      var f = b.cases[e], f = this[f.type](f);
      d.push(f);
    }
    return {type:b.type, discriminant:a, cases:d};
  };
  a.SwitchCase = function(b) {
    console.log("SwitchCase", b);
    var a;
    a = null === b.test ? null : this[b.test.type](b.test);
    for (var d in b.consequent) {
      b = this[statment.type](statment), (void 0).push(b);
    }
    return {test:a, consequent:void 0};
  };
  a.ThrowStatement = function(b) {
    console.log("ThrowStatement", b);
    var a = this[b.argument.type](b.argument);
    return {type:b.type, argument:a};
  };
  a.TryStatement = function(b) {
    console.log("TryStatement", b);
    var a = this[b.block.type](b.block), d;
    d = null === b.handler ? null : this[b.handler.type](b.handler);
    var e;
    e = null === b.finalizer ? null : this[b.finalizer.type](b.finalizer);
    return {type:b.type, block:a, handler:d, finalizer:e};
  };
  a.CatchClause = function(b) {
    console.log("CatchClause", b);
    var a = b.param;
    b = this[b.body.type](b.body);
    return {param:a, body:b};
  };
  a.WhileStatement = function(b) {
    console.log("WhileStatement", b);
    var a = this[b.test.type](b.test), d = this[b.body.type](b.body);
    console.log("WhileStatement test", a);
    console.log("WhileStatement body", d);
    return {type:b.type, test:a, body:d};
  };
  a.DoWhileStatement = function(b) {
    console.log("DoWhileStatement", b);
    var a;
    a = this[b.init.type](b.init);
    var d;
    d = null === b.test ? null : this[b.test.type](b.test);
    var e;
    e = null === b.update ? null : this[b.update.type](b.update);
    var f = this[b.body.type](b.body);
    return {type:b.type, init:a, test:d, update:e, body:f};
  };
  a.ForStatement = function(b) {
    console.log("ForStatement", b);
    var a;
    if (null === b.init) {
      a = null;
    } else {
      this[b.init.type](b.init);
    }
    var d;
    d = null === b.test ? null : this[b.test.type](b.test);
    var e;
    e = null === b.update ? null : this[b.update.type](b.update);
    var f = this[b.body.type](b.body);
    console.log("ForStatement body", f);
    return {type:b.type, init:a, test:d, update:e, body:f};
  };
  a.ForInStatement = function(b) {
    console.log("ForInStatement", b);
    var a;
    a = this[b.left.type](b.left);
    var d = this[b.right.type](b.right), e = this[b.body.type](b.body);
    return {type:b.type, left:a, right:d, body:e};
  };
  a.FunctionDeclaration = function(b) {
    console.log("FunctionDeclaration", b);
    return {id:this[b.id.type](b.id)};
  };
  a.VariableDeclaration = function(b) {
    console.log("VariableDeclaration", b);
    var a = [], d;
    for (d in b.declarations) {
      var e = b.declarations[d], e = this[e.type](e);
      console.log("declaration", e);
      a.push(e);
    }
    console.log("VariableDeclaration declarations", a);
    return {type:b.type, declarations:a, kind:"var"};
  };
  a.VariableDeclarator = function(b) {
    console.log("VariableDeclarator", b);
    var a = this[b.id.type](b.id), d;
    d = null === b.init ? null : this[b.init.type](b.init);
    console.log("id", a);
    console.log("init", d);
    return {type:b.type, id:a, init:d};
  };
  a.ThisExpression = function(b) {
    console.log("ThisExpression", b);
    return {type:b.type};
  };
  a.ArrayExpression = function(b) {
    console.log("ArrayExpression", b);
    var a;
    if (null === b.elements) {
      a = null;
    } else {
      for (var d in b.elements) {
        var e = b.elements[d], e = this[e.type](e);
        a.push(e);
      }
    }
    return {type:b.type, elements:a};
  };
  a.ObjectExpression = function(b) {
    console.log("ObjectExpression", b);
    for (var a in b.properties) {
      var d = b.properties[a], d = this[d.type](d);
      (void 0).push(d);
    }
    return {type:b.type, properties:void 0};
  };
  a.Property = function(b) {
    console.log("Property", b);
    var a = this[b.key.type](b.key), d = this[b.value.type](b.value);
    return {type:b.type, key:a, value:d, kind:b.kind};
  };
  a.FunctionExpression = function(b) {
    console.log("FunctionExpression", b);
    return {type:b.type};
  };
  a.UnaryExpression = function(b) {
    console.log("UnaryExpression", b);
    var a;
    switch(b.operator) {
      case "-":
        a = b.operator;
        break;
      case "+":
        a = b.operator;
        break;
      case "!":
        a = b.operator;
        break;
      case "~":
        a = b.operator;
        break;
      case "typeof":
        a = b.operator;
        break;
      case "void":
        a = b.operator;
        break;
      case "delete":
        a = b.operator;
        break;
      default:
        a = null;
    }
    var d = b.prefix, e = this[b.argument.type](b.argument);
    return {type:b.type, operator:a, prefix:d, argument:e};
  };
  a.UpdateExpression = function(b) {
    console.log("UpdateExpression", b);
    var a;
    switch(b.operator) {
      case "++":
        a = b.operator;
        break;
      case "--":
        a = b.operator;
        break;
      default:
        a = null;
    }
    var d = this[b.argument.type](b.argument);
    return {type:b.type, operator:a, prefix:b.prefix, argument:d};
  };
  a.BinaryExpression = function(b) {
    console.log("BinaryExpression", b);
    var a;
    switch(b.operator) {
      case "==":
        a = b.operator;
        break;
      case "!=":
        a = b.operator;
        break;
      case "===":
        a = b.operator;
        break;
      case "!==":
        a = b.operator;
        break;
      case "<":
        a = b.operator;
        break;
      case "<=":
        a = b.operator;
        break;
      case ">":
        a = b.operator;
        break;
      case ">=":
        a = b.operator;
        break;
      case "<<":
        a = b.operator;
        break;
      case ">>":
        a = b.operator;
        break;
      case ">>>":
        a = b.operator;
        break;
      case "+":
        a = b.operator;
        break;
      case "-":
        a = b.operator;
        break;
      case "*":
        a = b.operator;
        break;
      case "/":
        a = b.operator;
        break;
      case "%":
        a = b.operator;
        break;
      case "|":
        a = b.operator;
        break;
      case "^":
        a = b.operator;
        break;
      case "|":
        a = b.operator;
        break;
      case "&":
        a = b.operator;
        break;
      case "in":
        a = b.operator;
        break;
      case "instanceof":
        a = b.operator;
        break;
      default:
        a = null;
    }
    var d = this[b.left.type](b.left), e = this[b.right.type](b.right);
    return {type:b.type, operator:a, left:d, right:e};
  };
  a.AssignmentExpression = function(b) {
    console.log("AssignmentExpression", b);
    var a;
    switch(b.operator) {
      case "=":
        a = b.operator;
        break;
      case "+=":
        a = b.operator;
        break;
      case "-=":
        a = b.operator;
        break;
      case "*=":
        a = b.operator;
        break;
      case "/=":
        a = b.operator;
        break;
      case "%=":
        a = b.operator;
        break;
      case "<<=":
        a = b.operator;
        break;
      case ">>=":
        a = b.operator;
        break;
      case "|=":
        a = b.operator;
        break;
      case "^=":
        a = b.operator;
        break;
      case "&=":
        a = b.operator;
        break;
      default:
        a = null;
    }
    var d;
    d = b.left;
    var e = this[b.right.type](b.right);
    return {type:b.type, operator:a, left:d, right:e};
  };
  a.LogicalExpression = function(b) {
    console.log("LogicalExpression", b);
    var a;
    switch(b.operator) {
      case "||":
        a = b.operator;
        break;
      case "&&":
        a = b.operator;
        break;
      default:
        a = null;
    }
    var d = this[b.left.type](b.left), e = this[b.right.type](b.right);
    return {type:b.type, operator:a, left:d, right:e};
  };
  a.MemberExpression = function(b) {
    console.log("MemberExpression", b);
    var a = this[b.object.type](b.object), d = this[b.property.type](b.property), e = b.computed;
    console.log("object", a);
    console.log("property", d);
    return {type:b.type, object:a, property:d, computed:e};
  };
  a.ConditionalExpression = function(b) {
    console.log("ConditionalExpression", b);
    var a = this[b.callee.type](b.callee), d;
    for (d in b.arguments) {
      var e = b.arguments[d], e = this[e.type](e);
      (void 0).push(e);
    }
    return {type:b.type, callee:a, arguments:void 0};
  };
  a.CallExpression = function(b) {
    console.log("CallExpression", b);
    var a = this[b.callee.type](b.callee), d = [], e;
    for (e in b.arguments) {
      var f = b.arguments[e], f = this[f.type](f);
      d.push(f);
    }
    console.log("callee", a);
    console.log("arguments", d);
    return {type:b.type, callee:a, arguments:d};
  };
  a.NewExpression = function(b) {
    console.log("NewExpression", b);
    return {type:b.type};
  };
  a.SequenceExpression = function(b) {
    console.log("SequenceExpression", b);
    for (var a in b.expressions) {
      var d = b.expressions[a], d = this[d.type](d);
      (void 0).push(d);
    }
    return {type:b.type, expressions:void 0};
  };
})(Entry.PyToBlockParserTemp.prototype);
Entry.Toast = function() {
  this.toasts_ = [];
  var a = document.getElementById("entryToastContainer");
  a && document.body.removeChild(a);
  this.body_ = Entry.createElement("div", "entryToastContainer");
  this.body_.addClass("entryToastContainer");
  document.body.appendChild(this.body_);
};
Entry.Toast.prototype.warning = function(a, b, c) {
  var d = Entry.createElement("div", "entryToast");
  d.addClass("entryToast");
  d.addClass("entryToastWarning");
  d.bindOnClick(function() {
    Entry.toast.body_.removeChild(this);
  });
  var e = Entry.createElement("div", "entryToast");
  e.addClass("entryToastTitle");
  e.innerHTML = a;
  d.appendChild(e);
  a = Entry.createElement("p", "entryToast");
  a.addClass("entryToastMessage");
  a.innerHTML = b;
  d.appendChild(a);
  this.toasts_.push(d);
  this.body_.appendChild(d);
  c || window.setTimeout(function() {
    d.style.opacity = 1;
    var b = setInterval(function() {
      .05 > d.style.opacity && (clearInterval(b), d.style.display = "none", Entry.removeElement(d));
      d.style.opacity *= .9;
    }, 20);
  }, 1E3);
};
Entry.Toast.prototype.success = function(a, b, c) {
  var d = Entry.createElement("div", "entryToast");
  d.addClass("entryToast");
  d.addClass("entryToastSuccess");
  d.bindOnClick(function() {
    Entry.toast.body_.removeChild(this);
  });
  var e = Entry.createElement("div", "entryToast");
  e.addClass("entryToastTitle");
  e.innerHTML = a;
  d.appendChild(e);
  a = Entry.createElement("p", "entryToast");
  a.addClass("entryToastMessage");
  a.innerHTML = b;
  d.appendChild(a);
  this.toasts_.push(d);
  this.body_.appendChild(d);
  c || window.setTimeout(function() {
    d.style.opacity = 1;
    var b = setInterval(function() {
      .05 > d.style.opacity && (clearInterval(b), d.style.display = "none", Entry.removeElement(d));
      d.style.opacity *= .9;
    }, 20);
  }, 1E3);
};
Entry.Toast.prototype.alert = function(a, b, c) {
  var d = Entry.createElement("div", "entryToast"), e;
  d.addClass("entryToast");
  d.addClass("entryToastAlert");
  d.bindOnClick(function() {
    Entry.toast.body_.removeChild(this);
    e && clearInterval(e);
  });
  var f = Entry.createElement("div", "entryToast");
  f.addClass("entryToastTitle");
  f.innerHTML = a;
  d.appendChild(f);
  a = Entry.createElement("p", "entryToast");
  a.addClass("entryToastMessage");
  a.innerHTML = b;
  d.appendChild(a);
  this.toasts_.push(d);
  this.body_.appendChild(d);
  c || window.setTimeout(function() {
    d.style.opacity = 1;
    e = setInterval(function() {
      .05 > d.style.opacity && (clearInterval(e), d.style.display = "none", d.parentElement && Entry.toast.body_.removeChild(d));
      d.style.opacity *= .9;
    }, 20);
  }, 5E3);
};
Entry.TvCast = function(a) {
  this.generateView(a);
};
p = Entry.TvCast.prototype;
p.init = function(a) {
  this.tvCastHash = a;
};
p.generateView = function(a) {
  var b = Entry.createElement("div");
  b.addClass("entryContainerMovieWorkspace");
  b.addClass("entryRemove");
  this.movieContainer = b;
  b = Entry.createElement("iframe");
  b.setAttribute("id", "tvCastIframe");
  b.setAttribute("allowfullscreen", "");
  b.setAttribute("frameborder", 0);
  b.setAttribute("src", a);
  this.movieFrame = b;
  this.movieContainer.appendChild(this.movieFrame);
};
p.getView = function() {
  return this.movieContainer;
};
p.resize = function() {
  document.getElementById("entryContainerWorkspaceId");
  var a = document.getElementById("tvCastIframe");
  w = this.movieContainer.offsetWidth;
  a.width = w + "px";
  a.height = 9 * w / 16 + "px";
};
Entry.ContextMenu = {};
(function(a) {
  a.visible = !1;
  a._hideEvent = null;
  a.createDom = function() {
    this.dom = Entry.Dom("ul", {id:"entry-contextmenu", parent:$("body")});
    this.dom.bind("mousedown touchstart", function(b) {
      b.stopPropagation();
    });
    Entry.Utils.disableContextmenu(this.dom);
  };
  a.show = function(b, a, d) {
    this._hideEvent = Entry.documentMousedown.attach(this, function() {
      this.hide();
    });
    this.dom || this.createDom();
    if (0 !== b.length) {
      var c = this;
      void 0 !== a && (this._className = a, this.dom.addClass(a));
      var f = this.dom;
      f.empty();
      for (var g = 0, h = b.length;g < h;g++) {
        var k = b[g], l = k.text, n = !1 !== k.enable, m = Entry.Dom("li", {parent:f});
        k.divider ? a = "divider" : (a = n ? "menuAble" : "menuDisable", Entry.Dom("span", {parent:m}).text(l), n && k.callback && function(b, a) {
          b.mousedown(function(b) {
            b.preventDefault();
            c.hide();
            a(b);
          });
        }(m, k.callback));
        m.addClass(a);
      }
      f.removeClass("entryRemove");
      this.visible = !0;
      this.position(d || Entry.mouseCoordinate);
    }
  };
  a.position = function(b) {
    var a = this.dom;
    a.css({left:0, top:0});
    var d = a.width(), e = a.height(), f = $(window), g = f.width(), f = f.height();
    b.x + d > g && (b.x -= d + 3);
    b.y + e > f && (b.y -= e);
    a.css({left:b.x, top:b.y});
  };
  a.hide = function() {
    this.visible = !1;
    this.dom.empty();
    this.dom.addClass("entryRemove");
    this._className && (this.dom.removeClass(this._className), delete this._className);
    this._hideEvent && (Entry.documentMousedown.detach(this._hideEvent), this._hideEvent = null);
  };
})(Entry.ContextMenu);
Entry.Curtain = {};
(function() {
  this._visible = !1;
  this._doms = null;
  this._createDom = function() {
    var a = {parent:$("body"), class:"entryCurtainElem entryRemove"};
    this._doms = {top:Entry.Dom("div", a), right:Entry.Dom("div", a), bottom:Entry.Dom("div", a), left:Entry.Dom("div", a)};
  };
  this.show = function(a) {
    a = {top:400, left:130, width:64, height:56};
    !this._doms && this._createDom();
    this._position(a);
    for (var b in this._doms) {
      this._doms[b].removeClass("entryRemove");
    }
  };
  this._position = function(a) {
    a = $(window);
    a.width();
    a.height();
  };
  this.hide = function() {
    if (this._doms) {
      for (var a in this._doms) {
        this._doms[a].addClass("entryRemove");
      }
    }
  };
  this._createDom();
}).call(Entry.Curtain);
Entry.fuzzy = {};
(function(a) {
  var b = {};
  a.fuzzy = b;
  b.simpleFilter = function(a, d) {
    return d.filter(function(c) {
      return b.test(a, c);
    });
  };
  b.test = function(a, d) {
    return null !== b.match(a, d);
  };
  b.match = function(b, a, e) {
    e = e || {};
    var c = 0, d = [], h = a.length, k = 0, l = 0, n = e.pre || "", m = e.post || "", t = e.caseSensitive && a || a.toLowerCase(), u;
    b = e.caseSensitive && b || b.toLowerCase();
    for (var x = 0;x < h;x++) {
      u = a[x];
      if (t[x] === e.escapeLetter) {
        break;
      }
      t[x] === b[c] ? (u = n + u + m, c += 1, l += 1 + l) : l = 0;
      k += l;
      d[d.length] = u;
    }
    return c === b.length ? {rendered:d.join(""), score:k} : null;
  };
  b.filter = function(a, d, e) {
    e = e || {};
    return d.reduce(function(c, d, h, k) {
      k = d;
      e.extract && (k = e.extract(d));
      k = b.match(a, k, e);
      null != k && (c[c.length] = {string:k.rendered, score:k.score, index:h, original:d});
      return c;
    }, []).sort(function(b, a) {
      var c = a.score - b.score;
      return c ? c : b.index - a.index;
    });
  };
})(Entry.Utils);
Entry.Loader = {queueCount:0, totalCount:0, loaded:!1};
Entry.Loader.addQueue = function(a) {
  this.queueCount || Entry.dispatchEvent("loadStart");
  this.queueCount++;
  this.totalCount++;
};
Entry.Loader.removeQueue = function(a) {
  this.queueCount--;
  this.queueCount || (this.totalCount = 0, this.handleLoad());
};
Entry.Loader.getLoadedPercent = function() {
  return 0 === this.totalCount ? 1 : this.queueCount / this.totalCount;
};
Entry.Loader.isLoaded = function() {
  return !this.queueCount && !this.totalCount;
};
Entry.Loader.handleLoad = function() {
  this.loaded || (this.loaded = !0, Entry.dispatchEvent("loadComplete"));
};
Entry.Tooltip = function(a, b) {
  this.data = a instanceof Array ? a : [a];
  this.data.map(function(b) {
    b.target instanceof Array && (b.target = Entry.getDom(b.target));
    b.target = $(b.target);
  });
  this.opts = b || {dimmed:!0, restirct:!1};
  this._tooltips = [];
  this._indicators = [];
  1 < a.length && (this.isIndicator = !0);
  this.render();
  this.opts.restrict && this.restrictAction();
  this._resizeEventFunc = Entry.Utils.debounce(function() {
    this.alignTooltips();
  }.bind(this), 200);
  Entry.addEventListener("windowResized", this._resizeEventFunc);
};
(function(a) {
  a.render = function() {
    this.opts.dimmed && this.renderBG();
    this.renderTooltips();
  };
  a.renderBG = function() {
    this._bg = Entry.Dom("div", {classes:["entryDimmed", "entryTooltipBG"], parent:$(document.body)});
    this._bg.bindOnClick(this.dispose.bind(this));
  };
  a.renderTooltips = function() {
    this.data.map(this._renderTooltip.bind(this));
  };
  a.alignTooltips = function() {
    this.data.map(this._alignTooltip.bind(this));
  };
  a._renderTooltip = function(b) {
    if (b.content) {
      var a = Entry.Dom("div", {classes:["entryTooltipWrapper"], parent:$(document.body)}), d = Entry.Dom("div", {classes:["entryTooltip", b.direction, b.style], parent:a});
      this.isIndicator && (b.indicator = this.renderIndicator());
      d.html(b.content.replace(/\n/gi, "<br>"));
      this._tooltips.push(a);
      b.wrapper = a;
      b.dom = d;
      this._alignTooltip(b);
    }
  };
  a._alignTooltip = function(b) {
    var a = b.target.offset(), d = b.target.get(0).getBoundingClientRect();
    this.isIndicator && b.indicator.css({left:a.left + d.width / 2, top:a.top + d.height / 2});
    switch(b.direction) {
      case "up":
        a.left += d.width / 2;
        a.top -= 11;
        break;
      case "down":
        a.left += d.width / 2;
        a.top += d.height;
        break;
      case "left":
        a.top += d.height / 2;
        a.left -= 11;
        break;
      case "right":
        a.left += d.width, a.top += d.height / 2;
    }
    b.wrapper.css(a);
  };
  a.renderIndicator = function(b, a) {
    b = Entry.Dom("div", {classes:["entryTooltipIndicator"], parent:$(document.body)});
    b.html("<div></div><div></div><div></div>");
    this._indicators.push(b);
    return b;
  };
  a.dispose = function() {
    this._bg && this._bg.remove();
    this.opts.restrict && Entry.Utils.allowAction();
    for (this.opts.callBack && this.opts.callBack.call();this._tooltips.length;) {
      this._tooltips.pop().remove();
    }
    for (;this._indicators.length;) {
      this._indicators.pop().remove();
    }
    Entry.removeEventListener("windowResized", this._resizeEventFunc);
  };
  a.restrictAction = function() {
    var b = this.data.map(function(b) {
      return b.target;
    });
    Entry.Utils.restrictAction(b, this.dispose.bind(this));
  };
})(Entry.Tooltip.prototype);
Entry.Variable = function(a) {
  Entry.assert("string" == typeof a.name, "Variable name must be given");
  this.name_ = a.name;
  this.id_ = a.id ? a.id : Entry.generateHash();
  this.type = a.variableType ? a.variableType : "variable";
  this.object_ = a.object || null;
  this.isCloud_ = a.isCloud || !1;
  this._valueWidth = this._nameWidth = null;
  var b = Entry.parseNumber(a.value);
  this.value_ = "number" == typeof b ? b : a.value ? a.value : 0;
  "slide" == this.type ? (this.setMinValue(a.minValue), this.setMaxValue(a.maxValue)) : "list" == this.type && (this.array_ = a.array ? a.array : []);
  a.isClone || (this.visible_ = a.visible || "boolean" == typeof a.visible ? a.visible : !0, this.x_ = a.x ? a.x : null, this.y_ = a.y ? a.y : null, "list" == this.type && (this.width_ = a.width ? a.width : 100, this.height_ = a.height ? a.height : 120, this.scrollPosition = 0), this.BORDER = 6, this.FONT = "10pt NanumGothic");
  Entry.addEventListener("workspaceChangeMode", this.updateView.bind(this));
};
Entry.Variable.prototype.generateView = function(a) {
  var b = this.type;
  if ("variable" == b || "timer" == b || "answer" == b) {
    this.view_ = new createjs.Container, this.rect_ = new createjs.Shape, this.view_.addChild(this.rect_), this.view_.variable = this, this.wrapper_ = new createjs.Shape, this.view_.addChild(this.wrapper_), this.textView_ = new createjs.Text("asdf", this.FONT, "#000000"), this.textView_.textBaseline = "alphabetic", this.textView_.x = 4, this.textView_.y = 1, this.view_.addChild(this.textView_), this.valueView_ = new createjs.Text("asdf", "10pt NanumGothic", "#ffffff"), this.valueView_.textBaseline = 
    "alphabetic", b = Entry.variableContainer.variables_.length, this.getX() && this.getY() ? (this.setX(this.getX()), this.setY(this.getY())) : (this.setX(-230 + 80 * Math.floor(b / 11)), this.setY(24 * a + 20 - 135 - 264 * Math.floor(b / 11))), this.view_.visible = this.visible_, this.view_.addChild(this.valueView_), this.view_.on("mousedown", function(b) {
      "workspace" == Entry.type && (this.offset = {x:this.x - (.75 * b.stageX - 240), y:this.y - (.75 * b.stageY - 135)}, this.cursor = "move");
    }), this.view_.on("pressmove", function(b) {
      "workspace" == Entry.type && (this.variable.setX(.75 * b.stageX - 240 + this.offset.x), this.variable.setY(.75 * b.stageY - 135 + this.offset.y), this.variable.updateView());
    });
  } else {
    if ("slide" == b) {
      var c = this;
      this.view_ = new createjs.Container;
      this.rect_ = new createjs.Shape;
      this.view_.addChild(this.rect_);
      this.view_.variable = this;
      this.wrapper_ = new createjs.Shape;
      this.view_.addChild(this.wrapper_);
      this.textView_ = new createjs.Text("name", this.FONT, "#000000");
      this.textView_.textBaseline = "alphabetic";
      this.textView_.x = 4;
      this.textView_.y = 1;
      this.view_.addChild(this.textView_);
      this.valueView_ = new createjs.Text("value", "10pt NanumGothic", "#ffffff");
      this.valueView_.textBaseline = "alphabetic";
      this.view_.on("mousedown", function(b) {
        "workspace" == Entry.type && (this.offset = {x:this.x - (.75 * b.stageX - 240), y:this.y - (.75 * b.stageY - 135)});
      });
      this.view_.on("pressmove", function(b) {
        "workspace" != Entry.type || c.isAdjusting || (this.variable.setX(.75 * b.stageX - 240 + this.offset.x), this.variable.setY(.75 * b.stageY - 135 + this.offset.y), this.variable.updateView());
      });
      this.view_.visible = this.visible_;
      this.view_.addChild(this.valueView_);
      b = this.textView_.getMeasuredWidth() + this.valueView_.getMeasuredWidth() + 26;
      b = Math.max(b, 90);
      this.maxWidth = b - 20;
      this.slideBar_ = new createjs.Shape;
      this.slideBar_.graphics.beginFill("#A0A1A1").s("#A0A1A1").ss(1).dr(10, 10, this.maxWidth, 1.5);
      this.view_.addChild(this.slideBar_);
      b = this.getSlidePosition(this.maxWidth);
      this.valueSetter_ = new createjs.Shape;
      this.valueSetter_.graphics.beginFill("#1bafea").s("#A0A1A1").ss(1).dc(b, 10.5, 3);
      this.valueSetter_.cursor = "pointer";
      this.valueSetter_.on("mousedown", function(b) {
        Entry.engine.isState("run") && (c.isAdjusting = !0, this.offsetX = -(this.x - .75 * b.stageX + 240));
      });
      this.valueSetter_.on("pressmove", function(b) {
        if (Entry.engine.isState("run")) {
          var a = this.offsetX;
          this.offsetX = -(this.x - .75 * b.stageX + 240);
          a !== this.offsetX && (b = c.getX(), c.setSlideCommandX(b + 10 > this.offsetX ? 0 : b + c.maxWidth + 10 > this.offsetX ? this.offsetX - b : c.maxWidth + 10));
        }
      });
      this.valueSetter_.on("pressup", function(b) {
        c.isAdjusting = !1;
      });
      this.view_.addChild(this.valueSetter_);
      b = Entry.variableContainer.variables_.length;
      this.getX() && this.getY() ? (this.setX(this.getX()), this.setY(this.getY())) : (this.setX(-230 + 80 * Math.floor(b / 11)), this.setY(24 * a + 20 - 135 - 264 * Math.floor(b / 11)));
    } else {
      this.view_ = new createjs.Container, this.rect_ = new createjs.Shape, this.view_.addChild(this.rect_), this.view_.variable = this, this.titleView_ = new createjs.Text("asdf", this.FONT, "#000"), this.titleView_.textBaseline = "alphabetic", this.titleView_.textAlign = "center", this.titleView_.width = this.width_ - 2 * this.BORDER, this.titleView_.y = this.BORDER + 10, this.titleView_.x = this.width_ / 2, this.view_.addChild(this.titleView_), this.resizeHandle_ = new createjs.Shape, this.resizeHandle_.graphics.f("#1bafea").ss(1, 
      0, 0).s("#1bafea").lt(0, -9).lt(-9, 0).lt(0, 0), this.view_.addChild(this.resizeHandle_), this.resizeHandle_.list = this, this.resizeHandle_.on("mouseover", function(b) {
        this.cursor = "nwse-resize";
      }), this.resizeHandle_.on("mousedown", function(b) {
        this.list.isResizing = !0;
        this.offset = {x:.75 * b.stageX - this.list.getWidth(), y:.75 * b.stageY - this.list.getHeight()};
        this.parent.cursor = "nwse-resize";
      }), this.resizeHandle_.on("pressmove", function(b) {
        this.list.setWidth(.75 * b.stageX - this.offset.x);
        this.list.setHeight(.75 * b.stageY - this.offset.y);
        this.list.updateView();
      }), this.view_.on("mouseover", function(b) {
        this.cursor = "move";
      }), this.view_.on("mousedown", function(b) {
        "workspace" != Entry.type || this.variable.isResizing || (this.offset = {x:this.x - (.75 * b.stageX - 240), y:this.y - (.75 * b.stageY - 135)}, this.cursor = "move");
      }), this.view_.on("pressup", function(b) {
        this.cursor = "initial";
        this.variable.isResizing = !1;
      }), this.view_.on("pressmove", function(b) {
        "workspace" != Entry.type || this.variable.isResizing || (this.variable.setX(.75 * b.stageX - 240 + this.offset.x), this.variable.setY(.75 * b.stageY - 135 + this.offset.y), this.variable.updateView());
      }), this.elementView = new createjs.Container, b = new createjs.Text("asdf", this.FONT, "#000"), b.textBaseline = "middle", b.y = 5, this.elementView.addChild(b), this.elementView.indexView = b, b = new createjs.Shape, this.elementView.addChild(b), this.elementView.valueWrapper = b, b = new createjs.Text("fdsa", this.FONT, "#eee"), b.x = 24, b.y = 6, b.textBaseline = "middle", this.elementView.addChild(b), this.elementView.valueView = b, this.elementView.x = this.BORDER, this.scrollButton_ = 
      new createjs.Shape, this.scrollButton_.graphics.f("#aaa").rr(0, 0, 7, 30, 3.5), this.view_.addChild(this.scrollButton_), this.scrollButton_.y = 23, this.scrollButton_.list = this, this.scrollButton_.on("mousedown", function(b) {
        this.list.isResizing = !0;
        this.cursor = "pointer";
        this.offsetY = isNaN(this.offsetY) || 0 > this.offsetY ? b.rawY / 2 : this.offsetY;
      }), this.scrollButton_.on("pressmove", function(b) {
        void 0 === this.moveAmount ? (this.y = b.target.y, this.moveAmount = !0) : this.y = b.rawY / 2 - this.offsetY + this.list.height_ / 100 * 23;
        23 > this.y && (this.y = 23);
        this.y > this.list.getHeight() - 40 && (this.y = this.list.getHeight() - 40);
        this.list.updateView();
      }), this.scrollButton_.on("pressup", function(b) {
        this.moveAmount = void 0;
      }), this.getX() && this.getY() ? (this.setX(this.getX()), this.setY(this.getY())) : (b = Entry.variableContainer.lists_.length, this.setX(110 * -Math.floor(b / 6) + 120), this.setY(24 * a + 20 - 135 - 145 * Math.floor(b / 6)));
    }
  }
  this.setVisible(this.isVisible());
  this.updateView();
  Entry.stage.loadVariable(this);
};
Entry.Variable.prototype.updateView = function() {
  if (this.view_) {
    if (this.isVisible()) {
      if ("variable" == this.type) {
        this.view_.x = this.getX();
        this.view_.y = this.getY();
        var a = this.textView_.text, b;
        b = this.object_ ? (b = Entry.container.getObject(this.object_)) ? b.name + ":" + this.getName() : this.getName() : this.getName();
        a !== b && (this.textView_.text = b, this._nameWidth = null);
        null === this._nameWidth && (this._nameWidth = this.textView_.getMeasuredWidth());
        this.valueView_.x = this._nameWidth + 14;
        this.valueView_.y = 1;
        this.isNumber() ? this.valueView_.text = this.getValue().toFixed(2).replace(".00", "") : this.valueView_.text = this.getValue();
        null === this._valueWidth && (this._valueWidth = this.valueView_.getMeasuredWidth());
        this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, this._nameWidth + this._valueWidth + 26, 20, 4, 4, 4, 4);
        this.wrapper_.graphics.clear().f("#1bafea").ss(1, 2, 0).s("#1bafea").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7);
      } else {
        if ("slide" == this.type) {
          this.view_.x = this.getX(), this.view_.y = this.getY(), a = this.textView_.text, b = this.object_ ? (b = Entry.container.getObject(this.object_)) ? b.name + ":" + this.getName() : this.getName() : this.getName(), a !== b && (this.textView_.text = b, this._nameWidth = null), null === this._nameWidth && (this._nameWidth = this.textView_.getMeasuredWidth()), this.valueView_.x = this._nameWidth + 14, this.valueView_.y = 1, this.isNumber() ? this.valueView_.text = this.getValue().toFixed(2).replace(".00", 
          "") : this.valueView_.text = this.getValue(), null === this._valueWidth && (this._valueWidth = this.valueView_.getMeasuredWidth()), a = this._nameWidth + this._valueWidth + 26, a = Math.max(a, 90), this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, a, 33, 4, 4, 4, 4), this.wrapper_.graphics.clear().f("#1bafea").ss(1, 2, 0).s("#1bafea").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7), a = this._nameWidth + this._valueWidth + 26, a = Math.max(a, 
          90), this.maxWidth = a - 20, this.slideBar_.graphics.clear().beginFill("#A0A1A1").s("#A0A1A1").ss(1).dr(10, 10, this.maxWidth, 1.5), a = this.getSlidePosition(this.maxWidth), this.valueSetter_.graphics.clear().beginFill("#1bafea").s("#A0A1A1").ss(1).dc(a, 10.5, 3);
        } else {
          if ("list" == this.type) {
            this.view_.x = this.getX();
            this.view_.y = this.getY();
            this.resizeHandle_.x = this.width_ - 2;
            this.resizeHandle_.y = this.height_ - 2;
            a = this.getName();
            this.object_ && (b = Entry.container.getObject(this.object_)) && (a = b.name + ":" + a);
            this.titleView_.text = a;
            if (this.titleView_.getMeasuredWidth() > this.width_) {
              for (a += "..";this.titleView_.getMeasuredWidth() > this.width_;) {
                a = a.substr(0, a.length - 3) + "..", this.titleView_.text = a;
              }
            }
            this.titleView_.x = this.width_ / 2;
            for (this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rect(0, 0, this.width_, this.height_);this.view_.children[4];) {
              this.view_.removeChild(this.view_.children[4]);
            }
            a = Math.floor((this.getHeight() - 20) / 20);
            a < this.array_.length ? (this.scrollButton_.y > this.getHeight() - 40 && (this.scrollButton_.y = this.getHeight() - 40), this.elementView.valueWrapper.graphics.clear().f("#1bafea").rr(20, -2, this.getWidth() - 20 - 10 - 2 * this.BORDER, 17, 2), this.scrollButton_.visible = !0, this.scrollButton_.x = this.getWidth() - 12, this.scrollPosition = Math.floor((this.scrollButton_.y - 23) / (this.getHeight() - 23 - 40) * (this.array_.length - a))) : (this.elementView.valueWrapper.graphics.clear().f("#1bafea").rr(20, 
            -2, this.getWidth() - 20 - 2 * this.BORDER, 17, 2), this.scrollButton_.visible = !1, this.scrollPosition = 0);
            for (b = this.scrollPosition;b < this.scrollPosition + a && b < this.array_.length;b++) {
              Entry.getMainWS() && Entry.getMainWS().getMode() === Entry.Workspace.MODE_VIMBOARD ? this.elementView.indexView.text = b : this.elementView.indexView.text = b + 1;
              var c = String(this.array_[b].data), d = Math.floor((this.getWidth() - 50) / 7), c = Entry.cutStringByLength(c, d), c = String(this.array_[b].data).length > c.length ? c + ".." : c;
              this.elementView.valueView.text = c;
              c = this.elementView.clone(!0);
              c.y = 20 * (b - this.scrollPosition) + 23;
              this.view_.addChild(c);
            }
          } else {
            "answer" == this.type ? (this.view_.x = this.getX(), this.view_.y = this.getY(), this.textView_.text = this.getName(), this.valueView_.y = 1, this.isNumber() ? parseInt(this.getValue(), 10) == this.getValue() ? this.valueView_.text = this.getValue() : this.valueView_.text = this.getValue().toFixed(1).replace(".00", "") : this.valueView_.text = this.getValue(), null === this._nameWidth && (this._nameWidth = this.textView_.getMeasuredWidth()), null === this._valueWidth && (this._valueWidth = 
            this.valueView_.getMeasuredWidth()), this.valueView_.x = this._nameWidth + 14, this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, this._nameWidth + this._valueWidth + 26, 20, 4, 4, 4, 4), this.wrapper_.graphics.clear().f("#E457DC").ss(1, 2, 0).s("#E457DC").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7)) : (this.view_.x = this.getX(), this.view_.y = this.getY(), this.textView_.text = this.getName(), null === this._nameWidth && (this._nameWidth = 
            this.textView_.getMeasuredWidth()), this.valueView_.x = this._nameWidth + 14, this.valueView_.y = 1, this.isNumber() ? this.valueView_.text = this.getValue().toFixed(1).replace(".00", "") : this.valueView_.text = this.getValue(), null === this._valueWidth && (this._valueWidth = this.valueView_.getMeasuredWidth()), this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, this._nameWidth + this._valueWidth + 26, 20, 4, 4, 4, 4), this.wrapper_.graphics.clear().f("#ffbb14").ss(1, 
            2, 0).s("orange").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7));
          }
        }
      }
    }
    Entry.requestUpdate = !0;
  }
};
Entry.Variable.prototype.getName = function() {
  return this.name_;
};
Entry.Variable.prototype.setName = function(a) {
  Entry.assert("string" == typeof a, "Variable name must be string");
  this.name_ = a;
  this._nameWidth = null;
  this.updateView();
  Entry.requestUpdateTwice = !0;
};
Entry.Variable.prototype.getId = function() {
  return this.id_;
};
Entry.Variable.prototype.getValue = function() {
  return this.isNumber() ? Number(this.value_) : this.value_;
};
Entry.Variable.prototype.isNumber = function() {
  return isNaN(this.value_) ? !1 : !0;
};
Entry.Variable.prototype.setValue = function(a) {
  "slide" != this.type ? this.value_ = a : (a = Number(a), this.value_ = a < this.minValue_ ? this.minValue_ : a > this.maxValue_ ? this.maxValue_ : a);
  this.isCloud_ && Entry.variableContainer.updateCloudVariables();
  this._valueWidth = null;
  this.updateView();
  Entry.requestUpdateTwice = !0;
};
Entry.Variable.prototype.isVisible = function() {
  return this.visible_;
};
Entry.Variable.prototype.setVisible = function(a) {
  Entry.assert("boolean" == typeof a, "Variable visible state must be boolean");
  this.visible !== a && (this.visible_ = this.view_.visible = a, this.updateView());
};
Entry.Variable.prototype.setX = function(a) {
  this.x_ = a;
  this.updateView();
};
Entry.Variable.prototype.getX = function() {
  return this.x_;
};
Entry.Variable.prototype.setY = function(a) {
  this.y_ = a;
  this.updateView();
};
Entry.Variable.prototype.getY = function() {
  return this.y_;
};
Entry.Variable.prototype.setWidth = function(a) {
  this.width_ = 100 > a ? 100 : a;
  this.updateView();
};
Entry.Variable.prototype.getWidth = function() {
  return this.width_;
};
Entry.Variable.prototype.isInList = function(a, b) {
  this.getX();
  this.getY();
};
Entry.Variable.prototype.setHeight = function(a) {
  this.height_ = 100 > a ? 100 : a;
  this.updateView();
};
Entry.Variable.prototype.getHeight = function() {
  return this.height_;
};
Entry.Variable.prototype.takeSnapshot = function() {
  this.snapshot_ = this.toJSON();
};
Entry.Variable.prototype.loadSnapshot = function() {
  this.snapshot_ && this.syncModel_(this.snapshot_);
  delete this.snapshot_;
};
Entry.Variable.prototype.syncModel_ = function(a) {
  this.setX(a.x);
  this.setY(a.y);
  this.setVisible(a.visible);
  this.isCloud_ || this.setValue(a.value);
  this.setName(a.name);
  this.isCloud_ = a.isCloud;
  "list" == this.type && (this.isCloud_ || (this.array_ = a.array), this.setWidth(a.width), this.setHeight(a.height));
};
Entry.Variable.prototype.toJSON = function() {
  var a = {};
  a.name = this.name_;
  a.id = this.id_;
  a.visible = this.visible_;
  a.value = this.value_;
  a.variableType = this.type;
  "list" == this.type ? (a.width = this.getWidth(), a.height = this.getHeight(), a.array = JSON.parse(JSON.stringify(this.array_))) : "slide" == this.type && (a.minValue = this.minValue_, a.maxValue = this.maxValue_);
  a.isCloud = this.isCloud_;
  a.object = this.object_;
  a.x = this.x_;
  a.y = this.y_;
  return a;
};
Entry.Variable.prototype.remove = function() {
  Entry.stage.removeVariable(this);
};
Entry.Variable.prototype.clone = function() {
  var a = this.toJSON();
  a.isClone = !0;
  return a = new Entry.Variable(a);
};
Entry.Variable.prototype.getType = function() {
  return this.type;
};
Entry.Variable.prototype.setType = function(a) {
  this.type = a;
};
Entry.Variable.prototype.getSlidePosition = function(a) {
  var b = this.minValue_;
  return Math.abs(this.value_ - b) / Math.abs(this.maxValue_ - b) * a + 10;
};
Entry.Variable.prototype.setSlideCommandX = function(a) {
  var b = this.valueSetter_.graphics.command;
  a = Math.max("undefined" == typeof a ? 10 : a, 10);
  a = Math.min(this.maxWidth + 10, a);
  b.x = a;
  this.updateSlideValueByView();
};
Entry.Variable.prototype.updateSlideValueByView = function() {
  var a = Math.max(this.valueSetter_.graphics.command.x - 10, 0) / this.maxWidth;
  0 > a && (a = 0);
  1 < a && (a = 1);
  var b = parseFloat(this.minValue_), c = parseFloat(this.maxValue_), a = (b + Number(Math.abs(c - b) * a)).toFixed(2), a = parseFloat(a);
  a < b ? a = this.minValue_ : a > c && (a = this.maxValue_);
  this.isFloatPoint() || (a = Math.round(a));
  this.setValue(a);
};
Entry.Variable.prototype.getMinValue = function() {
  return this.minValue_;
};
Entry.Variable.prototype.setMinValue = function(a) {
  this.minValue_ = a = a || 0;
  this.value_ < a && this.setValue(a);
  this.updateView();
  this.isMinFloat = Entry.isFloat(this.minValue_);
};
Entry.Variable.prototype.getMaxValue = function() {
  return this.maxValue_;
};
Entry.Variable.prototype.setMaxValue = function(a) {
  this.maxValue_ = a = a || 100;
  this.value_ > a && (this.value_ = a);
  this.updateView();
  this.isMaxFloat = Entry.isFloat(this.maxValue_);
};
Entry.Variable.prototype.isFloatPoint = function() {
  return this.isMaxFloat || this.isMinFloat;
};
Entry.VariableContainer = function() {
  this.variables_ = [];
  this.messages_ = [];
  this.lists_ = [];
  this.functions_ = {};
  this.viewMode_ = "all";
  this.selected = null;
  this.variableAddPanel = {isOpen:!1, info:{object:null, isCloud:!1}};
  this.listAddPanel = {isOpen:!1, info:{object:null, isCloud:!1}};
  this.selectedVariable = null;
  this._variableRefs = [];
  this._messageRefs = [];
  this._functionRefs = [];
  this.updateList = Entry.Utils.debounce(this.updateList, 150);
  Entry.addEventListener("workspaceChangeMode", this.updateList.bind(this));
};
Entry.VariableContainer.prototype.createDom = function(a) {
  var b = this;
  this.view_ = a;
  var c = Entry.createElement("table");
  c.addClass("entryVariableSelectorWorkspace");
  this.view_.appendChild(c);
  var d = Entry.createElement("tr");
  c.appendChild(d);
  var e = this.createSelectButton("all");
  e.setAttribute("rowspan", "2");
  e.addClass("selected", "allButton");
  d.appendChild(e);
  d.appendChild(this.createSelectButton("variable", Entry.variableEnable));
  d.appendChild(this.createSelectButton("message", Entry.messageEnable));
  d = Entry.createElement("tr");
  d.appendChild(this.createSelectButton("list", Entry.listEnable));
  d.appendChild(this.createSelectButton("func", Entry.functionEnable));
  c.appendChild(d);
  c = Entry.createElement("ul");
  c.addClass("entryVariableListWorkspace");
  this.view_.appendChild(c);
  this.listView_ = c;
  c = Entry.createElement("li");
  c.addClass("entryVariableAddWorkspace entryVariableListElementWorkspace");
  c.innerHTML = "+ " + Lang.Workspace.variable_add;
  var f = this;
  this.variableAddButton_ = c;
  c.bindOnClick(function(a) {
    a = f.variableAddPanel;
    var c = a.view.name.value.trim();
    a.isOpen ? c && 0 !== c.length ? b.addVariable() : (a.view.addClass("entryRemove"), a.isOpen = !1) : (a.view.removeClass("entryRemove"), a.view.name.focus(), a.isOpen = !0);
  });
  this.generateVariableAddView();
  this.generateListAddView();
  this.generateVariableSplitterView();
  this.generateVariableSettingView();
  this.generateListSettingView();
  c = Entry.createElement("li");
  c.addClass("entryVariableAddWorkspace entryVariableListElementWorkspace");
  c.innerHTML = "+ " + Lang.Workspace.message_create;
  this.messageAddButton_ = c;
  c.bindOnClick(function(a) {
    b.addMessage({name:Lang.Workspace.message + " " + (b.messages_.length + 1)});
  });
  c = Entry.createElement("li");
  c.addClass("entryVariableAddWorkspace entryVariableListElementWorkspace");
  c.innerHTML = "+ " + Lang.Workspace.list_create;
  this.listAddButton_ = c;
  c.bindOnClick(function(a) {
    a = f.listAddPanel;
    var c = a.view.name.value.trim();
    a.isOpen ? c && 0 !== c.length ? b.addList() : (a.view.addClass("entryRemove"), a.isOpen = !1) : (a.view.removeClass("entryRemove"), a.view.name.focus(), a.isOpen = !0);
  });
  c = Entry.createElement("li");
  c.addClass("entryVariableAddWorkspace entryVariableListElementWorkspace");
  c.innerHTML = "+ " + Lang.Workspace.function_add;
  this.functionAddButton_ = c;
  c.bindOnClick(function(a) {
    a = Entry.playground;
    var c = b._getBlockMenu();
    a.changeViewMode("code");
    "func" != c.lastSelector && c.selectMenu("func");
    b.createFunction();
  });
  return a;
};
Entry.VariableContainer.prototype.createSelectButton = function(a, b) {
  var c = this;
  void 0 === b && (b = !0);
  var d = Entry.createElement("td");
  d.addClass("entryVariableSelectButtonWorkspace", a);
  d.innerHTML = Lang.Workspace[a];
  b ? d.bindOnClick(function(b) {
    c.selectFilter(a);
    this.addClass("selected");
  }) : d.addClass("disable");
  return d;
};
Entry.VariableContainer.prototype.selectFilter = function(a) {
  for (var b = this.view_.getElementsByTagName("td"), c = 0;c < b.length;c++) {
    b[c].removeClass("selected"), b[c].hasClass(a) && b[c].addClass("selected");
  }
  this.viewMode_ = a;
  this.select();
  this.updateList();
};
Entry.VariableContainer.prototype.updateVariableAddView = function(a) {
  a = "variable" == (a ? a : "variable") ? this.variableAddPanel : this.listAddPanel;
  var b = a.info, c = a.view;
  a.view.addClass("entryRemove");
  c.cloudCheck.removeClass("entryVariableAddChecked");
  c.localCheck.removeClass("entryVariableAddChecked");
  c.globalCheck.removeClass("entryVariableAddChecked");
  c.cloudWrapper.removeClass("entryVariableAddSpaceUnCheckedWorkspace");
  b.isCloud && c.cloudCheck.addClass("entryVariableAddChecked");
  a.isOpen && (c.removeClass("entryRemove"), c.name.focus());
  b.object ? (c.localCheck.addClass("entryVariableAddChecked"), c.cloudWrapper.addClass("entryVariableAddSpaceUnCheckedWorkspace")) : c.globalCheck.addClass("entryVariableAddChecked");
};
Entry.VariableContainer.prototype.select = function(a) {
  a = this.selected == a ? null : a;
  this.selected && (this.selected.listElement.removeClass("selected"), this.selected.callerListElement && (this.listView_.removeChild(this.selected.callerListElement), delete this.selected.callerListElement), this.selected = null);
  a && (a.listElement.addClass("selected"), this.selected = a, a instanceof Entry.Variable ? (this.renderVariableReference(a), a.object_ && Entry.container.selectObject(a.object_, !0)) : a instanceof Entry.Func ? this.renderFunctionReference(a) : this.renderMessageReference(a));
};
Entry.VariableContainer.prototype.getMessage = function(a) {
  return this.messages_.filter(function(b) {
    return b.id === a;
  })[0];
};
Entry.VariableContainer.prototype.renderMessageReference = function(a) {
  for (var b = this, c = this._messageRefs, d = a.id, e = [], f = 0;f < c.length;f++) {
    -1 < c[f].block.params.indexOf(d) && e.push(c[f]);
  }
  c = Entry.createElement("ul");
  c.addClass("entryVariableListCallerListWorkspace");
  for (f in e) {
    var d = e[f], g = Entry.createElement("li");
    g.addClass("entryVariableListCallerWorkspace");
    !d.object.thumbnailView_ && d.object.generateView();
    g.appendChild(d.object.thumbnailView_.cloneNode());
    var h = Entry.createElement("div");
    h.addClass("entryVariableListCallerNameWorkspace");
    h.innerHTML = d.object.name + " : " + Lang.Blocks["START_" + d.block.type];
    g.appendChild(h);
    g.caller = d;
    g.message = a;
    g.bindOnClick(function(a) {
      Entry.playground.object != this.caller.object && (Entry.container.selectObject(), Entry.container.selectObject(this.caller.object.id, !0), b.select(null), b.select(this.message));
      Entry.playground.toggleOnVariableView();
      Entry.playground.changeViewMode("variable");
    });
    c.appendChild(g);
  }
  0 === e.length && (g = Entry.createElement("li"), g.addClass("entryVariableListCallerWorkspace entryVariableListCallerNoneWorkspace"), g.innerHTML = Lang.Workspace.no_use, c.appendChild(g));
  a.callerListElement = c;
  this.listView_.insertBefore(c, a.listElement);
  this.listView_.insertBefore(a.listElement, c);
};
Entry.VariableContainer.prototype.renderVariableReference = function(a) {
  for (var b = this, c = this._variableRefs, d = a.id_, e = [], f = 0;f < c.length;f++) {
    -1 < c[f].block.params.indexOf(d) && e.push(c[f]);
  }
  c = Entry.createElement("ul");
  c.addClass("entryVariableListCallerListWorkspace");
  for (f in e) {
    var d = e[f], g = Entry.createElement("li");
    g.addClass("entryVariableListCallerWorkspace");
    !d.object.thumbnailView_ && d.object.generateView();
    g.appendChild(d.object.thumbnailView_.cloneNode());
    var h = Entry.createElement("div");
    h.addClass("entryVariableListCallerNameWorkspace");
    h.innerHTML = d.object.name + " : " + Lang.Blocks["VARIABLE_" + d.block.type];
    g.appendChild(h);
    g.caller = d;
    g.variable = a;
    g.bindOnClick(function(a) {
      Entry.playground.object != this.caller.object && (Entry.container.selectObject(), Entry.container.selectObject(this.caller.object.id, !0), b.select(null));
      a = this.caller;
      a = a.funcBlock || a.block;
      a.view.getBoard().activateBlock(a);
      Entry.playground.toggleOnVariableView();
      Entry.playground.changeViewMode("variable");
    });
    c.appendChild(g);
  }
  0 === e.length && (g = Entry.createElement("li"), g.addClass("entryVariableListCallerWorkspace entryVariableListCallerNoneWorkspace"), g.innerHTML = Lang.Workspace.no_use, c.appendChild(g));
  a.callerListElement = c;
  this.listView_.insertBefore(c, a.listElement);
  this.listView_.insertBefore(a.listElement, c);
};
Entry.VariableContainer.prototype.renderFunctionReference = function(a) {
  for (var b = this, c = this._functionRefs, d = [], e = 0;e < c.length;e++) {
    d.push(c[e]);
  }
  c = Entry.createElement("ul");
  c.addClass("entryVariableListCallerListWorkspace");
  for (e in d) {
    var f = d[e], g = Entry.createElement("li");
    g.addClass("entryVariableListCallerWorkspace");
    !f.object.thumbnailView_ && f.object.generateView();
    g.appendChild(f.object.thumbnailView_.cloneNode());
    var h = Entry.createElement("div");
    h.addClass("entryVariableListCallerNameWorkspace");
    h.innerHTML = f.object.name;
    g.appendChild(h);
    g.caller = f;
    g.bindOnClick(function(c) {
      Entry.playground.object != this.caller.object && (Entry.container.selectObject(), Entry.container.selectObject(this.caller.object.id, !0), b.select(null), b.select(a));
      c = this.caller.block;
      Entry.playground.toggleOnVariableView();
      c.view.getBoard().activateBlock(c);
      Entry.playground.changeViewMode("variable");
    });
    c.appendChild(g);
  }
  0 === d.length && (g = Entry.createElement("li"), g.addClass("entryVariableListCallerWorkspace entryVariableListCallerNoneWorkspace"), g.innerHTML = Lang.Workspace.no_use, c.appendChild(g));
  a.callerListElement = c;
  this.listView_.insertBefore(c, a.listElement);
  this.listView_.insertBefore(a.listElement, c);
};
Entry.VariableContainer.prototype.updateList = function() {
  if (this.listView_ && (!Entry.playground || "code" === Entry.playground.getViewMode())) {
    this.variableSettingView.addClass("entryRemove");
    this.listSettingView.addClass("entryRemove");
    var a = this._isPythonMode();
    for (a ? this.listView_.addClass("entryVariableContainerTextMode") : this.listView_.removeClass("entryVariableContainerTextMode");this.listView_.firstChild;) {
      this.listView_.removeChild(this.listView_.lastChild);
    }
    var b = this.viewMode_, c = [];
    if ("all" == b || "message" == b) {
      "message" == b && this.listView_.appendChild(this.messageAddButton_);
      for (var d in this.messages_) {
        var e = this.messages_[d];
        c.push(e);
        !e.listElement && this.createMessageView(e);
        var f = e.listElement;
        this.listView_.appendChild(f);
        e.callerListElement && this.listView_.appendChild(e.callerListElement);
      }
    }
    if ("all" == b || "variable" == b) {
      if ("variable" == b) {
        f = this.variableAddPanel.info;
        f.object && !Entry.playground.object && (f.object = null);
        this.listView_.appendChild(this.variableAddButton_);
        this.listView_.appendChild(this.variableAddPanel.view);
        this.variableSplitters.top.innerHTML = Lang.Workspace.Variable_used_at_all_objects;
        this.listView_.appendChild(this.variableSplitters.top);
        for (d in this.variables_) {
          e = this.variables_[d], e.object_ || (c.push(e), !e.listElement && this.createVariableView(e), f = e.listElement, this.listView_.appendChild(f), e.callerListElement && this.listView_.appendChild(e.callerListElement));
        }
        this.variableSplitters.bottom.innerHTML = Lang.Workspace.Variable_used_at_special_object;
        this.listView_.appendChild(this.variableSplitters.bottom);
        for (d in this.variables_) {
          e = this.variables_[d], e.object_ && (c.push(e), !e.listElement && this.createVariableView(e), f = e.listElement, this.listView_.appendChild(f), e.callerListElement && this.listView_.appendChild(e.callerListElement));
        }
        this.updateVariableAddView("variable");
      } else {
        for (d in this.variables_) {
          e = this.variables_[d], c.push(e), !e.listElement && this.createVariableView(e), f = e.listElement, this.listView_.appendChild(f), e.callerListElement && this.listView_.appendChild(e.callerListElement);
        }
      }
    }
    if ("all" == b || "list" == b) {
      if ("list" == b) {
        f = this.listAddPanel.info;
        f.object && !Entry.playground.object && (f.object = null);
        this.listView_.appendChild(this.listAddButton_);
        this.listView_.appendChild(this.listAddPanel.view);
        this.variableSplitters.top.innerHTML = Lang.Workspace.List_used_all_objects;
        this.listView_.appendChild(this.variableSplitters.top);
        this.updateVariableAddView("list");
        for (d in this.lists_) {
          e = this.lists_[d], e.object_ || (c.push(e), !e.listElement && this.createListView(e), f = e.listElement, this.listView_.appendChild(f), e.callerListElement && this.listView_.appendChild(e.callerListElement));
        }
        this.variableSplitters.bottom.innerHTML = Lang.Workspace.list_used_specific_objects;
        this.listView_.appendChild(this.variableSplitters.bottom);
        for (d in this.lists_) {
          e = this.lists_[d], e.object_ && (c.push(e), !e.listElement && this.createListView(e), f = e.listElement, this.listView_.appendChild(f), e.callerListElement && this.listView_.appendChild(e.callerListElement));
        }
        this.updateVariableAddView("variable");
      } else {
        for (d in this.lists_) {
          e = this.lists_[d], c.push(e), !e.listElement && this.createListView(e), f = e.listElement, this.listView_.appendChild(f), e.callerListElement && this.listView_.appendChild(e.callerListElement);
        }
      }
    }
    if ("all" == b || "func" == b) {
      for (d in "func" == b && (b = Entry.Workspace.MODE_BOARD, Entry.getMainWS() && (b = Entry.getMainWS().getMode()), b === Entry.Workspace.MODE_OVERLAYBOARD || a ? this.functionAddButton_.addClass("disable") : this.functionAddButton_.removeClass("disable"), this.listView_.appendChild(this.functionAddButton_)), this.functions_) {
        a = this.functions_[d], c.push(a), !a.funcElement && this.createFunctionView(a), f = a.listElement, this.listView_.appendChild(f), a.callerListElement && this.listView_.appendChild(a.callerListElement);
      }
    }
    this.listView_.appendChild(this.variableSettingView);
    this.listView_.appendChild(this.listSettingView);
  }
};
Entry.VariableContainer.prototype.setMessages = function(a) {
  for (var b in a) {
    var c = a[b];
    c.id || (c.id = Entry.generateHash());
    this.messages_.push(c);
  }
  Entry.playground.reloadPlayground();
};
Entry.VariableContainer.prototype.setVariables = function(a) {
  for (var b in a) {
    var c = new Entry.Variable(a[b]), d = c.getType();
    "variable" == d || "slide" == d ? (c.generateView(this.variables_.length), this.variables_.push(c)) : "list" == d ? (c.generateView(this.lists_.length), this.lists_.push(c)) : "timer" == d ? this.generateTimer(c) : "answer" == d && this.generateAnswer(c);
  }
  Entry.isEmpty(Entry.engine.projectTimer) && Entry.variableContainer.generateTimer();
  Entry.isEmpty(Entry.container.inputValue) && Entry.variableContainer.generateAnswer();
  Entry.playground.reloadPlayground();
};
Entry.VariableContainer.prototype.setFunctions = function(a) {
  for (var b in a) {
    var c = new Entry.Func(a[b]);
    c.generateBlock();
    this.functions_[c.id] = c;
  }
};
Entry.VariableContainer.prototype.getFunction = function(a) {
  return this.functions_[a];
};
Entry.VariableContainer.prototype.getVariable = function(a, b) {
  var c = Entry.findObjsByKey(this.variables_, "id_", a)[0];
  b && b.isClone && c.object_ && (c = Entry.findObjsByKey(b.variables, "id_", a)[0]);
  return c;
};
Entry.VariableContainer.prototype.getList = function(a, b) {
  var c = Entry.findObjsByKey(this.lists_, "id_", a)[0];
  b && b.isClone && c.object_ && (c = Entry.findObjsByKey(b.lists, "id_", a)[0]);
  return c;
};
Entry.VariableContainer.prototype.createFunction = function() {
  if (!Entry.Func.isEdit) {
    var a = new Entry.Func;
    Entry.Func.edit(a);
  }
};
Entry.VariableContainer.prototype.addFunction = function(a) {
};
Entry.VariableContainer.prototype.removeFunction = function(a) {
  var b = a.id;
  a = this.functions_;
  a[b].destroy();
  delete a[b];
  b = "func_" + b;
  Entry.container.removeFuncBlocks(b);
  for (var c in a) {
    a[c].content.removeBlocksByType(b);
  }
  this.updateList();
};
Entry.VariableContainer.prototype.checkListPosition = function(a, b) {
  var c = a.x_ + a.width_, d = -a.y_, e = -a.y_ + -a.height_;
  return b.x > a.x_ && b.x < c && b.y < d && b.y > e ? !0 : !1;
};
Entry.VariableContainer.prototype.getListById = function(a) {
  var b = this.lists_, c = [];
  if (0 < b.length) {
    for (var d = 0;d < b.length;d++) {
      this.checkListPosition(b[d], a) && c.push(b[d]);
    }
    return c;
  }
  return !1;
};
Entry.VariableContainer.prototype.getListByName = function(a) {
  var b = this.lists_, b = b.filter(function(b) {
    return b.getName() === a;
  });
  return b[0];
};
Entry.VariableContainer.prototype.editFunction = function(a, b) {
};
Entry.VariableContainer.prototype.saveFunction = function(a) {
  var b = Entry.getMainWS();
  if (b && b.overlayModefrom == Entry.Workspace.MODE_VIMBOARD && a && a.description && (b = a.description.substring(1, a.description.length - 1), alert_msg = Entry.TextCodingUtil.isNameIncludeSpace(b, "function"))) {
    alert(alert_msg);
    Entry.Func.cancelEdit();
    return;
  }
  this.functions_[a.id] || (this.functions_[a.id] = a, this.createFunctionView(a));
  a.listElement.nameField.innerHTML = a.description;
  this.updateList();
};
Entry.VariableContainer.prototype.createFunctionView = function(a) {
  var b = this;
  if (this.view_) {
    var c = Entry.createElement("li");
    c.addClass("entryVariableListElementWorkspace entryFunctionElementWorkspace");
    c.bindOnClick(function(c) {
      c.stopPropagation();
      b.select(a);
    });
    var d = Entry.createElement("button");
    d.addClass("entryVariableListElementDeleteWorkspace");
    d.bindOnClick(function(c) {
      c.stopPropagation();
      confirm(Lang.Workspace.will_you_delete_function) && (b.removeFunction(a), b.selected = null);
    });
    var e = Entry.createElement("button");
    e.addClass("entryVariableListElementEditWorkspace notForTextMode");
    var f = this._getBlockMenu();
    e.bindOnClick(function(b) {
      b.stopPropagation();
      if (b = Entry.playground) {
        b.changeViewMode("code"), "func" != f.lastSelector && f.selectMenu("func");
      }
      Entry.Func.edit(a);
    });
    var g = Entry.createElement("div");
    g.addClass("entryVariableFunctionElementNameWorkspace");
    g.innerHTML = a.description;
    c.nameField = g;
    c.appendChild(g);
    c.appendChild(e);
    c.appendChild(d);
    a.listElement = c;
  }
};
Entry.VariableContainer.prototype.checkAllVariableName = function(a, b) {
  b = this[b];
  for (var c = 0;c < b.length;c++) {
    if (b[c].name_ == a) {
      return !0;
    }
  }
  return !1;
};
Entry.VariableContainer.prototype.addVariable = function(a) {
  if (Entry.isTextMode) {
    var b = this.variableAddPanel;
    if (alert_msg = Entry.TextCodingUtil.isNameIncludeSpace(b.view.name.value, "variable")) {
      alert(alert_msg);
      this.variableAddPanel.view.addClass("entryRemove");
      this.resetVariableAddPanel("variable");
      return;
    }
  }
  if (!a) {
    b = this.variableAddPanel;
    a = b.view.name.value.trim();
    a && 0 !== a.length || (a = Lang.Workspace.variable);
    a.length > this._maxNameLength && (a = this._truncName(a, "variable"));
    a = this.checkAllVariableName(a, "variables_") ? Entry.getOrderedName(a, this.variables_, "name_") : a;
    var c = b.info;
    a = {name:a, isCloud:c.isCloud, object:c.object, variableType:"variable"};
    b.view.addClass("entryRemove");
    this.resetVariableAddPanel("variable");
  }
  a = new Entry.Variable(a);
  Entry.stateManager && Entry.stateManager.addCommand("add variable", this, this.removeVariable, a);
  a.generateView(this.variables_.length);
  this.createVariableView(a);
  this.variables_.unshift(a);
  Entry.playground && Entry.playground.blockMenu && Entry.playground.blockMenu.deleteRendered("variable");
  Entry.playground.reloadPlayground();
  this.updateList();
  return new Entry.State(this, this.removeVariable, a);
};
Entry.VariableContainer.prototype.removeVariable = function(a) {
  var b = this.variables_.indexOf(a), c = a.toJSON();
  this.selected == a && this.select(null);
  a.remove();
  this.variables_.splice(b, 1);
  Entry.stateManager && Entry.stateManager.addCommand("remove variable", this, this.addVariable, c);
  Entry.playground.reloadPlayground();
  this.updateList();
  return new Entry.State(this, this.addVariable, c);
};
Entry.VariableContainer.prototype.changeVariableName = function(a, b) {
  a.name_ != b && (Entry.isTextMode && (alert_msg = Entry.TextCodingUtil.isNameIncludeSpace(b, "variable")) ? (alert(alert_msg), a.listElement.nameField.value = a.name_) : Entry.isExist(b, "name_", this.variables_) ? (a.listElement.nameField.value = a.name_, Entry.toast.alert(Lang.Workspace.variable_rename_failed, Lang.Workspace.variable_dup)) : 10 < b.length ? (a.listElement.nameField.value = a.name_, Entry.toast.alert(Lang.Workspace.variable_rename_failed, Lang.Workspace.variable_too_long)) : (a.setName(b), 
  Entry.playground.reloadPlayground(), Entry.toast.success(Lang.Workspace.variable_rename, Lang.Workspace.variable_rename_ok)));
};
Entry.VariableContainer.prototype.changeListName = function(a, b) {
  a.name_ != b && (Entry.isTextMode && (alert_msg = Entry.TextCodingUtil.isNameIncludeSpace(b, "list")) ? (alert(alert_msg), a.listElement.nameField.value = a.name_) : Entry.isExist(b, "name_", this.lists_) ? (a.listElement.nameField.value = a.name_, Entry.toast.alert(Lang.Workspace.list_rename_failed, Lang.Workspace.list_dup)) : 10 < b.length ? (a.listElement.nameField.value = a.name_, Entry.toast.alert(Lang.Workspace.list_rename_failed, Lang.Workspace.list_too_long)) : (a.name_ = b, a.updateView(), 
  Entry.playground.reloadPlayground(), Entry.toast.success(Lang.Workspace.list_rename, Lang.Workspace.list_rename_ok)));
};
Entry.VariableContainer.prototype.removeList = function(a) {
  var b = this.lists_.indexOf(a), c = a.toJSON();
  Entry.stateManager && Entry.stateManager.addCommand("remove list", this, this.addList, c);
  this.selected == a && this.select(null);
  a.remove();
  this.lists_.splice(b, 1);
  Entry.playground.reloadPlayground();
  this.updateList();
  return new Entry.State(this, this.addList, c);
};
Entry.VariableContainer.prototype.createVariableView = function(a) {
  var b = this, c = Entry.createElement("li"), d = Entry.createElement("div");
  d.addClass("entryVariableListElementWrapperWorkspace");
  c.appendChild(d);
  var e = "entryVariableListElementWorkspace", e = a.object_ ? e + " entryVariableLocalElementWorkspace" : a.isCloud_ ? e + " entryVariableCloudElementWorkspace" : e + " entryVariableGlobalElementWorkspace";
  c.addClass(e);
  c.bindOnClick(function(c) {
    b.select(a);
  });
  e = Entry.createElement("button");
  e.addClass("entryVariableListElementDeleteWorkspace notForTextMode");
  e.bindOnClick(function(c) {
    c.stopPropagation();
    b.removeVariable(a);
    b.selectedVariable = null;
    b.variableSettingView.addClass("entryRemove");
  });
  this._removeButton = c.removeButton = e;
  var f = Entry.createElement("button");
  f.addClass("entryVariableListElementEditWorkspace");
  f.bindOnClick(function(c) {
    c.stopPropagation();
    h.removeAttribute("disabled");
    g.removeClass("entryRemove");
    this.addClass("entryRemove");
    b.updateSelectedVariable(a);
    h.focus();
  });
  c.editButton = f;
  var g = Entry.createElement("button");
  g.addClass("entryVariableListElementEditWorkspace entryRemove");
  g.bindOnClick(function(a) {
    a.stopPropagation();
    h.blur();
    h.setAttribute("disabled", "disabled");
    f.removeClass("entryRemove");
    this.addClass("entryRemove");
    b.updateSelectedVariable(null, "variable");
  });
  c.editSaveButton = g;
  var h = Entry.createElement("input");
  h.addClass("entryVariableListElementNameWorkspace");
  h.setAttribute("disabled", "disabled");
  h.value = a.name_;
  h.bindOnClick(function(b) {
    b.stopPropagation();
  });
  h.onblur = function(c) {
    (c = this.value.trim()) && 0 !== c.length ? b.changeVariableName(a, this.value) : (Entry.toast.alert(Lang.Msgs.warn, Lang.Workspace.variable_can_not_space), this.value = a.getName());
  };
  h.onkeydown = function(b) {
    13 == b.keyCode && this.blur();
  };
  c.nameField = h;
  d.appendChild(h);
  d.appendChild(f);
  d.appendChild(g);
  d.appendChild(e);
  a.listElement = c;
};
Entry.VariableContainer.prototype.addMessage = function(a) {
  a.id || (a.id = Entry.generateHash());
  Entry.stateManager && Entry.stateManager.addCommand("add message", this, this.removeMessage, a);
  this.createMessageView(a);
  this.messages_.unshift(a);
  Entry.playground && Entry.playground.blockMenu && Entry.playground.blockMenu.deleteRendered("start");
  Entry.playground.reloadPlayground();
  this.updateList();
  a.listElement.nameField.focus();
  return new Entry.State(this, this.removeMessage, a);
};
Entry.VariableContainer.prototype.removeMessage = function(a) {
  this.selected == a && this.select(null);
  Entry.stateManager && Entry.stateManager.addCommand("remove message", this, this.addMessage, a);
  var b = this.messages_.indexOf(a);
  this.messages_.splice(b, 1);
  this.updateList();
  Entry.playground.reloadPlayground();
  return new Entry.State(this, this.addMessage, a);
};
Entry.VariableContainer.prototype.changeMessageName = function(a, b) {
  a.name != b && (Entry.isExist(b, "name", this.messages_) ? (a.listElement.nameField.value = a.name, Entry.toast.alert(Lang.Workspace.message_rename_failed, Lang.Workspace.message_dup)) : 10 < b.length ? (a.listElement.nameField.value = a.name, Entry.toast.alert(Lang.Workspace.message_rename_failed, Lang.Workspace.message_too_long)) : (a.name = b, Entry.playground && Entry.playground.blockMenu && Entry.playground.blockMenu.deleteRendered("start"), Entry.playground.reloadPlayground(), Entry.toast.success(Lang.Workspace.message_rename, 
  Lang.Workspace.message_rename_ok)));
};
Entry.VariableContainer.prototype.createMessageView = function(a) {
  var b = this, c = Entry.createElement("li");
  c.addClass("entryVariableListElementWorkspace entryMessageElementWorkspace");
  c.bindOnClick(function(c) {
    b.select(a);
  });
  var d = Entry.createElement("button");
  d.addClass("entryVariableListElementDeleteWorkspace");
  d.bindOnClick(function(c) {
    c.stopPropagation();
    b.removeMessage(a);
  });
  var e = Entry.createElement("button");
  e.addClass("entryVariableListElementEditWorkspace");
  e.bindOnClick(function(b) {
    b.stopPropagation();
    g.removeAttribute("disabled");
    g.focus();
    f.removeClass("entryRemove");
    this.addClass("entryRemove");
  });
  var f = Entry.createElement("button");
  f.addClass("entryVariableListElementEditWorkspace entryRemove");
  f.bindOnClick(function(b) {
    b.stopPropagation();
    g.blur();
    e.removeClass("entryRemove");
    this.addClass("entryRemove");
  });
  var g = Entry.createElement("input");
  g.addClass("entryVariableListElementNameWorkspace");
  g.value = a.name;
  g.bindOnClick(function(b) {
    b.stopPropagation();
  });
  g.onblur = function(c) {
    (c = this.value.trim()) && 0 !== c.length ? (b.changeMessageName(a, this.value), e.removeClass("entryRemove"), f.addClass("entryRemove"), g.setAttribute("disabled", "disabled")) : (Entry.toast.alert(Lang.Msgs.warn, Lang.Msgs.sign_can_not_space), this.value = a.name);
  };
  g.onkeydown = function(b) {
    13 == b.keyCode && this.blur();
  };
  c.nameField = g;
  c.appendChild(g);
  c.appendChild(e);
  c.appendChild(f);
  c.appendChild(d);
  a.listElement = c;
};
Entry.VariableContainer.prototype.addList = function(a) {
  if (Entry.isTextMode) {
    var b = this.listAddPanel;
    if (alert_msg = Entry.TextCodingUtil.isNameIncludeSpace(b.view.name.value, "list")) {
      alert(alert_msg);
      this.listAddPanel.view.addClass("entryRemove");
      this.resetVariableAddPanel("list");
      return;
    }
  }
  if (!a) {
    b = this.listAddPanel;
    a = b.view.name.value.trim();
    a && 0 !== a.length || (a = Lang.Workspace.list);
    var c = b.info;
    a.length > this._maxNameLength && (a = this._truncName(a, "list"));
    a = this.checkAllVariableName(a, "lists_") ? Entry.getOrderedName(a, this.lists_, "name_") : a;
    a = {name:a, isCloud:c.isCloud, object:c.object, variableType:"list"};
    b.view.addClass("entryRemove");
    this.resetVariableAddPanel("list");
  }
  a = new Entry.Variable(a);
  Entry.stateManager && Entry.stateManager.addCommand("add list", this, this.removeList, a);
  a.generateView(this.lists_.length);
  this.createListView(a);
  this.lists_.unshift(a);
  Entry.playground && Entry.playground.blockMenu && Entry.playground.blockMenu.deleteRendered("variable");
  Entry.playground.reloadPlayground();
  this.updateList();
  return new Entry.State(this, this.removelist, a);
};
Entry.VariableContainer.prototype.createListView = function(a) {
  var b = this, c = Entry.createElement("li"), d = Entry.createElement("div");
  d.addClass("entryVariableListElementWrapperWorkspace");
  c.appendChild(d);
  c.addClass("entryVariableListElementWorkspace");
  a.object_ ? c.addClass("entryListLocalElementWorkspace") : a.isCloud_ ? c.addClass("entryListCloudElementWorkspace") : c.addClass("entryListGlobalElementWorkspace");
  c.bindOnClick(function(c) {
    b.select(a);
  });
  var e = Entry.createElement("button");
  e.addClass("entryVariableListElementDeleteWorkspace notForTextMode");
  e.bindOnClick(function(c) {
    c.stopPropagation();
    b.removeList(a);
    b.selectedList = null;
    b.listSettingView.addClass("entryRemove");
  });
  var f = Entry.createElement("button");
  f.addClass("entryVariableListElementEditWorkspace");
  f.bindOnClick(function(c) {
    c.stopPropagation();
    h.removeAttribute("disabled");
    g.removeClass("entryRemove");
    this.addClass("entryRemove");
    b.updateSelectedVariable(a);
    h.focus();
  });
  c.editButton = f;
  var g = Entry.createElement("button");
  g.addClass("entryVariableListElementEditWorkspace entryRemove");
  g.bindOnClick(function(c) {
    c.stopPropagation();
    h.blur();
    h.setAttribute("disabled", "disabled");
    f.removeClass("entryRemove");
    this.addClass("entryRemove");
    b.select(a);
    b.updateSelectedVariable(null, "list");
  });
  c.editSaveButton = g;
  var h = Entry.createElement("input");
  h.setAttribute("disabled", "disabled");
  h.addClass("entryVariableListElementNameWorkspace");
  h.value = a.name_;
  h.bindOnClick(function(b) {
    b.stopPropagation();
  });
  h.onblur = function(c) {
    (c = this.value.trim()) && 0 !== c.length ? b.changeListName(a, this.value) : (Entry.toast.alert(Lang.Msgs.warn, Lang.Msgs.list_can_not_space), this.value = a.getName());
  };
  h.onkeydown = function(b) {
    13 == b.keyCode && this.blur();
  };
  c.nameField = h;
  d.appendChild(h);
  d.appendChild(f);
  d.appendChild(g);
  d.appendChild(e);
  a.listElement = c;
};
Entry.VariableContainer.prototype.mapVariable = function(a, b) {
  for (var c = this.variables_.length, d = 0;d < c;d++) {
    a(this.variables_[d], b);
  }
};
Entry.VariableContainer.prototype.mapList = function(a, b) {
  for (var c = this.lists_.length, d = 0;d < c;d++) {
    a(this.lists_[d], b);
  }
};
Entry.VariableContainer.prototype.getVariableJSON = function() {
  for (var a = [], b = 0;b < this.variables_.length;b++) {
    a.push(this.variables_[b].toJSON());
  }
  for (b = 0;b < this.lists_.length;b++) {
    a.push(this.lists_[b].toJSON());
  }
  Entry.engine.projectTimer && a.push(Entry.engine.projectTimer.toJSON());
  b = Entry.container.inputValue;
  Entry.isEmpty(b) || a.push(b.toJSON());
  return a;
};
Entry.VariableContainer.prototype.getMessageJSON = function() {
  for (var a = [], b = 0;b < this.messages_.length;b++) {
    a.push({id:this.messages_[b].id, name:this.messages_[b].name});
  }
  return a;
};
Entry.VariableContainer.prototype.getFunctionJSON = function() {
  var a = [], b;
  for (b in this.functions_) {
    var c = this.functions_[b], c = {id:c.id, content:JSON.stringify(c.content.toJSON())};
    a.push(c);
  }
  return a;
};
Entry.VariableContainer.prototype.resetVariableAddPanel = function(a) {
  a = a || "variable";
  var b = "variable" == a ? this.variableAddPanel : this.listAddPanel, c = b.info;
  c.isCloud = !1;
  c.object = null;
  b.view.name.value = "";
  b.isOpen = !1;
  this.updateVariableAddView(a);
};
Entry.VariableContainer.prototype.generateVariableAddView = function() {
  var a = this, b = Entry.createElement("li");
  this.variableAddPanel.view = b;
  this.variableAddPanel.isOpen = !1;
  b.addClass("entryVariableAddSpaceWorkspace entryRemove");
  var c = Entry.createElement("div");
  c.addClass("entryVariableAddSpaceNameWrapperWorkspace");
  b.appendChild(c);
  var d = Entry.createElement("input");
  d.addClass("entryVariableAddSpaceInputWorkspace");
  d.setAttribute("placeholder", Lang.Workspace.Variable_placeholder_name);
  d.variableContainer = this;
  d.onkeypress = function(b) {
    13 == b.keyCode && (Entry.variableContainer.addVariable(), a.updateSelectedVariable(a.variables_[0]), b = a.variables_[0].listElement, b.editButton.addClass("entryRemove"), b.editSaveButton.removeClass("entryRemove"), b.nameField.removeAttribute("disabled"));
  };
  this.variableAddPanel.view.name = d;
  c.appendChild(d);
  c = Entry.createElement("div");
  c.addClass("entryVariableAddSpaceGlobalWrapperWorkspace");
  c.bindOnClick(function(b) {
    a.variableAddPanel.info.object = null;
    a.updateVariableAddView("variable");
  });
  b.appendChild(c);
  d = Entry.createElement("span");
  d.innerHTML = Lang.Workspace.Variable_use_all_objects;
  c.appendChild(d);
  d = Entry.createElement("span");
  d.addClass("entryVariableAddSpaceCheckWorkspace");
  this.variableAddPanel.view.globalCheck = d;
  this.variableAddPanel.info.object || d.addClass("entryVariableAddChecked");
  c.appendChild(d);
  c = Entry.createElement("div");
  c.addClass("entryVariableAddSpaceLocalWrapperWorkspace");
  c.bindOnClick(function(b) {
    Entry.playground.object && (b = a.variableAddPanel.info, b.object = Entry.playground.object.id, b.isCloud = !1, a.updateVariableAddView("variable"));
  });
  b.appendChild(c);
  d = Entry.createElement("span");
  d.innerHTML = Lang.Workspace.Variable_use_this_object;
  c.appendChild(d);
  d = Entry.createElement("span");
  d.addClass("entryVariableAddSpaceCheckWorkspace");
  this.variableAddPanel.view.localCheck = d;
  this.variableAddPanel.info.object && d.addClass("entryVariableAddChecked");
  c.appendChild(d);
  c = Entry.createElement("div");
  b.cloudWrapper = c;
  c.addClass("entryVariableAddSpaceCloudWrapperWorkspace");
  c.bindOnClick(function(b) {
    b = a.variableAddPanel.info;
    b.object || (b.isCloud = !b.isCloud, a.updateVariableAddView("variable"));
  });
  b.appendChild(c);
  d = Entry.createElement("span");
  d.addClass("entryVariableAddSpaceCloudSpanWorkspace");
  d.innerHTML = Lang.Workspace.Variable_create_cloud;
  c.appendChild(d);
  d = Entry.createElement("span");
  this.variableAddPanel.view.cloudCheck = d;
  d.addClass("entryVariableAddSpaceCheckWorkspace entryVariableAddSpaceCloudCheckWorkspace");
  this.variableAddPanel.info.isCloud && d.addClass("entryVariableAddChecked");
  c.appendChild(d);
  c = Entry.createElement("div");
  c.addClass("entryVariableAddSpaceButtonWrapperWorkspace");
  b.appendChild(c);
  b = Entry.createElement("span");
  b.addClass("entryVariableAddSpaceCancelWorkspace entryVariableAddSpaceButtonWorkspace");
  b.innerHTML = Lang.Buttons.cancel;
  b.bindOnClick(function(b) {
    a.variableAddPanel.view.addClass("entryRemove");
    a.resetVariableAddPanel("variable");
  });
  c.appendChild(b);
  b = Entry.createElement("span");
  b.addClass("entryVariableAddSpaceConfirmWorkspace entryVariableAddSpaceButtonWorkspace");
  b.innerHTML = Lang.Buttons.save;
  b.variableContainer = this;
  b.bindOnClick(function(b) {
    Entry.variableContainer.addVariable();
    a.updateSelectedVariable(a.variables_[0]);
    b = a.variables_[0].listElement;
    b.editButton.addClass("entryRemove");
    b.editSaveButton.removeClass("entryRemove");
    b.nameField.removeAttribute("disabled");
  });
  c.appendChild(b);
};
Entry.VariableContainer.prototype.generateListAddView = function() {
  var a = this, b = Entry.createElement("li");
  this.listAddPanel.view = b;
  this.listAddPanel.isOpen = !1;
  b.addClass("entryVariableAddSpaceWorkspace entryRemove");
  var c = Entry.createElement("div");
  c.addClass("entryVariableAddSpaceNameWrapperWorkspace entryListAddSpaceNameWrapperWorkspace");
  b.appendChild(c);
  var d = Entry.createElement("input");
  d.addClass("entryVariableAddSpaceInputWorkspace");
  d.setAttribute("placeholder", Lang.Workspace.list_name);
  this.listAddPanel.view.name = d;
  d.variableContainer = this;
  d.onkeypress = function(b) {
    13 == b.keyCode && (a.addList(), b = a.lists_[0], a.updateSelectedVariable(b), b = b.listElement, b.editButton.addClass("entryRemove"), b.editSaveButton.removeClass("entryRemove"), b.nameField.removeAttribute("disabled"));
  };
  c.appendChild(d);
  c = Entry.createElement("div");
  c.addClass("entryVariableAddSpaceGlobalWrapperWorkspace");
  c.bindOnClick(function(b) {
    a.listAddPanel.info.object = null;
    a.updateVariableAddView("list");
  });
  b.appendChild(c);
  d = Entry.createElement("span");
  d.innerHTML = Lang.Workspace.use_all_objects;
  c.appendChild(d);
  d = Entry.createElement("span");
  d.addClass("entryVariableAddSpaceCheckWorkspace");
  this.listAddPanel.view.globalCheck = d;
  this.listAddPanel.info.object || d.addClass("entryVariableAddChecked");
  c.appendChild(d);
  c = Entry.createElement("div");
  c.addClass("entryVariableAddSpaceLocalWrapperWorkspace");
  c.bindOnClick(function(b) {
    Entry.playground.object && (b = a.listAddPanel.info, b.object = Entry.playground.object.id, b.isCloud = !1, a.updateVariableAddView("list"));
  });
  b.appendChild(c);
  d = Entry.createElement("span");
  d.innerHTML = Lang.Workspace.Variable_use_this_object;
  c.appendChild(d);
  d = Entry.createElement("span");
  d.addClass("entryVariableAddSpaceCheckWorkspace");
  this.listAddPanel.view.localCheck = d;
  this.variableAddPanel.info.object && addVariableLocalCheck.addClass("entryVariableAddChecked");
  c.appendChild(d);
  c = Entry.createElement("div");
  b.cloudWrapper = c;
  c.addClass("entryVariableAddSpaceCloudWrapperWorkspace");
  c.bindOnClick(function(b) {
    b = a.listAddPanel.info;
    b.object || (b.isCloud = !b.isCloud, a.updateVariableAddView("list"));
  });
  b.appendChild(c);
  d = Entry.createElement("span");
  d.addClass("entryVariableAddSpaceCloudSpanWorkspace");
  d.innerHTML = Lang.Workspace.List_create_cloud;
  c.appendChild(d);
  d = Entry.createElement("span");
  this.listAddPanel.view.cloudCheck = d;
  d.addClass("entryVariableAddSpaceCheckWorkspace entryVariableAddSpaceCloudCheckWorkspace");
  this.listAddPanel.info.isCloud && d.addClass("entryVariableAddChecked");
  c.appendChild(d);
  c = Entry.createElement("div");
  c.addClass("entryVariableAddSpaceButtonWrapperWorkspace");
  b.appendChild(c);
  b = Entry.createElement("span");
  b.addClass("entryVariableAddSpaceCancelWorkspace entryVariableAddSpaceButtonWorkspace");
  b.innerHTML = Lang.Buttons.cancel;
  b.bindOnClick(function(b) {
    a.listAddPanel.view.addClass("entryRemove");
    a.resetVariableAddPanel("list");
  });
  c.appendChild(b);
  b = Entry.createElement("span");
  b.addClass("entryVariableAddSpaceConfirmWorkspace entryVariableAddSpaceButtonWorkspace");
  b.innerHTML = Lang.Buttons.save;
  b.variableContainer = this;
  b.bindOnClick(function(b) {
    a.addList();
    b = a.lists_[0];
    a.updateSelectedVariable(b);
    b = b.listElement;
    b.editButton.addClass("entryRemove");
    b.editSaveButton.removeClass("entryRemove");
    b.nameField.removeAttribute("disabled");
  });
  c.appendChild(b);
};
Entry.VariableContainer.prototype.generateVariableSplitterView = function() {
  var a = Entry.createElement("li");
  a.addClass("entryVariableSplitterWorkspace");
  var b = Entry.createElement("li");
  b.addClass("entryVariableSplitterWorkspace");
  this.variableSplitters = {top:a, bottom:b};
};
Entry.VariableContainer.prototype.openVariableAddPanel = function(a) {
  a = a ? a : "variable";
  Entry.playground.toggleOnVariableView();
  Entry.playground.changeViewMode("variable");
  "variable" == a ? this.variableAddPanel.isOpen = !0 : this.listAddPanel.isOpen = !0;
  this.selectFilter(a);
  this.updateVariableAddView(a);
};
Entry.VariableContainer.prototype.getMenuXml = function(a) {
  for (var b = [], c = 0 !== this.variables_.length, d = 0 !== this.lists_.length, e, f = 0, g;g = a[f];f++) {
    var h = g.tagName;
    h && "BLOCK" == h.toUpperCase() ? (e = g.getAttribute("bCategory"), !c && "variable" == e || !d && "list" == e || b.push(g)) : !h || "SPLITTER" != h.toUpperCase() && "BTN" != h.toUpperCase() || !c && "variable" == e || (d || "list" != e) && b.push(g);
  }
  return b;
};
Entry.VariableContainer.prototype.addCloneLocalVariables = function(a) {
  var b = [], c = this;
  this.mapVariable(function(a, c) {
    a.object_ && a.object_ == c.objectId && (a = a.toJSON(), a.originId = a.id, a.id = Entry.generateHash(), a.object = c.newObjectId, delete a.x, delete a.y, b.push(a), c.json.script = c.json.script.replace(new RegExp(a.originId, "g"), a.id));
  }, a);
  b.map(function(b) {
    c.addVariable(b);
  });
};
Entry.VariableContainer.prototype.generateTimer = function(a) {
  a || (a = {}, a.id = Entry.generateHash(), a.name = Lang.Workspace.Variable_Timer, a.value = 0, a.variableType = "timer", a.visible = !1, a.x = 150, a.y = -70, a = new Entry.Variable(a));
  a.generateView();
  a.tick = null;
  Entry.engine.projectTimer = a;
  Entry.addEventListener("stop", function() {
    Entry.engine.stopProjectTimer();
  }.bind(this));
};
Entry.VariableContainer.prototype.generateAnswer = function(a) {
  a || (a = new Entry.Variable({id:Entry.generateHash(), name:Lang.Blocks.VARIABLE_get_canvas_input_value, value:0, variableType:"answer", visible:!1, x:150, y:-100}));
  a.generateView();
  Entry.container.inputValue = a;
};
Entry.VariableContainer.prototype.generateVariableSettingView = function() {
  var a = this, b = Entry.createElement("div");
  b.bindOnClick(function(b) {
    b.stopPropagation();
  });
  this.variableSettingView = b;
  b.addClass("entryVariableSettingWorkspace");
  this.listView_.appendChild(b);
  b.addClass("entryRemove");
  var c = Entry.createElement("div");
  c.addClass("entryVariableSettingVisibleWrapperWorkspace");
  c.bindOnClick(function(b) {
    b = a.selectedVariable;
    var c = a.variableSettingView.visibleCheck;
    b.setVisible(!b.isVisible());
    b.isVisible() ? c.addClass("entryVariableSettingChecked") : c.removeClass("entryVariableSettingChecked");
  });
  b.appendChild(c);
  var d = Entry.createElement("span");
  d.innerHTML = Lang.Workspace.show_variable;
  c.appendChild(d);
  d = Entry.createElement("span");
  d.addClass("entryVariableSettingCheckWorkspace");
  b.visibleCheck = d;
  c.appendChild(d);
  c = Entry.createElement("div");
  c.addClass("entryVariableSettingInitValueWrapperWorkspace");
  b.appendChild(c);
  d = Entry.createElement("span");
  d.innerHTML = Lang.Workspace.default_value;
  c.appendChild(d);
  d = Entry.createElement("input");
  d.addClass("entryVariableSettingInitValueInputWorkspace");
  b.initValueInput = d;
  d.value = 0;
  d.onkeyup = function(b) {
    a.selectedVariable.setValue(this.value);
  };
  d.onblur = function(b) {
    a.selectedVariable.setValue(this.value);
  };
  b.initValueInput = d;
  c.appendChild(d);
  c = Entry.createElement("div");
  c.addClass("entryVariableSettingSplitterWorkspace");
  b.appendChild(c);
  c = Entry.createElement("div");
  c.addClass("entryVariableSettingSlideWrapperWorkspace");
  b.appendChild(c);
  d = Entry.createElement("span");
  d.innerHTML = Lang.Workspace.slide;
  c.appendChild(d);
  d = Entry.createElement("span");
  d.addClass("entryVariableSettingCheckWorkspace");
  b.slideCheck = d;
  c.appendChild(d);
  c.bindOnClick(function(b) {
    var c;
    b = a.selectedVariable;
    var d = a.variables_, f = b.getType();
    "variable" == f ? (c = b.toJSON(), c.variableType = "slide", c = new Entry.Variable(c), d.splice(d.indexOf(b), 0, c), 0 > c.getValue() && c.setValue(0), 100 < c.getValue() && c.setValue(100), e.removeAttribute("disabled"), g.removeAttribute("disabled")) : "slide" == f && (c = b.toJSON(), c.variableType = "variable", c = new Entry.Variable(c), d.splice(d.indexOf(b), 0, c), e.setAttribute("disabled", "disabled"), g.setAttribute("disabled", "disabled"));
    a.createVariableView(c);
    a.removeVariable(b);
    a.updateSelectedVariable(c);
    c.generateView();
  });
  c = Entry.createElement("div");
  b.minMaxWrapper = c;
  c.addClass("entryVariableSettingMinMaxWrapperWorkspace");
  b.appendChild(c);
  d = Entry.createElement("span");
  d.innerHTML = Lang.Workspace.min_value;
  c.appendChild(d);
  var e = Entry.createElement("input");
  e.addClass("entryVariableSettingMinValueInputWorkspace");
  d = a.selectedVariable;
  e.value = d && "slide" == d.type ? d.minValue_ : 0;
  e.onkeypress = function(b) {
    13 === b.keyCode && this.blur();
  };
  e.onblur = function(b) {
    isNaN(this.value) || (b = a.selectedVariable, b.setMinValue(this.value), a.updateVariableSettingView(b));
  };
  b.minValueInput = e;
  c.appendChild(e);
  var f = Entry.createElement("span");
  f.addClass("entryVariableSettingMaxValueSpanWorkspace");
  f.innerHTML = Lang.Workspace.max_value;
  c.appendChild(f);
  var g = Entry.createElement("input");
  g.addClass("entryVariableSettingMaxValueInputWorkspace");
  g.value = d && "slide" == d.type ? d.maxValue_ : 100;
  g.onkeypress = function(b) {
    13 === b.keyCode && this.blur();
  };
  g.onblur = function(b) {
    isNaN(this.value) || (b = a.selectedVariable, b.setMaxValue(this.value), a.updateVariableSettingView(b));
  };
  b.maxValueInput = g;
  c.appendChild(g);
};
Entry.VariableContainer.prototype.updateVariableSettingView = function(a) {
  var b = this.variableSettingView, c = b.visibleCheck, d = b.initValueInput, e = b.slideCheck, f = b.minValueInput, g = b.maxValueInput, h = b.minMaxWrapper;
  c.removeClass("entryVariableSettingChecked");
  a.isVisible() && c.addClass("entryVariableSettingChecked");
  e.removeClass("entryVariableSettingChecked");
  "slide" == a.getType() ? (e.addClass("entryVariableSettingChecked"), f.removeAttribute("disabled"), g.removeAttribute("disabled"), f.value = a.getMinValue(), g.value = a.getMaxValue(), h.removeClass("entryVariableMinMaxDisabledWorkspace")) : (h.addClass("entryVariableMinMaxDisabledWorkspace"), f.setAttribute("disabled", "disabled"), g.setAttribute("disabled", "disabled"));
  d.value = a.getValue();
  a.listElement.appendChild(b);
  b.removeClass("entryRemove");
};
Entry.VariableContainer.prototype.generateListSettingView = function() {
  var a = this, b = Entry.createElement("div");
  b.bindOnClick(function(b) {
    b.stopPropagation();
  });
  this.listSettingView = b;
  b.addClass("entryListSettingWorkspace");
  this.listView_.appendChild(b);
  b.addClass("entryRemove");
  var c = Entry.createElement("div");
  c.addClass("entryListSettingVisibleWrapperWorkspace");
  c.bindOnClick(function(b) {
    b = a.selectedList;
    var c = a.listSettingView.visibleCheck;
    b.setVisible(!b.isVisible());
    b.isVisible() ? c.addClass("entryListSettingCheckedWorkspace") : c.removeClass("entryListSettingCheckedWorkspace");
  });
  b.appendChild(c);
  var d = Entry.createElement("span");
  d.innerHTML = Lang.Workspace.show_list_workspace;
  c.appendChild(d);
  d = Entry.createElement("span");
  d.addClass("entryListSettingCheckWorkspace");
  b.visibleCheck = d;
  c.appendChild(d);
  d = Entry.createElement("div");
  d.addClass("entryListSettingLengthWrapperWorkspace");
  c = Entry.createElement("span");
  c.addClass("entryListSettingLengthSpanWorkspace");
  c.innerHTML = Lang.Workspace.number_of_list;
  d.appendChild(c);
  b.appendChild(d);
  c = Entry.createElement("div");
  c.addClass("entryListSettingLengthControllerWorkspace");
  d.appendChild(c);
  d = Entry.createElement("span");
  d.addClass("entryListSettingMinusWorkspace");
  d.bindOnClick(function(b) {
    a.selectedList.array_.pop();
    a.updateListSettingView(a.selectedList);
  });
  c.appendChild(d);
  d = Entry.createElement("input");
  d.addClass("entryListSettingLengthInputWorkspace");
  d.onblur = function() {
    a.setListLength(this.value);
  };
  d.onkeypress = function(b) {
    13 == b.keyCode && this.blur();
  };
  b.lengthInput = d;
  c.appendChild(d);
  d = Entry.createElement("span");
  d.addClass("entryListSettingPlusWorkspace");
  d.bindOnClick(function(b) {
    a.selectedList.array_.push({data:0});
    a.updateListSettingView(a.selectedList);
  });
  c.appendChild(d);
  c = Entry.createElement("div");
  b.seperator = c;
  b.appendChild(c);
  c.addClass("entryListSettingSeperatorWorkspace");
  c = Entry.createElement("div");
  c.addClass("entryListSettingListValuesWorkspace");
  b.listValues = c;
  b.appendChild(c);
};
Entry.VariableContainer.prototype.updateListSettingView = function(a) {
  var b = this;
  a = a || this.selectedList;
  var c = this.listSettingView, d = c.listValues, e = c.visibleCheck, f = c.lengthInput, g = c.seperator;
  e.removeClass("entryListSettingCheckedWorkspace");
  a.isVisible() && e.addClass("entryListSettingCheckedWorkspace");
  f.value = a.array_.length;
  for (a.listElement.appendChild(c);d.firstChild;) {
    d.removeChild(d.firstChild);
  }
  var h = a.array_;
  0 === h.length ? g.addClass("entryRemove") : g.removeClass("entryRemove");
  var k = 1;
  Entry.playground.mainWorkspace.mode === Entry.Workspace.MODE_VIMBOARD && (k = 0);
  for (e = 0;e < h.length;e++) {
    (function(c) {
      var e = Entry.createElement("div");
      e.addClass("entryListSettingValueWrapperWorkspace");
      var f = Entry.createElement("span");
      f.addClass("entryListSettingValueNumberSpanWorkspace");
      f.innerHTML = c + k;
      e.appendChild(f);
      f = Entry.createElement("input");
      f.value = h[c].data;
      f.onblur = function() {
        h[c].data = this.value;
        a.updateView();
      };
      f.onkeypress = function(b) {
        13 == b.keyCode && this.blur();
      };
      f.addClass("entryListSettingEachInputWorkspace");
      e.appendChild(f);
      f = Entry.createElement("span");
      f.bindOnClick(function() {
        h.splice(c, 1);
        b.updateListSettingView();
      });
      f.addClass("entryListSettingValueRemoveWorkspace");
      e.appendChild(f);
      d.appendChild(e);
    })(e);
  }
  a.updateView();
  c.removeClass("entryRemove");
};
Entry.VariableContainer.prototype.setListLength = function(a) {
  a = Number(a);
  var b = this.selectedList.array_;
  if (!isNaN(a)) {
    var c = b.length;
    if (c < a) {
      for (a -= c, c = 0;c < a;c++) {
        b.push({data:0});
      }
    } else {
      c > a && (b.length = a);
    }
  }
  this.updateListSettingView();
};
Entry.VariableContainer.prototype.updateViews = function() {
  var a = this.lists_;
  this.variables_.map(function(b) {
    b.updateView();
  });
  a.map(function(b) {
    b.updateView();
  });
};
Entry.VariableContainer.prototype.updateSelectedVariable = function(a, b) {
  a ? "variable" == a.type ? (this.selectedVariable = a, this.updateVariableSettingView(a)) : "slide" == a.type ? (this.selectedVariable = a, this.updateVariableSettingView(a)) : "list" == a.type && (this.selectedList = a, this.updateListSettingView(a)) : (this.selectedVariable = null, "variable" == (b || "variable") ? this.variableSettingView.addClass("entryRemove") : this.listSettingView.addClass("entryRemove"));
};
Entry.VariableContainer.prototype.removeLocalVariables = function(a) {
  var b = [], c = this;
  this.mapVariable(function(a, c) {
    a.object_ && a.object_ == c && b.push(a);
  }, a);
  b.map(function(b) {
    c.removeVariable(b);
  });
};
Entry.VariableContainer.prototype.updateCloudVariables = function() {
  var a = Entry.projectId;
  if (Entry.cloudSavable && a) {
    var b = Entry.variableContainer, a = b.variables_.filter(function(b) {
      return b.isCloud_;
    }), a = a.map(function(b) {
      return b.toJSON();
    }), b = b.lists_.filter(function(b) {
      return b.isCloud_;
    }), b = b.map(function(b) {
      return b.toJSON();
    });
    $.ajax({url:"/api/project/variable/" + Entry.projectId, type:"PUT", data:{variables:a, lists:b}}).done(function() {
    });
  }
};
Entry.VariableContainer.prototype.addRef = function(a, b) {
  if (this.view_ && Entry.playground.mainWorkspace && Entry.getMainWS().getMode() === Entry.Workspace.MODE_BOARD) {
    var c = {object:b.getCode().object, block:b};
    b.funcBlock && (c.funcBlock = b.funcBlock, delete b.funcBlock);
    this[a].push(c);
    if ("_functionRefs" == a) {
      a = b.type.substr(5);
      for (var d = Entry.variableContainer.functions_[a].content.getBlockList(), e = 0;e < d.length;e++) {
        b = d[e];
        var f = b.events;
        -1 < b.type.indexOf("func_") && b.type.substr(5) == a || (f && f.viewAdd && f.viewAdd.forEach(function(a) {
          b.getCode().object = c.object;
          a && (b.funcBlock = c.block, a(b));
        }), f && f.dataAdd && f.dataAdd.forEach(function(a) {
          b.getCode().object = c.object;
          a && (b.funcBlock = c.block, a(b));
        }));
      }
    }
    return c;
  }
};
Entry.VariableContainer.prototype.removeRef = function(a, b) {
  if (Entry.playground.mainWorkspace && Entry.getMainWS().getMode() === Entry.Workspace.MODE_BOARD) {
    for (var c = this[a], d = 0;d < c.length;d++) {
      if (c[d].block == b) {
        c.splice(d, 1);
        break;
      }
    }
    if ("_functionRefs" == a && (a = b.type.substr(5), d = Entry.variableContainer.functions_[a])) {
      for (c = d.content.getBlockList(), d = 0;d < c.length;d++) {
        b = c[d];
        var e = b.events;
        -1 < b.type.indexOf("func_") && b.type.substr(5) == a || (e && e.viewDestroy && e.viewDestroy.forEach(function(a) {
          a && a(b);
        }), e && e.dataDestroy && e.dataDestroy.forEach(function(a) {
          a && a(b);
        }));
      }
    }
  }
};
Entry.VariableContainer.prototype._getBlockMenu = function() {
  return Entry.playground.mainWorkspace.getBlockMenu();
};
Entry.VariableContainer.prototype._truncName = function(a, b) {
  a = a.substring(0, this._maxNameLength);
  Entry.toast.warning(Lang.Workspace[b + "_name_auto_edited_title"], Lang.Workspace[b + "_name_auto_edited_content"]);
  return a;
};
Entry.VariableContainer.prototype._maxNameLength = 10;
Entry.VariableContainer.prototype.clear = function() {
  this.variables_.map(function(b) {
    b.remove();
  });
  this.variables_ = [];
  this.lists_.map(function(b) {
    b.remove();
  });
  this.lists_ = [];
  this.messages_ = [];
  for (var a in this.functions_) {
    this.functions_[a].destroy(), delete this.functions_[a];
  }
  Entry.playground.reloadPlayground();
  this.updateList();
};
Entry.VariableContainer.prototype._isPythonMode = function() {
  var a = Entry.getMainWS();
  return a && a.isVimMode();
};
Entry.block.run = {skeleton:"basic", color:"#3BBD70", contents:["this is", "basic block"], func:function() {
}};
Entry.block.mutant = {skeleton:"basic", event:"start", color:"#3BBD70", template:"test mutant block", params:[], func:function() {
}, changeEvent:new Entry.Event};
Entry.block.jr_start = {skeleton:"pebble_event", event:"start", color:"#3BBD70", template:"%1", params:[{type:"Indicator", img:"/img/assets/ntry/bitmap/jr/block_play_image.png", highlightColor:"#3BBD70", position:{x:0, y:0}, size:22}], func:function() {
  var a = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b;
  for (b in a) {
    this._unit = a[b];
  }
  Ntry.unitComp = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.UNIT);
}};
Entry.block.jr_repeat = {skeleton:"pebble_loop", color:"#127CDB", template:"%1 \ubc18\ubcf5", params:[{type:"Text", text:Lang.Menus.repeat_0}, {type:"Dropdown", options:[[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], value:3, fontSize:14, roundValue:3}, {type:"Text", text:Lang.Menus.repeat_1}], statements:[], func:function() {
  if (void 0 === this.repeatCount) {
    return this.repeatCount = this.block.params[0], Entry.STATIC.CONTINUE;
  }
  if (0 < this.repeatCount) {
    this.repeatCount--;
    var a = this.block.statements[0];
    if (0 === a.getBlocks().length) {
      return;
    }
    this.executor.stepInto(a);
    return Entry.STATIC.CONTINUE;
  }
  delete this.repeatCount;
}};
Entry.block.jr_item = {skeleton:"pebble_basic", color:"#F46C6C", template:"\uaf43 \ubaa8\uc73c\uae30 %1", params:[{type:"Indicator", img:"/img/assets/ntry/bitmap/jr/block_item_image.png", highlightColor:"#FFF", position:{x:83, y:0}, size:22}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var a = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.GET_ITEM, function() {
      Ntry.dispatchEvent("getItem");
      a.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.cparty_jr_item = {skeleton:"pebble_basic", color:"#8ABC1D", template:"%1 %2", params:[{type:"Text", text:Lang.Menus.pick_up_pencil}, {type:"Indicator", img:"/img/assets/ntry/bitmap/cpartyjr/pen.png", highlightColor:"#FFF", position:{x:83, y:0}, size:22}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var a = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.GET_ITEM, function() {
      Ntry.dispatchEvent("getItem");
      a.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_north = {skeleton:"pebble_basic", color:"#A751E3", template:"%1 %2", params:[{type:"Text", text:Lang.Menus.go_up}, {type:"Indicator", img:"/img/assets/ntry/bitmap/jr/block_up_image.png", position:{x:83, y:0}, size:22}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var a = Ntry.STATIC, b = this, c = function() {
      window.setTimeout(function() {
        Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function() {
          b.isAction = !1;
        });
      }, 3);
    }, d;
    switch(Ntry.unitComp.direction) {
      case Ntry.STATIC.EAST:
        d = a.TURN_LEFT;
        break;
      case Ntry.STATIC.SOUTH:
        d = a.HALF_ROTATION;
        break;
      case Ntry.STATIC.WEST:
        d = a.TURN_RIGHT;
        break;
      default:
        c();
    }
    d && Ntry.dispatchEvent("unitAction", d, c);
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_east = {skeleton:"pebble_basic", color:"#A751E3", template:"%1 %2", params:[{type:"Text", text:Lang.Menus.go_right}, {type:"Indicator", img:"/img/assets/ntry/bitmap/jr/block_right_image.png", position:{x:83, y:0}, size:22}], func:function() {
  var a = Ntry.STATIC;
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var b = this, c = function() {
      window.setTimeout(function() {
        Ntry.dispatchEvent("unitAction", a.WALK, function() {
          b.isAction = !1;
        });
      }, 3);
    }, d;
    switch(Ntry.unitComp.direction) {
      case a.SOUTH:
        d = a.TURN_LEFT;
        break;
      case a.WEST:
        d = a.HALF_ROTATION;
        break;
      case a.NORTH:
        d = a.TURN_RIGHT;
        break;
      default:
        c();
    }
    d && Ntry.dispatchEvent("unitAction", d, c);
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_south = {skeleton:"pebble_basic", color:"#A751E3", template:"%1 %2", params:[{type:"Text", text:Lang.Menus.go_down}, {type:"Indicator", img:"/img/assets/ntry/bitmap/jr/block_down_image.png", position:{x:83, y:0}, size:22}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var a = Ntry.STATIC, b = this, c = function() {
      window.setTimeout(function() {
        Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function() {
          b.isAction = !1;
        });
      }, 3);
    }, d;
    switch(Ntry.unitComp.direction) {
      case a.EAST:
        d = a.TURN_RIGHT;
        break;
      case a.NORTH:
        d = a.HALF_ROTATION;
        break;
      case a.WEST:
        d = a.TURN_LEFT;
        break;
      default:
        c();
    }
    d && Ntry.dispatchEvent("unitAction", d, c);
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_west = {skeleton:"pebble_basic", color:"#A751E3", template:"%1 %2", params:[{type:"Text", text:Lang.Menus.go_left}, {type:"Indicator", img:"/img/assets/ntry/bitmap/jr/block_left_image.png", position:{x:83, y:0}, size:22}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var a = Ntry.STATIC, b = this, c = function() {
      window.setTimeout(function() {
        Ntry.dispatchEvent("unitAction", a.WALK, function() {
          b.isAction = !1;
        });
      }, 3);
    }, d;
    switch(Ntry.unitComp.direction) {
      case a.SOUTH:
        d = a.TURN_RIGHT;
        break;
      case a.EAST:
        d = a.HALF_ROTATION;
        break;
      case a.NORTH:
        d = a.TURN_LEFT;
        break;
      default:
        c();
    }
    d && Ntry.dispatchEvent("unitAction", d, c);
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_start_basic = {skeleton:"basic_event", event:"start", color:"#3BBD70", template:"%1 %2", params:[{type:"Indicator", boxMultiplier:2, img:"/img/assets/block_icon/start_icon_play.png", highlightColor:"#3BBD70", size:17, position:{x:0, y:-2}}, Lang.Menus.maze_when_run], func:function() {
  var a = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b;
  for (b in a) {
    this._unit = a[b];
  }
  Ntry.unitComp = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.UNIT);
}};
Entry.block.jr_go_straight = {skeleton:"basic", color:"#A751E3", template:"%1 %2", params:[Lang.Menus.go_forward, {type:"Image", img:"/img/assets/ntry/bitmap/jr/cparty_go_straight.png", size:24}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var a = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function() {
      a.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_turn_left = {skeleton:"basic", color:"#A751E3", template:"%1 %2", params:[Lang.Menus.jr_turn_left, {type:"Image", img:"/img/assets/ntry/bitmap/jr/cparty_rotate_l.png", size:24}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var a = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_LEFT, function() {
      a.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_turn_right = {skeleton:"basic", color:"#A751E3", template:"%1 %2", params:[Lang.Menus.jr_turn_right, {type:"Image", img:"/img/assets/ntry/bitmap/jr/cparty_rotate_r.png", size:24}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var a = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_RIGHT, function() {
      a.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_go_slow = {skeleton:"basic", color:"#f46c6c", template:"%1 %2", params:[Lang.Menus.go_slow, {type:"Image", img:"/img/assets/ntry/bitmap/jr/cparty_go_slow.png", size:24}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var a = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.GO_SLOW, function() {
      a.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_repeat_until_dest = {skeleton:"basic_loop", color:"#498DEB", template:"%1 %2 %3 %4", syntax:["BasicWhile", "true"], params:[Lang.Menus.repeat_until_reach_2, {type:"Image", img:"/img/assets/ntry/bitmap/jr/jr_goal_image.png", size:18}, Lang.Menus.repeat_until_reach_1, {type:"Image", img:"/img/assets/week/blocks/for.png", size:24}], statements:[{accept:"basic"}], func:function() {
  var a = this.block.statements[0];
  if (0 !== a.getBlocks().length) {
    return this.executor.stepInto(a), Entry.STATIC.CONTINUE;
  }
}};
Entry.block.jr_if_construction = {skeleton:"basic_loop", color:"#498DEB", template:"%1 %2 %3 %4", params:[Lang.Menus.jr_if_1, {type:"Image", img:"/img/assets/ntry/bitmap/jr/jr_construction_image.png", size:18}, Lang.Menus.jr_if_2, {type:"Image", img:"/img/assets/week/blocks/for.png", size:24}], statements:[{accept:"basic"}], func:function() {
  if (!this.isContinue) {
    var a = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b, c;
    for (c in a) {
      b = a[c];
    }
    a = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.UNIT);
    b = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.GRID);
    b = {x:b.x, y:b.y};
    Ntry.addVectorByDirection(b, a.direction, 1);
    b = Ntry.entityManager.find({type:Ntry.STATIC.GRID, x:b.x, y:b.y}, {type:Ntry.STATIC.TILE, tileType:Ntry.STATIC.OBSTACLE_REPAIR});
    this.isContinue = !0;
    a = this.block.statements[0];
    if (0 !== b.length && 0 !== a.getBlocks().length) {
      return this.executor.stepInto(a), Entry.STATIC.CONTINUE;
    }
  }
}};
Entry.block.jr_if_speed = {skeleton:"basic_loop", color:"#498DEB", template:Lang.Menus.jr_if_1 + " %1 " + Lang.Menus.jr_if_2 + " %2", params:[{type:"Image", img:"/img/assets/ntry/bitmap/jr/jr_speed_image.png", size:18}, {type:"Image", img:"/img/assets/week/blocks/for.png", size:24}], statements:[{accept:"basic"}], func:function() {
  if (!this.isContinue) {
    var a = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b, c;
    for (c in a) {
      b = a[c];
    }
    a = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.UNIT);
    b = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.GRID);
    b = {x:b.x, y:b.y};
    Ntry.addVectorByDirection(b, a.direction, 1);
    b = Ntry.entityManager.find({type:Ntry.STATIC.GRID, x:b.x, y:b.y}, {type:Ntry.STATIC.TILE, tileType:Ntry.STATIC.OBSTACLE_SLOW});
    this.isContinue = !0;
    a = this.block.statements[0];
    if (0 !== b.length && 0 !== a.getBlocks().length) {
      return this.executor.stepInto(a), Entry.STATIC.CONTINUE;
    }
  }
}};
Entry.block.maze_step_start = {skeleton:"basic_event", mode:"maze", event:"start", color:"#3BBD70", template:"%1 \uc2dc\uc791\ud558\uae30\ub97c \ud074\ub9ad\ud588\uc744 \ub54c", syntax:["Program"], params:[{type:"Indicator", boxMultiplier:2, img:"/img/assets/block_icon/start_icon_play.png", highlightColor:"#3BBD70", size:17, position:{x:0, y:-2}}], func:function() {
  var a = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b;
  for (b in a) {
    this._unit = a[b];
  }
  Ntry.unitComp = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.UNIT);
}};
Entry.block.maze_step_jump = {skeleton:"basic", mode:"maze", color:"#FF6E4B", template:"\ub6f0\uc5b4\ub118\uae30%1", params:[{type:"Image", img:"/img/assets/week/blocks/jump.png", size:24}], syntax:["Scope", "jump"], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var a = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.JUMP, function() {
      a.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.maze_step_for = {skeleton:"basic_loop", mode:"maze", color:"#498DEB", template:"%1 \ubc88 \ubc18\ubcf5\ud558\uae30%2", syntax:["BasicIteration"], params:[{type:"Dropdown", key:"REPEAT", options:[[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], value:1}, {type:"Image", img:"/img/assets/week/blocks/for.png", size:24}], statements:[{accept:"basic"}], func:function() {
  if (void 0 === this.repeatCount) {
    return this.repeatCount = this.block.params[0], Entry.STATIC.CONTINUE;
  }
  if (0 < this.repeatCount) {
    this.repeatCount--;
    var a = this.block.statements[0];
    if (0 === a.getBlocks().length) {
      return;
    }
    this.executor.stepInto(a);
    return Entry.STATIC.CONTINUE;
  }
  delete this.repeatCount;
}};
Entry.block.test = {skeleton:"basic_boolean_field", mode:"maze", color:"#127CDB", template:"%1 this is test block %2", params:[{type:"Angle", value:"90"}, {type:"Dropdown", options:[[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], value:1}], func:function() {
}};
Entry.block.maze_repeat_until_1 = {skeleton:"basic_loop", mode:"maze", color:"#498DEB", template:"%1 \ub9cc\ub0a0 \ub54c \uae4c\uc9c0 \ubc18\ubcf5%2", syntax:["BasicWhile", "true"], params:[{type:"Image", img:"/img/assets/ntry/block_inner/repeat_goal_1.png", size:18}, {type:"Image", img:"/img/assets/week/blocks/for.png", size:24}], statements:[{accept:"basic"}], func:function() {
  var a = this.block.statements[0];
  if (0 !== a.getBlocks().length) {
    return this.executor.stepInto(a), Entry.STATIC.CONTINUE;
  }
}};
Entry.block.maze_repeat_until_2 = {skeleton:"basic_loop", mode:"maze", color:"#498DEB", template:"\ubaa8\ub4e0 %1 \ub9cc\ub0a0 \ub54c \uae4c\uc9c0 \ubc18\ubcf5%2", syntax:["BasicWhile", "true"], params:[{type:"Image", img:"/img/assets/ntry/block_inner/repeat_goal_1.png", size:18}, {type:"Image", img:"/img/assets/week/blocks/for.png", size:24}], statements:[{accept:"basic"}], func:function() {
  var a = this.block.statements[0];
  if (0 !== a.getBlocks().length) {
    return this.executor.stepInto(a), Entry.STATIC.CONTINUE;
  }
}};
Entry.block.maze_step_if_1 = {skeleton:"basic_loop", mode:"maze", color:"#498DEB", template:"\ub9cc\uc57d \uc55e\uc5d0 %1 \uc788\ub2e4\uba74%2", syntax:["BasicIf", 'front == "wall"'], params:[{type:"Image", img:"/img/assets/ntry/block_inner/if_target_1.png", size:18}, {type:"Image", img:"/img/assets/week/blocks/if.png", size:24}], statements:[{accept:"basic"}], func:function() {
  if (!this.isContinue) {
    var a = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b, c;
    for (c in a) {
      b = a[c];
    }
    a = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.UNIT);
    b = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.GRID);
    b = {x:b.x, y:b.y};
    Ntry.addVectorByDirection(b, a.direction, 1);
    c = Ntry.entityManager.find({type:Ntry.STATIC.GRID, x:b.x, y:b.y});
    a = this.block.statements[0];
    if (0 === c.length) {
      return this.executor.stepInto(a), Entry.STATIC.CONTINUE;
    }
    b = Ntry.entityManager.find({type:Ntry.STATIC.GRID, x:b.x, y:b.y}, {type:Ntry.STATIC.TILE, tileType:Ntry.STATIC.WALL});
    this.isContinue = !0;
    if (0 !== b.length && 0 !== a.getBlocks().length) {
      return this.executor.stepInto(a), Entry.STATIC.CONTINUE;
    }
  }
}};
Entry.block.maze_step_if_2 = {skeleton:"basic_loop", mode:"maze", color:"#498DEB", template:"\ub9cc\uc57d \uc55e\uc5d0 %1 \uc788\ub2e4\uba74%2", syntax:["BasicIf", 'front == "bee"'], params:[{type:"Image", img:"/img/assets/ntry/bitmap/maze2/obstacle_01.png", size:18}, {type:"Image", img:"/img/assets/week/blocks/if.png", size:24}], statements:[{accept:"basic"}], func:function() {
  if (!this.isContinue) {
    var a = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b, c;
    for (c in a) {
      b = a[c];
    }
    a = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.UNIT);
    b = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.GRID);
    b = {x:b.x, y:b.y};
    Ntry.addVectorByDirection(b, a.direction, 1);
    b = Ntry.entityManager.find({type:Ntry.STATIC.GRID, x:b.x, y:b.y}, {type:Ntry.STATIC.TILE, tileType:Ntry.STATIC.OBSTACLE_BEE});
    this.isContinue = !0;
    a = this.block.statements[0];
    if (0 !== b.length && 0 !== a.getBlocks().length) {
      return this.executor.stepInto(a), Entry.STATIC.CONTINUE;
    }
  }
}};
Entry.block.maze_call_function = {skeleton:"basic", mode:"maze", color:"#B57242", template:"\uc57d\uc18d \ubd88\ub7ec\uc624\uae30%1", syntax:["Scope", "promise"], params:[{type:"Image", img:"/img/assets/week/blocks/function.png", size:24}], func:function() {
  if (!this.funcExecutor) {
    var a = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE), b;
    for (b in a) {
      this.funcExecutor = new Entry.Executor(a[b].components[Ntry.STATIC.CODE].code.getEventMap("define")[0]);
    }
  }
  this.funcExecutor.execute();
  if (null !== this.funcExecutor.scope.block) {
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.maze_define_function = {skeleton:"basic_define", mode:"maze", color:"#B57242", event:"define", template:"\uc57d\uc18d\ud558\uae30%1", syntax:["BasicFunction"], params:[{type:"Image", img:"/img/assets/week/blocks/function.png", size:24}], statements:[{accept:"basic"}], func:function(a) {
  if (!this.executed && (a = this.block.statements[0], 0 !== a.getBlocks().length)) {
    return this.executor.stepInto(a), this.executed = !0, Entry.STATIC.CONTINUE;
  }
}};
Entry.block.maze_step_if_3 = {skeleton:"basic_loop", mode:"maze", color:"#498DEB", template:"\ub9cc\uc57d \uc55e\uc5d0 %1 \uc788\ub2e4\uba74%2", syntax:["BasicIf", 'front == "banana"'], params:[{type:"Image", img:"/img/assets/ntry/block_inner/if_target_3.png", size:18}, {type:"Image", img:"/img/assets/week/blocks/if.png", size:24}], statements:[{accept:"basic"}], func:function() {
  if (!this.isContinue) {
    var a = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b, c;
    for (c in a) {
      b = a[c];
    }
    a = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.UNIT);
    b = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.GRID);
    b = {x:b.x, y:b.y};
    Ntry.addVectorByDirection(b, a.direction, 1);
    b = Ntry.entityManager.find({type:Ntry.STATIC.GRID, x:b.x, y:b.y}, {type:Ntry.STATIC.TILE, tileType:Ntry.STATIC.OBSTACLE_BANANA});
    this.isContinue = !0;
    a = this.block.statements[0];
    if (0 !== b.length && 0 !== a.getBlocks().length) {
      return this.executor.stepInto(a), Entry.STATIC.CONTINUE;
    }
  }
}};
Entry.block.maze_step_if_4 = {skeleton:"basic_loop", mode:"maze", color:"#498DEB", template:"\ub9cc\uc57d \uc55e\uc5d0 %1 \uc788\ub2e4\uba74%2", syntax:["BasicIf", 'front == "wall"'], params:[{type:"Image", img:"/img/assets/ntry/block_inner/if_target_2.png", size:18}, {type:"Image", img:"/img/assets/week/blocks/if.png", size:24}], statements:[{accept:"basic"}], func:function() {
  if (!this.isContinue) {
    var a = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), b, c;
    for (c in a) {
      b = a[c];
    }
    a = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.UNIT);
    b = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.GRID);
    b = {x:b.x, y:b.y};
    Ntry.addVectorByDirection(b, a.direction, 1);
    b = Ntry.entityManager.find({type:Ntry.STATIC.GRID, x:b.x, y:b.y}, {type:Ntry.STATIC.TILE, tileType:Ntry.STATIC.WALL});
    this.isContinue = !0;
    a = this.block.statements[0];
    if (0 !== b.length && 0 !== a.getBlocks().length) {
      return this.executor.stepInto(a), Entry.STATIC.CONTINUE;
    }
  }
}};
Entry.block.maze_step_move_step = {skeleton:"basic", mode:"maze", color:"#A751E3", template:"\uc55e\uc73c\ub85c \ud55c \uce78 \uc774\ub3d9%1", syntax:["Scope", "move"], params:[{type:"Image", img:"/img/assets/week/blocks/moveStep.png", size:24}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var a = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function() {
      a.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.maze_step_rotate_left = {skeleton:"basic", mode:"maze", color:"#A751E3", template:"\uc67c\ucabd\uc73c\ub85c \ud68c\uc804%1", syntax:["Scope", "left"], params:[{type:"Image", img:"/img/assets/week/blocks/turnL.png", size:24}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var a = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_LEFT, function() {
      a.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.maze_step_rotate_right = {skeleton:"basic", mode:"maze", color:"#A751E3", template:"\uc624\ub978\ucabd\uc73c\ub85c \ud68c\uc804%1", syntax:["Scope", "right"], params:[{type:"Image", img:"/img/assets/week/blocks/turnR.png", size:24}], func:function() {
  if (this.isContinue) {
    if (this.isAction) {
      return Entry.STATIC.CONTINUE;
    }
    delete this.isAction;
    delete this.isContinue;
  } else {
    this.isAction = this.isContinue = !0;
    var a = this;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_RIGHT, function() {
      a.isAction = !1;
    });
    return Entry.STATIC.CONTINUE;
  }
}};
Entry.block.test_wrapper = {skeleton:"basic", mode:"maze", color:"#3BBD70", template:"%1 this is test block %2", params:[{type:"Block", accept:"basic_boolean_field", value:[{type:"test", params:[30, 50]}]}, {type:"Dropdown", options:[[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], value:1}], func:function() {
}};
Entry.block.basic_button = {skeleton:"basic_button", color:"#eee", template:"%1", params:[{type:"Text", text:"basic button", color:"#333", align:"center"}], func:function() {
}};
Entry.Thread = function(a, b, c) {
  this._data = new Entry.Collection;
  this._code = b;
  this.changeEvent = new Entry.Event(this);
  this.changeEvent.attach(this, this.handleChange);
  this._event = null;
  this.parent = c ? c : b;
  this.load(a);
};
(function(a) {
  a.load = function(b, a) {
    void 0 === b && (b = []);
    if (!(b instanceof Array)) {
      return console.error("thread must be array");
    }
    for (var c = 0;c < b.length;c++) {
      var e = b[c];
      e instanceof Entry.Block || e.isDummy ? (e.setThread(this), this._data.push(e)) : this._data.push(new Entry.Block(e, this));
    }
    (b = this._code.view) && this.createView(b.board, a);
  };
  a.registerEvent = function(b, a) {
    this._event = a;
    this._code.registerEvent(b, a);
  };
  a.unregisterEvent = function(b, a) {
    this._code.unregisterEvent(b, a);
  };
  a.createView = function(b, a) {
    this.view || (this.view = new Entry.ThreadView(this, b));
    this._data.getAll().forEach(function(c) {
      c.createView(b, a);
    });
  };
  a.destroyView = function() {
    this.view = null;
    this._data.map(function(b) {
      b.destroyView();
    });
  };
  a.separate = function(b, a) {
    this._data.has(b.id) && (b = this._data.splice(this._data.indexOf(b), a), this._code.createThread(b), this.changeEvent.notify());
  };
  a.cut = function(b) {
    b = this._data.indexOf(b);
    b = this._data.splice(b);
    this.changeEvent.notify();
    return b;
  };
  a.insertByBlock = function(b, a) {
    b = b ? this._data.indexOf(b) : -1;
    for (var c = 0;c < a.length;c++) {
      a[c].setThread(this);
    }
    this._data.splice.apply(this._data, [b + 1, 0].concat(a));
    this.changeEvent.notify();
  };
  a.insertToTop = function(b) {
    b.setThread(this);
    this._data.unshift.apply(this._data, [b]);
    this.changeEvent.notify();
  };
  a.clone = function(b, a) {
    b = b || this._code;
    b = new Entry.Thread([], b);
    for (var c = this._data, e = [], f = 0, g = c.length;f < g;f++) {
      e.push(c[f].clone(b));
    }
    b.load(e, a);
    return b;
  };
  a.toJSON = function(b, a, d) {
    var c = [];
    for (a = void 0 === a ? 0 : a;a < this._data.length;a++) {
      this._data[a] instanceof Entry.Block && c.push(this._data[a].toJSON(b, d));
    }
    return c;
  };
  a.destroy = function(b, a) {
    this.view && this.view.destroy(b);
    for (var c = this._data, e = c.length - 1;0 <= e;e--) {
      c[e].destroy(b, null, a);
    }
    !c.length && this._code.destroyThread(this, !1);
  };
  a.getBlock = function(b) {
    return this._data[b];
  };
  a.getBlocks = function() {
    return this._data.map(function(b) {
      return b;
    });
  };
  a.countBlock = function() {
    for (var b = 0, a = 0;a < this._data.length;a++) {
      var d = this._data[a];
      if (d.type && (b++, d = d.statements)) {
        for (var e = 0;e < d.length;e++) {
          b += d[e].countBlock();
        }
      }
    }
    return b;
  };
  a.handleChange = function() {
    0 === this._data.length && this.destroy();
  };
  a.getCode = function() {
    return this._code;
  };
  a.setCode = function(b) {
    this._code = b;
  };
  a.spliceBlock = function(b) {
    this._data.remove(b);
    this.changeEvent.notify();
  };
  a.getFirstBlock = function() {
    return this._data[0];
  };
  a.getPrevBlock = function(b) {
    b = this._data.indexOf(b);
    return this._data.at(b - 1);
  };
  a.getNextBlock = function(b) {
    b = this._data.indexOf(b);
    return this._data.at(b + 1);
  };
  a.getLastBlock = function() {
    return this._data.at(this._data.length - 1);
  };
  a.getRootBlock = function() {
    return this._data.at(0);
  };
  a.hasBlockType = function(b) {
    function a(c) {
      if (b == c.type) {
        return !0;
      }
      for (var d = c.params, e = 0;e < d.length;e++) {
        var h = d[e];
        if (h && h.constructor == Entry.Block && a(h)) {
          return !0;
        }
      }
      if (c = c.statements) {
        for (d = 0;d < c.length;d++) {
          if (c[d].hasBlockType(b)) {
            return !0;
          }
        }
      }
      return !1;
    }
    for (var d = 0;d < this._data.length;d++) {
      if (a(this._data[d])) {
        return !0;
      }
    }
    return !1;
  };
  a.getCount = function(b) {
    var a = this._data.length;
    b && (a -= this._data.indexOf(b));
    return a;
  };
  a.indexOf = function(b) {
    return this._data.indexOf(b);
  };
  a.pointer = function(b, a) {
    a = this.indexOf(a);
    b.unshift(a);
    this.parent instanceof Entry.Block && b.unshift(this.parent.indexOfStatements(this));
    return this._code === this.parent ? (1 === this._data.length && b.shift(), b.unshift(this._code.indexOf(this)), a = this._data[0], b.unshift(a.y), b.unshift(a.x), b) : this.parent.pointer(b);
  };
  a.getBlockList = function(b, a) {
    for (var c = [], e = 0;e < this._data.length;e++) {
      var f = this._data[e];
      f.constructor === Entry.Block && (c = c.concat(f.getBlockList(b, a)));
    }
    return c;
  };
  a.stringify = function(b) {
    return JSON.stringify(this.toJSON(void 0, void 0, b));
  };
  a.isInOrigin = function() {
    var b = this.getFirstBlock();
    return b && b.isInOrigin();
  };
})(Entry.Thread.prototype);
Entry.skeleton = function() {
};
Entry.skeleton.basic = {path:function(a) {
  var b = a.contentWidth;
  a = a.contentHeight;
  a = Math.max(30, a + 2);
  b = Math.max(0, b + 9 - a / 2);
  return "m -8,0 l 8,8 8,-8 h %w a %h,%h 0 0,1 0,%wh h -%w l -8,8 -8,-8 v -%wh z".replace(/%wh/gi, a).replace(/%w/gi, b).replace(/%h/gi, a / 2);
}, box:function(a) {
  return {offsetX:-8, offsetY:0, width:(a ? a.contentWidth : 150) + 30, height:Math.max(30, (a ? a.contentHeight : 28) + 2), marginBottom:0};
}, magnets:function(a) {
  return {previous:{x:0, y:0}, next:{x:0, y:(a ? Math.max(a.height, 30) : 30) + 1 + a.offsetY}};
}, contentPos:function(a) {
  return {x:14, y:Math.max(a.contentHeight, 28) / 2 + 1};
}};
Entry.skeleton.basic_create = {path:function(a) {
  var b = a.contentWidth;
  a = a.contentHeight;
  a = Math.max(30, a + 2);
  b = Math.max(0, b + 9 - a / 2);
  return "m -8,0 l 16,0 h %w a %h,%h 0 0,1 0,%wh h -%w l -8,8 -8,-8 v -%wh z".replace(/%wh/gi, a).replace(/%w/gi, b).replace(/%h/gi, a / 2);
}, box:function(a) {
  return {offsetX:-8, offsetY:0, width:(a ? a.contentWidth : 150) + 30, height:Math.max(30, (a ? a.contentHeight : 28) + 2), marginBottom:0};
}, magnets:function(a) {
  return {next:{x:0, y:(a ? Math.max(a.height, 30) : 30) + 1 + a.offsetY}};
}, contentPos:function(a) {
  return {x:14, y:Math.max(a.contentHeight, 28) / 2 + 1};
}};
Entry.skeleton.basic_event = {path:function(a) {
  a = a.contentWidth;
  a = Math.max(0, a);
  return "m -8,0 m 0,-5 a 19.5,19.5 0, 0,1 16,0 c 10,5 15,5 20,5 h %w a 15,15 0 0,1 0,30 H 8 l -8,8 -8,-8 l 0,0.5 a 19.5,19.5 0, 0,1 0,-35 z".replace(/%w/gi, a - 30);
}, box:function(a) {
  return {offsetX:-19, offsetY:-7, width:a.contentWidth + 30, height:30, marginBottom:0};
}, magnets:function(a) {
  return {next:{x:0, y:(a ? Math.max(a.height + a.offsetY + 7, 30) : 30) + 1}};
}, contentPos:function(a) {
  return {x:1, y:15};
}};
Entry.skeleton.basic_loop = {path:function(a) {
  var b = a.contentWidth, c = a.contentHeight, c = Math.max(30, c + 2), b = Math.max(0, b + 9 - c / 2);
  a = a._statements[0] ? a._statements[0].height : 20;
  a = Math.max(a, 20);
  return "m -8,0 l 8,8 8,-8 h %w a %h,%h 0 0,1 0,%wh H 24 l -8,8 -8,-8 h -0.4 v %sh h 0.4 l 8,8 8,-8 h %bw a 8,8 0 0,1 0,16 H 8 l -8,8 -8,-8 z".replace(/%wh/gi, c).replace(/%w/gi, b).replace(/%bw/gi, b - 8).replace(/%h/gi, c / 2).replace(/%sh/gi, a + 1);
}, magnets:function(a) {
  var b = Math.max(a.contentHeight + 2, 30), c = a._statements[0] ? a._statements[0].height : 20, c = Math.max(c, 20);
  return {previous:{x:0, y:0}, next:{x:0, y:c + b + 18 + a.offsetY}};
}, box:function(a) {
  var b = a.contentWidth, c = Math.max(a.contentHeight + 2, 30);
  a = a._statements[0] ? a._statements[0].height : 20;
  a = Math.max(a, 20);
  return {offsetX:-8, offsetY:0, width:b + 30, height:c + a + 17, marginBottom:0};
}, statementPos:function(a) {
  return [{x:16, y:Math.max(30, a.contentHeight + 2) + 1}];
}, contentPos:function(a) {
  return {x:14, y:Math.max(a.contentHeight, 28) / 2 + 1};
}};
Entry.skeleton.basic_define = {path:function(a) {
  var b = a.contentWidth, c = a.contentHeight, c = Math.max(30, c + 2), b = Math.max(0, b + 9 - c / 2);
  a = a._statements[0] ? a._statements[0].height : 30;
  a = Math.max(a, 20);
  return "m -8,0 l 16,0 h %w a %h,%h 0 0,1 0,%wh H 24 l -8,8 -8,-8 h -0.4 v %sh h 0.4 l 8,8 8,-8 h %bw a 8,8 0 0,1 0,16 H -8 z".replace(/%wh/gi, c).replace(/%w/gi, b).replace(/%h/gi, c / 2).replace(/%bw/gi, b - 8).replace(/%sh/gi, a + 1);
}, magnets:function() {
  return {};
}, box:function(a) {
  return {offsetX:0, offsetY:0, width:a.contentWidth, height:Math.max(a.contentHeight, 25) + 46, marginBottom:0};
}, statementPos:function(a) {
  return [{x:16, y:Math.max(30, a.contentHeight + 2)}];
}, contentPos:function() {
  return {x:14, y:15};
}};
Entry.skeleton.pebble_event = {path:function(a) {
  return "m 0,0 a 25,25 0 0,1 9,48.3 a 9,9 0 0,1 -18,0 a 25,25 0 0,1 9,-48.3 z";
}, box:function(a) {
  return {offsetX:-25, offsetY:0, width:50, height:48.3, marginBottom:0};
}, magnets:function(a) {
  return {next:{x:0, y:(a ? Math.max(a.height, 49.3) : 49.3) + a.offsetY}};
}, contentPos:function() {
  return {x:0, y:25};
}};
Entry.skeleton.pebble_loop = {fontSize:16, dropdownHeight:23, path:function(a) {
  a = Math.max(a._statements[0] ? a._statements[0].height : 50, 50);
  return "M 0,9 a 9,9 0 0,0 9,-9 h %cw q 25,0 25,25 v %ch q 0,25 -25,25 h -%cw a 9,9 0 0,1 -18,0 h -%cw q -25,0 -25,-25 v -%ch q 0,-25 25,-25 h %cw a 9,9 0 0,0 9,9 M 0,49 a 9,9 0 0,1 -9,-9 h -28 a 25,25 0 0,0 -25,25 v %cih a 25,25 0 0,0 25,25 h 28 a 9,9 0 0,0 18,0 h 28 a 25,25 0 0,0 25,-25 v -%cih a 25,25 0 0,0 -25,-25 h -28 a 9,9 0 0,1 -9,9 z".replace(/%cw/gi, 41).replace(/%ch/gi, a + 4).replace(/%cih/gi, a - 50);
}, magnets:function(a) {
  var b = Math.max(a.contentHeight + 2, 41), c = a._statements[0] ? a._statements[0].height : 20, c = Math.max(c, 51);
  return {previous:{x:0, y:0}, next:{x:0, y:c + b + 13 + a.offsetY}};
}, box:function(a) {
  var b = a.contentWidth, c = Math.max(a.contentHeight + 2, 41);
  a = a._statements[0] ? a._statements[0].height : 20;
  a = Math.max(a, 51);
  return {offsetX:-(b / 2 + 13), offsetY:0, width:b + 30, height:c + a + 13, marginBottom:0};
}, statementPos:function(a) {
  return [{x:0, y:Math.max(39, a.contentHeight + 2) + 1.5}];
}, contentPos:function() {
  return {x:-46, y:25};
}};
Entry.skeleton.pebble_basic = {fontSize:15, morph:["prev", "next"], path:function(a) {
  return "m 0,9 a 9,9 0 0,0 9,-9 h 28 q 25,0 25,25q 0,25 -25,25h -28 a 9,9 0 0,1 -18,0 h -28 q -25,0 -25,-25q 0,-25 25,-25h 28 a 9,9 0 0,0 9,9 z";
}, magnets:function(a) {
  return {previous:{x:0, y:0}, next:{x:0, y:(a ? Math.max(a.height, 51) : 51) + a.offsetY}};
}, box:function() {
  return {offsetX:-62, offsetY:0, width:124, height:50, marginBottom:0};
}, contentPos:function() {
  return {x:-46, y:25};
}};
Entry.skeleton.basic_string_field = {path:function(a) {
  var b = a.contentWidth;
  a = a.contentHeight;
  a = Math.max(18, a + 2);
  b = Math.max(0, b - a + 12);
  return "m %h,0 h %w a %h,%h 0 1,1 0,%wh H %h A %h,%h 0 1,1 %h,0 z".replace(/%wh/gi, a).replace(/%w/gi, b).replace(/%h/gi, a / 2);
}, color:"#000", outerLine:"#768dce", box:function(a) {
  return {offsetX:0, offsetY:0, width:(a ? a.contentWidth : 5) + 12, height:Math.max((a ? a.contentHeight : 18) + 2, 18), marginBottom:0};
}, magnets:function() {
  return {string:{}};
}, contentPos:function(a) {
  return {x:6, y:Math.max(a.contentHeight, 16) / 2 + 1};
}};
Entry.skeleton.basic_boolean_field = {path:function(a) {
  var b = a.contentWidth;
  a = a.contentHeight;
  a = Math.max(18, a + 2);
  b = Math.max(0, b - a + 19);
  return "m %h,0 h %w l %h,%h -%h,%h H %h l -%h,-%h %h,-%h z".replace(/%wh/gi, a).replace(/%w/gi, b).replace(/%h/gi, a / 2);
}, color:"#000", outerLine:"#768dce", box:function(a) {
  return {offsetX:0, offsetY:0, width:(a ? a.contentWidth : 5) + 19, height:Math.max((a ? a.contentHeight : 18) + 2, 18), marginBottom:0};
}, magnets:function() {
  return {boolean:{}};
}, contentPos:function(a) {
  return {x:10, y:Math.max(a.contentHeight, 16) / 2 + 1};
}};
Entry.skeleton.basic_param = {path:function(a) {
  var b = a.contentWidth;
  (a = a._contents[a._contents.length - 1]) && (b -= a.box.width + Entry.BlockView.PARAM_SPACE - 2);
  b = Math.max(0, b);
  return "m 4,0 h 10 h %w l 2,2 0,3 3,0 1,1 0,12 -1,1 -3,0 0,3 -2,2h -%w h -10 l -2,-2 0,-3 3,0 1,-1 0,-12 -1,-1 -3,0 0,-3 2,-2".replace(/%w/gi, b);
}, outerLine:"#768dce", box:function(a) {
  return {offsetX:0, offsetY:0, width:(a ? a.contentWidth : 5) + 11, height:24, marginBottom:0};
}, magnets:function() {
  return {param:{}};
}, contentPos:function(a) {
  return {x:11, y:12};
}};
Entry.skeleton.basic_button = {path:function() {
  return "m -64,0 h 128 a 6,6 0, 0,1 6,6 v 18 a 6,6 0, 0,1 -6,6 h -128 a 6,6 0, 0,1 -6,-6 v -18 a 6,6 0, 0,1 6,-6 z";
}, box:function() {
  return {offsetX:-80, offsetY:0, width:140, height:30};
}, contentPos:function() {
  return {x:0, y:15};
}, movable:!1, readOnly:!0, nextShadow:!0, classes:["basicButtonView"]};
Entry.skeleton.basic_without_next = {box:Entry.skeleton.basic.box, contentPos:Entry.skeleton.basic.contentPos, path:function(a) {
  var b = a.contentWidth;
  a = a.contentHeight;
  a = Math.max(30, a + 2);
  b = Math.max(0, b + 9 - a / 2);
  return "m -8,0 l 8,8 8,-8 h %w a %h,%h 0 0,1 0, %wh H -8 z".replace(/%wh/gi, a).replace(/%w/gi, b).replace(/%h/gi, a / 2);
}, magnets:function(a) {
  return {previous:{x:0, y:0}};
}};
Entry.skeleton.basic_double_loop = {path:function(a) {
  var b = a.contentWidth, c = a.contentHeight % 1E6, d = Math.floor(a.contentHeight / 1E6), c = Math.max(30, c + 2), d = Math.max(30, d + 2), b = Math.max(0, b + 5 - c / 2), e = a._statements;
  a = e[0] ? e[0].height : 20;
  e = e[1] ? e[1].height : 20;
  a = Math.max(a, 20);
  e = Math.max(e, 20);
  return "m -8,0 l 8,8 8,-8 h %w a %h1,%h1 0 0,1 0,%wh1 H 24 l -8,8 -8,-8 h -0.4 v %sh1 h 0.4 l 8,8 8,-8 h %bw a %h2,%h2 0 0,1 0,%wh2 H 24 l -8,8 -8,-8 h -0.4 v %sh2 h 0.4 l 8,8 8,-8 h %bw a 8,8 0 0,1 0,16 H 8 l -8,8 -8,-8 z".replace(/%wh1/gi, c).replace(/%wh2/gi, d).replace(/%w/gi, b).replace(/%bw/gi, b - 8).replace(/%h1/gi, c / 2).replace(/%h2/gi, d / 2).replace(/%sh1/gi, a + 1).replace(/%sh2/gi, e + 1);
}, magnets:function(a) {
  var b = Math.max(a.contentHeight % 1E6 + 2, 30), c = Math.max(Math.floor(a.contentHeight / 1E6) + 2, 30), d = a._statements[0] ? a._statements[0].height : 20, e = a._statements[1] ? a._statements[1].height : 20, d = Math.max(d, 20), e = Math.max(e, 20);
  return {previous:{x:0, y:0}, next:{x:0, y:d + e + b + c + 19 + a.offsetY}};
}, box:function(a) {
  var b = a.contentWidth, c = Math.max(Math.floor(a.contentHeight / 1E6) + 2, 30), d = Math.max(a.contentHeight % 1E6 + 2, 30), e = a._statements[0] ? a._statements[0].height % 1E6 : 20;
  a = a._statements[1] ? a._statements[1].height : 20;
  e = Math.max(e, 20);
  a = Math.max(a, 20);
  return {offsetX:-8, offsetY:0, width:b + 30, height:c + d + e + a + 17, marginBottom:0};
}, statementPos:function(a) {
  var b = Math.max(30, a.contentHeight % 1E6 + 2) + 1;
  return [{x:16, y:b}, {x:16, y:b + Math.max(a._statements[0] ? a._statements[0].height % 1E6 : 20, 20) + Math.max(Math.floor(a.contentHeight / 1E6) + 2, 30) + 1}];
}, contentPos:function(a) {
  return {x:14, y:Math.max(a.contentHeight % 1E6, 28) / 2 + 1};
}};
Entry.Block = function(a, b) {
  var c = this;
  Entry.Model(this, !1);
  this._schema = null;
  this.setThread(b);
  this.load(a);
  if (b = a.category) {
    this.category = b, Entry.block[this.type] && (Entry.block[this.type].isFor = ["category_" + b]);
  }
  b = this.getCode();
  void 0 !== a.display && (this.display = a.display);
  b.registerBlock(this);
  (a = this.events.dataAdd) && b.object && a.forEach(function(b) {
    Entry.Utils.isFunction(b) && b(c);
  });
  a = this.events.viewAdd;
  b = b.board;
  a && Entry.getMainWS() && Entry.isTextMode && (!b || b && b.constructor !== Entry.BlockMenu) && a.forEach(function(b) {
    Entry.Utils.isFunction(b) && b.apply(c, [c]);
  });
};
Entry.Block.MAGNET_RANGE = 10;
Entry.Block.MAGNET_OFFSET = .4;
Entry.Block.DELETABLE_TRUE = 1;
Entry.Block.DELETABLE_FALSE = 2;
Entry.Block.DELETABLE_FALSE_LIGHTEN = 3;
(function(a) {
  a.schema = {id:null, x:0, y:0, type:null, params:[], statements:[], view:null, thread:null, movable:null, deletable:Entry.Block.DELETABLE_TRUE, readOnly:null, copyable:!0, events:{}, extensions:[]};
  a.load = function(b) {
    b.id || (b.id = Entry.Utils.generateId());
    this.set(b);
    this.loadSchema();
  };
  a.changeSchema = function(b) {
    this.set({params:[]});
    this.loadSchema();
  };
  a.getSchema = function() {
    this._schema || this.loadSchema();
    return this._schema;
  };
  a.loadSchema = function() {
    if (this._schema = Entry.block[this.type]) {
      !this._schemaChangeEvent && this._schema.changeEvent && (this._schemaChangeEvent = this._schema.changeEvent.attach(this, this.changeSchema));
      var b = this._schema.events;
      if (b) {
        for (var a in b) {
          this.events[a] || (this.events[a] = []);
          for (var d = b[a], e = 0;e < d.length;e++) {
            var f = d[e];
            f && 0 > this.events[a].indexOf(f) && this.events[a].push(f);
          }
        }
      }
      this._schema.event && this.thread.registerEvent(this, this._schema.event);
      b = this.params;
      a = this._schema.params;
      for (e = 0;a && e < a.length;e++) {
        d = void 0 === b[e] || null === b[e] ? a[e].value : b[e], f = b[e] || e < b.length, !d || "Output" !== a[e].type && "Block" !== a[e].type || ("object" !== typeof d && (d = {type:"number", params:[d]}), d = new Entry.Block(d, this.thread)), f ? b.splice(e, 1, d) : b.push(d);
      }
      if (b = this._schema.statements) {
        for (e = 0;e < b.length;e++) {
          this.statements.splice(e, 1, new Entry.Thread(this.statements[e], this.getCode(), this));
        }
      }
    }
  };
  a.changeType = function(b) {
    this._schemaChangeEvent && this._schemaChangeEvent.destroy();
    this.set({type:b});
    this.loadSchema();
    this.view && this.view.changeType(b);
  };
  a.setThread = function(b) {
    this.set({thread:b});
  };
  a.getThread = function() {
    return this.thread;
  };
  a.insertAfter = function(b) {
    this.thread.insertByBlock(this, b);
  };
  a._updatePos = function() {
    this.view && this.set({x:this.view.x, y:this.view.y});
  };
  a.moveTo = function(b, a) {
    this.view && this.view._moveTo(b, a);
    this._updatePos();
    this.getCode().changeEvent.notify();
  };
  a.createView = function(b, a) {
    b = b || this.getCode().view.board;
    this.view || (this.set({view:new Entry.BlockView(this, b, a)}), this._updatePos());
  };
  a.destroyView = function() {
    this.view && this.view.destroy();
  };
  a.clone = function(b) {
    return new Entry.Block(this.toJSON(!0), b);
  };
  a.toJSON = function(b, a) {
    var c = this._toJSON();
    delete c.view;
    delete c.thread;
    delete c.events;
    b && delete c.id;
    c.params = c.params.map(function(c) {
      c instanceof Entry.Block && (c = c.toJSON(b, a));
      return c;
    });
    c.statements = c.statements.map(function(c) {
      return c.toJSON(b, void 0, a);
    });
    c.x = this.x;
    c.y = this.y;
    c.movable = this.movable;
    c.deletable = this.deletable;
    c.readOnly = this.readOnly;
    a && a instanceof Array && a.forEach(function(b) {
      delete c[b];
    });
    return c;
  };
  a.destroy = function(b, a, d) {
    if (!d || this.isDeletable()) {
      var c = this, f = this.params;
      if (f) {
        for (d = 0;d < f.length;d++) {
          var g = f[d];
          g instanceof Entry.Block && (g.doNotSplice = !(g.thread instanceof Entry.FieldOutput), g.destroy(b));
        }
      }
      if (f = this.statements) {
        for (d = 0;d < f.length;d++) {
          f[d].destroy(b);
        }
      }
      var h = this.getPrevBlock(), f = this.getNextBlock();
      d = this.getCode();
      d.unregisterBlock(this);
      g = this.getThread();
      this._schema && this._schema.event && g.unregisterEvent(this, this._schema.event);
      f && (a ? f.destroy(b, a) : h ? f.view && f.view.bindPrev(h, !0) : g.view && (a = g.view.getParent(), a.constructor === Entry.FieldStatement ? (f.view && f.view.bindPrev(a), a.insertTopBlock(f)) : a.constructor === Entry.FieldStatement ? f.replace(a._valueBlock) : f.view._toGlobalCoordinate()));
      var k = this.doNotSplice;
      !this.doNotSplice && g.spliceBlock ? g.spliceBlock(this) : delete this.doNotSplice;
      this.view && this.view.destroy(b);
      this._schemaChangeEvent && this._schemaChangeEvent.destroy();
      (b = this.events.dataDestroy) && d.object && b.forEach(function(b) {
        Entry.Utils.isFunction(b) && b.apply(c, [c, k]);
      });
      b = this.events.viewDestroy;
      a = this.getCode().board;
      b && Entry.getMainWS() && Entry.isTextMode && (!a || a && a.constructor !== Entry.BlockMenu) && b.forEach(function(b) {
        Entry.Utils.isFunction(b) && b.apply(c, [c, k]);
      });
    }
  };
  a.getView = function() {
    return this.view;
  };
  a.setMovable = function(b) {
    this.movable != b && this.set({movable:b});
  };
  a.setCopyable = function(b) {
    this.copyable != b && this.set({copyable:b});
  };
  a.isMovable = function() {
    return this.movable;
  };
  a.isCopyable = function() {
    return this.copyable;
  };
  a.setDeletable = function(b) {
    this.deletable != b && this.set({deletable:b});
  };
  a.isDeletable = function() {
    return this.deletable === Entry.Block.DELETABLE_TRUE || !0 === this.deletable;
  };
  a.isReadOnly = function() {
    return this.readOnly;
  };
  a.getCode = function() {
    return this.thread.getCode();
  };
  a.doAdd = function() {
    this.getCode().changeEvent.notify();
  };
  a.doMove = function() {
    this._updatePos();
    this.getCode().changeEvent.notify();
  };
  a.doSeparate = function() {
    this.separate();
  };
  a.doInsert = function(b) {
    "basic" === this.getBlockType() ? this.insert(b) : this.replace(b);
  };
  a.doDestroy = function(b) {
    this.destroy(b);
    this.getCode().changeEvent.notify();
    return this;
  };
  a.doDestroyBelow = function(b) {
    this.destroy(b, !0);
    this.getCode().changeEvent.notify();
    return this;
  };
  a.copy = function() {
    var b = this.getThread(), a = [];
    if (b instanceof Entry.Thread) {
      for (var d = b.getBlocks().indexOf(this), b = b.toJSON(!0, d), d = 0;d < b.length;d++) {
        a.push(b[d]);
      }
    } else {
      a.push(this.toJSON(!0));
    }
    b = this.view.getAbsoluteCoordinate();
    d = a[0];
    d.x = b.x + 15;
    d.y = b.y + 15;
    d.id = Entry.Utils.generateId();
    return a;
  };
  a.copyToClipboard = function() {
    Entry.clipboard = this.copy();
  };
  a.separate = function(b) {
    this.thread.separate(this, b);
    this._updatePos();
    this.getCode().changeEvent.notify();
  };
  a.insert = function(b) {
    var a = this.thread.cut(this);
    b instanceof Entry.Thread ? b.insertByBlock(null, a) : b.insertAfter(a);
    this._updatePos();
    this.getCode().changeEvent.notify();
  };
  a.replace = function(b) {
    this.thread.cut(this);
    b.getThread().replace(this);
    this.getCode().changeEvent.notify();
  };
  a.getPrevBlock = function() {
    return this.thread.getPrevBlock(this);
  };
  a.getNextBlock = function() {
    return this.thread.getNextBlock(this) || null;
  };
  a.getLastBlock = function() {
    return this.thread.getLastBlock();
  };
  a.getOutputBlock = function() {
    for (var b = this._schema.params, a = 0;b && a < b.length;a++) {
      if ("Output" === b[a].type) {
        return this.params[a];
      }
    }
    return null;
  };
  a.getTerminateOutputBlock = function() {
    for (var b = this;;) {
      var a = b.getOutputBlock();
      if (!a) {
        return b;
      }
      b = a;
    }
  };
  a.getBlockType = function() {
    if (!this.view) {
      return null;
    }
    var b = Entry.skeleton[this._schema.skeleton].magnets(this.view);
    return b.next || b.previous ? "basic" : b.boolean || b.string ? "field" : b.output ? "output" : null;
  };
  a.indexOfStatements = function(b) {
    return this.statements.indexOf(b);
  };
  a.pointer = function(b) {
    b || (b = []);
    return this.thread.pointer(b, this);
  };
  a.targetPointer = function() {
    var b = this.thread.pointer([], this);
    4 === b.length && 0 === b[3] && b.pop();
    return b;
  };
  a.getDataByPointer = function(b) {
    b = b.concat();
    var a = this.params[b.shift()];
    return b.length ? a.getDataByPointer ? a.getDataByPointer(b) : null : a;
  };
  a.getBlockList = function(b, a) {
    var c = [];
    if (!this._schema) {
      return [];
    }
    if (b && this._schema.isPrimitive) {
      return c;
    }
    (a || this.type) === this.type && c.push(this);
    for (var e = this.params, f = 0;f < e.length;f++) {
      var g = e[f];
      g && g.constructor == Entry.Block && (c = c.concat(g.getBlockList(b, a)));
    }
    if (e = this.statements) {
      for (f = 0;f < e.length;f++) {
        g = e[f], g.constructor === Entry.Thread && (c = c.concat(g.getBlockList(b, a)));
      }
    }
    return c;
  };
  a.stringify = function(b) {
    return JSON.stringify(this.toJSON(!1, b));
  };
  a.isInOrigin = function() {
    return 0 === this.x && 0 === this.y;
  };
})(Entry.Block.prototype);
Entry.BlockMenu = function(a, b, c, d) {
  Entry.Model(this, !1);
  this.reDraw = Entry.Utils.debounce(this.reDraw, 100);
  this._dAlign = Entry.Utils.debounce(this.align, 100);
  this._setDynamic = Entry.Utils.debounce(this._setDynamic, 150);
  this._dSelectMenu = Entry.Utils.debounce(this.selectMenu, 0);
  this._align = b || "CENTER";
  this.setAlign(this._align);
  this._scroll = void 0 !== d ? d : !1;
  this._bannedClass = [];
  this._categories = [];
  this.suffix = "blockMenu";
  this._isSelectingMenu = !1;
  this._dynamicThreads = [];
  this._setDynamicTimer = null;
  this._renderedCategories = {};
  a = "string" === typeof a ? $("#" + a) : $(a);
  if ("DIV" !== a.prop("tagName")) {
    return console.error("Dom is not div element");
  }
  this.view = a;
  this.visible = !0;
  this._svgId = "blockMenu" + (new Date).getTime();
  this._clearCategory();
  this._categoryData = c;
  this._generateView(c);
  this._splitters = [];
  this.setWidth();
  this.svg = Entry.SVG(this._svgId);
  Entry.Utils.addFilters(this.svg, this.suffix);
  this.pattern = Entry.Utils.addBlockPattern(this.svg, this.suffix).pattern;
  this.svgGroup = this.svg.elem("g");
  this.svgThreadGroup = this.svgGroup.elem("g");
  this.svgThreadGroup.board = this;
  this.svgBlockGroup = this.svgGroup.elem("g");
  this.svgBlockGroup.board = this;
  this.changeEvent = new Entry.Event(this);
  this.observe(this, "_handleDragBlock", ["dragBlock"]);
  this.changeCode(new Entry.Code([]));
  c && this._generateCategoryCodes();
  this._scroll && (this._scroller = new Entry.BlockMenuScroller(this), this._addControl(a));
  Entry.documentMousedown && Entry.documentMousedown.attach(this, this.setSelectedBlock);
  this.code && Entry.keyPressed && Entry.keyPressed.attach(this, this._captureKeyEvent);
  Entry.windowResized && (a = _.debounce(this.updateOffset, 200), Entry.windowResized.attach(this, a));
  Entry.addEventListener("setBlockMenuDynamic", function() {
    this._setDynamicTimer = this._setDynamic.apply(this, arguments);
  }.bind(this));
  Entry.addEventListener("cancelBlockMenuDynamic", this._cancelDynamic.bind(this));
};
(function(a) {
  a.schema = {code:null, dragBlock:null, closeBlock:null, selectedBlockView:null};
  a._generateView = function(b) {
    var a = this.view, d = this;
    b && (this._categoryCol = Entry.Dom("ul", {class:"entryCategoryListWorkspace", parent:a}), this._generateCategoryView(b));
    this.blockMenuContainer = Entry.Dom("div", {"class":"blockMenuContainer", parent:a});
    this.svgDom = Entry.Dom($('<svg id="' + this._svgId + '" class="blockMenu" version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent:this.blockMenuContainer});
    this.svgDom.mouseenter(function(b) {
      d._scroller && d._scroller.setOpacity(1);
      b = d.workspace.selectedBlockView;
      !Entry.playground || Entry.playground.resizing || b && b.dragMode === Entry.DRAG_MODE_DRAG || (Entry.playground.focusBlockMenu = !0, b = d.svgGroup.getBBox(), b = b.width + b.x + 64, b > Entry.interfaceState.menuWidth && (this.widthBackup = Entry.interfaceState.menuWidth - 64, $(this).stop().animate({width:b - 62}, 200)));
    });
    this.svgDom.mouseleave(function(b) {
      Entry.playground && !Entry.playground.resizing && (d._scroller && d._scroller.setOpacity(0), (b = this.widthBackup) && $(this).stop().animate({width:b}, 200), delete this.widthBackup, delete Entry.playground.focusBlockMenu);
    });
    $(window).scroll(function() {
      d.updateOffset();
    });
  };
  a.changeCode = function(b) {
    if (!(b instanceof Entry.Code)) {
      return console.error("You must inject code instance");
    }
    this.codeListener && this.code.changeEvent.detach(this.codeListener);
    var a = this;
    this.set({code:b});
    this.codeListener = this.code.changeEvent.attach(this, function() {
      a.changeEvent.notify();
    });
    b.createView(this);
    this._dAlign();
  };
  a.bindCodeView = function(b) {
    this.svgBlockGroup.remove();
    this.svgThreadGroup.remove();
    this.svgBlockGroup = b.svgBlockGroup;
    this.svgThreadGroup = b.svgThreadGroup;
    this.svgGroup.appendChild(this.svgThreadGroup);
    this.svgGroup.appendChild(this.svgBlockGroup);
    this._scroller && this.svgGroup.appendChild(this._scroller.svgGroup);
  };
  a.align = function() {
    var b = this.code;
    if (this._isOn() && b) {
      this._clearSplitters();
      var a = 10, d = "LEFT" == this._align ? 10 : this.svgDom.width() / 2, e, b = this._getSortedBlocks(), f = b[0];
      b[1].forEach(function(b) {
        b = b.view;
        b.set({display:!1});
        b.detach();
      });
      var g = !this._renderedCategories[this.lastSelector];
      f.forEach(function(b) {
        var c = b.view;
        c.attach();
        c.set({display:!0});
        g && c.reDraw();
        b = Entry.block[b.type].class;
        e && e !== b && (this._createSplitter(a), a += 15);
        e = b;
        b = d - c.offsetX;
        "CENTER" == this._align && (b -= c.width / 2);
        a -= c.offsetY;
        c._moveTo(b, a, !1);
        a += c.height + 15;
      }.bind(this));
      this.updateSplitters();
      if (this.workspace) {
        switch(this.workspace.getMode()) {
          case Entry.Workspace.MODE_BOARD:
          case Entry.Workspace.MODE_OVERLAYBOARD:
            this.renderBlock(b);
            break;
          case Entry.Workspace.MODE_VIMBOARD:
            this.renderText(b);
            break;
          default:
            this.renderBlock(b);
        }
      }
      "func" !== this.lastSelector && (this._renderedCategories[this.lastSelector] = !0);
      this.changeEvent.notify();
    }
  };
  a.cloneToGlobal = function(b) {
    var a = this.dragBlock;
    if (!this._boardBlockView && null !== a) {
      var d = this.workspace, e = d.getMode(), f = Entry.Workspace, g = this._svgWidth, h = d.selectedBoard, k = a.mouseDownCoordinate, l = d = 0;
      k && (d = b.pageX - k.x, l = b.pageY - k.y);
      !h || e !== f.MODE_BOARD && e !== f.MODE_OVERLAYBOARD ? (g = Entry.GlobalSvg, g.setView(a, e) && (g.adjust(d, l), g.addControl(b))) : h.code && (e = a.block, f = e.getThread(), e && f && (this._boardBlockView = Entry.do("addThread", f.toJSON(!0)).value.getFirstBlock().view, e = this.offset().top - h.offset().top - $(window).scrollTop(), this._boardBlockView._moveTo(a.x - g + (d || 0), a.y + e + (l || 0), !1), this._boardBlockView.onMouseDown.call(this._boardBlockView, b), this._boardBlockView.dragInstance.set({isNew:!0})));
    }
  };
  a.terminateDrag = function() {
    if (this._boardBlockView) {
      var b = this._boardBlockView;
      if (b) {
        this.workspace.getBoard();
        this._boardBlockView = null;
        var a = Entry.GlobalSvg.left, d = Entry.GlobalSvg.width / 2, b = b.getBoard().offset().left;
        return a < b - d;
      }
    }
  };
  a.getCode = function(b) {
    return this.code;
  };
  a.setSelectedBlock = function(b) {
    var a = this.selectedBlockView;
    a && a.removeSelected();
    b instanceof Entry.BlockView ? b.addSelected() : b = null;
    this.set({selectedBlockView:b});
  };
  a.hide = function() {
    this.view.addClass("entryRemove");
  };
  a.show = function() {
    this.view.removeClass("entryRemove");
  };
  a.renderText = function(b) {
    if (this._isOn()) {
      b = b || this._getSortedBlocks();
      var a = Entry.BlockView.RENDER_MODE_TEXT;
      b[0].forEach(function(b) {
        a !== b.view.renderMode && (b = b.getThread(), b.view ? b.view.renderText() : b.createView(this, Entry.BlockView.RENDER_MODE_TEXT));
      }.bind(this));
      return b;
    }
  };
  a.renderBlock = function(b) {
    if (this._isOn()) {
      b = b || this._getSortedBlocks();
      var a = Entry.BlockView.RENDER_MODE_BLOCK;
      b[0].forEach(function(b) {
        a !== b.view.renderMode && (b = b.getThread(), b.view ? b.view.renderBlock() : b.createView(this, Entry.BlockView.RENDER_MODE_BLOCK));
      }.bind(this));
      return b;
    }
  };
  a._createSplitter = function(b) {
    b = this.svgBlockGroup.elem("line", {x1:20, y1:b, x2:this._svgWidth - 20, y2:b, stroke:"#b5b5b5"});
    this._splitters.push(b);
  };
  a.updateSplitters = function(b) {
    b = void 0 === b ? 0 : b;
    var a = this._svgWidth - 20, d;
    this._splitters.forEach(function(c) {
      d = parseFloat(c.getAttribute("y1")) + b;
      c.attr({x2:a, y1:d, y2:d});
    });
  };
  a._clearSplitters = function() {
    for (var b = this._splitters, a = b.length - 1;0 <= a;a--) {
      b[a].remove(), b.pop();
    }
  };
  a.setWidth = function() {
    this._svgWidth = this.blockMenuContainer.width();
    this.updateSplitters();
  };
  a.setMenu = function() {
    this._categoryData.forEach(function(b) {
      var a = b.category;
      b = b.blocks;
      if ("func" === a) {
        var d = this.code.getThreadsByCategory("func").map(function(b) {
          return b.getFirstBlock().type;
        });
        b = d.length ? d : b;
      }
      for (var d = b.length, e = 0;e < b.length;e++) {
        this.checkBanClass(Entry.block[b[e]]) && d--;
      }
      a = this._categoryElems[a];
      0 === d ? a.addClass("entryRemove") : a.removeClass("entryRemove");
    }.bind(this));
    this.selectMenu(0, !0);
  };
  a.getCategoryCodes = function(b) {
  };
  a._convertSelector = function(b) {
    if (isNaN(b)) {
      return b;
    }
    b = Number(b);
    for (var a = this._categories, d = this._categoryElems, e = 0;e < a.length;e++) {
      var f = a[e];
      if (!d[f].hasClass("entryRemove") && 0 === b--) {
        return f;
      }
    }
  };
  a.selectMenu = function(b, a, d) {
    if (this._isOn()) {
      var c = this._selectedCategoryView, f = this._convertSelector(b);
      if (void 0 === b || f) {
        f && (this.lastSelector = f);
        this._isSelectingMenu = !0;
        switch(f) {
          case "variable":
            Entry.playground.checkVariables();
            break;
          case "arduino":
            this._generateHwCode(), this.align();
        }
        b = this._categoryElems[f];
        var g = !1, h = this.workspace.board, k = h.view;
        c && c.removeClass("entrySelectedCategory");
        b != c || a ? c ? f || (this._selectedCategoryView = null) : (this.visible || (g = !0, k.addClass("foldOut"), Entry.playground.showTabs()), k.removeClass("folding"), this.visible = !0) : (k.addClass("folding"), this._selectedCategoryView = null, b && b.removeClass("entrySelectedCategory"), Entry.playground.hideTabs(), g = !0, this.visible = !1);
        g && Entry.bindAnimationCallbackOnce(k, function() {
          h.scroller.resizeScrollBar.call(h.scroller);
          k.removeClass("foldOut");
          Entry.windowResized.notify();
        });
        this._isSelectingMenu = !1;
        this.visible && (this._selectedCategoryView = b) && b.addClass("entrySelectedCategory");
        !0 !== d && this._dAlign();
      } else {
        this._dAlign();
      }
    }
  };
  a._generateCategoryCodes = function(b) {
    b || (this.view.addClass("init"), b = Object.keys(this._categoryElems));
    if (b.length) {
      var a = b.shift();
      "arduino" !== a ? this._generateCategoryCode(a) : this._generateHwCode(!0);
      b.length ? this._generateCodesTimer = setTimeout(function() {
        this._generateCategoryCodes(b);
      }.bind(this), 0) : (this._generateCodesTimer = null, this.view.removeClass("init"), this.align());
    }
  };
  a._generateCategoryCode = function(b) {
    var a = this.code, d = [], e = this._categoryData.filter(function(a) {
      return a.category == b;
    })[0];
    if (e) {
      e.blocks.forEach(function(a) {
        var c = Entry.block[a];
        c.category = e.category;
        if (c && c.def) {
          if (c.defs) {
            for (c.defs.forEach(function(a) {
              a.category = b;
            }), a = 0;a < c.defs.length;a++) {
              d.push([c.defs[a]]);
            }
          } else {
            c.def.category = b, d.push([c.def]);
          }
        } else {
          d.push([{type:a, category:b}]);
        }
      });
      this._categories.push(b);
      var f;
      if ("func" == b) {
        var g = this.code.getThreadsByCategory("func");
        g.length && (f = this.code.getThreadIndex(g[0]));
      }
      d.forEach(function(b) {
        b && b[0] && (b[0].x = -99999, a.createThread(b, f), void 0 !== f && f++, delete b[0].x);
      });
    }
  };
  a.banClass = function(b) {
    0 > this._bannedClass.indexOf(b) && (this._bannedClass.push(b), this._dAlign());
  };
  a.unbanClass = function(b) {
    b = this._bannedClass.indexOf(b);
    -1 < b && (this._bannedClass.splice(b, 1), this._dAlign());
  };
  a.checkBanClass = function(b) {
    if (b) {
      b = b.isNotFor;
      if (!b || 0 === b.length) {
        return !1;
      }
      for (var a, d = this._bannedClass, e = 0;e < b.length;e++) {
        if ((a = b[e]) && -1 === d.indexOf(a)) {
          return !1;
        }
      }
      return !0;
    }
  };
  a.checkCategory = function(b) {
    if (this._categoryData && b) {
      if (!this.lastSelector || this._selectDynamic) {
        return !0;
      }
      var a = "category_" + this.lastSelector;
      b = b.isFor;
      if (this.lastSelector && b && 0 > b.indexOf(a)) {
        return !0;
      }
    }
  };
  a._addControl = function(b) {
    var a = this;
    b.on("wheel", function() {
      a._mouseWheel.apply(a, arguments);
    });
    a._scroller && $(this.svg).bind("mousedown touchstart", function(b) {
      a.onMouseDown.apply(a, arguments);
    });
  };
  a.onMouseDown = function(b) {
    function a(b) {
      b.stopPropagation && b.stopPropagation();
      b.preventDefault && b.preventDefault();
      b = Entry.Utils.convertMouseEvent(b);
      var a = e.dragInstance;
      e._scroller.scroll(-b.pageY + a.offsetY);
      a.set({offsetY:b.pageY});
    }
    function d(b) {
      $(document).unbind(".blockMenu");
      delete e.dragInstance;
    }
    b.stopPropagation && b.stopPropagation();
    b.preventDefault && b.preventDefault();
    var e = this;
    if (0 === b.button || b.originalEvent && b.originalEvent.touches) {
      b = Entry.Utils.convertMouseEvent(b);
      Entry.documentMousedown && Entry.documentMousedown.notify(b);
      var f = $(document);
      f.bind("mousemove.blockMenu", a);
      f.bind("mouseup.blockMenu", d);
      f.bind("touchmove.blockMenu", a);
      f.bind("touchend.blockMenu", d);
      this.dragInstance = new Entry.DragInstance({startY:b.pageY, offsetY:b.pageY});
    }
  };
  a._mouseWheel = function(b) {
    b = b.originalEvent;
    b.preventDefault();
    var a = Entry.disposeEvent;
    a && a.notify(b);
    this._scroller.scroll(-b.wheelDeltaY || b.deltaY / 3);
  };
  a.dominate = function(b) {
    this.svgBlockGroup.appendChild(b.view.svgGroup);
  };
  a.reDraw = function() {
    if (this._isOn()) {
      var b = this.lastSelector;
      this._selectDynamic && (b = void 0);
      this.selectMenu(b, !0);
      this._getSortedBlocks().shift().forEach(function(b) {
        b.view.reDraw();
      });
    }
  };
  a._handleDragBlock = function() {
    this._boardBlockView = null;
    this._scroller && this._scroller.setOpacity(0);
  };
  a._captureKeyEvent = function(b) {
    var a = b.keyCode;
    b.ctrlKey && "workspace" == Entry.type && 48 < a && 58 > a && (b.preventDefault(), setTimeout(function() {
      this._cancelDynamic(!0);
      this._dSelectMenu(a - 49, !0);
    }.bind(this), 200));
  };
  a.enablePattern = function() {
    this.pattern.removeAttribute("style");
  };
  a.disablePattern = function() {
    this.pattern.attr({style:"display: none"});
  };
  a._clearCategory = function() {
    this._selectedCategoryView = null;
    this._categories = [];
    var b = this._categoryElems, a;
    for (a in b) {
      b[a].remove();
    }
    this._categoryElems = {};
    this.code && this.code.constructor == Entry.Code && this.code.clear();
  };
  a.setCategoryData = function(b) {
    this._generateCodesTimer && (clearTimeout(this._generateCodesTimer), this._generateCodesTimer = null);
    this._clearCategory();
    this._categoryData = b;
    this._generateCategoryView(b);
    this._generateCategoryCodes();
    this.setMenu();
  };
  a._generateCategoryView = function(b) {
    if (b) {
      for (var a = 0;a < b.length;a++) {
        this._generateCategoryElement(b[a].category);
      }
    }
  };
  a._generateCategoryElement = function(b) {
    var a = this;
    (function(b, c) {
      b.text(Lang.Blocks[c.toUpperCase()]);
      a._categoryElems[c] = b;
      b.bindOnClick(function(b) {
        a._cancelDynamic(!0, function() {
          a.selectMenu(c, void 0, !0);
          a.align();
        });
      });
    })(Entry.Dom("li", {id:"entryCategory" + b, class:"entryCategoryElementWorkspace entryRemove", parent:this._categoryCol}), b);
  };
  a.updateOffset = function() {
    this._offset = this.svgDom.offset();
  };
  a.offset = function() {
    (!this._offset || 0 === this._offset.top && 0 === this._offset.left) && this.updateOffset();
    return this._offset;
  };
  a._generateHwCode = function(b) {
    var a = this.code, d = a.getThreadsByCategory("arduino");
    d.forEach(function(b) {
      b.destroy();
    });
    for (var d = this._categoryData, e, f = d.length - 1;0 <= f;f--) {
      if ("arduino" === d[f].category) {
        e = d[f].blocks;
        break;
      }
    }
    if (e) {
      d = [];
      for (f = 0;f < e.length;f++) {
        var g = e[f], h = Entry.block[g];
        if (!this.checkBanClass(h)) {
          if (h && h.def) {
            if (h.defs) {
              for (h.defs.forEach(function(b) {
                b.category = "arduino";
              }), f = 0;f < h.defs.length;f++) {
                d.push([h.defs[f]]);
              }
            } else {
              h.def.category = "arduino", d.push([h.def]);
            }
          } else {
            d.push([{type:g, category:"arduino"}]);
          }
        }
      }
      d.forEach(function(c) {
        b && (c[0].x = -99999);
        a.createThread(c);
        delete c[0].x;
      });
    }
  };
  a.setAlign = function(b) {
    this._align = b || "CENTER";
  };
  a._isNotVisible = function(b) {
    return this.checkCategory(b) || this.checkBanClass(b);
  };
  a._getSortedBlocks = function() {
    var b = [], a = [], d = this.code.getThreads();
    if (this._selectDynamic) {
      for (var b = Array(this._dynamicThreads.length), e = 0;e < d.length;e++) {
        var f = d[e].getFirstBlock();
        if (f) {
          var g = f.type, g = this._dynamicThreads.indexOf(g);
          -1 < g ? b[g] = f : a.push(f);
        }
      }
      b = b.filter(function(b) {
        return b instanceof Entry.Block;
      });
    } else {
      for (e = 0;e < d.length;e++) {
        if (f = d[e].getFirstBlock()) {
          g = f.type, this._isNotVisible(Entry.block[g]) ? a.push(f) : b.push(f);
        }
      }
    }
    return [b, a];
  };
  a._setDynamic = function(b) {
    this._isOn() && (this._selectDynamic = !0, this._dynamicThreads = b, this.selectMenu(void 0, !0));
  };
  a._cancelDynamic = function(b, a) {
    this._setDynamicTimer && (clearTimeout(this._setDynamicTimer), this._setDynamicTimer = null);
    this._selectDynamic = !1;
    this._dynamicThreads = [];
    !0 !== b && this.selectMenu(this.lastSelector, !0);
    a && a();
  };
  a._isOn = function() {
    return "none" !== this.view.css("display");
  };
  a.deleteRendered = function(b) {
    delete this._renderedCategories[b];
  };
})(Entry.BlockMenu.prototype);
Entry.BlockMenuScroller = function(a) {
  var b = this;
  this.board = a;
  this.board.changeEvent.attach(this, this._reset);
  this.svgGroup = null;
  this.vRatio = this.vY = this.vWidth = this.hX = 0;
  this._visible = !0;
  this._opacity = -1;
  this.mouseHandler = function() {
    b.onMouseDown.apply(b, arguments);
  };
  this.createScrollBar();
  this.setOpacity(0);
  this._addControl();
  this._domHeight = 0;
  this._dResizeScrollBar = Entry.Utils.debounce(this.resizeScrollBar, 50);
  Entry.windowResized && Entry.windowResized.attach(this, this._dResizeScrollBar);
};
Entry.BlockMenuScroller.RADIUS = 7;
(function(a) {
  a.createScrollBar = function() {
    this.svgGroup = this.board.svgGroup.elem("g", {class:"boardScrollbar"});
    this.vScrollbar = this.svgGroup.elem("rect", {rx:4, ry:4});
  };
  a.resizeScrollBar = function() {
    this._updateRatio();
    var b = this.board.blockMenuContainer, a = b.height();
    if (a !== this._domHeight) {
      return this._domHeight = a, this.board.align();
    }
    this._visible && 0 !== this.vRatio && this.vScrollbar.attr({width:9, height:b.height() / this.vRatio, x:b.width() - 9});
  };
  a.updateScrollBar = function(b) {
    this.vY += b;
    this.vScrollbar.attr({y:this.vY});
  };
  a.scroll = function(b) {
    this.isVisible() && (b = this._adjustValue(b) - this.vY, 0 !== b && (this.board.code.moveBy(0, -b * this.vRatio), this.updateScrollBar(b)));
  };
  a._adjustValue = function(b) {
    var a = this.board.svgDom.height(), a = a - a / this.vRatio;
    b = this.vY + b;
    b = Math.max(0, b);
    return b = Math.min(a, b);
  };
  a.setVisible = function(b) {
    b != this.isVisible() && (this._visible = b, this.svgGroup.attr({display:!0 === b ? "block" : "none"}));
  };
  a.setOpacity = function(b) {
    this._opacity != b && (this.vScrollbar.attr({opacity:b}), this._opacity = b);
  };
  a.isVisible = function() {
    return this._visible;
  };
  a._updateRatio = function() {
    var b = this.board, a = b.svgBlockGroup.getBBox(), b = b.blockMenuContainer.height();
    this.vRatio = a = (a.height + 20) / b;
    1 >= a ? this.setVisible(!1) : this.setVisible(!0);
  };
  a._reset = function() {
    this.vY = 0;
    this.vScrollbar.attr({y:this.vY});
    this._dResizeScrollBar();
  };
  a.onMouseDown = function(b) {
    function a(b) {
      b.stopPropagation && b.stopPropagation();
      b.preventDefault && b.preventDefault();
      b = b.originalEvent && b.originalEvent.touches ? b.originalEvent.touches[0] : b;
      var a = e.dragInstance;
      e.scroll(b.pageY - a.offsetY);
      a.set({offsetY:b.pageY});
    }
    function d(b) {
      $(document).unbind(".scroll");
      delete e.dragInstance;
    }
    var e = this;
    b.stopPropagation && b.stopPropagation();
    b.preventDefault && b.preventDefault();
    if (0 === b.button || b.originalEvent && b.originalEvent.touches) {
      Entry.documentMousedown && Entry.documentMousedown.notify(b);
      var f;
      f = b.originalEvent && b.originalEvent.touches ? b.originalEvent.touches[0] : b;
      var g = $(document);
      g.bind("mousemove.scroll", a);
      g.bind("mouseup.scroll", d);
      g.bind("touchmove.scroll", a);
      g.bind("touchend.scroll", d);
      e.dragInstance = new Entry.DragInstance({startY:f.pageY, offsetY:f.pageY});
    }
    b.stopPropagation();
  };
  a._addControl = function() {
    $(this.vScrollbar).bind("mousedown touchstart", this.mouseHandler);
  };
})(Entry.BlockMenuScroller.prototype);
Entry.BlockView = function(a, b, c) {
  var d = this;
  Entry.Model(this, !1);
  this.block = a;
  this._lazyUpdatePos = Entry.Utils.debounce(a._updatePos.bind(a), 200);
  this.dAlignContent = Entry.Utils.debounce(this.alignContent, 30);
  this._board = b;
  this._observers = [];
  this.set(a);
  this.svgGroup = b.svgBlockGroup.elem("g");
  this.svgGroup.blockView = this;
  this._schema = Entry.skinContainer.getSkin(a);
  if (void 0 === this._schema) {
    this.block.destroy(!1, !1);
  } else {
    if (void 0 === c) {
      var e = this.getBoard().workspace;
      this.renderMode = e && e.getBlockViewRenderMode ? e.getBlockViewRenderMode() : Entry.BlockView.RENDER_MODE_BLOCK;
    } else {
      this.renderMode = Entry.BlockView.RENDER_MODE_BLOCK;
    }
    this._schema.deletable && this.block.setDeletable(this._schema.deletable);
    this._schema.copyable && this.block.setCopyable(this._schema.copyable);
    !1 !== this._schema.display && !1 !== a.display || this.set({display:!1});
    this._schema.changeEvent && (this._schemaChangeEvent = this._schema.changeEvent.attach(this, this._updateSchema));
    e = this._skeleton = Entry.skeleton[this._schema.skeleton];
    this._contents = [];
    this._statements = [];
    this._extensions = [];
    this.magnet = {};
    this._paramMap = {};
    e.magnets && e.magnets(this).next && (this.svgGroup.nextMagnet = this.block, this._nextGroup = this.svgGroup.elem("g", {class:"entryBlockNextGroup"}), this._observers.push(this.observe(this, "_updateMagnet", ["contentHeight"])));
    this.isInBlockMenu = this.getBoard() instanceof Entry.BlockMenu;
    this.mouseHandler = function() {
      var b = d.block.events;
      b && b.mousedown && b.mousedown.forEach(function(b) {
        b(d);
      });
      d.onMouseDown.apply(d, arguments);
    };
    this._startRender(a, c);
    this._observers.push(this.block.observe(this, "_setMovable", ["movable"]));
    this._observers.push(this.block.observe(this, "_setReadOnly", ["movable"]));
    this._observers.push(this.block.observe(this, "_setCopyable", ["copyable"]));
    this._observers.push(this.block.observe(this, "_updateColor", ["deletable"], !1));
    this._observers.push(this.observe(this, "_updateBG", ["magneting"], !1));
    this._observers.push(this.observe(this, "_updateOpacity", ["visible"], !1));
    this._observers.push(this.observe(this, "_updateDisplay", ["display"]));
    this._observers.push(this.observe(this, "_updateShadow", ["shadow"]));
    this._observers.push(this.observe(this, "_updateMagnet", ["offsetY"]));
    this._observers.push(b.code.observe(this, "_setBoard", ["board"], !1));
    this.dragMode = Entry.DRAG_MODE_NONE;
    Entry.Utils.disableContextmenu(this.svgGroup.node);
    b = a.events.viewAdd;
    "workspace" == Entry.type && b && !this.isInBlockMenu && b.forEach(function(b) {
      Entry.Utils.isFunction(b) && b(a);
    });
  }
};
Entry.BlockView.PARAM_SPACE = 5;
Entry.BlockView.DRAG_RADIUS = 5;
Entry.BlockView.pngMap = {};
Entry.BlockView.RENDER_MODE_BLOCK = 1;
Entry.BlockView.RENDER_MODE_TEXT = 2;
(function(a) {
  a.schema = {id:0, type:Entry.STATIC.BLOCK_RENDER_MODEL, x:0, y:0, offsetX:0, offsetY:0, width:0, height:0, contentWidth:0, contentHeight:0, magneting:!1, visible:!0, animating:!1, shadow:!0, display:!0};
  a._startRender = function(b, a) {
    var c = this;
    b = this._skeleton;
    var e = {class:"block"};
    !1 === this.display && (e.display = "none");
    this.svgGroup.attr(e);
    this._schema.css && this.svgGroup.attr({style:this._schema.css});
    (e = b.classes) && 0 !== e.length && e.forEach(function(b) {
      c.svgGroup.addClass(b);
    });
    e = b.path(this);
    this.pathGroup = this.svgGroup.elem("g");
    this._updateMagnet();
    this._path = this.pathGroup.elem("path");
    Entry.isMobile() || ($(this._path).mouseenter(function(b) {
      c._mouseEnable && c._changeFill(!0);
    }), $(this._path).mouseleave(function(b) {
      c._mouseEnable && c._changeFill(!1);
    }));
    var f = this._schema.color;
    this.block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN && (f = Entry.Utils.colorLighten(f));
    this._fillColor = f;
    e = {d:e, fill:f, class:"blockPath"};
    if (this.magnet.next || this._skeleton.nextShadow) {
      f = this.getBoard().suffix, this.pathGroup.attr({filter:"url(#entryBlockShadowFilter_" + f + ")"});
    } else {
      if (this.magnet.string || this.magnet.boolean) {
        e.stroke = b.outerLine;
      }
    }
    b.outerLine && (e["stroke-width"] = "0.6");
    this._path.attr(e);
    this._moveTo(this.x, this.y, !1);
    this._startContentRender(a);
    this._startExtension(a);
    !0 !== this._board.disableMouseEvent && this._addControl();
    (a = this.guideSvgGroup) && this.svgGroup.insertBefore(a, this.svgGroup.firstChild);
    this.bindPrev();
  };
  a._startContentRender = function(b) {
    b = void 0 === b ? this.renderMode : b;
    this.contentSvgGroup && this.contentSvgGroup.remove();
    this.statementSvgGroup && this.statementSvgGroup.remove();
    this._contents.forEach(function(b) {
      b.destroy();
    });
    this.contentSvgGroup = this.svgGroup.elem("g", {class:"contentsGroup"});
    this._contents = [];
    var a = this._schema;
    a.statements && a.statements.length && (this.statementSvgGroup = this.svgGroup.elem("g", {class:"statementGroup"}));
    var d = /(%\d)/mi, e = this._getTemplate(b), f = this._getSchemaParams(b);
    b === Entry.BlockView.RENDER_MODE_TEXT && /(if)+(.|\n)+(else)+/gmi.test(e) && !d.test(e) && this.isInBlockMenu && (e = e.replace("else", "%" + f.length + " else"));
    for (var g = e.split(d), e = 0;e < g.length;e++) {
      var h = g[e];
      " " === h[0] && (h = h.substring(1));
      " " === h[h.length - 1] && (h = h.substring(0, h.length - 1));
      if (0 !== h.length) {
        if (d.test(h)) {
          var k = Number(h.split("%")[1]) - 1, h = f[k], h = new Entry["Field" + h.type](h, this, k, b || this.renderMode, e);
          this._contents.push(h);
          this._paramMap[k] = h;
        } else {
          this._contents.push(new Entry.FieldText({text:h}, this));
        }
      }
    }
    if ((b = a.statements) && b.length) {
      for (e = 0;e < b.length;e++) {
        this._statements.push(new Entry.FieldStatement(b[e], this, e));
      }
    }
    this.alignContent(!1);
  };
  a._startExtension = function(b) {
    this._extensions = this.block.extensions.map(function(a) {
      return new Entry["Ext" + a.type](a, this, b);
    }.bind(this));
  };
  a._updateSchema = function() {
    this._startContentRender();
  };
  a.changeType = function(b) {
    this._schemaChangeEvent && this._schemaChangeEvent.destroy();
    this._schema = Entry.block[b];
    this._schema.changeEvent && (this._schemaChangeEvent = this._schema.changeEvent.attach(this, this._updateSchema));
    this._updateSchema();
  };
  a.alignContent = function(b) {
    !0 !== b && (b = !1);
    for (var a = 0, d = 0, e = 0, f = 0, g = 0, h = 0, k = 0;k < this._contents.length;k++) {
      var l = this._contents[k];
      l instanceof Entry.FieldLineBreak ? (this._alignStatement(b, f), l.align(f), f++, d = l.box.y, a = 8) : (l.align(a, d, b), k === this._contents.length - 1 || l instanceof Entry.FieldText && 0 == l._text.length || (a += Entry.BlockView.PARAM_SPACE));
      l = l.box;
      0 !== f ? h = Math.max(1E6 * Math.round(l.height), h) : e = Math.max(l.height, e);
      a += l.width;
      g = Math.max(g, a);
      this.set({contentWidth:g, contentHeight:e});
    }
    this.set({contentHeight:e + h});
    this._statements.length != f && this._alignStatement(b, f);
    b = this.getContentPos();
    this.contentSvgGroup.attr("transform", "translate(" + b.x + "," + b.y + ")");
    this.contentPos = b;
    this._render();
    this._updateMagnet();
  };
  a._alignStatement = function(b, a) {
    var c = this._skeleton.statementPos ? this._skeleton.statementPos(this) : [], e = this._statements[a];
    e && (a = c[a]) && e.align(a.x, a.y, b);
  };
  a._render = function() {
    this._renderPath();
    this.set(this._skeleton.box(this));
  };
  a._renderPath = function() {
    var b = this._skeleton.path(this);
    this._path.attr({d:b});
    this.set({animating:!1});
    this._setBackgroundPath();
  };
  a._setPosition = function(b) {
    this.svgGroup.attr("transform", "translate(" + this.x + "," + this.y + ")");
  };
  a._toLocalCoordinate = function(b) {
    this._moveTo(0, 0, !1);
    b.appendChild(this.svgGroup);
  };
  a._toGlobalCoordinate = function(b) {
    b = this.getAbsoluteCoordinate(b);
    this._moveTo(b.x, b.y, !1);
    this.getBoard().svgBlockGroup.appendChild(this.svgGroup);
  };
  a._moveTo = function(b, a, d) {
    var c = this.x, f = this.y;
    this.display || (a = b = -99999);
    c === b && f === a || this.set({x:b, y:a});
    this._lazyUpdatePos();
    this.visible && this.display && this._setPosition(d);
  };
  a._moveBy = function(b, a, d) {
    return this._moveTo(this.x + b, this.y + a, d);
  };
  a._addControl = function() {
    var b = this;
    this._mouseEnable = !0;
    $(this.svgGroup).bind("mousedown.blockViewMousedown touchstart.blockViewMousedown", b.mouseHandler);
    var a = b.block.events;
    a && a.dblclick && $(this.svgGroup).dblclick(function() {
      a.dblclick.forEach(function(a) {
        a && a(b);
      });
    });
  };
  a.removeControl = function() {
    this._mouseEnable = !1;
    $(this.svgGroup).unbind(".blockViewMousedown");
  };
  a.onMouseDown = function(b) {
    function c(b) {
      b.stopPropagation();
      var c = g.workspace.getMode(), d;
      c === Entry.Workspace.MODE_VIMBOARD && a.vimBoardEvent(b, "dragOver");
      d = b.originalEvent && b.originalEvent.touches ? b.originalEvent.touches[0] : b;
      var h = f.mouseDownCoordinate, h = Math.sqrt(Math.pow(d.pageX - h.x, 2) + Math.pow(d.pageY - h.y, 2));
      if (f.dragMode == Entry.DRAG_MODE_DRAG || h > Entry.BlockView.DRAG_RADIUS) {
        e && (clearTimeout(e), e = null), f.movable && (f.isInBlockMenu ? g.cloneToGlobal(b) : (b = !1, f.dragMode != Entry.DRAG_MODE_DRAG && (f._toGlobalCoordinate(), f.dragMode = Entry.DRAG_MODE_DRAG, f.block.getThread().changeEvent.notify(), Entry.GlobalSvg.setView(f, c), b = !0), this.animating && this.set({animating:!1}), 0 === f.dragInstance.height && f.dragInstance.set({height:-1 + f.height}), c = f.dragInstance, f._moveBy(d.pageX - c.offsetX, d.pageY - c.offsetY, !1), c.set({offsetX:d.pageX, 
        offsetY:d.pageY}), Entry.GlobalSvg.position(), f.originPos || (f.originPos = {x:f.x, y:f.y}), b && g.generateCodeMagnetMap(), f._updateCloseBlock()));
      }
    }
    function d(b) {
      e && (clearTimeout(e), e = null);
      $(document).unbind(".block");
      f.terminateDrag(b);
      g && g.set({dragBlock:null});
      f._changeFill(!1);
      Entry.GlobalSvg.remove();
      delete this.mouseDownCoordinate;
      delete f.dragInstance;
    }
    b.stopPropagation && b.stopPropagation();
    b.preventDefault && b.preventDefault();
    var e = null, f = this;
    this._changeFill(!1);
    var g = this.getBoard();
    Entry.documentMousedown && Entry.documentMousedown.notify(b);
    if (!this.readOnly && !g.viewOnly) {
      g.setSelectedBlock(this);
      this.dominate();
      if (0 === b.button || b.originalEvent && b.originalEvent.touches) {
        var h = b.type, k;
        k = b.originalEvent && b.originalEvent.touches ? b.originalEvent.touches[0] : b;
        this.mouseDownCoordinate = {x:k.pageX, y:k.pageY};
        var l = $(document);
        l.bind("mousemove.block touchmove.block", c);
        l.bind("mouseup.block touchend.block", d);
        this.dragInstance = new Entry.DragInstance({startX:k.pageX, startY:k.pageY, offsetX:k.pageX, offsetY:k.pageY, height:0, mode:!0});
        g.set({dragBlock:this});
        this.addDragging();
        this.dragMode = Entry.DRAG_MODE_MOUSEDOWN;
        "touchstart" === h && (e = setTimeout(function() {
          e && (e = null, d(), f._rightClick(b));
        }, 1E3));
      } else {
        Entry.Utils.isRightButton(b) && this._rightClick(b);
      }
      g.workspace.getMode() === Entry.Workspace.MODE_VIMBOARD && b && (vimBoard = $(".entryVimBoard>.CodeMirror")[0], document.getElementsByClassName("CodeMirror")[0].dispatchEvent(Entry.Utils.createMouseEvent("dragStart", event)));
    }
  };
  a.vimBoardEvent = function(b, a, d) {
    b && (b = Entry.Utils.createMouseEvent(a, b), d && (b.block = d), $(".entryVimBoard>.CodeMirror")[0].dispatchEvent(b));
  };
  a.terminateDrag = function(b) {
    var a = Entry.GlobalSvg, d = this.getBoard(), e = this.dragMode, f = this.block, g = d.workspace.getMode();
    this.removeDragging();
    this.set({visible:!0});
    this.dragMode = Entry.DRAG_MODE_NONE;
    var h = a.terminateDrag(this);
    if (g === Entry.Workspace.MODE_VIMBOARD) {
      d instanceof Entry.BlockMenu ? (d.terminateDrag(), h === a.DONE && this.vimBoardEvent(b, "dragEnd", f)) : d.clear();
    } else {
      if (e === Entry.DRAG_MODE_DRAG) {
        g = this.dragInstance && this.dragInstance.isNew;
        b = !1;
        var k = this.block.getPrevBlock(this.block);
        switch(h) {
          case a.DONE:
            a = d.magnetedBlockView;
            a instanceof Entry.BlockView && (a = a.block);
            k && !a ? Entry.do("separateBlock", f) : k || a || g ? a ? ("next" === a.view.magneting ? (h = f.getLastBlock(), this.dragMode = e, d.separate(f), this.dragMode = Entry.DRAG_MODE_NONE, Entry.do("insertBlock", a, h).isPass(g), Entry.ConnectionRipple.setView(a.view).dispose()) : (Entry.do("insertBlock", f, a).isPass(g), b = !0), createjs.Sound.play("entryMagneting")) : Entry.do("moveBlock", f).isPass(g) : f.getThread().view.isGlobal() ? Entry.do("moveBlock", f) : Entry.do("separateBlock", 
            f);
            break;
          case a.RETURN:
            f = this.block;
            e = this.originPos;
            k ? (this.set({animating:!1}), createjs.Sound.play("entryMagneting"), this.bindPrev(k), f.insert(k)) : (a = f.getThread().view.getParent(), a instanceof Entry.Board ? this._moveTo(e.x, e.y, !1) : (createjs.Sound.play("entryMagneting"), Entry.do("insertBlock", f, a)));
            break;
          case a.REMOVE:
            createjs.Sound.play("entryDelete"), g ? this.block.destroy(!1, !0) : this.block.doDestroyBelow(!1);
        }
        d.setMagnetedBlock(null);
        b && Entry.ConnectionRipple.setView(f.view).dispose();
      }
    }
    this.destroyShadow();
    delete this.originPos;
    this.dominate();
  };
  a._updateCloseBlock = function() {
    var b = this.getBoard(), a;
    if (this._skeleton.magnets) {
      for (var d in this.magnet) {
        if (a = "next" === d ? this.getBoard().getNearestMagnet(this.x, this.y + this.getBelowHeight(), d) : this.getBoard().getNearestMagnet(this.x, this.y, d)) {
          return b.setMagnetedBlock(a.view, d);
        }
      }
      b.setMagnetedBlock(null);
    }
  };
  a.dominate = function() {
    this.block.getThread().view.dominate();
  };
  a.getSvgRoot = function() {
    for (var b = this.getBoard().svgBlockGroup, a = this.svgGroup;a.parentNode !== b;) {
      a = a.parentNode;
    }
    return a;
  };
  a.getBoard = function() {
    return this._board;
  };
  a._setBoard = function() {
    this._board = this._board.code.board;
  };
  a.destroy = function(b) {
    this.block.set({view:null});
    $(this.svgGroup).unbind(".blockViewMousedown");
    this._destroyObservers();
    var a = this.svgGroup;
    b ? $(a).fadeOut(100, function() {
      a.remove();
    }) : a.remove();
    this._contents.forEach(function(b) {
      b.destroy();
    });
    this._statements.forEach(function(b) {
      b.destroy();
    });
    var d = this.block;
    b = d.events.viewDestroy;
    "workspace" == Entry.type && b && !this.isInBlockMenu && b.forEach(function(b) {
      Entry.Utils.isFunction(b) && b(d);
    });
    this._schemaChangeEvent && this._schemaChangeEvent.destroy();
  };
  a.getShadow = function() {
    this._shadow || (this._shadow = Entry.SVG.createElement(this.svgGroup.cloneNode(!0), {opacity:.5}), this.getBoard().svgGroup.appendChild(this._shadow));
    return this._shadow;
  };
  a.destroyShadow = function() {
    this._shadow && (this._shadow.remove(), delete this._shadow);
  };
  a._updateMagnet = function() {
    if (this._skeleton.magnets) {
      var b = this._skeleton.magnets(this);
      b.next && this._nextGroup.attr("transform", "translate(" + b.next.x + "," + b.next.y + ")");
      this.magnet = b;
      this.block.getThread().changeEvent.notify();
    }
  };
  a._updateBG = function() {
    if (this._board.dragBlock && this._board.dragBlock.dragInstance) {
      var b = this.svgGroup;
      if (this.magnet.next || this.magnet.previous) {
        if (b = this.magneting) {
          var a = this._board.dragBlock.getShadow(), d = this.getAbsoluteCoordinate(), e;
          if ("previous" === b) {
            e = this.magnet.next, e = "translate(" + (d.x + e.x) + "," + (d.y + e.y) + ")";
          } else {
            if ("next" === b) {
              e = this.magnet.previous;
              var f = this._board.dragBlock.getBelowHeight();
              e = "translate(" + (d.x + e.x) + "," + (d.y + e.y - f) + ")";
            }
          }
          $(a).attr({transform:e, display:"block"});
          this._clonedShadow = a;
          this.background && (this.background.remove(), this.nextBackground.remove(), delete this.background, delete this.nextBackground);
          "previous" === b && (b = this._board.dragBlock.getBelowHeight() + this.offsetY, this.originalHeight = this.offsetY, this.set({offsetY:b}));
        } else {
          this._clonedShadow && (this._clonedShadow.attr({display:"none"}), delete this._clonedShadow), b = this.originalHeight, void 0 !== b && (this.background && (this.background.remove(), this.nextBackground.remove(), delete this.background, delete this.nextBackground), this.set({offsetY:b}), delete this.originalHeight);
        }
        (b = this.block.thread.changeEvent) && b.notify();
      } else {
        this.magneting ? (b.attr({filter:"url(#entryBlockHighlightFilter_" + this.getBoard().suffix + ")"}), b.addClass("outputHighlight")) : (b.removeClass("outputHighlight"), b.removeAttr("filter"));
      }
    }
  };
  a.addDragging = function() {
    this.svgGroup.addClass("dragging");
  };
  a.removeDragging = function() {
    this.svgGroup.removeClass("dragging");
  };
  a.addSelected = function() {
    this.svgGroup.addClass("selected");
  };
  a.removeSelected = function() {
    this.svgGroup.removeClass("selected");
  };
  a.getSkeleton = function() {
    return this._skeleton;
  };
  a.getContentPos = function() {
    return this._skeleton.contentPos(this);
  };
  a.renderText = function() {
    this.renderMode = Entry.BlockView.RENDER_MODE_TEXT;
    this._startContentRender(Entry.BlockView.RENDER_MODE_TEXT);
  };
  a.renderBlock = function() {
    this.renderMode = Entry.BlockView.RENDER_MODE_BLOCK;
    this._startContentRender(Entry.BlockView.RENDER_MODE_BLOCK);
  };
  a._updateOpacity = function() {
    this.svgGroup.attr({opacity:!1 === this.visible ? 0 : 1});
    this.visible && this._setPosition();
  };
  a._updateShadow = function() {
    this.shadow && Entry.Utils.colorDarken(this._schema.color, .7);
  };
  a._setMovable = function() {
    this.movable = null !== this.block.isMovable() ? this.block.isMovable() : void 0 !== this._skeleton.movable ? this._skeleton.movable : !0;
  };
  a._setReadOnly = function() {
    this.readOnly = null !== this.block.isReadOnly() ? this.block.isReadOnly() : void 0 !== this._skeleton.readOnly ? this._skeleton.readOnly : !1;
  };
  a._setCopyable = function() {
    this.copyable = null !== this.block.isCopyable() ? this.block.isCopyable() : void 0 !== this._skeleton.copyable ? this._skeleton.copyable : !0;
  };
  a.bumpAway = function(b, a) {
    var c = this;
    b = b || 15;
    a ? window.setTimeout(function() {
      c._moveBy(b, b, !1);
    }, a) : c._moveBy(b, b, !1);
  };
  a.bindPrev = function(b, a) {
    if (b) {
      this._toLocalCoordinate(b.view._nextGroup);
      var c = b.getNextBlock();
      if (c && c && c !== this.block) {
        var e = this.block.getLastBlock();
        a ? c.view._toLocalCoordinate(b.view._nextGroup) : e.view.magnet.next ? c.view._toLocalCoordinate(e.view._nextGroup) : (c.view._toGlobalCoordinate(), c.separate(), c.view.bumpAway(null, 100));
      }
    } else {
      if (b = this.block.getPrevBlock()) {
        this._toLocalCoordinate(b.view._nextGroup), (c = this.block.getNextBlock()) && c.view && c.view._toLocalCoordinate(this._nextGroup);
      }
    }
  };
  a.getAbsoluteCoordinate = function(b) {
    b = void 0 !== b ? b : this.dragMode;
    if (b === Entry.DRAG_MODE_DRAG) {
      return {x:this.x, y:this.y};
    }
    b = this.block.getThread().view.requestAbsoluteCoordinate(this);
    b.x += this.x;
    b.y += this.y;
    return b;
  };
  a.getBelowHeight = function() {
    return this.block.getThread().view.requestPartHeight(this);
  };
  a._updateDisplay = function() {
    this.svgGroup.attr({display:!1 === this.display ? "none" : "block"});
    this.display && this._setPosition();
  };
  a._updateColor = function() {
    var b = this._schema.color;
    this.block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN && (b = Entry.Utils.colorLighten(b));
    this._fillColor = b;
    this._path.attr({fill:b});
    this._updateContents();
  };
  a._updateContents = function() {
    this._contents.forEach(function(b) {
      b.renderStart(void 0, void 0, this.renderMode);
    }.bind(this));
    this.alignContent(!1);
  };
  a._destroyObservers = function() {
    for (var b = this._observers;b.length;) {
      b.pop().destroy();
    }
  };
  a._changeFill = function(b) {
    var a = this.getBoard();
    if (!a.dragBlock) {
      var d = this._fillColor, e = this._path, a = this.getBoard();
      b ? (d = "url(#blockHoverPattern_" + this.getBoard().suffix + ")", a.enablePattern()) : a.disablePattern();
      e.attr({fill:d});
    }
  };
  a.addActivated = function() {
    this.svgGroup.addClass("activated");
  };
  a.removeActivated = function() {
    this.svgGroup.removeClass("activated");
  };
  a.reDraw = function() {
    if (this.visible && this.display) {
      var b = this.block;
      this._updateContents();
      var a = b.statements;
      if (a) {
        for (b = 0;b < a.length;b++) {
          a[b].view.reDraw();
        }
      }
      if (a = this._extensions) {
        for (b = 0;b < a.length;b++) {
          var d = a[b];
          d.updatePos && d.updatePos();
        }
      }
    }
  };
  a.getParam = function(b) {
    return this._paramMap[b];
  };
  a.getDataUrl = function(b, a) {
    function c() {
      g = g.replace("(svgGroup)", (new XMLSerializer).serializeToString(k)).replace("%W", h.width * l).replace("%H", h.height * l).replace("(defs)", (new XMLSerializer).serializeToString(m[0])).replace(/>\s+/g, ">").replace(/\s+</g, "<");
      var b = "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(g)));
      g = null;
      a ? (f.resolve({src:b, width:h.width, height:h.height}), k = null) : e(b, h.width, h.height, 1.5).then(function(b) {
        k = null;
        f.resolve({src:b, width:h.width, height:h.height});
      }, function(b) {
        f.reject("error occured");
      });
      b = null;
    }
    function e(b, a, c, d) {
      var e = $.Deferred();
      d || (d = 1);
      void 0 !== Entry.BlockView.pngMap[b] && e.resolve(Entry.BlockView.pngMap[b]);
      a *= d;
      c *= d;
      a = Math.ceil(a);
      c = Math.ceil(c);
      var f = document.createElement("img");
      f.crossOrigin = "Anonymous";
      var g = document.createElement("canvas");
      g.width = a;
      g.height = c;
      var h = g.getContext("2d");
      f.onload = function() {
        h.drawImage(f, 0, 0, a, c);
        var d = g.toDataURL("image/png");
        /\.png$/.test(b) && (Entry.BlockView.pngMap[b] = d);
        e.resolve(d);
      };
      f.onerror = function() {
        e.reject("error occured");
      };
      f.src = b;
      return e.promise();
    }
    var f = $.Deferred(), g = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 %W %H">(svgGroup)(defs)</svg>', h = this.svgGroup.getBoundingClientRect(), k = b ? this.svgGroup : this.svgGroup.cloneNode(!0);
    b = this._skeleton.box(this);
    var l = a ? 1 : 1.5, n = function() {
      var b = window.platform;
      return b && "windows" === b.name.toLowerCase() && "7" === b.version[0] ? !0 : !1;
    }() ? .9 : .95;
    -1 < this.type.indexOf("func_") && (n *= .99);
    k.setAttribute("transform", "scale(%SCALE) translate(%X,%Y)".replace("%X", -b.offsetX).replace("%Y", -b.offsetY).replace("%SCALE", l));
    var m = this.getBoard().svgDom.find("defs"), t = k.getElementsByTagName("image");
    b = k.getElementsByTagName("text");
    for (var u = ["\u2265", "\u2264"], x = "\u2265\u2264-><=+-x/".split(""), v = 0;v < b.length;v++) {
      (function(b) {
        b.setAttribute("font-family", "'nanumBarunRegular', 'NanumGothic', '\ub098\ub214\uace0\ub515','NanumGothicWeb', '\ub9d1\uc740 \uace0\ub515', 'Malgun Gothic', Dotum");
        var a = parseInt(b.getAttribute("font-size")), c = $(b).text();
        -1 < u.indexOf(c) && b.setAttribute("font-weight", "500");
        if ("q" == c) {
          var d = parseInt(b.getAttribute("y"));
          b.setAttribute("y", d - 1);
        }
        -1 < x.indexOf(c) ? b.setAttribute("font-size", a + "px") : b.setAttribute("font-size", a * n + "px");
        b.setAttribute("alignment-baseline", "baseline");
      })(b[v]);
    }
    var q = 0;
    if (0 === t.length) {
      c();
    } else {
      for (v = 0;v < t.length;v++) {
        (function(b) {
          var a = b.getAttribute("href");
          e(a, b.getAttribute("width"), b.getAttribute("height")).then(function(a) {
            b.setAttribute("href", a);
            if (++q == t.length) {
              return c();
            }
          });
        })(t[v]);
      }
    }
    return f.promise();
  };
  a.downloadAsImage = function(b) {
    this.getDataUrl().then(function(a) {
      var c = document.createElement("a");
      c.href = a.src;
      a = "\uc5d4\ud2b8\ub9ac \ube14\ub85d";
      b && (a += b);
      c.download = a + ".png";
      c.click();
    });
  };
  a._rightClick = function(b) {
    var a = Entry.disposeEvent;
    a && a.notify(b);
    var d = this, e = d.block;
    if (!this.isInBlockMenu) {
      var a = [], f = {text:Lang.Blocks.Duplication_option, enable:this.copyable, callback:function() {
        Entry.do("cloneBlock", e);
      }}, g = {text:Lang.Blocks.CONTEXT_COPY_option, enable:this.copyable, callback:function() {
        d.block.copyToClipboard();
      }}, h = {text:Lang.Blocks.Delete_Blocks, enable:e.isDeletable(), callback:function() {
        Entry.do("destroyBlock", d.block);
      }}, k = {text:Lang.Menus.save_as_image, callback:function() {
        d.downloadAsImage();
      }};
      a.push(f);
      a.push(g);
      a.push(h);
      Entry.Utils.isChrome() && "workspace" == Entry.type && !Entry.isMobile() && a.push(k);
      b.originalEvent && b.originalEvent.touches && (b = b.originalEvent.touches[0]);
      Entry.ContextMenu.show(a, null, {x:b.clientX, y:b.clientY});
    }
  };
  a.clone = function() {
    return this.svgGroup.cloneNode(!0);
  };
  a._setBackgroundPath = function() {
    this._backgroundPath && $(this._backgroundPath).remove();
    var b = this._path.cloneNode(!0);
    b.setAttribute("class", "blockBackgroundPath");
    b.setAttribute("fill", this._fillColor);
    this._backgroundPath = b;
    this.pathGroup.insertBefore(b, this._path);
  };
  a._getTemplate = function(b) {
    var a = this._schema, a = a.template ? a.template : Lang.template[this.block.type], d;
    b === Entry.BlockView.RENDER_MODE_TEXT && (b = this.getBoard().workspace) && b.vimBoard && (b = b.vimBoard.getBlockSyntax(this)) && (d = "string" === typeof b ? b : b.template);
    return d || a;
  };
  a._getSchemaParams = function(b) {
    var a = this._schema.params;
    b === Entry.BlockView.RENDER_MODE_TEXT && (b = this.getBoard().workspace) && b.vimBoard && (b = b.vimBoard.getBlockSyntax(this)) && b.textParams && (a = b.textParams);
    return a;
  };
  a.detach = function() {
    this.svgGroup.remove();
  };
  a.attach = function(b) {
    (b || this._board.svgBlockGroup).appendChild(this.svgGroup);
  };
})(Entry.BlockView.prototype);
Entry.Field = function() {
};
(function(a) {
  a.TEXT_LIMIT_LENGTH = 20;
  a.destroy = function() {
    this.svgGroup && $(this.svgGroup).unbind("mouseup touchend");
    this.destroyOption();
  };
  a.command = function() {
    this._startValue && (this._startValue === this.getValue() || this._blockView.isInBlockMenu || Entry.do("setFieldValue", this._block, this, this.pointer(), this._startValue, this.getValue()));
    delete this._startValue;
  };
  a.destroyOption = function() {
    this.documentDownEvent && (Entry.documentMousedown.detach(this.documentDownEvent), delete this.documentDownEvent);
    this.disposeEvent && (Entry.disposeEvent.detach(this.disposeEvent), delete this.documentDownEvent);
    if (this.optionGroup) {
      var b = this.optionGroup.blur;
      b && Entry.Utils.isFunction(b) && this.optionGroup.blur();
      this.optionGroup.remove();
      delete this.optionGroup;
    }
    this.command();
  };
  a._attachDisposeEvent = function(b) {
    var a = this;
    a.disposeEvent = Entry.disposeEvent.attach(a, b || function() {
      a.destroyOption();
    });
  };
  a.align = function(b, a, d) {
    var c = this.svgGroup;
    this._position && (this._position.x && (b = this._position.x), this._position.y && (a = this._position.y));
    var f = "translate(" + b + "," + a + ")";
    void 0 === d || d ? c.animate({transform:f}, 300, mina.easeinout) : c.attr({transform:f});
    this.box.set({x:b, y:a});
  };
  a.getAbsolutePosFromBoard = function() {
    var b = this._block.view, a = b.getContentPos(), b = b.getAbsoluteCoordinate();
    return {x:b.x + this.box.x + a.x, y:b.y + this.box.y + a.y};
  };
  a.getAbsolutePosFromDocument = function() {
    var b = this._block.view, a = b.getContentPos(), d = b.getAbsoluteCoordinate(), b = b.getBoard().svgDom.offset();
    return {x:d.x + this.box.x + a.x + b.left, y:d.y + this.box.y + a.y + b.top - $(window).scrollTop()};
  };
  a.getRelativePos = function() {
    var b = this._block.view.getContentPos(), a = this.box;
    return {x:a.x + b.x, y:a.y + b.y};
  };
  a.truncate = function() {
    var b = String(this._convert(this.getValue())), a = this.TEXT_LIMIT_LENGTH, d = b.substring(0, a);
    b.length > a && (d += "...");
    return d;
  };
  a.appendSvgOptionGroup = function() {
    return this._block.view.getBoard().svgGroup.elem("g");
  };
  a.getValue = function() {
    var b = this._block.params[this._index];
    if (this._contents && this._contents.reference && this._contents.reference.length) {
      var a = this._contents.reference.concat();
      "%" === a[0][0] && (b = this._block.params[parseInt(a.shift().substr(1)) - 1]);
      return b ? b.getDataByPointer(a) : b;
    }
    return b;
  };
  a.setValue = function(b, a) {
    if (this.value != b) {
      this.value = b;
      if (this._contents && this._contents.reference && this._contents.reference.length) {
        var c = this._contents.reference.concat(), e = c.pop(), f = this._block.params[this._index];
        c.length && "%" === c[0][0] && (f = this._block.params[parseInt(c.shift().substr(1)) - 1]);
        c.length && (f = f.getDataByPointer(c));
        f.params[e] = b;
      } else {
        this._block.params[this._index] = b;
      }
      a && this._blockView.reDraw();
    }
  };
  a._isEditable = function() {
    if (Entry.ContextMenu.visible || this._block.view.dragMode == Entry.DRAG_MODE_DRAG) {
      return !1;
    }
    var b = this._block.view, a = b.getBoard();
    if (!0 === a.disableMouseEvent) {
      return !1;
    }
    var d = a.workspace.selectedBlockView;
    if (!d || a != d.getBoard()) {
      return !1;
    }
    a = b.getSvgRoot();
    return a == d.svgGroup || $(a).has($(b.svgGroup));
  };
  a._selectBlockView = function() {
    var b = this._block.view;
    b.getBoard().setSelectedBlock(b);
  };
  a._bindRenderOptions = function() {
    var b = this;
    $(this.svgGroup).bind("mouseup touchend", function(a) {
      b._isEditable() && (b.destroyOption(), b._startValue = b.getValue(), b.renderOptions());
    });
  };
  a.pointer = function(b) {
    b = b || [];
    b.unshift(this._index);
    b.unshift(Entry.PARAM);
    return this._block.pointer(b);
  };
  a.getFontSize = function(b) {
    return b = b || this._blockView.getSkeleton().fontSize || 12;
  };
  a.getContentHeight = function() {
    return Entry.isMobile() ? 22 : 16;
  };
  a._getRenderMode = function() {
    var b = this._blockView.renderMode;
    return void 0 !== b ? b : Entry.BlockView.RENDER_MODE_BLOCK;
  };
  a._convert = function(b, a) {
    a = void 0 !== a ? a : this.getValue();
    var c = /&value/gm;
    return c.test(a) ? a.replace(c, "") : this._contents.converter ? this._contents.converter(b, a) : b;
  };
  a._updateOptions = function() {
    var b = Entry.block[this._blockView.type];
    if (b) {
      var b = b.syntax, a;
      for (a in b) {
        var d = b[a];
        d && 0 !== d.length && (d = d[0].textParams) && (d[this._index].options = this._contents.options);
      }
    }
  };
})(Entry.Field.prototype);
Entry.FieldBlock = function(a, b, c, d, e) {
  Entry.Model(this, !1);
  this._blockView = b;
  this._block = b.block;
  this._valueBlock = null;
  this.box = new Entry.BoxModel;
  this.changeEvent = new Entry.Event(this);
  this._index = c;
  this.contentIndex = e;
  this._content = a;
  this.acceptType = a.accept;
  this._restoreCurrent = a.restore;
  this.view = this;
  this.svgGroup = null;
  this._position = a.position;
  this.box.observe(b, "dAlignContent", ["width", "height"]);
  this.observe(this, "_updateBG", ["magneting"], !1);
  this.renderStart(b.getBoard(), d);
};
Entry.Utils.inherit(Entry.Field, Entry.FieldBlock);
(function(a) {
  a.schema = {magneting:!1};
  a.renderStart = function(b, a, d) {
    this.svgGroup || (this.svgGroup = this._blockView.contentSvgGroup.elem("g"));
    this.renderMode = void 0 !== a ? a : this._blockView.renderMode;
    this.view = this;
    this._nextGroup = this.svgGroup;
    this.box.set({x:0, y:0, width:0, height:20});
    if (a = this.getValue()) {
      a.constructor !== Entry.Block && (a = new Entry.Block(a, this._block.thread)), a.view || (a.setThread(this), a.createView(b, this.renderMode), a.getThread().view.setParent(this));
    }
    this.updateValueBlock(a);
    this._valueBlock.view._startContentRender(this.renderMode);
    this._blockView.getBoard().constructor !== Entry.Board && this._valueBlock.view.removeControl();
  };
  a.align = function(b, a, d) {
    var c = this.svgGroup;
    this._position && (this._position.x && (b = this._position.x), this._position.y && (a = this._position.y));
    var f = this._valueBlock;
    f && f && f.view && (a = -.5 * f.view.height);
    f = "translate(" + b + "," + a + ")";
    void 0 === d || d ? c.animate({transform:f}, 300, mina.easeinout) : c.attr({transform:f});
    this.box.set({x:b, y:a});
  };
  a.calcWH = function() {
    var b = this._valueBlock;
    b && b && b.view ? (b = b.view, this.box.set({width:b.width, height:b.height})) : this.box.set({width:15, height:20});
  };
  a.calcHeight = a.calcWH;
  a.destroy = function() {
    this._valueBlock && this._valueBlock.destroyView();
  };
  a.inspectBlock = function() {
    var b = null;
    if (this._originBlock) {
      b = this._originBlock.type, delete this._originBlock;
    } else {
      switch(this.acceptType) {
        case "boolean":
          b = "True";
          break;
        case "string":
          b = "text";
          break;
        case "param":
          b = "function_field_label";
      }
    }
    return this._createBlockByType(b);
  };
  a._setValueBlock = function(b) {
    this._restoreCurrent && (this._originBlock = this._valueBlock);
    b || (b = this.inspectBlock());
    this._valueBlock = b;
    this.setValue(b);
    b.setThread(this);
    b.getThread().view.setParent(this);
    return this._valueBlock;
  };
  a.getValueBlock = function() {
    return this._valueBlock;
  };
  a.updateValueBlock = function(b) {
    b instanceof Entry.Block || (b = void 0);
    b && b === this._valueBlock ? this.calcWH() : (this._destroyObservers(), b = this._setValueBlock(b).view, b.bindPrev(this), this._blockView.alignContent(), this._posObserver = b.observe(this, "updateValueBlock", ["x", "y"], !1), this._sizeObserver = b.observe(this, "calcWH", ["width", "height"]), b = this._blockView.getBoard(), b.constructor === Entry.Board && b.generateCodeMagnetMap());
  };
  a._destroyObservers = function() {
    this._sizeObserver && this._sizeObserver.destroy();
    this._posObserver && this._posObserver.destroy();
  };
  a.getPrevBlock = function(b) {
    return this._valueBlock === b ? this : null;
  };
  a.getNextBlock = function() {
    return null;
  };
  a.requestAbsoluteCoordinate = function(b) {
    b = this._blockView;
    var a = b.contentPos;
    b = b.getAbsoluteCoordinate();
    b.x += this.box.x + a.x;
    b.y += this.box.y + a.y;
    return b;
  };
  a.dominate = function() {
    this._blockView.dominate();
  };
  a.isGlobal = function() {
    return !1;
  };
  a.separate = function(b) {
    this.getCode().createThread([b]);
    this.calcWH();
    this.changeEvent.notify();
  };
  a.getCode = function() {
    return this._block.thread.getCode();
  };
  a.cut = function(b) {
    return this._valueBlock === b ? [b] : null;
  };
  a.replace = function(b) {
    "string" === typeof b && (b = this._createBlockByType(b));
    var a = this._valueBlock;
    Entry.block[a.type].isPrimitive ? (a.doNotSplice = !0, a.destroy()) : "param" === this.acceptType ? (this._destroyObservers(), a.view._toGlobalCoordinate(), b.getTerminateOutputBlock().view._contents[1].replace(a)) : (this._destroyObservers(), a.view._toGlobalCoordinate(), this.separate(a), a.view.bumpAway(30, 150));
    this.updateValueBlock(b);
    b.view._toLocalCoordinate(this.svgGroup);
    this.calcWH();
    this.changeEvent.notify();
  };
  a.setParent = function(b) {
    this._parent = b;
  };
  a.getParent = function() {
    return this._parent;
  };
  a._createBlockByType = function(b) {
    this._block.getThread();
    var a = this._blockView.getBoard();
    b = new Entry.Block({type:b}, this);
    b.createView(a, this.renderMode);
    return b;
  };
  a.spliceBlock = function() {
    this.updateValueBlock();
  };
  a._updateBG = function() {
    this.magneting ? this._bg = this.svgGroup.elem("path", {d:"m 8,12 l -4,0 -2,-2 0,-3 3,0 1,-1 0,-12 -1,-1 -3,0 0,-3 2,-2 l 4,0 z", fill:"#fff", stroke:"#fff", "fill-opacity":.7, transform:"translate(0,12)"}) : this._bg && (this._bg.remove(), delete this._bg);
  };
  a.getThread = function() {
    return this;
  };
  a.pointer = function(b) {
    b.unshift(this._index);
    b.unshift(Entry.PARAM);
    return this._block.pointer(b);
  };
})(Entry.FieldBlock.prototype);
Entry.Scroller = function(a, b, c) {
  this._horizontal = void 0 === b ? !0 : b;
  this._vertical = void 0 === c ? !0 : c;
  this.board = a;
  this.svgGroup = null;
  this.vRatio = this.vY = this.vWidth = this.hRatio = this.hX = this.hWidth = 0;
  this._visible = !0;
  this._opacity = -1;
  this.createScrollBar();
  this.setOpacity(0);
  this._bindEvent();
  this._scrollCommand = _.debounce(Entry.do, 200);
};
Entry.Scroller.RADIUS = 7;
(function(a) {
  a.createScrollBar = function() {
    var b = Entry.Scroller.RADIUS, a = this;
    this.svgGroup = this.board.svg.elem("g").attr({class:"boardScrollbar"});
    this._horizontal && (this.hScrollbar = this.svgGroup.elem("rect", {height:2 * b, rx:b, ry:b}), this.hScrollbar.mousedown = function(b) {
      function c(b) {
        b.stopPropagation();
        b.preventDefault();
        b.originalEvent.touches && (b = b.originalEvent.touches[0]);
        var c = a.dragInstance;
        a.scroll((b.pageX - c.offsetX) / a.hRatio, 0);
        c.set({offsetX:b.pageX, offsetY:b.pageY});
      }
      function d(b) {
        $(document).unbind(".scroll");
        delete a.dragInstance;
      }
      if (0 === b.button || b instanceof Touch) {
        Entry.documentMousedown && Entry.documentMousedown.notify(b);
        var g = $(document);
        g.bind("mousemove.scroll", c);
        g.bind("mouseup.scroll", d);
        g.bind("touchmove.scroll", c);
        g.bind("touchend.scroll", d);
        a.dragInstance = new Entry.DragInstance({startX:b.pageX, startY:b.pageY, offsetX:b.pageX, offsetY:b.pageY});
      }
      b.stopPropagation();
    });
    this._vertical && (this.vScrollbar = this.svgGroup.elem("rect", {width:2 * b, rx:b, ry:b}), this.vScrollbar.mousedown = function(b) {
      function c(b) {
        b.stopPropagation();
        b.preventDefault();
        b.originalEvent.touches && (b = b.originalEvent.touches[0]);
        var c = a.dragInstance;
        a.scroll(0, (b.pageY - c.offsetY) / a.vRatio);
        c.set({offsetX:b.pageX, offsetY:b.pageY});
      }
      function d(b) {
        $(document).unbind(".scroll");
        delete a.dragInstance;
      }
      if (0 === b.button || b instanceof Touch) {
        Entry.documentMousedown && Entry.documentMousedown.notify(b);
        var g = $(document);
        g.bind("mousemove.scroll", c);
        g.bind("mouseup.scroll", d);
        g.bind("touchmove.scroll", c);
        g.bind("touchend.scroll", d);
        a.dragInstance = new Entry.DragInstance({startX:b.pageX, startY:b.pageY, offsetX:b.pageX, offsetY:b.pageY});
      }
      b.stopPropagation();
    });
  };
  a.updateScrollBar = function(b, a) {
    this._horizontal && (this.hX += b * this.hRatio, this.hScrollbar.attr({x:this.hX}));
    this._vertical && (this.vY += a * this.vRatio, this.vScrollbar.attr({y:this.vY}));
  };
  a.scroll = function(b, a) {
    if (this.board.code) {
      var c = this.board.svgBlockGroup.getBoundingClientRect(), e = this.board.svgDom, f = c.left - this.board.offset().left, g = c.top - this.board.offset().top, h = c.height;
      b = Math.max(-c.width + Entry.BOARD_PADDING - f, b);
      a = Math.max(-h + Entry.BOARD_PADDING - g, a);
      b = Math.min(e.width() - Entry.BOARD_PADDING - f, b);
      a = Math.min(e.height() - Entry.BOARD_PADDING - g, a);
      this._scroll(b, a);
      this._diffs || (this._diffs = [0, 0]);
      this._diffs[0] += b;
      this._diffs[1] += a;
      this._scrollCommand("scrollBoard", this._diffs[0], this._diffs[1], !0);
    }
  };
  a._scroll = function(b, a) {
    this.board.code.moveBy(b, a);
    this.updateScrollBar(b, a);
  };
  a.setVisible = function(b) {
    b != this.isVisible() && (this._visible = b, this.svgGroup.attr({display:!0 === b ? "block" : "none"}));
  };
  a.isVisible = function() {
    return this._visible;
  };
  a.setOpacity = function(b) {
    this._opacity != b && (this.hScrollbar.attr({opacity:b}), this.vScrollbar.attr({opacity:b}), this._opacity = b);
  };
  a.resizeScrollBar = function() {
    if (this._visible) {
      var b = this.board, a = b.svgBlockGroup.getBoundingClientRect(), d = b.svgDom, e = d.width(), d = d.height(), f = a.left - b.offset().left, b = a.top - b.offset().top, g = a.width, a = a.height;
      if (this._horizontal) {
        var h = -g + Entry.BOARD_PADDING, k = e - Entry.BOARD_PADDING, g = (e + 2 * Entry.Scroller.RADIUS) * g / (k - h + g);
        isNaN(g) && (g = 0);
        this.hX = (f - h) / (k - h) * (e - g - 2 * Entry.Scroller.RADIUS);
        this.hScrollbar.attr({width:g, x:this.hX, y:d - 2 * Entry.Scroller.RADIUS});
        this.hRatio = (e - g - 2 * Entry.Scroller.RADIUS) / (k - h);
      }
      this._vertical && (f = -a + Entry.BOARD_PADDING, g = d - Entry.BOARD_PADDING, a = (d + 2 * Entry.Scroller.RADIUS) * a / (g - f + a), this.vY = (b - f) / (g - f) * (d - a - 2 * Entry.Scroller.RADIUS), this.vScrollbar.attr({height:a, y:this.vY, x:e - 2 * Entry.Scroller.RADIUS}), this.vRatio = (d - a - 2 * Entry.Scroller.RADIUS) / (g - f));
    }
  };
  a._bindEvent = function() {
    var b = _.debounce(this.resizeScrollBar, 200);
    this.board.changeEvent.attach(this, b);
    Entry.windowResized && Entry.windowResized.attach(this, b);
  };
})(Entry.Scroller.prototype);
Entry.Board = function(a) {
  Entry.Model(this, !1);
  this.changeEvent = new Entry.Event(this);
  this.createView(a);
  this.updateOffset();
  this.scroller = new Entry.Scroller(this, !0, !0);
  this._magnetMap = {};
  Entry.ANIMATION_DURATION = 200;
  Entry.BOARD_PADDING = 100;
  this._initContextOptions();
  Entry.Utils.disableContextmenu(this.svgDom);
  this._addControl();
  this._bindEvent();
};
Entry.Board.OPTION_PASTE = 0;
Entry.Board.OPTION_ALIGN = 1;
Entry.Board.OPTION_CLEAR = 2;
Entry.Board.OPTION_DOWNLOAD = 3;
Entry.Board.DRAG_RADIUS = 5;
(function(a) {
  a.schema = {code:null, dragBlock:null, magnetedBlockView:null, selectedBlockView:null};
  a.createView = function(b) {
    var a = b.dom, a = "string" === typeof a ? $("#" + a) : $(a);
    if ("DIV" !== a.prop("tagName")) {
      return console.error("Dom is not div element");
    }
    this.view = a;
    this._svgId = "play" + (new Date).getTime();
    this.workspace = b.workspace;
    this._activatedBlockView = null;
    this.wrapper = Entry.Dom("div", {parent:a, class:"entryBoardWrapper"});
    this.svgDom = Entry.Dom($('<svg id="' + this._svgId + '" class="entryBoard" width="100%" height="100%"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent:this.wrapper});
    this.visible = !0;
    var d = this;
    this.svg = Entry.SVG(this._svgId);
    $(window).scroll(function() {
      d.updateOffset();
    });
    this.svgGroup = this.svg.elem("g");
    this.svgThreadGroup = this.svgGroup.elem("g");
    this.svgThreadGroup.board = this;
    this.svgBlockGroup = this.svgGroup.elem("g");
    this.svgBlockGroup.board = this;
    b.isOverlay ? (this.wrapper.addClass("entryOverlayBoard"), this.generateButtons(), this.suffix = "overlayBoard") : this.suffix = "board";
    Entry.Utils.addFilters(this.svg, this.suffix);
    this.pattern = Entry.Utils.addBlockPattern(this.svg, this.suffix).pattern;
  };
  a.changeCode = function(b, a, d) {
    this.code && this.codeListener && this.code.changeEvent.detach(this.codeListener);
    this.set({code:b});
    var c = this;
    b && !a && (this.codeListener = this.code.changeEvent.attach(this, function() {
      c.changeEvent.notify();
    }), this.svgBlockGroup.remove(), this.svgThreadGroup.remove(), b.createView(this), b.isAllThreadsInOrigin() && this.alignThreads(), d && d());
    this.scroller.resizeScrollBar();
  };
  a.bindCodeView = function(b) {
    this.svgBlockGroup.remove();
    this.svgThreadGroup.remove();
    this.svgBlockGroup = b.svgBlockGroup;
    this.svgThreadGroup = b.svgThreadGroup;
    this.svgGroup.appendChild(this.svgThreadGroup);
    this.svgGroup.appendChild(this.svgBlockGroup);
  };
  a.setMagnetedBlock = function(b, a) {
    this.magnetedBlockView !== b && (this.magnetedBlockView && this.magnetedBlockView.set({magneting:!1}), this.set({magnetedBlockView:b}), b && (b.set({magneting:a}), b.dominate()));
  };
  a.getCode = function() {
    return this.code;
  };
  a.findById = function(b) {
    return this.code.findById(b);
  };
  a._addControl = function() {
    var b = this.svgDom, a = this;
    b.mousedown(function() {
      a.onMouseDown.apply(a, arguments);
    });
    b.bind("touchstart", function() {
      a.onMouseDown.apply(a, arguments);
    });
    b.on("wheel", function() {
      a.mouseWheel.apply(a, arguments);
    });
    var d = a.scroller;
    d && (b.mouseenter(function(b) {
      d.setOpacity(1);
    }), b.mouseleave(function(b) {
      d.setOpacity(0);
    }));
  };
  a.onMouseDown = function(b) {
    function a(b) {
      b.stopPropagation && b.stopPropagation();
      b.preventDefault && b.preventDefault();
      b = Entry.Utils.convertMouseEvent(b);
      var a = e.mouseDownCoordinate;
      Math.sqrt(Math.pow(b.pageX - a.x, 2) + Math.pow(b.pageY - a.y, 2)) < Entry.Board.DRAG_RADIUS || (f && (clearTimeout(f), f = null), a = e.dragInstance, e.scroller.scroll(b.pageX - a.offsetX, b.pageY - a.offsetY), a.set({offsetX:b.pageX, offsetY:b.pageY}));
    }
    function d(b) {
      f && (clearTimeout(f), f = null);
      $(document).unbind(".entryBoard");
      delete e.mouseDownCoordinate;
      delete e.dragInstance;
    }
    if (this.workspace.getMode() != Entry.Workspace.MODE_VIMBOARD) {
      b.stopPropagation && b.stopPropagation();
      b.preventDefault && b.preventDefault();
      var e = this, f = null;
      if (0 === b.button || b.originalEvent && b.originalEvent.touches) {
        var g = b.type, h = Entry.Utils.convertMouseEvent(b);
        Entry.documentMousedown && Entry.documentMousedown.notify(h);
        var k = $(document);
        this.mouseDownCoordinate = {x:h.pageX, y:h.pageY};
        k.bind("mousemove.entryBoard", a);
        k.bind("mouseup.entryBoard", d);
        k.bind("touchmove.entryBoard", a);
        k.bind("touchend.entryBoard", d);
        this.dragInstance = new Entry.DragInstance({startX:h.pageX, startY:h.pageY, offsetX:h.pageX, offsetY:h.pageY});
        "touchstart" === g && (f = setTimeout(function() {
          f && (f = null, d(), e._rightClick(b));
        }, 1E3));
      } else {
        Entry.Utils.isRightButton(b) && this._rightClick(b);
      }
    }
  };
  a.mouseWheel = function(b) {
    b = b.originalEvent;
    b.preventDefault();
    var a = Entry.disposeEvent;
    a && a.notify(b);
    this.scroller.scroll(b.wheelDeltaX || -b.deltaX, b.wheelDeltaY || -b.deltaY);
  };
  a.setSelectedBlock = function(b) {
    var a = this.selectedBlockView;
    a && a.removeSelected();
    b instanceof Entry.BlockView ? b.addSelected() : b = null;
    this.set({selectedBlockView:b});
  };
  a.hide = function() {
    this.wrapper.addClass("entryRemove");
    this.visible = !1;
  };
  a.show = function() {
    this.wrapper.removeClass("entryRemove");
    this.visible = !0;
  };
  a.alignThreads = function(b) {
    for (var a = this.svgDom.height(), d = this.code.getThreads(), e = 15, f = 0, a = a - 30, g = 50, h = 0;h < d.length;h++) {
      var k = d[h], l = k.getFirstBlock();
      if (l && (b && k.view.reDraw(), k = l.view, k.movable)) {
        var l = k.svgGroup.getBBox(), n = e + 15;
        n > a && (g = g + f + 10, f = 0, e = 15);
        f = Math.max(f, l.width);
        n = e + 15;
        k._moveTo(g - l.x, n, !1);
        e = e + l.height + 15;
      }
    }
    this.scroller.resizeScrollBar();
  };
  a.clear = function() {
    this.svgBlockGroup.remove();
    this.svgThreadGroup.remove();
  };
  a.updateOffset = function() {
    this._offset = this.svg.getBoundingClientRect();
    var b = $(window), a = b.scrollTop(), b = b.scrollLeft(), d = this._offset;
    this.relativeOffset = {top:d.top - a, left:d.left - b};
    this.btnWrapper && this.btnWrapper.attr({transform:"translate(" + (d.width / 2 - 65) + "," + (d.height - 200) + ")"});
  };
  a.generateButtons = function() {
    var b = this, a = this.svgGroup.elem("g");
    this.btnWrapper = a;
    var d = a.elem("text", {x:27, y:33, class:"entryFunctionButtonText"});
    d.textContent = Lang.Buttons.save;
    var e = a.elem("text", {x:102.5, y:33, class:"entryFunctionButtonText"});
    e.textContent = Lang.Buttons.cancel;
    var f = a.elem("circle", {cx:27.5, cy:27.5, r:27.5, class:"entryFunctionButton"}), a = a.elem("circle", {cx:102.5, cy:27.5, r:27.5, class:"entryFunctionButton"});
    $(f).bind("mousedown touchstart", function() {
      b.save();
    });
    $(d).bind("mousedown touchstart", function() {
      b.save();
    });
    $(a).bind("mousedown touchstart", function() {
      b.cancelEdit();
    });
    $(e).bind("mousedown touchstart", function() {
      b.cancelEdit();
    });
  };
  a.cancelEdit = function() {
    this.workspace.setMode(Entry.Workspace.MODE_BOARD, "cancelEdit");
  };
  a.save = function() {
    var b = {};
    b.boardType = Entry.Workspace.MODE_BOARD;
    this.workspace.setMode(b, "save");
  };
  a.generateCodeMagnetMap = function() {
    var b = this.code, a = this.dragBlock;
    if (b && a) {
      this._magnetMap = {};
      for (var d in a.magnet) {
        if ("next" !== d || void 0 !== a.block.getLastBlock().view.magnet.next) {
          var e = this._getCodeBlocks(b, d);
          e.sort(function(b, a) {
            return b.point - a.point;
          });
          e.unshift({point:-Number.MAX_VALUE, blocks:[]});
          for (var f = 1;f < e.length;f++) {
            var g = e[f], h = g, k = g.startBlock;
            if (k) {
              for (var l = g.endPoint, n = f;l > h.point && (h.blocks.push(k), n++, h = e[n], h);) {
              }
              delete g.startBlock;
            }
            g.endPoint = Number.MAX_VALUE;
            e[f - 1].endPoint = g.point;
          }
          this._magnetMap[d] = e;
        }
      }
    }
  };
  a._getCodeBlocks = function(b, a) {
    b = b.getThreads();
    var c = [], e;
    switch(a) {
      case "previous":
        e = this._getNextMagnets;
        break;
      case "next":
        e = this._getPreviousMagnets;
        break;
      case "string":
      case "boolean":
        e = this._getFieldMagnets;
        break;
      case "param":
        e = this._getOutputMagnets;
        break;
      default:
        return [];
    }
    for (var f = 0;f < b.length;f++) {
      var g = b[f], c = c.concat(e.call(this, g, g.view.zIndex, null, a));
    }
    return c;
  };
  a._getNextMagnets = function(b, a, d, e) {
    var c = b.getBlocks(), g = [], h = [];
    d || (d = {x:0, y:0});
    var k = d.x;
    d = d.y;
    for (var l = 0;l < c.length;l++) {
      var n = c[l], m = n.view;
      m.zIndex = a;
      if (m.dragInstance) {
        break;
      }
      d += m.y;
      k += m.x;
      b = d + 1;
      m.magnet.next && (b += m.height, h.push({point:d, endPoint:b, startBlock:n, blocks:[]}), h.push({point:b, blocks:[]}), m.absX = k);
      n.statements && (a += .01);
      for (var t = 0;t < n.statements.length;t++) {
        b = n.statements[t];
        var u = n.view._statements[t];
        u.zIndex = a;
        u.absX = k + u.x;
        h.push({point:u.y + d - 30, endPoint:u.y + d, startBlock:u, blocks:[]});
        h.push({point:u.y + d + u.height, blocks:[]});
        a += .01;
        g = g.concat(this._getNextMagnets(b, a, {x:u.x + k, y:u.y + d}, e));
      }
      m.magnet.next && (d += m.magnet.next.y, k += m.magnet.next.x);
    }
    return g.concat(h);
  };
  a._getPreviousMagnets = function(b, a, d, e) {
    var c = b.getBlocks();
    b = [];
    d || (d = {x:0, y:0});
    e = d.x;
    d = d.y;
    var c = c[0], g = c.view;
    g.zIndex = a;
    if (g.dragInstance) {
      return [];
    }
    d += g.y - 15;
    e += g.x;
    return g.magnet.previous ? (a = d + 1 + g.height, b.push({point:d, endPoint:a, startBlock:c, blocks:[]}), b.push({point:a, blocks:[]}), g.absX = e, b) : [];
  };
  a._getFieldMagnets = function(b, a, d, e) {
    var c = b.getBlocks(), g = [], h = [];
    d || (d = {x:0, y:0});
    var k = d.x;
    d = d.y;
    for (var l = 0;l < c.length;l++) {
      var n = c[l], m = n.view;
      if (m.dragInstance) {
        break;
      }
      m.zIndex = a;
      d += m.y;
      k += m.x;
      h = h.concat(this._getFieldBlockMetaData(m, k, d, a, e));
      n.statements && (a += .01);
      for (var t = 0;t < n.statements.length;t++) {
        b = n.statements[t];
        var u = n.view._statements[t], g = g.concat(this._getFieldMagnets(b, a, {x:u.x + k, y:u.y + d}, e));
      }
      m.magnet.next && (d += m.magnet.next.y, k += m.magnet.next.x);
    }
    return g.concat(h);
  };
  a._getFieldBlockMetaData = function(b, a, d, e, f) {
    var c = b._contents, h = [];
    d += b.contentPos.y;
    for (var k = 0;k < c.length;k++) {
      var l = c[k];
      if (l instanceof Entry.FieldBlock) {
        var n = l._valueBlock;
        if (!n.view.dragInstance && (l.acceptType === f || "boolean" === l.acceptType)) {
          var m = a + l.box.x, t = d + l.box.y + b.contentHeight % 1E3 * -.5, u = d + l.box.y + l.box.height;
          l.acceptType === f && (h.push({point:t, endPoint:u, startBlock:n, blocks:[]}), h.push({point:u, blocks:[]}));
          l = n.view;
          l.absX = m;
          l.zIndex = e;
          h = h.concat(this._getFieldBlockMetaData(l, m + l.contentPos.x, t + l.contentPos.y, e + .01, f));
        }
      }
    }
    return h;
  };
  a._getOutputMagnets = function(b, a, d, e) {
    var c = b.getBlocks(), g = [], h = [];
    d || (d = {x:0, y:0});
    var k = d.x;
    d = d.y;
    for (var l = 0;l < c.length;l++) {
      var n = c[l], m = n.view;
      if (m.dragInstance) {
        break;
      }
      m.zIndex = a;
      d += m.y;
      k += m.x;
      h = h.concat(this._getOutputMetaData(m, k, d, a, e));
      n.statements && (a += .01);
      for (var t = 0;t < n.statements.length;t++) {
        b = n.statements[t];
        var u = n.view._statements[t], g = g.concat(this._getOutputMagnets(b, a, {x:u.x + k, y:u.y + d}, e));
      }
      m.magnet.next && (d += m.magnet.next.y, k += m.magnet.next.x);
    }
    return g.concat(h);
  };
  a._getOutputMetaData = function(b, a, d, e, f) {
    var c = b._contents, h = [];
    a += b.contentPos.x;
    d += b.contentPos.y;
    for (b = 0;b < c.length;b++) {
      var k = c[b], l = a + k.box.x, n = d - 24, m = d;
      k instanceof Entry.FieldBlock ? (k.acceptType === f && (h.push({point:n, endPoint:m, startBlock:k, blocks:[]}), h.push({point:m, blocks:[]}), k.absX = l, k.zIndex = e, k.width = 20), (n = k._valueBlock) && (h = h.concat(this._getOutputMetaData(n.view, l, d + k.box.y, e + .01, f)))) : k instanceof Entry.FieldOutput && k.acceptType === f && (h.push({point:n, endPoint:m, startBlock:k, blocks:[]}), h.push({point:m, blocks:[]}), k.absX = l, k.zIndex = e, k.width = 20, (n = k._valueBlock) && (n.view.dragInstance || 
      (h = h.concat(this._getOutputMetaData(n.view, a + k.box.x, d + k.box.y, e + .01, f)))));
    }
    return h;
  };
  a.getNearestMagnet = function(b, a, d) {
    var c = this._magnetMap[d];
    if (c && 0 !== c.length) {
      var f = 0, g = c.length - 1, h, k = null, l = "previous" === d ? a - 15 : a;
      for (a = -1 < ["previous", "next"].indexOf(d) ? 20 : 0;f <= g;) {
        if (h = (f + g) / 2 | 0, d = c[h], l < d.point) {
          g = h - 1;
        } else {
          if (l > d.endPoint) {
            f = h + 1;
          } else {
            c = d.blocks;
            for (f = 0;f < c.length;f++) {
              if (g = c[f].view, g.absX - a < b && b < g.absX + g.width && (g = d.blocks[f], !k || k.view.zIndex < g.view.zIndex)) {
                k = d.blocks[f];
              }
            }
            return k;
          }
        }
      }
      return null;
    }
  };
  a.dominate = function(b) {
    b && (b = b.getFirstBlock()) && (this.svgBlockGroup.appendChild(b.view.svgGroup), this.code.dominate(b.thread));
  };
  a.enablePattern = function() {
    this.pattern.removeAttribute("style");
  };
  a.disablePattern = function() {
    this.pattern.attr({style:"display: none"});
  };
  a._removeActivated = function() {
    this._activatedBlockView && (this._activatedBlockView.removeActivated(), this._activatedBlockView = null);
  };
  a.activateBlock = function(b) {
    b = b.view;
    var a = b.getAbsoluteCoordinate(), d = this.svgDom, e = a.x, a = a.y, e = d.width() / 2 - e, d = d.height() / 2 - a - 100;
    this.scroller.scroll(e, d);
    b.addActivated();
    this._activatedBlockView = b;
  };
  a.reDraw = function() {
    this.code && this.code.view && this.code.view.reDraw();
  };
  a.separate = function(b, a) {
    "string" === typeof b && (b = this.findById(b));
    b.view && b.view._toGlobalCoordinate();
    var c = b.getPrevBlock();
    b.separate(a);
    c && c.getNextBlock() && c.getNextBlock().view.bindPrev();
  };
  a.insert = function(b, a, d) {
    "string" === typeof b && (b = this.findById(b));
    this.separate(b, d);
    3 === a.length ? b.moveTo(a[0], a[1]) : 4 === a.length && 0 === a[3] ? (a = this.code.getThreads()[a[2]], b.thread.cut(b), a.insertToTop(b), b.getNextBlock().view.bindPrev()) : (a = a instanceof Array ? this.code.getTargetByPointer(a) : a, a instanceof Entry.Block ? ("basic" === b.getBlockType() && b.view.bindPrev(a), b.doInsert(a)) : a instanceof Entry.FieldStatement ? (b.view.bindPrev(a), a.insertTopBlock(b)) : b.doInsert(a));
  };
  a.adjustThreadsPosition = function() {
    var b = this.code;
    b && b.view && (b = b.getThreads()) && 0 !== b.length && (b = b.sort(function(b, a) {
      return b.getFirstBlock().view.x - a.getFirstBlock().view.x;
    }), b = b[0].getFirstBlock()) && (b = b.view, b = b.getAbsoluteCoordinate(), this.scroller.scroll(50 - b.x, 30 - b.y));
  };
  a._initContextOptions = function() {
    var b = this;
    this._contextOptions = [{activated:!0, option:{text:Lang.Blocks.Paste_blocks, enable:!!Entry.clipboard, callback:function() {
      Entry.do("addThread", Entry.clipboard).value.getFirstBlock().copyToClipboard();
    }}}, {activated:!0, option:{text:Lang.Blocks.tidy_up_block, callback:function() {
      b.alignThreads();
    }}}, {activated:!0, option:{text:Lang.Blocks.Clear_all_blocks, callback:function() {
      b.code.clear(!0);
    }}}, {activated:"workspace" === Entry.type && Entry.Utils.isChrome() && !Entry.isMobile(), option:{text:Lang.Menus.save_as_image_all, enable:!0, callback:function() {
      var a = b.code.getThreads(), d = [];
      a.forEach(function(b, c) {
        if (b = b.getFirstBlock()) {
          console.log("threads.length=", a.length), 1 < a.length && Entry.isOffline ? b.view.getDataUrl().then(function(b) {
            d.push(b);
            d.length == a.length && Entry.dispatchEvent("saveBlockImages", {images:d});
          }) : b.view.downloadAsImage(++c);
        }
      });
    }}}];
  };
  a.activateContextOption = function(b) {
    this._contextOptions[b].activated = !0;
  };
  a.deActivateContextOption = function(b) {
    this._contextOptions[b].activated = !1;
  };
  a._bindEvent = function() {
    Entry.documentMousedown && (Entry.documentMousedown.attach(this, this.setSelectedBlock), Entry.documentMousedown.attach(this, this._removeActivated));
    Entry.windowResized && Entry.windowResized.attach(this, _.debounce(this.updateOffset, 200));
  };
  a.offset = function() {
    (!this._offset || 0 === this._offset.top && 0 === this._offset.left) && this.updateOffset();
    return this._offset;
  };
  a._rightClick = function(b) {
    var a = Entry.disposeEvent;
    a && a.notify(b);
    if (this.visible) {
      var a = [], d = this._contextOptions;
      d[Entry.Board.OPTION_PASTE].option.enable = !!Entry.clipboard;
      d[Entry.Board.OPTION_DOWNLOAD].option.enable = 0 !== this.code.getThreads().length;
      for (var e = 0;e < this._contextOptions.length;e++) {
        d[e].activated && a.push(d[e].option);
      }
      b = Entry.Utils.convertMouseEvent(b);
      Entry.ContextMenu.show(a, null, {x:b.clientX, y:b.clientY});
    }
  };
})(Entry.Board.prototype);
Entry.Code = function(a, b) {
  Entry.Model(this, !1);
  b && (this.object = b);
  this._data = new Entry.Collection;
  this._eventMap = {};
  this._blockMap = {};
  this.executors = [];
  this.watchEvent = new Entry.Event(this);
  this.executeEndEvent = new Entry.Event(this);
  this.changeEvent = new Entry.Event(this);
  this.changeEvent.attach(this, this._handleChange);
  this._maxZIndex = 0;
  this.load(a);
};
Entry.STATEMENT = 0;
Entry.PARAM = -1;
(function(a) {
  a.schema = {view:null, board:null};
  a.load = function(b) {
    if (!Entry.engine || !Entry.engine.isState("run")) {
      b instanceof Array || (b = JSON.parse(b));
      this.clear();
      for (var a = 0;a < b.length;a++) {
        this._data.push(new Entry.Thread(b[a], this));
      }
      return this;
    }
  };
  a.clear = function(b) {
    b = void 0 === b ? !1 : b;
    for (var a = this._data.length - 1;0 <= a;a--) {
      this._data[a].destroy(!1, b);
    }
    this.clearExecutors();
  };
  a.createView = function(b) {
    null === this.view ? this.set({view:new Entry.CodeView(this, b), board:b}) : (this.set({board:b}), b.bindCodeView(this.view));
  };
  a.destroyView = function() {
    this.view && (this.view.destroy(), this.set({view:null}));
  };
  a.recreateView = function() {
    this.view && (this.destroyView(), this.set({view:new Entry.CodeView(this, this.board), board:this.board}));
  };
  a.registerEvent = function(b, a) {
    this._eventMap[a] || (this._eventMap[a] = []);
    this._eventMap[a].push(b);
  };
  a.unregisterEvent = function(b, a) {
    (a = this._eventMap[a]) && 0 !== a.length && (b = a.indexOf(b), 0 > b || a.splice(b, 1));
  };
  a.raiseEvent = function(b, a, d) {
    b = this._eventMap[b];
    var c = [];
    if (void 0 !== b) {
      for (var f = 0;f < b.length;f++) {
        var g = b[f];
        if (void 0 === d || -1 < g.params.indexOf(d)) {
          g = new Entry.Executor(b[f], a), this.executors.push(g), c.push(g);
        }
      }
      return c;
    }
  };
  a.getEventMap = function(b) {
    return this._eventMap[b];
  };
  a.map = function(b) {
    this._data.map(b);
  };
  a.tick = function() {
    for (var b = this.executors, a = [], d = 0;d < b.length;d++) {
      var e = b[d];
      e.isEnd() ? (b.splice(d--, 1), 0 === b.length && this.executeEndEvent.notify()) : a = a.concat(e.execute());
    }
    this.watchEvent.notify(a);
  };
  a.removeExecutor = function(b) {
    b = this.executors.indexOf(b);
    -1 < b && this.executors.splice(b, 1);
  };
  a.clearExecutors = function() {
    this.executors.forEach(function(b) {
      b.end();
    });
    this.executors = [];
  };
  a.clearExecutorsByEntity = function(b) {
    for (var a = this.executors, d = 0;d < a.length;d++) {
      var e = a[d];
      e.entity === b && e.end();
    }
  };
  a.addExecutor = function(b) {
    this.executors.push(b);
  };
  a.createThread = function(b, a) {
    if (!(b instanceof Array)) {
      return console.error("blocks must be array");
    }
    b = new Entry.Thread(b, this);
    void 0 === a ? this._data.push(b) : this._data.insert(b, a);
    this.changeEvent.notify();
    return b;
  };
  a.getThreadIndex = function(b) {
    return this._data.indexOf(b);
  };
  a.cloneThread = function(b, a) {
    b = b.clone(this, a);
    this._data.push(b);
    return b;
  };
  a.destroyThread = function(b, a) {
    a = this._data;
    b = a.indexOf(b);
    0 > b || a.splice(b, 1);
  };
  a.doDestroyThread = function(b, a) {
    a = this._data;
    b = a.indexOf(b);
    0 > b || a.splice(b, 1);
  };
  a.getThreads = function() {
    return this._data.map(function(b) {
      return b;
    });
  };
  a.getThreadsByCategory = function(b) {
    for (var a = [], d = 0;d < this._data.length;d++) {
      var e = this._data[d], f = e.getFirstBlock();
      f && f.category === b && a.push(e);
    }
    return a;
  };
  a.toJSON = function(b) {
    for (var a = this.getThreads(), d = [], e = 0, f = a.length;e < f;e++) {
      d.push(a[e].toJSON(!1, void 0, b));
    }
    return d;
  };
  a.countBlock = function() {
    for (var b = this.getThreads(), a = 0, d = 0;d < b.length;d++) {
      a += b[d].countBlock();
    }
    return a;
  };
  a.moveBy = function(b, a) {
    for (var c = this.getThreads(), e = 0, f = c.length;e < f;e++) {
      var g = c[e].getFirstBlock();
      g && g.view && g.view.display && g.view._moveBy(b, a, !1);
    }
    b = this.board;
    b instanceof Entry.BlockMenu && b.updateSplitters(a);
  };
  a.stringify = function(b) {
    return JSON.stringify(this.toJSON(b));
  };
  a.dominate = function(b) {
    b.view.setZIndex(this._maxZIndex++);
  };
  a.indexOf = function(b) {
    return this._data.indexOf(b);
  };
  a._handleChange = function() {
    Entry.creationChangedEvent && this.view && this.view.board.constructor !== Entry.BlockMenu && Entry.creationChangedEvent.notify();
  };
  a.hasBlockType = function(b) {
    for (var a = this.getThreads(), d = 0;d < a.length;d++) {
      if (a[d].hasBlockType(b)) {
        return !0;
      }
    }
    return !1;
  };
  a.findById = function(b) {
    return this._blockMap[b];
  };
  a.registerBlock = function(b) {
    this._blockMap[b.id] = b;
  };
  a.unregisterBlock = function(b) {
    delete this._blockMap[b.id];
  };
  a.getByPointer = function(b) {
    b = b.concat();
    b.shift();
    b.shift();
    for (var a = this._data[b.shift()].getBlock(b.shift());b.length;) {
      a instanceof Entry.Block || (a = a.getValueBlock());
      var d = b.shift(), e = b.shift();
      -1 < d ? a = a.statements[d].getBlock(e) : -1 === d && (a = a.view.getParam(e));
    }
    return a;
  };
  a.getTargetByPointer = function(b) {
    b = b.concat();
    b.shift();
    b.shift();
    var a = this._data[b.shift()], d;
    if (1 === b.length) {
      d = a.getBlock(b.shift() - 1);
    } else {
      for (d = a.getBlock(b.shift());b.length;) {
        d instanceof Entry.Block || (d = d.getValueBlock());
        var e = b.shift(), a = b.shift();
        -1 < e ? (d = d.statements[e], d = b.length ? d.getBlock(a) : 0 === a ? d.view.getParent() : d.getBlock(a - 1)) : -1 === e && (d = d.view.getParam(a));
      }
    }
    return d;
  };
  a.getBlockList = function(b, a) {
    for (var c = this.getThreads(), e = [], f = 0;f < c.length;f++) {
      e = e.concat(c[f].getBlockList(b, a));
    }
    return e;
  };
  a.removeBlocksByType = function(b) {
    this.getBlockList(!1, b).forEach(function(b) {
      b.doDestroy();
    });
  };
  a.isAllThreadsInOrigin = function() {
    for (var b = this.getThreads(), a = b.length - 1;0 <= a;a--) {
      if (!b[a].isInOrigin()) {
        return !1;
      }
    }
    return !0;
  };
})(Entry.Code.prototype);
Entry.CodeView = function(a, b) {
  Entry.Model(this, !1);
  this.code = a;
  this.set({board:b});
  this.svgThreadGroup = b.svgGroup.elem("g");
  this.svgThreadGroup.attr({class:"svgThreadGroup"});
  this.svgThreadGroup.board = b;
  this.svgBlockGroup = b.svgGroup.elem("g");
  this.svgBlockGroup.attr({class:"svgBlockGroup"});
  this.svgBlockGroup.board = b;
  b.bindCodeView(this);
  this.code._data.getAll().forEach(function(a) {
    a.createView(b);
  });
  a.observe(this, "_setBoard", ["board"]);
};
(function(a) {
  a.schema = {board:null, scrollX:0, scrollY:0};
  a._setBoard = function() {
    this.set({board:this.code.board});
  };
  a.reDraw = function() {
    this.code.map(function(b) {
      b.view ? b.view.reDraw() : b.createView(this.board);
    }.bind(this));
  };
  a.destroy = function() {
    this.code.map(function(b) {
      b.destroyView();
    });
  };
})(Entry.CodeView.prototype);
Entry.ConnectionRipple = {};
(function(a) {
  a.createDom = function(b) {
    this.svgDom || (this._ripple = b.getBoard().svgGroup.elem("circle", {cx:0, cy:0, r:0, stroke:"#888", "stroke-width":10}));
  };
  a.setView = function(b) {
    this._ripple || this.createDom(b);
    var a = this._ripple, d = b.getBoard().svgGroup;
    a.remove();
    b = b.getAbsoluteCoordinate();
    a.attr({cx:b.x, cy:b.y});
    d.appendChild(a);
    a._startTime = new Date;
    return this;
  };
  a.dispose = function() {
    var b = this, a = this._ripple, d = (new Date - a._startTime) / 150;
    1 < d ? a.remove() : (a.attr({r:25 * d, opacity:1 - d}), window.setTimeout(function() {
      b.dispose();
    }, 10));
  };
})(Entry.ConnectionRipple);
Entry.Executor = function(a, b) {
  this.scope = new Entry.Scope(a, this);
  this.entity = b;
  this._callStack = [];
  this.register = {};
};
(function(a) {
  a.execute = function() {
    if (!this.isEnd()) {
      for (var b = [];;) {
        var a = null;
        b.push(this.scope.block);
        try {
          var d = this.scope.block.getSchema();
          d && (a = d.func.call(this.scope, this.entity, this.scope));
        } catch (f) {
          if ("AsyncError" === f.name) {
            a = Entry.STATIC.BREAK;
          } else {
            var e = !1;
            "\ub7f0\ud0c0\uc784 \uc5d0\ub7ec" != f.message && (e = !0);
            Entry.Utils.stopProjectWithToast(this.scope, "\ub7f0\ud0c0\uc784 \uc5d0\ub7ec", e);
          }
        }
        if (this.isEnd()) {
          break;
        }
        if (void 0 === a || null === a || a === Entry.STATIC.PASS) {
          if (this.scope = new Entry.Scope(this.scope.block.getNextBlock(), this), null === this.scope.block) {
            if (this._callStack.length) {
              if (a = this.scope, this.scope = this._callStack.pop(), this.scope.isLooped !== a.isLooped) {
                break;
              }
            } else {
              break;
            }
          }
        } else {
          if (a !== Entry.STATIC.CONTINUE && (a === Entry.STATIC.BREAK || this.scope === a)) {
            break;
          }
        }
      }
      return b;
    }
  };
  a.stepInto = function(b) {
    b instanceof Entry.Thread || console.error("Must step in to thread");
    b = b.getFirstBlock();
    if (!b) {
      return Entry.STATIC.BREAK;
    }
    this._callStack.push(this.scope);
    this.scope = new Entry.Scope(b, this);
    return Entry.STATIC.CONTINUE;
  };
  a.break = function() {
    this._callStack.length && (this.scope = this._callStack.pop());
    return Entry.STATIC.PASS;
  };
  a.breakLoop = function() {
    this._callStack.length && (this.scope = this._callStack.pop());
    for (;this._callStack.length && "repeat" !== Entry.block[this.scope.block.type].class;) {
      this.scope = this._callStack.pop();
    }
    return Entry.STATIC.PASS;
  };
  a.end = function() {
    this.scope.block = null;
  };
  a.isEnd = function() {
    return null === this.scope.block;
  };
})(Entry.Executor.prototype);
Entry.Scope = function(a, b) {
  this.type = (this.block = a) ? a.type : null;
  this.executor = b;
  this.entity = b.entity;
};
(function(a) {
  a.callReturn = function() {
  };
  a.getParam = function(b) {
    b = this.block.params[b];
    var a = new Entry.Scope(b, this.executor);
    return Entry.block[b.type].func.call(a, this.entity, a);
  };
  a.getParams = function() {
    var b = this;
    return this.block.params.map(function(a) {
      if (a instanceof Entry.Block) {
        var c = new Entry.Scope(a, b.executor);
        return Entry.block[a.type].func.call(c, b.entity, c);
      }
      return a;
    });
  };
  a.getValue = function(b, a) {
    b = this.block.params[this._getParamIndex(b, a)];
    a = new Entry.Scope(b, this.executor);
    return Entry.block[b.type].func.call(a, this.entity, a);
  };
  a.getStringValue = function(b, a) {
    return String(this.getValue(b, a));
  };
  a.getNumberValue = function(b, a) {
    return Number(this.getValue(b));
  };
  a.getBooleanValue = function(b, a) {
    return Number(this.getValue(b, a)) ? !0 : !1;
  };
  a.getField = function(b, a) {
    return this.block.params[this._getParamIndex(b)];
  };
  a.getStringField = function(b, a) {
    return String(this.getField(b));
  };
  a.getNumberField = function(b) {
    return Number(this.getField(b));
  };
  a.getStatement = function(b, a) {
    return this.executor.stepInto(this.block.statements[this._getStatementIndex(b, a)]);
  };
  a._getParamIndex = function(b) {
    this._schema || (this._schema = Entry.block[this.type]);
    return this._schema.paramsKeyMap[b];
  };
  a._getStatementIndex = function(b) {
    this._schema || (this._schema = Entry.block[this.type]);
    return this._schema.statementsKeyMap[b];
  };
  a.die = function() {
    this.block = null;
    return Entry.STATIC.BREAK;
  };
})(Entry.Scope.prototype);
Entry.BlockExtension = function(a, b) {
};
(function(a) {
})(Entry.BlockExtension.prototype);
Entry.ExtGuide = function(a, b, c) {
  this.blockView = b;
  this.block = b.block;
  this.model = a.model ? a.model : [];
  this.render();
};
(function(a) {
  a.render = function() {
    if (this.model) {
      var b = this.blockView.getBoard();
      this.svgGroup = this.blockView.svgGroup.elem("g", {class:"extension guideGroup"});
      this.blockView.guideSvgGroup = this.svgGroup;
      $(this.svgGroup).bind("mousedown touchstart", function(b) {
        b.stopPropagation && b.stopPropagation();
        b.preventDefault && b.preventDefault();
      });
      var a = this.block.getCode();
      this.model[0].x = -99999;
      this.model[0].y = -99999;
      a = a.createThread(this.model);
      !a.view && a.createView(b);
      b = a.getFirstBlock().view.clone();
      b.removeAttribute("transform");
      this.svgGroup.appendChild(b);
      this.updatePos();
      this.block.getThread().view.setHasGuide(!0);
      a.destroy(!1);
    }
  };
  a.updatePos = function() {
    this.svgGroup.attr("transform", this._getTransform());
  };
  a._getTransform = function() {
    return "translate(0,%y)".replace("%y", this.blockView.magnet.next.y);
  };
})(Entry.ExtGuide.prototype);
Entry.ExtSideTag = function(a, b, c) {
  this.blockView = b;
  this.color = a.color ? a.color : "#EBC576";
  this.text = a.text ? a.text : "";
  this.height = a.height ? Number(a.height) : 31 * Number(a.count);
  this.render();
  this.updatePos();
};
(function(a) {
  a.render = function() {
    this.svgGroup = this.blockView.svgGroup.elem("g");
    $(this.svgGroup).bind("mousedown touchstart", function(b) {
      b.stopPropagation && b.stopPropagation();
      b.preventDefault && b.preventDefault();
    });
    this.path = this.svgGroup.elem("path").attr({d:"m0,2 h-9 v" + (this.height - 4) + " h9", stroke:this.color, fill:"transparent", "stroke-width":"3"});
    this.textElement = this.svgGroup.elem("text").attr({style:"white-space: pre;", "font-size":"10px", "font-family":"nanumBarunRegular", "class":"dragNone", fill:"#000000"});
    this.tspans = this.text.split("\n").map(function(b) {
      var a = this.textElement.elem("tspan").attr({dy:"1.2em", x:"0", "class":"extension sideTagTspan"});
      a.textContent = b;
      return a;
    }.bind(this));
  };
  a.updatePos = function() {
    this.positionX = 8 * -(this.blockView.block.pointer().length - 2);
    this.svgGroup.attr("transform", "translate(" + this.positionX + ",0)");
    this.textElement.attr({y:this.height / 2 - 12 * (this.tspans.length - 1) - 2});
    var b = this.textElement.getBoundingClientRect();
    this.tspans.map(function(a) {
      a.attr({x:-b.width - 14});
    });
  };
})(Entry.ExtSideTag.prototype);
Entry.FieldAngle = function(a, b, c) {
  this._block = b.block;
  this._blockView = b;
  this.box = new Entry.BoxModel;
  this.svgGroup = null;
  this.position = a.position;
  this._contents = a;
  this._index = c;
  a = this.getValue();
  this.setValue(this.modValue(void 0 !== a ? a : 90));
  this._CONTENT_HEIGHT = this.getContentHeight();
  this.renderStart();
};
Entry.Utils.inherit(Entry.Field, Entry.FieldAngle);
(function(a) {
  a.renderStart = function(b, a) {
    this.svgGroup && $(this.svgGroup).remove();
    this.svgGroup = this._blockView.contentSvgGroup.elem("g", {class:"entry-input-field"});
    this.textElement = this.svgGroup.elem("text", {x:4, y:4, "font-size":"11px"});
    this._setTextValue();
    b = this.getTextWidth();
    a = this._CONTENT_HEIGHT;
    this._header = this.svgGroup.elem("rect", {x:0, y:(this.position && this.position.y ? this.position.y : 0) - a / 2, rx:3, ry:3, width:b, height:a, fill:"#fff", "fill-opacity":.4});
    this.svgGroup.appendChild(this.textElement);
    this._bindRenderOptions();
    this.box.set({x:0, y:0, width:b, height:a});
  };
  a.renderOptions = function() {
    var b = this;
    this._attachDisposeEvent(function() {
      b.applyValue();
      b.destroyOption();
    });
    this.optionGroup = Entry.Dom("input", {class:"entry-widget-input-field", parent:$("body")});
    this.optionGroup.val(this.value);
    this.optionGroup.on("mousedown touchstart", function(b) {
      b.stopPropagation();
    });
    this.optionGroup.on("keyup", function(a) {
      var c = a.keyCode || a.which;
      b.applyValue(a);
      -1 < [13, 27].indexOf(c) && b.destroyOption();
    });
    var a = this.getAbsolutePosFromDocument();
    a.y -= this.box.height / 2;
    this.optionGroup.css({height:this._CONTENT_HEIGHT, left:a.x, top:a.y, width:b.box.width});
    this.svgOptionGroup = this.appendSvgOptionGroup();
    this.svgOptionGroup.elem("circle", {x:0, y:0, r:49, class:"entry-field-angle-circle"});
    $(this.svgOptionGroup).on("mousedown touchstart", function(a) {
      a.stopPropagation();
      b._updateByCoord(a);
    });
    this._dividerGroup = this.svgOptionGroup.elem("g");
    for (a = 0;360 > a;a += 15) {
      this._dividerGroup.elem("line", {x1:49, y1:0, x2:49 - (0 === a % 45 ? 10 : 5), y2:0, transform:"rotate(" + a + ", 0, 0)", class:"entry-angle-divider"});
    }
    a = this.getAbsolutePosFromBoard();
    a.x += this.box.width / 2;
    a.y = a.y + this.box.height / 2 + 49 + 1;
    this.svgOptionGroup.attr({class:"entry-field-angle", transform:"translate(" + a.x + "," + a.y + ")"});
    $(this.svgOptionGroup).bind("mousemove touchmove", this._updateByCoord.bind(this));
    $(this.svgOptionGroup).bind("mouseup touchend", this.destroyOption.bind(this));
    this.updateGraph();
    this.optionGroup.focus();
    this.optionGroup.select();
  };
  a._updateByCoord = function(b) {
    b.originalEvent && b.originalEvent.touches && (b = b.originalEvent.touches[0]);
    b = [b.clientX, b.clientY];
    var a = this.getAbsolutePosFromDocument();
    this.optionGroup.val(this.modValue(function(b, a) {
      var c = a[0] - b[0];
      b = a[1] - b[1] - 49 - 1;
      a = Math.atan(-b / c);
      a = Entry.toDegrees(a);
      a = 90 - a;
      0 > c ? a += 180 : 0 < b && (a += 360);
      return 15 * Math.round(a / 15);
    }([a.x + this.box.width / 2, a.y + this.box.height / 2 + 1], b)));
    this.applyValue();
  };
  a.updateGraph = function() {
    this._fillPath && this._fillPath.remove();
    var b = Entry.toRadian(this.getValue()), a = 49 * Math.sin(b), d = -49 * Math.cos(b), b = b > Math.PI ? 1 : 0;
    this._fillPath = this.svgOptionGroup.elem("path", {d:"M 0,0 v -49 A 49,49 0 %LARGE 1 %X,%Y z".replace("%X", a).replace("%Y", d).replace("%LARGE", b), class:"entry-angle-fill-area"});
    this.svgOptionGroup.appendChild(this._dividerGroup);
    this._indicator && this._indicator.remove();
    this._indicator = this.svgOptionGroup.elem("line", {x1:0, y1:0, x2:a, y2:d});
    this._indicator.attr({class:"entry-angle-indicator"});
  };
  a.applyValue = function() {
    var b = this.optionGroup.val();
    isNaN(b) || "" === b || (b = this.modValue(b), this.setValue(b), this.updateGraph(), this.textElement.textContent = this.getValue(), this.optionGroup && this.optionGroup.val(b), this.resize());
  };
  a.resize = function() {
    var b = this.getTextWidth();
    this._header.attr({width:b});
    this.optionGroup && this.optionGroup.css({width:b});
    this.box.set({width:b});
    this._block.view.dAlignContent();
  };
  a.getTextWidth = function() {
    return this.textElement ? this.textElement.getBoundingClientRect().width + 8 : 8;
  };
  a.getText = function() {
    var b = this.getValue(), a = /&value/gm;
    return a.test(b) ? b.replace(a, "") : b + "\u00b0";
  };
  a.modValue = function(a) {
    return /&value/gm.test(a) ? a : a % 360;
  };
  a.destroyOption = function() {
    this.disposeEvent && (Entry.disposeEvent.detach(this.disposeEvent), delete this.documentDownEvent);
    this.optionGroup && (this.optionGroup.remove(), delete this.optionGroup);
    this.svgOptionGroup && (this.svgOptionGroup.remove(), delete this.svgOptionGroup);
    this._setTextValue();
    this.command();
  };
  a._setTextValue = function() {
    var a = this._convert(this.getText(), this.getValue());
    this.textElement.textContent = a;
  };
})(Entry.FieldAngle.prototype);
Entry.FieldColor = function(a, b, c) {
  this._block = b.block;
  this._blockView = b;
  this.box = new Entry.BoxModel;
  this.svgGroup = null;
  this._contents = a;
  this._index = c;
  this._position = a.position;
  this._fontSize = a.fontSize || b.getSkeleton().fontSize || 12;
  this._color = a.color || this._block.getSchema().fontColor || b.getSkeleton().color || "black";
  this.key = a.key;
  this.setValue(this.getValue() || "#FF0000");
  this._CONTENT_HEIGHT = this.getContentHeight();
  this._CONTENT_WIDTH = this.getContentWidth();
  this.renderStart(b);
};
Entry.Utils.inherit(Entry.Field, Entry.FieldColor);
(function(a) {
  a.renderStart = function() {
    this.svgGroup && $(this.svgGroup).remove();
    this.svgGroup = this._blockView.contentSvgGroup.elem("g", {class:"entry-field-color"});
    if (this._blockView.renderMode === Entry.BlockView.RENDER_MODE_TEXT) {
      var a = this.svgGroup.elem("rect", {x:0, rx:3, ry:3, fill:"#fff", "fill-opacity":.4});
      this.textElement = this.svgGroup.elem("text").attr({style:"white-space: pre;", "font-size":this._fontSize + "px", "font-family":"nanumBarunRegular", "class":"dragNone", fill:this._color});
      this.textElement.textContent = this._convert(this.getValue(), this.getValue());
      var c = this.textElement.getBoundingClientRect(), d = c.width + 12, e = c.height;
      a.attr({y:-e / 2, width:d, height:e});
      this.textElement.attr({x:6, y:.25 * c.height});
    } else {
      var e = this._CONTENT_HEIGHT, d = this._CONTENT_WIDTH, a = this._position, f, g;
      a ? (f = a.x || 0, g = a.y || 0) : (f = 0, g = -e / 2);
      this._header = this.svgGroup.elem("rect", {x:f, y:g, width:d, height:e, fill:this.getValue()});
    }
    this._bindRenderOptions();
    this.box.set({x:f, y:g, width:d, height:e});
  };
  a.renderOptions = function() {
    var a = this;
    this._attachDisposeEvent();
    var c = Entry.FieldColor.getWidgetColorList();
    this.optionGroup = Entry.Dom("table", {class:"entry-widget-color-table", parent:$("body")});
    for (var d = 0;d < c.length;d++) {
      for (var e = Entry.Dom("tr", {class:"entry-widget-color-row", parent:this.optionGroup}), f = 0;f < c[d].length;f++) {
        var g = Entry.Dom("td", {class:"entry-widget-color-cell", parent:e}), h = c[d][f];
        g.css({"background-color":h});
        g.attr({"data-color-value":h});
        (function(b, c) {
          b.mousedown(function(a) {
            a.stopPropagation();
          });
          b.mouseup(function(b) {
            a.applyValue(c);
            a.destroyOption();
            a._selectBlockView();
          });
        })(g, h);
      }
    }
    c = this.getAbsolutePosFromDocument();
    c.y += this.box.height / 2 + 1;
    this.optionGroup.css({left:c.x, top:c.y});
  };
  a.applyValue = function(a) {
    this.value != a && (this.setValue(a), this._header ? this._header.attr({fill:a}) : this.textElement && (this.textElement.textContent = this._convert(this.getValue(), this.getValue())));
  };
  a.getContentWidth = function() {
    return Entry.isMobile() ? 20 : 14.5;
  };
})(Entry.FieldColor.prototype);
Entry.FieldColor.getWidgetColorList = function() {
  return ["#FFFFFF #CCCCCC #C0C0C0 #999999 #666666 #333333 #000000".split(" "), "#FFCCCC #FF6666 #FF0000 #CC0000 #990000 #660000 #330000".split(" "), "#FFCC99 #FF9966 #FF9900 #FF6600 #CC6600 #993300 #663300".split(" "), "#FFFF99 #FFFF66 #FFCC66 #FFCC33 #CC9933 #996633 #663333".split(" "), "#FFFFCC #FFFF33 #FFFF00 #FFCC00 #999900 #666600 #333300".split(" "), "#99FF99 #66FF99 #33FF33 #33CC00 #009900 #006600 #003300".split(" "), "#99FFFF #33FFFF #66CCCC #00CCCC #339999 #336666 #003333".split(" "), "#CCFFFF #66FFFF #33CCFF #3366FF #3333FF #000099 #000066".split(" "), 
  "#CCCCFF #9999FF #6666CC #6633FF #6609CC #333399 #330099".split(" "), "#FFCCFF #FF99FF #CC66CC #CC33CC #993399 #663366 #330033".split(" ")];
};
Entry.FieldDropdown = function(a, b, c) {
  this._block = b.block;
  this._blockView = b;
  this.box = new Entry.BoxModel;
  this.svgGroup = null;
  this._contents = a;
  this._noArrow = a.noArrow;
  this._arrowColor = a.arrowColor;
  this._index = c;
  this.setValue(this.getValue());
  this._CONTENT_HEIGHT = this.getContentHeight(a.dropdownHeight);
  this._FONT_SIZE = this.getFontSize(a.fontSize);
  this._ROUND = a.roundValue || 3;
  this.renderStart();
};
Entry.Utils.inherit(Entry.Field, Entry.FieldDropdown);
(function(a) {
  a.renderStart = function() {
    this.svgGroup && $(this.svgGroup).remove();
    this instanceof Entry.FieldDropdownDynamic && this._updateValue();
    var a = this._blockView, c = Entry.isMobile(), d = c ? 33 : 20, c = c ? 24 : 10;
    this.svgGroup = a.contentSvgGroup.elem("g", {class:"entry-field-dropdown"});
    this.textElement = this.svgGroup.elem("text", {x:5});
    this._setTextValue();
    a = this.textElement.getBBox();
    this.textElement.attr({style:"white-space: pre;", "font-size":+this._FONT_SIZE + "px", y:.23 * a.height});
    d = this.textElement.getBoundingClientRect().width + d;
    this._noArrow && (d -= c);
    c = this._CONTENT_HEIGHT;
    this._header = this.svgGroup.elem("rect", {width:d, height:c, y:-c / 2, rx:this._ROUND, ry:this._ROUND, fill:"#fff", "fill-opacity":.4});
    this.svgGroup.appendChild(this.textElement);
    this._noArrow || (a = this.getArrow(), this._arrow = this.svgGroup.elem("polygon", {points:a.points, fill:a.color, stroke:a.color, transform:"translate(" + (d - a.width - 5) + "," + -a.height / 2 + ")"}));
    this._bindRenderOptions();
    this.box.set({x:0, y:0, width:d, height:c});
  };
  a.resize = function() {
    var a = Entry.isMobile(), c = a ? 33 : 20, a = a ? 24 : 10, c = this.textElement.getBoundingClientRect().width + c;
    this._noArrow ? c -= a : (a = this.getArrow(), this._arrow.attr({transform:"translate(" + (c - a.width - 5) + "," + -a.height / 2 + ")"}));
    this._header.attr({width:c});
    this.box.set({width:c});
    this._block.view.dAlignContent();
  };
  a.renderOptions = function() {
    var a = this;
    this._attachDisposeEvent();
    this.optionGroup = Entry.Dom("ul", {class:"entry-widget-dropdown", parent:$("body")});
    this.optionGroup.bind("mousedown touchstart", function(a) {
      a.stopPropagation();
    });
    for (var c = this._contents.options, d = 0, e = c.length;d < e;d++) {
      var f = c[d], g = f[0] = this._convert(f[0], f[1]), f = f[1], h = Entry.Dom("li", {class:"rect", parent:this.optionGroup}), k = Entry.Dom("span", {class:"left", parent:h});
      Entry.Dom("span", {class:"right", parent:h}).text(g);
      this.getValue() == f && k.text("\u2713");
      (function(b, c) {
        b.bind("mousedown touchstart", function(a) {
          a.stopPropagation();
        });
        b.bind("mouseup touchend", function(b) {
          b.stopPropagation();
          a.applyValue(c);
          a.destroyOption();
          a._selectBlockView();
        });
      })(h, f);
    }
    this._position();
  };
  a._position = function() {
    var a = this.getAbsolutePosFromDocument();
    a.y += this.box.height / 2;
    var c = $(document).height(), d = this.optionGroup.height(), e = this.optionGroup.width() + 30;
    if (c < a.y + d + 30) {
      var c = this._blockView.getBoard().svgDom.height(), f = this.getAbsolutePosFromBoard();
      this._blockView.y < c / 2 ? (a.x += this.box.width / 2 - e / 2, c -= f.y + 30, this.optionGroup.height(c)) : (a.x += this.box.width + 1, c -= c - f.y, c - 30 < d && this.optionGroup.height(c - c % 30), a.y -= this.optionGroup.height());
    } else {
      a.x += this.box.width / 2 - e / 2;
    }
    this.optionGroup.addClass("rendered");
    this.optionGroup.css({left:a.x, top:a.y, width:e});
    this.optionGroup.find(".right").width(e - 20);
  };
  a.applyValue = function(a) {
    this.value != a && this.setValue(a);
    this._setTextValue();
    this.resize();
  };
  a.getTextByValue = function(a) {
    var b = /&value/gm;
    if (b.test(a)) {
      return a.replace(b, "");
    }
    if (!a && "number" !== typeof a || "null" === a) {
      return Lang.Blocks.no_target;
    }
    for (var b = this._contents.options, d = 0, e = b.length;d < e;d++) {
      var f = b[d];
      if (f[1] == a) {
        return f[0];
      }
    }
    return "?" === a ? a : Lang.Blocks.no_target;
  };
  a.getContentHeight = function(a) {
    return a = a || this._blockView.getSkeleton().dropdownHeight || (Entry.isMobile() ? 22 : 16);
  };
  a.getArrow = function() {
    var a = Entry.isMobile();
    return {color:this._arrowColor || this._blockView._schema.color, points:a ? "0,0 19,0 9.5,13" : "0,0 6.4,0 3.2,4.2", height:a ? 13 : 4.2, width:a ? 19 : 6.4};
  };
  a._setTextValue = function() {
    var a = this.getTextByValue(this.getValue());
    this.textElement.textContent = this._convert(a, this.getValue());
  };
})(Entry.FieldDropdown.prototype);
Entry.FieldDropdownDynamic = function(a, b, c) {
  this._block = b.block;
  this._blockView = b;
  this.box = new Entry.BoxModel;
  this.svgGroup = null;
  this._contents = a;
  this._index = c;
  this._arrowColor = a.arrowColor;
  c = this._contents.menuName;
  Entry.Utils.isFunction(c) ? this._menuGenerator = c : this._menuName = c;
  this._CONTENT_HEIGHT = this.getContentHeight(a.dropdownHeight);
  this._FONT_SIZE = this.getFontSize(a.fontSize);
  this._ROUND = a.roundValue || 3;
  this.renderStart(b);
  b && b.getBoard() && b.getBoard().workspace && b.getBoard().workspace.changeEvent && b.getBoard().workspace.changeEvent.attach(this, this._updateValue);
};
Entry.Utils.inherit(Entry.FieldDropdown, Entry.FieldDropdownDynamic);
(function(a) {
  a.constructor = Entry.FieldDropDownDynamic;
  a._updateValue = function() {
    var a = this._block.getCode().object, c = [];
    Entry.container && (c = this._menuName ? Entry.container.getDropdownList(this._menuName, a) : this._menuGenerator());
    this._contents.options = c;
    a = this.getValue();
    if (this._blockView.isInBlockMenu || !a || "null" == a) {
      a = 0 !== c.length ? c[0][1] : null;
    }
    this._updateOptions();
    this.setValue(a);
  };
  a.renderOptions = function() {
    var a = this;
    this._attachDisposeEvent();
    this.optionGroup = Entry.Dom("ul", {class:"entry-widget-dropdown", parent:$("body")});
    this.optionGroup.bind("mousedown touchstart", function(a) {
      a.stopPropagation();
    });
    var c;
    c = this._menuName ? Entry.container.getDropdownList(this._contents.menuName) : this._menuGenerator();
    this._contents.options = c;
    for (var d = 0;d < c.length;d++) {
      var e = c[d], f = e[0] = this._convert(e[0], e[1]), e = e[1], g = Entry.Dom("li", {class:"rect", parent:this.optionGroup}), h = Entry.Dom("span", {class:"left", parent:g});
      Entry.Dom("span", {class:"right", parent:g}).text(f);
      this.getValue() == e && h.text("\u2713");
      (function(b, c) {
        b.mousedown(function(a) {
          a.stopPropagation();
        });
        b.mouseup(function(b) {
          b.stopPropagation();
          a.applyValue(c);
          a.destroyOption();
          a._selectBlockView();
        });
      })(g, e);
    }
    this._position();
  };
})(Entry.FieldDropdownDynamic.prototype);
Entry.FieldImage = function(a, b, c) {
  this._block = b.block;
  this._blockView = b;
  this._content = a;
  this.box = new Entry.BoxModel;
  this._size = a.size;
  this._highlightColor = a.highlightColor ? a.highlightColor : "#F59900";
  this._position = a.position;
  this._imgElement = this._path = this.svgGroup = null;
  this._index = c;
  this.setValue(null);
  this.renderStart();
};
Entry.Utils.inherit(Entry.Field, Entry.FieldImage);
(function(a) {
  a.renderStart = function() {
    this.svgGroup && this.svgGroup.remove();
    this._imgUrl = this._block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN ? this._content.img.replace(".png", "_un.png") : this._content.img;
    this.svgGroup = this._blockView.contentSvgGroup.elem("g");
    this._imgElement = this.svgGroup.elem("image", {href:this._imgUrl, x:0, y:-.5 * this._size, width:this._size, height:this._size});
    this.box.set({x:this._size, y:0, width:this._size, height:this._size});
  };
})(Entry.FieldImage.prototype);
Entry.FieldIndicator = function(a, b, c) {
  this._block = b.block;
  this._blockView = b;
  this.box = new Entry.BoxModel;
  this._size = a.size;
  a.img ? this._imgUrl = this._block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN ? a.img.replace(".png", "_un.png") : a.img : a.color && (this._color = a.color);
  this._boxMultiplier = a.boxMultiplier || 2;
  this._highlightColor = a.highlightColor ? a.highlightColor : "#F59900";
  this._position = a.position;
  this._index = c;
  this._imgElement = this._path = this.svgGroup = null;
  this.setValue(null);
  this.renderStart();
};
Entry.Utils.inherit(Entry.Field, Entry.FieldIndicator);
(function(a) {
  a.renderStart = function() {
    this.svgGroup && this.svgGroup.remove();
    this.svgGroup = this._blockView.contentSvgGroup.elem("g");
    this._imgUrl && (this._imgElement = this.svgGroup.elem("image", {href:Entry.mediaFilePath + this._imgUrl, x:this._position ? -1 * this._size : 0, y:-1 * this._size, width:2 * this._size, height:2 * this._size}));
    var a = "m %s,-%s a %s,%s 0 1,1 -0.1,0 z".replace(/%s/gi, this._size);
    this._path = this.svgGroup.elem("path", {d:a, x:this._position ? -1 * this._size : 0, y:-1 * this._size, stroke:"none", fill:this._color ? this._color : "none"});
    this.box.set({width:this._size * this._boxMultiplier + (this._position ? -this._size : 0), height:this._size * this._boxMultiplier});
  };
  a.enableHighlight = function() {
    var a = this._path.getTotalLength(), c = this._path;
    this._path.attr({stroke:this._highlightColor, strokeWidth:2, "stroke-linecap":"round", "stroke-dasharray":a + " " + a, "stroke-dashoffset":a});
    setInterval(function() {
      c.attr({"stroke-dashoffset":a}).animate({"stroke-dashoffset":0}, 300);
    }, 1400, mina.easeout);
    setTimeout(function() {
      setInterval(function() {
        c.animate({"stroke-dashoffset":-a}, 300);
      }, 1400, mina.easeout);
    }, 500);
  };
})(Entry.FieldIndicator.prototype);
Entry.Keyboard = {};
Entry.FieldKeyboard = function(a, b, c) {
  this._block = b.block;
  this._blockView = b;
  this.box = new Entry.BoxModel;
  this.svgGroup = null;
  this.position = a.position;
  this._contents = a;
  this._index = c;
  this.setValue(String(this.getValue()));
  this._CONTENT_HEIGHT = this.getContentHeight();
  this._optionVisible = !1;
  this.renderStart(b);
};
Entry.Utils.inherit(Entry.Field, Entry.FieldKeyboard);
(function(a) {
  a.renderStart = function() {
    this.svgGroup && $(this.svgGroup).remove();
    this.svgGroup = this._blockView.contentSvgGroup.elem("g", {class:"entry-input-field"});
    this.textElement = this.svgGroup.elem("text").attr({x:5, y:4, "font-size":"11px"});
    this._setTextValue();
    var a = this.getTextWidth() + 1, c = this._CONTENT_HEIGHT;
    this._header = this.svgGroup.elem("rect", {x:0, y:(this.position && this.position.y ? this.position.y : 0) - c / 2, width:a, height:c, rx:3, ry:3, fill:"#fff", "fill-opacity":.4});
    this.svgGroup.appendChild(this.textElement);
    this._bindRenderOptions();
    this.box.set({x:0, y:0, width:a, height:c});
  };
  a.renderOptions = function() {
    Entry.keyPressed && (this.keyPressed = Entry.keyPressed.attach(this, this._keyboardControl));
    this._optionVisible = !0;
    this._attachDisposeEvent();
    var a = this.getAbsolutePosFromDocument();
    a.x -= this.box.width / 2;
    a.y += this.box.height / 2 + 1;
    this.optionGroup = Entry.Dom("img", {class:"entry-widget-keyboard-input", src:Entry.mediaFilePath + "/media/keyboard_workspace.png", parent:$("body")});
    this.optionGroup.css({left:a.x, top:a.y});
  };
  a.destroyOption = function() {
    this.disposeEvent && (Entry.disposeEvent.detach(this.disposeEvent), delete this.disposeEvent);
    this.optionGroup && (this.optionGroup.remove(), delete this.optionGroup);
    this._optionVisible = !1;
    this.command();
    this.keyPressed && (Entry.keyPressed.detach(this.keyPressed), delete this.keyPressed);
  };
  a._keyboardControl = function(a) {
    a.stopPropagation();
    if (this._optionVisible) {
      a = a.keyCode;
      var b = Entry.getKeyCodeMap()[a];
      void 0 !== b && this.applyValue(b, a);
    }
  };
  a.applyValue = function(a, c) {
    this.setValue(String(c));
    this.destroyOption();
    this._setTextValue();
    this.resize();
  };
  a.resize = function() {
    var a = this.getTextWidth() + 1;
    this._header.attr({width:a});
    this.box.set({width:a});
    this._blockView.dAlignContent();
  };
  a.getTextWidth = function() {
    return this.textElement.getComputedTextLength() + 10;
  };
  a.destroy = function() {
    this.destroyOption();
    Entry.keyPressed && this.keyPressed && Entry.keyPressed.detach(this.keyPressed);
  };
  a._setTextValue = function() {
    var a = Entry.getKeyCodeMap()[this.getValue()], a = this._convert(a, this.getValue());
    this.textElement.textContent = void 0 === a ? Lang.Blocks.no_target : a;
  };
})(Entry.FieldKeyboard.prototype);
Entry.FieldLineBreak = function(a, b, c) {
  this._block = b.block;
  this._blockView = b;
  this._index = c;
  this.box = new Entry.BoxModel;
  this.setValue(null);
  this.renderStart();
};
Entry.Utils.inherit(Entry.Field, Entry.FieldLineBreak);
(function(a) {
  a.renderStart = function() {
  };
  a.align = function(a) {
    var b = this._blockView;
    0 !== b._statements.length && this.box.set({y:(b._statements[a].height || 20) + Math.max(b.contentHeight % 1E3, 30)});
  };
})(Entry.FieldLineBreak.prototype);
Entry.FieldOutput = function(a, b, c, d, e) {
  Entry.Model(this, !1);
  this._blockView = b;
  this._block = b.block;
  this._valueBlock = null;
  this.box = new Entry.BoxModel;
  this.changeEvent = new Entry.Event(this);
  this._index = c;
  this.contentIndex = e;
  this._content = a;
  this.acceptType = a.accept;
  this.view = this;
  this.svgGroup = null;
  this._position = a.position;
  this.box.observe(b, "dAlignContent", ["width", "height"]);
  this.observe(this, "_updateBG", ["magneting"], !1);
  this.renderStart(b.getBoard(), d);
};
Entry.Utils.inherit(Entry.Field, Entry.FieldOutput);
(function(a) {
  a.schema = {magneting:!1};
  a.renderStart = function(a, c) {
    this.svgGroup || (this.svgGroup = this._blockView.contentSvgGroup.elem("g"));
    this.view = this;
    this._nextGroup = this.svgGroup;
    this.box.set({x:0, y:0, width:0, height:20});
    var b = this.getValue();
    b && !b.view && (b.setThread(this), b.createView(a, c));
    this._updateValueBlock(b);
    this._valueBlock && this._valueBlock.view._startContentRender(this.renderMode);
    this._blockView.getBoard().constructor == Entry.BlockMenu && this._valueBlock && this._valueBlock.view.removeControl();
  };
  a.align = function(a, c, d) {
    var b = this.svgGroup;
    this._position && (this._position.x && (a = this._position.x), this._position.y && (c = this._position.y));
    var f = this._valueBlock;
    f && (c = -.5 * f.view.height);
    f = "translate(" + a + "," + c + ")";
    void 0 === d || d ? b.animate({transform:f}, 300, mina.easeinout) : b.attr({transform:f});
    this.box.set({x:a, y:c});
  };
  a.calcWH = function() {
    var a = this._valueBlock;
    a && a.view ? (a = a.view, this.box.set({width:a.width, height:a.height})) : this.box.set({width:0, height:20});
  };
  a.calcHeight = a.calcWH;
  a.destroy = function() {
    this._valueBlock && this._valueBlock.destroyView();
  };
  a._inspectBlock = function() {
  };
  a._setValueBlock = function(a) {
    if (a != this._valueBlock || !this._valueBlock) {
      return this._valueBlock = a, this.setValue(a), a && a.setThread(this), this._valueBlock;
    }
  };
  a.spliceBlock = function() {
    this._updateValueBlock();
  };
  a._updateValueBlock = function(a) {
    a instanceof Entry.Block || (a = void 0);
    a && a === this._valueBlock ? this.calcWH() : (this._sizeObserver && this._sizeObserver.destroy(), this._posObserver && this._posObserver.destroy(), (a = this._setValueBlock(a)) ? (a = a.view, a.bindPrev(), this._posObserver = a.observe(this, "_updateValueBlock", ["x", "y"], !1), this._sizeObserver = a.observe(this, "calcWH", ["width", "height"])) : this.calcWH(), this._blockView.dAlignContent());
  };
  a.getPrevBlock = function(a) {
    return this._valueBlock === a ? this : null;
  };
  a.getNextBlock = function() {
    return null;
  };
  a.requestAbsoluteCoordinate = function(a) {
    a = this._blockView;
    var b = a.contentPos;
    a = a.getAbsoluteCoordinate();
    a.x += this.box.x + b.x;
    a.y += this.box.y + b.y;
    return a;
  };
  a.dominate = function() {
    this._blockView.dominate();
  };
  a.isGlobal = function() {
    return !1;
  };
  a.separate = function(a) {
    this.getCode().createThread([a]);
    this.changeEvent.notify();
  };
  a.getCode = function() {
    return this._block.thread.getCode();
  };
  a.cut = function(a) {
    return this._valueBlock === a ? (delete this._valueBlock, [a]) : null;
  };
  a._updateBG = function() {
    this.magneting ? this._bg = this.svgGroup.elem("path", {d:"m -4,-12 h 3 l 2,2 0,3 3,0 1,1 0,12 -1,1 -3,0 0,3 -2,2 h -3 ", fill:"#fff", stroke:"#fff", "fill-opacity":.7, transform:"translate(0," + (this._valueBlock ? 12 : 0) + ")"}) : this._bg && (this._bg.remove(), delete this._bg);
  };
  a.replace = function(a) {
    var b = this._valueBlock;
    b && (b.view._toGlobalCoordinate(), a.getTerminateOutputBlock().view._contents[1].replace(b));
    this._updateValueBlock(a);
    a.view._toLocalCoordinate(this.svgGroup);
    this.calcWH();
  };
  a.setParent = function(a) {
    this._parent = a;
  };
  a.getParent = function() {
    return this._parent;
  };
  a.getThread = function() {
    return this;
  };
  a.getValueBlock = function() {
    return this._valueBlock;
  };
  a.pointer = function(a) {
    a.unshift(this._index);
    a.unshift(Entry.PARAM);
    return this._block.pointer(a);
  };
})(Entry.FieldOutput.prototype);
Entry.FieldStatement = function(a, b, c) {
  Entry.Model(this, !1);
  this._blockView = b;
  this.block = b.block;
  this.view = this;
  this._index = c;
  this.acceptType = a.accept;
  this._thread = this.statementSvgGroup = this.svgGroup = null;
  this._position = a.position;
  this._events = [];
  this.observe(b, "alignContent", ["height"], !1);
  this.observe(this, "_updateBG", ["magneting"], !1);
  this.renderStart(b.getBoard());
};
(function(a) {
  a.schema = {x:0, y:0, width:100, height:20, magneting:!1};
  a.magnet = {next:{x:0, y:0}};
  a.renderStart = function(a) {
    this.svgGroup = this._blockView.statementSvgGroup.elem("g");
    this._nextGroup = this.statementSvgGroup = this.svgGroup.elem("g");
    this._initThread(a);
    this._board = a;
  };
  a._initThread = function(a) {
    var b = this.getValue();
    this._thread = b;
    b.createView(a);
    b.view.setParent(this);
    if (a = b.getFirstBlock()) {
      a.view._toLocalCoordinate(this.statementSvgGroup), this.firstBlock = a;
    }
    a = b.changeEvent.attach(this, this.calcHeight);
    var d = b.changeEvent.attach(this, this.checkTopBlock);
    this._events.push([b.changeEvent, a]);
    this._events.push([b.changeEvent, d]);
    this.calcHeight();
  };
  a.align = function(a, c, d) {
    d = void 0 === d ? !0 : d;
    var b = this.svgGroup;
    this._position && (this._position.x && (a = this._position.x), this._position.y && (c = this._position.y));
    var f = "translate(" + a + "," + c + ")";
    this.set({x:a, y:c});
    d ? b.animate({transform:f}, 300, mina.easeinout) : b.attr({transform:f});
  };
  a.calcHeight = function() {
    var a = this._thread.view.requestPartHeight(null);
    this.set({height:a});
  };
  a.getValue = function() {
    return this.block.statements[this._index];
  };
  a.requestAbsoluteCoordinate = function() {
    var a = this._blockView.getAbsoluteCoordinate();
    a.x += this.x;
    a.y += this.y;
    return a;
  };
  a.dominate = function() {
    this._blockView.dominate();
  };
  a.destroy = function() {
    for (;this._events.length;) {
      var a = this._events.pop();
      a[0].detach(a[1]);
    }
  };
  a._updateBG = function() {
    if (this._board.dragBlock && this._board.dragBlock.dragInstance) {
      if (this.magneting) {
        var a = this._board.dragBlock.getShadow(), c = this.requestAbsoluteCoordinate(), c = "translate(" + c.x + "," + c.y + ")";
        $(a).attr({transform:c, display:"block"});
        this._clonedShadow = a;
        this.background && (this.background.remove(), this.nextBackground.remove(), delete this.background, delete this.nextBackground);
        a = this._board.dragBlock.getBelowHeight();
        this.statementSvgGroup.attr({transform:"translate(0," + a + ")"});
        this.set({height:this.height + a});
      } else {
        this._clonedShadow && (this._clonedShadow.attr({display:"none"}), delete this._clonedShadow), a = this.originalHeight, void 0 !== a && (this.background && (this.background.remove(), this.nextBackground.remove(), delete this.background, delete this.nextBackground), delete this.originalHeight), this.statementSvgGroup.attr({transform:"translate(0,0)"}), this.calcHeight();
      }
      (a = this.block.thread.changeEvent) && a.notify();
    }
  };
  a.insertTopBlock = function(a) {
    this._posObserver && this._posObserver.destroy();
    var b = this.firstBlock;
    (this.firstBlock = a) && a.doInsert(this._thread);
    return b;
  };
  a.getNextBlock = function() {
    return this.firstBlock;
  };
  a.checkTopBlock = function() {
    var a = this._thread.getFirstBlock();
    a && this.firstBlock !== a ? (this.firstBlock = a, a.view.bindPrev(this), a._updatePos()) : a || (this.firstBlock = null);
  };
})(Entry.FieldStatement.prototype);
Entry.FieldText = function(a, b, c) {
  this._block = b.block;
  this._blockView = b;
  this._index = c;
  this.box = new Entry.BoxModel;
  this._fontSize = a.fontSize || b.getSkeleton().fontSize || 12;
  this._color = a.color || this._block.getSchema().fontColor || b.getSkeleton().color || "white";
  this._align = a.align || "left";
  this._text = this.getValue() || a.text;
  this.setValue(null);
  this.textElement = null;
  this.renderStart(b);
};
Entry.Utils.inherit(Entry.Field, Entry.FieldText);
(function(a) {
  a.renderStart = function() {
    this.svgGroup && $(this.svgGroup).remove();
    this.svgGroup = this._blockView.contentSvgGroup.elem("g");
    this._text = this._text.replace(/(\r\n|\n|\r)/gm, " ");
    this.textElement = this.svgGroup.elem("text").attr({style:"white-space: pre;", "font-size":this._fontSize + "px", "font-family":"nanumBarunRegular", "class":"dragNone", fill:this._color});
    this.textElement.textContent = this._text;
    var a = 0, c = this.textElement.getBoundingClientRect();
    "center" == this._align && (a = -c.width / 2);
    this.textElement.attr({x:a, y:.25 * c.height});
    this.box.set({x:0, y:0, width:c.width, height:c.height});
  };
})(Entry.FieldText.prototype);
Entry.FieldTextInput = function(a, b, c) {
  this._blockView = b;
  this._block = b.block;
  this.box = new Entry.BoxModel;
  this.svgGroup = null;
  this.position = a.position;
  this._contents = a;
  this._index = c;
  this.value = this.getValue() || "";
  this._CONTENT_HEIGHT = this.getContentHeight();
  this.renderStart();
};
Entry.Utils.inherit(Entry.Field, Entry.FieldTextInput);
(function(a) {
  a.renderStart = function() {
    this.svgGroup && $(this.svgGroup).remove();
    this.svgGroup = this._blockView.contentSvgGroup.elem("g");
    this.svgGroup.attr({class:"entry-input-field"});
    this.textElement = this.svgGroup.elem("text", {x:3, y:4, "font-size":"12px"});
    this._setTextValue();
    var a = this.getTextWidth(), c = this._CONTENT_HEIGHT;
    this._header = this.svgGroup.elem("rect", {width:a, height:c, y:(this.position && this.position.y ? this.position.y : 0) - c / 2, rx:3, ry:3, fill:"#fff", "fill-opacity":.4});
    this.svgGroup.appendChild(this.textElement);
    this._bindRenderOptions();
    this.box.set({x:0, y:0, width:a, height:c});
  };
  a.renderOptions = function() {
    var a = this;
    this._attachDisposeEvent(function() {
      a.applyValue();
      a.destroyOption();
    });
    this.optionGroup = Entry.Dom("input", {class:"entry-widget-input-field", parent:$("body")});
    this.optionGroup.val(this.getValue());
    this.optionGroup.on("mousedown", function(a) {
      a.stopPropagation();
    });
    this.optionGroup.on("keyup", function(b) {
      var c = b.keyCode || b.which;
      a.applyValue(b);
      -1 < [13, 27].indexOf(c) && a.destroyOption();
    });
    var c = this.getAbsolutePosFromDocument();
    c.y -= this.box.height / 2;
    this.optionGroup.css({height:this._CONTENT_HEIGHT, left:c.x, top:c.y, width:a.box.width});
    this.optionGroup.focus();
    c = this.optionGroup[0];
    c.setSelectionRange(0, c.value.length, "backward");
  };
  a.applyValue = function(a) {
    a = this.optionGroup.val();
    this.setValue(a);
    this._setTextValue();
    this.resize();
  };
  a.resize = function() {
    var a = this.getTextWidth();
    this._header.attr({width:a});
    this.optionGroup.css({width:a});
    this.box.set({width:a});
    this._blockView.dAlignContent();
  };
  a.getTextWidth = function() {
    return this.textElement.getBoundingClientRect().width + 6 + 2;
  };
  a._setTextValue = function() {
    this.textElement.textContent = this._convert(this.getValue(), this.getValue());
  };
})(Entry.FieldTextInput.prototype);
Entry.GlobalSvg = {};
(function(a) {
  a.DONE = 0;
  a._inited = !1;
  a.REMOVE = 1;
  a.RETURN = 2;
  a.createDom = function() {
    if (!this.inited) {
      $("#globalSvgSurface").remove();
      $("#globalSvg").remove();
      var a = $("body");
      this._container = Entry.Dom("div", {classes:["globalSvgSurface", "entryRemove"], id:"globalSvgSurface", parent:a});
      this.svgDom = Entry.Dom($('<svg id="globalSvg" width="10" height="10"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent:this._container});
      this.svg = Entry.SVG("globalSvg");
      this.top = this.left = 0;
      this._inited = !0;
    }
  };
  a.setView = function(a, c) {
    if (a != this._view && !a.block.isReadOnly() && a.movable) {
      return this._view = a, this._mode = c, c !== Entry.Workspace.MODE_VIMBOARD && a.set({visible:!1}), this.draw(), this.show(), this.align(), this.position(), !0;
    }
  };
  a.draw = function() {
    var a = this._view;
    this._svg && this.remove();
    var c = this._mode == Entry.Workspace.MODE_VIMBOARD, d = a.svgGroup.getBBox();
    this.svgDom.attr({width:Math.round(d.width + 4) + "px", height:Math.round(d.height + 4) + "px"});
    this.svgGroup = Entry.SVG.createElement(a.svgGroup.cloneNode(!0), {opacity:1});
    this.svg.appendChild(this.svgGroup);
    c && (a = $(this.svgGroup), a.find("g").css({filter:"none"}), a.find("path, rect, polygon").velocity({opacity:0}, {duration:500}), a.find("text").velocity({fill:"#000000"}, {duration:530}));
  };
  a.remove = function() {
    this.svgGroup && (this.svgGroup.remove(), delete this.svgGroup, delete this._view, delete this._offsetX, delete this._offsetY, delete this._startX, delete this._startY, this.hide());
  };
  a.align = function() {
    var a = this._view.getSkeleton().box(this._view).offsetX || 0, c = this._view.getSkeleton().box(this._view).offsetY || 0, a = -1 * a + 1, c = -1 * c + 1;
    this._offsetX = a;
    this._offsetY = c;
    this.svgGroup.attr({transform:"translate(" + a + "," + c + ")"});
  };
  a.show = function() {
    this._container.removeClass("entryRemove");
  };
  a.hide = function() {
    this._container.addClass("entryRemove");
  };
  a.position = function() {
    var a = this._view;
    if (a) {
      var c = a.getAbsoluteCoordinate(), a = a.getBoard().offset();
      this.left = c.x + a.left - this._offsetX;
      this.top = c.y + a.top - this._offsetY;
      this._applyDomPos(this.left, this.top);
    }
  };
  a.adjust = function(a, c) {
    a = this.left + (a || 0);
    c = this.top + (c || 0);
    if (a !== this.left || c !== this.top) {
      this.left = a, this.top = c, this._applyDomPos(this.left, this.top);
    }
  };
  a._applyDomPos = function(a, c) {
    this.svgDom.css({transform:"translate3d(" + a + "px," + c + "px, 0px)"});
  };
  a.terminateDrag = function(a) {
    var b = Entry.mouseCoordinate, d = a.getBoard(), e = d.workspace.blockMenu, f = e.offset().left, g = e.offset().top, h = e.visible ? e.svgDom.width() : 0;
    return b.y > d.offset().top - 20 && b.x > f + h ? this.DONE : b.y > g && b.x > f && e.visible ? a.block.isDeletable() ? this.REMOVE : this.RETURN : this.RETURN;
  };
  a.addControl = function(a) {
    this.onMouseDown.apply(this, arguments);
  };
  a.onMouseDown = function(a) {
    function b(a) {
      var b = a.pageX;
      a = a.pageY;
      var c = e.left + (b - e._startX), d = e.top + (a - e._startY);
      e._applyDomPos(c, d);
      e._startX = b;
      e._startY = a;
      e.left = c;
      e.top = d;
    }
    function d(a) {
      $(document).unbind(".block");
    }
    this._startY = a.pageY;
    var e = this;
    a.stopPropagation();
    a.preventDefault();
    var f = $(document);
    f.bind("mousemove.block", b);
    f.bind("mouseup.block", d);
    f.bind("touchmove.block", b);
    f.bind("touchend.block", d);
    this._startX = a.pageX;
    this._startY = a.pageY;
  };
})(Entry.GlobalSvg);
Entry.Mutator = function() {
};
(function(a) {
  a.mutate = function(a, c) {
    a = Entry.block[a];
    void 0 === a.changeEvent && (a.changeEvent = new Entry.Event);
    a.template = c.template;
    a.params = c.params;
    a.changeEvent.notify(1);
  };
})(Entry.Mutator);
(function(a) {
})(Entry.Mutator.prototype);
Entry.RenderView = function(a, b, c) {
  this._align = b || "CENTER";
  a = "string" === typeof a ? $("#" + a) : $(a);
  if ("DIV" !== a.prop("tagName")) {
    return console.error("Dom is not div element");
  }
  this.view = a;
  this.viewOnly = !0;
  this.suffix = "renderView";
  this._scale = void 0 === c ? 1 : c;
  this.disableMouseEvent = this.visible = !0;
  this._svgId = "renderView_" + (new Date).getTime();
  this._generateView();
  this.offset = this.svgDom.offset();
  this._minBlockOffsetX = 0;
  this._setSize();
  this.svg = Entry.SVG(this._svgId, this.svgDom[0]);
  Entry.Utils.addFilters(this.svg, this.suffix);
  this.svg && (this.svgGroup = this.svg.elem("g"), this.svgThreadGroup = this.svgGroup.elem("g"), this.svgThreadGroup.board = this, this.svgBlockGroup = this.svgGroup.elem("g"), this.svgBlockGroup.board = this);
};
(function(a) {
  a.schema = {code:null, dragBlock:null, closeBlock:null, selectedBlockView:null};
  a._generateView = function() {
    this.renderViewContainer = Entry.Dom("div", {"class":"renderViewContainer", parent:this.view});
    this.svgDom = Entry.Dom($('<svg id="' + this._svgId + '" class="renderView" version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent:this.renderViewContainer});
  };
  a.changeCode = function(a, c) {
    if (!(a instanceof Entry.Code)) {
      return console.error("You must inject code instance");
    }
    this.code = a;
    this.svg || (this.svg = Entry.SVG(this._svgId, this.svgDom[0]), this.svgGroup = this.svg.elem("g"), this.svgThreadGroup = this.svgGroup.elem("g"), this.svgThreadGroup.board = this, this.svgBlockGroup = this.svgGroup.elem("g"), this.svgBlockGroup.board = this);
    a.createView(this);
    this.align();
    this.resize(c);
  };
  a.align = function() {
    var a = this.code.getThreads();
    if (a && 0 !== a.length) {
      for (var c = 0, d = this._getHorizontalPadding(), e = 0, f = a.length;e < f;e++) {
        var g = a[e].getFirstBlock().view, h = g.svgGroup.getBBox().height, k = 0, l = $(g.svgGroup).find(".extension");
        if (l) {
          for (var n = 0;n < l.length;n++) {
            var m = parseFloat(l[n].getAttribute("x")), k = Math.min(k, m);
          }
        }
        this._minBlockOffsetX = Math.min(this._minBlockOffsetX, g.offsetX);
        g._moveTo(d - k - g.offsetX, c - g.offsetY, !1);
        c += h + 15;
      }
      this._setSize();
    }
  };
  a.hide = function() {
    this.view.addClass("entryRemove");
  };
  a.show = function() {
    this.view.removeClass("entryRemove");
  };
  a._setSize = function() {
    this.svgDom && (this._svgWidth = this.svgDom.width(), this.offset = this.svgDom.offset());
    this.svgGroup && (this._bBox = this.svgGroup.getBBox());
  };
  a.bindCodeView = function(a) {
    this.svgBlockGroup.remove();
    this.svgThreadGroup.remove();
    this.svgBlockGroup = a.svgBlockGroup;
    this.svgThreadGroup = a.svgThreadGroup;
    this.svgGroup.appendChild(this.svgThreadGroup);
    this.svgGroup.appendChild(this.svgBlockGroup);
  };
  a.resize = function(a) {
    function b() {
      this._setSize();
      var a = Math.round(this._bBox.width), b = Math.round(this._bBox.height);
      0 !== a && 0 !== b && ($(this.svg).css({width:a + this._getHorizontalPadding() - this._minBlockOffsetX, height:b + 5}), setTimeout(function() {
        var c = this.svgGroup.getBBox();
        Math.round(c.width) === a && Math.round(c.height) === b || this.resize();
      }.bind(this), 1E3));
    }
    this.svg && this._bBox && (a ? b.call(this) : setTimeout(function() {
      b.call(this);
    }.bind(this), 0));
  };
  a.setDomSize = function(a) {
    this.svgBlockGroup && this.svgBlockGroup.attr("transform", "scale(1)");
    this.code.view.reDraw();
    this.align();
    this.resize(a);
    1 !== this._scale && window.setTimeout(function() {
      this.svgBlockGroup.attr("transform", "scale(%scale)".replace("%scale", this._scale));
      this.align();
      this.resize();
    }.bind(this), 0);
  };
  a._getHorizontalPadding = function() {
    var a = {LEFT:20, LEFT_MOST:0}[this._align];
    return void 0 !== a ? a : this.svgDom.width() / 2;
  };
})(Entry.RenderView.prototype);
Entry.skinContainer = {_skins:{}};
(function(a) {
  a.skinSchema = {type:"", condition:[]};
  a.loadSkins = function(a) {
    a.map(this.addSkin.bind(this));
  };
  a.addSkin = function(a) {
    var b = function() {
    };
    b.prototype = Entry.block[a.type];
    var b = new b, d;
    for (d in a) {
      b[d] = a[d];
    }
    this._skins[a.type] || (this._skins[a.type] = []);
    this._skins[a.type].push(b);
  };
  a.getSkin = function(a) {
    if (this._skins[a.type]) {
      for (var b = this._skins[a.type], d = 0;d < b.length;d++) {
        var e = b[d];
        if (!e.conditions || !e.conditions.length) {
          return e;
        }
        for (var f = 0;f < e.conditions.length;f++) {
          var g = e.conditions[f];
          if (a.getDataByPointer(g.pointer) !== g.value) {
            break;
          }
          if (f === e.conditions.length - 1) {
            return e;
          }
        }
      }
    }
    return Entry.block[a.type];
  };
})(Entry.skinContainer);
Entry.ThreadView = function(a, b) {
  Entry.Model(this, !1);
  this.thread = a;
  this.svgGroup = b.svgThreadGroup.elem("g");
  this.parent = b;
  this._hasGuide = !1;
};
(function(a) {
  a.schema = {height:0, zIndex:0};
  a.destroy = function() {
    this.svgGroup.remove();
  };
  a.setParent = function(a) {
    this.parent = a;
  };
  a.getParent = function() {
    return this.parent;
  };
  a.renderText = function() {
    for (var a = this.thread.getBlocks(), c = 0;c < a.length;c++) {
      a[c].view.renderText();
    }
  };
  a.renderBlock = function() {
    for (var a = this.thread.getBlocks(), c = 0;c < a.length;c++) {
      a[c].view.renderBlock();
    }
  };
  a.requestAbsoluteCoordinate = function(a) {
    var b = this.thread.getBlocks(), d = b.shift(), e = {x:0, y:0};
    for (this.parent instanceof Entry.Board || this.parent instanceof Entry.BlockMenu || (e = this.parent.requestAbsoluteCoordinate());d && d.view !== a && d.view;) {
      d = d.view, e.x += d.x + d.magnet.next.x, e.y += d.y + d.magnet.next.y, d = b.shift();
    }
    return e;
  };
  a.requestPartHeight = function(a, c) {
    c = this.thread.getBlocks();
    for (var b = c.pop(), e = a ? a.magnet.next ? a.magnet.next.y : a.height : 0;b && b.view !== a && b.view;) {
      b = b.view, e = b.magnet.next ? e + b.magnet.next.y : e + b.height, b.dragMode === Entry.DRAG_MODE_DRAG && (e = 0), b = c.pop();
    }
    return e;
  };
  a.dominate = function() {
    !this._hasGuide && this.parent.dominate(this.thread);
  };
  a.isGlobal = function() {
    return this.parent instanceof Entry.Board;
  };
  a.reDraw = function() {
    for (var a = this.thread._data, c = a.length - 1;0 <= c;c--) {
      var d = a[c];
      d.view ? d.view.reDraw() : d.createView(this.thread._code.view.board);
    }
  };
  a.setZIndex = function(a) {
    this.set({zIndex:a});
  };
  a.setHasGuide = function(a) {
    this._hasGuide = a;
  };
})(Entry.ThreadView.prototype);
Entry.Vim = function(a, b) {
  a = "string" === typeof a ? $("#" + a) : $(a);
  if ("DIV" !== a.prop("tagName")) {
    return console.error("Dom is not div element");
  }
  this._parentView = a;
  this.createDom(a);
  this._parser = new Entry.Parser(null, null, this.codeMirror);
  Entry.addEventListener("hwChanged", function(a) {
    Entry.hw.hwModule ? (a = Entry.hw.hwModule.name, a = a[0].toUpperCase() + a.slice(1), "ArduinoExt" == a && (a = "Arduino"), Entry.Vim.PYTHON_IMPORT_HW = "\nimport " + a + "\n", Entry.Vim.INEDITABLE_LINE_PY = 4) : (Entry.Vim.PYTHON_IMPORT_HW = "", Entry.Vim.INEDITABLE_LINE_PY = 3);
  }.bind(this));
  Entry.Model(this, !1);
  window.eventset = [];
};
Entry.Vim.MAZE_MODE = 1;
Entry.Vim.WORKSPACE_MODE = 2;
Entry.Vim.TEXT_TYPE_JS = 0;
Entry.Vim.TEXT_TYPE_PY = 1;
Entry.Vim.PARSER_TYPE_JS_TO_BLOCK = 0;
Entry.Vim.PARSER_TYPE_PY_TO_BLOCK = 1;
Entry.Vim.PARSER_TYPE_BLOCK_TO_JS = 2;
Entry.Vim.PARSER_TYPE_BLOCK_TO_PY = 3;
Entry.Vim.INEDITABLE_LINE_PY = 3;
Entry.Vim.PYTHON_IMPORT_ENTRY = "import Entry";
Entry.Vim.PYTHON_IMPORT_HW = "";
(function(a) {
  a.createDom = function(a) {
    function b(a) {
      var b = e.getCodeToText(a.block, Entry.Parser.PARSE_BLOCK);
      e.codeMirror.display.dragFunctions.leave(a);
      var c = Entry.Utils.createMouseEvent("mousedown", a);
      e.codeMirror.display.scroller.dispatchEvent(c);
      var b = b.split("\n"), d = b.length - 1;
      b.forEach(function(a, b) {
        b != d && (a += "\n");
        e.codeMirror.replaceSelection(a);
        e.doc.getCursor();
      });
      a = Entry.Utils.createMouseEvent("mouseup", a);
      e.codeMirror.display.scroller.dispatchEvent(a);
    }
    function d(a) {
      e.codeMirror.display.dragFunctions.over(a);
    }
    var e;
    this.view = Entry.Dom("div", {parent:a, class:"entryVimBoard"});
    this.codeMirror = CodeMirror(this.view[0], {lineNumbers:!0, value:"", mode:{name:"javascript", globalVars:!0}, theme:"default", indentUnit:4, indentWithTabs:!0, styleActiveLine:!0, extraKeys:{"Ctrl-Space":"autocomplete", Tab:function(a) {
      var b = Array(a.getOption("indentUnit") + 1).join(" ");
      a.replaceSelection(b);
    }}, lint:!0, viewportMargin:10});
    var f = Entry.Utils.debounce(function() {
      Entry.isTextMode && this.codeMirror.showHint({completeSingle:!1});
    }.bind(this), 250);
    this.codeMirror.on("keydown", function(a, b) {
      Entry && Entry.keyPressed && Entry.keyPressed.notify(b, !0);
      1 === b.key.length && f();
    }.bind(this));
    this.codeMirror.on("keyup", function(a, b) {
      "Backspace" === b.key && f();
    }.bind(this));
    this.doc = this.codeMirror.getDoc();
    e = this;
    a = this.view[0];
    a.removeEventListener("dragEnd", b);
    a.removeEventListener("dragOver", d);
    a.addEventListener("dragEnd", b);
    a.addEventListener("dragOver", d);
  };
  a.hide = function() {
    this.view.addClass("entryRemove");
    this.view.remove();
  };
  a.show = function() {
    this.view.removeClass("entryRemove");
    this._parentView.append(this.view);
  };
  a.clearText = function() {
    this.codeMirror.setValue("");
  };
  a.textToCode = function(a) {
    a === Entry.Vim.TEXT_TYPE_JS ? (this._parserType = Entry.Vim.PARSER_TYPE_JS_TO_BLOCK, this._parser.setParser(this._mode, this._parserType, this.codeMirror)) : a === Entry.Vim.TEXT_TYPE_PY && (this._parserType = Entry.Vim.PARSER_TYPE_PY_TO_BLOCK, this._parser.setParser(this._mode, this._parserType, this.codeMirror));
    a = this.codeMirror.getValue();
    a = this._parser.parse(a);
    console.log("textToCode result", a);
    return a;
  };
  a.codeToText = function(a, c) {
    c && (this._mode = c.runType);
    var b = c.textType;
    this._oldParserType = c.textType;
    b === Entry.Vim.TEXT_TYPE_JS ? (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS, this._oldParserType != this._parserType && this._parser.setParser(this._mode, this._parserType, this.codeMirror), this._oldParserType = this._parserType) : b === Entry.Vim.TEXT_TYPE_PY && (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY, this._oldParserType != this._parserType && this._parser.setParser(this._mode, this._parserType, this.codeMirror), this._oldParserType = this._parserType);
    Entry.playground && (this._currentObject = Entry.playground.object);
    this._parser._hasDeclaration = !1;
    b == Entry.Vim.TEXT_TYPE_PY ? this._currentObject ? (c = "# " + this._currentObject.name + " \uc624\ube0c\uc81d\ud2b8\uc758 \ud30c\uc774\uc120 \ucf54\ub4dc", a = this._parser.parse(a, Entry.Parser.PARSE_GENERAL), b === Entry.Vim.TEXT_TYPE_PY && (a = c.concat("\n\n").concat(Entry.Vim.PYTHON_IMPORT_ENTRY).concat(Entry.Vim.PYTHON_IMPORT_HW).concat("\n\n").concat(a)), this.codeMirror.setValue(a), b == Entry.Vim.TEXT_TYPE_PY && this.codeMirror.getDoc().markText({line:0, ch:0}, {line:Entry.Vim.INEDITABLE_LINE_PY, 
    ch:0}, {readOnly:!0, inclusiveLeft:!0}), b = this.codeMirror.getDoc(), b.setCursor({line:b.lastLine() - 1})) : this.clearText() : b == Entry.Vim.TEXT_TYPE_JS && (a = this._parser.parse(a, Entry.Parser.PARSE_GENERAL), this.codeMirror.setValue(a), b = this.codeMirror.getDoc(), b.setCursor({line:b.lastLine() - 1}));
    Entry.isTextMode && (this._parser._onRunError = !1);
  };
  a.getCodeToText = function(a, c) {
    var b = this.workspace.oldTextType;
    b === Entry.Vim.TEXT_TYPE_JS ? (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS, this._parser.setParser(this._mode, this._parserType, this.codeMirror)) : b === Entry.Vim.TEXT_TYPE_PY && (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY, this._parser.setParser(this._mode, this._parserType, this.codeMirror));
    return c ? this._parser.parse(a, c) : this._parser.parse(a, Entry.Parser.PARSE_SYNTAX);
  };
  a.setParserAvailableCode = function(a, c) {
    this._parser.setAvailableCode(a, c);
  };
  a.getBlockSyntax = function(a) {
    var b = null, d = this.workspace.oldTextType;
    d === Entry.Vim.TEXT_TYPE_JS ? (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS, this._parser.setParser(this._mode, this._parserType, this.codeMirror)) : d === Entry.Vim.TEXT_TYPE_PY && (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY, this._parser.setParser(this._mode, this._parserType, this.codeMirror));
    this._parser && (b = this._parser._execParser.searchSyntax(a));
    return b;
  };
})(Entry.Vim.prototype);
Entry.Xml = {};
Entry.Xml.isTypeOf = function(a, b) {
  return b.getAttribute("type") == a;
};
Entry.Xml.getNextBlock = function(a) {
  a = a.childNodes;
  for (var b = 0;b < a.length;b++) {
    if ("NEXT" == a[b].tagName.toUpperCase()) {
      return a[b].children[0];
    }
  }
  return null;
};
Entry.Xml.getStatementBlock = function(a, b) {
  var c = b.getElementsByTagName("statement");
  if (!c.length) {
    return b;
  }
  for (var d in c) {
    if (c[d].getAttribute("name") == a) {
      return c[d].children[0];
    }
  }
  return null;
};
Entry.Xml.getParentLoop = function(a) {
  for (;;) {
    if (!a) {
      return null;
    }
    if ((a = a.parentNode) && "STATEMENT" == a.tagName.toUpperCase()) {
      return a.parentNode;
    }
    if (a) {
      a = a.parentNode;
    } else {
      return null;
    }
  }
};
Entry.Xml.getParentIterateLoop = function(a) {
  for (;;) {
    if (!a) {
      return null;
    }
    if ((a = a.parentNode) && a.getAttribute("type") && "REPEAT" == a.getAttribute("type").toUpperCase().substr(0, 6)) {
      return a;
    }
    if (!a) {
      return null;
    }
  }
};
Entry.Xml.getParentBlock = function(a) {
  return (a = a.parentNode) ? a.parentNode : null;
};
Entry.Xml.callReturn = function(a) {
  var b = Entry.Xml.getNextBlock(a);
  return b ? b : Entry.Xml.getParentLoop(a);
};
Entry.Xml.isRootBlock = function(a) {
};
Entry.Xml.getValue = function(a, b) {
  b = b.childNodes;
  if (!b.length) {
    return null;
  }
  for (var c in b) {
    if ("VALUE" == b[c].tagName.toUpperCase() && b[c].getAttribute("name") == a) {
      return b[c].children[0];
    }
  }
  return null;
};
Entry.Xml.getNumberValue = function(a, b, c) {
  c = c.childNodes;
  if (!c.length) {
    return null;
  }
  for (var d in c) {
    if (c[d].tagName && "VALUE" == c[d].tagName.toUpperCase() && c[d].getAttribute("name") == b) {
      return Number(Entry.Xml.operate(a, c[d].children[0]));
    }
  }
  return null;
};
Entry.Xml.getField = function(a, b) {
  b = b.childNodes;
  if (!b.length) {
    return null;
  }
  for (var c in b) {
    if (b[c].tagName && "FIELD" == b[c].tagName.toUpperCase() && b[c].getAttribute("name") == a) {
      return b[c].textContent;
    }
  }
};
Entry.Xml.getNumberField = function(a, b) {
  b = b.childNodes;
  if (!b.length) {
    return null;
  }
  for (var c in b) {
    if ("FIELD" == b[c].tagName.toUpperCase() && b[c].getAttribute("name") == a) {
      return Number(b[c].textContent);
    }
  }
};
Entry.Xml.getBooleanValue = function(a, b, c) {
  c = c.getElementsByTagName("value");
  if (!c.length) {
    return null;
  }
  for (var d in c) {
    if (c[d].getAttribute("name") == b) {
      return Entry.Xml.operate(a, c[d].children[0]);
    }
  }
  return null;
};
Entry.Xml.operate = function(a, b) {
  return Entry.block[b.getAttribute("type")](a, b);
};
Entry.Xml.cloneBlock = function(a, b, c) {
  var d = a.cloneNode();
  a.parentNode && "xml" != a.parentNode.tagName && Entry.Xml.cloneBlock(a.parentNode, d, "parent");
  for (var e = 0;e < a.childNodes.length;e++) {
    var f = a.childNodes[e];
    f instanceof Text ? d.textContent = f.textContent : "parent" == c ? d.appendChild(b) : d.appendChild(Entry.Xml.cloneBlock(f, d, "child"));
  }
  return d;
};
Entry.Youtube = function(a) {
  this.generateView(a);
};
p = Entry.Youtube.prototype;
p.init = function(a) {
  this.youtubeHash = a;
  this.generateView();
};
p.generateView = function(a) {
  var b = Entry.createElement("div");
  b.addClass("entryContainerMovieWorkspace");
  b.addClass("entryRemove");
  this.movieContainer = b;
  b = Entry.createElement("iframe");
  b.setAttribute("id", "youtubeIframe");
  b.setAttribute("allowfullscreen", "");
  b.setAttribute("frameborder", 0);
  b.setAttribute("src", "https://www.youtube.com/embed/" + a);
  this.movieFrame = b;
  this.movieContainer.appendChild(b);
};
p.getView = function() {
  return this.movieContainer;
};
p.resize = function() {
  var a = document.getElementsByClassName("propertyContent")[0], b = document.getElementById("youtubeIframe"), a = a.offsetWidth;
  b.width = a + "px";
  b.height = 9 * a / 16 + "px";
};

