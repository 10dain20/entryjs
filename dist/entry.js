/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/entry.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/class/container.js":
/*!********************************!*\
  !*** ./src/class/container.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Container handle all object in entry.
 */


/**
 * Class for a container.
 * This have view for objects.
 * @constructor
 */

Entry.Container = function () {
    /**
     * Array for entry objects
     * @type {Array.<Entry.EntryObject>}
     */
    this.objects_ = [];

    /**
     * Dictionary for caching images
     * @type {Dictionary.<createjs.Image}
     */
    this.cachedPicture = {};

    /**
     * variable for canvas input
     * @type {String}
     */
    this.inputValue = {};

    /**
     * object model store copied object by context menu
     * @type {object model}
     */
    this.copiedObject = null;

    /**
     * Array for storing current scene objects
     * @type {Array.<object model>}
     */
    this.currentObjects_ = null;
    this._extensionObjects = [];
    Entry.addEventListener('workspaceChangeMode', function () {
        var ws = Entry.getMainWS();
        if (ws && ws.getMode() === Entry.Workspace.MODE_VIMBOARD) {
            this.objects_.forEach(function (o) {
                o.script && o.script.destroyView();
            });
        }
    }.bind(this));

    Entry.addEventListener('run', this.disableSort.bind(this));
    Entry.addEventListener('stop', this.enableSort.bind(this));
};

/**
 * Control bar view generator.
 * @param {!Element} containerView containerView from Entry.
 * @param {?string} option for choose type of view.
 */
Entry.Container.prototype.generateView = function (containerView, option) {
    /** @type {!Element} */
    var that = this;
    this._view = containerView;
    this._view.addClass('entryContainer');
    this._view.addClass('entryContainerWorkspace');
    this._view.setAttribute('id', 'entryContainerWorkspaceId');

    var addButton = Entry.createElement('div');
    addButton.addClass('entryAddObjectWorkspace');
    addButton.innerHTML = Lang.Workspace.add_object;
    addButton.bindOnClick(function (e) {
        Entry.dispatchEvent('openSpriteManager');
    });
    //this._view.appendChild(addButton);

    var ulWrapper = Entry.createElement('div');
    var baseClass = 'entryContainerListWorkspaceWrapper';
    if (Entry.isForLecture) baseClass += ' lecture';
    ulWrapper.addClass(baseClass);

    Entry.Utils.disableContextmenu(ulWrapper);

    $(ulWrapper).bind('mousedown touchstart', function (e) {
        var longPressTimer = null;
        var doc = $(document);
        var eventType = e.type;
        var handled = false;

        if (Entry.Utils.isRightButton(e)) {
            that._rightClick(e);
            handled = true;
            return;
        }

        var mouseDownCoordinate = { x: e.clientX, y: e.clientY };

        if (eventType === 'touchstart' && !handled) {
            e.stopPropagation();
            e = Entry.Utils.convertMouseEvent(e);
            longPressTimer = setTimeout(function () {
                if (longPressTimer) {
                    longPressTimer = null;
                    that._rightClick(e);
                }
            }, 1000);
            doc.bind('mousemove.container touchmove.container', onMouseMove);
            doc.bind('mouseup.container touchend.container', onMouseUp);
        }

        function onMouseMove(e) {
            if (!mouseDownCoordinate) return;
            var diff = Math.sqrt(Math.pow(e.pageX - mouseDownCoordinate.x, 2) + Math.pow(e.pageY - mouseDownCoordinate.y, 2));
            if (diff > 5 && longPressTimer) {
                clearTimeout(longPressTimer);
                longPressTimer = null;
            }
        }

        function onMouseUp(e) {
            e.stopPropagation();
            doc.unbind('.container');
            if (longPressTimer) {
                clearTimeout(longPressTimer);
                longPressTimer = null;
            }
        }
    });

    this._view.appendChild(ulWrapper);

    var extensionListView = Entry.createElement('ul');
    ulWrapper.appendChild(extensionListView);
    this._extensionListView = Entry.Dom(extensionListView, {
        class: 'entryContainerExtensions'
    });

    var listView = Entry.createElement('ul');
    listView.addClass('entryContainerListWorkspace');
    ulWrapper.appendChild(listView);
    this.listView_ = listView;

    this.enableSort();
};
/**
 * enable sort.
 */
Entry.Container.prototype.enableSort = function () {
    var view = this.listView_;
    $(view).sortable({
        start: function start(event, ui) {
            ui.item.data('start_pos', ui.item.index());
        },
        stop: function stop(event, ui) {
            Entry.container.moveElement(ui.item.data('start_pos'), ui.item.index());
        },
        axis: 'y',
        cancel: 'input.selectedEditingObject'
    });
};

/**
 * disable sort.
 */
Entry.Container.prototype.disableSort = function () {
    var view = this.listView_;
    $(view).sortable('destroy');
};

/**
 * update list view to sort item.
 */
Entry.Container.prototype.updateListView = function () {
    if (!this.listView_) {
        return;
    }

    var view = this.listView_;

    while (view.hasChildNodes()) {
        view.removeChild(view.lastChild);
    }

    var fragment = document.createDocumentFragment();

    var objs = this.getCurrentObjects().slice();

    var ret = objs.filter(function (o) {
        return o.index !== undefined;
    });

    if (ret.length === objs.length) {
        objs = objs.sort(function (a, b) {
            return a.index - b.index;
        });
    }

    objs.forEach(function (obj) {
        !obj.view_ && obj.generateView();
        fragment.appendChild(obj.view_);
    });

    view.appendChild(fragment);
    Entry.stage.sortZorder();
    return true;
};

/**
 * Set objects
 * @param {!Array.<object model>} objectModels
 */
Entry.Container.prototype.setObjects = function (objectModels) {
    for (var i in objectModels) {
        var object = new Entry.EntryObject(objectModels[i]);
        this.objects_.push(object);
    }
    this.updateObjectsOrder();
    this.updateListView();
    Entry.variableContainer.updateViews();
    var type = Entry.type;
    if (type == 'workspace' || type == 'phone') {
        var target = this.getCurrentObjects()[0];
        target && this.selectObject(target.id);
    }
};

/**
 * get Pictures element
 * @param {!String} pictureId
 */
Entry.Container.prototype.getPictureElement = function (pictureId, objectId) {
    var object = this.getObject(objectId);
    var picture = object.getPicture(pictureId);
    if (picture) return picture.view;else throw new Error('No picture found');
};
/**
 * Set Pictures
 * @param {!Object picture} picture
 */
Entry.Container.prototype.setPicture = function (picture) {
    var object = this.getObject(picture.objectId);
    for (var j in object.pictures) {
        if (picture.id === object.pictures[j].id) {
            var picture_ = {};
            picture_.dimension = picture.dimension;
            picture_.id = picture.id;
            picture_.filename = picture.filename;
            picture_.fileurl = picture.fileurl;
            picture_.name = picture.name;
            picture_.view = object.pictures[j].view;
            object.pictures[j] = picture_;
            return;
        }
    }
    throw new Error('No picture found');
};

/**
 * Set Pictures
 * @param {!String} pictureId
 */
Entry.Container.prototype.selectPicture = function (pictureId, objectId) {
    var object = this.getObject(objectId);
    var picture_ = object.getPicture(pictureId);
    if (picture_) {
        object.selectedPicture = picture_;
        object.entity.setImage(picture_);
        object.updateThumbnailView();
        return object.id;
    }
    throw new Error('No picture found');
};

/**
 * Add object
 * @param {!object model} objectModel
 * @param {?number} index exist when user add object
 * @return {Entry.EntryObject}
 */
Entry.Container.prototype.addObject = function (objectModel, index, isNotRender) {
    var object = new Entry.EntryObject(objectModel);
    object.name = Entry.getOrderedName(object.name, this.objects_);

    if (Entry.stateManager) {
        Entry.stateManager.addCommand('add object', this, this.removeObject, object);
    }

    object.scene = object.scene || Entry.scene.selectedScene;

    var isBackground = objectModel.sprite.category;
    isBackground = isBackground && isBackground.main == 'background';

    if (typeof index == 'number') {
        if (isBackground) {
            object.setLock(true);
            this.objects_.push(object);
        } else this.objects_.splice(index, 0, object);
    } else if (isBackground) this.objects_.push(object);else this.objects_.unshift(object);

    if (!isNotRender) {
        object.generateView();
        this.setCurrentObjects();
        this.selectObject(object.id);
        this.updateObjectsOrder();
        this.updateListView();
        Entry.variableContainer.updateViews();
    }

    return new Entry.State(this, this.removeObject, object);
};

Entry.Container.prototype.renderObject = function (object) {
    object.generateView();
    this.setCurrentObjects();
    this.selectObject(object.id);
};

Entry.Container.prototype.addExtension = function (obj) {
    this._extensionObjects.push(obj);
    if (this._extensionListView) this._extensionListView.append(obj.renderView());
    return obj;
};

Entry.Container.prototype.removeExtension = function (obj) {
    if (!obj) return;

    var extensions = this._extensionObjects;
    var index = extensions.indexOf(obj);
    if (index > -1) extensions.splice(index, 1);

    obj.destroy && obj.destroy();
};

/**
 * Add Clone object
 * @param {!Entry.EntryObject} object
 */
Entry.Container.prototype.addCloneObject = function (object, scene, isNotRender) {
    var json = object.toJSON(true);

    json.script = change('sounds', object, json);
    json.script = change('pictures', object, json);

    Entry.variableContainer.addCloneLocalVariables({
        objectId: object.id,
        newObjectId: json.id,
        json: json
    });
    json.scene = scene || Entry.scene.selectedScene;
    this.addObject(json, null, isNotRender);

    return this.getObject(json.id);

    function change(keyName, object, jsonData) {
        var target = jsonData.sprite[keyName];
        var script = jsonData.script;
        (object[keyName] || []).forEach(function (value, index) {
            script = script.replace(new RegExp(value.id, 'g'), target[index].id);
        });
        return script;
    }
};

/**
 * Delete object
 * @param {!Entry.EntryObject} object
 * @return {Entry.State}
 */
Entry.Container.prototype.removeObject = function (object, isPass) {
    var objects = this.objects_;

    var index = objects.indexOf(object);
    var objectJSON = object.toJSON();
    if (Entry.stateManager) {
        Entry.stateManager.addCommand('remove object', this, this.addObject, objectJSON, index);
    }
    var state = new Entry.State(this.addObject, objectJSON, index);

    object.destroy();
    objects.splice(index, 1);
    Entry.variableContainer.removeLocalVariables(object.id);

    if (isPass) {
        return state;
    }

    this.setCurrentObjects();
    Entry.stage.sortZorder();
    var currentObjects = this.getCurrentObjects();
    if (currentObjects.length) this.selectObject(currentObjects[0].id);else {
        this.selectObject();
        Entry.playground.flushPlayground();
    }

    Entry.toast.success(Lang.Workspace.remove_object, object.name + ' ' + Lang.Workspace.remove_object_msg);

    Entry.playground.reloadPlayground();
    return state;
};

/**
 * Select object
 * @param {string} objectId
 */
Entry.Container.prototype.selectObject = function (objectId, changeScene) {
    var object = this.getObject(objectId);
    var workspace = Entry.getMainWS();

    if (changeScene && object) Entry.scene.selectScene(object.scene);

    var className = 'selectedObject';
    this.mapObjectOnScene(function (o) {
        !o.view_ && o.generateView && o.generateView();
        var selected = o === object;
        var view = o.view_;
        if (selected) view && view.addClass(className);else view && view.removeClass(className);

        o.isSelected_ = selected;
    });

    if (object) {
        if (workspace && workspace.vimBoard && Entry.isTextMode) {
            var sObject = workspace.vimBoard._currentObject;
            var parser = workspace.vimBoard._parser;
            if (sObject && !this.getObject(sObject.id)) {} else if (parser && parser._onError) {
                if (sObject && object.id != sObject.id) {
                    if (!Entry.scene.isSceneCloning) {
                        try {
                            workspace._syncTextCode();
                        } catch (e) {}
                        if (parser && !parser._onError) {
                            Entry.container.selectObject(object.id, true);
                            return;
                        } else {
                            Entry.container.selectObject(sObject.id, true);
                            return;
                        }
                    } else {
                        Entry.container.selectObject(sObject.id);
                        return;
                    }
                }
            } else {
                if (sObject && object.id != sObject.id) {
                    if (!Entry.scene.isSceneCloning) {
                        try {
                            workspace._syncTextCode();
                        } catch (e) {}
                        if (parser && parser._onError) {
                            Entry.container.selectObject(sObject.id, true);
                            return;
                        }
                    } else {
                        Entry.container.selectObject(sObject.id);
                        return;
                    }
                }
            }
        }
    } else {
        workspace && workspace.vimBoard && workspace.vimBoard.clearText();
    }

    if (Entry.playground) Entry.playground.injectObject(object);
    if (Entry.type != 'minimize' && Entry.engine.isState('stop')) Entry.stage.selectObject(object);
};

/**
 * Get all objects
 */
Entry.Container.prototype.getAllObjects = function () {
    return this.objects_;
};

/**
 * Object Getter
 * @param {string} objectId
 * @return {Entry.EntryObject}
 */
Entry.Container.prototype.getObject = function (objectId) {
    if (!objectId && Entry.playground && Entry.playground.object) objectId = Entry.playground.object.id;
    var length = this.objects_.length;
    for (var i = 0; i < length; i++) {
        var object = this.objects_[i];
        if (object.id == objectId) return object;
    }
};

/**
 * Entity Getter
 * @param {string} objectId
 * @return {Entry.EntityObject}
 */
Entry.Container.prototype.getEntity = function (objectId) {
    var object = this.getObject(objectId);
    if (!object) {
        Entry.toast.alert(Lang.Msgs.runtime_error, Lang.Workspace.object_not_found, true);
        return;
    }
    return object.entity;
};

/**
 * get variable on canvas
 * @return {Entry.Variable}
 */
Entry.Container.prototype.getVariable = function (variableId) {
    for (var i = 0; i < this.variables_.length; i++) {
        var variable = this.variables_[i];
        if (variable.getId() == variableId) return variable;
        if (variable.getName() == variableId) return variable;
    }
};

/**
 * Move object in objects_
 * this method is for sortable
 * @param {!number} start
 * @param {!number} end
 * @param {?boolean} isCallFromState
 * @return {Entry.State}
 */
Entry.Container.prototype.moveElement = function (start, end, isCallFromState) {
    var startIndex, endIndex, objs;
    objs = this.getCurrentObjects();
    startIndex = this.getAllObjects().indexOf(objs[start]);
    endIndex = this.getAllObjects().indexOf(objs[end]);
    if (!isCallFromState && Entry.stateManager) Entry.stateManager.addCommand('reorder object', Entry.container, Entry.container.moveElement, endIndex, startIndex, true);

    this.objects_.splice(endIndex, 0, this.objects_.splice(startIndex, 1)[0]);
    this.setCurrentObjects();
    Entry.container.updateListView();
    Entry.requestUpdate = true;
    return new Entry.State(Entry.container, Entry.container.moveElement, endIndex, startIndex, true);
};

/**
 * generate list for blockly dropdown dynamic
 * @param {string} menuName
 */
Entry.Container.prototype.getDropdownList = function (menuName, object) {
    var result = [];
    switch (menuName) {
        case 'sprites':
            var objs = this.getCurrentObjects();
            var length = objs.length;
            for (var i = 0; i < length; i++) {
                var object = objs[i];
                result.push([object.name, object.id]);
            }
            break;
        case 'spritesWithMouse':
            var objs = this.getCurrentObjects();
            var length = objs.length;
            for (var i = 0; i < length; i++) {
                var object = objs[i];
                result.push([object.name, object.id]);
            }
            result.push([Lang.Blocks.mouse_pointer, 'mouse']);
            break;
        case 'spritesWithSelf':
            var objs = this.getCurrentObjects();
            var length = objs.length;
            for (var i = 0; i < length; i++) {
                var object = objs[i];
                result.push([object.name, object.id]);
            }
            result.push([Lang.Blocks.self, 'self']);
            break;
        case 'collision':
            result.push([Lang.Blocks.mouse_pointer, 'mouse']);
            var objs = this.getCurrentObjects();
            var length = objs.length;
            for (var i = 0; i < length; i++) {
                var object = objs[i];
                result.push([object.name, object.id]);
            }
            result.push([Lang.Blocks.wall, 'wall']);
            result.push([Lang.Blocks.wall_up, 'wall_up']);
            result.push([Lang.Blocks.wall_down, 'wall_down']);
            result.push([Lang.Blocks.wall_right, 'wall_right']);
            result.push([Lang.Blocks.wall_left, 'wall_left']);
            break;
        case 'pictures':
            var object = Entry.playground.object || object;
            if (!object) break;
            var pictures = object.pictures || [];
            for (var i = 0; i < pictures.length; i++) {
                var picture = pictures[i];
                result.push([picture.name, picture.id]);
            }
            break;
        case 'messages':
            var messages = Entry.variableContainer.messages_;
            for (var i = 0; i < messages.length; i++) {
                var message = messages[i];
                result.push([message.name, message.id]);
            }
            break;
        case 'variables':
            var variables = Entry.variableContainer.variables_;
            for (var i = 0; i < variables.length; i++) {
                var variable = variables[i];

                if (variable.object_ && Entry.playground.object && variable.object_ != Entry.playground.object.id) continue;
                result.push([variable.getName(), variable.getId()]);
            }
            if (!result || result.length === 0) result.push([Lang.Blocks.VARIABLE_variable, 'null']);
            break;
        case 'lists':
            var object = Entry.playground.object || object;
            var lists = Entry.variableContainer.lists_;
            for (var i = 0; i < lists.length; i++) {
                var list = lists[i];
                if (list.object_ && object && list.object_ != object.id) continue;
                result.push([list.getName(), list.getId()]);
            }
            if (!result || result.length === 0) result.push([Lang.Blocks.VARIABLE_list, 'null']);
            break;
        case 'scenes':
            var scenes = Entry.scene.scenes_;
            for (var i = 0; i < scenes.length; i++) {
                var scene = scenes[i];
                result.push([scene.name, scene.id]);
            }
            break;
        case 'sounds':
            var object = Entry.playground.object || object;
            if (!object) break;
            var sounds = object.sounds || [];
            for (var i = 0; i < sounds.length; i++) {
                var sound = sounds[i];
                result.push([sound.name, sound.id]);
            }
            break;
        case 'clone':
            result.push([Lang.Blocks.oneself, 'self']);
            this.getCurrentObjects().forEach(function (o) {
                result.push([o.name, o.id]);
            });
            break;
        case 'objectSequence':
            var length = this.getCurrentObjects().length;
            for (var i = 0; i < length; i++) {
                result.push([(i + 1).toString(), i.toString()]);
            }
            break;
    }
    if (!result.length) {
        result = [[Lang.Blocks.no_target, 'null']];
    }
    return result;
};

/**
 * Initialize entities to state before run
 */
Entry.Container.prototype.clearRunningState = function () {
    this.mapObject(function (object) {
        object.clearExecutor();
    });
};

Entry.Container.prototype.clearRunningStateOnScene = function () {
    this.mapObjectOnScene(function (object) {
        object.clearExecutor();
    });
};

/**
 * Apply map function to objects. But this not replace object with returned one.
 * So giving map function don't have to return object.
 * And this support another arguments.
 * @param {!function} mapFunction
 * @param {} param
 */
Entry.Container.prototype.mapObject = function (mapFunction, param) {
    var length = this.objects_.length;
    var output = [];
    for (var i = 0; i < this._extensionObjects.length; i++) {
        var object = this._extensionObjects[i];
        output.push(mapFunction(object, param));
    }
    for (var i = 0; i < length; i++) {
        var object = this.objects_[i];
        output.push(mapFunction(object, param));
    }
    return output;
};

Entry.Container.prototype.mapObjectOnScene = function (mapFunction, param) {
    var objects = this.getCurrentObjects();
    var length = objects.length;
    var output = [];

    for (var i = 0; i < this._extensionObjects.length; i++) {
        var object = this._extensionObjects[i];
        output.push(mapFunction(object, param));
    }
    for (var i = 0; i < length; i++) {
        var object = objects[i];
        output.push(mapFunction(object, param));
    }
    return output;
};

/**
 * Apply map function to objects. But this not replace object with returned one.
 * So giving map function don't have to return object.
 * And this support another arguments.
 * @param {!function} mapFunction
 * @param {} param
 */
Entry.Container.prototype.mapEntity = function (mapFunction, param) {
    var length = this.objects_.length;
    var output = [];
    for (var i = 0; i < length; i++) {
        var entity = this.objects_[i].entity;
        output.push(mapFunction(entity, param));
    }
    return output;
};

Entry.Container.prototype.mapEntityOnScene = function (mapFunction, param) {
    var objects = this.getCurrentObjects();
    var length = objects.length;
    var output = [];
    for (var i = 0; i < length; i++) {
        var entity = objects[i].entity;
        output.push(mapFunction(entity, param));
    }
    return output;
};

/**
 * Apply map function to objects. But this not replace object with returned one.
 * So giving map function don't have to return object.
 * And this support another arguments.
 * This also apply to cloned entities.
 * @param {!function} mapFunction
 * @param {} param
 */
Entry.Container.prototype.mapEntityIncludeClone = function (mapFunction, param) {
    var objects = this.objects_;
    var length = objects.length;
    var output = [];
    for (var i = 0; i < length; i++) {
        var object = objects[i];
        var lenx = object.clonedEntities.length;
        output.push(mapFunction(object.entity, param));
        for (var j = 0; j < lenx; j++) {
            var entity = object.clonedEntities[j];
            if (entity && !entity.isStamp) output.push(mapFunction(entity, param));
        }
    }
    return output;
};

Entry.Container.prototype.mapEntityIncludeCloneOnScene = function (mapFunction, param) {
    var objects = this.getCurrentObjects();
    var length = objects.length;
    var output = [];
    for (var i = 0; i < this._extensionObjects.length; i++) {
        var object = this._extensionObjects[i];
        output.push(mapFunction(object.entity, param));
    }
    for (var i = 0; i < length; i++) {
        var object = objects[i];
        output.push(mapFunction(object.entity, param));

        object.getClonedEntities().forEach(function (entity) {
            output.push(mapFunction(entity, param));
        });
    }
    return output;
};

/**
 * Get cached picture
 * @param {!string} pictureId
 * @return {?createjs.Image}
 */
Entry.Container.prototype.getCachedPicture = function (pictureId) {
    Entry.assert(typeof pictureId == 'string', 'pictureId must be string');
    return this.cachedPicture[pictureId];
};

/**
 * cache picture
 * @param {!picture object} pictureModel
 */
Entry.Container.prototype.cachePicture = function (pictureId, image) {
    this.cachedPicture[pictureId] = image;
};

Entry.Container.prototype.unCachePictures = function (entity, pictures, isClone) {
    if (!entity || !pictures) return;
    var entityId;

    if (pictures.constructor !== Array) pictures = [pictures];

    if (entity.constructor === Entry.EntityObject) entityId = entity.id;else entityId = entity;

    pictures.forEach(function (p) {
        var id = p.id + (isClone ? '' : entityId);
        delete this.cachedPicture[id];
    }.bind(this));
};

/**
 * convert this object's data to JSON.
 * @return {JSON}
 */
Entry.Container.prototype.toJSON = function () {
    var json = [];
    var length = this.objects_.length;
    for (var i = 0; i < length; i++) {
        var object = this.objects_[i];
        json.push(object.toJSON());
    }
    return json;
};

/**
 * take snapshot of current objects sequence
 */
Entry.Container.prototype.takeSequenceSnapshot = function () {
    var length = this.objects_.length;
    var objects = this.objects_;
    for (var i = 0; i < length; i++) {
        objects[i].index = i;
    }
};

/**
 * load snapshot of original objects sequence
 */
Entry.Container.prototype.loadSequenceSnapshot = function () {
    var length = this.objects_.length;
    var arr = new Array(length);
    for (var i = 0; i < length; i++) {
        var object = this.objects_[i];
        var _index = object.index !== undefined ? object.index : i;
        arr[_index] = object;
        delete object.index;
    }
    this.objects_ = arr;
    this.setCurrentObjects();
    Entry.stage.sortZorder();
    this.updateListView();
};

/**
 * return canvas inputValue
 * @return {String}
 */
Entry.Container.prototype.getInputValue = function () {
    return this.inputValue.getValue();
};

/**
 * set canvas inputValue
 * @param {String} inputValue from canvas
 */
Entry.Container.prototype.setInputValue = function (inputValue) {
    if (this.inputValue.complete) return;
    if (!inputValue) this.inputValue.setValue(0);else this.inputValue.setValue(inputValue);
    Entry.stage.hideInputField();
    Entry.dispatchEvent('answerSubmitted');
    if (Entry.console) Entry.console.stopInput(inputValue);
    this.inputValue.complete = true;
};

Entry.Container.prototype.resetSceneDuringRun = function () {
    if (!Entry.engine.isState('run')) return;

    this.mapEntityOnScene(function (entity) {
        entity.reset();
    });
    this.clearRunningStateOnScene();
    Entry.stage.hideInputField();
};

Entry.Container.prototype.setCopiedObject = function (object) {
    this.copiedObject = object;
};

Entry.Container.prototype.updateObjectsOrder = function () {
    var scenes = Entry.scene.getScenes();

    var objs = [];

    for (var i = 0; i < scenes.length; i++) {
        var tempObjs = this.getSceneObjects(scenes[i]);
        for (var j = 0; j < tempObjs.length; j++) {
            objs.push(tempObjs[j]);
        }
    }
    this.objects_ = objs;
};

/**
 *  get objects list belonged to specific scene
 *  @param {scene model} scene
 *  @return {Array<object model>}
 */
Entry.Container.prototype.getSceneObjects = function (scene) {
    scene = scene || Entry.scene.selectedScene;
    var objects = [],
        containerObjects = this.getAllObjects();
    for (var i = 0; i < containerObjects.length; i++) {
        if (scene.id == containerObjects[i].scene.id) objects.push(containerObjects[i]);
    }
    return objects;
};

/**
 *  set objects list belonged to specific scene
 */
Entry.Container.prototype.setCurrentObjects = function () {
    this.currentObjects_ = this.getSceneObjects();
};

/**
 *  get objects list belonged to current scene
 */
Entry.Container.prototype.getCurrentObjects = function () {
    var objs = this.currentObjects_;
    if (!objs || objs.length === 0) this.setCurrentObjects();
    return this.currentObjects_ || [];
};

/**
 *  get project jsons in art_view for saving especially for art_viewcontroller
 *  @param {!resource project} project
 *  @return {entry project} project
 */
Entry.Container.prototype.getProjectWithJSON = function (project) {
    project.objects = Entry.container.toJSON();
    project.variables = Entry.variableContainer.getVariableJSON();
    project.messages = Entry.variableContainer.getMessageJSON();
    project.scenes = Entry.scene.toJSON();
    return project;
};

Entry.Container.prototype.blurAllInputs = function () {
    var objects = this.getSceneObjects();
    objects.map(function (obj) {
        var inputs = obj.view_.getElementsByTagName('input');
        for (var i = 0, len = inputs.length; i < len; i++) {
            inputs[i].blur();
        }
    });
};

Entry.Container.prototype.showProjectAnswer = function () {
    var answer = this.inputValue;
    if (!answer) return;
    answer.setVisible(true);
};

Entry.Container.prototype.hideProjectAnswer = function (removeBlock, notIncludeSelf) {
    var answer = this.inputValue;
    if (!answer || !answer.isVisible() || Entry.engine.isState('run')) return;

    var objects = Entry.container.getAllObjects();
    var answerTypes = ['ask_and_wait', 'get_canvas_input_value', 'set_visible_answer'];

    for (var i = 0, len = objects.length; i < len; i++) {
        var code = objects[i].script;
        for (var j = 0; j < answerTypes.length; j++) {
            var blocks = code.getBlockList(false, answerTypes[j]);
            if (notIncludeSelf) {
                var index = blocks.indexOf(removeBlock);
                if (index > -1) blocks.splice(index, 1);
            }
            if (blocks.length > 0) return;
        }
    }

    //answer related blocks not found
    //hide canvas answer view
    answer.setVisible(false);
};

Entry.Container.prototype.getView = function () {
    return this._view;
};

// dummy
Entry.Container.prototype.resize = function () {
    return;
};

Entry.Container.prototype._rightClick = function (e) {
    if (e.stopPropagation) e.stopPropagation();
    var options = [{
        text: Lang.Blocks.Paste_blocks,
        enable: !Entry.engine.isState('run') && !!Entry.container.copiedObject,
        callback: function callback() {
            if (Entry.container.copiedObject) Entry.container.addCloneObject(Entry.container.copiedObject);else Entry.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.object_not_found_for_paste);
        }
    }];

    Entry.ContextMenu.show(options, 'workspace-contextmenu', {
        x: e.clientX,
        y: e.clientY
    });
};

Entry.Container.prototype.removeFuncBlocks = function (functionType) {
    this.objects_.forEach(function (object) {
        object.script.removeBlocksByType(functionType);
    });
};

Entry.Container.prototype.clear = function () {
    this.objects_.map(function (o) {
        o.destroy();
    });
    this.objects_ = [];
    // INFO : clear 시도할때 _extensionObjects 초기화
    this._extensionObjects.map(function (o) {
        o.destroy();
    });
    this._extensionObjects = [];
    // TODO: clear 때 this._extensionListView 도 비워 줘야 하는지 확인 필요.
    Entry.playground.flushPlayground();
};

Entry.Container.prototype.selectNeighborObject = function (option) {
    var objects = this.getCurrentObjects();
    if (!objects || objects.length === 0) return;

    var currentIndex = objects.indexOf(Entry.playground.object);
    var maxLen = objects.length;
    switch (option) {
        case 'prev':
            if (--currentIndex < 0) currentIndex = objects.length - 1;
            break;
        case 'next':
            currentIndex = ++currentIndex % maxLen;
            break;
    }

    var object = objects[currentIndex];
    if (!object) return;

    Entry.container.selectObject(object.id);
};

Entry.Container.prototype.getObjectIndex = function (objectId) {
    return this.objects_.indexOf(this.getObject(objectId));
};

Entry.Container.prototype.getDom = function (query) {
    if (query.length >= 1) {
        switch (query.shift()) {
            case 'objectIndex':
                return this.objects_[query.shift()].getDom(query);
        }
    } else {}
};

Entry.Container.prototype.isSceneObjectsExist = function () {
    var objects = this.getSceneObjects();
    return !!(objects && objects.length);
};

Entry.Container.prototype.adjustClonedValues = function (oldIds, newIds) {
    if (!(oldIds && newIds)) return;
    var that = this;
    newIds.forEach(function (newId) {
        that.getObject(newId).script.getBlockList().forEach(function (b) {
            if (!b || !b.params) return;
            var changed = false;
            var ret = b.params.map(function (p) {
                if (typeof p !== 'string') return p;
                var index = oldIds.indexOf(p);
                if (index < 0) return p;
                changed = true;
                return newIds[index];
            });
            changed && b.set({ params: ret });
        });
    });
};

Entry.Container.prototype.getBlockList = function () {
    var blocks = [];

    this.objects_.forEach(function (o) {
        blocks = blocks.concat(o.script.getBlockList());
    });

    return blocks;
};

Entry.Container.prototype.scrollToObject = function (ObjectId) {
    var object = this.getObject(ObjectId);

    object.view_ && object.view_.scrollIntoView();
    document.body.scrollIntoView();
};

/***/ }),

/***/ "./src/class/dialog.js":
/*!*****************************!*\
  !*** ./src/class/dialog.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @fileoverview Show dialog on canvas
 */

/**
 * Construct dialog
 * @param {!Entry.EntityObject} entity parent entity
 * @param {!string} message to show on canvas
 * @param {!string} mode is 'speak' or 'think'
 * @constructor
 */

Entry.Dialog = function (entity, message, mode, isStamp) {
    if (entity.dialog) entity.dialog.remove();
    entity.dialog = this;
    this.parent = entity;
    this.padding = 10;
    this.border = 2;
    if (typeof message == 'number') message = String(message);
    if (Entry.console) Entry.console.print(message, mode);
    var messageChunks = message.match(/.{1,15}/g);
    message = messageChunks.join('\n');
    this.message_ = message;
    this.mode_ = mode;
    if (mode === 'speak' || mode === 'ask') this.generateSpeak();
    if (!isStamp) Entry.stage.loadDialog(this);
};

/**
 * Generate speak dialog box
 */
Entry.Dialog.prototype.generateSpeak = function () {
    /** @type {createjs.Container} Easel object */
    this.object = new createjs.Container();
    var text = new createjs.Text();
    text.font = "15px NanumGothic";
    text.textBaseline = "top";
    text.textAlign = "left";
    text.text = this.message_;
    var bound = text.getTransformedBounds();
    var height = bound.height;
    var width = bound.width >= 10 ? bound.width : 17;
    var rect = new createjs.Shape();
    rect.graphics.f("#f5f5f5").ss(2, 'round').s("#6FC0DD").rr(-this.padding, -this.padding, width + 2 * this.padding, height + 2 * this.padding, this.padding);
    this.object.addChild(rect);
    this.object.regX = width / 2;
    this.object.regY = height / 2;
    this.width = width;
    this.height = height;
    this.notch = this.createSpeakNotch('ne');
    this.update();
    this.object.addChild(this.notch);
    this.object.addChild(text);
    Entry.requestUpdate = true;
};

/**
 * Set position
 */
Entry.Dialog.prototype.update = function () {
    var bound = this.parent.object.getTransformedBounds();
    if (!bound && this.parent.type === 'textBox') {
        if (!this._isNoContentTried) {
            this.parent.setText(' ');
            bound = this.parent.object.getTransformedBounds();
            this._isNoContentTried = true;
        } else {
            delete this._isNoContentTried;
            return;
        }
    }
    var notchType = '';

    if (bound.y - 20 - this.border > -135) {
        this.object.y = Math.max(bound.y - this.height / 2 - 20 - this.padding, -135 + this.height / 2 + this.padding);
        notchType += 'n';
    } else {
        this.object.y = Math.min(bound.y + bound.height + this.height / 2 + 20 + this.padding, 135 - this.height / 2 - this.padding);
        notchType += 's';
    }
    if (bound.x + bound.width / 2 < 0) {
        this.object.x = Math.min(bound.x + bound.width + this.width / 2, 240 - this.width / 2 - this.padding);
        notchType += 'e';
    } else {
        this.object.x = Math.max(bound.x - this.width / 2, -240 + this.width / 2 + this.padding);
        notchType += 'w';
    }
    if (this.notch.type != notchType) {
        this.object.removeChild(this.notch);
        this.notch = this.createSpeakNotch(notchType);
        this.object.addChild(this.notch);
    }

    this._isNoContentTried && this.parent.setText('');
    Entry.requestUpdate = true;
};

/**
 * Generate speak notch
 * @param {!string} type can be 'ne', 'nw', 'se', 'sw'
 * @return {createjs.Shape}
 */
Entry.Dialog.prototype.createSpeakNotch = function (type) {
    var notch = new createjs.Shape();
    notch.type = type;
    if (type == 'ne') notch.graphics.f("#f5f5f5").ss(2, 'round').s("#6FC0DD").mt(0, this.height + this.padding - 1.5).lt(-10, this.height + this.padding + 20).lt(20, this.height + this.padding - 1.5);else if (type == 'nw') notch.graphics.f("#f5f5f5").ss(2, 'round').s("#6FC0DD").mt(this.width, this.height + this.padding - 1.5).lt(this.width + 10, this.height + this.padding + 20).lt(this.width - 20, this.height + this.padding - 1.5);else if (type == 'se') notch.graphics.f("#f5f5f5").ss(2, 'round').s("#6FC0DD").mt(0, -this.padding + 1.5).lt(-10, -this.padding - 20).lt(20, -this.padding + 1.5);else if (type == 'sw') notch.graphics.f("#f5f5f5").ss(2, 'round').s("#6FC0DD").mt(this.width, -this.padding + 1.5).lt(this.width + 10, -this.padding - 20).lt(this.width - 20, -this.padding + 1.5);
    return notch;
};

/**
 * Remove self
 */
Entry.Dialog.prototype.remove = function () {
    Entry.stage.unloadDialog(this);
    this.parent.dialog = null;
    Entry.requestUpdate = true;
};

/***/ }),

/***/ "./src/class/doneProject.js":
/*!**********************************!*\
  !*** ./src/class/doneProject.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ../util/static */ "./src/util/static.js");

Entry.DoneProject = function (id) {
    this.generateView(id);
};

var p = Entry.DoneProject.prototype;

p.init = function (projectId) {
    this.projectId = projectId;
};

p.generateView = function (doneProject) {

    // this.youtubeTab.removeClass('entryRemove');

    var doneContainer = Entry.createElement('div');
    doneContainer.addClass('entryContainerDoneWorkspace');
    // var parentcontainer = document.getElementById('entryContainerWorkspaceId');


    this.doneContainer = doneContainer;
    var view = this.doneContainer;
    // var width = parentcontainer.offsetWidth;


    var url = '/api/iframe/project/';
    var iframe = Entry.createElement('iframe');
    iframe.setAttribute("id", "doneProjectframe");
    iframe.setAttribute('frameborder', 0);
    iframe.setAttribute('src', url + doneProject);
    this.doneProjectFrame = iframe;
    this.doneContainer.appendChild(iframe);
    doneContainer.addClass('entryRemove');
};

p.getView = function () {
    return this.doneContainer;
};

p.resize = function () {
    var container = document.getElementById('entryContainerWorkspaceId');
    var iframe = document.getElementById('doneProjectframe');
    var w = this.doneContainer.offsetWidth;

    iframe.width = w + 'px';
    iframe.height = w * 9 / 16 + 'px';
};

/***/ }),

/***/ "./src/class/engine.js":
/*!*****************************!*\
  !*** ./src/class/engine.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*u
 * @fileoverview This manage control state and control bar.
 */


/**
 * Class for a engine.
 * This have view for control running state.
 * @constructor
 */

Entry.Engine = function () {
    this.state = 'stop';
    this.popup = null;
    this.isUpdating = true;
    this.speeds = [1, 15, 30, 45, 60];

    this._mouseMoved = false;

    this.attachKeyboardCapture();

    Entry.addEventListener('canvasClick', function (e) {
        Entry.engine.fireEvent('mouse_clicked');
    });
    Entry.addEventListener('canvasClickCanceled', function (e) {
        Entry.engine.fireEvent('mouse_click_cancled');
    });
    Entry.addEventListener('entityClick', function (entity) {
        Entry.engine.fireEventOnEntity('when_object_click', entity);
    });
    Entry.addEventListener('entityClickCanceled', function (entity) {
        Entry.engine.fireEventOnEntity('when_object_click_canceled', entity);
    });

    if (Entry.type != 'phone') {
        Entry.addEventListener('stageMouseMove', function (e) {
            this._mouseMoved = true;
        }.bind(this));
        Entry.addEventListener('stageMouseOut', function (e) {
            Entry.engine.hideMouseView();
        });
    }

    Entry.addEventListener('run', function () {
        $(window).bind('keydown', arrowHandler);
    });

    Entry.addEventListener('stop', function () {
        $(window).unbind('keydown', arrowHandler);
    });

    function arrowHandler(e) {
        var arrows = [37, 38, 39, 40, 32];
        var code = e.keyCode || e.which;
        var input = Entry.stage.inputField;
        if (code == 32 && input && input.hasFocus()) return;
        if (arrows.indexOf(code) > -1) e.preventDefault();
    }

    setInterval(function () {
        if (this._mouseMoved) {
            this.updateMouseView();
            this._mouseMoved = false;
        }
    }.bind(this), 100);

    Entry.message = new Entry.Event(window);
};

(function (p) {
    /**
     * Control bar view generator.
     * @param {!Element} controlView controlView from Entry.
     * @param {?string} option for choose type of view.
     */
    p.generateView = function (controlView, option) {
        if (!option || option == 'workspace') {
            /** @type {!Element} */
            this.view_ = controlView;
            this.view_.addClass('entryEngine_w');
            this.view_.addClass('entryEngineWorkspace_w');

            var speedButton = Entry.createElement('button');
            this.speedButton = speedButton;
            this.speedButton.addClass('entrySpeedButtonWorkspace', 'entryEngineTopWorkspace', 'entryEngineButtonWorkspace_w');
            this.view_.appendChild(this.speedButton);
            this.speedButton.bindOnClick(function (e) {
                Entry.engine.toggleSpeedPanel();
                speedButton.blur();
            });

            this.maximizeButton = Entry.createElement('button');
            this.maximizeButton.addClass('entryEngineButtonWorkspace_w', 'entryEngineTopWorkspace', 'entryMaximizeButtonWorkspace_w');
            this.view_.appendChild(this.maximizeButton);
            this.maximizeButton.bindOnClick(function (e) {
                Entry.engine.toggleFullScreen();
                this.blur();
            });

            var coordinateButton = Entry.createElement('button');
            this.coordinateButton = coordinateButton;
            this.coordinateButton.addClass('entryEngineButtonWorkspace_w', 'entryEngineTopWorkspace', 'entryCoordinateButtonWorkspace_w');
            this.view_.appendChild(this.coordinateButton);
            this.coordinateButton.bindOnClick(function (e) {
                if (this.hasClass('toggleOn')) this.removeClass('toggleOn');else this.addClass('toggleOn');
                coordinateButton.blur();
                this.blur();
                Entry.stage.toggleCoordinator();
            });

            this.addButton = Entry.createElement('button');
            this.addButton.addClass('entryEngineButtonWorkspace_w');
            this.addButton.addClass('entryAddButtonWorkspace_w');
            this.addButton.innerHTML = Lang.Workspace.add_object;
            this.addButton.bindOnClick(function (e) {
                Entry.dispatchEvent('openSpriteManager');
                this.blur();
            });
            if (!Entry.objectAddable) this.addButton.addClass('entryRemove');
            this.view_.appendChild(this.addButton);

            this.runButton = Entry.createElement('button');
            this.runButton.addClass('entryEngineButtonWorkspace_w');
            this.runButton.addClass('entryRunButtonWorkspace_w');
            this.runButton.innerHTML = Lang.Workspace.run;

            this.view_.appendChild(this.runButton);
            this.runButton.bindOnClick(function (e) {
                Entry.do('toggleRun', 'runButton');
            });
            this.runButton2 = Entry.createElement('button');
            this.runButton2.addClass('entryEngineButtonWorkspace_w');
            this.runButton2.addClass('entryRunButtonWorkspace_w2');

            this.view_.appendChild(this.runButton2);
            this.runButton2.bindOnClick(function (e) {
                Entry.engine.toggleRun();
            });

            this.stopButton = Entry.createElement('button');
            this.stopButton.addClass('entryEngineButtonWorkspace_w');
            this.stopButton.addClass('entryStopButtonWorkspace_w');
            this.stopButton.addClass('entryRemove');
            this.stopButton.innerHTML = Lang.Workspace.stop;
            this.view_.appendChild(this.stopButton);
            this.stopButton.bindOnClick(function (e) {
                Entry.do('toggleStop', 'stopButton');
            });

            this.stopButton2 = Entry.createElement('button');
            this.stopButton2.addClass('entryEngineButtonWorkspace_w');
            this.stopButton2.addClass('entryStopButtonWorkspace_w2');
            this.stopButton2.addClass('entryRemove');
            this.stopButton2.innerHTML = Lang.Workspace.stop;
            this.view_.appendChild(this.stopButton2);
            this.stopButton2.bindOnClick(function (e) {
                this.blur();
                Entry.engine.toggleStop();
            });

            this.pauseButton = Entry.createElement('button');
            this.pauseButton.addClass('entryEngineButtonWorkspace_w');
            this.pauseButton.addClass('entryPauseButtonWorkspace_w');
            this.pauseButton.addClass('entryRemove');
            this.view_.appendChild(this.pauseButton);
            this.pauseButton.bindOnClick(function (e) {
                this.blur();
                Entry.engine.togglePause();
            });

            this.pauseButtonFull = Entry.createElement('button');
            this.pauseButtonFull.addClass('entryEngineButtonWorkspace_w');
            this.pauseButtonFull.addClass('entryPauseButtonWorkspace_full');
            this.pauseButtonFull.addClass('entryRemove');
            this.view_.appendChild(this.pauseButtonFull);
            this.pauseButtonFull.bindOnClick(function (e) {
                this.blur();
                Entry.engine.togglePause();
            });

            this.mouseView = Entry.createElement('div');
            this.mouseView.addClass('entryMouseViewWorkspace_w');
            this.mouseView.addClass('entryRemove');
            this.view_.appendChild(this.mouseView);
        } else if (option == 'minimize') {
            /** @type {!Element} */
            this.view_ = controlView;
            this.view_.addClass('entryEngine');
            this.view_.addClass('entryEngineMinimize');

            this.maximizeButton = Entry.createElement('button');
            this.maximizeButton.addClass('entryEngineButtonMinimize');
            this.maximizeButton.addClass('entryMaximizeButtonMinimize');
            this.view_.appendChild(this.maximizeButton);
            this.maximizeButton.bindOnClick(function (e) {
                Entry.engine.toggleFullScreen();
            });

            this.coordinateButton = Entry.createElement('button');
            this.coordinateButton.addClass('entryEngineButtonMinimize');
            this.coordinateButton.addClass('entryCoordinateButtonMinimize');
            this.view_.appendChild(this.coordinateButton);
            this.coordinateButton.bindOnClick(function (e) {
                if (this.hasClass('toggleOn')) this.removeClass('toggleOn');else this.addClass('toggleOn');
                Entry.stage.toggleCoordinator();
            });

            this.stopButton = Entry.createElement('button');
            this.stopButton.addClass('entryEngineButtonMinimize');
            this.stopButton.addClass('entryStopButtonMinimize');
            this.stopButton.addClass('entryRemove');
            this.stopButton.innerHTML = Lang.Workspace.stop;
            this.view_.appendChild(this.stopButton);
            this.stopButton.bindOnClick(function (e) {
                this.blur();
                Entry.engine.toggleStop();
            });

            this.pauseButton = Entry.createElement('button');
            this.pauseButton.innerHTML = Lang.Workspace.pause;
            this.pauseButton.addClass('entryEngineButtonMinimize');
            this.pauseButton.addClass('entryPauseButtonMinimize');
            this.pauseButton.addClass('entryRemove');
            this.view_.appendChild(this.pauseButton);
            this.pauseButton.bindOnClick(function (e) {
                this.blur();
                Entry.engine.togglePause();
            });

            this.mouseView = Entry.createElement('div');
            this.mouseView.addClass('entryMouseViewMinimize');
            this.mouseView.addClass('entryRemove');
            this.view_.appendChild(this.mouseView);

            Entry.addEventListener("loadComplete", function () {
                this.runButton = Entry.Dom("div", {
                    class: "entryRunButtonBigMinimize",
                    parent: $("#entryCanvasWrapper")
                });

                this.runButton.bindOnClick(function (e) {
                    Entry.engine.toggleRun();
                });
            }.bind(this));
        } else if (option == 'phone') {
            this.view_ = controlView;
            this.view_.addClass('entryEngine', 'entryEnginePhone');

            this.headerView_ = Entry.createElement('div', 'entryEngineHeader');
            this.headerView_.addClass('entryEngineHeaderPhone');
            this.view_.appendChild(this.headerView_);

            this.maximizeButton = Entry.createElement('button');
            this.maximizeButton.addClass('entryEngineButtonPhone', 'entryMaximizeButtonPhone');
            this.headerView_.appendChild(this.maximizeButton);
            this.maximizeButton.bindOnClick(function (e) {
                Entry.engine.footerView_.addClass('entryRemove');
                Entry.engine.headerView_.addClass('entryRemove');
                Entry.launchFullScreen(Entry.engine.view_);
            });
            document.addEventListener('fullscreenchange', function (e) {
                Entry.engine.exitFullScreen();
            });
            document.addEventListener('webkitfullscreenchange', function (e) {
                Entry.engine.exitFullScreen();
            });
            document.addEventListener('mozfullscreenchange', function (e) {
                Entry.engine.exitFullScreen();
            });

            this.footerView_ = Entry.createElement('div', 'entryEngineFooter');
            this.footerView_.addClass('entryEngineFooterPhone');
            this.view_.appendChild(this.footerView_);

            this.runButton = Entry.createElement('button');
            this.runButton.addClass('entryEngineButtonPhone', 'entryRunButtonPhone');
            if (Entry.objectAddable) this.runButton.addClass('small');
            this.runButton.innerHTML = Lang.Workspace.run;

            this.footerView_.appendChild(this.runButton);
            this.runButton.bindOnClick(function (e) {
                Entry.engine.toggleRun();
            });

            this.stopButton = Entry.createElement('button');
            this.stopButton.addClass('entryEngineButtonPhone', 'entryStopButtonPhone', 'entryRemove');
            if (Entry.objectAddable) this.stopButton.addClass('small');
            this.stopButton.innerHTML = Lang.Workspace.stop;

            this.footerView_.appendChild(this.stopButton);
            this.stopButton.bindOnClick(function (e) {
                Entry.engine.toggleStop();
            });
        }
    };

    p.toggleSpeedPanel = function () {
        if (this.speedPanelOn) {
            this.speedPanelOn = false;
            $(Entry.stage.canvas.canvas).animate({ top: '24px' });
            this.coordinateButton.removeClass('entryRemove');
            this.maximizeButton.removeClass('entryRemove');
            this.mouseView.removeClass('entryRemoveElement');
            $(this.speedLabel_).remove();
            delete this.speedLabel_;
            $(this.speedProgress_).fadeOut(null, function (e) {
                $(this).remove();
                delete this.speedProgress_;
            });
            $(this.speedHandle_).remove();
            delete this.speedHandle_;
        } else {
            this.speedPanelOn = true;
            $(Entry.stage.canvas.canvas).animate({ top: '41px' });
            this.coordinateButton.addClass('entryRemove');
            this.maximizeButton.addClass('entryRemove');
            this.mouseView.addClass('entryRemoveElement');
            this.speedLabel_ = Entry.createElement('div', 'entrySpeedLabelWorkspace');
            this.speedLabel_.innerHTML = Lang.Workspace.speed;
            this.view_.insertBefore(this.speedLabel_, this.maximizeButton);
            this.speedProgress_ = Entry.createElement('table', 'entrySpeedProgressWorkspace');
            var tr = Entry.createElement('tr');
            var speeds = this.speeds;
            for (var i = 0; i < 5; i++) {
                (function (i) {
                    var td = Entry.createElement('td', 'progressCell' + i);
                    td.bindOnClick(function () {
                        Entry.engine.setSpeedMeter(speeds[i]);
                    });
                    tr.appendChild(td);
                })(i);
            }this.view_.insertBefore(this.speedProgress_, this.maximizeButton);
            this.speedProgress_.appendChild(tr);
            this.speedHandle_ = Entry.createElement('div', 'entrySpeedHandleWorkspace');
            var canvasWidth = Entry.interfaceState.canvasWidth;
            var grid = (canvasWidth - 84) / 5;

            $(this.speedHandle_).bind('mousedown.speedPanel touchstart.speedPanel', function (e) {
                if (e.stopPropagation) e.stopPropagation();
                if (e.preventDefault) e.preventDefault();

                if (e.button === 0 || e.originalEvent && e.originalEvent.touches) {
                    var mouseEvent = Entry.Utils.convertMouseEvent(e);
                    var doc = $(document);
                    doc.bind('mousemove.speedPanel touchmove.speedPanel', onMouseMove);
                    doc.bind('mouseup.speedPanel touchend.speedPanel', onMouseUp);
                }

                function onMouseMove(e) {
                    e.stopPropagation();
                    var mouseEvent = Entry.Utils.convertMouseEvent(e);
                    var level = Math.floor((mouseEvent.clientX - 80) / (grid * 5) * 5);
                    if (level < 0 || level > 4) return;
                    Entry.engine.setSpeedMeter(Entry.engine.speeds[level]);
                }

                function onMouseUp(e) {
                    $(document).unbind('.speedPanel');
                }
            });
            this.view_.insertBefore(this.speedHandle_, this.maximizeButton);
            this.setSpeedMeter(Entry.FPS);
        }
    };

    p.setSpeedMeter = function (FPS) {
        var level = this.speeds.indexOf(FPS);
        if (level < 0) return;
        level = Math.min(4, level);
        level = Math.max(0, level);
        if (this.speedPanelOn) {
            var canvasWidth = Entry.interfaceState.canvasWidth;
            this.speedHandle_.style.left = (canvasWidth - 80) / 10 * (level * 2 + 1) + 80 - 9 + 'px';
        }
        if (Entry.FPS == FPS) return;
        clearInterval(this.ticker);
        this.ticker = setInterval(this.update, Math.floor(1000 / FPS));
        Entry.FPS = FPS;
    };

    /**
     * Start engine
     * @param {number} FPS
     */
    p.start = function (FPS) {
        /** @type {!number} */
        createjs.Ticker.setFPS(Entry.FPS);

        if (!this.ticker) this.ticker = setInterval(this.update, Math.floor(1000 / Entry.FPS));
    };

    /**
     * Stop engine
     */
    p.stop = function () {
        createjs.Ticker.reset();
        clearInterval(this.ticker);
        this.ticker = null;
    };

    /**
     * Update canvas and object.
     */
    p.update = function () {
        if (Entry.engine.isState('run')) {
            Entry.engine.computeObjects();
            Entry.hw.update();
        }
    };

    /**
     * compute each object with runningScript on entity.
     */
    p.computeObjects = function () {
        Entry.container.mapObjectOnScene(this.computeFunction);
    };

    /**
     * Compute function for map.
     * @param {Entry.EntryObject} object
     */
    p.computeFunction = function (object) {
        object.script.tick();
    };

    Entry.Engine.computeThread = function (entity, script) {
        Entry.engine.isContinue = true;
        var isSame = false;
        while (script && Entry.engine.isContinue && !isSame) {
            Entry.engine.isContinue = !script.isRepeat;
            var newScript = script.run();
            isSame = newScript && newScript === script;
            script = newScript;
        }
        return script;
    };

    /**
     * Check this state is same with argument
     * @param {string} state
     * @return {boolean}
     */
    p.isState = function (state) {
        return this.state.indexOf(state) > -1;
    };

    /**
     * Execute this function when click start button
     */
    p.run = function () {
        if (this.isState('run')) {
            this.toggleStop();
        } else if (this.isState('stop') || this.isState('pause')) {
            this.toggleRun();
        }
    };

    /**
     * toggle this engine state run
     */
    p.toggleRun = function (disableAchieve) {
        var variableContainer = Entry.variableContainer;
        var container = Entry.container;
        var WS = Entry.getMainWS();

        if (this.state === 'pause') return this.togglePause();

        Entry.Utils.blur();

        WS && WS.syncCode();

        Entry.addActivity("run");

        if (this.state == 'stop') {
            container.mapEntity(function (entity) {
                entity.takeSnapshot();
            });
            variableContainer.mapVariable(function (variable) {
                variable.takeSnapshot();
            });
            variableContainer.mapList(function (variable) {
                variable.takeSnapshot();
            });
            this.projectTimer.takeSnapshot();
            container.inputValue.takeSnapshot();

            container.takeSequenceSnapshot();
            Entry.scene.takeStartSceneSnapshot();
            this.state = 'run';
            this.fireEvent('start');
            this.achieveEnabled = !(disableAchieve === false);
        }
        this.state = 'run';
        if (Entry.type == 'mobile') this.view_.addClass('entryEngineBlueWorkspace');

        if (this.runButton) {
            if (this.pauseButton) this.pauseButton.innerHTML = Lang.Workspace.pause;
            if (this.pauseButtonFull) this.pauseButtonFull.innerHTML = Lang.Workspace.pause;
            this.runButton.addClass('run');
            this.runButton.addClass('entryRemove');
            this.stopButton.removeClass('entryRemove');
            if (this.addButton) {
                this.addButton.addClass('entryRemove');
                if (Entry.objectAddable) this.pauseButton.removeClass('entryRemove');
            }
            if (this.pauseButton && (Entry.type === 'minimize' || Entry.objectAddable)) this.pauseButton.removeClass('entryRemove');

            if (this.runButton2) this.runButton2.addClass('entryRemove');
            if (this.stopButton2) this.stopButton2.removeClass('entryRemove');
            if (this.pauseButtonFull) this.pauseButtonFull.removeClass('entryRemove');
        }

        if (!this.isUpdating) {
            this.update();
            this.isUpdating = true;
        }

        Entry.stage.selectObject();
        Entry.dispatchEvent('run');
    };

    /**
     * toggle this engine state stop
     */
    p.toggleStop = function () {
        var container = Entry.container;
        var variableContainer = Entry.variableContainer;

        Entry.Utils.blur();

        Entry.addActivity("stop");

        container.mapEntity(function (entity) {
            entity.loadSnapshot();
            entity.object.filters = [];
            entity.resetFilter();
            if (entity.dialog) entity.dialog.remove();
            if (entity.brush) entity.removeBrush();
        });

        variableContainer.mapVariable(function (variable) {
            variable.loadSnapshot();
        });
        variableContainer.mapList(function (variable) {
            variable.loadSnapshot();
        });
        this.stopProjectTimer();
        container.clearRunningState();
        container.loadSequenceSnapshot();
        this.projectTimer.loadSnapshot();
        container.inputValue.loadSnapshot();
        Entry.scene.loadStartSceneSnapshot();
        Entry.Func.clearThreads();
        createjs.Sound.setVolume(1);
        createjs.Sound.stop();
        Entry.soundInstances = [];

        this.view_.removeClass('entryEngineBlueWorkspace');
        if (this.runButton) {
            this.runButton.removeClass('entryRemove');
            this.stopButton.addClass('entryRemove');
            if (this.pauseButton) this.pauseButton.addClass('entryRemove');
            if (this.pauseButtonFull) this.pauseButtonFull.addClass('entryRemove');
            if (this.addButton && Entry.objectAddable) this.addButton.removeClass('entryRemove');

            if (this.runButton2) this.runButton2.removeClass('entryRemove');
            if (this.stopButton2) this.stopButton2.addClass('entryRemove');
        }

        this.state = 'stop';
        Entry.dispatchEvent('stop');
        Entry.stage.hideInputField();
        (function (w) {
            w && w.getMode() === Entry.Workspace.MODE_VIMBOARD && w.codeToText();
        })(Entry.getMainWS());
    };

    /**
     * toggle this engine state pause
     */
    p.togglePause = function () {
        var timer = Entry.engine.projectTimer;
        if (this.state == 'pause') {
            timer.pausedTime += new Date().getTime() - timer.pauseStart;
            if (timer.isPaused) timer.pauseStart = new Date().getTime();else delete timer.pauseStart;
            this.state = 'run';
            Entry.Utils.recoverSoundInstances();
            if (this.runButton) {
                if (this.pauseButton) this.pauseButton.innerHTML = Lang.Workspace.pause;
                if (this.pauseButtonFull) this.pauseButtonFull.innerHTML = Lang.Workspace.pause;
                this.runButton.addClass('entryRemove');
                if (this.runButton2) this.runButton2.addClass('entryRemove');
            }
        } else {
            this.state = 'pause';
            if (!timer.isPaused) timer.pauseStart = new Date().getTime();else {
                timer.pausedTime += new Date().getTime() - timer.pauseStart;
                timer.pauseStart = new Date().getTime();
            }
            Entry.Utils.pauseSoundInstances();
            if (this.runButton) {
                if (this.pauseButton) this.pauseButton.innerHTML = Lang.Workspace.restart;
                if (this.pauseButtonFull) this.pauseButtonFull.innerHTML = Lang.Workspace.restart;
                this.runButton.removeClass('entryRemove');
                this.stopButton.removeClass('entryRemove');
                if (this.runButton2) this.runButton2.removeClass('entryRemove');
            }
        }
    };

    /**
     * @param {string} eventName
     */
    p.fireEvent = function (eventName) {
        if (this.state !== 'run') return;
        Entry.container.mapEntityIncludeCloneOnScene(this.raiseEvent, eventName);
    };

    /**
     * this is callback function for map.
     * @param {Entry.EntryObject} object
     * @param {string} eventName
     */
    p.raiseEvent = function (entity, eventName) {
        entity.parent.script.raiseEvent(eventName, entity);
    };

    /**
     * @param {string} eventName
     * @param {Entry.EntityObject} entity
     */
    p.fireEventOnEntity = function (eventName, entity) {
        if (this.state == 'run') Entry.container.mapEntityIncludeCloneOnScene(this.raiseEventOnEntity, [entity, eventName]);
    };

    /**
     * this is callback function for map.
     * @param {Entry.EntryObject} object
     * @param {Array} param
     */
    p.raiseEventOnEntity = function (entity, param) {
        if (entity !== param[0]) return;
        var eventName = param[1];
        entity.parent.script.raiseEvent(eventName, entity);
    };

    /**
     * capture keyboard press input
     * @param {keyboard event} e
     */
    p.captureKeyEvent = function (e, isForce) {
        var keyCode = e.keyCode;
        var isWorkspace = Entry.type === 'workspace';

        if (Entry.Utils.isInInput(e) && !isForce) return;

        //mouse shortcuts
        if (keyCode !== 17 && e.ctrlKey && isWorkspace) {
            if (keyCode == 83) {
                e.preventDefault();
                Entry.dispatchEvent(e.shiftKey ? 'saveAsWorkspace' : 'saveWorkspace');
            } else if (keyCode == 82) {
                e.preventDefault();
                Entry.engine.run();
            } else if (keyCode == 90) {
                e.preventDefault();
                Entry.dispatchEvent(e.shiftKey ? 'redo' : 'undo');
            }
        } else if (Entry.engine.isState('run')) {
            e.preventDefault && e.preventDefault();
            Entry.container.mapEntityIncludeCloneOnScene(Entry.engine.raiseKeyEvent, ["keyPress", keyCode]);
        }

        if (Entry.engine.isState('stop')) {
            if (isWorkspace && keyCode >= 37 && keyCode <= 40) {
                Entry.stage.moveSprite(e);
            }
        }
    };

    /**
     * this is callback function for map.
     * @param {Entry.EntryObject} object
     * @param {Array} param
     */
    p.raiseKeyEvent = function (entity, param) {
        var eventName = param[0];
        var keyCode = String(param[1]);
        return entity.parent.script.raiseEvent(eventName, entity, keyCode);
    };

    /**
     * Update mouse coordinate
     */
    p.updateMouseView = function () {
        var coordinate = Entry.stage.mouseCoordinate;
        this.mouseView.textContent = 'X : ' + coordinate.x + ', Y : ' + coordinate.y;
        this.mouseView.removeClass('entryRemove');
    };

    /**
     * hide mouse coordinate
     */
    p.hideMouseView = function () {
        this.mouseView.addClass('entryRemove');
    };

    /**
     * Toggle full screen of canvas
     */
    p.toggleFullScreen = function (popupClassName) {
        if (!this.popup) {
            this.popup = new Entry.Popup(popupClassName);
            if (Entry.type != 'workspace') {
                var $doc = $(document);
                var body = $(this.popup.body_);
                body.css('top', $doc.scrollTop());
                $('body').css('overflow', 'hidden');

                popup.window_.appendChild(Entry.stage.canvas.canvas);
                popup.window_.appendChild(Entry.engine.runButton[0]);
            }
            popup.window_.appendChild(Entry.engine.view_);
            if (Entry.type === "workspace" && Entry.targetChecker) popup.window_.appendChild(Entry.targetChecker.getStatusView()[0]);
        } else {
            this.popup.remove();
            this.popup = null;
        }
        Entry.windowResized.notify();
    };

    p.closeFullScreen = function () {
        if (this.popup) {
            this.popup.remove();
            this.popup = null;
        }

        Entry.windowResized.notify();
    };

    p.exitFullScreen = function () {
        if (document.webkitIsFullScreen || document.mozIsFullScreen || document.isFullScreen) {} else {
            Entry.engine.footerView_.removeClass('entryRemove');
            Entry.engine.headerView_.removeClass('entryRemove');
        }
        Entry.windowResized.notify();
    };

    //projectTimer to show
    p.showProjectTimer = function () {
        var timer = Entry.engine.projectTimer;
        if (!timer) return;
        this.projectTimer.setVisible(true);
    };

    //decide Entry.engine.projectTimer to show
    p.hideProjectTimer = function (removeBlock, notIncludeSelf) {
        var timer = this.projectTimer;
        if (!timer || !timer.isVisible() || this.isState('run')) return;
        var objects = Entry.container.getAllObjects();

        var timerTypes = ['get_project_timer_value', 'reset_project_timer', 'set_visible_project_timer', 'choose_project_timer_action'];

        for (var i = 0, len = objects.length; i < len; i++) {
            var code = objects[i].script;
            for (var j = 0; j < timerTypes.length; j++) {
                var blocks = code.getBlockList(false, timerTypes[j]);
                if (notIncludeSelf) {
                    var index = blocks.indexOf(removeBlock);
                    if (index > -1) blocks.splice(index, 1);
                }
                if (blocks.length > 0) return;
            }
        }
        timer.setVisible(false);
    };

    p.clearTimer = function () {
        clearInterval(this.ticker);
        clearInterval(this.projectTimer.tick);
    };

    p.startProjectTimer = function () {
        var timer = this.projectTimer;

        if (!timer) return;

        timer.start = new Date().getTime();
        timer.isInit = true;
        timer.isPaused = false;
        timer.pausedTime = 0;
        timer.tick = setInterval(function (e) {
            Entry.engine.updateProjectTimer();
        }, 1000 / 60);
    };

    p.stopProjectTimer = function () {
        var timer = this.projectTimer;
        if (!timer) return;
        this.updateProjectTimer(0);
        timer.isPaused = false;
        timer.isInit = false;
        timer.pausedTime = 0;
        clearInterval(timer.tick);
    };

    p.resetTimer = function () {
        var timer = this.projectTimer;
        if (!timer.isInit) return;
        var isPaused = timer.isPaused;

        delete timer.pauseStart;

        this.updateProjectTimer(0);
        timer.pausedTime = 0;

        timer.isPaused = isPaused;

        if (!isPaused) return;

        clearInterval(timer.tick);
        timer.isInit = false;
        delete timer.start;
    };

    p.updateProjectTimer = function (value) {
        var engine = Entry.engine;
        var timer = engine.projectTimer;
        if (!timer) return;
        var current = new Date().getTime();
        if (typeof value == 'undefined') {
            if (!timer.isPaused && !engine.isState('pause')) timer.setValue(Math.max((current - (timer.start || current) - timer.pausedTime) / 1000, 0));
        } else {
            timer.setValue(value);
            timer.pausedTime = 0;
            timer.start = current;
        }
    };

    p.raiseMessage = function (value) {
        Entry.message.notify(Entry.variableContainer.getMessage(value));
        return Entry.container.mapEntityIncludeCloneOnScene(this.raiseKeyEvent, ["when_message_cast", value]);
    };

    p.getDom = function (query) {
        if (query.length >= 1) {
            switch (query.shift()) {
                case "runButton":
                    return this.runButton;
                case "stopButton":
                    return this.stopButton;
            }
        } else {}
    };

    p.attachKeyboardCapture = function () {
        if (Entry.keyPressed) {
            this._keyboardEvent && this.detachKeyboardCapture();
            this._keyboardEvent = Entry.keyPressed.attach(this, this.captureKeyEvent);
        }
    };

    p.detachKeyboardCapture = function () {
        if (Entry.keyPressed && this._keyboardEvent) {
            this._keyboardEvent.destroy();
            delete this._keyboardEvent;
        }
    };

    p.applyOption = function () {
        var SMALL = 'small';

        if (Entry.objectAddable) {
            this.runButton.addClass(SMALL);
            this.stopButton.addClass(SMALL);
            this.addButton.removeClass('entryRemove');
        } else {
            this.runButton.removeClass(SMALL);
            this.stopButton.removeClass(SMALL);
            this.addButton.addClass('entryRemove');
        }
    };
})(Entry.Engine.prototype);

/***/ }),

/***/ "./src/class/entity.js":
/*!*****************************!*\
  !*** ./src/class/entity.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview entity object is class for entry object canvas view.
 */


/**
 * Construct entity class
 * @param {!Entry.EntryObject} object
 * @constructor
 */

Entry.EntityObject = function (object) {
    /** @type {!string} */
    this.parent = object;
    this.type = object.objectType;
    /** @type {Array<xml script>} */
    this.flip = false;
    this.collision = Entry.Utils.COLLISION.NONE;
    this.id = Entry.generateHash();
    this.removed = false;
    this.stamps = [];
    this.shapes = [];

    if (this.type == 'sprite') {
        this.object = new createjs.Bitmap();
        this.setInitialEffectValue();
    } else if (this.type == 'textBox') {
        this.object = new createjs.Container();
        this.textObject = new createjs.Text();
        this.textObject.font = "20px Nanum Gothic";
        this.textObject.textBaseline = "middle";
        this.textObject.textAlign = "center";
        this.bgObject = new createjs.Shape();
        this.bgObject.graphics.setStrokeStyle(1).beginStroke("#f00").drawRect(0, 0, 100, 100);
        this.object.addChild(this.bgObject);
        this.object.addChild(this.textObject);

        this.fontType = "Nanum Gothic";
        this.fontSize = 20;
        this.fontBold = false;
        this.fontItalic = false;
        this.underLine = false;
        this.strike = false;
    }

    this.object.entity = this;
    this.object.cursor = "pointer";

    this.object.on('mousedown', function (evt) {
        var id = this.entity.parent.id;
        Entry.dispatchEvent('entityClick', this.entity);
        Entry.stage.isObjectClick = true;

        if (Entry.type != 'minimize' && Entry.stage.isEntitySelectable()) {
            this.offset = { x: -this.parent.x + this.entity.getX() - (evt.stageX * 0.75 - 240),
                y: -this.parent.y - this.entity.getY() - (evt.stageY * 0.75 - 135) };
            this.cursor = "move";
            this.entity.initCommand();
            Entry.container.selectObject(id);
        }
    });

    this.object.on("pressup", function (evt) {
        Entry.dispatchEvent('entityClickCanceled', this.entity);
        this.cursor = "pointer";
        this.entity.checkCommand();
    });

    this.object.on("pressmove", function (evt) {
        if (Entry.type != 'minimize' && Entry.stage.isEntitySelectable()) {
            if (this.entity.parent.getLock()) return;
            this.entity.doCommand();
            this.entity.setX(evt.stageX * 0.75 - 240 + this.offset.x);
            this.entity.setY(-(evt.stageY * 0.75 - 135) - this.offset.y);
            Entry.stage.updateObject();
        }
    });
};

/**
 * Construct entity class
 * @param {?picture model} pictureModel
 * @param {?entity model} entityModel
 * @constructor
 */
Entry.EntityObject.prototype.injectModel = function (pictureModel, entityModel) {
    if (this.type == 'sprite') {
        this.setImage(pictureModel);
    } else if (this.type == 'textBox') {
        var parent = this.parent;
        entityModel.text = entityModel.text || parent.text || parent.name;
        this.setFont(entityModel.font);
        this.setBGColour(entityModel.bgColor);
        this.setColour(entityModel.colour);
        this.setUnderLine(entityModel.underLine);
        this.setStrike(entityModel.strike);
        this.setText(entityModel.text);
    }

    //entity
    if (entityModel) {
        this.syncModel_(entityModel);
    }
};

/**
 * sync this model with parameter
 * @param {!entity model} entityModel
 * @private
 */
Entry.EntityObject.prototype.syncModel_ = function (entityModel) {
    this.setX(entityModel.x);
    this.setY(entityModel.y);
    this.setRegX(entityModel.regX);
    this.setRegY(entityModel.regY);
    this.setScaleX(entityModel.scaleX);
    this.setScaleY(entityModel.scaleY);
    this.setRotation(entityModel.rotation);
    this.setDirection(entityModel.direction, true);
    this.setLineBreak(entityModel.lineBreak);
    this.setWidth(entityModel.width);
    this.setHeight(entityModel.height);
    this.setText(entityModel.text);
    this.setTextAlign(entityModel.textAlign);
    this.setFontSize(entityModel.fontSize || this.getFontSize());
    this.setVisible(entityModel.visible);
};

Entry.EntityObject.prototype.initCommand = function () {
    if (!Entry.engine.isState('stop')) return;
    this.isCommandValid = false;
    if (Entry.stateManager) Entry.stateManager.addCommand("edit entity", this, this.restoreEntity, this.toJSON());
};

Entry.EntityObject.prototype.doCommand = function () {
    this.isCommandValid = true;
};

Entry.EntityObject.prototype.checkCommand = function () {
    if (Entry.engine.isState('stop') && !this.isCommandValid) Entry.dispatchEvent('cancelLastCommand');
};

/**
 * for redo and undo
 * @param {!entity model} entityModel
 * @return {Entry.State} capture current state
 */
Entry.EntityObject.prototype.restoreEntity = function (entityModel) {
    var currentModel = this.toJSON();
    this.syncModel_(entityModel);
    Entry.dispatchEvent('updateObject');
    if (Entry.stateManager) Entry.stateManager.addCommand("restore object", this, this.restoreEntity, currentModel);
};

/**
 * X coordinate setter
 * @param {number} x
 */
Entry.EntityObject.prototype.setX = function (x) {
    if (typeof x != 'number') return;

    /** @type {number} */
    this.x = x;
    this.object.x = this.x;
    !this.isClone && this.parent.updateCoordinateView();
    this.updateDialog();
    Entry.requestUpdate = true;
};

/**
 * X coordinate getter
 * @return {number}
 */
Entry.EntityObject.prototype.getX = function (toFixedValue) {
    if (toFixedValue) return Entry.Utils.toFixed(this.x, toFixedValue);else return this.x;
};

/**
 * Y coordinate setter
 * @param {number} y
 */
Entry.EntityObject.prototype.setY = function (y) {
    if (typeof y != 'number') return;

    /** @type {number} */
    this.y = y;
    this.object.y = -this.y;
    !this.isClone && this.parent.updateCoordinateView();
    this.updateDialog();
    Entry.requestUpdate = true;
};

/**
 * Y coordinate getter
 * @return {number}
 */
Entry.EntityObject.prototype.getY = function (toFixedValue) {
    if (toFixedValue) return Entry.Utils.toFixed(this.y, toFixedValue);else return this.y;
};

/**
 * direction getter
 * @return {number}
 */
Entry.EntityObject.prototype.getDirection = function (toFixedValue) {
    if (toFixedValue) return Entry.Utils.toFixed(this.direction, toFixedValue);else return this.direction;
};

/**
 * direction setter
 * @param {number} direction
 * @param {boolean} flippable
 */
Entry.EntityObject.prototype.setDirection = function (direction, flippable) {
    if (!direction) direction = 0;
    direction = direction % 360;

    if (this.parent.getRotateMethod() == 'vertical' && !flippable) {
        var previousIsRight = this.direction >= 0 && this.direction < 180;
        var afterIsRight = direction >= 0 && direction < 180;
        if (previousIsRight != afterIsRight) {
            this.setScaleX(-this.getScaleX());
            Entry.stage.updateObject();
            this.flip = !this.flip;
        }
    }
    /** @type {number} */
    this.direction = direction.mod(360);
    this.object.direction = this.direction;
    !this.isClone && this.parent.updateRotationView();
    Entry.dispatchEvent('updateObject');
    Entry.requestUpdate = true;
};

/**
 * rotation setter
 * @param {number} rotation
 * */
Entry.EntityObject.prototype.setRotation = function (rotation) {
    /** @type {number} */
    if (this.parent.getRotateMethod() !== 'free') rotation = 0;

    this.rotation = rotation.mod(360);
    this.object.rotation = this.rotation;
    this.updateDialog();
    !this.isClone && this.parent.updateRotationView();
    Entry.dispatchEvent('updateObject');
    Entry.requestUpdate = true;
};

/**
 * rotation getter
 * @return {number}
 */
Entry.EntityObject.prototype.getRotation = function (toFixedValue) {
    if (toFixedValue) return Entry.Utils.toFixed(this.rotation, toFixedValue);else return this.rotation;
};

/**
 * regX coordinate setter
 * @param {number} regX
 */
Entry.EntityObject.prototype.setRegX = function (regX) {
    if (this.type == 'textBox') regX = 0;
    /** @type {number} */
    this.regX = regX;
    this.object.regX = this.regX;
    Entry.requestUpdate = true;
};

/**
 * regX coordinate getter
 * @return {number}
 */
Entry.EntityObject.prototype.getRegX = function () {
    return this.regX;
};

/**
 * regY coordinate setter
 * @param {number} regY
 */
Entry.EntityObject.prototype.setRegY = function (regY) {
    if (this.type == 'textBox') regY = 0;
    /** @type {number} */
    this.regY = regY;
    this.object.regY = this.regY;
    Entry.requestUpdate = true;
};

/**
 * regY coordinate getter
 * @return {number}
 */
Entry.EntityObject.prototype.getRegY = function () {
    return this.regY;
};

/**
 * scaleX coordinate setter
 * @param {number} scaleX
 */
Entry.EntityObject.prototype.setScaleX = function (scaleX) {
    /** @type {number} */
    this.scaleX = scaleX;
    this.object.scaleX = this.scaleX;
    this.parent.updateCoordinateView();
    this.updateDialog();
    Entry.requestUpdate = true;
};

/**
 * scaleX coordinate getter
 * @return {number}
 */
Entry.EntityObject.prototype.getScaleX = function () {
    return this.scaleX;
};

/**
 * scaleY coordinate setter
 * @param {number} scaleY
 */
Entry.EntityObject.prototype.setScaleY = function (scaleY) {
    /** @type {number} */
    this.scaleY = scaleY;
    this.object.scaleY = this.scaleY;
    this.parent.updateCoordinateView();
    this.updateDialog();
    Entry.requestUpdate = true;
};

/**
 * scaleY coordinate getter
 * @return {number}
 */
Entry.EntityObject.prototype.getScaleY = function () {
    return this.scaleY;
};

/**
 * object size setter
 * @param {number} size
 */
Entry.EntityObject.prototype.setSize = function (size) {
    if (size < 1) size = 1;
    var scale = size / this.getSize();
    this.setScaleX(this.getScaleX() * scale);
    this.setScaleY(this.getScaleY() * scale);
    !this.isClone && this.parent.updateCoordinateView();
    Entry.requestUpdate = true;
};

/**
 * get object size
 * @return {number}
 */
Entry.EntityObject.prototype.getSize = function (toFixedValue) {
    var value = (this.getWidth() * Math.abs(this.getScaleX()) + this.getHeight() * Math.abs(this.getScaleY())) / 2;
    if (toFixedValue) return Entry.Utils.toFixed(value, toFixedValue);
    return value;
};

/**
 * width coordinate setter
 * @param {number} width
 */
Entry.EntityObject.prototype.setWidth = function (width) {
    /** @type {number} */
    this.width = width;
    this.object.width = this.width;
    if (this.textObject && this.getLineBreak()) this.textObject.lineWidth = this.width;
    this.updateDialog();
    this.updateBG();
    Entry.requestUpdate = true;
};

/**
 * width coordinate getter
 * @return {number}
 */
Entry.EntityObject.prototype.getWidth = function () {
    return this.width;
};

/**
 * height coordinate setter
 * @param {number} height
 */
Entry.EntityObject.prototype.setHeight = function (height) {
    /** @type {number} */
    this.height = height;
    if (this.textObject) {
        this.object.height = this.height;
        this.alignTextBox();
    }
    this.updateDialog();
    this.updateBG();
    Entry.requestUpdate = true;
};

/**
 * height coordinate getter
 * @return {number}
 */
Entry.EntityObject.prototype.getHeight = function () {
    return this.height;
};

/**
 * colour setter
 * @param {?string} colour
 */
Entry.EntityObject.prototype.setColour = function (colour) {
    /** @type {string} */
    this.colour = colour || '#000000';
    if (this.textObject) this.textObject.color = this.colour;
    Entry.requestUpdate = true;
};

/**
 * colour getter
 * @return {colour}
 */
Entry.EntityObject.prototype.getColour = function () {
    return this.colour;
};

/**
 * BG colour setter, for textBox object
 * @param {?string} colour
 */
Entry.EntityObject.prototype.setBGColour = function (colour) {
    /** @type {string} */
    this.bgColor = colour || 'transparent';
    this.updateBG();
    //this.object.color = this.colour;
    Entry.requestUpdate = true;
};

/**
 * BG colour getter, for textBox object
 * @return {colour}
 */
Entry.EntityObject.prototype.getBGColour = function () {
    return this.bgColor;
};

Entry.EntityObject.prototype.setUnderLine = function (underLine) {
    if (underLine === undefined) underLine = false;
    this.underLine = underLine;
    this.textObject.underLine = underLine;
    Entry.requestUpdate = true;
};

Entry.EntityObject.prototype.getUnderLine = function () {
    return this.underLine;
};

Entry.EntityObject.prototype.setStrike = function (strike) {
    if (strike === undefined) strike = false;
    this.strike = strike;
    this.textObject.strike = strike;
    Entry.requestUpdate = true;
};

Entry.EntityObject.prototype.getStrike = function () {
    return this.strike;
};

/**
 * font getter
 */
Entry.EntityObject.prototype.getFont = function () {
    var fontArray = [];
    if (this.fontBold) fontArray.push("bold");
    if (this.fontItalic) fontArray.push("italic");
    fontArray.push(this.getFontSize() + 'px');
    fontArray.push(this.fontType);
    return fontArray.join(" ");
};

/**
 * font setter
 */
Entry.EntityObject.prototype.setFont = function (font) {
    if (this.parent.objectType != 'textBox') return;
    if (this.textObject.font === font) return;
    if (!font) font = "20px Nanum Gothic";

    var fontArray = font.split(" ");
    var i = 0;

    if (i = fontArray.indexOf("bold") > -1) {
        fontArray.splice(i - 1, 1);
        this.setFontBold(true);
    }
    if (i = fontArray.indexOf("italic") > -1) {
        fontArray.splice(i - 1, 1);
        this.setFontItalic(true);
    }
    var fontSize = parseInt(fontArray.shift());
    this.setFontSize(fontSize);
    this.setFontType(fontArray.join(" "));

    this.textObject.font = this.getFont();
    Entry.stage.update();
    this.setWidth(this.textObject.getMeasuredWidth());
    this.updateBG();
    Entry.stage.updateObject();
};

Entry.EntityObject.prototype.setLineHeight = function () {
    switch (this.getFontType()) {
        case "Nanum Gothic Coding":
            {
                this.textObject.lineHeight = this.fontSize;
                break;
            }
        default:
            {
                this.textObject.lineHeight = 0;
                break;
            }
    }
};

Entry.EntityObject.prototype.syncFont = function () {
    this.textObject.font = this.getFont();
    this.setLineHeight();
    Entry.stage.update();
    if (this.getLineBreak()) {
        if (this.fontType == "Nanum Gothic Coding") {
            var textObjectHeight = this.textObject.getMeasuredLineHeight();
            this.textObject.y = textObjectHeight / 2 - this.getHeight() / 2 + 10;
        }
    } else {
        this.setWidth(this.textObject.getMeasuredWidth());
        this.setHeight(this.textObject.getMeasuredHeight());
    }
    Entry.stage.updateObject();
    Entry.requestUpdate = true;
};

/**
 * font type getter
 */
Entry.EntityObject.prototype.getFontType = function () {
    return this.fontType;
};

/**
 * font type setter
 */
Entry.EntityObject.prototype.setFontType = function (fontType) {
    if (this.parent.objectType != 'textBox') return;
    fontType = fontType ? fontType : "Nanum Gothic";
    this.fontType = fontType;
    this.syncFont();
};

/**
 * font size getter
 */
Entry.EntityObject.prototype.getFontSize = function (fontSize) {
    return this.fontSize;
};

/**
 * font size setter
 */
Entry.EntityObject.prototype.setFontSize = function (fontSize) {
    if (this.parent.objectType != 'textBox') return;
    if (this.fontSize == fontSize) return;
    this.fontSize = fontSize ? fontSize : 20;
    this.syncFont();
    this.alignTextBox();
};

/**
 * set font bold state
 */
Entry.EntityObject.prototype.setFontBold = function (isFontBold) {
    this.fontBold = isFontBold;
    Entry.requestUpdate = true;
};

/**
 * toggle bold on,off and return current
 */
Entry.EntityObject.prototype.toggleFontBold = function () {
    this.fontBold = !this.fontBold;
    this.syncFont();
    return this.fontBold;
};

/**
 * set font italic state
 */
Entry.EntityObject.prototype.setFontItalic = function (isFontItalic) {
    this.fontItalic = isFontItalic;
    Entry.requestUpdate = true;
};

/**
 * toggle italic on,off and return current
 */
Entry.EntityObject.prototype.toggleFontItalic = function () {
    this.fontItalic = !this.fontItalic;
    this.syncFont();
    return this.fontItalic;
};

Entry.EntityObject.prototype.setFontName = function (fontName) {
    var currentFontArray = this.textObject.font.split(' ');
    var tempArray = [];
    for (var i = 0, len = currentFontArray.length; i < len; i++) {
        if (currentFontArray[i] === 'bold' || currentFontArray[i] === 'italic' || currentFontArray[i].indexOf('px') > -1) {
            tempArray.push(currentFontArray[i]);
        }
    }
    this.setFont(tempArray.join(' ') + ' ' + fontName);
};

Entry.EntityObject.prototype.getFontName = function () {
    if (this.type != 'textBox') return;
    if (!this.textObject.font) return '';
    var currentFontArray = this.textObject.font.split(' ');
    var tempArray = [];
    for (var i = 0, len = currentFontArray.length; i < len; i++) {
        if (currentFontArray[i] !== 'bold' && currentFontArray[i] !== 'italic' && currentFontArray[i].indexOf('px') === -1) {
            tempArray.push(currentFontArray[i]);
        }
    }
    return tempArray.join(' ').trim();
};

/**
 * text setter
 * @param {string} text
 */
Entry.EntityObject.prototype.setText = function (text) {
    if (this.parent.objectType != 'textBox') return;
    /** @type {string} */
    if (text === undefined) text = '';
    this.text = text;
    this.textObject.text = this.text;
    if (!this.lineBreak) {
        this.setWidth(this.textObject.getMeasuredWidth());
        this.parent.updateCoordinateView();
    }
    this.updateBG();
    Entry.stage.updateObject();
};

/**
 * text getter
 * @return {string}
 */
Entry.EntityObject.prototype.getText = function () {
    return this.text;
};

/**
 * textAlign setter
 * @param {number} textAlign
 */
Entry.EntityObject.prototype.setTextAlign = function (textAlign) {
    if (this.parent.objectType != 'textBox') return;
    if (textAlign === undefined) textAlign = Entry.TEXT_ALIGN_CENTER;
    this.textAlign = textAlign;

    this.textObject.textAlign = Entry.TEXT_ALIGNS[this.textAlign];
    this.alignTextBox();
    this.updateBG();
    Entry.stage.updateObject();
    /*
    this.setWidth(this.textObject.getMeasuredWidth());
    this.updateBG();
    */
};

/**
 * textAlign getter
 * @return {number}
 */
Entry.EntityObject.prototype.getTextAlign = function () {
    return this.textAlign;
};

/**
 * lineBreak setter
 * @param {boolean} lineBreak
 */
Entry.EntityObject.prototype.setLineBreak = function (lineBreak) {
    if (this.parent.objectType != 'textBox') return;

    if (lineBreak === undefined) lineBreak = false;

    var previousState = this.lineBreak;
    this.lineBreak = lineBreak;

    if (previousState && !this.lineBreak) {
        this.textObject.lineWidth = null;
        this.setHeight(this.textObject.getMeasuredLineHeight());
        this.setText(this.getText().replace(/\n/g, ''));
    } else if (!previousState && this.lineBreak) {
        this.setFontSize(this.getFontSize() * this.getScaleX());
        this.setHeight(this.textObject.getMeasuredLineHeight() * 3);
        this.setWidth(this.getWidth() * this.getScaleX());
        this.setScaleX(1);
        this.setScaleY(1);
        this.textObject.lineWidth = this.getWidth();
        this.alignTextBox();
        if (this.fontType == "Nanum Gothic Coding") {
            var textObjectHeight = this.textObject.getMeasuredLineHeight();
            this.textObject.y = textObjectHeight / 2 - this.getHeight() / 2 + 10;
        }
    }

    Entry.stage.updateObject();
};

/**
 * lineBreak getter
 * @return {number}
 */
Entry.EntityObject.prototype.getLineBreak = function () {
    return this.lineBreak;
};

/**
 * visible setter
 * @param {boolean} visible
 */
Entry.EntityObject.prototype.setVisible = function (visible) {
    /** @type {string} */
    if (visible === undefined) visible = true;
    this.visible = visible;
    this.object.visible = this.visible;
    if (this.dialog) this.syncDialogVisible();
    Entry.requestUpdate = true;
    return this.visible;
};

/**
 * visible getter
 * @return {boolean}
 */
Entry.EntityObject.prototype.getVisible = function () {
    return this.visible;
};

/**
 * Change picture
 * @param {?picture model} pictureModel
 */
Entry.EntityObject.prototype.setImage = function (pictureModel) {
    var that = this;
    delete pictureModel._id;

    Entry.assert(this.type == 'sprite', "Set image is only for sprite object");
    if (!pictureModel.id) pictureModel.id = Entry.generateHash();

    this.picture = pictureModel;
    var dimension = this.picture.dimension;
    var entityWidth = this.getWidth();
    var entityHeight = this.getHeight();

    var absoluteRegX = this.getRegX() - entityWidth / 2;
    var absoluteRegY = this.getRegY() - entityHeight / 2;
    this.setWidth(dimension.width);
    this.setHeight(dimension.height);
    if (!dimension.scaleX) {
        dimension.scaleX = this.getScaleX();
        dimension.scaleY = this.getScaleY();
    }

    this.setScaleX(this.scaleX);
    this.setScaleY(this.scaleY);
    this.setRegX(this.width / 2 + absoluteRegX);
    this.setRegY(this.height / 2 + absoluteRegY);

    //pictureId can be duplicated by copy/paste
    //add entityId in order to differentiate copied pictures
    var cacheId = !this.isClone ? pictureModel.id + this.id : pictureModel.id;

    var image = Entry.container.getCachedPicture(cacheId);

    if (!image) {
        image = new Image();

        image.onload = function (e) {
            if (!that.removed) Entry.container.cachePicture(cacheId, this);

            this.onload = null;
            setImage(this);
        };

        var fileUrl = pictureModel.fileurl;
        if (fileUrl) image.src = fileUrl;else {
            var fileName = pictureModel.filename;
            image.src = Entry.defaultPath + '/uploads/' + fileName.substring(0, 2) + '/' + fileName.substring(2, 4) + '/image/' + fileName + '.png';
        }

        that.object.image = image;
        if (that.object.filters && that.object.filters.length) that.cache();else that.object.uncache();
    } else setImage(image);

    function setImage(datum) {
        Entry.image = datum;
        that.object.image = datum;
        if (that.object.filters && that.object.filters.length) that.cache();else that.object.uncache();
        Entry.requestUpdate = true;
    }

    Entry.dispatchEvent('updateObject');
};

/**
 * Apply easel filter
 */
Entry.EntityObject.prototype.applyFilter = function (isForce, forceEffects) {
    var effects = this.effect;
    var object = this.object;

    var diffEffects = isEqualEffects(effects, this.getInitialEffectValue());
    if (!isForce && diffEffects.length === 0) return;

    if (Array.isArray(forceEffects)) {
        diffEffects = diffEffects.concat(forceEffects);
    }

    (function (e, obj) {
        var f = [];
        var adjust = Entry.adjustValueWithMaxMin;

        if (diffEffects.indexOf('brightness') > -1) {
            e.brightness = e.brightness;
            var cmBrightness = new createjs.ColorMatrix();
            cmBrightness.adjustColor(adjust(e.brightness, -100, 100), 0, 0, 0);
            var brightnessFilter = new createjs.ColorMatrixFilter(cmBrightness);
            f.push(brightnessFilter);
        }

        if (diffEffects.indexOf('hue') > -1) {
            e.hue = e.hue.mod(360);
            var cmHue = new createjs.ColorMatrix();
            cmHue.adjustColor(0, 0, 0, e.hue);
            var hueFilter = new createjs.ColorMatrixFilter(cmHue);
            f.push(hueFilter);
        }

        if (diffEffects.indexOf('hsv') > -1) {
            var matrixValue = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];

            var degrees = e.hsv * 3.6;
            var r = degrees * 3 * Math.PI / 180;
            var cosVal = Math.cos(r);
            var sinVal = Math.sin(r);

            var v = Math.abs(e.hsv / 100);
            if (v > 1) {
                v = v - Math.floor(v);
            }

            if (v > 0 && v <= 0.33) {
                var matrixValue = [1, 0, 0, 0, 0, 0, cosVal, sinVal, 0, 0, 0, -1 * sinVal, cosVal, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
            } else if (v <= 0.66) {
                var matrixValue = [cosVal, 0, sinVal, 0, 0, 0, 1, 0, 0, 0, sinVal, 0, cosVal, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
            } else if (v <= 0.99) {
                var matrixValue = [cosVal, sinVal, 0, 0, 0, -1 * sinVal, cosVal, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
            }

            var calcMatrix = new createjs.ColorMatrix().concat(matrixValue);
            var colorFilter = new createjs.ColorMatrixFilter(calcMatrix);
            f.push(colorFilter);
        }

        if (diffEffects.indexOf('alpha') > -1) {
            obj.alpha = e.alpha = adjust(e.alpha, 0, 1);
        }

        obj.filters = f;
    })(effects, object);

    this.cache();

    function isEqualEffects(effectsA, effectsB) {
        var diffEffects = [];
        for (var key in effectsA) {
            if (effectsA[key] !== effectsB[key]) {
                diffEffects.push(key);
            }
        }
        return diffEffects;
    }
};

/**
 * Remove all filter
 */
Entry.EntityObject.prototype.resetFilter = function () {
    if (this.parent.objectType !== 'sprite') return;

    var object = this.object;
    object.filters = [];
    this.setInitialEffectValue();
    object.alpha = this.effect.alpha;

    object.uncache();
};

/**
 * update dialog position if exist
 */
Entry.EntityObject.prototype.updateDialog = function () {
    if (this.dialog) this.dialog.update();
    Entry.requestUpdate = true;
};

/**
 * save current state data to 'snapshot_'
 */
Entry.EntityObject.prototype.takeSnapshot = function () {
    this.snapshot_ = this.toJSON();
    this.collision = Entry.Utils.COLLISION.NONE;
};

/**
 * load snapshot to current entity
 */
Entry.EntityObject.prototype.loadSnapshot = function () {
    if (this.snapshot_) this.syncModel_(this.snapshot_);
    if (this.parent.objectType === 'sprite') this.setImage(this.parent.getPicture());

    Entry.requestUpdate = true;
};

/**
 * Remove itself when this is clone
 */
Entry.EntityObject.prototype.removeClone = function (isLast) {
    if (!this.isClone) return;

    var clonedEntities = this.parent.clonedEntities;

    if (isLast !== true) {
        var index = clonedEntities.indexOf(this);
        if (index > -1) clonedEntities.splice(index, 1);
    } else clonedEntities.pop();

    if (Entry.Utils.isFunction(this.clearExecutor)) this.clearExecutor();

    this.destroy(true);
};

Entry.EntityObject.prototype.clearExecutor = function () {
    this.parent.script.clearExecutorsByEntity(this);
};

/**
 * convert this entity's data to JSON.
 * @return {JSON}
 */
Entry.EntityObject.prototype.toJSON = function () {
    var json = {};
    json.x = Entry.cutDecimal(this.getX());
    json.y = Entry.cutDecimal(this.getY());
    json.regX = Entry.cutDecimal(this.getRegX());
    json.regY = Entry.cutDecimal(this.getRegY());
    json.scaleX = this.getScaleX();
    json.scaleY = this.getScaleY();
    json.rotation = Entry.cutDecimal(this.getRotation());
    json.direction = Entry.cutDecimal(this.getDirection());
    json.width = Entry.cutDecimal(this.getWidth());
    json.height = Entry.cutDecimal(this.getHeight());
    json.font = this.getFont();
    json.visible = this.getVisible();

    if (this.parent.objectType == 'textBox') {
        json.colour = this.getColour();
        json.text = this.getText();
        json.textAlign = this.getTextAlign();
        json.lineBreak = this.getLineBreak();
        json.bgColor = this.getBGColour();
        json.underLine = this.getUnderLine();
        json.strike = this.getStrike();
        json.fontSize = this.getFontSize();
    }
    return json;
};

/*
 * Return initial effect value
 * @return {effect}
 */
Entry.EntityObject.prototype.setInitialEffectValue = function () {
    this.effect = this.getInitialEffectValue();
    Entry.requestUpdate = true;
};

/*
 * Return initial effect value
 * @return {effect}
 */
Entry.EntityObject.prototype.getInitialEffectValue = function () {
    return {
        'blur': 0,
        'hue': 0,
        'hsv': 0,
        'brightness': 0,
        'contrast': 0,
        'saturation': 0,
        'alpha': 1
    };
};

/*
 * remove brush
 */
Entry.EntityObject.prototype.removeBrush = function () {
    this.shapes.map(Entry.stage.selectedObjectContainer.removeChild, Entry.stage.selectedObjectContainer);
    this.brush = null;
    this.shapes = [];
};

/*
 * erase brush
 */
Entry.EntityObject.prototype.eraseBrush = function () {
    this.shapes.map(Entry.stage.selectedObjectContainer.removeChild, Entry.stage.selectedObjectContainer);
    this.shapes = [];
    Entry.requestUpdate = true;
};

Entry.EntityObject.prototype.updateBG = function () {
    if (!this.bgObject) return;
    this.bgObject.graphics.clear();
    var width = this.getWidth();
    var height = this.getHeight();
    this.bgObject.graphics.setStrokeStyle(1).beginStroke().beginFill(this.getBGColour()).drawRect(-width / 2, -height / 2, width, height);
    if (this.getLineBreak()) {
        this.bgObject.x = 0;
    } else {
        var fontAlign = this.getTextAlign();
        switch (fontAlign) {
            case Entry.TEXT_ALIGN_LEFT:
                this.bgObject.x = width / 2;
                break;
            case Entry.TEXT_ALIGN_CENTER:
                this.bgObject.x = 0;
                break;
            case Entry.TEXT_ALIGN_RIGHT:
                this.bgObject.x = -width / 2;
                break;
        }
    }
};

Entry.EntityObject.prototype.alignTextBox = function () {
    if (this.type != 'textBox') return;
    var textObject = this.textObject;
    if (this.lineBreak) {
        var textObjectHeight = textObject.getMeasuredLineHeight();
        textObject.y = textObjectHeight / 2 - this.getHeight() / 2;
        if (this.fontType == "Nanum Gothic Coding") {
            textObject.y = textObjectHeight / 2 - this.getHeight() / 2 + 10;
        }
        switch (this.textAlign) {
            case Entry.TEXT_ALIGN_CENTER:
                textObject.x = 0;
                break;
            case Entry.TEXT_ALIGN_LEFT:
                textObject.x = -this.getWidth() / 2;
                break;
            case Entry.TEXT_ALIGN_RIGHT:
                textObject.x = this.getWidth() / 2;
                break;
        }
        textObject.maxHeight = this.getHeight();
    } else {
        textObject.x = 0;
        textObject.y = 0;
    }
};

Entry.EntityObject.prototype.syncDialogVisible = function () {
    if (this.dialog) this.dialog.object.visible = this.visible;
};

Entry.EntityObject.prototype.addStamp = function () {
    var stampEntity = new Entry.StampEntity(this.parent, this);
    var stage = Entry.stage;
    var selectedObjectContainer = Entry.stage.selectedObjectContainer;
    var index = selectedObjectContainer.getChildIndex(this.object);
    stage.loadEntity(stampEntity, index);
    this.stamps.push(stampEntity);

    Entry.requestUpdate = true;
};

Entry.EntityObject.prototype.removeStamps = function () {
    this.stamps.map(function (s) {
        s.destroy();
    });

    this.stamps = [];
    Entry.requestUpdate = true;
};

Entry.EntityObject.prototype.destroy = function (isClone) {
    if (this.removed) return;

    this.removed = true;

    var object = this.object;
    if (object) {
        object.uncache();
        object.removeAllEventListeners();
        delete object.image;
        delete object.entity;
    }
    if (this.stamps) this.removeStamps();

    this.dialog && this.dialog.remove();
    this.brush && this.removeBrush();
    Entry.stage.unloadEntity(this);

    var container = Entry.container;
    if (container) container.unCachePictures(this, this.parent.pictures, isClone);
};

Entry.EntityObject.prototype.cache = function () {
    this.object && this.object.cache(0, 0, this.getWidth(), this.getHeight());
    Entry.requestUpdate = true;
};

Entry.EntityObject.prototype.reset = function () {
    this.loadSnapshot();
    this.resetFilter();
    this.dialog && this.dialog.remove();
    this.shapes.length && this.removeBrush();
};

/***/ }),

/***/ "./src/class/function.js":
/*!*******************************!*\
  !*** ./src/class/function.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * @fileoverview Func object for entry function.
 */


/**
 * Block variable constructor
 * @param {variable model} variable
 * @constructor
 */

Entry.Func = function (func) {
    this.id = func ? func.id : Entry.generateHash();
    var content;
    //inspect empty content
    if (func && func.content && func.content.length > 4) content = func.content;
    this.content = content ? new Entry.Code(content) : new Entry.Code([[{
        type: "function_create",
        copyable: false,
        deletable: false,
        x: 40, y: 40
    }]]);
    this.block = null;
    this.blockMenuBlock = null;
    this._backupContent = null;
    this.hashMap = {};

    this.paramMap = {};

    Entry.generateFunctionSchema(this.id);

    if (func && func.content) {
        var blockMap = this.content._blockMap;
        for (var key in blockMap) {
            Entry.Func.registerParamBlock(blockMap[key].type);
        }
        Entry.Func.generateWsBlock(this);
    }

    Entry.Func.registerFunction(this);

    Entry.Func.updateMenu();
};

Entry.Func.threads = {};

Entry.Func.registerFunction = function (func) {
    if (!Entry.playground) return;
    var workspace = Entry.playground.mainWorkspace;
    if (!workspace) return;
    var blockMenu = workspace.getBlockMenu();
    var menuCode = blockMenu.code;

    this._targetFuncBlock = menuCode.createThread([{
        type: "func_" + func.id,
        category: 'func',
        x: -9999
    }]);
    func.blockMenuBlock = this._targetFuncBlock;
};

Entry.Func.executeFunction = function (threadHash) {
    var script = this.threads[threadHash];
    script = Entry.Engine.computeThread(script.entity, script);
    if (script) {
        this.threads[threadHash] = script;
        return true;
    } else {
        delete this.threads[threadHash];
        return false;
    }
};

Entry.Func.clearThreads = function () {
    this.threads = {};
};

Entry.Func.prototype.init = function (model) {
    this.id = model.id;
    this.content = Blockly.Xml.textToDom(model.content);
    var xmlText = '<xml>' + model.block + '</xml>';
    this.block = Blockly.Xml.textToDom(xmlText).childNodes[0];
};

Entry.Func.prototype.destroy = function () {
    this.blockMenuBlock && this.blockMenuBlock.destroy();
};

Entry.Func.edit = function (func) {
    if (!func) return;

    if (typeof func === "string") {
        func = Entry.variableContainer.getFunction(/(func_)?(.*)/.exec(func)[2]);
    }

    this.unbindFuncChangeEvent();
    this.unbindWorkspaceStateChangeEvent();

    this.cancelEdit();

    this.targetFunc = func;
    if (this.initEditView(func.content) === false) return; // edit fail
    Entry.Func.isEdit = true;
    this.bindFuncChangeEvent(func);
    this.updateMenu();
    setTimeout(function () {
        var schema = Entry.block["func_" + func.id];
        if (schema && schema.paramsBackupEvent) schema.paramsBackupEvent.notify();

        this._backupContent = func.content.stringify();
    }.bind(this), 0);
};

Entry.Func.initEditView = function (content) {
    if (!this.menuCode) this.setupMenuCode();
    var workspace = Entry.getMainWS();
    if (workspace.setMode(Entry.Workspace.MODE_OVERLAYBOARD) === false) {
        this.endEdit("cancelEdit");
        return false;
    }
    workspace.changeOverlayBoardCode(content);
    this._workspaceStateEvent = workspace.changeEvent.attach(this, function (message) {
        this.endEdit(message || 'cancelEdit');
        if (workspace.getMode() === Entry.Workspace.MODE_VIMBOARD) {
            workspace.blockMenu.banClass('functionInit');
        }
    });
    content.board.alignThreads();
};

Entry.Func.endEdit = function (message) {
    this.unbindFuncChangeEvent();
    this.unbindWorkspaceStateChangeEvent();
    var targetFuncId = this.targetFunc.id;

    if (this.targetFunc && this.targetFunc.content) this.targetFunc.content.destroyView();

    switch (message) {
        case "save":
            this.save();
            break;
        case "cancelEdit":
            this.cancelEdit();
            break;
    }

    this._backupContent = null;

    delete this.targetFunc;
    var blockSchema = Entry.block["func_" + targetFuncId];
    if (blockSchema && blockSchema.destroyParamsBackupEvent) blockSchema.destroyParamsBackupEvent.notify();
    this.updateMenu();
    Entry.Func.isEdit = false;
};

Entry.Func.save = function () {
    this.targetFunc.generateBlock(true);
    Entry.variableContainer.saveFunction(this.targetFunc);

    var ws = Entry.getMainWS();
    if (ws && ws.overlayModefrom == Entry.Workspace.MODE_VIMBOARD) {
        var mode = {};
        mode.boardType = Entry.Workspace.MODE_VIMBOARD;
        mode.textType = Entry.Vim.TEXT_TYPE_PY;
        mode.runType = Entry.Vim.WORKSPACE_MODE;
        Entry.getMainWS().setMode(mode);
        Entry.variableContainer.functionAddButton_.addClass('disable');
    }
};

Entry.Func.syncFuncName = function (dstFName) {
    var index = 0;
    var dstFNameTokens = [];
    dstFNameTokens = dstFName.split(' ');
    var name = "";
    var blocks = [];
    blocks = Blockly.mainWorkspace.getAllBlocks();
    for (var i = 0; i < blocks.length; i++) {
        var block = blocks[i];
        if (block.type === "function_general") {
            var iList = [];
            iList = block.inputList;
            for (var j = 0; j < iList.length; j++) {
                var input = iList[j];
                if (input.fieldRow.length > 0 && input.fieldRow[0] instanceof Blockly.FieldLabel && input.fieldRow[0].text_ != undefined) {
                    name += input.fieldRow[0].text_;
                    name += " ";
                }
            }
            name = name.trim();
            if (name === this.srcFName && this.srcFName.split(' ').length == dstFNameTokens.length) {
                for (var k = 0; k < iList.length; k++) {
                    var input = iList[k];
                    if (input.fieldRow.length > 0 && input.fieldRow[0] instanceof Blockly.FieldLabel && input.fieldRow[0].text_ != undefined) {
                        if (dstFNameTokens[index] === undefined) {
                            iList.splice(k, 1);
                            break;
                        } else {
                            input.fieldRow[0].text_ = dstFNameTokens[index];
                        }
                        index++;
                    }
                }
            }
            name = '';
            index = 0;
        }
    }

    var updatedDom = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
    Blockly.mainWorkspace.clear();
    Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, updatedDom);
};

Entry.Func.cancelEdit = function () {
    if (!this.targetFunc) return;

    if (!this.targetFunc.block) {
        this._targetFuncBlock.destroy();
        delete Entry.variableContainer.functions_[this.targetFunc.id];
        delete Entry.variableContainer.selected;
    } else {
        if (this._backupContent) {
            this.targetFunc.content.load(this._backupContent);
            Entry.generateFunctionSchema(this.targetFunc.id);
            Entry.Func.generateWsBlock(this.targetFunc, true);
        }
    }
    Entry.variableContainer.updateList();

    var ws = Entry.getMainWS();
    if (ws && ws.overlayModefrom == Entry.Workspace.MODE_VIMBOARD) {
        var mode = {};
        mode.boardType = Entry.Workspace.MODE_VIMBOARD;
        mode.textType = Entry.Vim.TEXT_TYPE_PY;
        mode.runType = Entry.Vim.WORKSPACE_MODE;
        Entry.getMainWS().setMode(mode);
        Entry.variableContainer.functionAddButton_.addClass('disable');
    }
};

Entry.Func.getMenuXml = function () {
    var blocks = [];
    if (!this.targetFunc) blocks = blocks.concat(this.createBtn);
    if (this.targetFunc) {
        var fieldXml = this.FIELD_BLOCK;
        fieldXml = fieldXml.replace('#1', Entry.generateHash());
        fieldXml = fieldXml.replace('#2', Entry.generateHash());
        var xml = Blockly.Xml.textToDom(fieldXml).childNodes;
        blocks = blocks.concat(Entry.nodeListToArray(xml));
    }
    for (var i in Entry.variableContainer.functions_) {
        var func = Entry.variableContainer.functions_[i];
        if (func === this.targetFunc) {
            var block = Entry.Func.generateBlock(this.targetFunc, Blockly.Xml.workspaceToDom(Entry.Func.workspace), func.id).block;
            blocks.push(block);
        } else blocks.push(func.block);
    }
    return blocks;
};

Entry.Func.syncFunc = function () {
    var func = Entry.Func;
    if (!func.targetFunc) return;
    var fieldText = func.workspace.topBlocks_[0].toString();
    var workspaceLength = func.workspace.topBlocks_.length;
    if ((func.fieldText != fieldText || func.workspaceLength != workspaceLength) && Blockly.Block.dragMode_ < 1) {
        func.updateMenu();
        func.fieldText = fieldText;
        func.workspaceLength = workspaceLength;
    }
};

Entry.Func.setupMenuCode = function () {
    var workspace = Entry.playground.mainWorkspace;
    if (!workspace) return;
    var blockMenu = workspace.getBlockMenu();
    var menuCode = blockMenu.code;
    var CATEGORY = 'func';
    this._fieldLabel = menuCode.createThread([{
        type: "function_field_label",
        copyable: false,
        category: CATEGORY,
        x: -9999
    }]).getFirstBlock();

    this._fieldString = menuCode.createThread([{
        type: "function_field_string",
        category: CATEGORY,
        x: -9999,
        copyable: false,
        params: [{ type: this.requestParamBlock("string") }]
    }]).getFirstBlock();

    this._fieldBoolean = menuCode.createThread([{
        type: "function_field_boolean",
        copyable: false,
        category: CATEGORY,
        x: -9999,
        params: [{ type: this.requestParamBlock("boolean") }]
    }]).getFirstBlock();

    this.menuCode = menuCode;
    blockMenu.align();
};

Entry.Func.refreshMenuCode = function () {
    if (!Entry.playground.mainWorkspace) return;
    if (!this.menuCode) this.setupMenuCode();

    this._fieldString.params[0].changeType(this.requestParamBlock("string"));
    this._fieldBoolean.params[0].changeType(this.requestParamBlock("boolean"));
};

Entry.Func.requestParamBlock = function (type) {
    var blockPrototype;
    switch (type) {
        case "string":
            blockPrototype = Entry.block.function_param_string;
            break;
        case "boolean":
            blockPrototype = Entry.block.function_param_boolean;
            break;
        default:
            return null;
    }

    var blockType = type + "Param_" + Entry.generateHash();
    Entry.block[blockType] = Entry.Func.createParamBlock(blockType, blockPrototype, type);
    return blockType;
};

Entry.Func.registerParamBlock = function (type) {
    if (!type) return;

    var blockPrototype;
    if (type.indexOf("stringParam") > -1) blockPrototype = Entry.block.function_param_string;else if (type.indexOf("booleanParam") > -1) blockPrototype = Entry.block.function_param_boolean;

    //not a function param block
    if (!blockPrototype) return;

    Entry.Func.createParamBlock(type, blockPrototype, type);
};

Entry.Func.createParamBlock = function (type, blockPrototype, originalType) {
    originalType = /string/gi.test(originalType) ? "function_param_string" : "function_param_boolean";
    var blockSchema = function blockSchema() {};
    blockSchema.prototype = blockPrototype;
    blockSchema = new blockSchema();
    blockSchema.changeEvent = new Entry.Event();
    blockSchema.template = Lang.template[originalType];

    Entry.block[type] = blockSchema;
    return blockSchema;
};

Entry.Func.updateMenu = function () {
    var workspace = Entry.getMainWS();
    if (!workspace) return;
    var blockMenu = workspace.getBlockMenu();
    if (this.targetFunc) {
        !this.menuCode && this.setupMenuCode();
        blockMenu.banClass("functionInit", true);
        blockMenu.unbanClass("functionEdit", true);
    } else {
        !workspace.isVimMode() && blockMenu.unbanClass("functionInit", true);
        blockMenu.banClass("functionEdit", true);
    }
    blockMenu.lastSelector === 'func' && blockMenu.align();
};

Entry.Func.prototype.edit = function () {
    if (Entry.Func.isEdit) return;
    Entry.Func.isEdit = true;
    if (!Entry.Func.svg) Entry.Func.initEditView();else {
        this.parentView.appendChild(this.svg);
    }
};

Entry.Func.generateBlock = function (func) {
    var blockSchema = Entry.block["func_" + func.id];
    var block = {
        template: blockSchema.template,
        params: blockSchema.params
    };

    var reg = /(%\d)/mi;
    var templateParams = blockSchema.template.split(reg);
    var description = "";
    var booleanIndex = 0;
    var stringIndex = 0;
    for (var i in templateParams) {
        var templateChunk = templateParams[i];
        if (reg.test(templateChunk)) {
            var paramIndex = Number(templateChunk.split('%')[1]) - 1;
            var param = blockSchema.params[paramIndex];
            if (param.type === "Indicator") {} else if (param.accept === "boolean") {
                description += Lang.template.function_param_boolean + (booleanIndex ? booleanIndex : "");
                booleanIndex++;
            } else {
                description += Lang.template.function_param_string + (stringIndex ? stringIndex : "");
                stringIndex++;
            }
        } else {
            description += templateChunk;
        }
    }

    return { block: block, description: description };
};

Entry.Func.prototype.generateBlock = function (toSave) {
    var generatedInfo = Entry.Func.generateBlock(this);
    this.block = generatedInfo.block;
    this.description = generatedInfo.description;
};

Entry.Func.generateWsBlock = function (targetFunc, isRestore) {
    this.unbindFuncChangeEvent();
    targetFunc = targetFunc ? targetFunc : this.targetFunc;
    var defBlock = targetFunc.content.getEventMap("funcDef")[0];

    if (!defBlock) return;

    var outputBlock = defBlock.params[0];
    var booleanIndex = 0;
    var stringIndex = 0;
    var schemaParams = [];
    var schemaTemplate = "";
    var hashMap = targetFunc.hashMap;
    var paramMap = targetFunc.paramMap;
    var blockIds = [];

    while (outputBlock) {
        var value = outputBlock.params[0];
        var valueType = value.type;
        switch (outputBlock.type) {
            case 'function_field_label':
                schemaTemplate = schemaTemplate + " " + value;
                break;
            case 'function_field_boolean':
                Entry.Mutator.mutate(valueType, {
                    template: Lang.Blocks.FUNCTION_logical_variable + " " + (booleanIndex + 1)
                });
                hashMap[valueType] = false;
                paramMap[valueType] = booleanIndex + stringIndex;
                booleanIndex++;
                schemaParams.push({
                    type: "Block",
                    accept: "boolean"
                });
                schemaTemplate += " %" + (booleanIndex + stringIndex);
                blockIds.push(outputBlock.id);
                break;
            case 'function_field_string':
                Entry.Mutator.mutate(valueType, {
                    template: Lang.Blocks.FUNCTION_character_variable + " " + (stringIndex + 1)
                });
                hashMap[valueType] = false;
                paramMap[valueType] = booleanIndex + stringIndex;
                stringIndex++;
                schemaTemplate += " %" + (booleanIndex + stringIndex);
                schemaParams.push({
                    type: "Block",
                    accept: "string"
                });
                blockIds.push(outputBlock.id);
                break;
        }
        outputBlock = outputBlock.getOutputBlock();
    }

    schemaTemplate += " %" + (booleanIndex + stringIndex + 1);
    schemaParams.push({
        "type": "Indicator",
        "img": "block_icon/function_03.png",
        "size": 12
    });

    var funcName = "func_" + targetFunc.id;
    var block = Entry.block[funcName];

    var originParams = block.params.slice(0, block.params.length - 1);
    var newParams = schemaParams.slice(0, schemaParams.length - 1);
    var originParamsLength = originParams.length;
    var newParamsLength = newParams.length;

    var changeData = {};

    if (newParamsLength > originParamsLength) {
        var outputBlockIds = targetFunc.outputBlockIds;
        if (outputBlockIds) {
            var startPos = 0;
            while (outputBlockIds[startPos] === blockIds[startPos]) {
                startPos++;
            }var endPos = 0;
            while (outputBlockIds[outputBlockIds.length - endPos - 1] === blockIds[blockIds.length - endPos - 1]) {
                endPos++;
            }endPos = blockIds.length - endPos - 1;
            changeData = {
                type: 'insert',
                startPos: startPos,
                endPos: endPos
            };
        }
    } else if (newParamsLength < originParamsLength) {
        changeData = {
            type: 'cut',
            pos: newParamsLength
        };
    } else changeData = { type: 'noChange' };

    changeData.isRestore = isRestore;

    targetFunc.outputBlockIds = blockIds;

    Entry.Mutator.mutate(funcName, {
        params: schemaParams,
        template: schemaTemplate
    }, changeData);

    for (var key in hashMap) {
        var state = hashMap[key];
        if (state) {
            var text = /string/.test(key) ? Lang.Blocks.FUNCTION_character_variable : Lang.Blocks.FUNCTION_logical_variable;

            Entry.Mutator.mutate(key, { template: text });
        } else hashMap[key] = true;
    }

    this.bindFuncChangeEvent(targetFunc);
};

Entry.Func.bindFuncChangeEvent = function (targetFunc) {
    targetFunc = targetFunc ? targetFunc : this.targetFunc;
    if (!this._funcChangeEvent && targetFunc.content.getEventMap("funcDef")[0].view) this._funcChangeEvent = targetFunc.content.getEventMap("funcDef")[0].view._contents[1].changeEvent.attach(this, this.generateWsBlock);
};

Entry.Func.unbindFuncChangeEvent = function () {
    if (!this._funcChangeEvent) return;
    this._funcChangeEvent.destroy();
    delete this._funcChangeEvent;
};

Entry.Func.unbindWorkspaceStateChangeEvent = function () {
    var event = this._workspaceStateEvent;
    if (!event) return;

    event.destroy();
    delete this._workspaceStateEvent;
};

/***/ }),

/***/ "./src/class/helper.js":
/*!*****************************!*\
  !*** ./src/class/helper.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Object for help message
 */


/**
 * Helper provide block description with 'blockHelper'
 */

Entry.Helper = function () {
    this.visible = false;
    Entry.addEventListener('workspaceChangeMode', function () {
        if (this._blockView) this.renderBlock(this._blockView.type);
    }.bind(this));
    this.resize = Entry.Utils.debounce(this.resize, 300);
};

var p = Entry.Helper.prototype;

p.generateView = function (parentView, option) {
    if (this.parentView_) return;
    /** @type {!Element} parent view */
    this.parentView_ = parentView;
    var helper = this;
    helper.blockHelpData = EntryStatic.blockInfo;
    var blockHelperView = Entry.createElement('div', 'entryBlockHelperWorkspace');
    this.view = blockHelperView;
    if (Entry.isForLecture) blockHelperView.addClass('lecture');
    helper.parentView_.appendChild(blockHelperView);

    var blockHelperContent = Entry.createElement('div', 'entryBlockHelperContentWorkspace');
    this._contentView = blockHelperContent;

    var commandTitle = Entry.createElement('div');
    commandTitle.addClass('entryBlockHelperTitle textModeElem');
    commandTitle.innerHTML = '명령어';
    blockHelperContent.appendChild(commandTitle);

    blockHelperContent.addClass('entryBlockHelperIntro');
    if (Entry.isForLecture) blockHelperContent.addClass('lecture');
    blockHelperView.appendChild(blockHelperContent);
    helper.blockHelperContent_ = blockHelperContent;
    helper.blockHelperView_ = blockHelperView;

    var blockHelperBlock = Entry.createElement('div', 'entryBlockHelperBlockWorkspace');
    helper.blockHelperContent_.appendChild(blockHelperBlock);

    var descTitle = Entry.createElement('div');
    descTitle.addClass('entryBlockHelperTitle textModeElem');
    descTitle.innerHTML = '설명';
    blockHelperContent.appendChild(descTitle);

    var blockHelperDescription = Entry.createElement('div', 'entryBlockHelperDescriptionWorkspace');
    blockHelperDescription.addClass('entryBlockHelperContent selectAble');
    helper.blockHelperContent_.appendChild(blockHelperDescription);
    blockHelperDescription.innerHTML = Lang.Helper.Block_click_msg;
    this.blockHelperDescription_ = blockHelperDescription;

    var elementsTitle = Entry.createElement('div');
    elementsTitle.addClass('entryBlockHelperTitle textModeElem');
    elementsTitle.innerHTML = '요소';
    blockHelperContent.appendChild(elementsTitle);
    this._elementsTitle = elementsTitle;

    this._elementsContainer = Entry.createElement('div', 'entryBlockHelperElementsContainer');

    this._elementsContainer.addClass('entryBlockHelperContent textModeElem selectAble');
    blockHelperContent.appendChild(this._elementsContainer);

    if (typeof CodeMirror !== 'undefined') {
        var codeMirrorTitle = Entry.createElement('div');
        codeMirrorTitle.addClass('entryBlockHelperTitle textModeElem');
        codeMirrorTitle.innerHTML = '예시 코드';
        blockHelperContent.appendChild(codeMirrorTitle);

        var codeMirrorView = Entry.createElement('div', 'entryBlockHelperCodeMirrorContainer');
        codeMirrorView.addClass('textModeElem');
        blockHelperContent.appendChild(codeMirrorView);

        this.codeMirror = CodeMirror(codeMirrorView, {
            lineNumbers: true,
            value: "",
            mode: { name: "python" },
            indentUnit: 4,
            theme: "default",
            viewportMargin: 10,
            styleActiveLine: false,
            readOnly: true
        });

        this._doc = this.codeMirror.getDoc();
        this._codeMirror = this.codeMirror;

        var codeMirrorDescTitle = Entry.createElement('div');
        codeMirrorDescTitle.addClass('entryBlockHelperTitle textModeElem');
        codeMirrorDescTitle.innerHTML = '예시 설명';
        blockHelperContent.appendChild(codeMirrorDescTitle);

        this._codeMirrorDesc = Entry.createElement('div');
        this._codeMirrorDesc.addClass('entryBlockHelperContent textModeElem selectAble');
        blockHelperContent.appendChild(this._codeMirrorDesc);
    }

    this._renderView = new Entry.RenderView($(blockHelperBlock), 'LEFT_MOST');
    this.code = new Entry.Code([]);
    this.code.isFor = 'blockHelper';
    this._renderView.changeCode(this.code);

    this.first = true;
};

p.bindWorkspace = function (workspace) {
    if (!workspace) return;

    if (this._blockViewObserver) this._blockViewObserver.destroy();

    this.workspace = workspace;
    if (this._renderView) this._renderView.workspace = workspace;
    this._blockViewObserver = workspace.observe(this, "_updateSelectedBlock", ['selectedBlockView']);
};

/**
 * toggle on block helper
 */
p._updateSelectedBlock = function () {
    var blockView = this.workspace.selectedBlockView;
    if (!blockView || !this.visible || blockView == this._blockView) return;

    var type = blockView.block.type;
    this._blockView = blockView;
    this.renderBlock(type);
};

p.renderBlock = function (type) {
    var description = Lang.Helper[type];
    if (!type || !this.visible || !description || Entry.block[type].isPrimitive) return;

    if (this.first) {
        this.blockHelperContent_.removeClass('entryBlockHelperIntro');
        this.first = false;
    }

    var code = this.code;
    code.clear();
    var def = Entry.block[type].def || { type: type };

    if (this.workspace.getMode() === Entry.Workspace.MODE_VIMBOARD) {
        this._contentView.addClass('textMode');
        this.blockHelperDescription_.innerHTML = Lang.PythonHelper[type + '_desc'];

        var elements = Lang.PythonHelper[type + '_elements'];
        this._elementsContainer.innerHTML = '';
        if (elements) {
            this._elementsTitle.removeClass('entryRemove');
            elements = elements.split('%next');
            while (elements.length) {
                (function (elems) {
                    var contents = elems.split('-- ');
                    var box = Entry.createElement('div');
                    box.addClass('entryBlockHelperElementsContainer');
                    var left = Entry.createElement('div');

                    left.innerHTML = contents[0];
                    left.addClass('elementLeft');

                    var right = Entry.createElement('div');
                    right.addClass('elementRight');
                    right.innerHTML = contents[1];
                    box.appendChild(left);
                    box.appendChild(right);
                    this._elementsContainer.appendChild(box);
                }).bind(this)(elements.shift());
            }
        } else {
            this._elementsTitle.addClass('entryRemove');
        }
        this._codeMirrorDesc.innerHTML = Lang.PythonHelper[type + '_exampleDesc'];

        var exampleCode = Lang.PythonHelper[type + '_exampleCode'];
        this._codeMirror.setValue(exampleCode);
        this.codeMirror.refresh();
        def = Entry.block[type].pyHelpDef || def;
    } else {
        this._contentView.removeClass('textMode');
        this.blockHelperDescription_.innerHTML = description;
    }

    code.createThread([def]);

    code.board.align();
    code.board.resize();

    this._renderView.align();
    this._renderView.setDomSize();
};

p.getView = function () {
    return this.view;
};

p.resize = function () {
    this.codeMirror && this.codeMirror.refresh();
};

/***/ }),

/***/ "./src/class/hw.js":
/*!*************************!*\
  !*** ./src/class/hw.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview HW object class for connect arduino.
 */


__webpack_require__(/*! ../playground/blocks */ "./src/playground/blocks/index.js");

Entry.HW = function () {
    this.sessionRoomId = localStorage.getItem('entryhwRoomId');
    if (!this.sessionRoomId) {
        this.sessionRoomId = this.createRandomRoomId();
        localStorage.setItem('entryhwRoomId', this.sessionRoomId);
    }

    this.connectTrial = 0;
    this.isFirstConnect = true;
    this.requireVerion = 'v1.6.1';
    this.hwPopupCreate();
    this.initSocket();
    this.connected = false;
    this.portData = {};
    this.sendQueue = {};
    this.outputQueue = {};
    this.settingQueue = {};
    this.selectedDevice = null;
    this.hwModule = null;
    this.socketType = null;

    Entry.addEventListener('stop', this.setZero);

    this.hwInfo = Entry.HARDWARE_LIST;
};

Entry.HW.TRIAL_LIMIT = 2;

var p = Entry.HW.prototype;

p.createRandomRoomId = function () {
    return 'xxxxxxxxyx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0,
            v = c == 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
    });
};

p.connectWebSocket = function (url, option) {
    var hw = this;
    var socket = io(url, option);
    socket.io.reconnectionAttempts(Entry.HW.TRIAL_LIMIT);
    socket.io.reconnectionDelayMax(1000);
    socket.io.timeout(1000);
    socket.on('connect', function () {
        hw.socketType = 'WebSocket';
        hw.initHardware(socket);
    });

    socket.on('mode', function (mode) {
        if (socket.mode === 0 && mode === 1) {
            hw.disconnectHardware();
        }
        hw.socketMode = mode;
        socket.mode = mode;
    });

    socket.on('message', function (msg) {
        if (msg.data && typeof msg.data === 'string') {
            switch (msg.data) {
                case 'disconnectHardware':
                    {
                        hw.disconnectHardware();
                        break;
                    }
                default:
                    {
                        var data = JSON.parse(msg.data);
                        hw.checkDevice(data, msg.version);
                        hw.updatePortData(data);
                        break;
                    }
            }
        }
    });

    socket.on('disconnect', function () {
        hw.initSocket();
    });

    return socket;
};

p.initSocket = function () {
    try {
        var hw = this;
        var protocol = '';
        this.connected = false;

        if (this.tlsSocketIo1) {
            this.tlsSocketIo1.removeAllListeners();
        }
        if (this.tlsSocketIo2) {
            this.tlsSocketIo2.removeAllListeners();
        }
        if (this.socketIo) {
            this.socketIo.removeAllListeners();
        }

        if (!this.isOpenHardware) {
            this.checkOldClient();
        }
        if (location.protocol.indexOf('https') > -1) {
            try {
                this.tlsSocketIo1 = this.connectWebSocket('https://hardware.playentry.org:23518', { query: { 'client': true, 'roomId': this.sessionRoomId } });
            } catch (e) {}
            try {
                this.tlsSocketIo2 = this.connectWebSocket('https://hardware.play-entry.org:23518', { query: { 'client': true, 'roomId': this.sessionRoomId } });
            } catch (e) {}
        } else {
            try {
                this.socketIo = this.connectWebSocket('http://127.0.0.1:23518', { query: { 'client': true, 'roomId': this.sessionRoomId } });
            } catch (e) {}
            try {
                this.tlsSocketIo1 = this.connectWebSocket('https://hardware.playentry.org:23518', { query: { 'client': true, 'roomId': this.sessionRoomId } });
            } catch (e) {}
            try {
                this.tlsSocketIo2 = this.connectWebSocket('https://hardware.play-entry.org:23518', { query: { 'client': true, 'roomId': this.sessionRoomId } });
            } catch (e) {}
        }

        Entry.dispatchEvent("hwChanged");
    } catch (e) {}
};

p.checkOldClient = function () {
    try {
        var hw = this;
        var websocket = new WebSocket('wss://hardware.play-entry.org:23518');
        websocket.onopen = function () {
            hw.popupHelper.show('newVersion', true);
            websocket.close();
        };
    } catch (e) {}
};

p.retryConnect = function () {
    this.isOpenHardware = false;
    Entry.HW.TRIAL_LIMIT = 5;
    this.initSocket();
};

p.openHardwareProgram = function () {
    var hw = this;
    this.isOpenHardware = true;
    Entry.HW.TRIAL_LIMIT = 5;
    this.executeHardware();

    if (!this.socket || !this.socket.connected) {
        setTimeout(function () {
            hw.initSocket();
        }, 1000);
    }
};

p.initHardware = function (socket) {
    this.socket = socket;
    this.connectTrial = 0;
    this.connected = true;
    Entry.dispatchEvent("hwChanged");
    if (Entry.playground && Entry.playground.object) {
        Entry.playground.setMenu(Entry.playground.object.objectType);
    }
};

p.disconnectHardware = function () {
    Entry.propertyPanel && Entry.propertyPanel.removeMode("hw");
    this.selectedDevice = undefined;
    this.hwModule = undefined;
    Entry.dispatchEvent("hwChanged");
};

p.disconnectedSocket = function () {
    this.tlsSocketIo1 && this.tlsSocketIo1.close();
    this.tlsSocketIo2 && this.tlsSocketIo2.close();
    this.socketIo && this.socketIo.close();

    Entry.propertyPanel && Entry.propertyPanel.removeMode("hw");
    this.socket = undefined;
    this.connectTrial = 0;
    this.connected = false;
    this.selectedDevice = undefined;
    this.hwModule = undefined;
    Entry.dispatchEvent("hwChanged");
    Entry.toast.alert("하드웨어 프로그램 연결 종료", "하드웨어 프로그램과의 연결이 종료되었습니다.", false);
};

p.setDigitalPortValue = function (port, value) {
    this.sendQueue[port] = value;
    this.removePortReadable(port);
};

p.getAnalogPortValue = function (port) {
    if (!this.connected) {
        return 0;
    }
    return this.portData['a' + port];
};

p.getDigitalPortValue = function (port) {
    if (!this.connected) return 0;
    this.setPortReadable(port);
    if (this.portData[port] !== undefined) {
        return this.portData[port];
    } else {
        return 0;
    }
};

p.setPortReadable = function (port) {
    if (!this.sendQueue.readablePorts) {
        this.sendQueue.readablePorts = [];
    }

    var isPass = false;
    for (var i in this.sendQueue.readablePorts) {
        if (this.sendQueue.readablePorts[i] == port) {
            isPass = true;
            break;
        }
    }

    if (!isPass) {
        this.sendQueue.readablePorts.push(port);
    }
};
p.removePortReadable = function (port) {
    if (!this.sendQueue.readablePorts && !Array.isArray(this.sendQueue.readablePorts)) return;
    var target;
    for (var i in this.sendQueue.readablePorts) {
        if (this.sendQueue.readablePorts[i] == port) {
            target = Number(i);
            break;
        }
    }

    if (target != undefined) {
        this.sendQueue.readablePorts = this.sendQueue.readablePorts.slice(0, target).concat(this.sendQueue.readablePorts.slice(target + 1, this.sendQueue.readablePorts.length));
    }
};

p.update = function () {
    if (!this.socket) {
        return;
    }
    if (this.socket.disconnected) {
        return;
    }
    this.socket.emit('message', { data: JSON.stringify(this.sendQueue), mode: this.socket.mode, type: 'utf8' });
};

p.updatePortData = function (data) {
    this.portData = data;
    if (this.hwMonitor && Entry.propertyPanel && Entry.propertyPanel.selected == 'hw') {
        this.hwMonitor.update();
    }
};

p.closeConnection = function () {
    if (this.socket) {
        this.socket.close();
    }
};

p.downloadConnector = function () {
    Entry.dispatchEvent("hwDownload", "hardware");
};

p.downloadGuide = function () {
    Entry.dispatchEvent("hwDownload", "manual");
    // var url = "http://download.play-entry.org/data/hardware_manual.zip";
    // window.open(url, 'download');
};

p.downloadSource = function () {
    Entry.dispatchEvent("hwDownload", "ino");
    // var url = "http://play-entry.com/down/board.ino";
    // var win = window.open(url, '_blank');
    // win.focus();
};

p.setZero = function () {
    if (!Entry.hw.hwModule) return;
    Entry.hw.hwModule.setZero();
};

p.checkDevice = function (data, version) {
    if (data.company === undefined) return;
    var key = [Entry.Utils.convertIntToHex(data.company), '.', Entry.Utils.convertIntToHex(data.model)].join('');
    if (key == this.selectedDevice) {
        if (this.hwModule && this.hwModule.dataHandler) {
            this.hwModule.dataHandler(data);
        }
        return;
    }

    if (Entry.Utils.isNewVersion(version, this.requireVerion)) {
        this.popupHelper.show('newVersion', true);
    }

    this.selectedDevice = key;
    this.hwModule = this.hwInfo[key];
    if (!this.hwModule) {
        return;
    }
    Entry.dispatchEvent("hwChanged");

    var descMsg = '';
    if (Entry.propertyPanel && this.hwModule.monitorTemplate) {
        descMsg = Lang.Msgs.hw_connection_success_desc;
        if (!this.hwMonitor) {
            this.hwMonitor = new Entry.HWMonitor(this.hwModule);
        } else {
            this.hwMonitor._hwModule = this.hwModule;
            this.hwMonitor.initView();
        }
        Entry.propertyPanel.addMode("hw", this.hwMonitor);
        var mt = this.hwModule.monitorTemplate;
        if (mt.mode == "both") {
            mt.mode = "list";
            this.hwMonitor.generateListView();
            mt.mode = "general";
            this.hwMonitor.generateView();
            mt.mode = "both";
        } else if (mt.mode == "list") {
            this.hwMonitor.generateListView();
        } else {
            this.hwMonitor.generateView();
        }
    } else {
        descMsg = Lang.Msgs.hw_connection_success_desc2;
    }
    Entry.toast.success(Lang.Msgs.hw_connection_success, descMsg);
};

p.banHW = function () {
    for (var i in this.hwInfo) {
        var hwModule = this.hwInfo[i];
        if (!hwModule) {
            continue;
        }
        Entry.playground.mainWorkspace.blockMenu.banClass(hwModule.name, true);
    }
};

p.executeHardware = function () {
    var hw = this;
    var executeIeCustomLauncher = {
        _bNotInstalled: false,
        init: function init(sUrl, fpCallback) {
            var width = 220;
            var height = 225;
            var left = window.screenLeft;
            var top = window.screenTop;
            var settings = 'width=' + width + ', height=' + height + ',  top=' + top + ', left=' + left;
            this._w = window.open('/views/hwLoading.html', "entry_hw_launcher", settings);
            var fnInterval = null;
            fnInterval = setTimeout(function () {
                executeIeCustomLauncher.runViewer(sUrl, fpCallback);
                clearInterval(fnInterval);
            }, 1000);
        },
        runViewer: function runViewer(sUrl, fpCallback) {
            this._w.document.write("<iframe src='" + sUrl + "' onload='opener.Entry.hw.ieLauncher.set()' style='display:none;width:0;height:0'></iframe>");
            var nCounter = 0;
            var bNotInstalled = false;
            var nInterval = null;
            nInterval = setInterval(function () {
                try {
                    this._w.location.href;
                } catch (e) {
                    this._bNotInstalled = true;
                }

                if (bNotInstalled || nCounter > 10) {
                    clearInterval(nInterval);
                    var nCloseCounter = 0;
                    var nCloseInterval = null;
                    nCloseInterval = setInterval(function () {
                        nCloseCounter++;
                        if (this._w.closed || nCloseCounter > 2) {
                            clearInterval(nCloseInterval);
                        } else {
                            this._w.close();
                        }
                        this._bNotInstalled = false;
                        nCounter = 0;
                    }.bind(this), 5000);
                    fpCallback(!this._bNotInstalled);
                }
                nCounter++;
            }.bind(this), 100);
        },
        set: function set() {
            this._bNotInstalled = true;
        }
    };

    hw.ieLauncher = executeIeCustomLauncher;

    var entryHardwareUrl = 'entryhw://-roomId:' + this.sessionRoomId;
    if (navigator.userAgent.indexOf("MSIE") > 0 || navigator.userAgent.indexOf("Trident") > 0) {
        if (navigator.msLaunchUri != undefined) {
            executeIe(entryHardwareUrl);
        } else {
            var ieVersion;
            if (document.documentMode > 0) {
                ieVersion = document.documentMode;
            } else {
                ieVersion = navigator.userAgent.match(/(?:MSIE) ([0-9.]+)/)[1];
            }

            if (ieVersion < 9) {
                alert(Lang.msgs.not_support_browser);
            } else {
                executeIeCustomLauncher.init(entryHardwareUrl, function (bInstalled) {
                    if (bInstalled == false) {
                        hw.popupHelper.show('hwDownload', true);
                    }
                });
            }
        }
    } else if (navigator.userAgent.indexOf("Firefox") > 0) {
        executeFirefox(entryHardwareUrl);
    } else if (navigator.userAgent.indexOf("Chrome") > 0 || navigator.userAgent.indexOf("Safari") > 0) {
        executeChrome(entryHardwareUrl);
    } else {
        alert(Lang.msgs.not_support_browser);
    }

    function executeIe(customUrl) {
        navigator.msLaunchUri(customUrl, function () {}, function () {
            hw.popupHelper.show('hwDownload', true);
        });
    }

    function executeFirefox(customUrl) {
        var iFrame = document.createElement('iframe');
        iFrame.src = "about:blank";
        iFrame.style = "display:none";
        document.getElementsByTagName("body")[0].appendChild(iFrame);
        var fnTimeout = null;
        fnTimeout = setTimeout(function () {
            var isInstalled = false;
            try {
                iFrame.contentWindow.location.href = customUrl;
                isInstalled = true;
            } catch (e) {
                if (e.name == "NS_ERROR_UNKNOWN_PROTOCOL") {
                    isInstalled = false;
                }
            }

            if (!isInstalled) {
                hw.popupHelper.show('hwDownload', true);
            }

            document.getElementsByTagName("body")[0].removeChild(iFrame);
            clearTimeout(fnTimeout);
        }, 500);
    }

    function executeChrome(customUrl) {
        var isInstalled = false;
        window.focus();
        $(window).one('blur', function () {
            isInstalled = true;
        });
        Entry.dispatchEvent('workspaceUnbindUnload', true);
        location.assign(encodeURI(customUrl));
        setTimeout(function () {
            Entry.dispatchEvent('workspaceBindUnload', true);
        }, 100);
        setTimeout(function () {
            if (isInstalled == false) {
                hw.popupHelper.show('hwDownload', true);
            }
            window.onblur = null;
        }, 3000);
    }
};

p.hwPopupCreate = function () {
    var hw = this;
    if (!this.popupHelper) {
        if (window.popupHelper) {
            this.popupHelper = window.popupHelper;
        } else {
            this.popupHelper = new Entry.popupHelper(true);
        }
    }

    this.popupHelper.addPopup('newVersion', {
        type: 'confirm',
        title: Lang.Msgs.new_version_title,
        setPopupLayout: function setPopupLayout(popup) {
            var content = Entry.Dom('div', {
                class: 'contentArea'
            });
            var text = Entry.Dom('div', {
                class: 'textArea',
                parent: content
            });
            var text1 = Entry.Dom('div', {
                class: 'text1',
                parent: text
            });
            var text2 = Entry.Dom('div', {
                class: 'text2',
                parent: text
            });
            var text3 = Entry.Dom('div', {
                class: 'text3',
                parent: text
            });
            var text4 = Entry.Dom('div', {
                class: 'text4',
                parent: text
            });
            var cancel = Entry.Dom('div', {
                classes: ['popupCancelBtn', 'popupDefaultBtn'],
                parent: content
            });
            var ok = Entry.Dom('div', {
                classes: ['popupOkBtn', 'popupDefaultBtn'],
                parent: content
            });
            text1.text(Lang.Msgs.new_version_text1);
            text2.html(Lang.Msgs.new_version_text2);
            text3.text(Lang.Msgs.new_version_text3);
            text4.text(Lang.Msgs.new_version_text4);
            cancel.text(Lang.Buttons.cancel);
            ok.html(Lang.Msgs.new_version_download);

            content.bindOnClick('.popupDefaultBtn', function (e) {
                var $this = $(this);
                if ($this.hasClass('popupOkBtn')) {
                    hw.downloadConnector();
                }

                hw.popupHelper.hide('newVersion');
            });

            popup.append(content);
        }
    });

    this.popupHelper.addPopup('hwDownload', {
        type: 'confirm',
        title: Lang.Msgs.not_install_title,
        setPopupLayout: function setPopupLayout(popup) {
            var content = Entry.Dom('div', {
                class: 'contentArea'
            });
            var text = Entry.Dom('div', {
                class: 'textArea',
                parent: content
            });
            var text1 = Entry.Dom('div', {
                class: 'text1',
                parent: text
            });
            var text2 = Entry.Dom('div', {
                class: 'text2',
                parent: text
            });
            var text3 = Entry.Dom('div', {
                class: 'text3',
                parent: text
            });
            var text4 = Entry.Dom('div', {
                class: 'text4',
                parent: text
            });
            var cancel = Entry.Dom('div', {
                classes: ['popupCancelBtn', 'popupDefaultBtn'],
                parent: content
            });
            var ok = Entry.Dom('div', {
                classes: ['popupOkBtn', 'popupDefaultBtn'],
                parent: content
            });
            text1.text(Lang.Msgs.hw_download_text1);
            text2.html(Lang.Msgs.hw_download_text2);
            text3.text(Lang.Msgs.hw_download_text3);
            text4.text(Lang.Msgs.hw_download_text4);
            cancel.text(Lang.Buttons.cancel);
            ok.html(Lang.Msgs.hw_download_btn);

            content.bindOnClick('.popupDefaultBtn', function (e) {
                var $this = $(this);
                if ($this.hasClass('popupOkBtn')) {
                    hw.downloadConnector();
                }

                hw.popupHelper.hide('hwDownload');
            });

            popup.append(content);
        }
    });
};

/***/ }),

/***/ "./src/class/hw_monitor.js":
/*!*********************************!*\
  !*** ./src/class/hw_monitor.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Entry.HWMonitor = function (hwModule) {
    this.svgDom = Entry.Dom($('<svg id="hwMonitor" width="100%" height="100%"' + 'version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'));

    this._hwModule = hwModule;
    var that = this;
    Entry.addEventListener('windowResized', function () {
        var mode = that._hwModule.monitorTemplate.mode;
        if (mode == 'both') {
            that.resize();
            that.resizeList();
        }

        if (mode == 'list') {
            that.resizeList();
        } else {
            that.resize();
        }
    });
    Entry.addEventListener('hwModeChange', function () {
        that.changeMode();
    });
    this.changeOffset = 0; // 0 : off 1: on
    this.scale = 0.5;
    this._listPortViews = {};
};

(function (p) {
    p.initView = function () {
        this.svgDom = Entry.Dom($('<svg id="hwMonitor" width="100%" height="100%"' + 'version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'));
    };
    p.generateView = function () {
        this.snap = Entry.SVG('hwMonitor');
        this._svgGroup = this.snap.elem('g');
        this._portMap = {
            n: [],
            e: [],
            s: [],
            w: []
        };

        var monitorTemplate = this._hwModule.monitorTemplate;

        var imgObj = {
            href: Entry.mediaFilePath + monitorTemplate.imgPath,
            x: -monitorTemplate.width / 2,
            y: -monitorTemplate.height / 2,

            width: monitorTemplate.width,
            height: monitorTemplate.height
        };

        this._portViews = {};
        this.hwView = this._svgGroup.elem('image');
        this.hwView = this.hwView.attr(imgObj);
        this._template = monitorTemplate;
        var ports = monitorTemplate.ports;
        this.pathGroup = null;
        this.pathGroup = this._svgGroup.elem('g');

        var portsTemp = [];
        for (var key in ports) {
            var port = ports[key];
            var portView = this.generatePortView(port, '_svgGroup');

            this._portViews[key] = portView;
            portsTemp.push(portView);
        }

        portsTemp.sort(function (a, b) {
            return a.box.x - b.box.x;
        });

        var portMap = this._portMap;

        portsTemp.map(function (v) {
            var degree = (Math.atan2(-v.box.y, v.box.x) / Math.PI + 2) % 2;
            var map;

            if (degree < 1) {
                map = portMap.n;
            } else {
                map = portMap.s;
            }
            map.push(v);
        });
        this.resize();
    };

    p.toggleMode = function (mode) {
        var monitorTemplate = this._hwModule.monitorTemplate;
        if (mode == 'list') {
            monitorTemplate.TempPort = null;
            if (this._hwModule.monitorTemplate.ports) {
                this._hwModule.monitorTemplate.TempPort = this._hwModule.monitorTemplate.ports;
                this._hwModule.monitorTemplate.listPorts = this.addPortEle(this._hwModule.monitorTemplate.listPorts, this._hwModule.monitorTemplate.ports);
            }

            $(this._svglistGroup).remove();

            if (this._svgGroup) {
                $(this._svgGroup).remove();
            }

            $(this._pathGroup).remove();
            this._hwModule.monitorTemplate.mode = 'list';
            this.generateListView();
        } else {
            if (this._hwModule.monitorTemplate.TempPort) {
                this._hwModule.monitorTemplate.ports = this._hwModule.monitorTemplate.TempPort;
                this._hwModule.monitorTemplate.listPorts = this.removePortEle(this._hwModule.monitorTemplate.listPorts, this._hwModule.monitorTemplate.ports);
            }

            $(this._svglistGroup).remove();
            this._hwModule.monitorTemplate.mode = 'both';
            this.generateListView();
            this.generateView();
        }
    };

    p.setHwmonitor = function (module) {
        this._hwmodule = module;
    };

    p.changeMode = function (e) {
        if (this._hwModule.monitorTemplate.mode == 'both') {
            this.toggleMode('list');
        } else if (this._hwModule.monitorTemplate.mode == 'list') {
            this.toggleMode('both');
        } else {
            return;
        }
    };

    p.addPortEle = function (listPort, ports) {
        if ((typeof ports === 'undefined' ? 'undefined' : _typeof(ports)) != 'object') {
            return listPort;
        }

        for (var item in ports) {
            listPort[item] = ports[item];
        }

        return listPort;
    };

    p.removePortEle = function (listPort, ports) {
        if ((typeof ports === 'undefined' ? 'undefined' : _typeof(ports)) != 'object') {
            return listPort;
        }

        for (var item in ports) {
            delete listPort[item];
        }
        return listPort;
    };

    p.generateListView = function () {
        this._portMapList = {
            n: []
        };
        this._svglistGroup = null;

        this.listsnap = Entry.SVG('hwMonitor');
        this._svglistGroup = this.listsnap.elem('g');
        var monitorTemplate = this._hwModule.monitorTemplate;
        this._template = monitorTemplate;
        var ports = monitorTemplate.listPorts;

        this.pathGroup = this._svglistGroup.elem('g');

        var portsTempList = [];

        for (var key in ports) {
            var port = ports[key];
            var portView = this.generatePortView(port, '_svglistGroup');

            this._listPortViews[key] = portView;
            portsTempList.push(portView);
        }
        var portMapList = this._portMapList;

        portsTempList.map(function (v) {
            portMapList.n.push(v);
        });

        this.resizeList();
    };

    p.generatePortView = function (port, target) {
        var svgGroup = this[target].elem('g');
        svgGroup.addClass('hwComponent');
        var path = null;

        path = this.pathGroup.elem('path').attr({
            d: 'm0,0',
            fill: 'none',
            stroke: port.type === 'input' ? '#00979d' : '#A751E3',
            'stroke-width': 3
        });

        var wrapperRect = svgGroup.elem('rect').attr({
            x: 0,
            y: 0,
            width: 150,
            height: 22,
            rx: 4,
            ry: 4,
            fill: '#fff',
            stroke: '#a0a1a1'
        });
        var nameView = svgGroup.elem('text').attr({
            x: 4,
            y: 12,
            fill: '#000',
            class: 'hwComponentName',
            'alignment-baseline': 'central'
        });
        nameView.textContent = port.name;

        var width = nameView.getComputedTextLength();

        var valueRect = svgGroup.elem('rect').attr({
            x: width + 8,
            y: 2,
            width: 30,
            height: 18,
            rx: 9,
            ry: 9,
            fill: port.type === 'input' ? '#00979d' : '#A751E3'
        });

        var valueView = svgGroup.elem('text').attr({
            x: width + 13,
            y: 12,
            fill: '#fff',
            class: 'hwComponentValue',
            'alignment-baseline': 'central'
        });
        valueView.textContent = 0;
        width += 40;

        wrapperRect.attr({
            width: width
        });

        var returnObj = {
            group: svgGroup,
            value: valueView,
            type: port.type,
            path: path,
            box: {
                x: port.pos.x - this._template.width / 2,
                y: port.pos.y - this._template.height / 2,
                width: width
            },
            width: width
        };

        var mode = this._hwModule.monitorTemplate.mode;
        return returnObj;
    };

    p.getView = function () {
        return this.svgDom;
    };

    p.update = function () {
        var portData = Entry.hw.portData;
        var sendQueue = Entry.hw.sendQueue;
        var readablePort = sendQueue.readablePort;
        var mode = this._hwModule.monitorTemplate.mode;
        var objectKeys = this._hwModule.monitorTemplate.keys || [];
        var portView = [];

        if (mode == 'list') {
            portView = this._listPortViews;
        } else if (mode == 'both') {
            portView = this._listPortViews;

            if (this._portViews) for (var item in this._portViews) {
                portView[item] = this._portViews[item];
            }
        } else {
            portView = this._portViews;
        }

        if (sendQueue) {
            for (var item in sendQueue) {
                if (sendQueue[item] != 0 && portView[item]) portView[item].type = 'output';
            }
        }

        for (var key in portView) {
            var port = portView[key];

            if (port.type == 'input') {
                var value = portData[key];
                if (objectKeys.length > 0) {
                    $.each(objectKeys, function (idx, valueKey) {
                        if ($.isPlainObject(value)) {
                            value = value[valueKey] || 0;
                        } else {
                            return false;
                        }
                    });
                    port.value.textContent = value ? value : 0;
                    port.group.getElementsByTagName('rect')[1].attr({ fill: '#00979D' });
                } else {
                    port.value.textContent = value ? value : 0;
                    port.group.getElementsByTagName('rect')[1].attr({ fill: '#00979D' });
                }
            } else {
                var value = sendQueue[key];
                if (objectKeys.length > 0) {
                    $.each(objectKeys, function (idx, valueKey) {
                        if ($.isPlainObject(value)) {
                            value = value[valueKey] || 0;
                        } else {
                            return false;
                        }
                    });
                    port.value.textContent = value ? value : 0;
                    port.group.getElementsByTagName('rect')[1].attr({ fill: '#A751E3' });
                } else {
                    port.value.textContent = value ? value : 0;
                    port.group.getElementsByTagName('rect')[1].attr({ fill: '#A751E3' });
                }
            }
        }
    };

    p.resize = function () {
        if (this.hwView) {
            this.hwView.attr({
                transform: 'scale(' + this.scale + ')'
            });
        }

        if (this.svgDom) {
            var bRect = this.svgDom.get(0).getBoundingClientRect();
        }

        var mode = this._hwModule.monitorTemplate.mode;

        this._svgGroup.attr({
            transform: 'translate(' + bRect.width / 2 + ',' + bRect.height / 1.8 + ')'
        });

        this._rect = bRect;

        if (this._template.height <= 0 || bRect.height <= 0) {
            return;
        }

        this.scale = this._template.height * (bRect.height / this._template.height) / 1000;
        var temp = (1 - this.scale) / 2;
        this.align();
    };

    p.resizeList = function () {
        var bRect = this.svgDom.get(0).getBoundingClientRect();
        this._svglistGroup.attr({
            transform: 'translate(' + bRect.width / 2 + ',' + bRect.height / 2 + ')'
        });
        this._rect = bRect;
        this.alignList();
    };

    p.align = function () {
        var ports = [];

        var ports = this._portMap.s.concat();
        this._alignNS(ports, this._template.height * (this.scale / 3) + 5, 27);

        ports = this._portMap.n.concat();
        this._alignNS(ports, -this._template.height * this.scale / 3 - 32, -27);
    };

    p.alignList = function () {
        var mode = this._hwModule.monitorTemplate.mode;
        var ports = {};
        ports = this._hwModule.monitorTemplate.listPorts;
        var length = ports.length;
        for (var i = 0; i < ports.length; i++) {
            var port = ports[i];

            port.group.attr({
                transform: 'translate(' + this._template.width * (i / length - 0.5) + ',' + (-this._template.width / 2 - 30) + ')'
            });
        }

        ports = this._portMapList.n.concat();
        this._alignNSList(ports, -this._template.width * this.scale / 2 - 32, -27);
    };

    p._alignNS = function (ports, yCursor, gap) {
        var length = ports.length,
            mid = (length - 1) / 2,
            lP = -this._rect.width / 2,
            rP = this._rect.width / 2,
            width = this._rect.width,
            wholeWidth = 0,
            listLine = 0,
            mode = this._hwModule.monitorTemplate.mode;

        for (var i = 0; i < ports.length; i++) {
            wholeWidth += ports[i].width + 5;
        }if (wholeWidth < rP - lP) {
            rP = wholeWidth / 2 + 3;
            lP = -wholeWidth / 2 - 3;
        }

        while (ports.length > 1) {
            var lPort = ports.shift(),
                rPort = ports.pop(),
                prevLP = lP,
                prevRP = rP,
                gapTemp = gap;
            if (wholeWidth <= rP - lP) {
                lP += lPort.width + 5;
                rP -= rPort.width + 5;
                gapTemp = 0;
            } else if (ports.length === 0) {
                lP = (lP + rP) / 2 - 3;
                rP = lP + 6;
            } else {
                lP = Math.max(lP, -width / 2 + lPort.width) + 15;
                rP = Math.min(rP, width / 2 - rPort.width) - 15;
            }

            this._movePort(lPort, lP, yCursor, prevLP);
            this._movePort(rPort, rP, yCursor, prevRP);

            wholeWidth -= lPort.width + rPort.width + 10;
            yCursor += gapTemp;
        }

        if (ports.length) {
            this._movePort(ports[0], (rP + lP - ports[0].width) / 2, yCursor, 100);
        }
    };

    p._alignNSList = function (ports, yCursor) {
        var length = ports.length;
        var width = this._rect.width;
        var height = this._rect.height;
        var initX = -this._rect.width / 2 + 10;
        var initY = -this._rect.height / 2 + 10;
        var wholeWidth = 0;
        var listLine = 0;

        for (var i = 0; i < ports.length; i++) {
            wholeWidth += ports[i].width; // 전체 width
        }

        var lineIndent = 0;
        var currentWidth = 0;
        var tempXpos = initX;
        var Yval = 0;
        var cPort = 0;
        var nPort = 0;
        for (var i = 0; i < ports.length; i++) {
            cPort = ports[i];

            if (i != ports.length - 1) nPort = ports[i + 1];

            currentWidth += cPort.width;

            var lP = initX;
            Yval = initY + lineIndent * 30;
            cPort.group.attr({
                transform: 'translate(' + lP + ',' + Yval + ')'
            });
            initX += cPort.width + 10;

            if (currentWidth > width - (cPort.width + nPort.width / 2.2)) {
                lineIndent += 1;
                initX = tempXpos;
                currentWidth = 0;
            }
        }
    };

    p._movePort = function (port, x, y, prevPointer) {
        var groupX = x;
        var path;
        var portX = port.box.x * this.scale,
            portY = port.box.y * this.scale;

        if (x > prevPointer) {
            // left side
            groupX = x - port.width;
            if (x > portX && portX > prevPointer) path = 'M' + portX + ',' + y + 'L' + portX + ',' + portY;else path = 'M' + (x + prevPointer) / 2 + ',' + y + 'l0,' + (portY > y ? 28 : -3) + 'H' + portX + 'L' + portX + ',' + portY;
        } else if (x < portX && portX < prevPointer)
            // right side
            path = 'm' + portX + ',' + y + 'L' + portX + ',' + portY;else path = 'm' + (prevPointer + x) / 2 + ',' + y + 'l0,' + (portY > y ? 28 : -3) + 'H' + portX + 'L' + portX + ',' + portY;

        port.group.attr({ transform: 'translate(' + groupX + ',' + y + ')' });
        port.path.attr({ d: path });
    };
})(Entry.HWMonitor.prototype);

/***/ }),

/***/ "./src/class/object.js":
/*!*****************************!*\
  !*** ./src/class/object.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**;
 * @fileoverview Object for Entry.
 */


/**
 * Class for entry object.
 * @param {?object model} model for object
 * @constructor
 */

Entry.EntryObject = function (model) {
    var _this = this;

    var that = this;
    if (model) {
        /** @type {string} */
        this.id = model.id;

        /** @type {string} */
        this.name = model.name || model.sprite.name;

        this.text = model.text || this.name;

        /** @type {string} */
        this.objectType = model.objectType || 'sprite';

        this.script = new Entry.Code(model.script || [], this);

        /** @type {Array.<picture object>} */
        this.pictures = Entry.Utils.copy(model.sprite.pictures || []);

        /** @type {Array.<sound object>} */
        this.sounds = Entry.Utils.copy(model.sprite.sounds || []);

        this.sounds.forEach(function (s) {
            if (!s.id) {
                s.id = Entry.generateHash();
            }
            Entry.initSound(s);
        });

        /** @type {string} */
        this.lock = model.lock ? model.lock : false;

        this.isEditing = false;

        if (this.objectType == "sprite") {
            this.selectedPicture = !model.selectedPictureId ? this.pictures[0] : this.getPicture(model.selectedPictureId);
        }

        this.scene = Entry.scene.getSceneById(model.scene) || Entry.scene.selectedScene;

        this.setRotateMethod(model.rotateMethod);

        //entity
        this.entity = new Entry.EntityObject(this);
        this.entity.injectModel(this.selectedPicture ? this.selectedPicture : null, model.entity ? model.entity : this.initEntity(model));

        this.clonedEntities = [];

        Entry.stage.loadObject(this);

        var entityId = this.entity.id;
        var cachePicture = Entry.container.cachePicture.bind(Entry.container);
        var pictures = this.pictures;

        for (var i in pictures) {
            (function (picture) {
                picture.objectId = _this.id;
                if (!picture.id) picture.id = Entry.generateHash();

                var image = new Image();
                Entry.Loader.addQueue();

                image.onload = function (e) {
                    delete this.triedCnt;
                    cachePicture(picture.id + entityId, this);
                    Entry.Loader.removeQueue();
                    this.onload = null;
                };

                image.onerror = function (err) {
                    if (!this.triedCnt) {
                        if (Entry.type !== "invisible") console.log('err=', picture.name, 'load failed');
                        this.triedCnt = 1;
                        this.src = getImageSrc(picture);
                    } else if (this.triedCnt < 3) {
                        this.triedCnt++;
                        this.src = Entry.mediaFilePath + '_1x1.png';
                    } else {
                        //prevent infinite call
                        delete this.triedCnt;
                        Entry.Loader.removeQueue();
                        this.onerror = null;
                    }
                };

                image.src = getImageSrc(picture);
            })(this.pictures[i]);
        }
        Entry.requestUpdate = true;
    }

    this._isContextMenuEnabled = true;

    function getImageSrc(picture) {
        if (picture.fileurl) return picture.fileurl;

        var fileName = picture.filename;
        return Entry.defaultPath + '/uploads/' + fileName.substring(0, 2) + '/' + fileName.substring(2, 4) + '/image/' + fileName + '.png';
    }
};

(function (p) {
    /**
     * View generator for workspace or others.
     * @return {!Element}
     */
    p.generateView = function () {
        var type = Entry.type;

        if (type === 'workspace') return generateWorkspaceView.call(this);else if (type === 'phone') return generatePhoneView.call(this);
    };

    /**
     * Object name setter
     * @param {!string} name
     */
    p.setName = function (name) {
        Entry.assert(typeof name == "string", 'object name must be string');

        this.name = name;
        if (this.nameView_) this.nameView_.value = name;
    };

    p.getName = function () {
        return this.name;
    };

    /**
     * Object text setter
     * @param {!string} name
     */
    p.setText = function (text) {
        Entry.assert(typeof text == "string", 'object text must be string');
        this.text = text;
    };

    /**
     * Object script setter
     * @param {!xml script} script
     */
    p.setScript = function (script) {
        this.script = script;
    };

    /**
     * Object script getter
     * @return {!xml script} script
     */
    p.getScriptText = function () {
        return this.script.stringify();
    };

    /**
     * Initialize entity model if not exist
     * @param {!object model} model for object
     * @return {entity model}
     */
    p.initEntity = function (model) {
        var json = {};
        json.x = json.y = 0;
        json.rotation = 0;
        json.direction = 90;

        if (this.objectType == 'sprite') {
            var dimension = model.sprite.pictures[0].dimension;
            json.regX = dimension.width / 2;
            json.regY = dimension.height / 2;
            var scale;
            var mainCategory = model.sprite.category.main;
            if (mainCategory == "background" || mainCategory == "new") scale = Math.max(270 / dimension.height, 480 / dimension.width);else if (mainCategory == "new") scale = 1;else scale = 200 / (dimension.width + dimension.height);

            json.scaleX = json.scaleY = scale;
            json.width = dimension.width;
            json.height = dimension.height;
        } else if (this.objectType == 'textBox') {
            json.regX = 25;
            json.regY = 12;
            json.scaleX = json.scaleY = 1.5;
            json.width = 50;
            json.height = 24;
            json.text = model.text;
            if (model.options) {
                var options = model.options;
                var fontStyle = '';
                if (options.bold) fontStyle += 'bold ';
                if (options.italic) fontStyle += 'italic ';

                json.underLine = options.underLine;
                json.strike = options.strike;
                json.font = fontStyle + "20px " + options.font.family;
                json.colour = options.colour;
                json.bgColor = options.background;
                json.lineBreak = options.lineBreak;
                if (options.lineBreak) {
                    json.width = 256;
                    json.height = json.width * 0.5625;
                    json.regX = json.width / 2;
                    json.regY = json.height / 2;
                }
            } else {
                json.underLine = false;
                json.strike = false;
                json.font = '20px Nanum Gothic';
                json.colour = '#000000';
                json.bgColor = '#ffffff';
            }
        }

        return json;
    };

    /**
     * Update thumbnail view;
     */
    p.updateThumbnailView = function () {
        var thumb = this.thumbnailView_;
        var picture = this.entity.picture;
        var objectType = this.objectType;

        if (objectType == 'sprite') {
            if (picture.fileurl) {
                thumb.style.backgroundImage = 'url("' + picture.fileurl + '")';
            } else {
                var fileName = picture.filename;
                thumb.style.backgroundImage = 'url("' + Entry.defaultPath + '/uploads/' + fileName.substring(0, 2) + '/' + fileName.substring(2, 4) + '/thumb/' + fileName + '.png")';
            }
        } else if (objectType == 'textBox') {
            var textIconPath = Entry.mediaFilePath + '/text_icon.png';
            thumb.style.backgroundImage = "url(" + textIconPath + ")";
        }
    };

    /**
     * Update coordinate view;
     */
    p.updateCoordinateView = function (isForced) {
        if (!this.isSelected() && !isForced) return;

        var view = this.coordinateView_;
        if (view && view.xInput_ && view.yInput_) {
            var originX = view.xInput_.value,
                originY = view.yInput_.value,
                size = view.sizeInput_.value,
                entity = this.entity,
                newX = entity.getX(1),
                newY = entity.getY(1),
                newSize = entity.getSize(1);

            if (originX != newX) view.xInput_.value = newX;
            if (originY != newY) view.yInput_.value = newY;
            if (size != newSize) view.sizeInput_.value = newSize;
        }
    };

    /**
     * Update rotation view;
     */
    p.updateRotationView = function (isForced) {
        if ((!this.isSelected() || !this.view_) && !isForced) return;
        var rotateMethod = this.getRotateMethod();
        var entity = this.entity;
        var className = 'entryRemove';

        if (rotateMethod == 'free') {
            this.rotateSpan_.removeClass(className);
            this.rotateInput_.removeClass(className);

            this.rotateInput_.value = entity.getRotation(1) + '˚';
            this.directionInput_.value = entity.getDirection(1) + '˚';
        } else {
            this.rotateSpan_.addClass(className);
            this.rotateInput_.addClass(className);
            this.directionInput_.value = entity.getDirection(1) + '˚';
        }
    };

    /**
     * Select this object on view
     */
    p.select = function (pictureId) {
        console.log(this);
    };

    /**
     * Add picture object by picture model.
     * @param {picture model} picture
     */
    p.addPicture = function (picture, index) {
        picture.objectId = this.id;

        if (typeof index === 'undefined') this.pictures.push(picture);else {
            this.pictures.splice(index, 0, picture);
        }

        Entry.playground.injectPicture(this);
    };

    /**
     * Remove picture object.
     * @param {string} pictureId
     * @return {boolean} return true if success
     */
    p.removePicture = function (pictureId) {
        var pictures = this.pictures;
        if (pictures.length < 2) return false;

        var playground = Entry.playground;

        var picture = this.getPicture(pictureId);
        var index = pictures.indexOf(picture);

        pictures.splice(index, 1);
        if (picture === this.selectedPicture) playground.selectPicture(pictures[0]);

        Entry.container.unCachePictures(this.entity, picture);

        playground.injectPicture(this);
        playground.reloadPlayground();
        return true;
    };

    /**
     * Get picture object by Id.
     * @param {?string} pictureId
     * @return {picture object}
     */
    p.getPicture = function (value) {
        //priority
        //1. pictureId
        //2. pictureName
        //3. index
        if (!value) return this.selectedPicture;
        value = (value + "").trim();
        var pictures = this.pictures,
            len = pictures.length;

        for (var i = 0; i < len; i++) {
            if (pictures[i].id == value) return pictures[i];
        }

        for (i = 0; i < len; i++) {
            if (pictures[i].name == value) return pictures[i];
        }

        var checker = Entry.parseNumber(value);
        if (!(checker === false && typeof checker == 'boolean') && len >= checker && checker > 0) {
            return pictures[checker - 1];
        }
        return null;
    };

    p.getPictureIndex = function (value) {
        var picture = this.getPicture(value);
        return this.pictures.indexOf(picture);
    };

    p.setPicture = function (picture) {
        for (var i in this.pictures) {
            var picture_ = this.pictures[i];
            if (picture.id === picture_.id) {
                this.pictures[i] = picture;
                return;
            }
        }
        throw new Error('No picture found');
    };

    /**
     * Get previous picture object by Id.
     * @param {?string} pictureId
     * @return {picture object}
     */
    p.getPrevPicture = function (pictureId) {
        var pictures = this.pictures;
        var idx = this.getPictureIndex(pictureId);
        return pictures[idx === 0 ? pictures.length - 1 : --idx];
    };

    /**
     * Get next picture object by Id.
     * @param {?string} pictureId
     * @return {picture object}
     */
    p.getNextPicture = function (pictureId) {
        var pictures = this.pictures;
        var len = pictures.length;
        var idx = this.getPictureIndex(pictureId);
        return pictures[idx == len - 1 ? 0 : ++idx];
    };

    /**
     * Select picture object by Id.
     * @param {!string} pictureId
     * @return {picture object}
     */
    p.selectPicture = function (pictureId) {
        var picture = this.getPicture(pictureId);
        if (!picture) throw new Error('No picture with pictureId : ' + pictureId);

        this.selectedPicture = picture;
        this.entity.setImage(picture);
        this.updateThumbnailView();
    };

    /**
     * Add sound to object
     * @param {sound model} sound
     */
    p.addSound = function (sound, index) {
        if (!sound.id) sound.id = Entry.generateHash();

        Entry.initSound(sound, index);

        if (typeof index === 'undefined') this.sounds.push(sound);else {
            this.sounds.splice(index, 0, sound);
        }
        Entry.playground.injectSound(this);
    };

    /**
     * Remove sound object.
     * @param {string} soundId
     * @return {boolean} return true if success
     */
    p.removeSound = function (soundId) {
        var index, sound;
        sound = this.getSound(soundId);
        index = this.sounds.indexOf(sound);
        this.sounds.splice(index, 1);
        Entry.playground.reloadPlayground();
        Entry.playground.injectSound(this);
    };

    /**
     * rotate method getter
     * @return {string}
     */
    p.getRotateMethod = function () {
        if (!this.rotateMethod) this.rotateMethod = 'free';

        return this.rotateMethod;
    };

    /**
     * rotate method setter
     * @param {string} rotateMethod
     */
    p.setRotateMethod = function (rotateMethod) {
        /** @type {string} */
        rotateMethod = rotateMethod || 'free';

        this.rotateMethod = rotateMethod;
        this.updateRotateMethodView();

        var stage = Entry.stage;
        var entity = stage.selectedObject && stage.selectedObject.entity;

        if (entity) {
            stage.updateObject();
            stage.updateHandle();
        }
    };

    p.initRotateValue = function (rotateMethod) {
        if (this.rotateMethod === rotateMethod) return;

        var entity = this.entity;
        var direction = entity.direction;
        entity.direction = direction !== undefined ? direction : 90.0;
        entity.rotation = 0.0;
        entity.flip = false;
    };

    p.updateRotateMethodView = function () {
        if (!this.rotateModeAView_) return;

        var SELECTED = 'selected';

        this.rotateModeAView_.removeClass(SELECTED);
        this.rotateModeBView_.removeClass(SELECTED);
        this.rotateModeCView_.removeClass(SELECTED);

        var rotateMethod = this.rotateMethod;
        if (rotateMethod == 'free') this.rotateModeAView_.addClass(SELECTED);else if (rotateMethod == 'vertical') this.rotateModeBView_.addClass(SELECTED);else this.rotateModeCView_.addClass(SELECTED);

        this.updateRotationView();
    };

    /**
     * Toggle information panel
     * @param {?boolean} isToggle
     */
    p.toggleInformation = function (isToggle) {
        this.setRotateMethod(this.getRotateMethod());
        if (isToggle === undefined) isToggle = this.isInformationToggle = !this.isInformationToggle;

        if (isToggle) {
            this.view_.addClass('informationToggle');
        } else {
            this.view_.removeClass('informationToggle');
        }
    };

    /**
     * Add clone entity for clone block
     * If parameter given, this clone the parameter entity itself.
     * Otherwise, this clone this object's entity.
     * @param {?Entry.EntryObject} object
     * @param {?Entry.EntityObject} entity
     * @param {?xml block} script
     */
    p.addCloneEntity = function (object, entity, script) {
        if (this.clonedEntities.length > Entry.maxCloneLimit) return;

        var clonedEntity = new Entry.EntityObject(this);
        clonedEntity.isClone = true;

        entity = entity || this.entity;

        clonedEntity.injectModel(entity.picture || null, entity.toJSON());
        clonedEntity.snapshot_ = entity.snapshot_;

        if (entity.effect) {
            clonedEntity.effect = Entry.cloneSimpleObject(entity.effect);
            clonedEntity.applyFilter();
        }

        Entry.engine.raiseEventOnEntity(clonedEntity, [clonedEntity, 'when_clone_start']);

        clonedEntity.isStarted = true;
        this.addCloneVariables(this, clonedEntity, entity ? entity.variables : null, entity ? entity.lists : null);

        this.clonedEntities.push(clonedEntity);
        var targetIndex = Entry.stage.selectedObjectContainer.getChildIndex(entity.object);
        targetIndex -= (entity.shapes.length ? 1 : 0) + entity.stamps.length;
        Entry.stage.loadEntity(clonedEntity, targetIndex);

        if (entity.brush) Entry.setCloneBrush(clonedEntity, entity.brush);
    };

    /**
     * Splitter is resizing playground handle.
     * This add mouse move and mouse up event to document.
     * @param {!Element} splitter
     */
    p.initializeSplitter = function (splitter) {
        var container = Entry.container;
        splitter.onmousedown = function (e) {
            container.disableSort();
            container.splitterEnable = true;
        };
        document.addEventListener('mousemove', function (e) {
            if (container.splitterEnable) {
                Entry.resizeElement({ canvasWidth: e.x || e.clientX });
            }
        });
        document.addEventListener('mouseup', function (e) {
            container.splitterEnable = false;
            container.enableSort();
        });
    };

    /**
     * return true when object is selected
     * @return {Boolean}
     */
    p.isSelected = function () {
        return this.isSelected_;
    };

    /**
     * convert this object's data to JSON.
     * @return {JSON}
     */
    p.toJSON = function (isClone) {
        var json = {};
        json.id = isClone ? Entry.generateHash() : this.id;
        json.name = this.name;
        if (this.objectType == 'textBox') json.text = this.text;
        json.script = this.getScriptText();
        json.objectType = this.objectType;
        json.rotateMethod = this.getRotateMethod();
        json.scene = this.scene.id;
        json.sprite = {
            pictures: Entry.getPicturesJSON(this.pictures, isClone),
            sounds: Entry.getSoundsJSON(this.sounds, isClone)
        };
        if (this.objectType == 'sprite') json.selectedPictureId = json.sprite.pictures[this.pictures.indexOf(this.selectedPicture)].id;
        json.lock = this.lock;
        json.entity = this.entity.toJSON();
        return json;
    };

    /**
     * destroy this object
     */
    p.destroy = function () {
        this.entity && this.entity.destroy();
        this.view_ && Entry.removeElement(this.view_);
    };

    /**
     * Get sound object by Id.
     * @param {?string} soundId
     * @return {sound object}
     */
    p.getSound = function (value) {
        //priority
        //1. soundId
        //2. soundName
        //3. index
        value = String(value).trim();
        var sounds = this.sounds,
            len = sounds.length;

        for (var i = 0; i < len; i++) {
            if (sounds[i].id == value) return sounds[i];
        }for (i = 0; i < len; i++) {
            if (sounds[i].name == value) return sounds[i];
        }var checker = Entry.parseNumber(value);
        if (!(checker === false && typeof checker == 'boolean') && len >= checker && checker > 0) {
            return sounds[checker - 1];
        }

        return null;
    };

    p.addCloneVariables = function (object, entity, variables, lists) {
        entity.variables = [];
        entity.lists = [];
        var keyName = 'object_';
        if (!variables) variables = Entry.findObjsByKey(Entry.variableContainer.variables_, keyName, object.id);
        if (!lists) lists = Entry.findObjsByKey(Entry.variableContainer.lists_, keyName, object.id);

        for (var i = 0; i < variables.length; i++) {
            entity.variables.push(variables[i].clone());
        }for (var i = 0; i < lists.length; i++) {
            entity.lists.push(lists[i].clone());
        }
    };

    p.getLock = function () {
        return this.lock;
    };

    p.setLock = function (bool) {
        this.lock = bool;
        Entry.stage.updateObject();
        return bool;
    };

    p.updateInputViews = function (isLocked) {
        isLocked = isLocked || this.getLock();
        var inputs = [this.nameView_, this.coordinateView_.xInput_, this.coordinateView_.yInput_, this.rotateInput_, this.directionInput_, this.coordinateView_.sizeInput_];

        if (!isLocked && inputs[0].getAttribute("readonly") === true) return;

        inputs.forEach(function (input) {
            input.removeClass('selectedEditingObject');
            input.setAttribute('readonly', false);
        });

        this.isEditing = false;
    };

    p.editObjectValues = function (click) {
        var inputs;
        if (this.getLock()) {
            inputs = [this.nameView_];
        } else {
            inputs = [this.coordinateView_.xInput_, this.coordinateView_.yInput_, this.rotateInput_, this.directionInput_, this.coordinateView_.sizeInput_];
        }

        var nameView_ = this.nameView_;
        if (click && !this.isEditing) {
            var $nameView_ = $(nameView_);

            $(inputs).removeClass('selectedNotEditingObject');
            $nameView_.removeClass('selectedNotEditingObject');

            $nameView_.removeAttr('readonly');
            nameView_.addClass("selectedEditingObject");
            for (var i = 0; i < inputs.length; i++) {
                $(inputs[i]).removeAttr('readonly');
                inputs[i].addClass("selectedEditingObject");
            }
            this.isEditing = true;
        } else {
            inputs.forEach(function (input) {
                input.blur(true);
            });

            nameView_.blur(true);

            this.blurAllInput();
            this.isEditing = false;
        }
    };

    p.blurAllInput = function () {
        $('.selectedEditingObject').removeClass('selectedEditingObject');

        var coorView = this.coordinateView_;

        [this.nameView_, coorView.xInput_, coorView.yInput_, this.rotateInput_, this.directionInput_, coorView.sizeInput_].forEach(function (input) {
            input.addClass('selectedNotEditingObject');
            input.setAttribute('readonly', true);
        });
    };

    /**
     *  get only clonedEntities among clonedEntities except for stamp entity
     *  @return {Array<clone Entity> } entities
     */
    p.getClonedEntities = function () {
        return this.clonedEntities.concat();
    };

    p.clearExecutor = function () {
        this.script.clearExecutors();

        var clonedEntities = this.clonedEntities;
        for (var j = clonedEntities.length - 1; j >= 0; j--) {
            clonedEntities[j].removeClone(true);
        }
        this.entity.removeStamps();
    };

    p._rightClick = function (e) {
        if (!this.isContextMenuEnabled()) return;

        var object = this;
        var container = Entry.container;
        var options = [{
            text: Lang.Workspace.context_rename,
            callback: function callback(e) {
                e.stopPropagation();
                (function (o) {
                    o.setLock(false);
                    o.editObjectValues(true);
                    o.nameView_.select();
                })(object);
            }
        }, {
            text: Lang.Workspace.context_duplicate,
            enable: !Entry.engine.isState('run'),
            callback: function callback() {
                container.addCloneObject(object);
            }
        }, {
            text: Lang.Workspace.context_remove,
            callback: function callback() {
                Entry.dispatchEvent('removeObject', object);
                container.removeObject(object);
            }
        }, {
            text: Lang.Workspace.copy_file,
            callback: function callback() {
                container.setCopiedObject(object);
            }
        }, {
            text: Lang.Blocks.Paste_blocks,
            enable: !Entry.engine.isState('run') && !!container.copiedObject,
            callback: function callback() {
                var container = Entry.container;
                if (container.copiedObject) {
                    container.addCloneObject(container.copiedObject);
                } else {
                    Entry.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.object_not_found_for_paste);
                }
            }
        }, {
            divider: true
        }, {
            text: Lang.Blocks.export_object,
            callback: function callback() {
                Entry.dispatchEvent('exportObject', object);
            }
        }];

        e = Entry.Utils.convertMouseEvent(e);
        Entry.ContextMenu.show(options, 'workspace-contextmenu', { x: e.clientX, y: e.clientY });
    };

    p.enableContextMenu = function () {
        this._isContextMenuEnabled = true;
    };

    p.disableContextMenu = function () {
        this._isContextMenuEnabled = false;
    };

    p.isContextMenuEnabled = function () {
        return this._isContextMenuEnabled && Entry.objectEditable;
    };

    p.toggleEditObject = function () {
        if (this.isEditing || Entry.engine.isState('run')) return;

        this.editObjectValues(true);
        if (Entry.playground.object !== this) Entry.container.selectObject(this.id);
    };

    p.getDom = function (query) {
        if (!query || query.length === 0) return this.view_;

        if (query.length >= 1) {
            switch (query.shift()) {
                case "editButton":
                    return this.editView_;
            }
        } else {}
    };

    function generateWorkspaceView() {
        var that = this;
        var objectId = this.id;

        var objectView = Entry.createElement('li', objectId);
        var fragment = document.createDocumentFragment('div');
        fragment.appendChild(objectView);
        objectView.addClass('entryContainerListElementWorkspace');
        // generate context menu
        Entry.Utils.disableContextmenu(objectView);
        var longPressTimer = null;

        $(objectView).bind('mousedown touchstart', function (e) {
            if (Entry.container.getObject(objectId)) {
                Entry.do('containerSelectObject', objectId);
            }
            var doc = $(document);
            var eventType = e.type;
            var handled = false;

            if (Entry.Utils.isRightButton(e)) {
                e.stopPropagation();
                Entry.documentMousedown.notify(e);
                handled = true;
                that._rightClick(e);
                return;
            }

            var mouseDownCoordinate = { x: e.clientX, y: e.clientY };

            if (eventType === 'touchstart' && !handled) {
                e.stopPropagation();
                Entry.documentMousedown.notify(e);

                longPressTimer = setTimeout(function () {
                    if (longPressTimer) {
                        longPressTimer = null;
                        that._rightClick(e);
                    }
                }, 1000);

                doc.bind('mousemove.object touchmove.object', onMouseMove);
                doc.bind('mouseup.object touchend.object', onMouseUp);
            }

            function onMouseMove(e) {
                e.stopPropagation();
                if (!mouseDownCoordinate) return;
                var diff = Math.sqrt(Math.pow(e.pageX - mouseDownCoordinate.x, 2) + Math.pow(e.pageY - mouseDownCoordinate.y, 2));
                if (diff > 5 && longPressTimer) {
                    clearTimeout(longPressTimer);
                    longPressTimer = null;
                }
            }

            function onMouseUp(e) {
                e.stopPropagation();
                doc.unbind('.object');
                if (longPressTimer) {
                    clearTimeout(longPressTimer);
                    longPressTimer = null;
                }
            }
        });

        /** @type {!Element} */
        this.view_ = objectView;

        var objectInfoView = Entry.createElement('ul');
        objectInfoView.addClass('objectInfoView');
        if (!Entry.objectEditable) {
            objectInfoView.addClass('entryHide');
        }

        var objectInfo_visible = Entry.createElement('li');
        objectInfo_visible.addClass('objectInfo_visible');
        if (!this.entity.getVisible()) objectInfo_visible.addClass('objectInfo_unvisible');

        objectInfo_visible.bindOnClick(function (e) {
            if (Entry.engine.isState('run')) return;

            var entity = that.entity;
            var visible = entity.setVisible(!entity.getVisible());
            if (visible) this.removeClass('objectInfo_unvisible');else this.addClass('objectInfo_unvisible');
        });

        var objectInfo_lock = Entry.createElement('li');
        objectInfo_lock.addClass('objectInfo_unlock');
        if (this.getLock()) objectInfo_lock.addClass('objectInfo_lock');

        objectInfo_lock.bindOnClick(function (e) {
            if (Entry.engine.isState('run')) return;
            var isLocked = that.setLock(!that.getLock());

            if (isLocked) this.addClass('objectInfo_lock');else this.removeClass('objectInfo_lock');

            that.updateInputViews(that.getLock());
        });
        objectInfoView.appendChild(objectInfo_visible);
        objectInfoView.appendChild(objectInfo_lock);
        this.view_.appendChild(objectInfoView);

        var thumbnailView = Entry.createElement('div');
        thumbnailView.addClass('entryObjectThumbnailWorkspace');
        this.view_.appendChild(thumbnailView);
        this.thumbnailView_ = thumbnailView;

        var wrapperView = Entry.createElement('div');
        wrapperView.addClass('entryObjectWrapperWorkspace');
        this.view_.appendChild(wrapperView);

        var nameView = Entry.createElement('input');
        nameView.bindOnClick(function (e) {
            e.preventDefault();
            if (this.readOnly) return;
            this.focus();
            this.select();
        });
        nameView.addClass('entryObjectNameWorkspace');

        wrapperView.appendChild(nameView);
        this.nameView_ = nameView;
        nameView.setAttribute("readonly", true);

        this.nameView_.onblur = function (e) {
            var newValue = this.value;

            if (that.getName() === newValue) return;

            Entry.do('objectNameEdit', that.id, newValue);
            Entry.playground.reloadPlayground();
        };

        this.nameView_.onkeypress = function (e) {
            if (e.keyCode == 13) {
                that.editObjectValues(false);
            }
        };

        this.nameView_.value = this.name;

        var editView = Entry.createElement('div');
        editView.addClass('entryObjectEditWorkspace');
        this.editView_ = editView;
        this.view_.appendChild(editView);

        $(editView).mousedown(function (e) {
            e.stopPropagation();
            Entry.documentMousedown.notify(e);
            Entry.do('objectEditButtonClick', that.id);
        });

        $(editView).mouseup(function (e) {
            that.isEditing && that.nameView_.select();
        });

        if (Entry.objectEditable && Entry.objectDeletable) {
            var deleteView = Entry.createElement('div');
            deleteView.addClass('entryObjectDeleteWorkspace');
            this.deleteView_ = deleteView;
            this.view_.appendChild(deleteView);
            deleteView.bindOnClick(function (e) {
                if (Entry.engine.isState('run')) return;
                Entry.container.removeObject(that);
            });
        }

        var informationView = Entry.createElement('div');
        informationView.addClass('entryObjectInformationWorkspace');
        this.isInformationToggle = false;
        wrapperView.appendChild(informationView);
        this.informationView_ = informationView;

        var rotationWrapperView = Entry.createElement('div');
        rotationWrapperView.addClass('entryObjectRotationWrapperWorkspace');
        this.view_.appendChild(rotationWrapperView);

        var coordinateView = Entry.createElement('span');
        coordinateView.addClass('entryObjectCoordinateWorkspace');
        rotationWrapperView.appendChild(coordinateView);
        var xCoordi = Entry.createElement('span');
        xCoordi.addClass('entryObjectCoordinateSpanWorkspace');
        xCoordi.innerHTML = 'X:';
        var xInput = Entry.createElement('input');
        xInput.addClass('entryObjectCoordinateInputWorkspace');
        xInput.setAttribute("readonly", true);
        xInput.bindOnClick(function (e) {
            e.stopPropagation();
            this.select();
        });

        var yCoordi = Entry.createElement('span');
        yCoordi.addClass('entryObjectCoordinateSpanWorkspace');
        yCoordi.innerHTML = 'Y:';
        var yInput = Entry.createElement('input');
        yInput.addClass('entryObjectCoordinateInputWorkspace entryObjectCoordinateInputWorkspace_right');
        yInput.bindOnClick(function (e) {
            e.stopPropagation();
            this.select();
        });
        yInput.setAttribute("readonly", true);
        var sizeSpan = Entry.createElement('span');
        sizeSpan.addClass('entryObjectCoordinateSizeWorkspace');
        sizeSpan.innerHTML = Lang.Workspace.Size + ' : ';
        var sizeInput = Entry.createElement('input');
        sizeInput.addClass('entryObjectCoordinateInputWorkspace', 'entryObjectCoordinateInputWorkspace_size');
        sizeInput.bindOnClick(function (e) {
            e.stopPropagation();
            this.select();
        });
        sizeInput.setAttribute("readonly", true);
        coordinateView.appendChild(xCoordi);
        coordinateView.appendChild(xInput);
        coordinateView.appendChild(yCoordi);
        coordinateView.appendChild(yInput);
        coordinateView.appendChild(sizeSpan);
        coordinateView.appendChild(sizeInput);
        coordinateView.xInput_ = xInput;
        coordinateView.yInput_ = yInput;
        coordinateView.sizeInput_ = sizeInput;
        this.coordinateView_ = coordinateView;

        xInput.onkeypress = function (e) {
            if (e.keyCode == 13) {
                that.editObjectValues(false);
            }
        };

        xInput.onblur = function (bool) {
            if (Entry.Utils.isNumber(xInput.value)) {
                that.entity.setX(Number(xInput.value));
            }
            that.updateCoordinateView();
            Entry.stage.updateObject();
        };

        yInput.onkeypress = function (e) {
            if (e.keyCode == 13) {
                that.editObjectValues(false);
            }
        };

        yInput.onblur = function (bool) {
            if (Entry.Utils.isNumber(yInput.value)) {
                that.entity.setY(Number(yInput.value));
            }
            that.updateCoordinateView();
            Entry.stage.updateObject();
        };

        sizeInput.onkeypress = function (e) {
            if (e.keyCode == 13) {
                that.editObjectValues(false);
            }
        };

        sizeInput.onblur = function (bool) {
            if (Entry.Utils.isNumber(sizeInput.value)) {
                that.entity.setSize(Number(sizeInput.value));
            }
            that.updateCoordinateView();
            Entry.stage.updateObject();
        };

        var rotateLabelWrapperView = Entry.createElement('div');
        rotateLabelWrapperView.addClass('entryObjectRotateLabelWrapperWorkspace');
        this.view_.appendChild(rotateLabelWrapperView);
        this.rotateLabelWrapperView_ = rotateLabelWrapperView;

        var rotateSpan = Entry.createElement('span');
        rotateSpan.addClass('entryObjectRotateSpanWorkspace');
        rotateSpan.innerHTML = Lang.Workspace.rotation + ' : ';
        var rotateInput = Entry.createElement('input');
        rotateInput.addClass('entryObjectRotateInputWorkspace');
        rotateInput.setAttribute("readonly", true);
        rotateInput.bindOnClick(function (e) {
            e.stopPropagation();
            this.select();
        });
        this.rotateSpan_ = rotateSpan;
        this.rotateInput_ = rotateInput;

        var directionSpan = Entry.createElement('span');
        directionSpan.addClass('entryObjectDirectionSpanWorkspace');
        directionSpan.innerHTML = Lang.Workspace.direction + ' : ';
        var directionInput = Entry.createElement('input');
        directionInput.addClass('entryObjectDirectionInputWorkspace');
        directionInput.setAttribute("readonly", true);
        directionInput.bindOnClick(function (e) {
            e.stopPropagation();
            this.select();
        });
        this.directionInput_ = directionInput;

        rotateLabelWrapperView.appendChild(rotateSpan);
        rotateLabelWrapperView.appendChild(rotateInput);
        rotateLabelWrapperView.appendChild(directionSpan);
        rotateLabelWrapperView.appendChild(directionInput);
        rotateLabelWrapperView.rotateInput_ = rotateInput;
        rotateLabelWrapperView.directionInput_ = directionInput;
        rotateInput.onkeypress = function (e) {
            if (e.keyCode == 13) {
                that.editObjectValues(false);
            }
        };
        rotateInput.onblur = function (bool) {
            var value = rotateInput.value;
            if (value.indexOf('˚') != -1) value = value.substring(0, value.indexOf('˚'));
            if (Entry.Utils.isNumber(value)) {
                that.entity.setRotation(Number(value));
            }
            that.updateRotationView();
            Entry.stage.updateObject();
        };

        directionInput.onkeypress = function (e) {
            if (e.keyCode == 13) {
                that.editObjectValues(false);
            }
        };

        directionInput.onblur = function (bool) {
            var value = directionInput.value;
            if (value.indexOf('˚') != -1) value = value.substring(0, value.indexOf('˚'));
            if (Entry.Utils.isNumber(value)) that.entity.setDirection(Number(value));
            that.updateRotationView();
            Entry.stage.updateObject();
        };

        var rotationMethodWrapper = Entry.createElement('div');
        rotationMethodWrapper.addClass('rotationMethodWrapper');
        rotationWrapperView.appendChild(rotationMethodWrapper);
        this.rotationMethodWrapper_ = rotationMethodWrapper;

        var rotateMethodLabelView = Entry.createElement('span');
        rotateMethodLabelView.addClass('entryObjectRotateMethodLabelWorkspace');
        rotationMethodWrapper.appendChild(rotateMethodLabelView);
        rotateMethodLabelView.innerHTML = Lang.Workspace.rotate_method + ' : ';

        var rotateModeAView = Entry.createElement('div');
        rotateModeAView.addClass('entryObjectRotateModeWorkspace entryObjectRotateModeAWorkspace');
        this.rotateModeAView_ = rotateModeAView;
        rotationMethodWrapper.appendChild(rotateModeAView);
        rotateModeAView.bindOnClick(function (e) {
            if (Entry.engine.isState('run') || that.getLock()) {
                return;
            }

            that.initRotateValue('free');
            that.setRotateMethod('free');
        });

        var rotateModeBView = Entry.createElement('div');
        rotateModeBView.addClass('entryObjectRotateModeWorkspace entryObjectRotateModeBWorkspace');
        this.rotateModeBView_ = rotateModeBView;
        rotationMethodWrapper.appendChild(rotateModeBView);
        rotateModeBView.bindOnClick(function (e) {
            if (Entry.engine.isState('run') || that.getLock()) {
                return;
            }

            that.initRotateValue('vertical');
            that.setRotateMethod('vertical');
        });

        var rotateModeCView = Entry.createElement('div');
        rotateModeCView.addClass('entryObjectRotateModeWorkspace entryObjectRotateModeCWorkspace');
        this.rotateModeCView_ = rotateModeCView;
        rotationMethodWrapper.appendChild(rotateModeCView);
        rotateModeCView.bindOnClick(function (e) {
            if (Entry.engine.isState('run') || that.getLock()) return;

            that.initRotateValue('none');
            that.setRotateMethod('none');
        });

        this.updateThumbnailView();
        this.updateRotateMethodView();
        this.updateInputViews();

        this.updateCoordinateView(true);
        this.updateRotationView(true);

        return this.view_;
    }

    function generatePhoneView() {
        var objectView = Entry.createElement('li', this.id);
        objectView.addClass('entryContainerListElementWorkspace');
        objectView.object = this;
        objectView.bindOnClick(function (e) {
            if (Entry.container.getObject(this.id)) Entry.container.selectObject(this.id);
        });

        // generate context menu
        if ($) {
            var object = this;
            context.attach('#' + this.id, [{
                text: Lang.Workspace.context_rename,
                href: '/',
                action: function action(e) {
                    e.preventDefault();
                }
            }, {
                text: Lang.Workspace.context_duplicate,
                href: '/',
                action: function action(e) {
                    e.preventDefault();
                    Entry.container.addCloneObject(object);
                }
            }, {
                text: Lang.Workspace.context_remove,
                href: '/',
                action: function action(e) {
                    e.preventDefault();
                    Entry.container.removeObject(object);
                }
            }]);
        }
        /** @type {!Element} */
        this.view_ = objectView;

        var objectInfoView = Entry.createElement('ul');
        objectInfoView.addClass('objectInfoView');
        var objectInfo_visible = Entry.createElement('li');
        objectInfo_visible.addClass('objectInfo_visible');
        var objectInfo_lock = Entry.createElement('li');
        objectInfo_lock.addClass('objectInfo_lock');
        objectInfoView.appendChild(objectInfo_visible);
        objectInfoView.appendChild(objectInfo_lock);
        this.view_.appendChild(objectInfoView);

        var thumbnailView = Entry.createElement('div');
        thumbnailView.addClass('entryObjectThumbnailWorkspace');
        this.view_.appendChild(thumbnailView);
        this.thumbnailView_ = thumbnailView;

        var wrapperView = Entry.createElement('div');
        wrapperView.addClass('entryObjectWrapperWorkspace');
        this.view_.appendChild(wrapperView);

        var nameView = Entry.createElement('input');
        nameView.addClass('entryObjectNameWorkspace');
        wrapperView.appendChild(nameView);
        this.nameView_ = nameView;
        this.nameView_.entryObject = this;
        this.nameView_.onblur = function () {
            this.entryObject.name = this.value;
            Entry.playground.reloadPlayground();
        };
        this.nameView_.onkeypress = function (e) {
            if (e.keyCode == 13) thisPointer.editObjectValues(false);
        };
        this.nameView_.value = this.name;

        if (Entry.objectEditable && Entry.objectDeletable) {
            var deleteView = Entry.createElement('div');
            deleteView.addClass('entryObjectDeletePhone');
            deleteView.object = this;
            this.deleteView_ = deleteView;
            this.view_.appendChild(deleteView);
            deleteView.bindOnClick(function (e) {
                if (Entry.engine.isState('run')) {
                    return;
                }

                Entry.container.removeObject(this.object);
            });
        }

        var editBtn = Entry.createElement('button');
        editBtn.addClass('entryObjectEditPhone');
        editBtn.object = this;
        editBtn.bindOnClick(function (e) {
            var object = Entry.container.getObject(this.id);
            if (object) {
                Entry.container.selectObject(object.id);
                Entry.playground.injectObject(object);
            }
        });
        this.view_.appendChild(editBtn);

        var informationView = Entry.createElement('div');
        informationView.addClass('entryObjectInformationWorkspace');
        informationView.object = this;
        this.isInformationToggle = false;
        wrapperView.appendChild(informationView);
        this.informationView_ = informationView;

        var rotateLabelWrapperView = Entry.createElement('div');
        rotateLabelWrapperView.addClass('entryObjectRotateLabelWrapperWorkspace');
        this.view_.appendChild(rotateLabelWrapperView);
        this.rotateLabelWrapperView_ = rotateLabelWrapperView;

        var rotateSpan = Entry.createElement('span');
        rotateSpan.addClass('entryObjectRotateSpanWorkspace');
        rotateSpan.innerHTML = Lang.Workspace.rotation + ' : ';
        var rotateInput = Entry.createElement('input');
        rotateInput.addClass('entryObjectRotateInputWorkspace');
        this.rotateSpan_ = rotateSpan;
        this.rotateInput_ = rotateInput;

        var directionSpan = Entry.createElement('span');
        directionSpan.addClass('entryObjectDirectionSpanWorkspace');
        directionSpan.innerHTML = Lang.Workspace.direction + ' : ';
        var directionInput = Entry.createElement('input');
        directionInput.addClass('entryObjectDirectionInputWorkspace');
        this.directionInput_ = directionInput;

        rotateLabelWrapperView.appendChild(rotateSpan);
        rotateLabelWrapperView.appendChild(rotateInput);
        rotateLabelWrapperView.appendChild(directionSpan);
        rotateLabelWrapperView.appendChild(directionInput);
        rotateLabelWrapperView.rotateInput_ = rotateInput;
        rotateLabelWrapperView.directionInput_ = directionInput;
        var thisPointer = this;
        rotateInput.onkeypress = function (e) {
            if (e.keyCode == 13) {
                var value = rotateInput.value;
                if (value.indexOf('˚') != -1) value = value.substring(0, value.indexOf('˚'));
                if (Entry.Utils.isNumber(value)) {
                    thisPointer.entity.setRotation(Number(value));
                }
                thisPointer.updateRotationView();
                rotateInput.blur();
            }
        };
        rotateInput.onblur = function (e) {
            thisPointer.entity.setRotation(thisPointer.entity.getRotation());
            Entry.stage.updateObject();
        };
        directionInput.onkeypress = function (e) {
            if (e.keyCode == 13) {
                var value = directionInput.value;
                if (value.indexOf('˚') != -1) value = value.substring(0, value.indexOf('˚'));
                if (Entry.Utils.isNumber(value)) {
                    thisPointer.entity.setDirection(Number(value));
                }
                thisPointer.updateRotationView();
                directionInput.blur();
            }
        };
        directionInput.onblur = function (e) {
            thisPointer.entity.setDirection(thisPointer.entity.getDirection());
            Entry.stage.updateObject();
        };

        var rotationWrapperView = Entry.createElement('div');
        rotationWrapperView.addClass('entryObjectRotationWrapperWorkspace');
        rotationWrapperView.object = this;
        this.view_.appendChild(rotationWrapperView);

        var coordinateView = Entry.createElement('span');
        coordinateView.addClass('entryObjectCoordinateWorkspace');
        rotationWrapperView.appendChild(coordinateView);
        var xCoordi = Entry.createElement('span');
        xCoordi.addClass('entryObjectCoordinateSpanWorkspace');
        xCoordi.innerHTML = 'X:';
        var xInput = Entry.createElement('input');
        xInput.addClass('entryObjectCoordinateInputWorkspace');
        var yCoordi = Entry.createElement('span');
        yCoordi.addClass('entryObjectCoordinateSpanWorkspace');
        yCoordi.innerHTML = 'Y:';
        var yInput = Entry.createElement('input');
        yInput.addClass('entryObjectCoordinateInputWorkspace entryObjectCoordinateInputWorkspace_right');
        var sizeTitle = Entry.createElement('span');
        sizeTitle.addClass('entryObjectCoordinateSpanWorkspace');
        sizeTitle.innerHTML = Lang.Workspace.Size;
        var sizeInput = Entry.createElement('input');
        sizeInput.addClass('entryObjectCoordinateInputWorkspace', 'entryObjectCoordinateInputWorkspace_size');
        coordinateView.appendChild(xCoordi);
        coordinateView.appendChild(xInput);
        coordinateView.appendChild(yCoordi);
        coordinateView.appendChild(yInput);
        coordinateView.appendChild(sizeTitle);
        coordinateView.appendChild(sizeInput);
        coordinateView.xInput_ = xInput;
        coordinateView.yInput_ = yInput;
        coordinateView.sizeInput_ = sizeInput;
        this.coordinateView_ = coordinateView;
        var thisPointer = this;
        xInput.onkeypress = function (e) {
            if (e.keyCode == 13) {
                if (Entry.Utils.isNumber(xInput.value)) {
                    thisPointer.entity.setX(Number(xInput.value));
                }
                thisPointer.updateCoordinateView();
                thisPointer.blur();
            }
        };
        xInput.onblur = function (e) {
            thisPointer.entity.setX(thisPointer.entity.getX());
            Entry.stage.updateObject();
        };

        yInput.onkeypress = function (e) {
            if (e.keyCode == 13) {
                if (Entry.Utils.isNumber(yInput.value)) {
                    thisPointer.entity.setY(Number(yInput.value));
                }
                thisPointer.updateCoordinateView();
                thisPointer.blur();
            }
        };
        yInput.onblur = function (e) {
            thisPointer.entity.setY(thisPointer.entity.getY());
            Entry.stage.updateObject();
        };

        var rotationMethodWrapper = Entry.createElement('div');
        rotationMethodWrapper.addClass('rotationMethodWrapper');
        rotationWrapperView.appendChild(rotationMethodWrapper);
        this.rotationMethodWrapper_ = rotationMethodWrapper;

        var rotateMethodLabelView = Entry.createElement('span');
        rotateMethodLabelView.addClass('entryObjectRotateMethodLabelWorkspace');
        rotationMethodWrapper.appendChild(rotateMethodLabelView);
        rotateMethodLabelView.innerHTML = Lang.Workspace.rotate_method + ' : ';

        var rotateModeAView = Entry.createElement('div');
        rotateModeAView.addClass('entryObjectRotateModeWorkspace');
        rotateModeAView.addClass('entryObjectRotateModeAWorkspace');
        rotateModeAView.object = this;
        this.rotateModeAView_ = rotateModeAView;
        rotationMethodWrapper.appendChild(rotateModeAView);
        rotateModeAView.bindOnClick(function (e) {
            if (Entry.engine.isState('run')) {
                return;
            }
            this.object.setRotateMethod('free');
        });

        var rotateModeBView = Entry.createElement('div');
        rotateModeBView.addClass('entryObjectRotateModeWorkspace');
        rotateModeBView.addClass('entryObjectRotateModeBWorkspace');
        rotateModeBView.object = this;
        this.rotateModeBView_ = rotateModeBView;
        rotationMethodWrapper.appendChild(rotateModeBView);
        rotateModeBView.bindOnClick(function (e) {
            if (Entry.engine.isState('run')) {
                return;
            }
            this.object.setRotateMethod('vertical');
        });

        var rotateModeCView = Entry.createElement('div');
        rotateModeCView.addClass('entryObjectRotateModeWorkspace');
        rotateModeCView.addClass('entryObjectRotateModeCWorkspace');
        rotateModeCView.object = this;
        this.rotateModeCView_ = rotateModeCView;
        rotationMethodWrapper.appendChild(rotateModeCView);
        rotateModeCView.bindOnClick(function (e) {
            if (Entry.engine.isState('run')) return;
            this.object.setRotateMethod('none');
        });

        this.updateThumbnailView();
        this.updateCoordinateView();
        this.updateRotateMethodView();

        this.updateInputViews();
        return this.view_;
    }
})(Entry.EntryObject.prototype);

/***/ }),

/***/ "./src/class/painter.js":
/*!******************************!*\
  !*** ./src/class/painter.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Painter = function (view) {
    this.view = view;
    this.baseUrl = Entry.painterBaseUrl || '/lib/literallycanvas/lib/img';

    this.file = {
        id: Entry.generateHash(),
        name: '새그림',
        modified: false,
        mode: 'new' // new or edit
    };

    this._keyboardEvents = [];

    Entry.addEventListener('pictureImport', this.addPicture.bind(this));
    Entry.addEventListener('run', this.detachKeyboardEvents.bind(this));
    Entry.addEventListener('stop', this.attachKeyboardEvents.bind(this));

    //dropdown header dispose
    $('body').on('mouseup', '.active li', function () {
        $('.painterTopHeader.active').removeClass('active');
    });

    this.clipboard = null;
};

(function (p) {
    p.initialize = function () {
        if (this.lc) return;

        var that = this;

        var imgURL = that.baseUrl;
        var bgImage = new Image();
        bgImage.src = imgURL + '/transparent-pattern.png';

        var WIDTH = 960;
        var HEIGHT = 540;
        that.lc = LC.init(that.view, {
            imageURLPrefix: imgURL,
            zoomMax: 3.0,
            zoomMin: 0.5,
            toolbarPosition: 'bottom',
            imageSize: { width: WIDTH, height: HEIGHT },
            backgroundShapes: [LC.createShape('Rectangle', {
                x: 0, y: 0, width: WIDTH, height: HEIGHT,
                strokeWidth: 0,
                strokeColor: 'transparent'
            })]
        });
        //that.lc.respondToSizeChange();

        bgImage.onload = function () {
            that.lc.repaintLayer("background");
        };

        var watchFunc = function watchFunc(e) {
            if (e && (e.shape && !e.opts && e.shape.isPass || e.opts && e.opts.isPass)) {
                Entry.do("processPicture", e, that.lc);
            } else {
                Entry.do("editPicture", e, that.lc);
            }
            that.file.modified = true;
        };

        that.lc.on("clear", watchFunc);
        that.lc.on("remove", watchFunc);
        that.lc.on("shapeEdit", watchFunc);
        that.lc.on("shapeSave", watchFunc);

        that.lc.on("toolChange", that.updateEditMenu.bind(that));
        that.lc.on("lc-pointerdrag", that.stagemousemove.bind(that));
        that.lc.on("lc-pointermove", that.stagemousemove.bind(that));

        that.initTopBar();
        that.updateEditMenu();

        that.attachKeyboardEvents();
    };

    p.show = function () {
        if (!this.lc) this.initialize();
        this.isShow = true;
    };

    p.hide = function () {
        this.isShow = false;
    };

    p.changePicture = function (picture) {
        if (this.file && this.file.id === picture.id) {
            return;
        } else if (!this.file.modified) {
            this.afterModified(picture);
        } else {
            if (this.isConfirm) {
                return;
            }

            this.isConfirm = true;
            var wasRun = false;
            if (Entry.engine.state === 'run') {
                Entry.engine.toggleStop();
                wasRun = true;
            }
            entrylms.confirm(Lang.Menus.save_modified_shape).then(function (result) {
                this.isConfirm = false;
                if (result === true) {
                    this.file_save(true);
                } else {
                    this.file.modified = false;
                }

                if (!wasRun) {
                    this.afterModified(picture);
                } else {
                    Entry.playground.injectPicture();
                }
            }.bind(this));
        }
    };

    p.afterModified = function (picture) {
        var file = this.file;
        file.modified = false;
        this.lc.clear(false);

        file.id = picture.id || Entry.generateHash();
        file.name = picture.name;
        file.mode = 'edit';
        file.objectId = picture.objectId;

        this.addPicture(picture, true);
        // INFO: picture 변경시마다 undoStack 리셋
        this.lc.undoStack = [];
        Entry.stateManager.removeAllPictureCommand();
    };

    p.addPicture = function (picture, isOriginal) {
        var image = new Image();

        if (picture.fileurl) {
            image.src = picture.fileurl;
        } else {
            // deprecated
            image.src = Entry.defaultPath + '/uploads/' + picture.filename.substring(0, 2) + '/' + picture.filename.substring(2, 4) + '/image/' + picture.filename + '.png';
        }

        var dimension = picture.dimension;
        var shape = LC.createShape('Image', {
            x: 480,
            y: 270,
            width: dimension.width,
            height: dimension.height,
            image: image
        });

        this.lc.saveShape(shape, !isOriginal);

        image.onload = function () {
            this.lc.setTool(this.lc.tools.SelectShape);
            this.lc.tool.setShape(this.lc, shape);
        }.bind(this);
    };

    p.copy = function () {
        if (this.lc.tool.name !== "SelectShape" || !this.lc.tool.selectedShape) return;

        var shape = this.lc.tool.selectedShape;
        this.clipboard = {
            className: shape.className,
            data: shape.toJSON()
        };
        this.updateEditMenu();
    };

    p.cut = function () {
        if (this.lc.tool.name !== "SelectShape" || !this.lc.tool.selectedShape) return;

        this.copy();
        var shape = this.lc.tool.selectedShape;
        this.lc.removeShape(shape);
        this.lc.tool.setShape(this.lc, null);
    };

    p.paste = function () {
        if (!this.clipboard) return;

        var shape = this.lc.addShape(this.clipboard);
        this.lc.setTool(this.lc.tools.SelectShape);
        this.lc.tool.setShape(this.lc, shape);
    };

    p.updateEditMenu = function () {
        var isSelected = this.lc.tool.name === "SelectShape" ? "block" : "none";
        this._cutButton.style.display = isSelected;
        this._copyButton.style.display = isSelected;
        this._pasteButton.style.display = this.clipboard ? "block" : "none";
    };

    p.file_save = function (taskParam) {
        this.lc.trigger("dispose");
        var dataURL = this.lc.getImage().toDataURL();
        this.file_ = JSON.parse(JSON.stringify(this.file));
        Entry.dispatchEvent('saveCanvasImage', { file: this.file_, image: dataURL, task: taskParam });

        this.file.modified = false;
    };

    p.newPicture = function () {
        var newPicture = {
            dimension: {
                height: 1,
                width: 1
            },
            //filename: "_1x1",
            fileurl: Entry.mediaFilePath + '_1x1.png',
            name: Lang.Workspace.new_picture
        };

        newPicture.id = Entry.generateHash();
        if (this.file && this.file.objectId) newPicture.objectId = this.file.objectId;
        Entry.playground.addPicture(newPicture, true);
    };

    p._keyboardPressControl = function (e) {
        if (!this.isShow || Entry.Utils.isInInput(e)) return;

        var keyCode = e.keyCode || e.which,
            ctrlKey = e.ctrlKey;

        if (keyCode == 8 || keyCode == 46) {
            //destroy
            this.cut();
            e.preventDefault();
        } else if (ctrlKey) {
            if (keyCode == 67) //copy
                this.copy();else if (keyCode == 88) {
                //cut
                this.cut();
            }
        }

        if (ctrlKey && keyCode == 86) {
            //paste
            this.paste();
        }
        this.lc.trigger("keyDown", e);
    };

    p._keyboardUpControl = function (e) {
        if (!this.isShow || Entry.Utils.isInInput(e)) return;

        this.lc.trigger("keyUp", e);
    };

    p.initTopBar = function () {
        var painter = this;

        var ce = Entry.createElement;

        var painterTop = ce(document.getElementById("canvas-top-menu"));
        painterTop.addClass('entryPlaygroundPainterTop');
        painterTop.addClass('entryPainterTop');

        var painterTopMenu = ce('nav', 'entryPainterTopMenu');
        painterTopMenu.addClass('entryPlaygroundPainterTopMenu');
        painterTop.appendChild(painterTopMenu);

        var $painterTopMenu = $(painterTopMenu);

        $painterTopMenu.on('mouseenter', '.painterTopHeader', function () {
            $(this).addClass('active');
        });

        $painterTopMenu.on('mouseleave', '.painterTopHeader', function (e) {
            $(this).removeClass('active');
        });

        var painterTopMenuContainer = ce('ul');
        painterTopMenu.appendChild(painterTopMenuContainer);

        var painterTopMenuFileNew = ce('li');
        painterTopMenuFileNew.addClass('painterTopHeader');
        painterTopMenuContainer.appendChild(painterTopMenuFileNew);

        var painterTopMenuFileNewLink = ce('a', 'entryPainterTopMenuFileNew');
        painterTopMenuFileNewLink.bindOnClick(painter.newPicture.bind(this));
        painterTopMenuFileNewLink.addClass('entryPlaygroundPainterTopMenuFileNew');
        painterTopMenuFileNewLink.innerHTML = Lang.Workspace.new_picture;
        painterTopMenuFileNew.appendChild(painterTopMenuFileNewLink);

        var painterTopMenuFile = ce('li', 'entryPainterTopMenuFile');
        painterTopMenuFile.addClass('entryPlaygroundPainterTopMenuFile painterTopHeader');
        painterTopMenuFile.innerHTML = Lang.Workspace.painter_file;
        painterTopMenuContainer.appendChild(painterTopMenuFile);

        var painterTopMenuFileContainer = ce('ul');
        painterTopMenuFile.appendChild(painterTopMenuFileContainer);

        var painterTopMenuFileSave = ce('li');
        painterTopMenuFileContainer.appendChild(painterTopMenuFileSave);
        var painterTopMenuFileSaveLink = ce('a', 'entryPainterTopMenuFileSave');
        painterTopMenuFileSaveLink.bindOnClick(function () {
            painter.file_save(false);
        });
        painterTopMenuFileSaveLink.addClass('entryPainterTopMenuFileSave');
        painterTopMenuFileSaveLink.innerHTML = Lang.Workspace.painter_file_save;
        painterTopMenuFileSave.appendChild(painterTopMenuFileSaveLink);

        var painterTopMenuFileSaveAs = ce('li');
        painterTopMenuFileContainer.appendChild(painterTopMenuFileSaveAs);

        var painterTopMenuFileSaveAsLink = ce('a', 'entryPainterTopMenuFileSaveAs');
        painterTopMenuFileSaveAsLink.bindOnClick(function () {
            painter.file.mode = "new";
            painter.file_save(false);
        });
        painterTopMenuFileSaveAsLink.addClass('entryPlaygroundPainterTopMenuFileSaveAs');
        painterTopMenuFileSaveAsLink.innerHTML = Lang.Workspace.painter_file_saveas;
        painterTopMenuFileSaveAs.appendChild(painterTopMenuFileSaveAsLink);

        var painterTopMenuEdit = ce('li', 'entryPainterTopMenuEdit');
        painterTopMenuEdit.addClass('entryPlaygroundPainterTopMenuEdit painterTopHeader');
        painterTopMenuEdit.innerHTML = Lang.Workspace.painter_edit;
        painterTopMenuContainer.appendChild(painterTopMenuEdit);

        var painterTopMenuEditContainer = ce('ul');
        painterTopMenuEdit.appendChild(painterTopMenuEditContainer);

        var painterTopMenuEditImport = ce('li');
        painterTopMenuEditContainer.appendChild(painterTopMenuEditImport);
        var painterTopMenuEditImportLink = ce('a', 'entryPainterTopMenuEditImportLink');
        painterTopMenuEditImportLink.bindOnClick(function () {
            Entry.dispatchEvent('openPictureImport');
        });
        painterTopMenuEditImportLink.addClass('entryPainterTopMenuEditImport');
        painterTopMenuEditImportLink.innerHTML = Lang.Workspace.get_file;
        painterTopMenuEditImport.appendChild(painterTopMenuEditImportLink);

        var painterTopMenuEditCopy = ce('li');
        painterTopMenuEditContainer.appendChild(painterTopMenuEditCopy);

        var painterTopMenuEditCopyLink = ce('a', 'entryPainterTopMenuEditCopy');
        painterTopMenuEditCopyLink.bindOnClick(function () {
            painter.copy();
        });
        painterTopMenuEditCopyLink.addClass('entryPlaygroundPainterTopMenuEditCopy');
        painterTopMenuEditCopyLink.innerHTML = Lang.Workspace.copy_file;
        painterTopMenuEditCopy.appendChild(painterTopMenuEditCopyLink);
        this._copyButton = painterTopMenuEditCopy;

        var painterTopMenuEditCut = ce('li');
        painterTopMenuEditContainer.appendChild(painterTopMenuEditCut);

        var painterTopMenuEditCutLink = ce('a', 'entryPainterTopMenuEditCut');
        painterTopMenuEditCutLink.bindOnClick(function () {
            painter.cut();
        });
        painterTopMenuEditCutLink.addClass('entryPlaygroundPainterTopMenuEditCut');
        painterTopMenuEditCutLink.innerHTML = Lang.Workspace.cut_picture;
        painterTopMenuEditCut.appendChild(painterTopMenuEditCutLink);
        this._cutButton = painterTopMenuEditCut;

        var painterTopMenuEditPaste = ce('li');
        painterTopMenuEditContainer.appendChild(painterTopMenuEditPaste);

        var painterTopMenuEditPasteLink = ce('a', 'entryPainterTopMenuEditPaste');
        painterTopMenuEditPasteLink.bindOnClick(function () {
            painter.paste();
        });
        painterTopMenuEditPasteLink.addClass('entryPlaygroundPainterTopMenuEditPaste');
        painterTopMenuEditPasteLink.innerHTML = Lang.Workspace.paste_picture;
        painterTopMenuEditPaste.appendChild(painterTopMenuEditPasteLink);
        this._pasteButton = painterTopMenuEditPaste;

        var painterTopMenuEditEraseAll = ce('li');
        painterTopMenuEditContainer.appendChild(painterTopMenuEditEraseAll);

        var painterTopMenuEditEraseAllLink = ce('a', 'entryPainterTopMenuEditEraseAll');
        painterTopMenuEditEraseAllLink.addClass('entryPlaygroundPainterTopMenuEditEraseAll');
        painterTopMenuEditEraseAllLink.innerHTML = Lang.Workspace.remove_all;
        painterTopMenuEditEraseAllLink.bindOnClick(function () {
            painter.lc.clear();
        });

        painterTopMenuEditEraseAll.appendChild(painterTopMenuEditEraseAllLink);

        var painterTopStageXY = ce('div', 'entryPainterTopStageXY');
        this.painterTopStageXY = painterTopStageXY;
        painterTopStageXY.addClass('entryPlaygroundPainterTopStageXY');
        painterTop.appendChild(painterTopStageXY);

        Entry.addEventListener('pictureSelected', this.changePicture.bind(this));
    };

    p.stagemousemove = function (event) {
        this.painterTopStageXY.textContent = 'x:' + event.x.toFixed(1) + ', y:' + event.y.toFixed(1);
    };

    p.attachKeyboardEvents = function () {
        this.detachKeyboardEvents();

        var events = this._keyboardEvents;

        var evt = Entry.keyPressed;
        evt && events.push(evt.attach(this, this._keyboardPressControl));

        evt = Entry.keyUpped;
        evt && events.push(evt.attach(this, this._keyboardUpControl));
    };

    p.detachKeyboardEvents = function () {
        var events = this._keyboardEvents;
        if (!events || !events.length) return;

        while (events.length) {
            var evt = events.pop();
            evt.destroy && evt.destroy();
        }
    };
})(Entry.Painter.prototype);

/***/ }),

/***/ "./src/class/pdf.js":
/*!**************************!*\
  !*** ./src/class/pdf.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Pdf = function (file) {
    this.generateView(file);
};

var p = Entry.Pdf.prototype;

p.generateView = function (file) {
    var pdf = this;
    var pdfView = Entry.createElement('div', 'entryPdfWorkspace');
    pdfView.addClass('entryRemove');
    this._view = pdfView;

    var url = '/pdfjs/web/viewer.html';
    if (file && file != '') url += '?file=' + file;

    var pdfViewIframe = Entry.createElement('iframe', 'entryPdfIframeWorkspace');
    pdfViewIframe.setAttribute('id', 'pdfViewIframe');
    pdfViewIframe.setAttribute('frameborder', 0);
    pdfViewIframe.setAttribute('src', url);
    pdfView.appendChild(pdfViewIframe);
};

p.getView = function () {
    return this._view;
};

p.resize = function () {
    var container = document.getElementById('entryContainerWorkspaceId');
    var iframe = document.getElementById('pdfViewIframe');
    var w = container.offsetWidth;
    iframe.width = w + 'px';
    iframe.height = w * 9 / 16 + 'px';
};

/***/ }),

/***/ "./src/class/playground.js":
/*!*********************************!*\
  !*** ./src/class/playground.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
* Playground is block construct area.
* @fileoverview This manage playground.
*/


var Entry = __webpack_require__(/*! ../entry */ "./src/entry.js");

/**
 * Class for a playground.
 * This manage all view related with block.
 * @constructor
 */
Entry.Playground = function () {
    this.isTextBGMode_ = false;

    this.enableArduino = false;

    /**
     * playground's current view type
     * View types are 'default', 'code', 'picture', 'text', sound'
     * @type {string}
     */
    this.viewMode_ = 'default';
    var that = this;
    Entry.addEventListener('textEdited', this.injectText);
    Entry.addEventListener('hwChanged', this.updateHW);
};

(function (p) {
    p.setMode = function (mode) {
        console.log("playground setMode", mode);
        this.mainWorkspace.setMode(mode);
    };

    /**
     * Control bar view generator.
     * @param {!Element} playgroundView playgroundView from Entry.
     * @param {?string} option for choose type of view.
     */
    p.generateView = function (playgroundView, option) {
        /** @type {!Element} */
        this.view_ = playgroundView;
        this.view_.addClass('entryPlayground');
        if (!option || option == 'workspace') {
            this.view_.addClass('entryPlaygroundWorkspace');

            var tabView = Entry.createElement('div', 'entryCategoryTab');
            tabView.addClass('entryPlaygroundTabWorkspace');
            this.view_.appendChild(tabView);
            this.generateTabView(tabView);
            this.tabView_ = tabView;

            var curtainView = Entry.createElement('div', 'entryCurtain');
            curtainView.addClass('entryPlaygroundCurtainWorkspace');
            curtainView.addClass('entryRemove');
            var ment = Lang.Workspace.cannot_edit_click_to_stop.split('.');
            curtainView.innerHTML = ment[0] + '.<br/>' + ment[1];
            curtainView.addEventListener('click', function () {
                Entry.engine.toggleStop();
            });
            this.view_.appendChild(curtainView);
            this.curtainView_ = curtainView;

            var pictureView = Entry.createElement('div', 'entryPicture');
            pictureView.addClass('entryPlaygroundPictureWorkspace');
            pictureView.addClass('entryRemove');
            this.view_.appendChild(pictureView);
            this.generatePictureView(pictureView);
            this.pictureView_ = pictureView;

            var textView = Entry.createElement('div', 'entryText');
            textView.addClass('entryPlaygroundTextWorkspace');
            textView.addClass('entryRemove');
            this.view_.appendChild(textView);
            this.generateTextView(textView);
            this.textView_ = textView;

            var soundView = Entry.createElement('div', 'entrySound');
            soundView.addClass('entryPlaygroundSoundWorkspace');
            soundView.addClass('entryRemove');
            this.view_.appendChild(soundView);
            this.generateSoundView(soundView);
            this.soundView_ = soundView;

            var defaultView = Entry.createElement('div', 'entryDefault');
            defaultView.addClass('entryPlaygroundDefaultWorkspace');
            this.view_.appendChild(defaultView);
            this.generateDefaultView(defaultView);
            this.defaultView_ = defaultView;

            //Code view must be append at last.
            var codeView = Entry.createElement('div', 'entryCode');
            codeView.addClass('entryPlaygroundCodeWorkspace');
            codeView.addClass('entryRemove');
            this.view_.appendChild(codeView);
            this.generateCodeView(codeView);
            this.codeView_ = codeView;

            var resizeHandle = Entry.createElement('div');
            resizeHandle.addClass('entryPlaygroundResizeWorkspace', 'entryRemove');
            this.resizeHandle_ = resizeHandle;
            this.view_.appendChild(resizeHandle);
            this.initializeResizeHandle(resizeHandle);

            /** @type {!Element} */
            this.codeView_ = codeView;

            Entry.addEventListener('run', function (e) {
                Entry.playground.curtainView_.removeClass('entryRemove');
            });
            Entry.addEventListener('stop', function (e) {
                Entry.playground.curtainView_.addClass('entryRemove');
            });
        } else if (option == 'phone') {
            this.view_.addClass('entryPlaygroundPhone');

            var tabView = Entry.createElement('div', 'entryCategoryTab');
            tabView.addClass('entryPlaygroundTabPhone');
            Entry.view_.insertBefore(tabView, this.view_);
            this.generateTabView(tabView);
            this.tabView_ = tabView;

            var curtainView = Entry.createElement('div', 'entryCurtain');
            curtainView.addClass('entryPlaygroundCurtainPhone');
            curtainView.addClass('entryRemove');
            curtainView.innerHTML = Lang.Workspace.cannot_edit_click_to_stop;
            curtainView.bindOnClick(function () {
                Entry.engine.toggleStop();
            });
            this.view_.appendChild(curtainView);
            this.curtainView_ = curtainView;

            if (Entry.pictureEditable) {
                var pictureView = Entry.createElement('div', 'entryPicture');
                pictureView.addClass('entryPlaygroundPicturePhone');
                pictureView.addClass('entryRemove');
                this.view_.appendChild(pictureView);
                this.generatePictureView(pictureView);
                this.pictureView_ = pictureView;
            }

            var textView = Entry.createElement('div', 'entryText');
            //textView.addClass('entryPlaygroundTextWorkspace');
            textView.addClass('entryRemove');
            this.view_.appendChild(textView);
            this.generateTextView(textView);
            this.textView_ = textView;

            if (Entry.soundEditable) {
                var soundView = Entry.createElement('div', 'entrySound');
                soundView.addClass('entryPlaygroundSoundWorkspacePhone');
                soundView.addClass('entryRemove');
                this.view_.appendChild(soundView);
                this.generateSoundView(soundView);
                this.soundView_ = soundView;
            }

            var defaultView = Entry.createElement('div', 'entryDefault');
            //defaultView.addClass('entryPlaygroundDefaultWorkspace');
            this.view_.appendChild(defaultView);
            this.generateDefaultView(defaultView);
            this.defaultView_ = defaultView;

            //Code view must be append at last.
            var codeView = Entry.createElement('div', 'entryCode');
            codeView.addClass('entryPlaygroundCodePhone');
            this.view_.appendChild(codeView);
            this.generateCodeView(codeView);
            this.codeView_ = codeView;

            /** @type {!Element} */
            this.codeView_ = codeView;
            Entry.addEventListener('run', function (e) {
                Entry.playground.curtainView_.removeClass('entryRemove');
            });
            Entry.addEventListener('stop', function (e) {
                Entry.playground.curtainView_.addClass('entryRemove');
            });
        }

        this.applyTabOption();
    };

    /**
     * Generate default view.
     * default view is shown when object is not selected.
     * @param {!Element} defaultView
     * @return {Element}
     */
    p.generateDefaultView = function (defaultView) {
        return defaultView;
    };

    /**
     * generate tab menus
     * @param {!Element} tabView
     * @return {Element}
     */
    p.generateTabView = function (tabView) {
        var that = this;
        var tabList = Entry.createElement('ul');
        tabList.addClass('entryTabListWorkspace');
        this.tabList_ = tabList;
        tabView.appendChild(tabList);

        this.tabViewElements = {};
        var codeTab = Entry.createElement('li', 'entryCodeTab');
        codeTab.innerHTML = Lang.Workspace.tab_code;
        codeTab.addClass('entryTabListItemWorkspace entryTabSelected');
        tabList.appendChild(codeTab);
        codeTab.bindOnClick(function (e) {
            Entry.do('playgroundChangeViewMode', 'code', that.selectedViewMode);
        });
        this.tabViewElements.code = codeTab;
        this._codeTab = codeTab;

        var pictureTab = Entry.createElement('li', 'entryPictureTab');
        pictureTab.innerHTML = Lang.Workspace.tab_picture;
        pictureTab.addClass('entryTabListItemWorkspace');
        tabList.appendChild(pictureTab);
        pictureTab.bindOnClick(function (e) {
            Entry.do('playgroundChangeViewMode', 'picture', that.selectedViewMode);
        });
        this.tabViewElements.picture = pictureTab;
        this.pictureTab = pictureTab;

        var textboxTab = Entry.createElement('li', 'entryTextboxTab');
        textboxTab.innerHTML = Lang.Workspace.tab_text;
        textboxTab.addClass('entryTabListItemWorkspace');
        tabList.appendChild(textboxTab);
        textboxTab.bindOnClick(function (e) {
            Entry.do('playgroundChangeViewMode', 'text', that.selectedViewMode);
        });
        this.tabViewElements.text = textboxTab;
        textboxTab.addClass('entryRemove');
        this.textboxTab = textboxTab;

        var soundTab = Entry.createElement('li', 'entrySoundTab');
        soundTab.innerHTML = Lang.Workspace.tab_sound;
        soundTab.addClass('entryTabListItemWorkspace');
        tabList.appendChild(soundTab);
        soundTab.bindOnClick(function (e) {
            Entry.do('playgroundChangeViewMode', 'sound', that.selectedViewMode);
        });
        this.tabViewElements.sound = soundTab;
        this.soundTab = soundTab;

        var variableTab = Entry.createElement('li', 'entryVariableTab');
        variableTab.innerHTML = Lang.Workspace.tab_attribute;
        variableTab.addClass('entryTabListItemWorkspace entryVariableTabWorkspace');
        tabList.appendChild(variableTab);
        variableTab.bindOnClick(function (e) {
            Entry.do('playgroundChangeViewMode', 'variable', that.selectedViewMode);
        });
        this.tabViewElements.variable = variableTab;
        this.variableTab = variableTab;
    };

    /**
     * Inject Blockly and generate code view
     * @param {!Element} codeView
     * @return {Element}
     */
    p.generateCodeView = function (codeView) {
        var variableView = this.createVariableView();
        codeView.appendChild(variableView);
        this.variableView_ = variableView;

        codeView = Entry.Dom(codeView);
        var boardView = Entry.Dom("div", {
            parent: codeView,
            id: "entryWorkspaceBoard",
            class: "entryWorkspaceBoard"
        });

        var blockMenuView = Entry.Dom("div", {
            parent: codeView,
            id: "entryWorkspaceBlockMenu",
            class: "entryWorkspaceBlockMenu"
        });

        var initOpts = {
            'blockMenu': {
                dom: blockMenuView,
                align: "LEFT",
                categoryData: EntryStatic.getAllBlocks(),
                scroll: true
            },
            'board': {
                dom: boardView
            },
            readOnly: Entry.readOnly
        };
        if (Entry.textCodingEnable) initOpts.vimBoard = { dom: boardView };

        this.mainWorkspace = new Entry.Workspace(initOpts);
        this.blockMenu = this.mainWorkspace.blockMenu;
        this.board = this.mainWorkspace.board;
        this.blockMenu.banClass("checker");
        this.vimBoard = this.mainWorkspace.vimBoard;

        if (Entry.hw) this.updateHW();
    };

    /**
     * Generate picture view.
     * @param {!Element} pictureView
     * @return {Element}
     */
    p.generatePictureView = function (PictureView) {
        if (Entry.type == 'workspace') {
            var pictureAdd = Entry.createElement('div', 'entryAddPicture');
            pictureAdd.addClass('entryPlaygroundAddPicture');
            pictureAdd.bindOnClick(function (e) {
                if (!Entry.container || Entry.container.isSceneObjectsExist()) Entry.do('playgroundClickAddPicture');else {
                    Entry.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.add_object_alert_msg);
                }
            });
            var innerPictureAdd = Entry.createElement('div', 'entryAddPictureInner');
            innerPictureAdd.addClass('entryPlaygroundAddPictureInner');
            innerPictureAdd.innerHTML = Lang.Workspace.picture_add;
            pictureAdd.appendChild(innerPictureAdd);
            PictureView.appendChild(pictureAdd);
            this._pictureAddButton = innerPictureAdd;
            var pictureList = Entry.createElement('ul', 'entryPictureList');
            pictureList.addClass('entryPlaygroundPictureList');
            if ($) $(pictureList).sortable({
                start: function start(event, ui) {
                    ui.item.data('start_pos', ui.item.index());
                },
                stop: function stop(event, ui) {
                    var start = ui.item.data('start_pos');
                    var end = ui.item.index();
                    Entry.playground.movePicture(start, end);
                },
                axis: 'y'
            });
            PictureView.appendChild(pictureList);
            this.pictureListView_ = pictureList;

            var painterView = Entry.createElement('div', 'entryPainter');
            painterView.addClass('entryPlaygroundPainter');
            PictureView.appendChild(painterView);

            this.painter = new Entry.Painter(painterView);
        } else if (Entry.type == 'phone') {
            var pictureAdd = Entry.createElement('div', 'entryAddPicture');
            pictureAdd.addClass('entryPlaygroundAddPicturePhone');
            pictureAdd.bindOnClick(function (e) {
                Entry.dispatchEvent('openPictureManager');
            });
            var innerPictureAdd = Entry.createElement('div', 'entryAddPictureInner');
            innerPictureAdd.addClass('entryPlaygroundAddPictureInnerPhone');
            innerPictureAdd.innerHTML = Lang.Workspace.picture_add;
            pictureAdd.appendChild(innerPictureAdd);
            PictureView.appendChild(pictureAdd);
            var pictureList = Entry.createElement('ul', 'entryPictureList');
            pictureList.addClass('entryPlaygroundPictureListPhone');
            if ($) $(pictureList).sortable({
                start: function start(event, ui) {
                    ui.item.data('start_pos', ui.item.index());
                },
                stop: function stop(event, ui) {
                    var start = ui.item.data('start_pos');
                    var end = ui.item.index();
                    Entry.playground.movePicture(start, end);
                },
                axis: 'y'
            });
            PictureView.appendChild(pictureList);
            this.pictureListView_ = pictureList;
        }
    };

    /**
     * Generate text view.
     * @param {!Element} textView
     * @return {Element}
     */
    p.generateTextView = function (textView) {
        var wrap = Entry.createElement("div");
        textView.appendChild(wrap);
        var textProperties = Entry.createElement("div");
        textProperties.addClass("textProperties");
        wrap.appendChild(textProperties);
        var fontWrapper = Entry.createElement('div');
        fontWrapper.addClass('entryTextFontSelect');
        textProperties.appendChild(fontWrapper);

        var fontName = Entry.createElement('select', 'entryPainterAttrFontName');
        fontName.addClass('entryPlaygroundPainterAttrFontName', 'entryTextFontSelecter');
        fontName.size = '1';
        fontName.onchange = function (evt) {
            var font = evt.target.value;
            if (font == 'Nanum Pen Script' || font == 'Jeju Hallasan') {
                var textValue = textEditInput.value;
                if (Entry.playground.object.entity.getLineBreak()) textValue = textEditArea.value;

                if (/[\u4E00-\u9FFF]/.exec(textValue) != null) {
                    font = "KoPub Batang";
                    fontName.value = font;
                    entrylms.alert(Lang.Menus.not_supported_text);
                }
            }
            Entry.playground.object.entity.setFontType(font);
        };
        for (var i = 0; i < Entry.fonts.length; i++) {
            var font = Entry.fonts[i];
            var element = Entry.createElement('option');
            element.value = font.family;
            element.innerHTML = font.name;

            fontName.appendChild(element);
        }
        this.fontName_ = fontName;
        fontWrapper.appendChild(fontName);

        var textButtons = Entry.createElement("ul");
        textButtons.addClass("entryPlayground_text_buttons");
        textProperties.appendChild(textButtons);

        var alignLeftBtn = Entry.createElement("li");
        alignLeftBtn.addClass("entryPlaygroundTextAlignLeft");
        alignLeftBtn.bindOnClick(function (e) {
            Entry.playground.setFontAlign(Entry.TEXT_ALIGN_LEFT);
        });
        textButtons.appendChild(alignLeftBtn);
        this.alignLeftBtn = alignLeftBtn;

        var alignCenterBtn = Entry.createElement("li");
        alignCenterBtn.addClass("entryPlaygroundTextAlignCenter");
        alignCenterBtn.bindOnClick(function (e) {
            Entry.playground.setFontAlign(Entry.TEXT_ALIGN_CENTER);
        });
        textButtons.appendChild(alignCenterBtn);
        this.alignCenterBtn = alignCenterBtn;

        var alignRightBtn = Entry.createElement("li");
        alignRightBtn.addClass("entryPlaygroundTextAlignRight");
        alignRightBtn.bindOnClick(function (e) {
            Entry.playground.setFontAlign(Entry.TEXT_ALIGN_RIGHT);
        });
        textButtons.appendChild(alignRightBtn);
        this.alignRightBtn = alignRightBtn;

        var boldWrap = Entry.createElement("li");
        textButtons.appendChild(boldWrap);
        var boldButton = Entry.createElement("a");
        boldWrap.appendChild(boldButton);
        boldButton.bindOnClick(function () {
            var isBold = Entry.playground.object.entity.toggleFontBold() || false;
            if (isBold) {
                boldImage.src = Entry.mediaFilePath + 'text_button_bold_true.png';
            } else {
                boldImage.src = Entry.mediaFilePath + 'text_button_bold_false.png';
            }
        });
        var boldImage = Entry.createElement("img", "entryPlaygroundText_boldImage");
        boldButton.appendChild(boldImage);
        boldImage.src = Entry.mediaFilePath + 'text_button_bold_false.png';

        var underLineWrap = Entry.createElement("li");
        textButtons.appendChild(underLineWrap);
        var underLineButton = Entry.createElement("a");
        underLineWrap.appendChild(underLineButton);
        underLineButton.bindOnClick(function () {
            //toggle
            var underLineState = !Entry.playground.object.entity.getUnderLine() || false;
            underLineImage.src = Entry.mediaFilePath + 'text_button_underline_' + underLineState + '.png';
            Entry.playground.object.entity.setUnderLine(underLineState);
        });
        var underLineImage = Entry.createElement("img", "entryPlaygroundText_underlineImage");
        underLineButton.appendChild(underLineImage);
        underLineImage.src = Entry.mediaFilePath + 'text_button_underline_false.png';

        var italicWrap = Entry.createElement("li");
        textButtons.appendChild(italicWrap);
        var italicButton = Entry.createElement("a");
        italicWrap.appendChild(italicButton);
        italicButton.bindOnClick(function () {
            //toggle
            var isItalic = Entry.playground.object.entity.toggleFontItalic();
            if (isItalic) {
                italicImage.src = Entry.mediaFilePath + 'text_button_italic_true.png';
            } else {
                italicImage.src = Entry.mediaFilePath + '/text_button_italic_false.png';
            }
        });

        var italicImage = Entry.createElement("img", "entryPlaygroundText_italicImage");
        italicButton.appendChild(italicImage);
        italicImage.src = Entry.mediaFilePath + 'text_button_italic_false.png';

        var strikeWrap = Entry.createElement("li");
        textButtons.appendChild(strikeWrap);
        var strikeButton = Entry.createElement("a");
        strikeWrap.appendChild(strikeButton);
        strikeButton.bindOnClick(function () {
            //toggle
            var strikeState = !Entry.playground.object.entity.getStrike() || false;
            Entry.playground.object.entity.setStrike(strikeState);
            strikeImage.src = Entry.mediaFilePath + 'text_button_strike_' + strikeState + '.png';
        });
        var strikeImage = Entry.createElement("img", "entryPlaygroundText_strikeImage");
        strikeButton.appendChild(strikeImage);
        strikeImage.src = Entry.mediaFilePath + 'text_button_strike_false.png';

        var foregroundWrap = Entry.createElement("li");
        textButtons.appendChild(foregroundWrap);
        var foregroundButton = Entry.createElement("a");
        foregroundWrap.appendChild(foregroundButton);
        foregroundButton.bindOnClick(function () {
            Entry.playground.toggleColourChooser('foreground');
        });
        var foregroundImage = Entry.createElement("img", 'playgroundTextColorButtonImg');
        foregroundButton.appendChild(foregroundImage);
        foregroundImage.src = Entry.mediaFilePath + 'text_button_color_false.png';

        var backgroundWrap = Entry.createElement("li");
        textButtons.appendChild(backgroundWrap);
        var backgroundButton = Entry.createElement("a");
        backgroundWrap.appendChild(backgroundButton);
        backgroundButton.bindOnClick(function () {
            Entry.playground.toggleColourChooser('background');
        });
        var backgroundImage = Entry.createElement("img", 'playgroundTextBgButtonImg');
        backgroundButton.appendChild(backgroundImage);
        backgroundImage.src = Entry.mediaFilePath + 'text_button_background_false.png';

        var fgColorDiv = Entry.createElement("div");
        fgColorDiv.addClass("entryPlayground_fgColorDiv");
        var bgColorDiv = Entry.createElement("div");
        bgColorDiv.addClass("entryPlayground_bgColorDiv");

        foregroundButton.appendChild(fgColorDiv);
        backgroundButton.appendChild(bgColorDiv);

        var coloursWrapper = Entry.createElement("div");
        coloursWrapper.addClass("entryPlaygroundTextColoursWrapper");
        this.coloursWrapper = coloursWrapper;
        foregroundButton.appendChild(coloursWrapper);
        var colours = Entry.getColourCodes();
        for (var i = 0; i < colours.length; i++) {
            var cell = Entry.createElement("div");
            cell.addClass("modal_colour");
            cell.setAttribute("colour", colours[i]);
            cell.style.backgroundColor = colours[i];
            if (i === 0) cell.addClass("modalColourTrans");
            cell.bindOnClick(function (e) {
                Entry.playground.setTextColour(e.target.getAttribute("colour"));
            });
            coloursWrapper.appendChild(cell);
        }
        coloursWrapper.style.display = 'none';

        var backgroundsWrapper = Entry.createElement("div");
        backgroundsWrapper.addClass("entryPlaygroundTextBackgroundsWrapper");
        this.backgroundsWrapper = backgroundsWrapper;
        backgroundButton.appendChild(backgroundsWrapper);
        for (var i = 0; i < colours.length; i++) {
            var cell = Entry.createElement("div");
            cell.addClass("modal_colour");
            cell.setAttribute("colour", colours[i]);
            cell.style.backgroundColor = colours[i];
            if (i === 0) cell.addClass("modalColourTrans");
            cell.bindOnClick(function (e) {
                Entry.playground.setBackgroundColour(e.target.getAttribute("colour"));
            });
            backgroundsWrapper.appendChild(cell);
        }
        backgroundsWrapper.style.display = 'none';

        var textEditInput = Entry.createElement("input");
        textEditInput.addClass("entryPlayground_textBox");
        var textChangeApply = function textChangeApply() {
            var fontName = Entry.getElementsByClassName('entryPlaygroundPainterAttrFontName')[0];
            if (fontName.value == 'Nanum Pen Script' || fontName.value == 'Jeju Hallasan') {
                if (/[\u4E00-\u9FFF]/.exec(this.value) != null) {
                    var font = "KoPub Batang";
                    fontName.value = font;
                    Entry.playground.object.entity.setFontType(font);
                    entrylms.alert(Lang.Menus.not_supported_text);
                }
            }
            Entry.playground.object.setText(this.value);
            Entry.playground.object.entity.setText(this.value);
        };
        textEditInput.onkeyup = textChangeApply;
        textEditInput.onchange = textChangeApply;

        textEditInput.addEventListener('focusin', function () {
            textEditInput.prevText = textEditInput.value;
        });
        textEditInput.onblur = function () {
            if (textEditInput.value !== textEditInput.prevText) {
                Entry.do('editText', textEditInput.value, textEditInput.prevText);
            }
            // Entry.dispatchEvent('textEdited');
        };
        this.textEditInput = textEditInput;
        wrap.appendChild(textEditInput);

        var textEditArea = Entry.createElement("textarea");
        textEditArea.addClass("entryPlayground_textArea");
        textEditArea.style.display = 'none';
        textEditArea.onkeyup = textChangeApply;
        textEditArea.onchange = textChangeApply;

        textEditArea.addEventListener('focusin', function () {
            textEditArea.prevText = textEditArea.value;
        });
        textEditArea.onblur = function () {
            if (textEditArea.value !== textEditArea.prevText) {
                Entry.do('editText', textEditArea.value, textEditArea.prevText);
            }
            // Entry.dispatchEvent('textEdited');
        };
        this.textEditArea = textEditArea;
        wrap.appendChild(textEditArea);

        var fontSizeWrapper = Entry.createElement("div");
        fontSizeWrapper.addClass("entryPlaygroundFontSizeWrapper");
        wrap.appendChild(fontSizeWrapper);
        this.fontSizeWrapper = fontSizeWrapper;

        var fontSizeSlider = Entry.createElement("div");
        fontSizeSlider.addClass("entryPlaygroundFontSizeSlider");
        fontSizeWrapper.appendChild(fontSizeSlider);

        var fontSizeIndiciator = Entry.createElement("div");
        fontSizeIndiciator.addClass("entryPlaygroundFontSizeIndicator");
        fontSizeSlider.appendChild(fontSizeIndiciator);
        this.fontSizeIndiciator = fontSizeIndiciator;

        var fontSizeKnob = Entry.createElement("div");
        fontSizeKnob.addClass("entryPlaygroundFontSizeKnob");
        fontSizeSlider.appendChild(fontSizeKnob);
        this.fontSizeKnob = fontSizeKnob;

        var fontSizeLabel = Entry.createElement("div");
        fontSizeLabel.addClass("entryPlaygroundFontSizeLabel");
        fontSizeLabel.innerHTML = Lang.General.font_size;
        fontSizeWrapper.appendChild(fontSizeLabel);

        var isFontSizing = false;
        var resizeOffset = 0;
        fontSizeKnob.onmousedown = function (e) {
            isFontSizing = true;
            resizeOffset = $(fontSizeSlider).offset().left;
            //resizeOffset = e.offsetX;
        };

        fontSizeKnob.addEventListener('touchstart', function (e) {
            isFontSizing = true;
            resizeOffset = $(fontSizeSlider).offset().left;
        });

        document.addEventListener('mousemove', function (e) {
            if (isFontSizing) {
                var left = e.pageX - resizeOffset;
                left = Math.max(left, 5);
                left = Math.min(left, 88);
                fontSizeKnob.style.left = left + "px";
                left /= 0.88;
                fontSizeIndiciator.style.width = left + '%';
                Entry.playground.object.entity.setFontSize(left);
            }
        });

        document.addEventListener('touchmove', function (e) {
            if (isFontSizing) {
                var left = e.touches[0].pageX - resizeOffset;
                left = Math.max(left, 5);
                left = Math.min(left, 88);
                fontSizeKnob.style.left = left + "px";
                left /= 0.88;
                fontSizeIndiciator.style.width = left + '%';
                Entry.playground.object.entity.setFontSize(left);
            }
        });

        document.addEventListener('mouseup', function (e) {
            isFontSizing = false;
        });

        document.addEventListener('touchend', function (e) {
            isFontSizing = false;
        });

        var linebreakWrapper = Entry.createElement("div");
        linebreakWrapper.addClass("entryPlaygroundLinebreakWrapper");
        wrap.appendChild(linebreakWrapper);

        var linebreakHorizontal = Entry.createElement("hr");
        linebreakHorizontal.addClass("entryPlaygroundLinebreakHorizontal");
        linebreakWrapper.appendChild(linebreakHorizontal);

        var linebreakButtons = Entry.createElement("div");
        linebreakButtons.addClass("entryPlaygroundLinebreakButtons");
        linebreakWrapper.appendChild(linebreakButtons);

        var linebreakOffImage = Entry.createElement("img");
        linebreakOffImage.bindOnClick(function () {
            Entry.playground.toggleLineBreak(false);
            linebreakDescTitle.innerHTML = Lang.Menus.linebreak_off_desc_1;
            linebreakDescList1.innerHTML = Lang.Menus.linebreak_off_desc_2;
            linebreakDescList2.innerHTML = Lang.Menus.linebreak_off_desc_3;
        });

        linebreakOffImage.src = Entry.mediaFilePath + 'text-linebreak-off-true.png';
        linebreakButtons.appendChild(linebreakOffImage);
        this.linebreakOffImage = linebreakOffImage;

        var linebreakOnImage = Entry.createElement("img");
        linebreakOnImage.bindOnClick(function () {
            Entry.playground.toggleLineBreak(true);
            linebreakDescTitle.innerHTML = Lang.Menus.linebreak_on_desc_1;
            linebreakDescList1.innerHTML = Lang.Menus.linebreak_on_desc_2;
            linebreakDescList2.innerHTML = Lang.Menus.linebreak_on_desc_3;
        });

        linebreakOnImage.src = Entry.mediaFilePath + 'text-linebreak-on-false.png';
        linebreakButtons.appendChild(linebreakOnImage);
        this.linebreakOnImage = linebreakOnImage;

        var linebreakDescription = Entry.createElement("div");
        linebreakDescription.addClass("entryPlaygroundLinebreakDescription");
        linebreakWrapper.appendChild(linebreakDescription);

        var linebreakDescTitle = Entry.createElement("p");
        linebreakDescTitle.innerHTML = Lang.Menus.linebreak_off_desc_1;
        linebreakDescription.appendChild(linebreakDescTitle);

        var linebreakDescUL = Entry.createElement("ul");
        linebreakDescription.appendChild(linebreakDescUL);
        var linebreakDescList1 = Entry.createElement("li");
        linebreakDescList1.innerHTML = Lang.Menus.linebreak_off_desc_2;
        linebreakDescUL.appendChild(linebreakDescList1);
        var linebreakDescList2 = Entry.createElement("li");
        linebreakDescList2.innerHTML = Lang.Menus.linebreak_off_desc_3;
        linebreakDescUL.appendChild(linebreakDescList2);
    };

    /**
     * Generate sound view.
     * default view is shown when object is not selected.
     * @param {!Element} codeView
     * @return {Element}
     */
    p.generateSoundView = function (SoundView) {
        if (Entry.type == 'workspace') {
            var soundAdd = Entry.createElement('div', 'entryAddSound');
            soundAdd.addClass('entryPlaygroundAddSound');
            soundAdd.bindOnClick(function (e) {
                if (!Entry.container || Entry.container.isSceneObjectsExist()) Entry.do('playgroundClickAddSound');else {
                    Entry.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.add_object_alert_msg);
                }
            });
            var innerSoundAdd = Entry.createElement('div', 'entryAddSoundInner');
            innerSoundAdd.addClass('entryPlaygroundAddSoundInner');
            innerSoundAdd.innerHTML = Lang.Workspace.sound_add;
            soundAdd.appendChild(innerSoundAdd);
            SoundView.appendChild(soundAdd);
            var soundList = Entry.createElement('ul', 'entrySoundList');
            soundList.addClass('entryPlaygroundSoundList');
            if ($) $(soundList).sortable({
                start: function start(event, ui) {
                    ui.item.data('start_pos', ui.item.index());
                },
                stop: function stop(event, ui) {
                    var start = ui.item.data('start_pos');
                    var end = ui.item.index();
                    Entry.playground.moveSound(start, end);
                },
                axis: 'y'
            });
            SoundView.appendChild(soundList);
            this.soundListView_ = soundList;
            this._soundAddButton = innerSoundAdd;
        } else if (Entry.type == 'phone') {
            var soundAdd = Entry.createElement('div', 'entryAddSound');
            soundAdd.addClass('entryPlaygroundAddSoundPhone');
            soundAdd.bindOnClick(function (e) {
                Entry.dispatchEvent('openSoundManager');
            });
            var innerSoundAdd = Entry.createElement('div', 'entryAddSoundInner');
            innerSoundAdd.addClass('entryPlaygroundAddSoundInnerPhone');
            innerSoundAdd.innerHTML = Lang.Workspace.sound_add;
            soundAdd.appendChild(innerSoundAdd);
            SoundView.appendChild(soundAdd);
            var soundList = Entry.createElement('ul', 'entrySoundList');
            soundList.addClass('entryPlaygroundSoundListPhone');
            if ($) $(soundList).sortable({
                start: function start(event, ui) {
                    ui.item.data('start_pos', ui.item.index());
                },
                stop: function stop(event, ui) {
                    var start = ui.item.data('start_pos');
                    var end = ui.item.index();
                    Entry.playground.moveSound(start, end);
                },
                axis: 'y'
            });
            SoundView.appendChild(soundList);
            this.soundListView_ = soundList;
        }
    };

    /**
     * Inject object
     * @param {?Entry.EntryObject} object
     */
    p.injectObject = function (object) {
        /** @type {Entry.Entryobject} */
        if (!object) {
            this.changeViewMode('code');
            this.object = null;
            return;
        }
        if (object === this.object) return;

        if (this.object) this.object.toggleInformation(false);

        this.object = object;

        var objectType = object.objectType;
        this.setMenu(objectType);

        this.injectCode();

        var tabViewElements = this.tabViewElements;
        if (objectType == 'sprite' && Entry.pictureEditable) {
            if (tabViewElements.text) tabViewElements.text.addClass("entryRemove");
            if (tabViewElements.picture) tabViewElements.picture.removeClass("entryRemove");
        } else if (objectType == 'textBox') {
            if (tabViewElements.picture) tabViewElements.picture.addClass("entryRemove");
            if (tabViewElements.text) tabViewElements.text.removeClass("entryRemove");
        }

        var viewMode = this.viewMode_;
        if (viewMode == 'default') this.changeViewMode('code');else if (viewMode == 'variable') this.changeViewMode('variable');else if ((viewMode == 'picture' || viewMode == 'text') && objectType == 'textBox') this.changeViewMode('text');else if ((viewMode == 'text' || viewMode == 'picture') && objectType == 'sprite') this.changeViewMode('picture');else if (viewMode == 'sound') this.changeViewMode('sound');

        this.blockMenu && this.blockMenu.clearRendered();
        this.reloadPlayground();
    };

    /**
     * Inject code
     */
    p.injectCode = function () {
        var workspace = Entry.getMainWS();
        if (!workspace) return;

        var object = this.object;
        var vimBoard = workspace.vimBoard;

        if (vimBoard && Entry.textCodingEnable && !vimBoard._parser._onError) {
            vimBoard._changedObject = object;
            vimBoard._currentScene = object.scene;
        }

        var board = workspace.getBoard();
        var engine = Entry.engine;
        var cb = engine && engine.isState('run') ? undefined : board.adjustThreadsPosition.bind(board);
        workspace.changeBoardCode(object.script, cb);
    };

    /**
     * Inject picture
     */
    p.injectPicture = function () {
        var view = this.pictureListView_;
        if (!view) return;

        while (view.hasChildNodes()) {
            view.removeChild(view.lastChild);
        }if (!this.object) {
            Entry.dispatchEvent('pictureClear');
            return;
        }

        var fragment = document.createDocumentFragment();

        var pictures = this.object.pictures || [];
        pictures.forEach(function (picture, i) {
            !picture.view && Entry.playground.generatePictureElement(picture);
            var element = picture.view;
            element.orderHolder.innerHTML = i + 1;
            fragment.appendChild(element);
        });
        view.appendChild(fragment);
        this.selectPicture(this.object.selectedPicture);
    };

    /**
     * Add picture
     * @param {picture model} picture
     */
    p.addPicture = function (picture, isNew) {
        var tempPicture = Entry.cloneSimpleObject(picture);

        if (isNew === true) delete tempPicture.id;
        delete tempPicture.view;

        picture = Entry.Utils.copy(tempPicture);
        if (!picture.id) picture.id = Entry.generateHash();

        picture.name = Entry.getOrderedName(picture.name, this.object.pictures);

        this.generatePictureElement(picture);

        Entry.do('objectAddPicture', picture.objectId || this.object.id, picture);
        this.injectPicture();
        this.selectPicture(picture);
    };

    /**
     * set picture
     * @param {picture}
     */
    p.setPicture = function (picture) {
        var element = Entry.container.getPictureElement(picture.id, picture.objectId);
        var $element = $(element);
        if (element) {
            picture.view = element;
            element.picture = picture;

            var thumbnailView = $element.find('#t_' + picture.id)[0];
            if (picture.fileurl) {
                thumbnailView.style.backgroundImage = 'url("' + picture.fileurl + '")';
            } else {
                // deprecated
                var fileName = picture.filename;
                thumbnailView.style.backgroundImage = 'url("' + Entry.defaultPath + '/uploads/' + fileName.substring(0, 2) + '/' + fileName.substring(2, 4) + '/thumb/' + fileName + '.png")';
            }
            var sizeView = $element.find('#s_' + picture.id)[0];
            sizeView.innerHTML = picture.dimension.width + ' X ' + picture.dimension.height;
        }

        Entry.container.setPicture(picture);
        // Entry.playground.object.setPicture(picture);
    };

    /**
     * Download a picture
     * @param {!String} pictureId
     */
    p.downloadPicture = function (pictureId) {
        var picture = Entry.playground.object.getPicture(pictureId);
        if (picture.fileurl) {
            window.open('/api/sprite/download/entryjs/' + encodeURIComponent(picture.fileurl) + '/' + encodeURIComponent(picture.name) + '.png');
        } else {
            window.open('/api/sprite/download/image/' + encodeURIComponent(picture.filename) + '/' + encodeURIComponent(picture.name) + '.png');
        }
    };

    /**
     * Clone picture
     * @param {!String} pictureId
     */
    p.clonePicture = function (pictureId) {
        var sourcePicture = Entry.playground.object.getPicture(pictureId);
        this.addPicture(sourcePicture, true);
    };

    /**
     * Select picture
     * @param {picture}
     */
    p.selectPicture = function (picture) {
        var pictures = this.object.pictures;
        for (var i = 0, len = pictures.length; i < len; i++) {
            var target = pictures[i];
            var view = target.view;
            if (target.id === picture.id) view.addClass('entryPictureSelected');else view.removeClass('entryPictureSelected');
        }

        var objectId_;
        if (picture && picture.id) objectId_ = Entry.container.selectPicture(picture.id, picture.objectId);

        if (this.object.id === objectId_) {
            if (!picture.objectId) picture.objectId = this.object.id;
            Entry.dispatchEvent('pictureSelected', picture);
        }
    };

    /**
     * Move picture in this.object.pictures
     * this method is for sortable
     * @param {!number} start
     * @param {!number} end
     */
    p.movePicture = function (start, end) {
        this.object.pictures.splice(end, 0, this.object.pictures.splice(start, 1)[0]);
        this.injectPicture();
    };

    /**
     * Inject text
     */
    p.injectText = function () {
        var object = this.object;

        if (!object) return;

        var entity = object.entity;

        var text = entity.getText();
        this.textEditInput.value = text;
        this.textEditArea.value = text;

        $("#entryPainterAttrFontName").val(entity.getFontName());

        var isBold = entity.fontBold || false;
        $("#entryPlaygroundText_boldImage").attr('src', Entry.mediaFilePath + 'text_button_bold_' + isBold + '.png');

        var isItalic = entity.fontItalic || false;
        $("#entryPlaygroundText_italicImage").attr('src', Entry.mediaFilePath + 'text_button_italic_' + isItalic + '.png');

        var isUnderLine = entity.getUnderLine() || false;
        $("#entryPlaygroundText_underlineImage").attr('src', Entry.mediaFilePath + 'text_button_underline_' + isUnderLine + '.png');

        var isStrike = entity.getStrike() || false;
        $("#entryPlaygroundText_strikeImage").attr('src', Entry.mediaFilePath + 'text_button_strike_' + isStrike + '.png');

        if (entity.colour) this.setTextColour(entity.colour, true);
        if (entity.bgColor) this.setBackgroundColour(entity.bgColor, true);

        this.toggleLineBreak(entity.getLineBreak());

        if (entity.getLineBreak()) {
            var LANG = Lang.Menus;
            $(".entryPlaygroundLinebreakDescription > p").html(LANG.linebreak_on_desc_1);
            var pDoms = $(".entryPlaygroundLinebreakDescription > ul > li");
            pDoms.eq(0).text(LANG.linebreak_on_desc_2);
            pDoms.eq(1).text(LANG.linebreak_on_desc_3);
            this._setFontFontUI();
        }

        this.setFontAlign(entity.getTextAlign());
    };

    p._setFontFontUI = function () {
        var fontSize = this.object.entity.getFontSize();
        this.fontSizeIndiciator.style.width = fontSize + '%';
        this.fontSizeKnob.style.left = fontSize * 0.88 + 'px';
    };

    /**
     * Inject sound
     */
    p.injectSound = function () {
        var view = this.soundListView_;
        if (!view) return;

        while (view.hasChildNodes()) {
            view.removeChild(view.lastChild);
        }if (!this.object) return;

        var fragment = document.createDocumentFragment();

        var sounds = this.object.sounds || [];
        sounds.forEach(function (sound, i) {
            !sound.view && Entry.playground.generateSoundElement(sound);
            var element = sound.view;
            element.orderHolder.innerHTML = i + 1;
            fragment.appendChild(element);
        });
        view.appendChild(fragment);
    };

    /**
     * Move sound in this.object.sounds
     * this method is for sortable
     * @param {!number} start
     * @param {!number} end
     */
    p.moveSound = function (start, end) {
        this.object.sounds.splice(end, 0, this.object.sounds.splice(start, 1)[0]);
        this.updateListViewOrder('sound');
    };

    /**
     * Add sound
     * @param {sound model} sound
     * @param {boolean} NotForView if this is true, add element into object also.
     */
    p.addSound = function (sound, NotForView, isNew) {
        var tempSound = Entry.cloneSimpleObject(sound);
        delete tempSound.view;
        if (isNew === true) delete tempSound.id;

        sound = Entry.Utils.copy(tempSound);
        if (!sound.id) sound.id = Entry.generateHash();
        sound.name = Entry.getOrderedName(sound.name, this.object.sounds);

        this.generateSoundElement(sound);
        Entry.do('objectAddSound', this.object.id, sound);
        this.injectSound();
    };

    p.downloadSound = function (soundId) {
        var sound = Entry.playground.object.getSound(soundId);
        if (sound.fileurl) {
            if (sound.fileurl.indexOf('bark.mp3') > -1) {
                window.open('/api/sprite/download/entryjs/' + encodeURIComponent(sound.fileurl) + '/' + encodeURIComponent(sound.name + '.mp3'));
            } else {
                window.open(sound.fileurl);
            }
        } else {
            window.open('/api/sprite/download/sound/' + encodeURIComponent(sound.filename) + '/' + encodeURIComponent(sound.name));
        }
    };

    /**
     * select view mode
     * @param {string} viewType
     */
    p.changeViewMode = function (viewType) {
        for (var i in this.tabViewElements) {
            var tab = this.tabViewElements[i];
            tab.removeClass('entryTabSelected');
        }
        if (viewType != 'default') this.tabViewElements[viewType].addClass('entryTabSelected');
        if (viewType == 'variable') {
            Entry.playground.toggleOnVariableView();
            this.tabViewElements.code.removeClass('entryTabSelected');
            this.tabViewElements[viewType].addClass('entryTabSelected');
            return;
        }
        var views = this.view_.children;
        for (var i = 0; i < views.length; i++) {
            var view = views[i];
            if (view.id.toUpperCase().indexOf(viewType.toUpperCase()) > -1) view.removeClass('entryRemove');else view.addClass('entryRemove');
        }

        if (Entry.pictureEditable) {
            if (viewType == 'picture') {
                this.painter.show();
                if (!this.pictureView_.object || this.pictureView_.object != this.object) {
                    this.pictureView_.object = this.object;
                    this.injectPicture();
                } else if (this.object && this.pictureListView_ && !this.pictureListView_.hasChildNodes()) {
                    var pictures = this.object.pictures;
                    if (pictures && pictures.length) {
                        this.injectPicture();
                    }
                }
            } else this.painter.hide();
        }

        if (viewType == 'sound') {
            if (!this.soundView_.object || this.soundView_.object != this.object) {
                this.soundView_.object = this.object;
                this.injectSound();
            } else if (this.object && this.soundListView_ && !this.soundListView_.hasChildNodes()) {
                var sounds = this.object.sounds;
                if (sounds && sounds.length) {
                    this.injectSound();
                }
            }
        }

        if (viewType == 'text' && this.object.objectType == 'textBox' || this.textView_.object != this.object) {
            this.textView_.object = this.object;
            this.injectText();
        }

        if (viewType == 'code') {
            this.resizeHandle_ && this.resizeHandle_.removeClass('entryRemove');
            this.blockMenu.reDraw();
        }
        if (Entry.engine.isState('run')) this.curtainView_.removeClass('entryRemove');
        this.viewMode_ = viewType;
        this.selectedViewMode = viewType;
        this.toggleOffVariableView();
    };

    /**
     * render variable view
     * @return {!Element}
     */
    p.createVariableView = function () {
        var view = Entry.createElement('div');
        if (!Entry.type || Entry.type == 'workspace') {
            view.addClass('entryVariablePanelWorkspace');
        } else if (Entry.type == 'phone') {
            view.addClass('entryVariablePanelPhone');
        }
        this.variableViewWrapper_ = view;
        Entry.variableContainer.createDom(view);
        return view;
    };

    /**
     * toggle on variable view
     */
    p.toggleOnVariableView = function () {
        Entry.playground.changeViewMode('code');
        this.hideBlockMenu();
        Entry.variableContainer.updateList();
        this.variableView_.removeClass('entryRemove');
        this.resizeHandle_.removeClass('entryRemove');
        this.viewMode_ = 'variable';
        this.selectedViewMode = 'variable';
    };

    p.toggleOffVariableView = function () {
        this.showBlockMenu();
        this.variableView_.addClass('entryRemove');
    };

    /**
     */
    p.editBlock = function () {
        var playground = Entry.playground;
        if (!Entry.stateManager) return;
        Entry.stateManager.addCommand("edit block", playground, playground.restoreBlock, playground.object, playground.object.getScriptText());
    };

    p.mouseupBlock = function () {
        if (!Entry.reporter) return;
        var playground = Entry.playground;
        var object = playground.object;
        Entry.reporter.report(new Entry.State("edit block mouseup", playground, playground.restoreBlock, object, object.getScriptText()));
    };

    /**
     * @param {!Entry.EntryObject} targetObject
     * @param {!string} blockString
     */
    p.restoreBlock = function (targetObject, blockString) {
        var playground = Entry.playground;
        Entry.container.selectObject(targetObject.id);
        if (Entry.stateManager) {
            Entry.stateManager.addCommand("restore block", this, this.restoreBlock, this.object, this.object.getScriptText());
        }
        var script = Blockly.Xml.textToDom(blockString);
        //TODO: restore block
    };

    /**
     * Generate category menu with object type.
     * @param {!string} objectType
     */
    p.setMenu = function (objectType) {
        if (this.currentObjectType == objectType) return;

        var blockMenu = this.blockMenu;
        blockMenu.unbanClass(this.currentObjectType, true);
        blockMenu.banClass(objectType, true);
        blockMenu.setMenu(true);
        this.currentObjectType = objectType;
    };

    p.hideTabs = function () {
        var items = ['picture', 'text', 'sound', 'variable'];
        for (var i in items) {
            this.hideTab([items[i]]);
        }
    };

    p.hideTab = function (item) {
        if (this.tabViewElements[item]) {
            this.tabViewElements[item].addClass('hideTab');
            this.tabViewElements[item].removeClass('showTab');
        }
    };

    p.showTabs = function () {
        var items = ['picture', 'text', 'sound', 'variable'];
        for (var i in items) {
            this.showTab(items[i]);
        }
    };

    p.showTab = function (item) {
        if (this.tabViewElements[item]) {
            this.tabViewElements[item].addClass('showTab');
            this.tabViewElements[item].removeClass('hideTab');
        }
    };

    /**
     * Handle is resizing playground handle.
     * This add mouse move and mouse up event to document.
     * @param {!Element} handle
     */
    p.initializeResizeHandle = function (handle) {
        $(handle).bind('mousedown touchstart', function (e) {
            Entry.playground.resizing = true;
            if (Entry.documentMousemove) {
                Entry.playground.resizeEvent = Entry.documentMousemove.attach(this, function (e) {
                    if (Entry.playground.resizing) {
                        Entry.resizeElement({
                            menuWidth: e.clientX - Entry.interfaceState.canvasWidth
                        });
                    }
                });
            }
        });

        $(document).bind('mouseup touchend', function (e) {
            var listener = Entry.playground.resizeEvent;
            if (listener) {
                Entry.playground.resizing = false;
                listener.destroy();
                delete Entry.playground.resizeEvent;
            }
        });
    };

    /**
     * Reload playground
     */
    p.reloadPlayground = function () {
        var engine = Entry.engine;

        if (engine && engine.isState('run')) return;

        this.mainWorkspace && this.mainWorkspace.dReDraw();
    };

    /**
     * flush playground when object is not exist
     */
    p.flushPlayground = function () {
        this.object = null;
        if (Entry.playground && Entry.playground.view_) {
            this.injectPicture();
            this.injectSound();
            var board = Entry.playground.mainWorkspace.getBoard();
            board.clear();
            board.changeCode(null);
        }
    };

    p.refreshPlayground = function () {
        if (Entry.playground && Entry.playground.view_) {
            if (this.getViewMode() === "picture") this.injectPicture();
            if (this.getViewMode() === "sound") this.injectSound();
        }
    };

    p.updateListViewOrder = function (type) {
        var list;
        if (type == 'picture') list = this.pictureListView_.childNodes;else list = this.soundListView_.childNodes;
        for (var i = 0, len = list.length; i < len; i++) {
            list[i].orderHolder.innerHTML = i + 1;
        }
    };

    p.generatePictureElement = function (picture) {
        var element = Entry.createElement('li', picture.id);
        picture.view = element;
        element.addClass('entryPlaygroundPictureElement');
        element.picture = picture;
        element.bindOnClick(function (e) {
            Entry.playground.selectPicture(this.picture);
        });

        Entry.Utils.disableContextmenu(picture.view);
        Entry.ContextMenu.onContextmenu($(picture.view), function () {
            var options = [{
                text: Lang.Workspace.context_rename,
                callback: function callback() {
                    nameView.focus();
                }
            }, {
                text: Lang.Workspace.context_duplicate,
                callback: function callback() {
                    Entry.playground.clonePicture(picture.id);
                }
            }, {
                text: Lang.Workspace.context_remove,
                callback: function callback() {
                    if (Entry.playground.object.removePicture(picture.id)) {
                        Entry.removeElement(element);
                        Entry.dispatchEvent('removePicture', picture);
                        Entry.toast.success(Lang.Workspace.shape_remove_ok, picture.name + ' ' + Lang.Workspace.shape_remove_ok_msg);
                    } else {
                        Entry.toast.alert(Lang.Workspace.shape_remove_fail, Lang.Workspace.shape_remove_fail_msg);
                    }
                }
            }, { divider: true }, {
                text: Lang.Workspace.context_download,
                callback: function callback() {
                    Entry.playground.downloadPicture(picture.id);
                }
            }];
            Entry.ContextMenu.show(options, 'workspace-contextmenu');
        });

        var orderHolder = Entry.createElement('div');
        orderHolder.addClass('entryPlaygroundPictureOrder');
        element.orderHolder = orderHolder;
        element.appendChild(orderHolder);
        var thumbnailView = Entry.createElement('div', 't_' + picture.id);
        thumbnailView.addClass('entryPlaygroundPictureThumbnail');
        if (picture.fileurl) {
            thumbnailView.style.backgroundImage = 'url("' + picture.fileurl + '")';
        } else {
            // deptecated
            var fileName = picture.filename;
            thumbnailView.style.backgroundImage = 'url("' + Entry.defaultPath + '/uploads/' + fileName.substring(0, 2) + '/' + fileName.substring(2, 4) + '/thumb/' + fileName + '.png")';
        }
        element.appendChild(thumbnailView);
        var nameView = Entry.createElement('input');
        nameView.addClass('entryPlaygroundPictureName');
        nameView.addClass('entryEllipsis');
        nameView.picture = picture;
        nameView.value = picture.name;
        Entry.attachEventListener(nameView, 'blur', nameViewBlur);

        function nameViewBlur() {
            if (this.value.trim() === '') {
                Entry.deAttachEventListener(this, 'blur', nameViewBlur);
                entrylms.alert(Lang.Workspace.enter_the_name);
                this.focus();
                Entry.attachEventListener(this, 'blur', nameViewBlur);
                return;
            }

            var nameViewArray = $(".entryPlaygroundPictureName");
            for (var i = 0; i < nameViewArray.length; i++) {
                if (nameViewArray.eq(i).val() == nameView.value && nameViewArray[i] != this) {
                    Entry.deAttachEventListener(this, 'blur', nameViewBlur);
                    entrylms.alert(Lang.Workspace.name_already_exists);
                    this.focus();
                    Entry.attachEventListener(this, 'blur', nameViewBlur);
                    return;
                }
            }
            var newValue = this.value;
            this.picture.name = newValue;
            var playground = Entry.playground;
            if (playground) {
                if (playground.object) {
                    var pic = playground.object.getPicture(this.picture.id);
                    if (pic) pic.name = newValue;
                }
                var painter = playground.painter;
                if (painter && painter.file) painter.file.name = newValue;

                playground.reloadPlayground();
            }
            Entry.dispatchEvent('pictureNameChanged', this.picture);
        }

        nameView.onkeypress = function (e) {
            if (e.keyCode == 13) this.blur();
        };

        element.appendChild(nameView);
        var sizeView = Entry.createElement('div', 's_' + picture.id);
        sizeView.addClass('entryPlaygroundPictureSize');
        sizeView.innerHTML = picture.dimension.width + ' X ' + picture.dimension.height;
        element.appendChild(sizeView);
    };

    p.generateSoundElement = function (sound) {
        var element = Entry.createElement('sound', sound.id);
        sound.view = element;
        element.addClass('entryPlaygroundSoundElement');
        element.sound = sound;

        Entry.Utils.disableContextmenu(sound.view);
        Entry.ContextMenu.onContextmenu($(sound.view), function () {
            var options = [{
                text: Lang.Workspace.context_rename,
                callback: function callback() {
                    nameView.focus();
                }
            }, {
                text: Lang.Workspace.context_duplicate,
                callback: function callback() {
                    Entry.playground.addSound(sound, true, true);
                }
            }, {
                text: Lang.Workspace.context_remove,
                callback: function callback() {
                    var result = Entry.do('objectRemoveSound', Entry.playground.object.id, sound);
                    if (result) {
                        Entry.removeElement(element);
                        Entry.dispatchEvent('removeSound', sound);
                        Entry.toast.success(Lang.Workspace.sound_remove_ok, sound.name + ' ' + Lang.Workspace.sound_remove_ok_msg);
                    } else {
                        Entry.toast.alert(Lang.Workspace.sound_remove_fail, '');
                    }
                    Entry.removeElement(element);
                }
            }, { divider: true }, {
                text: Lang.Workspace.context_download,
                callback: function callback() {
                    Entry.playground.downloadSound(sound.id);
                }
            }];
            Entry.ContextMenu.show(options, 'workspace-contextmenu');
        });

        var orderHolder = Entry.createElement('div');
        orderHolder.addClass('entryPlaygroundSoundOrder');
        element.orderHolder = orderHolder;
        element.appendChild(orderHolder);

        var thumbnailView = Entry.createElement('div');
        thumbnailView.addClass('entryPlaygroundSoundThumbnail');
        thumbnailView.addClass('entryPlaygroundSoundPlay');
        var isPlaying = false;
        var soundInstance;
        thumbnailView.addEventListener('click', function () {
            if (isPlaying) {
                isPlaying = false;
                thumbnailView.removeClass('entryPlaygroundSoundStop');
                thumbnailView.addClass('entryPlaygroundSoundPlay');
                soundInstance.stop();
                return;
            } else {
                isPlaying = true;
                thumbnailView.removeClass('entryPlaygroundSoundPlay');
                thumbnailView.addClass('entryPlaygroundSoundStop');
                soundInstance = createjs.Sound.play(sound.id);
            }

            soundInstance.addEventListener("complete", function (e) {
                thumbnailView.removeClass('entryPlaygroundSoundStop');
                thumbnailView.addClass('entryPlaygroundSoundPlay');
                isPlaying = false;
            });
            soundInstance.addEventListener("loop", function (e) {});
            soundInstance.addEventListener("failed", function (e) {});
        });

        element.appendChild(thumbnailView);
        var nameView = Entry.createElement('input');
        nameView.addClass('entryPlaygroundSoundName');
        nameView.sound = sound;
        nameView.value = sound.name;
        Entry.attachEventListener(nameView, 'blur', nameViewBlur);

        function nameViewBlur() {
            if (this.value.trim() === '') {
                Entry.deAttachEventListener(this, 'blur', nameViewBlur);
                entrylms.alert(Lang.Workspace.enter_the_name);
                this.focus();
                Entry.attachEventListener(this, 'blur', nameViewBlur);
                return;
            }

            var nameViewArray = $(".entryPlaygroundSoundName");
            for (var i = 0; i < nameViewArray.length; i++) {
                if (nameViewArray.eq(i).val() == nameView.value && nameViewArray[i] != this) {
                    Entry.deAttachEventListener(this, 'blur', nameViewBlur);
                    entrylms.alert(Lang.Workspace.name_already_exists);
                    this.focus();
                    Entry.attachEventListener(this, 'blur', nameViewBlur);
                    return;
                }
            }
            var newValue = this.value;
            this.sound.name = newValue;
            Entry.playground.reloadPlayground();
        }

        nameView.onkeypress = function (e) {
            if (e.keyCode == 13) this.blur();
        };
        element.appendChild(nameView);
        var lengthView = Entry.createElement('div');
        lengthView.addClass('entryPlaygroundSoundLength');
        lengthView.innerHTML = sound.duration + ' ' + Lang.General.second;
        element.appendChild(lengthView);
    };

    p.toggleColourChooser = function (name) {
        if (name === 'foreground') {
            if (this.coloursWrapper.style.display === 'none') {
                this.coloursWrapper.style.display = 'block';
                this.backgroundsWrapper.style.display = 'none';
            } else {
                this.coloursWrapper.style.display = 'none';
            }
        } else if (name === 'background') {
            if (this.backgroundsWrapper.style.display === 'none') {
                this.backgroundsWrapper.style.display = 'block';
                this.coloursWrapper.style.display = 'none';
            } else {
                this.backgroundsWrapper.style.display = 'none';
            }
        }
    };

    p.setTextColour = function (colour, doNotToggle) {
        this.object.entity.setColour(colour);
        if (doNotToggle !== true) this.toggleColourChooser('foreground');
        $('.entryPlayground_fgColorDiv').css('backgroundColor', colour);
        $('#playgroundTextColorButtonImg').attr('src', Entry.mediaFilePath + 'text_button_color_true.png');
    };

    p.setBackgroundColour = function (colour, doNotToggle) {
        this.object.entity.setBGColour(colour);
        if (doNotToggle !== true) this.toggleColourChooser('background');
        $('.entryPlayground_bgColorDiv').css('backgroundColor', colour);
        $('#playgroundTextBgButtonImg').attr('src', Entry.mediaFilePath + 'text_button_background_true.png');
    };

    p.isTextBGMode = function () {
        return this.isTextBGMode_;
    };

    p.checkVariables = function () {
        if (Entry.forEBS) return;

        if (Entry.variableContainer.lists_.length) this.blockMenu.unbanClass("listNotExist");else this.blockMenu.banClass("listNotExist");

        if (Entry.variableContainer.variables_.length) this.blockMenu.unbanClass("variableNotExist");else this.blockMenu.banClass("variableNotExist");
    };

    p.getViewMode = function () {
        return this.viewMode_;
    };

    p.updateHW = function () {
        var self = Entry.playground;

        var WS = self.mainWorkspace;
        if (!WS) return;
        var blockMenu = WS.blockMenu;
        if (!blockMenu) return;

        var hw = Entry.hw;
        if (hw && hw.connected) {
            blockMenu.banClass("arduinoDisconnected", true);

            hw.banHW();

            if (hw.hwModule) {
                blockMenu.banClass("arduinoConnect", true);
                blockMenu.unbanClass("arduinoConnected", true);
                blockMenu.unbanClass(hw.hwModule.name);
            } else {
                blockMenu.banClass("arduinoConnected", true);
                blockMenu.unbanClass("arduinoConnect", true);
            }
        } else {
            blockMenu.banClass("arduinoConnected", true);
            blockMenu.banClass("arduinoConnect", true);
            blockMenu.unbanClass("arduinoDisconnected", true);

            Entry.hw.banHW();
        }

        blockMenu.hwCodeOutdated = true;
        blockMenu._generateHwCode(true);
        blockMenu.reDraw();
    };

    p.toggleLineBreak = function (isLineBreak) {
        var object = this.object;
        if (!object || object.objectType != "textBox") return;

        var entity = object.entity;
        if (isLineBreak) {
            entity.setLineBreak(true);
            $('.entryPlayground_textArea').css('display', 'block');
            $('.entryPlayground_textBox').css('display', 'none');
            this.linebreakOffImage.src = Entry.mediaFilePath + 'text-linebreak-off-false.png';
            this.linebreakOnImage.src = Entry.mediaFilePath + 'text-linebreak-on-true.png';
            this.fontSizeWrapper.removeClass("entryHide");
            this._setFontFontUI();
        } else {
            entity.setLineBreak(false);
            $('.entryPlayground_textArea').css('display', 'none');
            $('.entryPlayground_textBox').css('display', 'block');
            this.linebreakOffImage.src = Entry.mediaFilePath + 'text-linebreak-off-true.png';
            this.linebreakOnImage.src = Entry.mediaFilePath + 'text-linebreak-on-false.png';
            this.fontSizeWrapper.addClass("entryHide");
        }
    };

    p.setFontAlign = function (fontAlign) {
        if (this.object.objectType != "textBox") return;
        this.alignLeftBtn.removeClass("toggle");
        this.alignCenterBtn.removeClass("toggle");
        this.alignRightBtn.removeClass("toggle");
        switch (fontAlign) {
            case Entry.TEXT_ALIGN_LEFT:
                this.alignLeftBtn.addClass("toggle");
                break;
            case Entry.TEXT_ALIGN_CENTER:
                this.alignCenterBtn.addClass("toggle");
                break;
            case Entry.TEXT_ALIGN_RIGHT:
                this.alignRightBtn.addClass("toggle");
                break;
        }
        this.object.entity.setTextAlign(fontAlign);
    };

    p.hideBlockMenu = function () {
        this.mainWorkspace.getBlockMenu().hide();
    };

    p.showBlockMenu = function () {
        this.mainWorkspace.getBlockMenu().show();
    };

    p.getDom = function (query) {
        if (query.length >= 1) {
            switch (query.shift()) {
                case "tabViewElements":
                    return this.tabViewElements[query.shift()];
                case "blockMenu":
                    return this.blockMenu.getDom(query);
                case "board":
                    return this.board.getDom(query);
                case "pictureAddButton":
                    return this._pictureAddButton;
                case "soundAddButton":
                    return this._soundAddButton;
            }
        } else {}
    };

    p.applyTabOption = function () {
        this.textboxTab.addClass("entryRemove");
        this.pictureTab.addClass("entryRemove");
        this.soundTab.addClass("entryRemove");
        this.variableTab.addClass("entryRemove");
        if (Entry.pictureEditable) {
            this.pictureTab.removeClass("entryRemove");
            this.textboxTab.removeClass("entryRemove");
        }
        if (Entry.soundEditable) this.soundTab.removeClass("entryRemove");
        if (Entry.hasVariableManager) this.variableTab.removeClass("entryRemove");
    };
})(Entry.Playground.prototype);

/***/ }),

/***/ "./src/class/popup.js":
/*!****************************!*\
  !*** ./src/class/popup.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Popup object for generate popup.
 */


/**
 * Constructor of popup
 * @constructor
 */

Entry.Popup = function (className) {
    Entry.assert(!window.popup, 'Popup exist');

    this.body_ = Entry.createElement('div');
    this.body_.addClass('entryPopup');
    if (className) this.body_.addClass(className);
    this.body_.bindOnClick(function (e) {
        if (e.target == this) {
            this.popup.remove();
        }
    });
    this.body_.popup = this;
    document.body.appendChild(this.body_);
    this.window_ = Entry.createElement('div');
    this.window_.addClass('entryPopupWindow');
    if (Entry.targetChecker) this.window_.addClass('targetCheckerPopup');
    if (Entry.device === 'tablet') this.window_.addClass('tablet');
    this.window_.bindOnClick(function () {});
    Entry.addEventListener('windowResized', this.resize);
    window.popup = this;
    this.resize();
    this.body_.appendChild(this.window_);
};

/**
 * Remove this popup
 */
Entry.Popup.prototype.remove = function () {
    while (this.window_.hasChildNodes()) {
        if (Entry.type == 'workspace') Entry.view_.insertBefore(this.window_.firstChild, Entry.container.view_);else {
            Entry.view_.insertBefore(this.window_.lastChild, Entry.view_.firstChild);
        }
    }
    $('body').css('overflow', 'auto');
    Entry.removeElement(this.body_);
    window.popup = null;
    Entry.removeEventListener('windowResized', this.resize);
    Entry.engine.popup = null;
    Entry.windowResized.notify();
    if (Entry.type === "workspace" && Entry.targetChecker) Entry.targetChecker.getStatusView().remove();
};

/**
 * Resize this view size when window size modified
 * @param {event} e
 */
Entry.Popup.prototype.resize = function (e) {
    var popup = window.popup;
    var popupWindow = popup.window_;
    var bottomOffset = Entry.targetChecker ? 91 + 35 : 35;
    var maxWidth = window.innerWidth * 0.9;
    var maxHeight = window.innerHeight * 0.9 - bottomOffset;
    if (maxWidth * 9 <= maxHeight * 16) {
        maxHeight = maxWidth / 16 * 9;
        maxHeight += bottomOffset;
        popupWindow.style.width = String(maxWidth) + 'px';
        popupWindow.style.height = String(maxHeight) + 'px';
    } else {
        maxWidth = maxHeight * 16 / 9;
        maxHeight += bottomOffset;
        popupWindow.style.width = String(maxWidth) + 'px';
        popupWindow.style.height = String(maxHeight) + 'px';
    }

    Entry.stage && Entry.stage.updateBoundRect();
};

Entry.Popup.prototype.removeMouseDispose = function (e) {
    this.body_.unBindOnClick();
};

/***/ }),

/***/ "./src/class/popup_helper.js":
/*!***********************************!*\
  !*** ./src/class/popup_helper.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Popup object for generate popup.
 */


/**
 * Constructor of popup
 * @constructor
 */

Entry.popupHelper = function (reset) {
    this.popupList = {};
    this.nextPopupList = [];
    this.nowContent;
    if (reset) {
        $('.entryPopup.popupHelper').remove();
        window.popupHelper = null;
    }
    Entry.assert(!window.popupHelper, 'Popup exist');

    var ignoreCloseType = ['confirm', 'spinner'];
    var spanArea = ['entryPopupHelperTopSpan', 'entryPopupHelperBottomSpan', 'entryPopupHelperLeftSpan', 'entryPopupHelperRightSpan'];
    this.body_ = Entry.Dom('div', {
        classes: ['entryPopup', 'hiddenPopup', 'popupHelper']
    });
    var that = this;

    function popupClickEvent(e) {
        if (that.nowContent && ignoreCloseType.indexOf(that.nowContent.prop('type')) > -1) {
            return;
        }
        var $target = $(e.target);
        spanArea.forEach(function (className) {
            if ($target.hasClass(className)) {
                that.hide();
            }
        });
        if (e.target == that) {
            that.hide();
        }
    }

    this.body_.bindOnClick(popupClickEvent);

    window.popupHelper = this;
    this.body_.prop('popup', this);

    Entry.Dom('div', {
        class: 'entryPopupHelperTopSpan',
        parent: this.body_
    });
    var middle = Entry.Dom('div', {
        class: 'entryPopupHelperMiddleSpan',
        parent: this.body_
    });
    Entry.Dom('div', {
        class: 'entryPopupHelperBottomSpan',
        parent: this.body_
    });
    Entry.Dom('div', {
        class: 'entryPopupHelperLeftSpan',
        parent: middle
    });
    this.window_ = Entry.Dom('div', {
        class: 'entryPopupHelperWindow',
        parent: middle
    });
    Entry.Dom('div', {
        class: 'entryPopupHelperRightSpan',
        parent: middle
    });

    $('body').append(this.body_);
};

Entry.popupHelper.prototype.clearPopup = function () {
    var maxCnt = this.popupWrapper_.children.length - 1;
    for (var i = maxCnt; i > 2; i--) {
        this.popupWrapper_.removeChild(this.popupWrapper_.children[i]);
    }
};

Entry.popupHelper.prototype.addPopup = function (key, popupObject) {
    var content_ = Entry.Dom('div');

    var titleButton_ = Entry.Dom('div', {
        class: 'entryPopupHelperCloseButton'
    });

    titleButton_.bindOnClick(function () {
        if (popupObject.closeEvent) {
            popupObject.closeEvent(this);
        } else {
            this.hide();
        }
    }.bind(this));

    var self = this;

    var popupWrapper_ = Entry.Dom('div', {
        class: 'entryPopupHelperWrapper'
    });

    popupWrapper_.append(titleButton_);

    if (popupObject.title) {
        var title_ = Entry.Dom('div', {
            class: 'entryPopupHelperTitle'
        });
        popupWrapper_.append(title_);
        title_.text(popupObject.title);
    }

    content_.addClass(key);
    content_.append(popupWrapper_);
    content_.popupWrapper_ = popupWrapper_;
    content_.prop('type', popupObject.type);

    if (typeof popupObject.setPopupLayout === 'function') {
        popupObject.setPopupLayout(content_);
    }
    content_._obj = popupObject;

    this.popupList[key] = content_;
};

Entry.popupHelper.prototype.hasPopup = function (key) {
    return !!this.popupList[key];
};

Entry.popupHelper.prototype.setPopup = function (popupObject) {};

/**
 * Remove this popup
 */
Entry.popupHelper.prototype.remove = function (key) {
    if (key) {
        this.window_.find('> .' + key).remove();
    } else if (this.window_.children().length > 0) {
        this.window_.children().remove();
    }
    // 지워지면 안되는 요소인데 지워지고 있었음. 이유는? 잠시동안만 유지.
    // this.window_.remove();
    delete this.popupList[key];

    if (this.nowContent && this.nowContent.hasClass(key)) {
        this.nowContent = undefined;
        this.body_.addClass('hiddenPopup');
        if (this.nextPopupList.length > 0) {
            this.show(this.nextPopupList.shift());
        }
    }
};

/**
 * Resize this view size when window size modified
 * @param {event} e
 */
Entry.popupHelper.prototype.resize = function (e) {};

Entry.popupHelper.prototype.show = function (key, isNext) {
    var that = this;
    function showContent(key) {
        that.window_.append(that.popupList[key]);
        that.nowContent = that.popupList[key];
        that.body_.removeClass('hiddenPopup');
    }
    if (!isNext) {
        this.window_.children().detach();
        showContent(key);
    } else {
        if (this.window_.children().length > 0) {
            this.nextPopupList.push(key);
        } else {
            this.window_.children().detach();
            showContent(key);
        }
    }
    if (this.nowContent && this.nowContent._obj && this.nowContent._obj.onShow) this.nowContent._obj.onShow();
};

Entry.popupHelper.prototype.hide = function () {
    var popup = this.nowContent && this.nowContent._obj;
    if (popup && 'closeEvent' in popup) {
        popup.closeEvent(this);
    }
    this.nowContent = undefined;
    this.body_.addClass('hiddenPopup');
    this.window_.children().detach();
    if (this.nextPopupList.length > 0) {
        this.show(this.nextPopupList.shift());
    }
};

Entry.popupHelper.prototype.addClass = function (className) {
    className && this.body_.addClass(className);
};

/***/ }),

/***/ "./src/class/popup_list.js":
/*!*********************************!*\
  !*** ./src/class/popup_list.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.PopupList = function (dom) {
    this.view = dom;
};

(function (p) {
    p.getView = function () {
        return this.view;
    };

    p.resize = function () {};
})(Entry.PopupList.prototype);

/***/ }),

/***/ "./src/class/project.js":
/*!******************************!*\
  !*** ./src/class/project.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.getStartProject = function (mediaFilePath) {
    return {
        "category": "기타",
        "scenes": [{
            "name": Lang.Blocks.SCENE + " 1",
            "id": "7dwq"
        }],
        "variables": [{
            "name": Lang.Workspace.Variable_Timer,
            "id": "brih",
            "visible": false,
            "value": "0",
            "variableType": "timer",
            "x": 150,
            "y": -70,
            "array": [],
            "object": null,
            "isCloud": false
        }, {
            "name": Lang.Blocks.VARIABLE_get_canvas_input_value,
            "id": "1vu8",
            "visible": false,
            "value": "0",
            "variableType": "answer",
            "x": 150,
            "y": -100,
            "array": [],
            "object": null,
            "isCloud": false
        }],
        "objects": [{
            "id": "7y0y",
            "name": "엔트리봇",
            "label": {
                "ko": "엔트리봇",
                "en": "Entrybot"
            },
            "script": [[{
                type: "when_run_button_click",
                x: 40,
                y: 50
            }, {
                type: "repeat_basic",
                statements: [[{ type: "move_direction" }]]
            }]],
            "selectedPictureId": "vx80",
            "objectType": "sprite",
            "rotateMethod": "free",
            "scene": "7dwq",
            "sprite": {
                "sounds": [{
                    "duration": 1.3000000000000000,
                    "ext": ".mp3",
                    "id": "8el5",
                    "fileurl": mediaFilePath + "media/bark.mp3",
                    "name": "강아지 짖는소리",
                    "label": {
                        "ko": "강아지 짖는소리",
                        "en": "Doggi's Bark"
                    }
                }],
                "pictures": [{
                    "id": "vx80",
                    "fileurl": mediaFilePath + "media/entrybot1.png",
                    "name": Lang.Blocks.walking_entryBot + "1",
                    "scale": 100,
                    "dimension": {
                        "width": 284,
                        "height": 350
                    }
                }, {
                    "id": "4t48",
                    "fileurl": mediaFilePath + "media/entrybot2.png",
                    "name": Lang.Blocks.walking_entryBot + "2",
                    "scale": 100,
                    "dimension": {
                        "width": 284,
                        "height": 350
                    }
                }]
            },
            "entity": {
                "x": 0,
                "y": 0,
                "regX": 142,
                "regY": 175,
                "scaleX": 0.3154574132492113,
                "scaleY": 0.3154574132492113,
                "rotation": 0,
                "direction": 90,
                "width": 284,
                "height": 350,
                "visible": true
            },
            "lock": false,
            "active": true
        }],
        "speed": 60
    };
};

/***/ }),

/***/ "./src/class/property_panel.js":
/*!*************************************!*\
  !*** ./src/class/property_panel.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview PropertyPanel shows project's property
 */


Entry.PropertyPanel = function () {
    this.modes = {};
    this.selected = null;
};

(function (p) {
    /**
     * Generate View
     */
    p.generateView = function (parentDom, option) {
        this._view = Entry.Dom("div", {
            class: "propertyPanel",
            parent: $(parentDom)
        });

        this._tabView = Entry.Dom("div", {
            class: "propertyTab",
            parent: this._view
        });

        this._contentView = Entry.Dom("div", {
            class: "propertyContent",
            parent: this._view
        });

        this._cover = Entry.Dom('div', {
            classes: ["propertyPanelCover", "entryRemove"],
            parent: this._view
        });

        var splitter = Entry.Dom('div', {
            class: 'entryObjectSelectedImgWorkspace',
            parent: this._view
        });
        this.initializeSplitter(splitter);
    };

    p.addMode = function (mode, contentObj) {
        if (this.modes[mode]) this.removeMode(mode);

        var contentDom = contentObj.getView();
        // will be removed after apply new Dom class
        contentDom = Entry.Dom(contentDom, {
            parent: this._contentView
        });

        var tabDom = Entry.Dom('<div>' + Lang.Menus[mode] + '</div>', {
            classes: ["propertyTabElement", "propertyTab" + mode],
            parent: this._tabView
        });
        var that = this;
        tabDom.bind('click', function () {
            that.select(mode);
        });

        if (mode == "console") contentObj.codeMirror.refresh();

        if (this.modes[mode]) {
            this.modes[mode].tabDom.remove();
            this.modes[mode].contentDom.remove();
            if (mode == 'hw') {
                $(this.modes).removeClass('.propertyTabhw');
                $('.propertyTabhw').unbind('dblclick');
            }
        }

        this.modes[mode] = {
            obj: contentObj,
            tabDom: tabDom,
            contentDom: contentDom
        };

        if (mode == 'hw') {
            $('.propertyTabhw').bind('dblclick', function () {
                Entry.dispatchEvent('hwModeChange');
            });
        }
    };

    p.removeMode = function (mode) {
        if (this.modes[mode]) {
            this.modes[mode].tabDom.remove();
            this.modes[mode].contentDom.remove();
            if (mode == 'hw') {
                $(this.modes).removeClass('.propertyTabhw');
                $('.propertyTabhw').unbind('dblclick');
            }
        }

        var keys = Object.keys(this.modes);
        if (keys && keys.length > 0) {
            this.select(keys[0]);
        }
    };

    p.resize = function (canvasSize) {
        var selected = this.selected;
        if (!selected) return;
        var canvasHeight = canvasSize * 9 / 16;
        this._view.css({
            width: canvasSize + 'px',
            top: canvasHeight + 35 + 40 + 48 - 22 + 'px'
        });
        if (canvasSize >= 430) this._view.removeClass("collapsed");else this._view.addClass("collapsed");

        Entry.dispatchEvent('windowResized');

        var obj = this.modes[selected].obj;
        if (selected == 'hw') {
            if (this.modes.hw.obj.listPorts) obj.resizeList();else obj.resize && obj.resize();
        } else {
            obj.resize && obj.resize();
        }
    };

    p.select = function (modeName) {
        for (var key in this.modes) {
            var mode = this.modes[key];
            mode.tabDom.removeClass("selected");
            mode.contentDom.addClass("entryRemove");
            $(mode.contentDom).detach();
            mode.obj.visible = false;
        }

        var selected = this.modes[modeName];
        $(this._contentView).append(selected.contentDom);
        selected.tabDom.addClass("selected");
        selected.contentDom.removeClass("entryRemove");
        if (selected.obj.resize) selected.obj.resize();
        selected.obj.visible = true;
        this.selected = modeName;
    };

    p.initializeSplitter = function (splitter) {
        var that = this;
        splitter.bind('mousedown touchstart', function (e) {
            var container = Entry.container;
            that._cover.removeClass('entryRemove');
            that._cover._isVisible = true;
            container.splitterEnable = true;
            if (Entry.documentMousemove) {
                container.resizeEvent = Entry.documentMousemove.attach(this, function (e) {
                    if (container.splitterEnable) {
                        Entry.resizeElement({
                            canvasWidth: e.clientX || e.x
                        });
                    }
                });
            }
            $(document).bind('mouseup.container:splitter touchend.container:splitter', func);
        });

        var func = function func(e) {
            var container = Entry.container;
            var listener = container.resizeEvent;
            if (listener) {
                container.splitterEnable = false;
                listener.destroy();
                delete container.resizeEvent;
            }
            if (that._cover._isVisible) {
                that._cover._isVisible = false;
                that._cover.addClass('entryRemove');
            }
            $(document).unbind('.container:splitter');
        };
    };
})(Entry.PropertyPanel.prototype);

/***/ }),

/***/ "./src/class/reporter.js":
/*!*******************************!*\
  !*** ./src/class/reporter.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @fileoverview Show dialog on canvas
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Entry.Reporter = function (isRealTime) {
    this.userId = null;
    this.projectId = null;
    this.isRealTime = isRealTime;
    this.activities = [];
};

Entry.Reporter.prototype.start = function (projectId, userId, startTime) {
    //this.io = io(window.location.href.split("/")[2]);
    if (this.isRealTime) {
        if (window.location.href.indexOf("localhost") > -1) this.io = io('localhost:7000');else this.io = io('play04.play-entry.com:7000');
        this.io.emit('activity', {
            message: 'start',
            userId: userId,
            projectId: projectId,
            time: startTime
        });
    }
    this.userId = userId;
    this.projectId = projectId;
};

Entry.Reporter.prototype.report = function (state) {
    if (this.isRealTime && !this.io) return;
    var params = [];
    for (var i in state.params) {
        var param = state.params[i];
        if ((typeof param === "undefined" ? "undefined" : _typeof(param)) !== "object") params.push(param);else if (param.id) params.push(param.id);
    }
    var activity = {
        message: state.message,
        userId: this.userId,
        projectId: this.projectId,
        time: state.time,
        params: params
    };
    if (this.isRealTime) {
        this.io.emit('activity', activity);
    } else {
        this.activities.push(activity);
    }
};

/***/ }),

/***/ "./src/class/scene.js":
/*!****************************!*\
  !*** ./src/class/scene.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Scene controller for entry.
 */


/**
 * Class for a scene controller.
 * This have view for scenes.
 * @constructor
 */

Entry.Scene = function () {
    var that = this;
    this.scenes_ = [];
    this.selectedScene = null;
    this.maxCount = 20;
    $(window).on('resize', function (e) {
        that.resize();
    });

    that.disposeEvent = Entry.disposeEvent.attach(this, function (e) {
        var elem = document.activeElement;
        if (e && elem && elem !== e.target && $(elem).hasClass('entrySceneFieldWorkspace')) {
            elem.blur();
        }
    });
};

/**
 * Control bar view generator.
 * @param {!Element} sceneView sceneView from Entry.
 * @param {?string} option for choose type of view.
 */
Entry.Scene.prototype.generateView = function (sceneView, option) {
    /** @type {!Element} */
    var that = this;
    this.view_ = sceneView;
    this.view_.addClass('entryScene');
    if (!option || option == 'workspace') {
        this.view_.addClass('entrySceneWorkspace');

        $(this.view_).on('mousedown', function (e) {
            var offset = $(this).offset();
            var $window = $(window);
            var x = e.pageX - offset.left + $window.scrollLeft();
            var y = e.pageY - offset.top + $window.scrollTop();
            y = 40 - y;
            var slope = -40 / 55;
            var selectedScene = that.selectedScene;
            var selectedLeft = $(selectedScene.view).find('.entrySceneRemoveButtonCoverWorkspace').offset().left;
            if (x < selectedLeft || x > selectedLeft + 55) return;

            x -= selectedLeft;
            var ret = 40 + slope * x;

            if (y > ret) {
                var nextScene = that.getNextScene();
                if (nextScene) {
                    var $sceneView = $(nextScene.view);
                    $(document).trigger('mouseup');
                    $sceneView.trigger('mousedown');
                }
            }
        });

        var listView = Entry.createElement('ul');
        listView.addClass('entrySceneListWorkspace');

        if (Entry.sceneEditable) {
            if ($) {
                $(listView).sortable({
                    start: function start(event, ui) {
                        ui.item.data('start_pos', ui.item.index());
                        var clone = $(ui.item[0]).clone(true);
                    },
                    stop: function stop(event, ui) {
                        var start = ui.item.data('start_pos');
                        var end = ui.item.index();
                        Entry.scene.moveScene(start, end);
                    },
                    axis: 'x',
                    tolerance: "pointer"
                });
            }
        }

        this.view_.appendChild(listView);
        this.listView_ = listView;
        if (Entry.sceneEditable) {
            var addButton = Entry.createElement('span');
            addButton.addClass('entrySceneElementWorkspace');
            addButton.addClass('entrySceneAddButtonWorkspace');
            addButton.bindOnClick(function (e) {
                if (Entry.engine.isState('run')) return;
                Entry.do('sceneAdd', Entry.generateHash());
            });
            this.view_.appendChild(addButton);
            this.addButton_ = addButton;
        }
    }
};

/**
 * generate li element for scene
 * @param {!scene model} scene
 */
Entry.Scene.prototype.generateElement = function (scene) {
    var that = this;
    var viewTemplate = Entry.createElement('li', scene.id);
    var fragment = document.createDocumentFragment('div');
    fragment.appendChild(viewTemplate);
    var className = 'entrySceneElementWorkspace  entrySceneButtonWorkspace minValue';
    viewTemplate.addClass(className);
    $(viewTemplate).on('mousedown', function (e) {
        if (Entry.engine.isState('run')) {
            e.preventDefault();
            return;
        }
        Entry.scene.selectScene(scene);
    });
    var nameField = Entry.createElement('input');
    nameField.addClass('entrySceneFieldWorkspace');
    nameField.value = scene.name;

    if (!Entry.sceneEditable) nameField.disabled = 'disabled';

    var sceneLeft = Entry.createElement('span');
    sceneLeft.addClass('entrySceneLeftWorkspace');
    viewTemplate.appendChild(sceneLeft);

    var divide = Entry.createElement('span');
    divide.addClass('entrySceneInputCover');
    viewTemplate.appendChild(divide);
    scene.inputWrapper = divide;

    nameField.onkeyup = function (e) {
        var code = e.keyCode;
        if (Entry.isArrowOrBackspace(code)) return;

        scene.name = this.value;
        if (code == 13) this.blur();
        if (this.value.length > 10) {
            this.value = this.value.substring(0, 10);
            scene.name = this.value;
            this.blur();
        }
        setTimeout(function () {
            that.resize();
        }, 0);
    };
    nameField.onblur = function (e) {
        nameField.value = this.value;
        scene.name = this.value;
        that.resize();
    };
    divide.appendChild(nameField);
    viewTemplate.nameField = nameField;
    var removeButtonCover = Entry.createElement('span');
    removeButtonCover.addClass('entrySceneRemoveButtonCoverWorkspace');
    viewTemplate.appendChild(removeButtonCover);
    if (Entry.sceneEditable) {
        var removeButton = Entry.createElement('button');
        removeButton.addClass('entrySceneRemoveButtonWorkspace');
        removeButton.scene = scene;
        removeButton.bindOnClick(function (e) {
            e.stopPropagation();
            if (Entry.engine.isState('run')) return;
            entrylms.confirm(Lang.Workspace.will_you_delete_scene).then(function (result) {
                if (result === true) Entry.scene.removeScene(this.scene);
            }.bind(this));

            // var a = entrylms.confirm(Lang.Workspace.will_you_delete_scene);
            // if (a)
            //     Entry.scene.removeScene(this.scene);
            // return;
        });
        removeButtonCover.appendChild(removeButton);
    }

    Entry.Utils.disableContextmenu(viewTemplate);
    if (Entry.sceneEditable) {
        Entry.ContextMenu.onContextmenu($(viewTemplate), function (coordinate) {
            var options = [{
                text: Lang.Workspace.duplicate_scene,
                enable: Entry.engine.isState('stop') && !this.isMax(),
                callback: function callback() {
                    Entry.scene.cloneScene(scene);
                }
            }];
            Entry.ContextMenu.show(options, 'workspace-contextmenu', coordinate);
        }.bind(this));
    }

    scene.view = viewTemplate;

    return viewTemplate;
};

Entry.Scene.prototype.updateView = function () {
    if (!Entry.type || Entry.type == 'workspace') {
        var view = this.listView_;
        var renderedCount = $(view).children().length;
        for (var i = renderedCount; i < this.getScenes().length; i++) {
            view.appendChild(this.getScenes()[i].view);
        }if (this.addButton_) {
            var length = this.getScenes().length;
            if (!this.isMax()) this.addButton_.removeClass('entryRemove');else this.addButton_.addClass('entryRemove');
        }
    }
    this.resize();
};

/**
 * add scenes
 * @param {Array<scene model>} scenes
 */
Entry.Scene.prototype.addScenes = function (scenes) {
    this.scenes_ = scenes;
    if (!scenes || scenes.length === 0) {
        this.scenes_ = [];
        this.scenes_.push(this.createScene());
    } else {
        for (var i = 0, len = scenes.length; i < len; i++) {
            this.generateElement(scenes[i]);
        }
    }

    this.selectScene(this.getScenes()[0]);
};
/**
 * add scenes to this.scenes_
 * @param {scene model} scene
 */
Entry.Scene.prototype.addScene = function (scene, index) {
    if (scene === undefined || typeof scene === "string") scene = this.createScene(scene);

    if (!scene.view) this.generateElement(scene);

    if (!index && typeof index != 'number') this.getScenes().push(scene);else this.getScenes().splice(index, 0, scene);

    Entry.stage.objectContainers.push(Entry.stage.createObjectContainer(scene));
    this.selectScene(scene);
    this.updateView();

    if (Entry.creationChangedEvent) Entry.creationChangedEvent.notify();
    return scene;
};

/**
 * remove scene from this.scenes_
 * @param {!scene model} scene
 */
Entry.Scene.prototype.removeScene = function (scene) {
    if (this.getScenes().length <= 1) {
        Entry.toast.alert(Lang.Msgs.runtime_error, Lang.Workspace.Scene_delete_error, false);
        return;
    }

    var index = this.getScenes().indexOf(this.getSceneById(scene.id));

    this.getScenes().splice(index, 1);
    var objects = Entry.container.getSceneObjects(scene);

    for (var i = 0; i < objects.length; i++) {
        Entry.container.removeObject(objects[i], true);
    }
    Entry.stage.removeObjectContainer(scene);
    $(scene.view).remove();
    this.selectScene();
};

/**
 * select scene
 * @param {scene model} scene
 */
Entry.Scene.prototype.selectScene = function (scene) {
    scene = scene || this.getScenes()[0];
    var container = Entry.container;

    container.resetSceneDuringRun();

    if (this.selectedScene && this.selectedScene.id == scene.id) return;

    var prevSelected = this.selectedScene;
    if (prevSelected) {
        var prevSelectedView = prevSelected.view;
        prevSelectedView.removeClass('selectedScene');
        var elem = document.activeElement;
        elem === prevSelectedView.nameField && elem.blur();
    }

    this.selectedScene = scene;
    scene.view.addClass('selectedScene');

    var stage = Entry.stage;
    var playground = Entry.playground;

    container.setCurrentObjects();

    stage.selectObjectContainer(scene);

    var targetObject = container.getCurrentObjects()[0];

    if (targetObject && Entry.type !== 'minimize') {
        container.selectObject(targetObject.id);
        playground.refreshPlayground();
    } else {
        if (Entry.isTextMode) {
            var workspace = Entry.getMainWS();
            var vimBoard = workspace && workspace.vimBoard;
            if (vimBoard) {
                var sObject = vimBoard._currentObject;
                var sScene = vimBoard._currentScene;
                var parser = vimBoard._parser;
                try {
                    if (scene.id != sScene.id) workspace._syncTextCode();
                } catch (e) {}

                if (parser._onError) {
                    container.selectObject(sObject.id, true);
                    return;
                }
            }
            vimBoard && vimBoard.clearText();
        }

        stage.selectObject(null);
        playground.flushPlayground();
        Entry.variableContainer.updateList();
    }
    !container.listView_ && stage.sortZorder();

    container.updateListView();
    this.updateView();
    Entry.requestUpdate = true;
};

/**
 * convert this scenes data to JSON.
 * @return {JSON}
 */
Entry.Scene.prototype.toJSON = function () {
    var json = [];
    var length = this.getScenes().length;
    for (var i = 0; i < length; i++) {
        var scene = this.getScenes()[i];
        var view = scene.view;
        var inputWrapper = scene.inputWrapper;
        delete scene.view;
        delete scene.inputWrapper;
        json.push(JSON.parse(JSON.stringify(scene)));
        scene.view = view;
        scene.inputWrapper = inputWrapper;
    }
    return json;
};

/**
 * Move scene in this.scenes_
 * this method is for sortable
 * @param {!number} start
 * @param {!number} end
 */
Entry.Scene.prototype.moveScene = function (start, end) {
    this.getScenes().splice(end, 0, this.getScenes().splice(start, 1)[0]);
    Entry.container.updateObjectsOrder();
    Entry.stage.sortZorder();
    //style properties are not removed sometimes
    $('.entrySceneElementWorkspace').removeAttr('style');
};

/**
 * get scene by scene id
 * @param {!String} sceneId
 * @return {scene modal}
 */
Entry.Scene.prototype.getSceneById = function (sceneId) {
    var scenes = this.getScenes();
    for (var i = 0; i < scenes.length; i++) {
        if (scenes[i].id == sceneId) return scenes[i];
    }
    return false;
};

/**
 * @return {Array<Entry scene>}
 */
Entry.Scene.prototype.getScenes = function () {
    return this.scenes_;
};

/**
 * remember selectedScene before start
 * in order to reset when stopped
 */
Entry.Scene.prototype.takeStartSceneSnapshot = function () {
    this.sceneBeforeRun = this.selectedScene;
};

/**
 * select selectedScene before start
 * before run start
 */
Entry.Scene.prototype.loadStartSceneSnapshot = function () {
    this.selectScene(this.sceneBeforeRun);
    this.sceneBeforeRun = null;
};
/**
 * create scene
 * @return {scene modal} scene
 */
Entry.Scene.prototype.createScene = function (sceneId) {
    var regex = /[0-9]/;
    var name = Entry.getOrderedName(Lang.Blocks.SCENE + ' ', this.scenes_, "name");
    if (!regex.test(name)) {
        name += '1';
    }
    var scene = {
        name: name,
        id: sceneId || Entry.generateHash()
    };

    this.generateElement(scene);
    return scene;
};

/**
 * clone scene by context menu
 * @param {!scene model} scene
 */
Entry.Scene.prototype.cloneScene = function (scene) {
    if (this.isMax()) {
        Entry.toast.alert(Lang.Msgs.runtime_error, Lang.Workspace.Scene_add_error, false);
        return;
    }

    var clonedScene = {
        name: (Lang.Workspace.cloned_scene + scene.name).substring(0, 10),
        id: Entry.generateHash()
    };

    this.generateElement(clonedScene);
    this.addScene(clonedScene);

    var container = Entry.container;
    var objects = container.getSceneObjects(scene);

    try {
        var oldIds = [];
        var newIds = [];
        this.isSceneCloning = true;
        for (var i = objects.length - 1; i >= 0; i--) {
            var obj = objects[i];
            var ret = container.addCloneObject(obj, clonedScene.id, true);
            oldIds.push(obj.id);
            newIds.push(ret.id);
        }
        container.adjustClonedValues(oldIds, newIds);
        var WS = Entry.getMainWS();
        WS && WS.board && WS.board.reDraw();
        this._focusSceneNameField(clonedScene);
        this.isSceneCloning = false;
        container.setCurrentObjects();
        container.updateObjectsOrder();
        container.updateListView();
        container.selectObject(newIds[newIds.length - 1]);
        Entry.variableContainer.updateViews();
    } catch (e) {
        console.log('error', e);
    }
};

/**
 * resize html element by window size
 * @param {!scene model} scene
 */
Entry.Scene.prototype.resize = function () {
    var scenes = this.getScenes();
    var selectedScene = this.selectedScene;
    var addButton = this.addButton_;
    var firstScene = scenes[0];

    if (scenes.length === 0 || !firstScene) return;

    var startPos = $(firstScene.view).offset().left;
    var marginLeft = parseFloat($(selectedScene.view).css('margin-left'));
    var totalWidth = Math.floor($(this.view_).width() - startPos - 5);
    var LEFT_MARGIN = -40;

    var normWidth = startPos + 15;
    var diff = 0;
    var isSelectedView = false;
    var selectedViewWidth = 0;
    for (var i in scenes) {
        var scene = scenes[i];
        var view = scene.view;
        view.addClass('minValue');
        isSelectedView = view === this.selectedScene.view;
        view = $(view);

        var width = parseFloat(Entry.computeInputWidth(scene.name));
        var adjusted = width * 10 / 9;
        if (scene === this.selectedScene) diff = adjusted - width;
        $(scene.inputWrapper).width(adjusted + 'px');
        var viewWidth = view.width();
        if (isSelectedView) selectedViewWidth = viewWidth;
        normWidth += viewWidth + LEFT_MARGIN;
    }

    if (normWidth > totalWidth) align();

    function align() {
        var dummyWidth = 30.5;
        var len = scenes.length - 1;
        totalWidth = totalWidth - Math.round(selectedViewWidth || $(selectedScene.view).width()) - dummyWidth * len - diff;

        var fieldWidth = Math.floor(totalWidth / len);
        for (i in scenes) {
            scene = scenes[i];
            if (selectedScene.id != scene.id) {
                scene.view.removeClass('minValue');
                $(scene.inputWrapper).width(fieldWidth);
            } else scene.view.addClass('minValue');
        }
    }
};

Entry.Scene.prototype.getNextScene = function () {
    var scenes = this.getScenes();
    return scenes[scenes.indexOf(this.selectedScene) + 1];
};

Entry.Scene.prototype.isMax = function () {
    return this.scenes_.length >= this.maxCount;
};

Entry.Scene.prototype.clear = function () {
    this.scenes_.forEach(function (s) {
        Entry.stage.removeObjectContainer(s);
    });
    $(this.listView_).html("");
    this.scenes_ = [];
    this.selectedScene = null;
};

Entry.Scene.prototype._focusSceneNameField = function (scene) {
    var input = scene.view && scene.view.nameField;
    input && input.focus && input.focus();
};

/***/ }),

/***/ "./src/class/script.js":
/*!*****************************!*\
  !*** ./src/class/script.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview script object execute function user made
 */


/**
 * Construct script class
 * @constructor
 * @param {Entry.EntryObject} entity
 */

Entry.Script = function (entity) {
    this.entity = entity;
};

var p = Entry.Script.prototype;

/**
 * Inject xml to script
 * @param {xml script} xml
 * @param {Entry.Script} previousScript
 * @param {Entry.Script} parentScript
 */
p.init = function (xml, previousScript, parentScript) {
    Entry.assert(xml.tagName.toUpperCase() == 'BLOCK', xml.tagName);
    this.type = xml.getAttribute("type");
    this.id = Number(xml.getAttribute("id"));
    if (xml.getElementsByTagName('mutation').length && xml.getElementsByTagName('mutation')[0].hasAttribute('hashid')) {
        this.hashId = xml.childNodes[0].getAttribute('hashid');
    }
    if (this.type.substr(0, 6).toUpperCase() == "REPEAT") this.isRepeat = true;
    if (previousScript instanceof Entry.Script) {
        this.previousScript = previousScript;
        if (previousScript.parentScript) this.parentScript = previousScript.parentScript;
    }
    if (parentScript instanceof Entry.Script) this.parentScript = parentScript;

    var childrens = xml.childNodes;
    for (var i = 0; i < childrens.length; i++) {
        var children = childrens[i];
        if (children.tagName.toUpperCase() == "NEXT") {
            this.nextScript = new Entry.Script(this.entity);
            if (this.register) this.nextScript.register = this.register;
            this.nextScript.init(childrens[i].childNodes[0], this);
        } else if (children.tagName.toUpperCase() == "VALUE") {
            if (!this.values) this.values = {};
            var value = new Entry.Script(this.entity);
            if (this.register) value.register = this.register;
            value.init(children.childNodes[0]);
            this.values[children.getAttribute("name")] = value;
        } else if (children.tagName.toUpperCase() == "FIELD") {
            if (!this.fields) this.fields = {};
            this.fields[children.getAttribute("name")] = children.textContent;
        } else if (children.tagName.toUpperCase() == "STATEMENT") {
            if (!this.statements) this.statements = {};
            var statement = new Entry.Script(this.entity);
            if (this.register) statement.register = this.register;
            statement.init(children.childNodes[0], null, this);
            statement.key = children.getAttribute("name");
            this.statements[children.getAttribute("name")] = statement;
        }
    }
};

p.clone = function (clonedEntity, type) {
    var clone = new Entry.Script(clonedEntity);
    clone.id = this.id;
    clone.type = this.type;
    clone.isRepeat = this.isRepeat;
    if (this.parentScript && !this.previousScript && type != 2) {
        clone.parentScript = this.parentScript.clone(clonedEntity);
        clone.parentScript.statements[this.key] = clone;
        var script = clone;
        while (script.nextScript) {
            script = script.nextScript;
            script.parentScript = clone.parentScript;
        }
    } else {}
    if (this.nextScript && type != 1) {
        clone.nextScript = this.nextScript.clone(clonedEntity, 0);
        clone.nextScript.previousScript = this;
    }
    if (this.previousScript && type !== 0) {
        clone.previousScript = this.previousScript.clone(clonedEntity, 1);
        clone.previousScript.previousScript = this;
    }
    if (this.fields) {
        clone.fields = {};
        for (var i in this.fields) {
            clone.fields[i] = this.fields[i];
        }
    }
    if (this.values) {
        clone.values = {};
        for (var i in this.values) {
            clone.values[i] = this.values[i].clone(clonedEntity);
        }
    }
    if (this.statements) {
        clone.statements = {};
        for (var i in this.statements) {
            clone.statements[i] = this.statements[i].clone(clonedEntity, 2);
            var script = clone.statements[i];
            script.parentScript = clone;
            while (script.nextScript) {
                script = script.nextScript;
                script.parentScript = clone;
            }
        }
    }
    return clone;
};

p.getStatement = function (statementName) {
    return this.statements[statementName];
};
p.compute = function () {};

p.getValue = function (valueName) {
    return this.values[valueName].run();
};
p.getNumberValue = function (valueName) {
    return Number(this.values[valueName].run());
};
p.getStringValue = function (valueName) {
    return String(this.values[valueName].run());
};

p.getBooleanValue = function (valueName) {
    return this.values[valueName].run() ? true : false;
};

p.getField = function (fieldName) {
    return this.fields[fieldName];
};

p.getStringField = function (fieldName) {
    return String(this.fields[fieldName]);
};

p.getNumberField = function (fieldName) {
    return Number(this.fields[fieldName]);
};

p.callReturn = function () {
    if (this.nextScript) {
        return this.nextScript;
    } else if (this.parentScript) return this.parentScript;else return null;
};

p.run = function () {
    return Entry.block[this.type](this.entity, this);
};

/***/ }),

/***/ "./src/class/stage.js":
/*!****************************!*\
  !*** ./src/class/stage.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Stage is object to handle canvas
 * @fileoverview This manage canvas
 *
*/


/**
 * class for a canvas
 * @constructor
 */

Entry.Stage = function () {
    /** @type {Dictionary} */
    this.variables = {};
    this.background = new createjs.Shape();
    this.background.graphics.beginFill("#ffffff").drawRect(-480, -240, 960, 480);
    this.objectContainers = [];
    this.selectedObjectContainer = null;
    this.variableContainer = new createjs.Container();
    this.dialogContainer = new createjs.Container();
    /** @type {null|Entry.EntryObject} */
    this.selectedObject = null;
    this.isObjectClick = false;
    this._entitySelectable = true;
};

/**
 * initialize stage with canvas
 * @param {!Element} canvas for stage
 */
Entry.Stage.prototype.initStage = function (canvas) {
    this.canvas = new createjs.Stage(canvas.id);
    this.canvas.x = 960 / 1.5 / 2;
    this.canvas.y = 540 / 1.5 / 2;
    this.canvas.scaleX = this.canvas.scaleY = 2 / 1.5;
    createjs.Touch.enable(this.canvas);
    this.canvas.enableMouseOver(10);
    this.canvas.mouseMoveOutside = true;
    this.canvas.addChild(this.background);
    this.canvas.addChild(this.variableContainer);
    this.canvas.addChild(this.dialogContainer);
    this.inputField = null;
    this.initCoordinator();
    this.initHandle();
    this.mouseCoordinate = { x: 0, y: 0 };

    if (Entry.isPhone()) {
        canvas.ontouchstart = function (e) {
            Entry.dispatchEvent('canvasClick', e);
            Entry.stage.isClick = true;
        };
        canvas.ontouchend = function (e) {
            Entry.stage.isClick = false;
            Entry.dispatchEvent('canvasClickCanceled', e);
        };
    } else {
        var downFunc = function downFunc(e) {
            Entry.dispatchEvent('canvasClick', e);
            Entry.stage.isClick = true;
        };

        canvas.onmousedown = downFunc;
        canvas.ontouchstart = downFunc;

        var upFunc = function upFunc(e) {
            Entry.stage.isClick = false;
            Entry.dispatchEvent('canvasClickCanceled', e);
        };

        canvas.onmouseup = upFunc;
        canvas.ontouchend = upFunc;

        $(document).click(function (event) {
            if (event.target.id === 'entryCanvas') Entry.stage.focused = true;else Entry.stage.focused = false;
        });
    }
    //this.canvas.on('pressup', function(e){
    //Entry.dispatchEvent('canvasClickCanceled', e);
    //});
    Entry.addEventListener('canvasClick', function (e) {
        //      if (!Entry.stage.isObjectClick && Entry.type == 'workspace')
        //          Entry.container.selectObject();
        Entry.stage.isObjectClick = false;
    });

    Entry.addEventListener("loadComplete", function () {
        this.sortZorder();
    }.bind(this));

    Entry.windowResized.attach(this, function () {
        Entry.stage.updateBoundRect();
    });

    var razyScroll = _.debounce(function () {
        Entry.windowResized.notify();
    }, 200);

    $(window).scroll(function () {
        window.requestAnimationFrame(function () {
            razyScroll();
        });
    });

    var moveFunc = function (e) {
        e.preventDefault();
        e = Entry.Utils.convertMouseEvent(e);
        var roundRect = Entry.stage.getBoundRect();
        var scrollPos = Entry.Utils.getScrollPos();
        var x = ((e.pageX - roundRect.left - scrollPos.left) / roundRect.width - 0.5) * 480;
        var y = ((e.pageY - roundRect.top - scrollPos.top) / roundRect.height - 0.5) * -270;

        this.mouseCoordinate = {
            x: Entry.Utils.toFixed(x),
            y: Entry.Utils.toFixed(y)
        };
        Entry.dispatchEvent('stageMouseMove');
    }.bind(this);

    canvas.onmousemove = moveFunc;
    canvas.ontouchmove = moveFunc;

    canvas.onmouseout = function (e) {
        Entry.dispatchEvent('stageMouseOut');
    };

    Entry.addEventListener('updateObject', updateObjectFunc);

    Entry.addEventListener('run', function (e) {
        Entry.removeEventListener('updateObject', updateObjectFunc);
    });

    Entry.addEventListener('stop', function (e) {
        Entry.addEventListener('updateObject', updateObjectFunc);
    });

    var updateObjectFunc = function updateObjectFunc(e) {
        if (Entry.engine.isState('stop')) Entry.stage.updateObject();
    };

    Entry.addEventListener('canvasInputComplete', function (e) {
        try {
            var inputValue = Entry.stage.inputField.value();
            Entry.stage.hideInputField();
            if (inputValue) {
                (function (c) {
                    c.setInputValue(inputValue);
                    c.inputValue.complete = true;
                })(Entry.container);
            }
        } catch (exception) {}
    });

    this.initWall();

    this.render();
};

Entry.Stage.prototype.render = function () {
    if (Entry.stage.timer) clearTimeout(Entry.stage.timer);
    var time = new Date().getTime();
    Entry.stage.update();
    time = new Date().getTime() - time;
    Entry.stage.timer = setTimeout(Entry.stage.render, 16 - time % 16 + 16 * Math.floor(time / 16));
};

/**
 * redraw canvas
 */
Entry.Stage.prototype.update = function () {
    if (Entry.type === "invisible") return;
    if (!Entry.requestUpdate) {
        Entry.requestUpdate = false;
        return;
    }
    if (Entry.engine.isState('stop') && this.objectUpdated) {
        this.canvas.update();
        this.objectUpdated = false;
    } else {
        this.canvas.update();
    }
    var inputField = this.inputField;
    if (inputField && !inputField._isHidden) inputField.render();
    if (Entry.requestUpdateTwice) Entry.requestUpdateTwice = false;else Entry.requestUpdate = false;
};

/**
 * add object entity on canvas
 * @param {Entry.EntryObject} object
 */
Entry.Stage.prototype.loadObject = function (object) {
    var entity = object.entity.object;
    var scenes = Entry.scene.scenes_;
    var objContainer = this.getObjectContainerByScene(object.scene);
    objContainer.addChild(entity);
    Entry.requestUpdate = true;
};

/**
 * add entity directly on canvas
 * This is use for cloned entity
 * @param {Entry.EntityObject} entity
 */
Entry.Stage.prototype.loadEntity = function (entity, index) {
    var scene = entity.parent.scene;
    var objContainer = Entry.stage.getObjectContainerByScene(scene);
    if (index > -1) objContainer.addChildAt(entity.object, index);else objContainer.addChild(entity.object);
    Entry.requestUpdate = true;
};

/**
 * Remove entity directly on canvas
 * @param {Entry.EntityObject} entity
 */
Entry.Stage.prototype.unloadEntity = function (entity) {
    var scene = entity.parent.scene;
    Entry.stage.getObjectContainerByScene(scene).removeChild(entity.object);
    Entry.requestUpdate = true;
};

/**
 * add variable view on canvas
 * @param {Entry.Variable} object
 */
Entry.Stage.prototype.loadVariable = function (variable) {
    var variableView = variable.view_;
    this.variables[variable.id] = variableView;
    this.variableContainer.addChild(variableView);
    Entry.requestUpdate = true;
};

/**
 * remove variable view on canvas
 * @param {Entry.Variable} object
 */
Entry.Stage.prototype.removeVariable = function (variable) {
    var variableView = variable.view_;
    this.variableContainer.removeChild(variableView);
    Entry.requestUpdate = true;
};

/**
 * add dialog on canvas
 * @param {Entry.Dialog} dialog
 */
Entry.Stage.prototype.loadDialog = function (dialog) {
    this.dialogContainer.addChild(dialog.object);
};

/**
 * Remove entity directly on canvas
 * @param {Entry.Dialog} dialog
 */
Entry.Stage.prototype.unloadDialog = function (dialog) {
    this.dialogContainer.removeChild(dialog.object);
};

Entry.Stage.prototype.setEntityIndex = function (entity, index) {
    var selectedObjectContainer = Entry.stage.selectedObjectContainer;
    var currentIndex = selectedObjectContainer.getChildIndex(entity.object);

    if (currentIndex === index) {
        return;
    } else if (currentIndex > index) {
        selectedObjectContainer.setChildIndex(entity.object, index);
    } else {
        selectedObjectContainer.setChildIndex(entity.object, index);
    }
    Entry.requestUpdate = true;
};

/**
 * sort Z index of objects
 */
Entry.Stage.prototype.sortZorder = function () {
    var objects = Entry.container.getCurrentObjects().slice(),
        length = objects.length,
        container = this.selectedObjectContainer,
        index = 0;

    for (var i = length - 1; i >= 0; i--) {
        var object = objects[i];

        var entity = object.entity;
        container.setChildIndex(entity.object, index++);
    }

    Entry.requestUpdate = true;
};

/**
 * sort Z index of objects while running
 */
Entry.Stage.prototype.sortZorderRun = function () {
    Entry.requestUpdate = true;
};

/**
 * Initialize coordinate on canvas. It is toggle by Engine.
 */
Entry.Stage.prototype.initCoordinator = function () {
    var coordinator = new createjs.Container();
    var img = new createjs.Bitmap(Entry.mediaFilePath + "workspace_coordinate.png");
    img.scaleX = 0.5;
    img.scaleY = 0.5;
    img.x = -240;
    img.y = -135;
    coordinator.mouseEnabled = false;
    coordinator.tickEnabled = false;
    coordinator.tickChildren = false;
    coordinator.visible = false;
    coordinator.addChild(img);

    this.canvas.addChild(coordinator);

    /** @type {createjs.Container} */
    this.coordinator = coordinator;
};

/**
 * Toggle coordinator
 */
Entry.Stage.prototype.toggleCoordinator = function () {
    this.coordinator.visible = !this.coordinator.visible;
    Entry.requestUpdate = true;
};

/**
 * Select handle object
 * @param {?Entry.EntryObject} object
 */
Entry.Stage.prototype.selectObject = function (object) {
    //todo
    if (!object) this.selectedObject = null;else this.selectedObject = object;
    this.updateObject();
};

/**
 * Initialize handle. Handle is use for transform object on canvas.
 */
Entry.Stage.prototype.initHandle = function () {
    this.handle = new EaselHandle(this.canvas);
    this.handle.setChangeListener(this, this.updateHandle);
    this.handle.setEditStartListener(this, this.startEdit);
    this.handle.setEditEndListener(this, this.endEdit);
};

/**
 * Update handle object to modified object
 * object -> handle
 */
Entry.Stage.prototype.updateObject = function () {
    if (Entry.type === "invisible") return;
    Entry.requestUpdate = true;
    this.handle.setDraggable(true);
    if (this.editEntity) return;
    var object = this.selectedObject;
    if (object) {
        if (object.objectType == "textBox") {
            this.handle.toggleCenter(false);
        } else {
            this.handle.toggleCenter(true);
        }
        var rotateMethod = object.getRotateMethod();
        if (rotateMethod == "free") {
            this.handle.toggleRotation(true);
            this.handle.toggleDirection(true);
        } else if (rotateMethod == "vertical") {
            this.handle.toggleRotation(false);
            this.handle.toggleDirection(true);
        } else {
            this.handle.toggleRotation(false);
            this.handle.toggleDirection(true);
        }
        if (object.getLock()) {
            this.handle.toggleRotation(false);
            this.handle.toggleDirection(false);
            this.handle.toggleResize(false);
            this.handle.toggleCenter(false);
            this.handle.setDraggable(false);
        } else {
            this.handle.toggleResize(true);
        }
        this.handle.setVisible(true);
        var entity = object.entity;
        this.handle.setWidth(entity.getScaleX() * entity.getWidth());
        this.handle.setHeight(entity.getScaleY() * entity.getHeight());
        var regX, regY;
        if (entity.type == "textBox") {
            // maybe 0.
            if (entity.getLineBreak()) {
                regX = entity.regX * entity.scaleX;
                regY = -entity.regY * entity.scaleY;
            } else {
                var fontAlign = entity.getTextAlign();
                regY = -entity.regY * entity.scaleY;
                switch (fontAlign) {
                    case Entry.TEXT_ALIGN_LEFT:
                        regX = -entity.getWidth() / 2 * entity.scaleX;
                        break;
                    case Entry.TEXT_ALIGN_CENTER:
                        regX = entity.regX * entity.scaleX;
                        break;
                    case Entry.TEXT_ALIGN_RIGHT:
                        regX = entity.getWidth() / 2 * entity.scaleX;
                        break;
                }
            }
        } else {
            regX = (entity.regX - entity.width / 2) * entity.scaleX;
            regY = (entity.height / 2 - entity.regY) * entity.scaleY;
        }

        var rotation = entity.getRotation() / 180 * Math.PI;

        this.handle.setX(entity.getX() - regX * Math.cos(rotation) - regY * Math.sin(rotation));
        this.handle.setY(-entity.getY() - regX * Math.sin(rotation) + regY * Math.cos(rotation));
        this.handle.setRegX((entity.regX - entity.width / 2) * entity.scaleX);
        this.handle.setRegY((entity.regY - entity.height / 2) * entity.scaleY);
        this.handle.setRotation(entity.getRotation());
        this.handle.setDirection(entity.getDirection());
        this.objectUpdated = true;

        this.handle.setVisible(object.entity.getVisible());
        if (object.entity.getVisible()) {
            this.handle.render();
        }
    } else {
        this.handle.setVisible(false);
    }
    //this.toggleHandleEditable(!object.getLock());
};

// handle -> object
Entry.Stage.prototype.updateHandle = function () {
    this.editEntity = true;
    var handle = this.handle;
    var entity = this.selectedObject.entity;
    if (entity.lineBreak) {
        entity.setHeight(handle.height / entity.getScaleY());
        entity.setWidth(handle.width / entity.getScaleX());
    } else {
        if (entity.width !== 0) {
            var scaleX = Math.abs(handle.width / entity.width);
            if (entity.flip) scaleX *= -1;

            entity.setScaleX(scaleX);
        }

        if (entity.height !== 0) entity.setScaleY(handle.height / entity.height);
    }
    var direction = handle.rotation / 180 * Math.PI;
    if (entity.type == "textBox") {
        entity.syncFont();
        var newRegX = handle.regX / entity.scaleX;
        var newRegY = handle.regY / entity.scaleY;

        if (entity.getLineBreak()) {
            entity.setX(handle.x);
            entity.setY(-handle.y);
        } else {
            switch (entity.getTextAlign()) {
                case Entry.TEXT_ALIGN_LEFT:
                    entity.setX(handle.x - handle.width / 2 * Math.cos(direction));
                    entity.setY(-handle.y + handle.width / 2 * Math.sin(direction));
                    break;
                case Entry.TEXT_ALIGN_CENTER:
                    entity.setX(handle.x);
                    entity.setY(-handle.y);
                    break;
                case Entry.TEXT_ALIGN_RIGHT:
                    entity.setX(handle.x + handle.width / 2 * Math.cos(direction));
                    entity.setY(-handle.y - handle.width / 2 * Math.sin(direction));
                    break;
            }
        }
    } else {
        var newRegX = entity.width / 2 + handle.regX / entity.scaleX;
        entity.setX(handle.x + handle.regX * Math.cos(direction) - handle.regY * Math.sin(direction));
        entity.setRegX(newRegX);
        var newRegY = entity.height / 2 + handle.regY / entity.scaleY;
        entity.setY(-handle.y - handle.regX * Math.sin(direction) - handle.regY * Math.cos(direction));
        entity.setRegY(newRegY);
    }
    entity.setDirection(handle.direction);
    entity.setRotation(handle.rotation);
    this.selectedObject.entity.doCommand();
    this.editEntity = false;
};

Entry.Stage.prototype.startEdit = function () {
    var obj = this.selectedObject;
    obj && obj.entity.initCommand();
};

Entry.Stage.prototype.endEdit = function () {
    this.selectedObject.entity.checkCommand();
};

Entry.Stage.prototype.initWall = function () {
    var wall = new createjs.Container();
    wall.mouseEnabled = false;
    var bound = new Image();
    bound.src = Entry.mediaFilePath + "media/bound.png";
    wall.up = new createjs.Bitmap();
    wall.up.scaleX = 480 / 30;
    wall.up.y = -135 - 30;
    wall.up.x = -240;
    wall.up.image = bound;
    wall.addChild(wall.up);
    wall.down = new createjs.Bitmap();
    wall.down.scaleX = 480 / 30;
    wall.down.y = 135;
    wall.down.x = -240;
    wall.down.image = bound;
    wall.addChild(wall.down);
    wall.right = new createjs.Bitmap();
    wall.right.scaleY = 270 / 30;
    wall.right.y = -135;
    wall.right.x = 240;
    wall.right.image = bound;
    wall.addChild(wall.right);
    wall.left = new createjs.Bitmap();
    wall.left.scaleY = 270 / 30;
    wall.left.y = -135;
    wall.left.x = -240 - 30;
    wall.left.image = bound;
    wall.addChild(wall.left);
    this.canvas.addChild(wall);
    this.wall = wall;
};

/**
 * show inputfield from the canvas
 */
Entry.Stage.prototype.showInputField = function () {
    if (!this.inputField) {
        var scale = 1 / 1.5;
        this.inputField = new CanvasInput({
            canvas: document.getElementById('entryCanvas'),
            fontSize: 30 * scale,
            fontFamily: 'NanumGothic',
            fontColor: '#212121',
            width: Math.round(556 * scale),
            height: 26 * scale,
            padding: 8 * scale,
            borderWidth: 1 * scale,
            borderColor: '#000',
            borderRadius: 3,
            boxShadow: 'none',
            innerShadow: '0px 0px 5px rgba(0, 0, 0, 0.5)',
            x: 202 * scale,
            y: 450 * scale,
            topPosition: true,
            onsubmit: function onsubmit() {
                Entry.dispatchEvent('canvasInputComplete');
            }
        });
    }

    var inputSubmitButton = new createjs.Container();
    var buttonImg = new Image();
    var button = new createjs.Bitmap();
    buttonImg.onload = function () {
        button.image = this;
        Entry.requestUpdate = true;
    };
    buttonImg.src = Entry.mediaFilePath + "confirm_button.png";
    button.scaleX = 0.23;
    button.scaleY = 0.23;
    button.x = 160;
    button.y = 89;
    button.cursor = 'pointer';
    button.image = buttonImg;
    inputSubmitButton.addChild(button);

    inputSubmitButton.on("mousedown", function (evt) {
        Entry.dispatchEvent('canvasInputComplete');
    });

    if (!this.inputSubmitButton) {
        this.inputField.value('');
        this.canvas.addChild(inputSubmitButton);
        this.inputSubmitButton = inputSubmitButton;
    }

    this.inputField.show();
    Entry.requestUpdateTwice = true;
};

/**
 * remove inputfield from the canvas
 */
Entry.Stage.prototype.hideInputField = function () {
    if (this.inputField && this.inputField.value()) this.inputField.value('');

    if (this.inputSubmitButton) {
        this.canvas.removeChild(this.inputSubmitButton);
        this.inputSubmitButton = null;
    }

    if (this.inputField) this.inputField.hide();
    Entry.requestUpdate = true;
};

/**
 * init object containers
 */
Entry.Stage.prototype.initObjectContainers = function () {
    var scenes = Entry.scene.scenes_;
    if (scenes && scenes.length !== 0) {
        for (var i = 0; i < scenes.length; i++) {
            this.objectContainers[i] = this.createObjectContainer(scenes[i]);
        }
        this.selectedObjectContainer = this.objectContainers[0];
    } else {
        var obj = this.createObjectContainer(Entry.scene.selectedScene);
        this.objectContainers.push(obj);
        this.selectedObjectContainer = obj;
    }
    if (Entry.type !== "invisible") this.canvas.addChild(this.selectedObjectContainer);
    this.selectObjectContainer(Entry.scene.selectedScene);
};

/**
 * select object container by scene
 * @param {Entry.Scene} scene
 */
Entry.Stage.prototype.selectObjectContainer = function (scene) {
    var containers = this.objectContainers;
    var canvas = this.canvas;
    if (!canvas || !containers || !containers.length) return;

    containers.forEach(function (c) {
        canvas.removeChild(c);
    });

    this.selectedObjectContainer = this.getObjectContainerByScene(scene);

    canvas.addChildAt(this.selectedObjectContainer, 2);
};

/**
 * init object containers
 */
Entry.Stage.prototype.createObjectContainer = function (scene) {
    var obj = new createjs.Container();
    obj.scene = scene;
    return obj;
};

/**
 * remove object container
 * @param {scene model} scene
 */
Entry.Stage.prototype.removeObjectContainer = function (scene) {
    var containers = this.objectContainers;
    var objContainer = this.getObjectContainerByScene(scene);
    this.canvas && this.canvas.removeChild(objContainer);
    containers.splice(this.objectContainers.indexOf(objContainer), 1);
};

/**
 * get object container
 * @param {scene model} scene
 */
Entry.Stage.prototype.getObjectContainerByScene = function (scene) {
    var containers = this.objectContainers;

    for (var i = 0; i < containers.length; i++) {
        if (containers[i].scene.id == scene.id) return containers[i];
    }
};

Entry.Stage.prototype.moveSprite = function (e) {
    if (!this.selectedObject || !Entry.stage.focused || this.selectedObject.getLock()) return;

    var distance = 5;
    if (e.shiftKey) distance = 1;

    var entity = this.selectedObject.entity;
    switch (e.keyCode) {
        case 38:
            //up
            entity.setY(entity.getY() + distance);
            break;
        case 40:
            //down
            entity.setY(entity.getY() - distance);
            break;
        case 37:
            //left
            entity.setX(entity.getX() - distance);
            break;
        case 39:
            //right
            entity.setX(entity.getX() + distance);
            break;
    }
    this.updateObject();
};

Entry.Stage.prototype.getBoundRect = function (e) {
    if (!this._boundRect) return this.updateBoundRect();
    return this._boundRect;
};

Entry.Stage.prototype.updateBoundRect = function (e) {
    return this._boundRect = this.canvas.canvas.getBoundingClientRect();
};

Entry.Stage.prototype.getDom = function (query) {
    var key = query.shift();
    if (key === "canvas") return this.canvas.canvas;
};

Entry.Stage.prototype.setEntitySelectable = function (value) {
    this._entitySelectable = value;
};

Entry.Stage.prototype.isEntitySelectable = function () {
    return Entry.engine.isState('stop') && this._entitySelectable;
};

/***/ }),

/***/ "./src/class/stamp_entity.js":
/*!***********************************!*\
  !*** ./src/class/stamp_entity.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview stamp entity object is class for entry stamp entity canvas view.
 */


/**
 * Construct stamp entity class
 * @param {!Entry.EntryObject} object
 * @param {!Entry.EntityObject} entity
 * @constructor
 */

Entry.StampEntity = function (object, entity) {
    /** @type {!string} */
    this.parent = object;
    this.type = object.objectType;
    this.isClone = true;
    this.isStamp = true;
    this.width = entity.getWidth();
    this.height = entity.getHeight();
    if (this.type == 'sprite') {
        this.object = entity.object.clone();
        this.object.mouseEnabled = false;
        this.object.tickEnabled = false;
        this.object.filters = null;
        if (entity.effect) {
            this.effect = Entry.cloneSimpleObject(entity.effect);
            this.applyFilter();
        }
    } else if (this.type == 'textBox') {}

    this.object.entity = entity;
};

(function (p, origin) {
    ['applyFilter', 'getWidth', 'getHeight', 'getInitialEffectValue', 'destroy', 'cache'].forEach(function (key) {
        p[key] = origin[key];
    });
})(Entry.StampEntity.prototype, Entry.EntityObject.prototype);

/***/ }),

/***/ "./src/class/toast.js":
/*!****************************!*\
  !*** ./src/class/toast.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Toast object for notification
 */


/**
 * Constructor of toast
 * @constructor
 */

Entry.Toast = function () {
    this.toasts_ = [];
    /** @type {Element} */
    var exist = document.getElementById('entryToastContainer');
    if (exist) document.body.removeChild(exist);
    this.body_ = Entry.createElement('div', 'entryToastContainer');
    this.body_.addClass('entryToastContainer');
    document.body.appendChild(this.body_);
};

Entry.Toast.prototype.warning = function (title, message, isNotAutoDispose) {
    var toast = Entry.createElement('div', 'entryToast');
    toast.addClass('entryToast');
    toast.addClass('entryToastWarning');
    toast.bindOnClick(function () {
        Entry.toast.body_.removeChild(this);
    });
    var toastTitle = Entry.createElement('div', 'entryToast');
    toastTitle.addClass('entryToastTitle');
    toastTitle.innerHTML = title;
    toast.appendChild(toastTitle);
    var toastMessage = Entry.createElement('p', 'entryToast');
    toastMessage.addClass('entryToastMessage');
    toastMessage.innerHTML = message;
    toast.appendChild(toastMessage);
    this.toasts_.push(toast);
    this.body_.appendChild(toast);
    var f = function f() {
        toast.style.opacity = 1;
        var timer = setInterval(function () {
            if (toast.style.opacity < 0.05) {
                clearInterval(timer);
                toast.style.display = 'none';
                Entry.removeElement(toast);
            }
            toast.style.opacity *= 0.90;
        }, 20);
    };
    if (!isNotAutoDispose) window.setTimeout(f, 1000);
};

Entry.Toast.prototype.success = function (title, message, isNotAutoDispose) {
    var toast = Entry.createElement('div', 'entryToast');
    toast.addClass('entryToast');
    toast.addClass('entryToastSuccess');
    toast.bindOnClick(function () {
        Entry.toast.body_.removeChild(this);
    });
    var toastTitle = Entry.createElement('div', 'entryToast');
    toastTitle.addClass('entryToastTitle');
    toastTitle.innerHTML = title;
    toast.appendChild(toastTitle);
    var toastMessage = Entry.createElement('p', 'entryToast');
    toastMessage.addClass('entryToastMessage');
    toastMessage.innerHTML = message;
    toast.appendChild(toastMessage);
    this.toasts_.push(toast);
    this.body_.appendChild(toast);
    var f = function f() {
        toast.style.opacity = 1;
        var timer = setInterval(function () {
            if (toast.style.opacity < 0.05) {
                clearInterval(timer);
                toast.style.display = 'none';
                Entry.removeElement(toast);
            }
            toast.style.opacity *= 0.90;
        }, 20);
    };
    if (!isNotAutoDispose) window.setTimeout(f, 1000);
};

Entry.Toast.prototype.alert = function (title, message, isNotAutoDispose) {
    var toast = Entry.createElement('div', 'entryToast');
    var timer;
    toast.addClass('entryToast');
    toast.addClass('entryToastAlert');
    toast.bindOnClick(function () {
        Entry.toast.body_.removeChild(this);
        if (timer) clearInterval(timer);
    });
    var toastTitle = Entry.createElement('div', 'entryToast');
    toastTitle.addClass('entryToastTitle');
    toastTitle.innerHTML = title;
    toast.appendChild(toastTitle);
    var toastMessage = Entry.createElement('p', 'entryToast');
    toastMessage.addClass('entryToastMessage');
    toastMessage.innerHTML = message;
    toast.appendChild(toastMessage);
    this.toasts_.push(toast);
    this.body_.appendChild(toast);
    var f = function f() {
        toast.style.opacity = 1;
        timer = setInterval(function () {
            if (toast.style.opacity < 0.05) {
                clearInterval(timer);
                toast.style.display = 'none';
                //check element already removed from parent
                if (toast.parentElement) Entry.toast.body_.removeChild(toast);
            }
            toast.style.opacity *= 0.90;
        }, 20);
    };
    if (!isNotAutoDispose) window.setTimeout(f, 5000);
};

/***/ }),

/***/ "./src/class/variable.js":
/*!*******************************!*\
  !*** ./src/class/variable.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Variable object for entry variable block.
 */


/**
 * Block variable constructor
 * @param {variable model} variable
 * @constructor
 */

Entry.Variable = function (variable) {
    Entry.assert(typeof variable.name == 'string', 'Variable name must be given');
    /** @type {string} */
    this.name_ = variable.name;
    /** @type {string} */
    this.id_ = variable.id ? variable.id : Entry.generateHash();
    this.type = variable.variableType ? variable.variableType : 'variable';
    /** @type {entry object.id} */
    this.object_ = variable.object || null;
    /** @type {boolean} */
    this.isCloud_ = variable.isCloud || false;

    this._nameWidth = null;
    this._valueWidth = null;

    /** @type {number||string} */
    var parsedValue = Entry.parseNumber(variable.value);
    if (typeof parsedValue == 'number') this.value_ = parsedValue;else if (!variable.value) this.value_ = 0;else this.value_ = variable.value;

    if (this.type == 'slide') {
        this.setMinValue(variable.minValue);
        this.setMaxValue(variable.maxValue);
    } else if (this.type == 'list') this.array_ = variable.array ? variable.array : [];

    if (!variable.isClone) {
        /** @type {boolean} */
        this.visible_ = variable.visible || typeof variable.visible == 'boolean' ? variable.visible : true;
        /** @type {number} */
        this.x_ = variable.x ? variable.x : null;
        /** @type {number} */
        this.y_ = variable.y ? variable.y : null;
        if (this.type == 'list') {
            this.width_ = variable.width ? variable.width : 100;
            this.height_ = variable.height ? variable.height : 120;
            this.scrollPosition = 0;
        }

        this.BORDER = 6;
        this.FONT = "10pt NanumGothic";
    }

    Entry.addEventListener('workspaceChangeMode', this.updateView.bind(this));
};

/**
 * Generate variable view on canvas
 * @param {number} variableIndex index of this variable for render position
 */
Entry.Variable.prototype.generateView = function (variableIndex) {
    var type = this.type;
    if (type == 'variable' || type == 'timer' || type == 'answer') {
        this.view_ = new createjs.Container();
        this.rect_ = new createjs.Shape();
        this.view_.addChild(this.rect_);
        this.view_.variable = this;
        this.wrapper_ = new createjs.Shape();
        this.view_.addChild(this.wrapper_);
        this.textView_ = new createjs.Text('asdf', this.FONT, "#000000");
        this.textView_.textBaseline = "alphabetic";
        this.textView_.x = 4;
        this.textView_.y = 1;
        this.view_.addChild(this.textView_);
        this.valueView_ = new createjs.Text('asdf', "10pt NanumGothic", "#ffffff");
        this.valueView_.textBaseline = "alphabetic";
        var variableLength = Entry.variableContainer.variables_.length;
        if (this.getX() && this.getY()) {
            this.setX(this.getX());
            this.setY(this.getY());
        } else {
            this.setX(10 - 240 + Math.floor(variableLength / 11) * 80);
            this.setY(variableIndex * 24 + 20 - 135 - Math.floor(variableLength / 11) * 264);
        }
        this.view_.visible = this.visible_;
        this.view_.addChild(this.valueView_);

        this.view_.on("mousedown", function (evt) {
            if (Entry.type != 'workspace') return;
            this.offset = { x: this.x - (evt.stageX * 0.75 - 240),
                y: this.y - (evt.stageY * 0.75 - 135) };
            this.cursor = 'move';
        });

        this.view_.on("pressmove", function (evt) {
            if (Entry.type != 'workspace') return;
            this.variable.setX(evt.stageX * 0.75 - 240 + this.offset.x);
            this.variable.setY(evt.stageY * 0.75 - 135 + this.offset.y);
            this.variable.updateView();
        });
    } else if (type == 'slide') {
        var slide = this;
        this.view_ = new createjs.Container();
        this.rect_ = new createjs.Shape();
        this.view_.addChild(this.rect_);
        this.view_.variable = this;
        this.wrapper_ = new createjs.Shape();
        this.view_.addChild(this.wrapper_);
        this.textView_ = new createjs.Text('name', this.FONT, "#000000");
        this.textView_.textBaseline = "alphabetic";
        this.textView_.x = 4;
        this.textView_.y = 1;
        this.view_.addChild(this.textView_);
        this.valueView_ = new createjs.Text('value', "10pt NanumGothic", "#ffffff");
        this.valueView_.textBaseline = "alphabetic";
        this.view_.on("mousedown", function (evt) {
            if (Entry.type != 'workspace') return;
            this.offset = { x: this.x - (evt.stageX * 0.75 - 240),
                y: this.y - (evt.stageY * 0.75 - 135) };
        });

        this.view_.on("pressmove", function (evt) {
            if (Entry.type != 'workspace' || slide.isAdjusting) return;
            this.variable.setX(evt.stageX * 0.75 - 240 + this.offset.x);
            this.variable.setY(evt.stageY * 0.75 - 135 + this.offset.y);
            this.variable.updateView();
        });
        this.view_.visible = this.visible_;
        this.view_.addChild(this.valueView_);

        var width = this.textView_.getMeasuredWidth() + this.valueView_.getMeasuredWidth() + 26;
        width = Math.max(width, 90);
        this.maxWidth = width - 20;

        this.slideBar_ = new createjs.Shape();
        this.slideBar_.graphics.beginFill('#A0A1A1').s('#A0A1A1').ss(1).dr(10, 10, this.maxWidth, 1.5);
        this.view_.addChild(this.slideBar_);

        var position = this.getSlidePosition(this.maxWidth);
        this.valueSetter_ = new createjs.Shape();
        this.valueSetter_.graphics.beginFill('#1bafea').s('#A0A1A1').ss(1).dc(position, 10 + 0.5, 3);
        this.valueSetter_.cursor = 'pointer';
        this.valueSetter_.on("mousedown", function (evt) {
            if (!Entry.engine.isState('run')) return;

            slide.isAdjusting = true;
            this.offsetX = -(this.x - evt.stageX * 0.75 + 240);
        });

        this.valueSetter_.on("pressmove", function (evt) {
            if (!Entry.engine.isState('run')) return;

            var oldOffsetX = this.offsetX;
            this.offsetX = -(this.x - evt.stageX * 0.75 + 240);
            if (oldOffsetX === this.offsetX) return;
            var slideX = slide.getX();
            var value;
            if (slideX + 10 > this.offsetX) value = 0;else if (slideX + slide.maxWidth + 10 > this.offsetX) value = this.offsetX - slideX;else value = slide.maxWidth + 10;
            slide.setSlideCommandX(value);
        });
        this.valueSetter_.on("pressup", function (evt) {
            slide.isAdjusting = false;
        });
        this.view_.addChild(this.valueSetter_);
        var variableLength = Entry.variableContainer.variables_.length;
        if (this.getX() && this.getY()) {
            this.setX(this.getX());
            this.setY(this.getY());
        } else {
            this.setX(10 - 240 + Math.floor(variableLength / 11) * 80);
            this.setY(variableIndex * 24 + 20 - 135 - Math.floor(variableLength / 11) * 264);
        }
    } else {
        this.view_ = new createjs.Container();
        this.rect_ = new createjs.Shape();
        this.view_.addChild(this.rect_);
        this.view_.variable = this;
        this.titleView_ = new createjs.Text('asdf', this.FONT, "#000");
        this.titleView_.textBaseline = "alphabetic";
        this.titleView_.textAlign = "center";
        this.titleView_.width = this.width_ - 2 * this.BORDER;
        this.titleView_.y = this.BORDER + 10;
        this.titleView_.x = this.width_ / 2;
        this.view_.addChild(this.titleView_);

        this.resizeHandle_ = new createjs.Shape();
        this.resizeHandle_.graphics.f("#1bafea").ss(1, 0, 0).s("#1bafea").lt(0, -9).lt(-9, 0).lt(0, 0);
        this.view_.addChild(this.resizeHandle_);

        this.resizeHandle_.list = this;

        this.resizeHandle_.on("mouseover", function (evt) {
            this.cursor = 'nwse-resize';
        });

        this.resizeHandle_.on("mousedown", function (evt) {
            // if(Entry.type != 'workspace') return;
            this.list.isResizing = true;
            this.offset = { x: evt.stageX * 0.75 - this.list.getWidth(),
                y: evt.stageY * 0.75 - this.list.getHeight() };
            this.parent.cursor = 'nwse-resize';
        });
        this.resizeHandle_.on("pressmove", function (evt) {
            // if(Entry.type != 'workspace') return;
            this.list.setWidth(evt.stageX * 0.75 - this.offset.x);
            this.list.setHeight(evt.stageY * 0.75 - this.offset.y);
            this.list.updateView();
        });

        this.view_.on("mouseover", function (evt) {
            this.cursor = 'move';
        });

        this.view_.on("mousedown", function (evt) {
            if (Entry.type != 'workspace' || this.variable.isResizing) return;
            this.offset = { x: this.x - (evt.stageX * 0.75 - 240),
                y: this.y - (evt.stageY * 0.75 - 135) };
            this.cursor = 'move';
        });

        this.view_.on("pressup", function (evt) {
            this.cursor = 'initial';
            this.variable.isResizing = false;
        });

        this.view_.on("pressmove", function (evt) {
            if (Entry.type != 'workspace' || this.variable.isResizing) return;
            this.variable.setX(evt.stageX * 0.75 - 240 + this.offset.x);
            this.variable.setY(evt.stageY * 0.75 - 135 + this.offset.y);
            this.variable.updateView();
        });

        this.elementView = new createjs.Container();
        var indexView = new createjs.Text('asdf', this.FONT, "#000");
        indexView.textBaseline = 'middle';
        indexView.y = 5;
        this.elementView.addChild(indexView);
        this.elementView.indexView = indexView;
        var valueWrapper = new createjs.Shape();
        this.elementView.addChild(valueWrapper);
        this.elementView.valueWrapper = valueWrapper;
        var valueView = new createjs.Text('fdsa', this.FONT, "#eee");
        valueView.x = 24;
        valueView.y = 6;
        valueView.textBaseline = 'middle';
        this.elementView.addChild(valueView);
        this.elementView.valueView = valueView;
        this.elementView.x = this.BORDER;

        this.scrollButton_ = new createjs.Shape();
        this.scrollButton_.graphics.f('#aaa').rr(0, 0, 7, 30, 3.5);
        this.view_.addChild(this.scrollButton_);
        this.scrollButton_.y = 23;

        this.scrollButton_.list = this;
        this.scrollButton_.on("mousedown", function (evt) {
            // if(Entry.type != 'workspace') return;
            this.list.isResizing = true;
            this.cursor = 'pointer';
            this.offsetY = !Entry.Utils.isNumber(this.offsetY) || this.offsetY < 0 ? evt.rawY / 2 : this.offsetY;
        });
        this.scrollButton_.on("pressmove", function (evt) {
            // if(Entry.type != 'workspace') return;
            if (this.moveAmount === undefined) {
                this.y = evt.target.y;
                this.moveAmount = true;
            } else {
                this.y = evt.rawY / 2 - this.offsetY + 23 * (this.list.height_ / 100);
            }

            if (this.y < 23) this.y = 23;
            if (this.y > this.list.getHeight() - 40) this.y = this.list.getHeight() - 40;
            this.list.updateView();
        });

        this.scrollButton_.on("pressup", function (evt) {
            this.moveAmount = undefined;
        });
        if (this.getX() && this.getY()) {
            this.setX(this.getX());
            this.setY(this.getY());
        } else {
            var listLength = Entry.variableContainer.lists_.length;
            this.setX(-Math.floor(listLength / 6) * 110 + 120);
            this.setY(variableIndex * 24 + 20 - 135 - Math.floor(listLength / 6) * 145);
        }
    }

    this.setVisible(this.isVisible());

    this.updateView();

    Entry.stage.loadVariable(this);
};

/**
 * Update this.view_
 */
Entry.Variable.prototype.updateView = function () {
    if (!this.view_) return;

    if (this.isVisible()) {
        if (this.type == 'variable') {
            this.view_.x = this.getX();
            this.view_.y = this.getY();
            var oldContent = this.textView_.text;
            var newContent;
            if (this.object_) {
                var obj = Entry.container.getObject(this.object_);
                if (obj) newContent = obj.name + ':' + this.getName();else newContent = this.getName();
            } else newContent = this.getName();

            if (oldContent !== newContent) {
                this.textView_.text = newContent;
                this._nameWidth = null;
            }

            if (this.isNumber()) {
                if (this.value_[0] !== 0 && Entry.isInteger(this.value_)) this.valueView_.text = '' + this.getValue();else this.valueView_.text = Number(this.getValue()).toFixed(2).replace('.00', '');
            } else {
                this.valueView_.text = this.getValue();
            }

            if (this._nameWidth === null) this._nameWidth = this.textView_.getMeasuredWidth();
            this.valueView_.x = this._nameWidth + 14;
            this.valueView_.y = 1;
            // INFO: Number체크는 slide 일때만 하도록 처리 기본 문자로 처리함(#4876)


            if (this._valueWidth === null) this._valueWidth = this.valueView_.getMeasuredWidth();
            this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, this._nameWidth + this._valueWidth + 26, 20, 4, 4, 4, 4);
            this.wrapper_.graphics.clear().f("#1bafea").ss(1, 2, 0).s("#1bafea").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7);
        } else if (this.type == 'slide') {
            this.view_.x = this.getX();
            this.view_.y = this.getY();
            var oldContent = this.textView_.text;
            var newContent;
            if (this.object_) {
                var obj = Entry.container.getObject(this.object_);
                if (obj) newContent = obj.name + ':' + this.getName();else newContent = this.getName();
            } else newContent = this.getName();

            if (oldContent !== newContent) {
                this.textView_.text = newContent;
                this._nameWidth = null;
            }

            if (this._nameWidth === null) this._nameWidth = this.textView_.getMeasuredWidth();
            this.valueView_.x = this._nameWidth + 14;
            this.valueView_.y = 1;
            var value = String(this.getValue());

            if (this.isFloatPoint()) {
                var reg = /\.(.*)/;

                //check the value is float
                var ret = reg.exec(value);
                if (!ret) value += '.00';else {
                    while (reg.exec(value)[1].length < 2) {
                        value += '0';
                    }
                }
            }

            this.valueView_.text = value;

            if (this._valueWidth === null) this._valueWidth = this.valueView_.getMeasuredWidth();
            var width = this._nameWidth + this._valueWidth + 26;
            width = Math.max(width, 90);
            this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, width, 33, 4, 4, 4, 4);
            this.wrapper_.graphics.clear().f("#1bafea").ss(1, 2, 0).s("#1bafea").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7);

            var width = this._nameWidth + this._valueWidth + 26;
            width = Math.max(width, 90);
            this.maxWidth = width - 20;

            this.slideBar_.graphics.clear().beginFill('#A0A1A1').s('#A0A1A1').ss(1).dr(10, 10, this.maxWidth, 1.5);
            var position = this.getSlidePosition(this.maxWidth);
            this.valueSetter_.graphics.clear().beginFill('#1bafea').s('#A0A1A1').ss(1).dc(position, 10 + 0.5, 3);
        } else if (this.type == 'list') {
            this.view_.x = this.getX();
            this.view_.y = this.getY();
            this.resizeHandle_.x = this.width_ - 2;
            this.resizeHandle_.y = this.height_ - 2;
            var arr = this.array_;

            var name = this.getName();
            if (this.object_) {
                var obj = Entry.container.getObject(this.object_);
                if (obj) name = obj.name + ':' + name;
            }

            this.titleView_.text = name;
            if (this.titleView_.getMeasuredWidth() > this.width_) {
                name = name + "..";
                while (this.titleView_.getMeasuredWidth() > this.width_) {
                    name = name.substr(0, name.length - 3) + "..";
                    this.titleView_.text = name;
                }
            }
            this.titleView_.x = this.width_ / 2;
            this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rect(0, 0, this.width_, this.height_);

            while (this.view_.children[4]) {
                this.view_.removeChild(this.view_.children[4]);
            }var maxView = Math.floor((this.getHeight() - 20) / 20);

            var isOverFlow = maxView < arr.length;
            var totalWidth = this.getWidth();
            var wrapperWidth = totalWidth - 2 * this.BORDER - (isOverFlow ? 30 : 20);

            if (isOverFlow) {
                if (this.scrollButton_.y > this.getHeight() - 40) this.scrollButton_.y = this.getHeight() - 40;
                this.elementView.valueWrapper.graphics.clear().f("#1bafea").rr(20, -2, wrapperWidth, 17, 2);
                this.scrollButton_.x = totalWidth - 12;
                this.scrollPosition = Math.floor((this.scrollButton_.y - 23) / (this.getHeight() - 23 - 40) * (arr.length - maxView));
            } else {
                this.elementView.valueWrapper.graphics.clear().f("#1bafea").rr(20, -2, wrapperWidth, 17, 2);
                this.scrollPosition = 0;
            }
            this.scrollButton_.visible = isOverFlow;

            var _cache = {};
            //because of min Width of list
            //maxLen can not be under 3
            //so start from 3
            var maxLen = 3;
            wrapperWidth -= 6;

            for (var i = this.scrollPosition; i < this.scrollPosition + maxView && i < arr.length; i++) {
                if (Entry.getMainWS() && Entry.getMainWS().getMode() === Entry.Workspace.MODE_VIMBOARD) this.elementView.indexView.text = i;else this.elementView.indexView.text = i + 1;

                var text = String(arr[i].data);
                var valueView = this.elementView.valueView;
                var cachedText = _cache[text.substr(0, 150)];

                if (cachedText) valueView.text = cachedText;else {
                    var execText = text.substr(0, maxLen);
                    var charIndex = maxLen;

                    valueView.text = text;

                    if (valueView.getMeasuredWidth() > wrapperWidth) {
                        valueView.text = execText;

                        while (valueView.getMeasuredWidth() < wrapperWidth && text[charIndex] !== undefined) {
                            execText += text[charIndex++];
                            valueView.text = execText;
                        }

                        var subCnt = 1;
                        while (valueView.getMeasuredWidth() > wrapperWidth) {
                            execText = execText.substr(0, execText.length - subCnt) + "..";
                            valueView.text = execText;
                            subCnt = 3;
                        }
                    } else execText = text;

                    _cache[text.substr(0, 150)] = execText;
                    maxLen = Math.max(execText.length, maxLen);
                }

                var view = this.elementView.clone(true);
                view.y = (i - this.scrollPosition) * 20 + 23;
                this.view_.addChild(view);
            }
        } else if (this.type == 'answer') {
            this.view_.x = this.getX();
            this.view_.y = this.getY();
            this.textView_.text = this.getName();
            this.valueView_.y = 1;
            if (this.isNumber()) {
                var v = Number(this.getValue());
                if (parseInt(this.getValue(), 10) == this.getValue()) this.valueView_.text = v;else this.valueView_.text = Number(v).toFixed(1).replace('.00', '');
            } else {
                this.valueView_.text = this.getValue();
            }
            if (this._nameWidth === null) this._nameWidth = this.textView_.getMeasuredWidth();
            if (this._valueWidth === null) this._valueWidth = this.valueView_.getMeasuredWidth();

            this.valueView_.x = this._nameWidth + 14;
            this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, this._nameWidth + this._valueWidth + 26, 20, 4, 4, 4, 4);
            this.wrapper_.graphics.clear().f("#E457DC").ss(1, 2, 0).s("#E457DC").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7);
        } else {
            this.view_.x = this.getX();
            this.view_.y = this.getY();
            this.textView_.text = this.getName();

            if (this._nameWidth === null) this._nameWidth = this.textView_.getMeasuredWidth();

            this.valueView_.x = this._nameWidth + 14;
            this.valueView_.y = 1;
            if (this.isNumber()) this.valueView_.text = Number(this.getValue()).toFixed(1).replace('.00', '');else this.valueView_.text = this.getValue();

            if (this._valueWidth === null) this._valueWidth = this.valueView_.getMeasuredWidth();

            this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, this._nameWidth + this._valueWidth + 26, 20, 4, 4, 4, 4);
            this.wrapper_.graphics.clear().f("#ffbb14").ss(1, 2, 0).s("orange").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7);
        }
    }
    Entry.requestUpdate = true;
};

/**
 * Variable name getter
 * @return {string}
 */
Entry.Variable.prototype.getName = function () {
    return this.name_;
};

/**
 * Variable name setter
 * @param {!string} variableName
 */
Entry.Variable.prototype.setName = function (variableName) {
    Entry.assert(typeof variableName == 'string', 'Variable name must be string');
    this.name_ = variableName;
    this._nameWidth = null;
    this.updateView();
    Entry.requestUpdateTwice = true;
};

/**
 * Variable id getter
 * @return {string}
 */
Entry.Variable.prototype.getId = function () {
    return this.id_;
};

/**
 * Variable value getter
 * @return {number}
 */
Entry.Variable.prototype.getValue = function () {
    // INFO: Number체크는 slide 일때만 하도록 처리 기본 문자로 처리함(#4876)
    if (this.type === 'slide' && this.isNumber()) return Number(this.value_);else return this.value_;
};

/**
 * Verify value is number
 * @return {boolean}
 */
Entry.Variable.prototype.isNumber = function () {
    return Entry.Utils.isNumber(this.value_);
};

/**
 * Variable value setter
 * @param {!string} variableValue
 */
Entry.Variable.prototype.setValue = function (value) {
    if (this.type != 'slide') this.value_ = value;else {
        value = Number(value);
        if (value < this.minValue_) this.value_ = this.minValue_;else if (value > this.maxValue_) this.value_ = this.maxValue_;else this.value_ = value;
    }

    this._valueWidth = null;
    this.updateView();
    Entry.requestUpdateTwice = true;
};

/**
 * Variable visible state getter
 * @return {boolean}
 */
Entry.Variable.prototype.isVisible = function () {
    return this.visible_;
};

/**
 * Variable visible state setter
 * @param {!string} visibleState
 */
Entry.Variable.prototype.setVisible = function (visibleState) {
    Entry.assert(typeof visibleState == 'boolean', 'Variable visible state must be boolean');
    if (this.visible === visibleState) return;
    this.view_.visible = visibleState;
    this.visible_ = visibleState;
    this.updateView();
};

/**
 * X coordinate setter
 * @param {number} x
 */
Entry.Variable.prototype.setX = function (x) {
    /** @type {number} */
    this.x_ = x;
    this.updateView();
};

/**
 * X coordinate getter
 * @return {number}
 */
Entry.Variable.prototype.getX = function () {
    return this.x_;
};

/**
 * Y coordinate setter
 * @param {number} y
 */
Entry.Variable.prototype.setY = function (y) {
    /** @type {number} */
    this.y_ = y;
    this.updateView();
};

/**
 * Y coordinate getter
 * @return {number}
 */
Entry.Variable.prototype.getY = function () {
    return this.y_;
};

/**
 * width setter
 * @param {number} width
 */
Entry.Variable.prototype.setWidth = function (width) {
    /** @type {number} */
    width = width < 100 ? 100 : width;
    this.width_ = width;
    this.updateView();
};

/**
 * width getter
 * @return {number}
 */
Entry.Variable.prototype.getWidth = function () {
    return this.width_;
};

Entry.Variable.prototype.isInList = function (x, y) {
    var xArea = this.getX() + this.width_;
    var yArea = this.getY() + this.height_;
    // if(Entry.engine.state == 'stop' && this.type== 'list');
};

/**
 * height setter
 * @param {number} height
 */
Entry.Variable.prototype.setHeight = function (height) {
    /** @type {number} */
    height = height < 100 ? 100 : height;
    this.height_ = height;
    this.updateView();
};

/**
 * height getter
 * @return {number}
 */
Entry.Variable.prototype.getHeight = function () {
    return this.height_;
};

/**
 * save current state data to 'snapshot_'
 */
Entry.Variable.prototype.takeSnapshot = function () {
    this.snapshot_ = this.toJSON();
};

/**
 * load snapshot to current variable
 */
Entry.Variable.prototype.loadSnapshot = function () {
    this.snapshot_ && this.syncModel_(this.snapshot_);
    delete this.snapshot_;
};

/**
 * sync this model with parameter
 * @param {!entity model}
 * @private
 */
Entry.Variable.prototype.syncModel_ = function (variableModel) {
    var isCloud = this.isCloud_;
    if (this.type == 'list') {
        if (!isCloud) this.array_ = variableModel.array;
        this.setWidth(variableModel.width);
        this.setHeight(variableModel.height);
    }
    if (!isCloud) this.setValue(variableModel.value);

    this.setName(variableModel.name);
    this.setX(variableModel.x);
    this.setY(variableModel.y);
    this.setVisible(variableModel.visible);
    this.isCloud_ = variableModel.isCloud;
};

/**
 * convert this variable's data to JSON.
 * @return {JSON}
 */
Entry.Variable.prototype.toJSON = function () {
    var json = {};
    json.name = this.name_;
    json.id = this.id_;
    json.visible = this.visible_;
    json.value = this.value_;
    json.variableType = this.type;
    if (this.type == 'list') {
        json.width = this.getWidth();
        json.height = this.getHeight();
        json.array = JSON.parse(JSON.stringify(this.array_));
    } else if (this.type == 'slide') {
        json.minValue = this.minValue_;
        json.maxValue = this.maxValue_;
    }
    json.isCloud = this.isCloud_;
    json.object = this.object_;
    json.x = this.x_;
    json.y = this.y_;
    return json;
};

/**
 * Remove self
 */
Entry.Variable.prototype.remove = function () {
    //this.parent.dialog = null;
    Entry.stage.removeVariable(this);
};

/**
 * clone self
 */
Entry.Variable.prototype.clone = function () {
    var variable = this.toJSON();
    variable.isClone = true;
    variable = new Entry.Variable(variable);
    return variable;
};

Entry.Variable.prototype.getType = function () {
    return this.type;
};

Entry.Variable.prototype.setType = function (type) {
    this.type = type;
};

Entry.Variable.prototype.getSlidePosition = function (width) {
    var minValue = this.minValue_;
    var maxValue = this.maxValue_;
    var value = this.value_;
    var ratio = Math.abs(value - minValue) / Math.abs(maxValue - minValue);
    return width * ratio + 10;
};

Entry.Variable.prototype.setSlideCommandX = function (value) {
    var command = this.valueSetter_.graphics.command;
    value = typeof value == 'undefined' ? 10 : value;
    value = Math.max(value, 10);
    value = Math.min(this.maxWidth + 10, value);
    command.x = value;
    this.updateSlideValueByView();
};

Entry.Variable.prototype.updateSlideValueByView = function () {
    var maxWidth = this.maxWidth;
    var position = Math.max(this.valueSetter_.graphics.command.x - 10, 0);
    var ratio = position / maxWidth;
    if (ratio < 0) ratio = 0;
    if (ratio > 1) ratio = 1;

    var minValue = parseFloat(this.minValue_);
    var maxValue = parseFloat(this.maxValue_);

    var value = (minValue + Number(Math.abs(maxValue - minValue) * ratio)).toFixed(2);
    value = parseFloat(value);

    if (value < minValue) value = this.minValue_;else if (value > maxValue) value = this.maxValue_;
    if (!this.isFloatPoint()) value = Math.round(value);

    this.setValue(value);
};

Entry.Variable.prototype.getMinValue = function () {
    return this.minValue_;
};

Entry.Variable.prototype.setMinValue = function (minValue) {
    this._valueWidth = null;

    minValue = minValue || 0;
    this.minValue_ = minValue;
    if (this.value_ < minValue) this.setValue(minValue);
    this.isMinFloat = Entry.isFloat(this.minValue_);
    this.updateView();
};

Entry.Variable.prototype.getMaxValue = function () {
    return this.maxValue_;
};

Entry.Variable.prototype.setMaxValue = function (maxValue) {
    this._valueWidth = null;

    maxValue = maxValue || 100;
    this.maxValue_ = maxValue;
    if (this.value_ > maxValue) this.value_ = maxValue;
    this.isMaxFloat = Entry.isFloat(this.maxValue_);
    this.updateView();
};

Entry.Variable.prototype.isFloatPoint = function () {
    return this.isMaxFloat || this.isMinFloat;
};

/***/ }),

/***/ "./src/class/variable_container.js":
/*!*****************************************!*\
  !*** ./src/class/variable_container.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Variable container for variable object
 */


/**
 * Block variable constructor
 * @param {variable model} variable
 * @constructor
 */

Entry.VariableContainer = function () {
    this.variables_ = [];
    this.messages_ = [];
    this.lists_ = [];
    this.functions_ = {};
    this.viewMode_ = 'all';
    this.selected = null;
    this.variableAddPanel = {
        isOpen: false,
        info: {
            object: null,
            isCloud: false
        }
    };
    this.listAddPanel = {
        isOpen: false,
        info: {
            object: null,
            isCloud: false
        }
    };
    this.selectedVariable = null;
    this._variableRefs = [];
    this._messageRefs = [];
    this._functionRefs = [];
    this._filterTabs = {};
    Entry.addEventListener('workspaceChangeMode', this.updateList.bind(this));
};

(function (p) {
    p.createDom = function (view) {
        var that = this;
        this.filterElements = {};
        this.view_ = view;
        var selectView = Entry.createElement('table');
        selectView.addClass('entryVariableSelectorWorkspace');
        this.view_.appendChild(selectView);
        var selectTrView = Entry.createElement('tr');
        selectView.appendChild(selectTrView);

        var allButton = this.createSelectButton('all');
        this.filterElements.all = allButton;

        allButton.setAttribute('rowspan', '2');
        allButton.addClass('selected', 'allButton');
        selectTrView.appendChild(allButton);
        this.filterElements.variable = this.createSelectButton('variable', Entry.variableEnable);
        selectTrView.appendChild(this.filterElements.variable);
        this.filterElements.message = this.createSelectButton('message', Entry.messageEnable);
        selectTrView.appendChild(this.filterElements.message);
        var selectTrView = Entry.createElement('tr');
        this.filterElements.list = this.createSelectButton('list', Entry.listEnable);
        selectTrView.appendChild(this.filterElements.list);
        this.filterElements.func = this.createSelectButton('func', Entry.functionEnable);
        selectTrView.appendChild(this.filterElements.func);
        selectView.appendChild(selectTrView);

        var listView = Entry.createElement('ul');
        listView.addClass('entryVariableListWorkspace');
        this.view_.appendChild(listView);
        this.listView_ = listView;

        var variableAddButton = Entry.createElement('li');
        variableAddButton.addClass('entryVariableAddWorkspace entryVariableListElementWorkspace');
        variableAddButton.innerHTML = '+ ' + Lang.Workspace.variable_add;
        var thisPointer = this;
        this.variableAddButton_ = variableAddButton;

        variableAddButton.bindOnClick(function (e) {
            Entry.do('variableContainerClickVariableAddButton');
        });

        this.generateVariableAddView();
        this.generateListAddView();
        this.generateVariableSplitterView();
        this.generateVariableSettingView();
        this.generateListSettingView();

        var messageAddButton = Entry.createElement('li');
        messageAddButton.addClass('entryVariableAddWorkspace entryVariableListElementWorkspace');
        messageAddButton.innerHTML = '+ ' + Lang.Workspace.message_create;
        this.messageAddButton_ = messageAddButton;
        messageAddButton.bindOnClick(function (e) {
            that.addMessage({
                name: Lang.Workspace.message + ' ' + (that.messages_.length + 1)
            });
        });

        var listAddButton = Entry.createElement('li');
        listAddButton.addClass('entryVariableAddWorkspace entryVariableListElementWorkspace');
        listAddButton.innerHTML = '+ ' + Lang.Workspace.list_create;
        this.listAddButton_ = listAddButton;
        listAddButton.bindOnClick(function (e) {
            var panel = thisPointer.listAddPanel;
            var value = panel.view.name.value.trim();
            if (panel.isOpen) {
                if (!value || value.length === 0) {
                    panel.view.addClass('entryRemove');
                    panel.isOpen = false;
                } else that.addList();
            } else {
                panel.view.removeClass('entryRemove');
                panel.view.name.focus();
                panel.isOpen = true;
            }
        });

        var functionAddButton = Entry.createElement('li');
        functionAddButton.addClass('entryVariableAddWorkspace entryVariableListElementWorkspace');
        functionAddButton.innerHTML = '+ ' + Lang.Workspace.function_add;
        //functionAddButton.innerHTML = '+ ' + Lang.Msgs.to_be_continue;
        this.functionAddButton_ = functionAddButton;
        functionAddButton.bindOnClick(function (e) {
            var playground = Entry.playground;
            var blockMenu = that._getBlockMenu();
            playground.changeViewMode('code');
            if (blockMenu.lastSelector != 'func') blockMenu.selectMenu('func');
            that.createFunction();
        });

        return view;
    };

    /**
     * @param {String} type
     * @param {?Boolean} isEnable
     */
    p.createSelectButton = function (type, isEnable) {
        var that = this;
        if (isEnable === undefined) isEnable = true;
        var view = Entry.createElement('td');
        view.addClass('entryVariableSelectButtonWorkspace', type);
        view.innerHTML = Lang.Workspace[type];
        view.bindOnClick(function (e) {
            Entry.do('variableContainerSelectFilter', type, this.viewMode_);
        });

        if (isEnable === false) {
            view.addClass('disable');
            view.disabled = true;
        }

        this._filterTabs[type] = view;
        return view;
    };

    /**
     * @param {String} type
     */
    p.selectFilter = function (type) {
        var elements = this.view_.getElementsByTagName('td');
        for (var i = 0; i < elements.length; i++) {
            elements[i].removeClass('selected');
            if (elements[i].hasClass(type)) {
                elements[i].addClass('selected');
            }
        }
        this.viewMode_ = type;
        this.select();
        this.updateList();
    };

    p.updateVariableAddView = function (type) {
        type = type ? type : 'variable';
        var panel = type == 'variable' ? this.variableAddPanel : this.listAddPanel;
        var info = panel.info;
        var view = panel.view;
        panel.view.addClass('entryRemove');
        view.cloudCheck.removeClass('entryVariableAddChecked');
        view.localCheck.removeClass('entryVariableAddChecked');
        view.globalCheck.removeClass('entryVariableAddChecked');
        view.cloudWrapper.removeClass('entryVariableAddSpaceUnCheckedWorkspace');
        if (info.isCloud) view.cloudCheck.addClass('entryVariableAddChecked');
        if (panel.isOpen) {
            view.removeClass('entryRemove');
            view.name.focus();
        }
        if (info.object) {
            view.localCheck.addClass('entryVariableAddChecked');
            view.cloudWrapper.addClass('entryVariableAddSpaceUnCheckedWorkspace');
        } else view.globalCheck.addClass('entryVariableAddChecked');
    };

    /**
     * @param {object|Entry.Variable} object
     */
    p.select = function (object) {
        object = this.selected == object ? null : object;
        if (this.selected) {
            this.selected.listElement.removeClass('selected');
            if (this.selected.callerListElement) {
                this.listView_.removeChild(this.selected.callerListElement);
                delete this.selected.callerListElement;
            }
            this.selected = null;
        }
        if (!object) return;
        object.listElement.addClass('selected');
        this.selected = object;
        if (object instanceof Entry.Variable) {
            this.renderVariableReference(object);
            if (object.object_) Entry.container.selectObject(object.object_, true);
        } else if (object instanceof Entry.Func) {
            this.renderFunctionReference(object);
        } else {
            this.renderMessageReference(object);
        }
    };

    p.getMessage = function (messageId) {
        return this.messages_.filter(function (m) {
            return m.id === messageId;
        })[0];
    };

    /**
     * @param {object} message
     */
    p.renderMessageReference = function (message) {
        var that = this;
        var refs = this._messageRefs;
        var messageId = message.id;
        var callers = [];

        for (var i = 0; i < refs.length; i++) {
            var params = refs[i].block.params;
            var index = params.indexOf(messageId);
            if (index > -1) callers.push(refs[i]);
        }

        var listView = Entry.createElement('ul');
        listView.addClass('entryVariableListCallerListWorkspace');

        for (var i in callers) {
            var caller = callers[i];
            var element = Entry.createElement('li');
            element.addClass('entryVariableListCallerWorkspace');
            !caller.object.thumbnailView_ && caller.object.generateView();
            element.appendChild(caller.object.thumbnailView_.cloneNode());
            var nameElement = Entry.createElement('div');
            nameElement.addClass('entryVariableListCallerNameWorkspace');
            nameElement.innerHTML = caller.object.name + ' : ' + Lang.Blocks['START_' + caller.block.type];
            element.appendChild(nameElement);
            element.caller = caller;
            element.message = message;
            element.bindOnClick(function (e) {
                if (Entry.playground.object != this.caller.object) {
                    Entry.container.selectObject();
                    Entry.container.selectObject(this.caller.object.id, true);
                    that.select(null);
                    that.select(this.message);
                }

                var caller = this.caller;
                Entry.playground.toggleOnVariableView();
                Entry.playground.changeViewMode('variable');
            });
            listView.appendChild(element);
        }
        if (callers.length === 0) {
            var element = Entry.createElement('li');
            element.addClass('entryVariableListCallerWorkspace entryVariableListCallerNoneWorkspace');
            element.innerHTML = Lang.Workspace.no_use;
            listView.appendChild(element);
        }
        message.callerListElement = listView;
        this.listView_.insertBefore(listView, message.listElement);
        this.listView_.insertBefore(message.listElement, listView);
    };

    /**
     * @param {object} variable
     */
    p.renderVariableReference = function (variable) {
        var that = this;
        var refs = this._variableRefs;
        var variableId = variable.id_;
        var callers = [];

        for (var i = 0; i < refs.length; i++) {
            var params = refs[i].block.params;
            var index = params.indexOf(variableId);
            if (index > -1) callers.push(refs[i]);
        }

        var listView = Entry.createElement('ul');
        listView.addClass('entryVariableListCallerListWorkspace');

        for (var i in callers) {
            var caller = callers[i];
            var element = Entry.createElement('li');
            element.addClass('entryVariableListCallerWorkspace');
            !caller.object.thumbnailView_ && caller.object.generateView();
            element.appendChild(caller.object.thumbnailView_.cloneNode());
            var nameElement = Entry.createElement('div');
            nameElement.addClass('entryVariableListCallerNameWorkspace');
            nameElement.innerHTML = caller.object.name + ' : ' + Lang.Blocks['VARIABLE_' + caller.block.type];
            element.appendChild(nameElement);
            element.caller = caller;
            element.variable = variable;
            element.bindOnClick(function (e) {
                if (Entry.playground.object != this.caller.object) {
                    Entry.container.selectObject();
                    Entry.container.selectObject(this.caller.object.id, true);
                    that.select(null);
                }
                var caller = this.caller;
                var block = caller.funcBlock || caller.block;
                var blockView = block.view;
                blockView && blockView.getBoard().activateBlock(block);
                Entry.playground.toggleOnVariableView();
                Entry.playground.changeViewMode('variable');
            });
            listView.appendChild(element);
        }

        if (callers.length === 0) {
            var element = Entry.createElement('li');
            element.addClass('entryVariableListCallerWorkspace entryVariableListCallerNoneWorkspace');
            element.innerHTML = Lang.Workspace.no_use;
            listView.appendChild(element);
        }
        variable.callerListElement = listView;
        this.listView_.insertBefore(listView, variable.listElement);
        this.listView_.insertBefore(variable.listElement, listView);
    };

    /**
     * @param {object} variable
     */
    p.renderFunctionReference = function (func) {
        var that = this;
        var refs = this._functionRefs;
        var funcId = func.id_;
        var callers = [];

        for (var i = 0; i < refs.length; i++) {
            callers.push(refs[i]);
        }var listView = Entry.createElement('ul');
        listView.addClass('entryVariableListCallerListWorkspace');

        for (var i in callers) {
            var caller = callers[i];
            var element = Entry.createElement('li');
            element.addClass('entryVariableListCallerWorkspace');
            !caller.object.thumbnailView_ && caller.object.generateView();
            element.appendChild(caller.object.thumbnailView_.cloneNode());
            var nameElement = Entry.createElement('div');
            nameElement.addClass('entryVariableListCallerNameWorkspace');
            nameElement.innerHTML = caller.object.name;
            element.appendChild(nameElement);
            element.caller = caller;
            element.bindOnClick(function (e) {
                if (Entry.playground.object != this.caller.object) {
                    Entry.container.selectObject();
                    Entry.container.selectObject(this.caller.object.id, true);
                    that.select(null);
                    that.select(func);
                }
                Entry.playground.toggleOnVariableView();
                var block = this.caller.block;
                var blockView = block.view;
                blockView && blockView.getBoard().activateBlock(block);
                Entry.playground.changeViewMode('variable');
            });
            listView.appendChild(element);
        }
        if (callers.length === 0) {
            var element = Entry.createElement('li');
            element.addClass('entryVariableListCallerWorkspace entryVariableListCallerNoneWorkspace');
            element.innerHTML = Lang.Workspace.no_use;
            listView.appendChild(element);
        }
        func.callerListElement = listView;
        this.listView_.insertBefore(listView, func.listElement);
        this.listView_.insertBefore(func.listElement, listView);
    };

    /**
     * update list view
     */
    p.updateList = function () {
        var playground = Entry.playground;
        if (!this.listView_ || playground && playground.getViewMode() !== 'variable' && playground.getViewMode() !== 'code') return;

        this.variableSettingView.addClass('entryRemove');
        this.listSettingView.addClass('entryRemove');

        var isPythonMode = this._isPythonMode();
        if (isPythonMode) this.listView_.addClass('entryVariableContainerTextMode');else this.listView_.removeClass('entryVariableContainerTextMode');

        while (this.listView_.firstChild) {
            this.listView_.removeChild(this.listView_.lastChild);
        }var viewMode = this.viewMode_;
        var elementList = [];
        if (viewMode == 'all' || viewMode == 'message') {
            if (viewMode == 'message') {
                this.listView_.appendChild(this.messageAddButton_);
            }
            for (var i in this.messages_) {
                var message = this.messages_[i];
                elementList.push(message);
                !message.listElement && this.createMessageView(message);
                var view = message.listElement;

                this.listView_.appendChild(view);
                if (message.callerListElement) this.listView_.appendChild(message.callerListElement);
            }
        }

        if (viewMode == 'all' || viewMode == 'variable') {
            if (viewMode == 'variable') {
                var info = this.variableAddPanel.info;
                if (info.object && !Entry.playground.object) info.object = null;

                this.listView_.appendChild(this.variableAddButton_);
                this.listView_.appendChild(this.variableAddPanel.view);

                this.variableSplitters.top.innerHTML = Lang.Workspace.Variable_used_at_all_objects;
                this.listView_.appendChild(this.variableSplitters.top);
                for (var i in this.variables_) {
                    var variable = this.variables_[i];
                    if (variable.object_) continue;
                    elementList.push(variable);
                    !variable.listElement && this.createVariableView(variable);
                    var view = variable.listElement;
                    this.listView_.appendChild(view);
                    if (variable.callerListElement) this.listView_.appendChild(variable.callerListElement);
                }

                this.variableSplitters.bottom.innerHTML = Lang.Workspace.Variable_used_at_special_object;
                this.listView_.appendChild(this.variableSplitters.bottom);
                for (var i in this.variables_) {
                    var variable = this.variables_[i];
                    if (!variable.object_) continue;
                    elementList.push(variable);
                    !variable.listElement && this.createVariableView(variable);
                    var view = variable.listElement;
                    this.listView_.appendChild(view);
                    if (variable.callerListElement) this.listView_.appendChild(variable.callerListElement);
                }
                this.updateVariableAddView('variable');
            } else {
                for (var i in this.variables_) {
                    var variable = this.variables_[i];
                    elementList.push(variable);
                    !variable.listElement && this.createVariableView(variable);
                    var view = variable.listElement;
                    this.listView_.appendChild(view);
                    if (variable.callerListElement) this.listView_.appendChild(variable.callerListElement);
                }
            }
        }

        if (viewMode == 'all' || viewMode == 'list') {
            if (viewMode == 'list') {
                var info = this.listAddPanel.info;
                if (info.object && !Entry.playground.object) info.object = null;
                this.listView_.appendChild(this.listAddButton_);
                this.listView_.appendChild(this.listAddPanel.view);
                this.variableSplitters.top.innerHTML = Lang.Workspace.List_used_all_objects;
                this.listView_.appendChild(this.variableSplitters.top);

                this.updateVariableAddView('list');
                for (var i in this.lists_) {
                    var list = this.lists_[i];
                    if (list.object_) continue;
                    elementList.push(list);
                    !list.listElement && this.createListView(list);
                    var view = list.listElement;
                    this.listView_.appendChild(view);
                    if (list.callerListElement) this.listView_.appendChild(list.callerListElement);
                }
                this.variableSplitters.bottom.innerHTML = Lang.Workspace.list_used_specific_objects;
                this.listView_.appendChild(this.variableSplitters.bottom);
                for (var i in this.lists_) {
                    var list = this.lists_[i];
                    if (!list.object_) continue;
                    elementList.push(list);
                    !list.listElement && this.createListView(list);
                    var view = list.listElement;
                    this.listView_.appendChild(view);
                    if (list.callerListElement) this.listView_.appendChild(list.callerListElement);
                }
                this.updateVariableAddView('variable');
            } else {
                for (var i in this.lists_) {
                    var list = this.lists_[i];
                    elementList.push(list);
                    !list.listElement && this.createListView(list);
                    var view = list.listElement;
                    this.listView_.appendChild(view);
                    if (list.callerListElement) this.listView_.appendChild(list.callerListElement);
                }
            }
        }

        if (viewMode == 'all' || viewMode == 'func') {
            if (viewMode == 'func') {
                var mode = Entry.Workspace.MODE_BOARD;
                if (Entry.getMainWS()) mode = Entry.getMainWS().getMode();

                if (mode === Entry.Workspace.MODE_OVERLAYBOARD || isPythonMode) {
                    this.functionAddButton_.addClass('disable');
                } else this.functionAddButton_.removeClass('disable');

                this.listView_.appendChild(this.functionAddButton_);
            }
            for (var i in this.functions_) {
                var func = this.functions_[i];
                elementList.push(func);
                !func.funcElement && this.createFunctionView(func);
                var view = func.listElement;
                this.listView_.appendChild(view);
                if (func.callerListElement) this.listView_.appendChild(func.callerListElement);
            }
        }

        //select the first element(view) if exist
        this.listView_.appendChild(this.variableSettingView);
        this.listView_.appendChild(this.listSettingView);
        //if (elementList.length !== 0)
        //this.select(elementList[0]);
        elementList = null;
    };

    /**
     * @param {!Array.<message model>} objectModels
     */
    p.setMessages = function (messages) {
        for (var i in messages) {
            var message = messages[i];
            if (!message.id) {
                message.id = Entry.generateHash();
            }
            this.messages_.push(message);
        }
        Entry.playground.reloadPlayground();
    };

    /**
     * @param {!Array.<message model>} objectModels
     */
    p.appendMessages = function (messages) {
        var _this = this;

        var _loop = function _loop(i) {
            var message = messages[i];
            if (!message.id) {
                message.id = Entry.generateHash();
            } else if (_this.messages_.some(function (item) {
                return item.id === message.id;
            })) {
                return 'continue';
            }
            var name = message.name;
            name = _this.checkAllVariableName(name, 'messages_', 'name') ? Entry.getOrderedName(name, _this.messages_, 'name') : name;
            message.name = name;
            _this.messages_.push(message);
        };

        for (var i in messages) {
            var _ret = _loop(i);

            if (_ret === 'continue') continue;
        }
        Entry.playground.reloadPlayground();
    };

    /**
     * @param {!Array.<variable model>} variables
     */
    p.setVariables = function (variables) {
        var that = this;
        for (var i in variables) {
            var variable = new Entry.Variable(variables[i]);
            var type = variable.getType();
            if (type == 'variable' || type == 'slide') {
                variable.generateView(this.variables_.length);
                this.variables_.push(variable);
            } else if (type == 'list') {
                variable.generateView(this.lists_.length);
                this.lists_.push(variable);
            } else if (type == 'timer') that.generateTimer(variable);else if (type == 'answer') that.generateAnswer(variable);
        }
        if (Entry.isEmpty(Entry.engine.projectTimer)) Entry.variableContainer.generateTimer();
        if (Entry.isEmpty(Entry.container.inputValue)) Entry.variableContainer.generateAnswer();
        Entry.playground.reloadPlayground();
    };

    p.generateVariable = function (variable, data, key) {
        var name = variable.name_;
        variable.generateView(data.length);
        name = this.checkAllVariableName(name, key) ? Entry.getOrderedName(name, data, 'name_') : name;
        variable.name_ = name;
    };

    /**
     * @param {!Array.<variable model>} variables
     */
    p.appendVariables = function (variables) {
        for (var i in variables) {
            var variable = new Entry.Variable(variables[i]);
            if (!variable.id_) {
                variable.id_ = Entry.generateHash();
            }
            var name = variable.name_;
            var type = variable.getType();
            if (type == 'variable' || type == 'slide') {
                if (this.variables_.some(function (item) {
                    return item.id_ === variable.id_;
                })) {
                    continue;
                }
                this.generateVariable(variable, this.variables_, 'variables_');
                this.variables_.push(variable);
            } else if (type == 'list') {
                if (this.lists_.some(function (item) {
                    return item.id_ === variable.id_;
                })) {
                    continue;
                }
                this.generateVariable(variable, this.lists_, 'lists_');
                this.lists_.push(variable);
            }
        }
        if (Entry.isEmpty(Entry.engine.projectTimer)) {
            Entry.variableContainer.generateTimer();
        }
        if (Entry.isEmpty(Entry.container.inputValue)) {
            Entry.variableContainer.generateAnswer();
        }
        Entry.playground.reloadPlayground();
    };

    /**
     * @param {!Array.<function model>} variables
     */
    p.setFunctions = function (functions) {
        for (var i in functions) {
            var func = new Entry.Func(functions[i]);
            func.generateBlock();
            this.functions_[func.id] = func;
        }
    };

    /**
     * @param {!Array.<function model>} variables
     */
    p.appendFunctions = function (functions) {
        for (var i in functions) {
            var func = functions[i];
            if (!func.id) {
                func.id = Entry.generateHash();
            } else if ('' + func.id in this.functions_) {
                continue;
            }
            var parseFunc = new Entry.Func(func);
            this.changeFunctionName(parseFunc);
            parseFunc.generateBlock();
            this.functions_[parseFunc.id] = parseFunc;
        }
    };

    p.changeFunctionName = function (func) {
        var _this2 = this;

        var params = func.content.getEventMap('funcDef')[0].params[0].data.params;
        var funcParamInfo = this.getFunctionParamInfo(params);
        var funcParamName = this.getFunctionParamName(funcParamInfo);
        var funcKeys = Object.keys(this.functions_);
        var funcsParamNames = funcKeys.map(function (key) {
            var func = _this2.functions_[key];
            var params = func.content.getEventMap('funcDef')[0].params[0].data.params;
            var info = _this2.getFunctionParamInfo(params);
            return {
                name: _this2.getFunctionParamName(info)
            };
        });

        var isDuplecate = funcsParamNames.some(function (_ref) {
            var name = _ref.name;

            return funcParamName === name;
        });

        if (isDuplecate) {
            var orderedNumber = Entry.getOrderedNameNumber(funcParamName, funcsParamNames, 'name');
            for (var i = funcParamInfo.length - 1;; i--) {
                var info = funcParamInfo[i];
                if (info.type === 'string') {
                    info.parent[0] += orderedNumber;
                    break;
                }
            }

            Entry.Func.generateWsBlock(func);
        }
    };

    p.getFunctionParamName = function (info) {
        var name = '';
        info.forEach(function (item) {
            name += item.name;
        });
        return name;
    };

    p.getFunctionParamInfo = function (parentParams) {
        var _this3 = this;

        var info = [];
        parentParams.forEach(function (param, index) {
            if (typeof param === 'string') {
                info[index] = {
                    name: param,
                    type: 'string',
                    parent: parentParams
                };
                // name += param;
            } else if (param instanceof Entry.Block) {
                var _param$data = param.data,
                    data = _param$data === undefined ? {} : _param$data;
                var _data$params = data.params,
                    params = _data$params === undefined ? [] : _data$params,
                    type = data.type;


                if (type.indexOf('stringParam') === 0 || type.indexOf('booleanParam') === 0) {
                    var name = type.slice(0, -5);
                    info[index] = {
                        name: name,
                        type: name,
                        parent: parentParams
                    };
                } else {
                    var childParamInfo = _this3.getFunctionParamInfo(params);
                    var keys = Object.keys(childParamInfo);
                    childParamInfo.forEach(function (childInfo, childIndex) {
                        info[childIndex + index] = childInfo;
                    });
                }
            }
        });
        return info;
    };

    /**
     * get func
     * @return {Entry.Func}
     */
    p.getFunction = function (funcId) {
        return this.functions_[funcId];
    };

    /**
     * get variable on canvas
     * @return {Entry.Variable}
     */
    p.getVariable = function (variableId, entity) {
        var keyName = 'id_';
        var variable = Entry.findObjsByKey(this.variables_, keyName, variableId)[0];
        if (entity && entity.isClone && variable.object_) variable = Entry.findObjsByKey(entity.variables, keyName, variableId)[0];

        return variable;
    };

    p.getVariableByName = function (variableName, isSelf, currentObjectId) {
        if (!currentObjectId && Entry.playground && Entry.playground.object) currentObjectId = Entry.playground.object.id;

        for (var i = 0; i < this.variables_.length; i++) {
            var v = this.variables_[i];
            if (isSelf === true) {
                if (!v.object_ || v.object_ !== currentObjectId) continue;
            } else if (isSelf === false) {
                if (v.object_) continue;
            }

            if (v.getName() === variableName) return v;
        }
    };

    /**
     * get variable on canvas
     * @return {Entry.List}
     */
    p.getList = function (listId, entity) {
        var keyName = 'id_';
        var list = Entry.findObjsByKey(this.lists_, keyName, listId)[0];
        if (entity && entity.isClone && list.object_) list = Entry.findObjsByKey(entity.lists, keyName, listId)[0];

        return list;
    };

    /**
     * Create function
     */
    p.createFunction = function () {
        if (Entry.Func.isEdit) return;
        var func = new Entry.Func();
        Entry.Func.edit(func);
        //this.saveFunction(func);
    };

    /**
     * Add variable
     * @param {Entry.Variable} variable
     * @return {boolean} return true when success
     */
    p.addFunction = function (variable) {};

    /**
     * Remove variable
     * @param {Entry.Variable} variable
     */
    p.removeFunction = function (func) {
        var functionId = func.id;
        var functions = this.functions_;
        functions[functionId].destroy();
        delete functions[functionId];
        var functionType = 'func_' + functionId;

        Entry.container.removeFuncBlocks(functionType);
        for (var id in functions) {
            functions[id].content.removeBlocksByType(functionType);
        }this.updateList();
    };

    p.checkListPosition = function (list, mouse) {
        var pos = {
            start_w: list.x_,
            area_w: list.x_ + list.width_,
            start_h: -list.y_,
            area_h: -list.y_ + -list.height_
        };

        if (mouse.x > pos.start_w && mouse.x < pos.area_w) {
            if (mouse.y < pos.start_h && mouse.y > pos.area_h) {
                return true;
            }
        }
        return false;
    };

    p.getListById = function (mouseevt) {
        var lists = this.lists_;
        var returnList = [];
        if (lists.length > 0) {
            for (var i = 0; i < lists.length; i++) {
                if (this.checkListPosition(lists[i], mouseevt)) returnList.push(lists[i]);
            }
            return returnList;
        }
        return false;
    };

    p.getListByName = function (name, isSelf, currentObjectId) {
        var lists = this.lists_;
        if (!currentObjectId && Entry.playground && Entry.playground.object) currentObjectId = Entry.playground.object.id;

        for (var i = 0; i < lists.length; i++) {
            var l = lists[i];

            if (isSelf === true) {
                if (!l.object_ || l.object_ !== currentObjectId) continue;
            } else if (isSelf === false) {
                if (l.object_) continue;
            }

            if (l.getName() === name) return l;
        }
    };

    /**
     * @param {Entry.Variable} variable
     * @param {String} name
     */
    p.editFunction = function (variable, name) {};

    /**
     * Save variable
     * @param {Entry.Func} func
     */
    p.saveFunction = function (func) {
        /* add to function list when not exist */
        var ws = Entry.getMainWS();

        if (ws && ws.overlayModefrom == Entry.Workspace.MODE_VIMBOARD) {
            if (func && func.description) {
                var funcName = func.description.substring(1, func.description.length - 1);
                var alert_msg = Entry.TextCodingUtil.isNameIncludeSpace(funcName, 'function');
                if (alert_msg) {
                    entrylms.alert(alert_msg);
                    Entry.Func.cancelEdit();
                    return;
                }
            }
        }

        if (!this.functions_[func.id]) {
            this.functions_[func.id] = func;
            this.createFunctionView(func);
        }
        if (func.listElement) func.listElement.nameField.innerHTML = func.description;

        this.updateList();
    };

    /**
     * @param {Entry.Func} func
     */
    p.createFunctionView = function (func) {
        var that = this;
        if (!this.view_) return;
        var view = Entry.createElement('li');
        var className = '';
        className += 'entryVariableListElementWorkspace';
        className += ' entryFunctionElementWorkspace';
        className += ' function';
        view.addClass(className);
        view.bindOnClick(function (e) {
            e.stopPropagation();
            that.select(func);
        });

        var removeButton = Entry.createElement('button');
        removeButton.addClass('entryVariableListElementDeleteWorkspace');
        removeButton.bindOnClick(function (e) {
            e.stopPropagation();
            entrylms.confirm(Lang.Workspace.will_you_delete_function).then(function (result) {
                if (result === true) {
                    that.removeFunction(func);
                    that.selected = null;
                }
            });
        });

        var editButton = Entry.createElement('button');
        editButton.addClass('entryVariableListElementEditWorkspace notForTextMode');
        var blockMenu = this._getBlockMenu();
        editButton.bindOnClick(function (e) {
            e.stopPropagation();
            var playground = Entry.playground;
            if (playground) {
                playground.changeViewMode('code');
                if (blockMenu.lastSelector != 'func') blockMenu.selectMenu('func');
            }
            Entry.Func.edit(func);
        });

        var nameField = Entry.createElement('div');
        nameField.addClass('entryVariableFunctionElementNameWorkspace');
        nameField.innerHTML = func.description;
        view.nameField = nameField;
        view.appendChild(nameField);
        view.appendChild(editButton);
        view.appendChild(removeButton);
        func.listElement = view;
    };

    /**
     * Add variable
     * @param {Entry.Variable} variable
     * @return {boolean} return true when success
     */
    p.checkAllVariableName = function (name, variable) {
        var variable = this[variable];
        for (var i = 0; i < variable.length; i++) {
            if (variable[i].name_ == name) {
                return true;
            }
        }
        return false;
    };

    p.addVariable = function (variable) {
        if (Entry.isTextMode) {
            var panel = this.variableAddPanel;
            var variableName = panel.view.name.value;
            var alert_msg = Entry.TextCodingUtil.isNameIncludeSpace(variableName, 'variable');
            if (alert_msg) {
                entrylms.alert(alert_msg);
                this.variableAddPanel.view.addClass('entryRemove');
                this.resetVariableAddPanel('variable');
                return;
            }
        }

        var variableContainer = this;
        var panel = this.variableAddPanel;
        if (!variable) {
            var name = panel.view.name.value.trim();
            if (!name || name.length === 0) name = Lang.Workspace.variable;

            if (name.length > this._maxNameLength) name = this._truncName(name, 'variable');

            name = this.checkAllVariableName(name, 'variables_') ? Entry.getOrderedName(name, this.variables_, 'name_') : name;

            var info = panel.info;
            variable = {
                name: name,
                isCloud: info.isCloud,
                object: info.object,
                variableType: 'variable'
            };
        }
        if (panel.view) panel.view.addClass('entryRemove');
        this.resetVariableAddPanel('variable');
        if (!(variable instanceof Entry.Variable)) variable = new Entry.Variable(variable);

        variable.generateView(this.variables_.length);
        this.createVariableView(variable);
        this.variables_.unshift(variable);
        if (Entry.playground && Entry.playground.blockMenu) Entry.playground.blockMenu.deleteRendered('variable');
        Entry.playground.reloadPlayground();
        if (panel.view) panel.view.name.value = '';
        this.updateList();
    };

    /**
     * Remove variable
     * @param {Entry.Variable} variable
     */
    p.removeVariable = function (variable) {
        if (!(variable instanceof Entry.Variable)) {
            variable = this.variables_.filter(function (v) {
                return variable.id === v.id_;
            })[0];
        }

        var index = this.variables_.indexOf(variable);
        var variableJSON = variable.toJSON();

        if (this.selected == variable) this.select(null);
        variable.remove();
        this.variables_.splice(index, 1);
        Entry.playground.reloadPlayground();
        this.updateList();
    };

    /**
     * @param {Entry.Variable} variable
     * @param {String} name
     */
    p.changeVariableName = function (variable, name) {
        if (variable.name_ == name) return;

        if (Entry.isTextMode) {
            var alert_msg = Entry.TextCodingUtil.isNameIncludeSpace(name, 'variable');
            if (alert_msg) {
                entrylms.alert(alert_msg);
                variable.listElement.nameField.value = variable.name_;
                return;
            }
        }

        var variables = this.variables_;
        var exist = Entry.isExist(name, 'name_', variables);

        if (exist) {
            variable.listElement.nameField.value = variable.name_;
            Entry.toast.alert(Lang.Workspace.variable_rename_failed, Lang.Workspace.variable_dup);
            return;
        } else if (name.length > 10) {
            variable.listElement.nameField.value = variable.name_;
            Entry.toast.alert(Lang.Workspace.variable_rename_failed, Lang.Workspace.variable_too_long);
            return;
        }
        variable.setName(name);
        Entry.playground.reloadPlayground();
        Entry.toast.success(Lang.Workspace.variable_rename, Lang.Workspace.variable_rename_ok);
    };

    /**
     * @param {Entry.Variable} list
     * @param {String} name
     */
    p.changeListName = function (list, name) {
        if (list.name_ == name) return;

        if (Entry.isTextMode) {
            var alert_msg = Entry.TextCodingUtil.isNameIncludeSpace(name, 'list');
            if (alert_msg) {
                entrylms.alert(alert_msg);
                list.listElement.nameField.value = list.name_;
                return;
            }
        }

        var lists = this.lists_;
        var exist = Entry.isExist(name, 'name_', lists);

        if (exist) {
            list.listElement.nameField.value = list.name_;
            Entry.toast.alert(Lang.Workspace.list_rename_failed, Lang.Workspace.list_dup);
            return;
        } else if (name.length > 10) {
            list.listElement.nameField.value = list.name_;
            Entry.toast.alert(Lang.Workspace.list_rename_failed, Lang.Workspace.list_too_long);
            return;
        }
        list.name_ = name;
        list.updateView();
        Entry.playground.reloadPlayground();
        Entry.toast.success(Lang.Workspace.list_rename, Lang.Workspace.list_rename_ok);
    };

    /**
     * Remove list
     * @param {Entry.Variable} list
     */
    p.removeList = function (list) {
        var index = this.lists_.indexOf(list);
        var listJSON = list.toJSON();
        if (Entry.stateManager) Entry.stateManager.addCommand('remove list', this, this.addList, listJSON);
        if (this.selected == list) this.select(null);
        list.remove();
        this.lists_.splice(index, 1);
        Entry.playground.reloadPlayground();
        this.updateList();
        return new Entry.State(this, this.addList, listJSON);
    };

    /**
     * @param {Entry.Variable} variable
     */
    p.createVariableView = function (variable) {
        var that = this;
        var view = Entry.createElement('li');
        var wrapper = Entry.createElement('div');
        wrapper.addClass('entryVariableListElementWrapperWorkspace variable');
        view.appendChild(wrapper);
        var className = 'entryVariableListElementWorkspace';
        if (!variable.object_) {
            if (variable.isCloud_) className += ' entryVariableCloudElementWorkspace';else className += ' entryVariableGlobalElementWorkspace';
        } else className += ' entryVariableLocalElementWorkspace';

        view.addClass(className);
        view.bindOnClick(function (e) {
            that.select(variable);
        });
        var removeButton = Entry.createElement('button');
        removeButton.addClass('entryVariableListElementDeleteWorkspace notForTextMode');
        removeButton.bindOnClick(function (e) {
            e.stopPropagation();
            that.removeVariable(variable);
            that.selectedVariable = null;
            that.variableSettingView.addClass('entryRemove');
        });
        view.removeButton = removeButton;
        this._removeButton = removeButton;

        var editButton = Entry.createElement('button');
        editButton.addClass('entryVariableListElementEditWorkspace');
        editButton.bindOnClick(function (e) {
            e.stopPropagation();
            nameField.removeAttribute('disabled');
            editSaveButton.removeClass('entryRemove');
            this.addClass('entryRemove');
            that.updateSelectedVariable(variable);
            nameField.focus();
        });
        view.editButton = editButton;

        var editSaveButton = Entry.createElement('button');
        editSaveButton.addClass('entryVariableListElementEditWorkspace entryRemove');
        editSaveButton.bindOnClick(function (e) {
            e.stopPropagation();
            nameField.blur();
            nameField.setAttribute('disabled', 'disabled');
            editButton.removeClass('entryRemove');
            this.addClass('entryRemove');
            that.updateSelectedVariable(null, 'variable');
        });
        view.editSaveButton = editSaveButton;

        var nameField = Entry.createElement('input');
        nameField.addClass('entryVariableListElementNameWorkspace');
        nameField.setAttribute('disabled', 'disabled');
        nameField.value = variable.name_;
        nameField.bindOnClick(function (e) {
            e.stopPropagation();
        });
        nameField.onblur = function (e) {
            var value = this.value.trim();
            if (!value || value.length === 0) {
                Entry.toast.alert(Lang.Msgs.warn, Lang.Workspace.variable_can_not_space);
                this.value = variable.getName();
                return;
            }
            that.changeVariableName(variable, this.value);
        };
        nameField.onkeydown = function (e) {
            if (e.keyCode == 13) this.blur();
        };
        view.nameField = nameField;
        wrapper.appendChild(nameField);
        wrapper.appendChild(editButton);
        wrapper.appendChild(editSaveButton);
        wrapper.appendChild(removeButton);
        variable.listElement = view;
    };

    /**
     * Add event for block
     * @param {message model} message
     * @return {boolean} return true when success
     */
    p.addMessage = function (message) {
        if (!message.id) message.id = Entry.generateHash();
        if (Entry.stateManager) Entry.stateManager.addCommand('add message', this, this.removeMessage, message);
        this.createMessageView(message);
        this.messages_.unshift(message);
        if (Entry.playground && Entry.playground.blockMenu) Entry.playground.blockMenu.deleteRendered('start');
        Entry.playground.reloadPlayground();
        this.updateList();
        message.listElement.nameField.focus();
        return new Entry.State(this, this.removeMessage, message);
    };

    /**
     * Add event
     * @param {message model} message
     */
    p.removeMessage = function (message) {
        if (this.selected == message) this.select(null);
        if (Entry.stateManager) Entry.stateManager.addCommand('remove message', this, this.addMessage, message);
        var index = this.messages_.indexOf(message);
        this.messages_.splice(index, 1);
        this.updateList();
        Entry.playground.reloadPlayground();
        return new Entry.State(this, this.addMessage, message);
    };

    /**
     * @param {object} message
     * @param {String} name
     */
    p.changeMessageName = function (message, name) {
        if (message.name == name) return;

        var messages = this.messages_;
        var exist = Entry.isExist(name, 'name', messages);

        if (exist) {
            message.listElement.nameField.value = message.name;
            Entry.toast.alert(Lang.Workspace.message_rename_failed, Lang.Workspace.message_dup);
            return;
        } else if (name.length > 10) {
            message.listElement.nameField.value = message.name;
            Entry.toast.alert(Lang.Workspace.message_rename_failed, Lang.Workspace.message_too_long);
            return;
        }
        message.name = name;
        if (Entry.playground && Entry.playground.blockMenu) Entry.playground.blockMenu.deleteRendered('start');
        Entry.playground.reloadPlayground();
        Entry.toast.success(Lang.Workspace.message_rename, Lang.Workspace.message_rename_ok);
    };

    /**
     * @param {object} message
     */
    p.createMessageView = function (message) {
        var that = this;
        var view = Entry.createElement('li');
        view.addClass('entryVariableListElementWorkspace entryMessageElementWorkspace');
        view.bindOnClick(function (e) {
            that.select(message);
        });

        var removeButton = Entry.createElement('button');
        removeButton.addClass('entryVariableListElementDeleteWorkspace');
        removeButton.bindOnClick(function (e) {
            e.stopPropagation();
            that.removeMessage(message);
        });

        var editButton = Entry.createElement('button');
        editButton.addClass('entryVariableListElementEditWorkspace');
        editButton.bindOnClick(function (e) {
            e.stopPropagation();
            nameField.removeAttribute('disabled');
            nameField.focus();
            editSaveButton.removeClass('entryRemove');
            this.addClass('entryRemove');
        });

        var editSaveButton = Entry.createElement('button');
        editSaveButton.addClass('entryVariableListElementEditWorkspace entryRemove');
        editSaveButton.bindOnClick(function (e) {
            e.stopPropagation();
            nameField.blur();
            editButton.removeClass('entryRemove');
            this.addClass('entryRemove');
        });

        var nameField = Entry.createElement('input');
        nameField.addClass('entryVariableListElementNameWorkspace');
        nameField.value = message.name;
        nameField.bindOnClick(function (e) {
            e.stopPropagation();
        });
        nameField.onblur = function (e) {
            var value = this.value.trim();
            if (!value || value.length === 0) {
                Entry.toast.alert(Lang.Msgs.warn, Lang.Msgs.sign_can_not_space);
                this.value = message.name;
                return;
            }
            that.changeMessageName(message, this.value);
            editButton.removeClass('entryRemove');
            editSaveButton.addClass('entryRemove');
            nameField.setAttribute('disabled', 'disabled');
        };
        nameField.onkeydown = function (e) {
            if (e.keyCode == 13) this.blur();
        };
        view.nameField = nameField;
        view.appendChild(nameField);
        view.appendChild(editButton);
        view.appendChild(editSaveButton);
        view.appendChild(removeButton);
        message.listElement = view;
    };

    /**
     * Add list for block
     * @param {list model} list
     * @return {boolean} return true when success
     */
    p.addList = function (list) {
        if (Entry.isTextMode) {
            var panel = this.listAddPanel;
            var listName = panel.view.name.value;
            var alert_msg = Entry.TextCodingUtil.isNameIncludeSpace(listName, 'list');
            if (alert_msg) {
                entrylms.alert(alert_msg);
                this.listAddPanel.view.addClass('entryRemove');
                this.resetVariableAddPanel('list');
                return;
            }
        }

        if (!list) {
            var variableContainer = this;
            var panel = this.listAddPanel;
            var name = panel.view.name.value.trim();
            if (!name || name.length === 0) name = Lang.Workspace.list;

            var info = panel.info;

            if (name.length > this._maxNameLength) name = this._truncName(name, 'list');

            name = this.checkAllVariableName(name, 'lists_') ? Entry.getOrderedName(name, this.lists_, 'name_') : name;

            list = {
                name: name,
                isCloud: info.isCloud,
                object: info.object,
                variableType: 'list'
            };
            panel.view.addClass('entryRemove');
            this.resetVariableAddPanel('list');
        }

        var list = new Entry.Variable(list);
        if (Entry.stateManager) Entry.stateManager.addCommand('add list', this, this.removeList, list);
        list.generateView(this.lists_.length);
        this.createListView(list);
        this.lists_.unshift(list);
        if (Entry.playground && Entry.playground.blockMenu) Entry.playground.blockMenu.deleteRendered('variable');
        Entry.playground.reloadPlayground();

        this.updateList();
        return new Entry.State(this, this.removelist, list);
    };

    /**
     * @param {Entry.Variable} list
     */
    p.createListView = function (list) {
        var that = this;
        var view = Entry.createElement('li');
        var wrapper = Entry.createElement('div');
        wrapper.addClass('entryVariableListElementWrapperWorkspace list');
        view.appendChild(wrapper);
        view.addClass('entryVariableListElementWorkspace');
        if (!list.object_) {
            if (list.isCloud_) view.addClass('entryListCloudElementWorkspace');else view.addClass('entryListGlobalElementWorkspace');
        } else view.addClass('entryListLocalElementWorkspace');

        view.bindOnClick(function (e) {
            that.select(list);
        });

        var removeButton = Entry.createElement('button');
        removeButton.addClass('entryVariableListElementDeleteWorkspace notForTextMode');
        removeButton.bindOnClick(function (e) {
            e.stopPropagation();
            that.removeList(list);
            that.selectedList = null;
            that.listSettingView.addClass('entryRemove');
        });

        var editButton = Entry.createElement('button');
        editButton.addClass('entryVariableListElementEditWorkspace');
        editButton.bindOnClick(function (e) {
            e.stopPropagation();
            nameField.removeAttribute('disabled');
            editSaveButton.removeClass('entryRemove');
            this.addClass('entryRemove');
            that.updateSelectedVariable(list);
            nameField.focus();
        });
        view.editButton = editButton;

        var editSaveButton = Entry.createElement('button');
        editSaveButton.addClass('entryVariableListElementEditWorkspace entryRemove');
        editSaveButton.bindOnClick(function (e) {
            e.stopPropagation();
            nameField.blur();
            nameField.setAttribute('disabled', 'disabled');
            editButton.removeClass('entryRemove');
            this.addClass('entryRemove');
            that.select(list);
            that.updateSelectedVariable(null, 'list');
        });
        view.editSaveButton = editSaveButton;

        var nameField = Entry.createElement('input');
        nameField.setAttribute('disabled', 'disabled');
        nameField.addClass('entryVariableListElementNameWorkspace');
        nameField.value = list.name_;
        nameField.bindOnClick(function (e) {
            e.stopPropagation();
        });
        nameField.onblur = function (e) {
            var value = this.value.trim();
            if (!value || value.length === 0) {
                Entry.toast.alert(Lang.Msgs.warn, Lang.Msgs.list_can_not_space);
                this.value = list.getName();
                return;
            }
            that.changeListName(list, this.value);
        };
        nameField.onkeydown = function (e) {
            if (e.keyCode == 13) this.blur();
        };
        view.nameField = nameField;
        wrapper.appendChild(nameField);
        wrapper.appendChild(editButton);
        wrapper.appendChild(editSaveButton);
        wrapper.appendChild(removeButton);
        list.listElement = view;
    };

    /**
     * Apply map function to variables. But this not replace object with returned one.
     * So giving map function don't have to return object.
     * And this support another arguments.
     * @param {!function} mapFunction
     * @param {} param
     */
    p.mapVariable = function (mapFunction, param) {
        var length = this.variables_.length;
        for (var i = 0; i < length; i++) {
            var variable = this.variables_[i];
            mapFunction(variable, param);
        }
    };

    /**
     * @param {!function} mapFunction
     * @param {} param
     */
    p.mapList = function (mapFunction, param) {
        var length = this.lists_.length;
        for (var i = 0; i < length; i++) {
            var list = this.lists_[i];
            mapFunction(list, param);
        }
    };

    /**
     * convert this variable's data to JSON.
     * @return {JSON}
     */
    p.getVariableJSON = function () {
        var json = [];
        for (var i = 0; i < this.variables_.length; i++) {
            var variable = this.variables_[i];
            json.push(variable.toJSON());
        }
        for (var i = 0; i < this.lists_.length; i++) {
            var list = this.lists_[i];
            json.push(list.toJSON());
        }

        if (Entry.engine.projectTimer) json.push(Entry.engine.projectTimer.toJSON());

        var answer = Entry.container.inputValue;
        if (!Entry.isEmpty(answer)) json.push(answer.toJSON());
        return json;
    };

    /**
     * convert this message's data to JSON.
     * @return {JSON}
     */
    p.getMessageJSON = function () {
        var json = [];
        for (var i = 0; i < this.messages_.length; i++) {
            var message = {
                id: this.messages_[i].id,
                name: this.messages_[i].name
            };
            json.push(message);
        }
        return json;
    };

    /**
     * convert this function's data to JSON.
     * @return {JSON}
     */
    p.getFunctionJSON = function () {
        var json = [];
        for (var i in this.functions_) {
            var func = this.functions_[i];
            var funcJSON = {
                id: func.id,
                content: JSON.stringify(func.content.toJSON())
            };
            json.push(funcJSON);
        }
        return json;
    };

    p.resetVariableAddPanel = function (type) {
        type = type || 'variable';
        var panel = type == 'variable' ? this.variableAddPanel : this.listAddPanel;
        if (!panel.view) return;
        var info = panel.info;
        info.isCloud = false, info.object = null;
        panel.view.name.value = '';
        panel.isOpen = false;
        this.updateVariableAddView(type);
    };

    p.generateVariableAddView = function () {
        var that = this;
        var variableAddSpace = Entry.createElement('li');
        this.variableAddPanel.view = variableAddSpace;
        this.variableAddPanel.isOpen = false;
        variableAddSpace.addClass('entryVariableAddSpaceWorkspace entryRemove');

        var addSpaceNameWrapper = Entry.createElement('div');
        addSpaceNameWrapper.addClass('entryVariableAddSpaceNameWrapperWorkspace');
        variableAddSpace.appendChild(addSpaceNameWrapper);

        var addSpaceInput = Entry.createElement('input');
        addSpaceInput.addClass('entryVariableAddSpaceInputWorkspace');
        addSpaceInput.setAttribute('placeholder', Lang.Workspace.Variable_placeholder_name);
        addSpaceInput.variableContainer = this;
        addSpaceInput.onkeypress = function (e) {
            if (e.keyCode !== 13) return;
            if (this.enterKeyDisabled) this.blur();else that._addVariable();
        };

        addSpaceInput.onfocus = function (e) {
            this.blurred = false;
        };

        addSpaceInput.onblur = function (e) {
            if (this.value === '' || this.blurred) return;
            Entry.do('variableAddSetName', $('.entryVariableAddSpaceInputWorkspace').val());
            this.blurred = true;
        };

        this.variableAddPanel.view.name = addSpaceInput;
        addSpaceNameWrapper.appendChild(addSpaceInput);

        var addSpaceGlobalWrapper = Entry.createElement('div');
        addSpaceGlobalWrapper.addClass('entryVariableAddSpaceGlobalWrapperWorkspace');
        addSpaceGlobalWrapper.bindOnClick(function (e) {
            var info = that.variableAddPanel.info;
            info.object = null;
            that.updateVariableAddView('variable');
        });
        variableAddSpace.appendChild(addSpaceGlobalWrapper);

        var addVariableGlobalSpan = Entry.createElement('span');
        addVariableGlobalSpan.innerHTML = Lang.Workspace.Variable_use_all_objects;
        addSpaceGlobalWrapper.appendChild(addVariableGlobalSpan);

        var addVariableGlobalCheck = Entry.createElement('span');
        addVariableGlobalCheck.addClass('entryVariableAddSpaceCheckWorkspace');
        this.variableAddPanel.view.globalCheck = addVariableGlobalCheck;
        if (!this.variableAddPanel.info.object) addVariableGlobalCheck.addClass('entryVariableAddChecked');
        addSpaceGlobalWrapper.appendChild(addVariableGlobalCheck);

        var addSpaceLocalWrapper = Entry.createElement('div');
        addSpaceLocalWrapper.addClass('entryVariableAddSpaceLocalWrapperWorkspace');
        addSpaceLocalWrapper.bindOnClick(function (e) {
            if (!Entry.playground.object) return;
            var info = that.variableAddPanel.info;
            info.object = Entry.playground.object.id;
            info.isCloud = false;
            that.updateVariableAddView('variable');
        });
        variableAddSpace.appendChild(addSpaceLocalWrapper);
        var addVariableLocalSpan = Entry.createElement('span');
        addVariableLocalSpan.innerHTML = Lang.Workspace.Variable_use_this_object;
        addSpaceLocalWrapper.appendChild(addVariableLocalSpan);

        var addVariableLocalCheck = Entry.createElement('span');
        addVariableLocalCheck.addClass('entryVariableAddSpaceCheckWorkspace');
        this.variableAddPanel.view.localCheck = addVariableLocalCheck;
        if (this.variableAddPanel.info.object) addVariableLocalCheck.addClass('entryVariableAddChecked');
        addSpaceLocalWrapper.appendChild(addVariableLocalCheck);

        var addSpaceCloudWrapper = Entry.createElement('div');
        variableAddSpace.cloudWrapper = addSpaceCloudWrapper;
        addSpaceCloudWrapper.addClass('entryVariableAddSpaceCloudWrapperWorkspace');
        addSpaceCloudWrapper.bindOnClick(function (e) {
            var info = that.variableAddPanel.info;
            if (info.object) return;

            info.isCloud = !info.isCloud;
            that.updateVariableAddView('variable');
        });
        variableAddSpace.appendChild(addSpaceCloudWrapper);
        var addSpaceCloudSpan = Entry.createElement('span');
        addSpaceCloudSpan.addClass('entryVariableAddSpaceCloudSpanWorkspace');
        addSpaceCloudSpan.innerHTML = Lang.Workspace.Variable_create_cloud;
        addSpaceCloudWrapper.appendChild(addSpaceCloudSpan);
        var addVariableCloudCheck = Entry.createElement('span');
        this.variableAddPanel.view.cloudCheck = addVariableCloudCheck;
        addVariableCloudCheck.addClass('entryVariableAddSpaceCheckWorkspace entryVariableAddSpaceCloudCheckWorkspace');
        if (this.variableAddPanel.info.isCloud) addVariableCloudCheck.addClass('entryVariableAddChecked');

        addSpaceCloudWrapper.appendChild(addVariableCloudCheck);

        var addSpaceButtonWrapper = Entry.createElement('div');
        addSpaceButtonWrapper.addClass('entryVariableAddSpaceButtonWrapperWorkspace');
        variableAddSpace.appendChild(addSpaceButtonWrapper);

        var addSpaceCancelButton = Entry.createElement('span');
        addSpaceCancelButton.addClass('entryVariableAddSpaceCancelWorkspace entryVariableAddSpaceButtonWorkspace');
        addSpaceCancelButton.innerHTML = Lang.Buttons.cancel;
        addSpaceCancelButton.bindOnClick(function (e) {
            that.variableAddPanel.view.addClass('entryRemove');
            that.resetVariableAddPanel('variable');
        });
        addSpaceButtonWrapper.appendChild(addSpaceCancelButton);

        var addSpaceConfirmButton = Entry.createElement('span');
        addSpaceConfirmButton.addClass('entryVariableAddSpaceConfirmWorkspace entryVariableAddSpaceButtonWorkspace');
        addSpaceConfirmButton.innerHTML = Lang.Buttons.save;
        addSpaceConfirmButton.variableContainer = this;
        addSpaceConfirmButton.bindOnClick(function (e) {
            that._addVariable();
        });
        addSpaceButtonWrapper.appendChild(addSpaceConfirmButton);
        this.variableAddConfirmButton = addSpaceConfirmButton;
    };

    p._addVariable = function () {
        $('.entryVariableAddSpaceInputWorkspace').blur();
        var variable = this._makeVariableData();
        variable = new Entry.Variable(variable);
        Entry.do('variableContainerAddVariable', variable);
        this.updateSelectedVariable(this.variables_[0]);
        var view = this.variables_[0].listElement;
        view.editButton.addClass('entryRemove');
        view.editSaveButton.removeClass('entryRemove');
        view.nameField.removeAttribute('disabled');
    };

    p.generateListAddView = function () {
        var that = this;
        var listAddSpace = Entry.createElement('li');
        this.listAddPanel.view = listAddSpace;
        this.listAddPanel.isOpen = false;
        listAddSpace.addClass('entryVariableAddSpaceWorkspace entryRemove');

        var addSpaceNameWrapper = Entry.createElement('div');
        addSpaceNameWrapper.addClass('entryVariableAddSpaceNameWrapperWorkspace entryListAddSpaceNameWrapperWorkspace');
        listAddSpace.appendChild(addSpaceNameWrapper);

        var addSpaceInput = Entry.createElement('input');
        addSpaceInput.addClass('entryVariableAddSpaceInputWorkspace');
        addSpaceInput.setAttribute('placeholder', Lang.Workspace.list_name);
        this.listAddPanel.view.name = addSpaceInput;
        addSpaceInput.variableContainer = this;
        addSpaceInput.onkeypress = function (e) {
            if (e.keyCode == 13) {
                that.addList();
                var list = that.lists_[0];
                that.updateSelectedVariable(list);
                var view = list.listElement;
                view.editButton.addClass('entryRemove');
                view.editSaveButton.removeClass('entryRemove');
                view.nameField.removeAttribute('disabled');
            }
        };
        addSpaceNameWrapper.appendChild(addSpaceInput);

        var addSpaceGlobalWrapper = Entry.createElement('div');
        addSpaceGlobalWrapper.addClass('entryVariableAddSpaceGlobalWrapperWorkspace');
        addSpaceGlobalWrapper.bindOnClick(function (e) {
            var info = that.listAddPanel.info;
            info.object = null;
            that.updateVariableAddView('list');
        });
        listAddSpace.appendChild(addSpaceGlobalWrapper);

        var addListGlobalSpan = Entry.createElement('span');
        addListGlobalSpan.innerHTML = Lang.Workspace.use_all_objects;
        addSpaceGlobalWrapper.appendChild(addListGlobalSpan);

        var addListGlobalCheck = Entry.createElement('span');
        addListGlobalCheck.addClass('entryVariableAddSpaceCheckWorkspace');
        this.listAddPanel.view.globalCheck = addListGlobalCheck;
        if (!this.listAddPanel.info.object) addListGlobalCheck.addClass('entryVariableAddChecked');
        addSpaceGlobalWrapper.appendChild(addListGlobalCheck);

        var addSpaceLocalWrapper = Entry.createElement('div');
        addSpaceLocalWrapper.addClass('entryVariableAddSpaceLocalWrapperWorkspace');
        addSpaceLocalWrapper.bindOnClick(function (e) {
            if (!Entry.playground.object) return;
            var info = that.listAddPanel.info;
            info.object = Entry.playground.object.id;
            info.isCloud = false;
            that.updateVariableAddView('list');
        });
        listAddSpace.appendChild(addSpaceLocalWrapper);
        var addListLocalSpan = Entry.createElement('span');
        addListLocalSpan.innerHTML = Lang.Workspace.Variable_use_this_object;
        addSpaceLocalWrapper.appendChild(addListLocalSpan);

        var addListLocalCheck = Entry.createElement('span');
        addListLocalCheck.addClass('entryVariableAddSpaceCheckWorkspace');
        this.listAddPanel.view.localCheck = addListLocalCheck;
        if (this.variableAddPanel.info.object) addListLocalCheck.addClass('entryVariableAddChecked');
        addSpaceLocalWrapper.appendChild(addListLocalCheck);

        var addSpaceCloudWrapper = Entry.createElement('div');
        listAddSpace.cloudWrapper = addSpaceCloudWrapper;
        addSpaceCloudWrapper.addClass('entryVariableAddSpaceCloudWrapperWorkspace');
        addSpaceCloudWrapper.bindOnClick(function (e) {
            var info = that.listAddPanel.info;
            if (info.object) return;

            info.isCloud = !info.isCloud;
            that.updateVariableAddView('list');
        });
        listAddSpace.appendChild(addSpaceCloudWrapper);
        var addSpaceCloudSpan = Entry.createElement('span');
        addSpaceCloudSpan.addClass('entryVariableAddSpaceCloudSpanWorkspace');
        addSpaceCloudSpan.innerHTML = Lang.Workspace.List_create_cloud;

        addSpaceCloudWrapper.appendChild(addSpaceCloudSpan);
        var addListCloudCheck = Entry.createElement('span');
        this.listAddPanel.view.cloudCheck = addListCloudCheck;
        addListCloudCheck.addClass('entryVariableAddSpaceCheckWorkspace entryVariableAddSpaceCloudCheckWorkspace');
        if (this.listAddPanel.info.isCloud) addListCloudCheck.addClass('entryVariableAddChecked');

        addSpaceCloudWrapper.appendChild(addListCloudCheck);

        var addSpaceButtonWrapper = Entry.createElement('div');
        addSpaceButtonWrapper.addClass('entryVariableAddSpaceButtonWrapperWorkspace');
        listAddSpace.appendChild(addSpaceButtonWrapper);

        var addSpaceCancelButton = Entry.createElement('span');
        addSpaceCancelButton.addClass('entryVariableAddSpaceCancelWorkspace entryVariableAddSpaceButtonWorkspace');
        addSpaceCancelButton.innerHTML = Lang.Buttons.cancel;
        addSpaceCancelButton.bindOnClick(function (e) {
            that.listAddPanel.view.addClass('entryRemove');
            that.resetVariableAddPanel('list');
        });
        addSpaceButtonWrapper.appendChild(addSpaceCancelButton);

        var addSpaceConfirmButton = Entry.createElement('span');
        addSpaceConfirmButton.addClass('entryVariableAddSpaceConfirmWorkspace entryVariableAddSpaceButtonWorkspace');
        addSpaceConfirmButton.innerHTML = Lang.Buttons.save;
        addSpaceConfirmButton.variableContainer = this;
        addSpaceConfirmButton.bindOnClick(function (e) {
            that.addList();
            var list = that.lists_[0];
            that.updateSelectedVariable(list);
            var view = list.listElement;
            view.editButton.addClass('entryRemove');
            view.editSaveButton.removeClass('entryRemove');
            view.nameField.removeAttribute('disabled');
        });
        addSpaceButtonWrapper.appendChild(addSpaceConfirmButton);
    };

    p.generateVariableSplitterView = function () {
        var topSplitter = Entry.createElement('li');
        topSplitter.addClass('entryVariableSplitterWorkspace');
        var bottomSplitter = Entry.createElement('li');
        bottomSplitter.addClass('entryVariableSplitterWorkspace');

        this.variableSplitters = {
            top: topSplitter,
            bottom: bottomSplitter
        };
    };

    p.openVariableAddPanel = function (type) {
        type = type ? type : 'variable';
        Entry.playground.toggleOnVariableView();
        Entry.playground.changeViewMode('variable');
        if (type == 'variable') {
            this.variableAddPanel.isOpen = true;
            this.selectFilter(type);
        } else {
            this.listAddPanel.isOpen = true;
            this.selectFilter(type);
        }
        this.updateVariableAddView(type);
    };

    p.getMenuXml = function (xmlList) {
        var blocks = [];
        var hasVariable = this.variables_.length !== 0;
        var hasList = this.lists_.length !== 0;
        var category;
        for (var i = 0, xml; xml = xmlList[i]; i++) {
            var tagName = xml.tagName;
            if (tagName && tagName.toUpperCase() == 'BLOCK') {
                category = xml.getAttribute('bCategory');
                if (!hasVariable && category == 'variable') continue;
                if (!hasList && category == 'list') continue;
                blocks.push(xml);
            } else if (tagName && (tagName.toUpperCase() == 'SPLITTER' || tagName.toUpperCase() == 'BTN')) {
                if (!hasVariable && category == 'variable') continue;
                if (!hasList && category == 'list') continue;
                blocks.push(xml);
            }
        }
        return blocks;
    };

    p.addCloneLocalVariables = function (param) {
        var that = this;

        //variables
        var variables = [];
        var VARIABLE = 'variables_';
        this.mapVariable(function (variable, param) {
            var cloned = clone(variable, param, VARIABLE);
            cloned && variables.push(cloned);
        }, param);

        //lists
        var lists = [];
        var LISTS = 'lists_';
        this.mapList(function (variable, param) {
            var cloned = clone(variable, param, LISTS);
            cloned && lists.push(cloned);
        }, param);

        variables.map(this.addVariable.bind(this));
        lists.map(this.addList.bind(this));

        function clone(variable, param, nameSpace) {
            //not a local variable
            var _object = variable.object_;
            if (!_object || _object !== param.objectId) return;

            var cloned = variable.toJSON();
            cloned.originId = cloned.id;
            cloned.id = Entry.generateHash();
            cloned.object = param.newObjectId;
            cloned.name = that.checkAllVariableName(cloned.name, nameSpace) ? Entry.getOrderedName(cloned.name, that[nameSpace], 'name_') : cloned.name;
            delete cloned.x;
            delete cloned.y;

            var json = param.json;
            json.script = json.script.replace(new RegExp(cloned.originId, 'g'), cloned.id);
            return cloned;
        }
    };

    p.generateTimer = function (timer) {
        if (!timer) {
            timer = {};
            timer.id = Entry.generateHash();
            timer.name = Lang.Workspace.Variable_Timer;
            timer.value = 0;
            timer.variableType = 'timer';
            timer.visible = false;
            timer.x = 150;
            timer.y = -70;
            timer = new Entry.Variable(timer);
        }

        timer.generateView();
        timer.tick = null;
        Entry.engine.projectTimer = timer;

        Entry.addEventListener('stop', function () {
            Entry.engine.stopProjectTimer();
        }.bind(this));
    };

    //generate Answer
    p.generateAnswer = function (answer) {
        if (!answer) {
            answer = new Entry.Variable({
                id: Entry.generateHash(),
                name: Lang.Blocks.VARIABLE_get_canvas_input_value,
                value: 0,
                variableType: 'answer',
                visible: false,
                x: 150,
                y: -100
            });
        }

        answer.generateView();
        Entry.container.inputValue = answer;
    };

    p.generateVariableSettingView = function () {
        var that = this;
        var element = Entry.createElement('div');
        element.bindOnClick(function (e) {
            e.stopPropagation();
        });
        this.variableSettingView = element;
        element.addClass('entryVariableSettingWorkspace');
        this.listView_.appendChild(element);
        element.addClass('entryRemove');

        var visibleWrapper = Entry.createElement('div');
        visibleWrapper.addClass('entryVariableSettingVisibleWrapperWorkspace');
        visibleWrapper.bindOnClick(function (e) {
            var v = that.selectedVariable;
            var view = that.variableSettingView.visibleCheck;
            v.setVisible(!v.isVisible());

            if (v.isVisible()) view.addClass('entryVariableSettingChecked');else view.removeClass('entryVariableSettingChecked');
        });
        element.appendChild(visibleWrapper);
        var visibleSpan = Entry.createElement('span');
        visibleSpan.innerHTML = Lang.Workspace.show_variable;
        visibleWrapper.appendChild(visibleSpan);
        var visibleCheck = Entry.createElement('span');
        visibleCheck.addClass('entryVariableSettingCheckWorkspace');
        element.visibleCheck = visibleCheck;
        visibleWrapper.appendChild(visibleCheck);

        var initValueWrapper = Entry.createElement('div');
        initValueWrapper.addClass('entryVariableSettingInitValueWrapperWorkspace');
        element.appendChild(initValueWrapper);
        var initValueSpan = Entry.createElement('span');
        initValueSpan.innerHTML = Lang.Workspace.default_value;
        initValueWrapper.appendChild(initValueSpan);
        var initValueInput = Entry.createElement('input');
        initValueInput.addClass('entryVariableSettingInitValueInputWorkspace');
        element.initValueInput = initValueInput;
        initValueInput.value = 0;
        initValueInput.onkeyup = function (e) {
            var v = that.selectedVariable;
            var value = this.value;
            v.setValue(this.value);
        };
        initValueInput.onblur = function (e) {
            var v = that.selectedVariable;
            var value = this.value;
            v.setValue(this.value);
        };
        element.initValueInput = initValueInput;
        initValueWrapper.appendChild(initValueInput);

        var splitter = Entry.createElement('div');
        splitter.addClass('entryVariableSettingSplitterWorkspace');
        element.appendChild(splitter);

        var slideWrapper = Entry.createElement('div');
        slideWrapper.addClass('entryVariableSettingSlideWrapperWorkspace');
        element.appendChild(slideWrapper);
        var slideSpan = Entry.createElement('span');
        slideSpan.innerHTML = Lang.Workspace.slide;
        slideWrapper.appendChild(slideSpan);
        var slideCheck = Entry.createElement('span');
        slideCheck.addClass('entryVariableSettingCheckWorkspace');
        element.slideCheck = slideCheck;
        slideWrapper.appendChild(slideCheck);
        slideWrapper.bindOnClick(function (e) {
            var newVariable;
            var v = that.selectedVariable;
            var variables = that.variables_;
            var type = v.getType();
            if (type == 'variable') {
                var variableJSON = v.toJSON();
                variableJSON.variableType = 'slide';
                newVariable = new Entry.Variable(variableJSON);
                variables.splice(variables.indexOf(v), 0, newVariable);
                if (newVariable.getValue() < 0) newVariable.setValue(0);
                if (newVariable.getValue() > 100) newVariable.setValue(100);
                minValueInput.removeAttribute('disabled');
                maxValueInput.removeAttribute('disabled');
            } else if (type == 'slide') {
                var variableJSON = v.toJSON();
                variableJSON.variableType = 'variable';
                newVariable = new Entry.Variable(variableJSON);
                variables.splice(variables.indexOf(v), 0, newVariable);
                minValueInput.setAttribute('disabled', 'disabled');
                maxValueInput.setAttribute('disabled', 'disabled');
            }
            that.createVariableView(newVariable);

            that.removeVariable(v);
            that.updateSelectedVariable(newVariable);
            newVariable.generateView();
        });

        var minMaxWrapper = Entry.createElement('div');
        element.minMaxWrapper = minMaxWrapper;
        minMaxWrapper.addClass('entryVariableSettingMinMaxWrapperWorkspace');
        element.appendChild(minMaxWrapper);
        var minValueSpan = Entry.createElement('span');
        minValueSpan.innerHTML = Lang.Workspace.min_value;
        minMaxWrapper.appendChild(minValueSpan);
        var minValueInput = Entry.createElement('input');
        minValueInput.addClass('entryVariableSettingMinValueInputWorkspace');
        var v = that.selectedVariable;
        if (v && v.type == 'slide') minValueInput.value = v.minValue_;else minValueInput.value = 0;
        minValueInput.onkeypress = function (e) {
            e.keyCode === 13 && this.blur();
        };
        minValueInput.onblur = function (e) {
            if (Entry.Utils.isNumber(this.value)) {
                var v = that.selectedVariable;
                v.setMinValue(this.value);
                that.updateVariableSettingView(v);
            }
        };
        element.minValueInput = minValueInput;
        minMaxWrapper.appendChild(minValueInput);

        var maxValueSpan = Entry.createElement('span');
        maxValueSpan.addClass('entryVariableSettingMaxValueSpanWorkspace');
        maxValueSpan.innerHTML = Lang.Workspace.max_value;
        minMaxWrapper.appendChild(maxValueSpan);
        var maxValueInput = Entry.createElement('input');
        maxValueInput.addClass('entryVariableSettingMaxValueInputWorkspace');
        if (v && v.type == 'slide') maxValueInput.value = v.maxValue_;else maxValueInput.value = 100;
        maxValueInput.onkeypress = function (e) {
            e.keyCode === 13 && this.blur();
        };
        maxValueInput.onblur = function (e) {
            if (Entry.Utils.isNumber(this.value)) {
                var v = that.selectedVariable;
                v.setMaxValue(this.value);
                that.updateVariableSettingView(v);
            }
        };
        element.maxValueInput = maxValueInput;
        minMaxWrapper.appendChild(maxValueInput);
    };

    /**
     * @param {object|Entry.Variable} object
     */
    p.updateVariableSettingView = function (v) {
        var view = this.variableSettingView,
            visibleCheck = view.visibleCheck,
            initValue = view.initValueInput,
            slide = view.slideCheck,
            minValue = view.minValueInput,
            maxValue = view.maxValueInput,
            minMaxWrapper = view.minMaxWrapper;

        visibleCheck.removeClass('entryVariableSettingChecked');
        if (v.isVisible()) visibleCheck.addClass('entryVariableSettingChecked');

        slide.removeClass('entryVariableSettingChecked');
        if (v.getType() == 'slide') {
            slide.addClass('entryVariableSettingChecked');
            minValue.removeAttribute('disabled');
            maxValue.removeAttribute('disabled');
            minValue.value = v.getMinValue();
            maxValue.value = v.getMaxValue();
            minMaxWrapper.removeClass('entryVariableMinMaxDisabledWorkspace');
        } else {
            minMaxWrapper.addClass('entryVariableMinMaxDisabledWorkspace');
            minValue.setAttribute('disabled', 'disabled');
            maxValue.setAttribute('disabled', 'disabled');
        }

        initValue.value = v.getValue();
        v.listElement.appendChild(view);

        view.removeClass('entryRemove');
    };

    p.generateListSettingView = function () {
        var that = this;
        var element = Entry.createElement('div');
        element.bindOnClick(function (e) {
            e.stopPropagation();
        });
        this.listSettingView = element;
        element.addClass('entryListSettingWorkspace');
        this.listView_.appendChild(element);
        element.addClass('entryRemove');

        var visibleWrapper = Entry.createElement('div');
        visibleWrapper.addClass('entryListSettingVisibleWrapperWorkspace');
        visibleWrapper.bindOnClick(function (e) {
            var v = that.selectedList;
            var view = that.listSettingView.visibleCheck;
            v.setVisible(!v.isVisible());

            if (v.isVisible()) view.addClass('entryListSettingCheckedWorkspace');else view.removeClass('entryListSettingCheckedWorkspace');
        });
        element.appendChild(visibleWrapper);
        var visibleSpan = Entry.createElement('span');
        visibleSpan.innerHTML = Lang.Workspace.show_list_workspace;
        visibleWrapper.appendChild(visibleSpan);
        var visibleCheck = Entry.createElement('span');
        visibleCheck.addClass('entryListSettingCheckWorkspace');
        element.visibleCheck = visibleCheck;
        visibleWrapper.appendChild(visibleCheck);

        var lengthWrapper = Entry.createElement('div');
        lengthWrapper.addClass('entryListSettingLengthWrapperWorkspace');
        var lengthSpan = Entry.createElement('span');
        lengthSpan.addClass('entryListSettingLengthSpanWorkspace');
        lengthSpan.innerHTML = Lang.Workspace.number_of_list;
        lengthWrapper.appendChild(lengthSpan);
        element.appendChild(lengthWrapper);
        var lengthController = Entry.createElement('div');
        lengthController.addClass('entryListSettingLengthControllerWorkspace');
        lengthWrapper.appendChild(lengthController);
        var minus = Entry.createElement('span');
        minus.addClass('entryListSettingMinusWorkspace');
        minus.bindOnClick(function (e) {
            var v = that.selectedList;
            var arr = that.selectedList.array_;
            arr.pop();
            that.updateListSettingView(that.selectedList);
        });
        lengthController.appendChild(minus);
        var lengthInput = Entry.createElement('input');
        lengthInput.addClass('entryListSettingLengthInputWorkspace');
        lengthInput.onblur = function () {
            that.setListLength(this.value);
        };

        lengthInput.onkeypress = function (e) {
            if (e.keyCode == 13) this.blur();
        };
        element.lengthInput = lengthInput;
        lengthController.appendChild(lengthInput);
        var plus = Entry.createElement('span');
        plus.addClass('entryListSettingPlusWorkspace');
        plus.bindOnClick(function (e) {
            var v = that.selectedList;
            var arr = that.selectedList.array_;
            arr.push({ data: 0 });
            that.updateListSettingView(that.selectedList);
        });
        lengthController.appendChild(plus);
        var seperator = Entry.createElement('div');
        element.seperator = seperator;
        element.appendChild(seperator);
        seperator.addClass('entryListSettingSeperatorWorkspace');

        var listValues = Entry.createElement('div');
        listValues.addClass('entryListSettingListValuesWorkspace');
        element.listValues = listValues;
        element.appendChild(listValues);
    };

    p.updateListSettingView = function (list) {
        var that = this;
        list = list || this.selectedList;
        var view = this.listSettingView,
            listValues = view.listValues,
            visibleCheck = view.visibleCheck,
            lengthInput = view.lengthInput,
            seperator = view.seperator;

        visibleCheck.removeClass('entryListSettingCheckedWorkspace');
        if (list.isVisible()) visibleCheck.addClass('entryListSettingCheckedWorkspace');

        lengthInput.value = list.array_.length;
        list.listElement.appendChild(view);

        while (listValues.firstChild) {
            listValues.removeChild(listValues.firstChild);
        }var arr = list.array_;
        if (arr.length === 0) seperator.addClass('entryRemove');else seperator.removeClass('entryRemove');

        var startIndex = 1;
        if (Entry.playground.mainWorkspace.mode === Entry.Workspace.MODE_VIMBOARD) startIndex = 0;

        for (var i = 0; i < arr.length; i++) {
            (function (i) {
                var wrapper = Entry.createElement('div');
                wrapper.addClass('entryListSettingValueWrapperWorkspace');
                var numberSpan = Entry.createElement('span');
                numberSpan.addClass('entryListSettingValueNumberSpanWorkspace');
                numberSpan.innerHTML = i + startIndex;
                wrapper.appendChild(numberSpan);
                var input = Entry.createElement('input');
                input.value = arr[i].data;
                input.onblur = function () {
                    arr[i].data = this.value;
                    list.updateView();
                };
                input.onkeypress = function (e) {
                    if (e.keyCode == 13) this.blur();
                };
                input.addClass('entryListSettingEachInputWorkspace');
                wrapper.appendChild(input);
                var removeButton = Entry.createElement('span');
                removeButton.bindOnClick(function () {
                    arr.splice(i, 1);
                    that.updateListSettingView();
                });
                removeButton.addClass('entryListSettingValueRemoveWorkspace');
                wrapper.appendChild(removeButton);
                listValues.appendChild(wrapper);
            })(i);
        }

        list.updateView();
        view.removeClass('entryRemove');
    };

    p.setListLength = function (value) {
        value = Number(value);
        var arr = this.selectedList.array_;
        if (Entry.Utils.isNumber(value)) {
            var arrLen = arr.length;
            if (arrLen < value) {
                var len = value - arrLen;
                for (var i = 0; i < len; i++) {
                    arr.push({ data: 0 });
                }
            } else if (arrLen > value) {
                arr.length = value;
            }
        }
        this.updateListSettingView();
    };

    p.updateViews = function () {
        var variables = this.variables_,
            lists = this.lists_;

        variables.map(function (v) {
            v.updateView();
        });

        lists.map(function (l) {
            l.updateView();
        });
    };

    p.updateSelectedVariable = function (object, type) {
        if (!object) {
            type = type || 'variable';
            this.selectedVariable = null;
            if (type == 'variable') this.variableSettingView.addClass('entryRemove');else this.listSettingView.addClass('entryRemove');
        } else if (object.type == 'variable') {
            this.selectedVariable = object;
            this.updateVariableSettingView(object);
        } else if (object.type == 'slide') {
            this.selectedVariable = object;
            this.updateVariableSettingView(object);
        } else if (object.type == 'list') {
            this.selectedList = object;
            this.updateListSettingView(object);
        }
    };

    p.removeLocalVariables = function (objectId) {
        var variables = [];
        var that = this;
        this.mapVariable(function (variable, objectId) {
            if (variable.object_ && variable.object_ == objectId) variables.push(variable);
        }, objectId);

        variables.map(function (variable) {
            that.removeVariable(variable);
        });
    };

    p.updateCloudVariables = function () {
        var projectId = Entry.projectId;
        if (!Entry.cloudSavable || !projectId) return;

        var that = Entry.variableContainer;
        var cloudVariables = that.variables_.filter(function (v) {
            return v.isCloud_;
        });
        cloudVariables = cloudVariables.map(function (v) {
            return v.toJSON();
        });

        var cloudLists = that.lists_.filter(function (v) {
            return v.isCloud_;
        });
        cloudLists = cloudLists.map(function (v) {
            return v.toJSON();
        });

        if (!cloudVariables.length && !cloudLists.length) return;

        $.ajax({
            url: '/api/project/variable/' + Entry.projectId,
            type: 'PUT',
            data: {
                variables: cloudVariables,
                lists: cloudLists
            }
        }).done(function () {});
    };

    p.addRef = function (type, blockData) {
        if (!this.view_ || !Entry.playground.mainWorkspace || Entry.getMainWS().getMode() !== Entry.Workspace.MODE_BOARD) return;

        var datum = {
            object: blockData.getCode().object,
            block: blockData
        };

        if (blockData.funcBlock) {
            datum.funcBlock = blockData.funcBlock;
            delete blockData.funcBlock;
        }

        this[type].push(datum);

        if (type == '_functionRefs') {
            var id = blockData.type.substr(5);
            var func = Entry.variableContainer.functions_[id];
            if (func.isAdded) return;
            func.isAdded = true;
            var blocks = func.content.getBlockList();

            for (var i = 0; i < blocks.length; i++) {
                var block = blocks[i];
                var events = block.events;

                if (block.type.indexOf('func_') > -1) {
                    var funcId = block.type.substr(5);
                    if (funcId == id) continue;
                }

                if (events && events.viewAdd) {
                    events.viewAdd.forEach(function (fn) {
                        block.getCode().object = datum.object;
                        if (fn) {
                            block.funcBlock = datum.block;
                            fn(block);
                        }
                    });
                }

                if (events && events.dataAdd) {
                    events.dataAdd.forEach(function (fn) {
                        block.getCode().object = datum.object;
                        if (fn) {
                            block.funcBlock = datum.block;
                            fn(block);
                        }
                    });
                }
            }
        }

        return datum;
    };

    // p.getObjectVariables = function (object) {
    //     var blockList = object.script.getBlockList();

    //     var a = this.getFunctionJSONByBlockList(blockList);

    //     return a;
    // }

    p.getObjectVariables = function (blockList, keys) {
        var findFuncKeys = keys || {};
        var functions = [];
        var jsonData = this.getVariableJSONByBlockList(blockList);
        var variables = jsonData.variables;
        var messages = jsonData.messages;

        blockList.forEach(function (block) {
            var type = block.type;
            if (type && type.indexOf('func_') === 0) {
                var id = type.substr(5);
                if (!findFuncKeys[id]) {
                    var func = this.functions_[id];
                    findFuncKeys[id] = true;
                    functions.push({
                        id: id,
                        content: JSON.stringify(func.content.toJSON())
                    });

                    blockList = func.content.getBlockList();
                    var jsonData = this.getObjectVariables(blockList, findFuncKeys);
                    functions = functions.concat(jsonData.functions);
                    variables = variables.concat(jsonData.variables);
                    messages = messages.concat(jsonData.messages);
                }
            }
        }.bind(this));

        return {
            functions: functions,
            variables: variables,
            messages: messages
        };
    };

    p.getVariableJSONByBlockList = function (blockList) {
        var variableSet = {};
        var variables = [];
        var messages = [];

        this.variables_.forEach(function (variable) {
            variableSet[variable.id_] = variable;
        });

        this.lists_.forEach(function (list) {
            variableSet[list.id_] = list;
        });

        this.messages_.forEach(function (message) {
            variableSet[message.id] = message;
        });

        blockList.forEach(function (block) {
            var data = block.data || {};
            var type = data.type;
            var isMessage;
            var isVariable;
            if (type) {
                isMessage = EntryStatic.messageBlockList.indexOf(type) > -1;
                isVariable = EntryStatic.variableBlockList.indexOf(type) > -1;
            }

            if (type && (isMessage || isVariable)) {
                block.data.params.forEach(function (param) {
                    if (typeof param === 'string' && !!variableSet[param]) {
                        var item = variableSet[param];
                        if (isVariable) {
                            variables.push(item.toJSON());
                        } else {
                            messages.push({
                                id: item.id,
                                name: item.name
                            });
                        }
                        variableSet[param] = undefined;
                    }
                });
            }
        });

        return {
            variables: variables,
            messages: messages
        };
    };

    p.removeRef = function (type, block) {
        if (!Entry.playground.mainWorkspace) return;
        var wsMode = Entry.getMainWS().getMode();
        if (wsMode !== Entry.Workspace.MODE_BOARD) return;

        var arr = this[type];

        for (var i = 0; i < arr.length; i++) {
            var current = arr[i];
            if (current.block == block) {
                arr.splice(i, 1);
                break;
            }
        }

        if (type == '_functionRefs') {
            var id = block.type.substr(5);
            var func = Entry.variableContainer.functions_[id];
            if (!func || func.isRemoved) return;
            func.isRemoved = true;
            if (func) {
                var blocks = func.content.getBlockList();
                for (var i = 0; i < blocks.length; i++) {
                    var block = blocks[i];
                    var events = block.events;
                    if (block.type.indexOf('func_') > -1) {
                        var funcId = block.type.substr(5);
                        if (funcId == id) continue;
                    }

                    if (events && events.viewDestroy) {
                        events.viewDestroy.forEach(function (fn) {
                            if (fn) fn(block);
                        });
                    }

                    if (events && events.dataDestroy) {
                        events.dataDestroy.forEach(function (fn) {
                            if (fn) fn(block);
                        });
                    }
                }
            }
        }
    };

    p._getBlockMenu = function () {
        return Entry.playground.mainWorkspace.getBlockMenu();
    };

    p._truncName = function (name, type) {
        name = name.substring(0, this._maxNameLength);
        var title, content;

        title = Lang.Workspace[type + '_name_auto_edited_title'];
        content = Lang.Workspace[type + '_name_auto_edited_content'];

        Entry.toast.warning(title, content);

        return name;
    };

    p._maxNameLength = 10;

    p.clear = function () {
        this.variables_.map(function (v) {
            v.remove();
        });
        this.variables_ = [];

        this.lists_.map(function (v) {
            v.remove();
        });
        this.lists_ = [];

        Entry.engine && Entry.engine.projectTimer && Entry.engine.projectTimer.remove();

        if (Entry.container && Entry.container.inputValue) {
            Entry.container.inputValue.remove && Entry.container.inputValue.remove();
        }

        this.messages_ = [];

        for (var key in this.functions_) {
            var func = this.functions_[key];
            func.destroy();
            delete this.functions_[key];
        }

        Entry.playground.reloadPlayground();
        this.updateList();
    };

    p._isPythonMode = function () {
        var ws = Entry.getMainWS();
        return ws && ws.isVimMode();
    };

    p.getDom = function (query) {
        if (query.length >= 1) {
            switch (query.shift()) {
                case 'filter':
                    return this.filterElements[query.shift()];
                case 'variableAddButton':
                    return this.variableAddButton_;
                case 'variableAddConfirmButton':
                    return this.variableAddConfirmButton;
                case 'variableAddInput':
                    return this.variableAddPanel.view.name;
            }
        } else {}
    };

    p.clickVariableAddButton = function (forceOpen, doNotFocus) {
        var panel = this.variableAddPanel;
        var value = panel.view.name.value.trim();
        if (panel.isOpen && !forceOpen) {
            if (!value || value.length === 0) {
                panel.view.addClass('entryRemove');
                panel.isOpen = false;
            } else {
                var variable = this._makeVariableData();
                variable = new Entry.Variable(variable);
                Entry.do('variableContainerAddVariable', variable);
            }
        } else {
            panel.view.removeClass('entryRemove');
            if (document.activeElement !== panel.view.name && !doNotFocus) panel.view.name.focus();
            panel.isOpen = true;
        }
    };

    p._makeVariableData = function () {
        var panel = this.variableAddPanel;
        var name = panel.view.name.value.trim();
        if (!name || name.length === 0) name = Lang.Workspace.variable;

        if (name.length > this._maxNameLength) name = this._truncName(name, 'variable');

        name = this.checkAllVariableName(name, 'variables_') ? Entry.getOrderedName(name, this.variables_, 'name_') : name;

        var info = panel.info;
        return {
            name: name,
            isCloud: info.isCloud,
            object: info.object,
            variableType: 'variable'
        };
    };

    p.applyOption = function () {
        process(this._filterTabs.variable, Entry.variableEnable);
        process(this._filterTabs.message, Entry.messageEnable);
        process(this._filterTabs.list, Entry.listEnable);
        process(this._filterTabs.func, Entry.functionEnable);

        function process(view, value) {
            if (value) {
                view.removeClass('disable');
                view.disabled = false;
            } else {
                view.addClass('disable');
                view.disabled = true;
            }
        }
    };
})(Entry.VariableContainer.prototype);

/***/ }),

/***/ "./src/command/command.js":
/*!********************************!*\
  !*** ./src/command/command.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


Entry.Command = {};

(function (c) {
    c[Entry.STATIC.COMMAND_TYPES.do] = {
        recordable: Entry.STATIC.RECORDABLE.SKIP,
        log: function log(objectId) {
            return [];
        },
        skipUndoStack: true
    };

    c[Entry.STATIC.COMMAND_TYPES.undo] = {
        recordable: Entry.STATIC.RECORDABLE.SKIP,
        log: function log(objectId) {
            return [];
        },
        skipUndoStack: true
    };

    c[Entry.STATIC.COMMAND_TYPES.redo] = {
        recordable: Entry.STATIC.RECORDABLE.SKIP,
        log: function log(objectId) {
            return [];
        },
        skipUndoStack: true
    };
})(Entry.Command);

/***/ }),

/***/ "./src/command/commander.js":
/*!**********************************!*\
  !*** ./src/command/commander.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


Entry.Commander = function (injectType) {
    if (injectType == 'workspace' || injectType == 'phone') {
        /**
         * Initialize stateManager for redo and undo.
         * @type {!Entry.StateManager}
         * @type {!object}
         */
        Entry.stateManager = new Entry.StateManager();
    }
    Entry.do = this.do.bind(this);

    Entry.undo = this.undo.bind(this);

    this.editor = {};

    this.reporters = [];

    this._tempStorage = null;

    Entry.Command.editor = this.editor;

    this.doEvent = new Entry.Event(this);
    this.logEvent = new Entry.Event(this);

    this.doCommandAll = Entry.doCommandAll;
};

(function (p) {
    p.do = function (commandType) {
        if (typeof commandType === 'string') commandType = Entry.STATIC.COMMAND_TYPES[commandType];
        var that = this;
        var argumentArray = Array.prototype.slice.call(arguments);
        argumentArray.shift();

        //intentionally delay reporting
        that.report(Entry.STATIC.COMMAND_TYPES.do);
        that.report(commandType, argumentArray);

        var command = Entry.Command[commandType];
        //console.log('commandType', commandType);
        var state;
        var isSkip = command.skipUndoStack === true || !this.doCommandAll && commandType > 500;

        if (Entry.stateManager && !isSkip) {
            state = Entry.stateManager.addCommand.apply(Entry.stateManager, [commandType, this, this.do, command.undo].concat(command.state.apply(this, argumentArray)));
        }
        var value = Entry.Command[commandType].do.apply(this, argumentArray);
        this.doEvent.notify(commandType, argumentArray);
        var id = state ? state.id : null;

        return {
            value: value,
            isPass: function (isPass, skipCount) {
                this.isPassById(id, isPass, skipCount);
            }.bind(this)
        };
    };

    p.undo = function () {
        var argumentArray = Array.prototype.slice.call(arguments);
        var commandType = argumentArray.shift();
        var commandFunc = Entry.Command[commandType];

        this.report(Entry.STATIC.COMMAND_TYPES.undo);

        var command = Entry.Command[commandType];

        var state;
        if (Entry.stateManager && command.skipUndoStack !== true) {
            state = Entry.stateManager.addCommand.apply(Entry.stateManager, [commandType, this, this.do, commandFunc.undo].concat(commandFunc.state.apply(this, argumentArray)));
        }
        return {
            value: Entry.Command[commandType].do.apply(this, argumentArray),
            isPass: function (isPass) {
                this.isPassById(state.id, isPass);
            }.bind(this)
        };
    };

    p.redo = function () {
        var argumentArray = Array.prototype.slice.call(arguments);
        var commandType = argumentArray.shift();
        var commandFunc = Entry.Command[commandType];

        this.report(Entry.STATIC.COMMAND_TYPES.redo);

        var command = Entry.Command[commandType];

        if (Entry.stateManager && command.skipUndoStack !== true) {
            Entry.stateManager.addCommand.apply(Entry.stateManager, [commandType, this, this.undo, commandType].concat(commandFunc.state.apply(null, argumentArray)));
        }
        commandFunc.undo.apply(this, argumentArray);
    };

    p.setCurrentEditor = function (key, object) {
        this.editor[key] = object;
    };

    p.isPass = function (isPass) {
        if (!Entry.stateManager) return;

        isPass = isPass === undefined ? true : isPass;
        var lastCommand = Entry.stateManager.getLastCommand();
        if (lastCommand) lastCommand.isPass = isPass;
    };

    p.isPassById = function (id, isPass, skipCount) {
        if (!id || !Entry.stateManager) return;

        isPass = isPass === undefined ? true : isPass;
        var lastCommand = Entry.stateManager.getLastCommandById(id);
        if (lastCommand) {
            lastCommand.isPass = isPass;
            if (skipCount) lastCommand.skipCount = !!skipCount;
        }
    };

    p.addReporter = function (reporter) {
        reporter.logEventListener = this.logEvent.attach(reporter, reporter.add);
    };

    p.removeReporter = function (reporter) {
        if (reporter.logEventListener) this.logEvent.detatch(reporter.logEventListener);
        delete reporter.logEventListener;
    };

    p.report = function (commandType, argumentsArray) {
        var data;

        if (commandType && Entry.Command[commandType] && Entry.Command[commandType].log) data = Entry.Command[commandType].log.apply(this, argumentsArray);else data = argumentsArray;
        data.unshift(commandType);
        this.logEvent.notify(data);
    };

    p.applyOption = function () {
        this.doCommandAll = Entry.doCommandAll;
    };
})(Entry.Commander.prototype);

/***/ }),

/***/ "./src/command/commands/block.js":
/*!***************************************!*\
  !*** ./src/command/commands/block.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


(function (c) {
    var COMMAND_TYPES = Entry.STATIC.COMMAND_TYPES;
    var obj, command;

    c[COMMAND_TYPES.addThread] = {
        do: function _do(blocks, index) {
            return this.editor.board.code.createThread(blocks, index);
        },
        state: function state(blocks, index) {
            if (index === undefined || index === null) index = this.editor.board.code.getThreadCount();
            return [index];
        },
        log: function log(blocks, index) {
            if (blocks instanceof Entry.Thread) blocks = blocks.toJSON();
            return [['blocks', blocks], ['index', index]];
        },
        undo: 'destroyThread',
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        validate: false,
        dom: ['playground', 'blockMenu', '&0']
    };

    obj = Entry.cloneSimpleObject(c[COMMAND_TYPES.addThread]);
    obj.showMe = function (restrictor) {
        if (restrictor.isTooltipFaded()) return;
        restrictor.fadeOutTooltip();
        var svgGroup = Entry.getDom(restrictor.processDomQuery(this.dom));
        var nextCmd = restrictor.requestNextData().content;
        var cmdType = nextCmd[0];
        var targetDomQuery;
        if (cmdType === COMMAND_TYPES.moveBlockFromBlockMenu) targetDomQuery = ['playground', 'board', 'coord', '&1', '&2'];else targetDomQuery = ['playground', 'board', '&1', 'magnet', 'next', 0];

        var targetDom = Entry.getDom(restrictor.processDomQuery(targetDomQuery, nextCmd));
        var targetRect = targetDom.getBoundingClientRect();

        Entry.Utils.glideBlock(svgGroup, targetRect.left, targetRect.top, function () {
            restrictor.fadeInTooltip();
        });
    };
    obj.followCmd = true;
    obj.restrict = function (data, domQuery, callback, restrictor) {
        var nextCmd = restrictor.requestNextData().content;
        if (nextCmd[0] === Entry.STATIC.COMMAND_TYPES.insertBlockFromBlockMenu) Entry.Command.editor.board.scrollToPointer(nextCmd[2][1]);
        var isDone = false;
        var tooltip = new Entry.Tooltip([{
            title: data.tooltip.title,
            content: data.tooltip.content,
            target: domQuery
        }], {
            dimmed: true,
            restrict: true,
            callBack: callback
        });
        return tooltip;
    };
    c[COMMAND_TYPES.addThreadFromBlockMenu] = obj;

    c[COMMAND_TYPES.destroyThread] = {
        do: function _do(thread) {
            // thread can be index
            if (!(thread instanceof Entry.Thread)) thread = this.editor.board.code.getThread(thread);
            var block = thread.getFirstBlock();
            block.destroy(true, true);
        },
        state: function state(thread) {
            if (!(thread instanceof Entry.Thread)) thread = this.editor.board.code.getThread(thread);
            var index = this.editor.board.code.getThreadIndex(thread);
            return [thread.toJSON(), index];
        },
        log: function log(threadIndex) {
            if (threadIndex instanceof Entry.Thread) threadIndex = this.editor.board.code.getThreadIndex(threadIndex);

            return [['index', threadIndex]];
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        restrict: function restrict(data, domQuery, callback) {
            callback();
        },
        validate: false,
        undo: 'addThread'
    };

    c[COMMAND_TYPES.destroyBlock] = {
        do: function _do(block) {
            block = this.editor.board.findBlock(block);
            block.doDestroy();
        },
        state: function state(block) {
            var isThread = false;
            block = this.editor.board.findBlock(block);
            var pointer = block.targetPointer();
            var blockJSON = block.toJSON();
            if (pointer.length === 3) {
                // 첫번째 블록 삭제
                if (block.thread.getCount() === 1)
                    // 단일 블록 쓰레드 삭제
                    isThread = true;else pointer.push(-1); // targetPointer 결과값 보정
            }
            if (block.getBlockType() === 'output') blockJSON.params[1] = undefined;
            return [blockJSON, pointer, isThread];
        },
        log: function log(block) {
            block = this.editor.board.findBlock(block);
            return [['block', block.pointer ? block.pointer() : block]];
        },
        undo: 'recoverBlock'
    };

    c[COMMAND_TYPES.recoverBlock] = {
        do: function _do(blockModel, pointer, isThread) {
            if (isThread) {
                return this.editor.board.code.createThread([blockModel], pointer[2]);
            } else {
                var block = this.editor.board.code.createThread([blockModel]).getFirstBlock();
                this.editor.board.insert(block, pointer);
            }
        },
        state: function state(block) {
            if (typeof block !== 'string') block = block.id;
            return [block];
        },
        log: function log(block, pointer) {
            block = this.editor.board.findBlock(block.id);
            return [['block', block], ['pointer', pointer]];
        },
        undo: 'destroyBlock'
    };

    c[COMMAND_TYPES.insertBlock] = {
        do: function _do(block, targetBlock, count) {
            block = this.editor.board.findBlock(block);
            this.editor.board.insert(block, targetBlock, count);
        },
        state: function state(block, targetBlock, count) {
            block = this.editor.board.findBlock(block);
            var data = [block, block.targetPointer()];

            if (typeof block !== 'string' && block.getBlockType() === 'basic') data.push(block.thread.getCount(block));else if (typeof block !== 'string' && block.getBlockType() === 'output') data.push(count || block.getOutputBlockCount() + 1);
            return data;
        },
        log: function log(block, targetBlock, count) {
            block = this.editor.board.findBlock(block);
            if (!(targetBlock instanceof Array)) targetBlock = targetBlock.pointer();

            var result = [['block', block ? block.pointer() : ''], ['targetPointer', targetBlock]];
            if (count) result.push(['count', count ? count : null]);
            return result;
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: 'insertBlock',
        restrict: function restrict(data, domQuery, callback, restrictor) {
            var board = Entry.Command.editor.board;
            var block = board.code.getByPointer(data.content[1][1]);
            var blockView;
            board.scrollToPointer(data.content[1][1]);

            if (restrictor.toolTipRender) {
                restrictor.toolTipRender.titleIndex = 0;
                restrictor.toolTipRender.contentIndex = 0;
            }
            var isDefault = data.tooltip.isDefault;
            var isDone = false;
            var tooltip = new Entry.Tooltip([{
                title: data.tooltip.title,
                content: data.tooltip.content,
                target: domQuery
            }], {
                dimmed: true,
                restrict: true,
                callBack: function callBack(isFromInit) {
                    if (isDone || !isFromInit) return;
                    isDone = true;
                    callback();

                    var ret = board.scrollToPointer(data.content[2][1]);
                    if (block) blockView = block.view;
                    if (blockView) {
                        blockView = blockView.getSvgRoot().blockView;
                        if (blockView && ret) blockView.moveBy(-ret[0], -ret[1]);
                    }

                    restrictor.toolTipRender.titleIndex = 1;

                    if (restrictor.toolTipRender) {
                        if (!isDefault) {
                            restrictor.toolTipRender.contentIndex = 1;
                        } else {
                            var target = Entry.Command.editor.board.code.getTargetByPointer(data.content[2][1]);

                            if (target && target.isParamBlockType()) {
                                restrictor.toolTipRender.contentIndex = 2;
                            } else {
                                restrictor.toolTipRender.contentIndex = 1;
                            }
                        }
                    }

                    var processedDomQuery = restrictor.processDomQuery(['playground', 'board', '&1', 'magnet']);

                    tooltip.init([{
                        title: data.tooltip.title,
                        content: data.tooltip.content,
                        target: processedDomQuery
                    }], {
                        indicator: true,
                        callBack: function callBack() {}
                    });
                }
            });
            return tooltip;
        },
        showMe: function showMe(restrictor) {
            if (restrictor.isTooltipFaded()) return;
            restrictor.fadeOutTooltip();
            var svgGroup = Entry.getDom(restrictor.processDomQuery(this.dom));
            var targetDom = Entry.getDom(restrictor.processDomQuery(['playground', 'board', '&1', 'magnet', 'next', 0]));
            var targetRect = targetDom.getBoundingClientRect();

            Entry.Utils.glideBlock(svgGroup, targetRect.left, targetRect.top, function () {
                restrictor.fadeInTooltip();
            });
        },
        dom: ['playground', 'board', '&0']
    };

    obj = Entry.cloneSimpleObject(c[COMMAND_TYPES.insertBlock]);
    obj.followCmd = true;
    c[COMMAND_TYPES.insertBlockFollowSeparate] = obj;

    obj = Entry.cloneSimpleObject(c[COMMAND_TYPES.insertBlock]);
    obj.restrict = function (data, domQuery, callback, restrictor) {
        if (restrictor.toolTipRender) {
            if (restrictor.toolTipRender) {
                var target = Entry.Command.editor.board.code.getByPointer(data.content[2][1]);

                if (!target || target.isParamBlockType()) {
                    restrictor.toolTipRender.contentIndex = 1;
                } else {
                    restrictor.toolTipRender.contentIndex = 0;
                }
            }
        }
        callback();
        return new Entry.Tooltip([{
            title: data.tooltip.title,
            content: data.tooltip.content,
            target: domQuery
        }], {
            indicator: true,
            callBack: function callBack() {}
        });
    };
    obj.dom = ['playground', 'board', '&1', 'magnet'];
    c[COMMAND_TYPES.insertBlockFromBlockMenu] = obj;

    obj = Entry.cloneSimpleObject(c[COMMAND_TYPES.insertBlockFromBlockMenu]);
    obj.followCmd = true;
    c[COMMAND_TYPES.insertBlockFromBlockMenuFollowSeparate] = obj;

    c[COMMAND_TYPES.separateBlock] = {
        do: function _do(block, dragMode, y) {
            block = this.editor.board.findBlock(block);
            if (typeof y === 'number') {
                block.view._moveTo(dragMode, y);
                dragMode = undefined;
            }

            dragMode = dragMode === undefined ? Entry.DRAG_MODE_DRAG : dragMode;

            if (block.view) block.view._toGlobalCoordinate(dragMode);
            block.doSeparate();
        },
        state: function state(block) {
            block = this.editor.board.findBlock(block);
            var data = [block];
            var pointer = block.targetPointer();
            data.push(pointer);

            if (block.getBlockType() === 'basic') data.push(block.thread.getCount(block));
            return data;
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        log: function log(block) {
            block = this.editor.board.findBlock(block);
            var blockPointer = block.pointer();
            if (block.view) block = block.view;

            return [['block', blockPointer], ['x', block.x], ['y', block.y]];
        },
        restrict: function restrict(data, domQuery, callback, restrictor) {
            Entry.Command.editor.board.scrollToPointer(data.content[1][1]);
            var isDone = false;
            if (restrictor.toolTipRender) {
                restrictor.toolTipRender.titleIndex = 0;
                restrictor.toolTipRender.contentIndex = 0;
            }
            var tooltip = new Entry.Tooltip([{
                title: data.tooltip.title,
                content: data.tooltip.content,
                target: domQuery
            }], {
                dimmed: true,
                restrict: true,
                callBack: function callBack(isFromInit) {
                    if (isDone || !isFromInit) return;
                    if (restrictor.toolTipRender) {
                        restrictor.toolTipRender.titleIndex = 1;
                        restrictor.toolTipRender.contentIndex = 1;
                    }
                    callback();
                    isDone = true;
                    tooltip.init([{
                        title: data.tooltip.title,
                        content: data.tooltip.content,
                        target: restrictor.processDomQuery(['playground', 'board', 'coord', '&1', '&2'])
                    }], {
                        indicator: true,
                        callBack: function callBack() {
                            callback();
                        }
                    });
                }
            });
            return tooltip;
        },
        undo: 'insertBlock',
        dom: ['playground', 'board', '&0']
    };

    obj = Entry.cloneSimpleObject(c[COMMAND_TYPES.separateBlock]);
    obj.restrict = function (data, domQuery, callback, restrictor) {
        Entry.Command.editor.board.scrollToPointer(data.content[1][1]);
        var isDone = false;
        if (restrictor.toolTipRender) {
            restrictor.toolTipRender.titleIndex = 0;
            restrictor.toolTipRender.contentIndex = 0;
        }
        var tooltip = new Entry.Tooltip([{
            title: data.tooltip.title,
            content: data.tooltip.content,
            target: domQuery
        }], {
            dimmed: true,
            restrict: true,
            callBack: function callBack(isFromInit) {
                if (isDone || !isFromInit) return;
                callback();
                if (restrictor.toolTipRender) {
                    restrictor.toolTipRender.titleIndex = 1;
                    restrictor.toolTipRender.contentIndex = 1;
                }
                isDone = true;
                tooltip.init([{
                    title: data.tooltip.title,
                    content: data.tooltip.content,
                    target: ['playground', 'board', 'trashcan']
                }], {
                    indicator: true,
                    callBack: function callBack() {
                        callback();
                    }
                });
            }
        });
        return tooltip;
    };
    obj.showMe = function (restrictor) {
        if (restrictor.isTooltipFaded()) return;
        restrictor.fadeOutTooltip();
        var svgGroup = Entry.getDom(restrictor.processDomQuery(this.dom));
        var targetDom = Entry.getDom(['playground', 'board', 'trashcan']);
        var targetRect = targetDom.getBoundingClientRect();

        Entry.Utils.glideBlock(svgGroup, targetRect.left, targetRect.top, function () {
            restrictor.fadeInTooltip();
        });
    };
    obj.followCmd = true;
    c[COMMAND_TYPES.separateBlockForDestroy] = obj;

    c[COMMAND_TYPES.moveBlock] = {
        do: function _do(block, x, y) {
            if (x !== undefined) {
                // do from undo stack
                block = this.editor.board.findBlock(block);
                block.moveTo(x, y);
            } else {
                block._updatePos();
            }
        },
        state: function state(block) {
            block = this.editor.board.findBlock(block);
            return [block, block.x, block.y];
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        restrict: function restrict(data, domQuery, callback, restrictor) {
            var isDone = false;
            var tooltip = new Entry.Tooltip([{
                title: data.tooltip.title,
                content: data.tooltip.content,
                target: domQuery
            }], {
                dimmed: true,
                restrict: true,
                callBack: function callBack(isFromInit) {
                    if (isDone || !isFromInit) return;
                    isDone = true;
                    callback();
                    tooltip.init([{
                        title: data.tooltip.title,
                        content: data.tooltip.content,
                        target: restrictor.processDomQuery(['playground', 'board', 'coord', '&1', '&2'])
                    }], {
                        indicator: true,
                        callBack: function callBack() {}
                    });
                }
            });
            return tooltip;
        },
        validate: false,
        log: function log(block, x, y) {
            block = this.editor.board.findBlock(block);
            return [['block', block.pointer()], ['x', block.view.x], ['y', block.view.y]];
        },
        undo: 'moveBlock',
        dom: ['playground', 'board', '&0']
    };

    obj = Entry.cloneSimpleObject(c[COMMAND_TYPES.moveBlock]);
    obj.followCmd = true;
    obj.restrict = function (data, domQuery, callback, restrictor) {
        Entry.Command.editor.board.scrollToPointer(data.content[1][1]);
        var isDone = false;
        if (restrictor.toolTipRender) {
            restrictor.toolTipRender.titleIndex = 0;
            restrictor.toolTipRender.contentIndex = 0;
        }
        var tooltip = new Entry.Tooltip([{
            title: data.tooltip.title,
            content: data.tooltip.content,
            target: domQuery
        }], {
            dimmed: true,
            restrict: true,
            callBack: function callBack(isFromInit) {
                if (isDone || !isFromInit) return;
                isDone = true;
                callback();
                if (restrictor.toolTipRender) {
                    restrictor.toolTipRender.titleIndex = 1;
                    restrictor.toolTipRender.contentIndex = 1;
                }
                tooltip.init([{
                    title: data.tooltip.title,
                    content: data.tooltip.content,
                    target: ['playground', 'board', 'trashcan']
                }], {
                    indicator: true,
                    callBack: function callBack() {
                        callback();
                    }
                });
            }
        });
        return tooltip;
    };
    c[COMMAND_TYPES.moveBlockForDestroy] = obj;

    obj = Entry.cloneSimpleObject(c[COMMAND_TYPES.moveBlock]);
    obj.restrict = function (data, domQuery, callback) {
        callback();
        return new Entry.Tooltip([{
            title: data.tooltip.title,
            content: data.tooltip.content,
            target: domQuery
        }], {
            callBack: function callBack() {}
        });
    };
    obj.dom = ['playground', 'board', 'coord', '&1', '&2'];
    c[COMMAND_TYPES.moveBlockFromBlockMenu] = obj;

    cloneCommand(COMMAND_TYPES.cloneBlock, COMMAND_TYPES.addThread, [['undo', 'uncloneBlock'], ['dom', undefined]]);

    cloneCommand(COMMAND_TYPES.uncloneBlock, COMMAND_TYPES.destroyThread, [['undo', 'cloneBlock']]);

    c[COMMAND_TYPES.scrollBoard] = {
        do: function _do(dx, dy, isPass) {
            if (!isPass) this.editor.board.scroller._scroll(dx, dy);
            delete this.editor.board.scroller._diffs;
        },
        state: function state(dx, dy) {
            return [-dx, -dy];
        },
        log: function log(dx, dy) {
            return [['dx', dx], ['dy', dy]];
        },
        recordable: Entry.STATIC.RECORDABLE.SKIP,
        undo: 'scrollBoard'
    };

    c[COMMAND_TYPES.setFieldValue] = {
        do: function _do(pointer, value, code) {
            var field;
            if (code) field = code.getByPointer(pointer);else field = this.editor.board.findBlock(pointer);

            field.setValue(value, true);
            Entry.disposeEvent.notify(true);
            field._blockView.disableMouseEvent = false;
        },
        state: function state(pointer, value, code) {
            var field;
            if (code) field = code.getByPointer(pointer);else field = this.editor.board.findBlock(pointer);
            return [pointer, field._startValue || field.getValue()];
        },
        log: function log(pointer, value) {
            return [['pointer', pointer], ['value', value]];
        },
        restrict: function restrict(data, domQuery, callback, restrictor) {
            var isDone = false;
            var isDefault = data.tooltip.isDefault;

            Entry.Command.editor.board.scrollToPointer(data.content[1][1]);

            var field = Entry.Command.editor.board.findBlock(data.content[1][1]);
            var blockView = field._blockView;
            blockView.disableMouseEvent = true;
            var fieldType = field.getFieldRawType();

            if (restrictor.toolTipRender) {
                if (!isDefault) {
                    restrictor.toolTipRender.contentIndex = 0;
                } else {
                    switch (fieldType) {
                        case 'textInput':
                            restrictor.toolTipRender.contentIndex = 0;
                            break;
                        case 'dropdown':
                        case 'dropdownDynamic':
                            restrictor.toolTipRender.contentIndex = 1;
                            break;
                        case 'keyboard':
                            restrictor.toolTipRender.contentIndex = 2;
                            break;
                    }
                }
            }

            var nextValue = data.content[2][1];
            if (field instanceof Entry.FieldTextInput) field.fixNextValue(nextValue);

            var tooltip = new Entry.Tooltip([{
                title: data.tooltip.title,
                content: data.tooltip.content,
                direction: 'left',
                target: domQuery
            }], {
                dimmed: true,
                restrict: true,
                callBack: function callBack(isFromInit) {
                    if (isDone || !isFromInit) return;
                    isDone = true;
                    callback();
                    callback();
                    restrictor.toolTipRender.replaceContent(/&value&/gi, field.getTextValueByValue(nextValue));

                    if (restrictor.toolTipRender) {
                        if (!isDefault) {
                            restrictor.toolTipRender.titleIndex = 1;
                            restrictor.toolTipRender.contentIndex = 1;
                        } else {
                            switch (fieldType) {
                                case 'textInput':
                                    restrictor.toolTipRender.contentIndex = 3;
                                    break;
                                case 'dropdown':
                                case 'dropdownDynamic':
                                    restrictor.toolTipRender.contentIndex = 4;
                                    break;
                                case 'keyboard':
                                    restrictor.toolTipRender.contentIndex = 5;
                                    break;
                            }
                        }
                    }

                    tooltip.init([{
                        title: data.tooltip.title,
                        content: data.tooltip.content,
                        target: restrictor.processDomQuery(['playground', 'board', '&0', 'option'])
                    }], {
                        dimmed: true,
                        restrict: true,
                        callBack: function callBack() {
                            blockView.disableMouseEvent = false;
                        }
                    });
                }
            });
            return tooltip;
        },
        disableMouseUpDispose: true,
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        dom: ['playground', 'board', '&0'],
        undo: 'setFieldValue'
    };

    c[COMMAND_TYPES.selectBlockMenu] = {
        do: function _do(selector, doNotFold, doNotAlign) {
            var blockMenu = Entry.getMainWS().blockMenu;
            blockMenu.selectMenu(selector, doNotFold, doNotAlign);
            blockMenu.align();
        },
        state: function state(selector, doNotFold, doNotAlign) {
            var blockMenu = Entry.getMainWS().blockMenu;
            return [blockMenu.lastSelector, doNotFold, doNotAlign];
        },
        log: function log(selector, doNotFold, doNotAlign) {
            return [['selector', selector]];
        },
        skipUndoStack: true,
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        dom: ['playground', 'blockMenu', 'category', '&0'],
        undo: 'selectBlockMenu'
    };

    c[COMMAND_TYPES.destroyThreads] = {
        do: function _do() {
            var threads = this.editor.board.code.getThreads().filter(function (t) {
                return t.getFirstBlock().isDeletable();
            }).forEach(function (t) {
                t.destroy();
            });
        },
        state: function state() {
            var threads = this.editor.board.code.getThreads().filter(function (t) {
                return t.getFirstBlock().isDeletable();
            }).map(function (t) {
                return t.toJSON();
            });

            return [threads];
        },
        log: function log() {
            return [];
        },
        undo: 'addThreads'
    };

    c[COMMAND_TYPES.addThreads] = {
        do: function _do(threads) {
            var code = this.editor.board.code;
            threads.forEach(function (t) {
                code.createThread(t);
            });
        },
        state: function state() {
            return [];
        },
        log: function log() {
            return [];
        },
        undo: 'destroyThreads'
    };

    c[COMMAND_TYPES.destroyBlockBelow] = {
        do: function _do(block) {
            block = this.editor.board.findBlock(block);
            block.doDestroyBelow(true);
        },
        state: function state(block) {
            block = this.editor.board.findBlock(block);
            var thread = block.thread;
            var data;
            if (thread instanceof Entry.Thread) {
                data = thread.toJSON(false, block);
            } else data = [block.toJSON()];

            return [data, block.targetPointer()];
        },
        log: function log(block) {
            return [];
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: 'recoverBlockBelow'
    };

    c[COMMAND_TYPES.recoverBlockBelow] = {
        do: function _do(thread, targetPointer) {
            var board = this.editor.board;
            var thread = board.code.createThread(thread);
            board.insert(thread.getFirstBlock(), targetPointer);
        },
        state: function state(thread, targetPointer) {
            return [thread[0]];
        },
        log: function log(thread, targetPointer) {
            return [];
        },
        undo: 'destroyBlockBelow'
    };

    cloneCommand(COMMAND_TYPES.separateBlockByCommand, COMMAND_TYPES.separateBlock);

    function cloneCommand(newType, oldType, props) {
        c[newType] = Entry.cloneSimpleObject(c[oldType]);
        if (props && props instanceof Array) {
            props.forEach(function (prop) {
                c[newType][prop[0]] = prop[1];
            });
        }
        return c[newType];
    }
})(Entry.Command);

/***/ }),

/***/ "./src/command/commands/container.js":
/*!*******************************************!*\
  !*** ./src/command/commands/container.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


(function (c) {
    var COMMAND_TYPES = Entry.STATIC.COMMAND_TYPES;

    c[COMMAND_TYPES.containerSelectObject] = {
        do: function _do(objectId) {
            Entry.container.selectObject(objectId);
        },
        state: function state(objectId) {
            return [Entry.playground.object.id, objectId];
        },
        log: function log(objectId) {
            return [['objectId', objectId], ['objectIndex', Entry.container.getObjectIndex(objectId)]];
        },
        restrict: function restrict(data, domQuery, callback, restrictor) {
            Entry.container.scrollToObject(data.content[1][1]);

            return new Entry.Tooltip([{
                title: data.tooltip.title,
                content: data.tooltip.content,
                target: domQuery
            }], {
                dimmed: true,
                restrict: true,
                callBack: function callBack() {
                    callback();
                }
            });
        },
        undo: 'containerSelectObject',
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        dom: ['container', 'objectIndex', '&1']
    };
})(Entry.Command);

/***/ }),

/***/ "./src/command/commands/engine.js":
/*!****************************************!*\
  !*** ./src/command/commands/engine.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


(function (c) {
    var COMMAND_TYPES = Entry.STATIC.COMMAND_TYPES;

    c[COMMAND_TYPES.toggleRun] = {
        do: function _do(callerName) {
            Entry.engine.toggleRun();
        },
        state: function state() {
            return [];
        },
        log: function log(callerName) {
            return [['callerName', callerName]];
        },
        restrict: function restrict(data, domQuery, callback, restrictor) {
            var engine = Entry.engine;
            if (!engine.isState('stop')) engine.toggleStop();

            var isDone = false;
            return new Entry.Tooltip([{
                title: data.tooltip.title,
                content: data.tooltip.content,
                target: domQuery
            }], {
                dimmed: true,
                restrict: true,
                callBack: function callBack(isFromInit) {}
            });
        },
        validate: false,
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: 'toggleStop',
        dom: ['engine', '&0']
    };

    c[COMMAND_TYPES.toggleStop] = {
        do: function _do(callerName) {
            Entry.engine.toggleStop();
        },
        state: function state() {
            return [];
        },
        log: function log(callerName) {
            return [['callerName', callerName]];
        },
        restrict: function restrict(data, domQuery, callback, restrictor) {
            var engine = Entry.engine;
            if (Entry.engine.popup) Entry.engine.closeFullScreen();
            if (!engine.isState('run')) engine.toggleRun(false);

            return new Entry.Tooltip([{
                title: data.tooltip.title,
                content: data.tooltip.content,
                target: domQuery
            }], {
                dimmed: true,
                restrict: true,
                callBack: function callBack(isFromInit) {
                    callback();
                }
            });
        },
        validate: false,
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: 'toggleRun',
        dom: ['engine', '&0']
    };
})(Entry.Command);

/***/ }),

/***/ "./src/command/commands/object.js":
/*!****************************************!*\
  !*** ./src/command/commands/object.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


(function (c) {
    var COMMAND_TYPES = Entry.STATIC.COMMAND_TYPES;

    c[COMMAND_TYPES.selectObject] = {
        do: function _do(objectId) {
            return Entry.container.selectObject(objectId);
        },
        state: function state(objectId) {
            var playground = Entry.playground;
            if (playground && playground.object) return [playground.object.id];
        },
        log: function log(objectId) {
            return [objectId];
        },
        undo: 'selectObject'
    };

    c[COMMAND_TYPES.objectEditButtonClick] = {
        do: function _do(objectId) {
            Entry.container.getObject(objectId).toggleEditObject();
        },
        state: function state(objectId) {
            return [];
        },
        log: function log(objectId) {
            return [['objectId', objectId], ['objectIndex', Entry.container.getObjectIndex(objectId)]];
        },
        skipUndoStack: true,
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        dom: ['container', 'objectIndex', '&1', 'editButton'],
        undo: 'selectObject'
    };

    c[COMMAND_TYPES.objectAddPicture] = {
        do: function _do(objectId, picture) {
            var hashId = c[COMMAND_TYPES.objectAddPicture].hashId;
            if (hashId) {
                picture.id = hashId;
                delete c[COMMAND_TYPES.objectAddPicture].hashId;
            }
            Entry.container.getObject(objectId).addPicture(picture);
            Entry.playground.injectPicture();
            Entry.playground.selectPicture(picture);
            Entry.dispatchEvent('dismissModal');
        },
        state: function state(objectId, picture) {
            return [objectId, picture];
        },
        log: function log(objectId, picture) {
            var o = {};
            o._id = picture._id;
            o.id = picture.id;
            o.dimension = picture.dimension;
            o.filename = picture.filename;
            o.fileurl = picture.fileurl;
            o.name = picture.name;
            o.scale = picture.scale;
            return [['objectId', objectId], ['picture', o]];
        },
        dom: ['.btn_confirm_modal'],
        restrict: function restrict(data, domQuery, callback) {
            this.hashId = data.content[2][1].id;

            var tooltip = new Entry.Tooltip([{
                title: data.tooltip.title,
                content: data.tooltip.content,
                target: '.btn_confirm_modal'
            }], {
                restrict: true,
                dimmed: true,
                render: false,
                callBack: callback
            });

            var event = Entry.getMainWS().widgetUpdateEvent;

            if (!data.skip) {
                Entry.dispatchEvent('openPictureManager', data.content[2][1]._id, event.notify.bind(event));
            }

            return tooltip;
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        validate: false,
        undo: 'objectRemovePicture'
    };

    c[COMMAND_TYPES.objectRemovePicture] = {
        do: function _do(objectId, picture) {
            Entry.container.getObject(objectId).removePicture(picture.id);
        },
        state: function state(objectId, picture) {
            return [objectId, picture];
        },
        log: function log(objectId, picture) {
            return [['objectId', objectId], ['pictureId', picture._id]];
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        validate: false,
        undo: 'objectAddPicture'
    };

    c[COMMAND_TYPES.objectAddSound] = {
        do: function _do(objectId, sound) {
            var hashId = c[COMMAND_TYPES.objectAddSound].hashId;
            if (hashId) {
                sound.id = hashId;
                delete c[COMMAND_TYPES.objectAddSound].hashId;
            }
            Entry.container.getObject(objectId).addSound(sound);
            Entry.dispatchEvent('dismissModal');
        },
        state: function state(objectId, sound) {
            return [objectId, sound];
        },
        log: function log(objectId, sound) {
            var o = {};
            o._id = sound._id;
            o.duration = sound.duration;
            o.ext = sound.ext;
            o.id = sound.id;
            o.filename = sound.filename;
            o.fileurl = sound.fileurl;
            o.name = sound.name;
            return [['objectId', objectId], ['sound', o]];
        },
        dom: ['.btn_confirm_modal'],
        restrict: function restrict(data, domQuery, callback) {
            this.hashId = data.content[2][1].id;

            var tooltip = new Entry.Tooltip([{
                title: data.tooltip.title,
                content: data.tooltip.content,
                target: '.btn_confirm_modal'
            }], {
                callBack: callback,
                dimmed: true,
                restrict: true,
                render: false
            });

            var event = Entry.getMainWS().widgetUpdateEvent;

            if (!data.skip) {
                Entry.dispatchEvent('openSoundManager', data.content[2][1]._id, event.notify.bind(event));
            }
            return tooltip;
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        validate: false,
        undo: 'objectRemoveSound'
    };

    c[COMMAND_TYPES.objectRemoveSound] = {
        do: function _do(objectId, sound) {
            return Entry.container.getObject(objectId).removeSound(sound.id);
        },
        state: function state(objectId, sound) {
            return [objectId, sound];
        },
        log: function log(objectId, sound) {
            return [['objectId', objectId], ['soundId', sound._id]];
        },
        dom: ['.btn_confirm_modal'],
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        validate: false,
        undo: 'objectAddSound'
    };

    c[COMMAND_TYPES.objectNameEdit] = {
        do: function _do(objectId, newName) {
            return Entry.container.getObject(objectId).setName(newName);
        },
        state: function state(objectId, newName) {
            var object = Entry.container.getObject(objectId);
            return [objectId, object.getName(), newName];
        },
        log: function log(objectId, newName) {
            var object = Entry.container.getObject(objectId);
            return [['objectId', objectId], ['newName', newName], ['oldName', object.getName()]];
        },
        dom: [],
        recordable: Entry.STATIC.RECORDABLE.SKIP,
        validate: false,
        undo: 'objectNameEdit'
    };
})(Entry.Command);

/***/ }),

/***/ "./src/command/commands/painter.js":
/*!*****************************************!*\
  !*** ./src/command/commands/painter.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


(function (c) {
    var COMMAND_TYPES = Entry.STATIC.COMMAND_TYPES;

    c[COMMAND_TYPES.editPicture] = {
        do: function _do(action, lc) {
            if (Entry.playground.painter.lc.canRedo()) Entry.playground.painter.lc.redo();
        },
        state: function state(objectId) {},
        log: function log(objectId) {
            return [objectId];
        },
        recordable: Entry.STATIC.RECORDABLE.SKIP,
        undo: "uneditPicture"
    };

    c[COMMAND_TYPES.uneditPicture] = {
        type: Entry.STATIC.COMMAND_TYPES.uneditPicture,
        do: function _do(action, lc) {
            Entry.playground.painter.lc.undo();
        },
        state: function state(objectId) {},
        log: function log(objectId) {
            return [objectId];
        },
        recordable: Entry.STATIC.RECORDABLE.SKIP,
        undo: "editPicture"
    };

    c[COMMAND_TYPES.processPicture] = {
        do: function _do(action, lc) {
            if (Entry.playground.painter.lc.canRedo()) {
                Entry.playground.painter.lc.redo();
            }
        },
        state: function state(objectId) {},
        log: function log(objectId) {
            return [objectId];
        },
        recordable: Entry.STATIC.RECORDABLE.SKIP,
        undo: "unprocessPicture",
        isPass: true
    };

    c[COMMAND_TYPES.unprocessPicture] = {
        do: function _do(action, lc) {
            Entry.playground.painter.lc.undo();
        },
        state: function state(objectId) {},
        log: function log(objectId) {
            return [objectId];
        },
        recordable: Entry.STATIC.RECORDABLE.SKIP,
        undo: "processPicture",
        isPass: true
    };
})(Entry.Command);

/***/ }),

/***/ "./src/command/commands/playground.js":
/*!********************************************!*\
  !*** ./src/command/commands/playground.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


(function (c) {
    var COMMAND_TYPES = Entry.STATIC.COMMAND_TYPES;

    c[COMMAND_TYPES.playgroundChangeViewMode] = {
        do: function _do(newType, oldType) {
            Entry.playground.changeViewMode(newType);
        },
        state: function state(newType, oldType) {
            return [oldType, newType];
        },
        log: function log(newType, oldType) {
            oldType = oldType || 'code';
            return [['newType', newType], ['oldType', oldType]];
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: 'playgroundChangeViewMode',
        dom: ['playground', 'tabViewElements', '&0']
    };

    c[COMMAND_TYPES.playgroundClickAddPicture] = {
        do: function _do() {
            Entry.dispatchEvent('openPictureManager');
        },
        state: function state() {
            return [];
        },
        log: function log() {
            return [];
        },
        validate: false,
        //skipUndoStack: true,
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        restrict: function restrict(data, domQuery, callback, restrictor) {
            Entry.dispatchEvent('dismissModal');
            var tooltip = new Entry.Tooltip([{
                title: data.tooltip.title,
                content: data.tooltip.content,
                target: domQuery
            }], {
                restrict: true,
                dimmed: true,
                callBack: callback
            });
            return tooltip;
        },
        undo: 'playgroundClickAddPictureCancel',
        dom: ['playground', 'pictureAddButton']
    };

    c[COMMAND_TYPES.playgroundClickAddPictureCancel] = {
        do: function _do() {
            Entry.dispatchEvent('dismissModal');
        },
        state: function state() {
            return [];
        },
        log: function log() {
            return [];
        },
        validate: false,
        //skipUndoStack: true,
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: '',
        dom: ['playground', 'pictureAddButton']
    };

    c[COMMAND_TYPES.playgroundClickAddSound] = {
        do: function _do() {
            Entry.dispatchEvent('openSoundManager');
        },
        state: function state() {
            return [];
        },
        log: function log() {
            return [];
        },
        validate: false,
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        restrict: function restrict(data, domQuery, callback, restrictor) {
            Entry.dispatchEvent('dismissModal');
            var tooltip = new Entry.Tooltip([{
                title: data.tooltip.title,
                content: data.tooltip.content,
                target: domQuery
            }], {
                restrict: true,
                dimmed: true,
                callBack: callback
            });
            return tooltip;
        },
        undo: 'playgroundClickAddSoundCancel',
        dom: ['playground', 'soundAddButton']
    };

    c[COMMAND_TYPES.playgroundClickAddSoundCancel] = {
        do: function _do() {
            Entry.dispatchEvent('dismissModal');
        },
        state: function state() {
            return [];
        },
        log: function log() {
            return [];
        },
        validate: false,
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: '',
        dom: ['playground', 'soundAddButton']
    };
})(Entry.Command);

/***/ }),

/***/ "./src/command/commands/scene.js":
/*!***************************************!*\
  !*** ./src/command/commands/scene.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


(function (c) {
    var COMMAND_TYPES = Entry.STATIC.COMMAND_TYPES;

    c[COMMAND_TYPES.sceneAdd] = {
        do: function _do(sceneId) {
            Entry.scene.addScene();
        },
        state: function state(sceneId) {
            var sceneId = sceneId;
            return [sceneId];
        },
        log: function log() {
            return [];
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: 'sceneRemove'
    };

    c[COMMAND_TYPES.sceneRemove] = {
        do: function _do(text) {},
        state: function state(text) {},
        log: function log() {
            return [];
        },
        validate: false,
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: 'sceneAdd'
    };
})(Entry.Command);

/***/ }),

/***/ "./src/command/commands/textbox.js":
/*!*****************************************!*\
  !*** ./src/command/commands/textbox.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


(function (c) {
    var COMMAND_TYPES = Entry.STATIC.COMMAND_TYPES;

    c[COMMAND_TYPES.editText] = {
        do: function _do(text, prevText) {
            Entry.playground.object.setText(text);
            Entry.playground.object.entity.setText(text);
            Entry.dispatchEvent('textEdited');
        },
        state: function state(text, prevText) {
            return [prevText, text];
        },
        log: function log() {
            return [];
        },
        validate: false,
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: 'editText'
    };
})(Entry.Command);

/***/ }),

/***/ "./src/command/commands/variableContainer.js":
/*!***************************************************!*\
  !*** ./src/command/commands/variableContainer.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


(function (c) {
    var COMMAND_TYPES = Entry.STATIC.COMMAND_TYPES;
    c[COMMAND_TYPES.variableContainerSelectFilter] = {
        do: function _do(newType, oldType) {
            Entry.variableContainer.selectFilter(newType);
        },
        state: function state(newType, oldType) {
            return [oldType, newType];
        },
        log: function log(newType, oldType) {
            oldType = oldType || 'all';
            return [['newType', newType], ['oldType', oldType]];
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: 'variableContainerSelectFilter',
        dom: ['variableContainer', 'filter', '&0']
    };

    c[COMMAND_TYPES.variableContainerClickVariableAddButton] = {
        do: function _do() {
            Entry.variableContainer.clickVariableAddButton();
        },
        state: function state() {
            return [];
        },
        log: function log() {
            return [];
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: 'variableContainerClickVariableAddButton',
        dom: ['variableContainer', 'variableAddButton']
    };

    c[COMMAND_TYPES.variableContainerAddVariable] = {
        do: function _do(variable) {
            var that = c[COMMAND_TYPES.variableContainerAddVariable];
            var hashId = that.hashId;
            if (hashId) {
                variable.id_ = hashId;
                delete that.hashId;
            }
            Entry.variableContainer.addVariable(variable);
        },
        state: function state(variable) {
            if (variable instanceof Entry.Variable) variable = variable.toJSON();
            var that = c[COMMAND_TYPES.variableContainerAddVariable];
            var hashId = that.hashId;
            if (hashId) variable.id = hashId;
            return [variable];
        },
        log: function log(variable) {
            if (variable instanceof Entry.Variable) variable = variable.toJSON();
            return [['variable', variable]];
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        validate: false,
        undo: 'variableContainerRemoveVariable',
        restrict: function restrict(data, domQuery, callback) {
            Entry.variableContainer.clickVariableAddButton(true, true);
            var dom = $('.entryVariableAddSpaceInputWorkspace');
            dom.val(data.content[1][1].name);

            this.hashId = data.content[1][1].id;

            var tooltip = new Entry.Tooltip([{
                title: data.tooltip.title,
                content: data.tooltip.content,
                target: domQuery
            }], {
                restrict: true,
                dimmed: true,
                callBack: callback
            });
            callback();
            return tooltip;
        },
        dom: ['variableContainer', 'variableAddConfirmButton']
    };

    c[COMMAND_TYPES.variableAddSetName] = {
        do: function _do(value) {
            var that = c[COMMAND_TYPES.variableAddSetName];
            var dom = $('.entryVariableAddSpaceInputWorkspace');
            dom[0].blurred = true;
            dom.blur();
            value = that._nextValue || value;
            dom.val(value);
            delete that._nextValue;
        },
        state: function state(value) {
            return [''];
        },
        log: function log(value) {
            return [['value', c[COMMAND_TYPES.variableAddSetName]._nextValue || value]];
        },
        restrict: function restrict(data, domQuery, callback) {
            Entry.variableContainer.clickVariableAddButton(true);
            this._nextValue = data.content[1][1];
            var dom = $('.entryVariableAddSpaceInputWorkspace');
            dom[0].enterKeyDisabled = true;
            var tooltip = new Entry.Tooltip([{
                title: data.tooltip.title,
                content: data.tooltip.content,
                target: domQuery
            }], {
                restrict: true,
                noDispose: true,
                dimmed: true,
                callBack: callback
            });
            return tooltip;
        },
        validate: false,
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: 'variableAddSetName',
        dom: ['variableContainer', 'variableAddInput']
    };

    c[COMMAND_TYPES.variableContainerRemoveVariable] = {
        do: function _do(variable) {
            Entry.variableContainer.removeVariable(variable);
        },
        state: function state(variable) {
            if (variable instanceof Entry.Variable) variable = variable.toJSON();
            return [variable];
        },
        log: function log(variable) {
            if (variable instanceof Entry.Variable) variable = variable.toJSON();
            return [['variable', variable]];
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        validate: false,
        undo: 'variableContainerAddVariable',
        dom: ['variableContainer', 'variableAddConfirmButton']
    };
})(Entry.Command);

/***/ }),

/***/ "./src/core/collection.js":
/*!********************************!*\
  !*** ./src/core/collection.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * Entry Collection object constructor.
 */

Entry.Collection = function (data) {
    this.length = 0;

    /*
     * object for hashing data with id
     * @private
     */
    this._hashMap = {};

    /*
     * observers
     */
    this._observers = [];
    this.set(data);
};

(function (p, ap) {
    /* setters */
    p.set = function (data) {
        while (this.length) {
            ap.pop.call(this);
        }var hashMap = this._hashMap;
        for (var key in hashMap) {
            delete hashMap[key];
        }if (data !== undefined) {
            for (var i = 0, len = data.length; i < len; i++) {
                var datum = data[i];
                hashMap[datum.id] = datum;
                ap.push.call(this, datum);
            }
        }
    };

    p.push = function (elem) {
        this._hashMap[elem.id] = elem;
        ap.push.call(this, elem);
    };

    p.unshift = function () {
        var args = Array.prototype.slice.call(arguments, 0);
        var hashMap = this._hashMap;
        for (var i = args.length - 1; i >= 0; i--) {
            var datum = args[i];
            ap.unshift.call(this, datum);
            hashMap[datum.id] = datum;
        }
    };

    p.insert = function (datum, index) {
        ap.splice.call(this, index, 0, datum);
        this._hashMap[datum.id] = datum;
    };

    p.has = function (id) {
        return !!this._hashMap[id];
    };

    p.get = function (id) {
        return this._hashMap[id];
    };

    p.at = function (index) {
        return this[index];
    };

    p.getAll = function () {
        var len = this.length;
        var ret = [];
        for (var i = 0; i < len; i++) {
            ret.push(this[i]);
        }return ret;
    };

    p.indexOf = function (obj) {
        return ap.indexOf.call(this, obj);
    };

    p.find = function (cond) {
        var ret = [];
        var flag;

        for (var i = 0, len = this.length; i < len; i++) {
            flag = true;
            var datum = this[i];
            for (var key in cond) {
                if (cond[key] != datum[key]) {
                    flag = false;
                    break;
                }
            }
            if (flag) ret.push(datum);
        }
        return ret;
    };

    p.pop = function () {
        var datum = ap.pop.call(this);
        delete this._hashMap[datum.id];
        return datum;
    };

    p.shift = function () {
        var datum = ap.shift.call(this);
        delete this._hashMap[datum.id];
        return datum;
    };

    p.slice = function (index, amount) {
        var data = ap.slice.call(this, index, amount);
        var hashMap = this._hashMap;
        for (var i in data) {
            delete hashMap[data[i].id];
        }return data;
    };

    p.remove = function (datum) {
        var index = this.indexOf(datum);
        if (index > -1) {
            delete this._hashMap[datum.id];
            this.splice(index, 1);
        }
    };

    p.splice = function (index, amount) {
        var args = ap.slice.call(arguments, 2);
        var hashMap = this._hashMap;
        amount = amount === undefined ? this.length - index : amount;

        var splicedData = ap.splice.call(this, index, amount);

        for (var i = 0, len = splicedData.length; i < len; i++) {
            delete hashMap[splicedData[i].id];
        }for (i = 0, len = args.length; i < len; i++) {
            var datum = args[i];
            ap.splice.call(this, index++, 0, datum);
            this._hashMap[datum.id] = datum;
        }

        return splicedData;
    };

    p.clear = function () {
        while (this.length) {
            ap.pop.call(this);
        }this._hashMap = {};
    };

    p.map = function (fn, param) {
        var array = [];
        for (var i = 0, len = this.length; i < len; i++) {
            array.push(fn(this[i], param));
        }return array;
    };

    p.moveFromTo = function (from, to) {
        var max = this.length - 1;
        if (from < 0 || to < 0 || from > max || to > max) return;
        ap.splice.call(this, to, 0, ap.splice.call(this, from, 1)[0]);
    };

    p.sort = function () {};

    /* import & export */
    p.fromJSON = function () {};

    p.toJSON = function () {
        var json = [];
        for (var i = 0, len = this.length; i < len; i++) {
            json.push(this[i].toJSON());
        }return json;
    };

    /* observe methods */
    p.observe = function () {};

    p.unobserve = function () {};

    p.notify = function () {};

    /* end function */
    p.destroy = function () {};
})(Entry.Collection.prototype, Array.prototype);

/***/ }),

/***/ "./src/core/db.js":
/*!************************!*\
  !*** ./src/core/db.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.db = {
    data: {},
    typeMap: {}
};

(function (db) {
    db.add = function (datum) {
        this.data[datum.id] = datum;

        var type = datum.type;
        if (this.typeMap[type] === undefined) this.typeMap[type] = {};
        this.typeMap[type][datum.id] = datum;
    };

    db.has = function (id) {
        return this.data.hasOwnProperty(id);
    };

    db.remove = function (id) {
        if (!this.has(id)) return;

        var datum = this.data[id];
        delete this.typeMap[datum.type][id];
        delete this.data[id];
    };

    db.get = function (id) {
        return this.data[id];
    };

    db.find = function () {};

    db.clear = function () {
        this.data = {};
        this.typeMap = {};
    };
})(Entry.db);

/***/ }),

/***/ "./src/core/dom.js":
/*!*************************!*\
  !*** ./src/core/dom.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview View element constructor
 * @author Kyumin Sim
 * @version 0.2
 */


/**
 * Function for construct html dom element.
 * @function
 * @param {string} tag or html to construct dom element.
 * @param {?object} options include id, classes, parent etc.
 */

Entry.Dom = function (tag, options) {
    var tagRegex = /<(\w+)>/,
        dom;

    if (tag instanceof HTMLElement) dom = $(tag);else if (tag instanceof jQuery) dom = tag;else if (tagRegex.test(tag)) dom = $(tag);else dom = $('<' + tag + '></' + tag + '>');

    if (options === undefined) return dom;
    if (options.id) dom.attr('id', options.id);
    if (options.class) dom.addClass(options.class);
    if (options.classes) options.classes.map(function (className) {
        dom.addClass(className);
    });
    if (options.src) dom.attr('src', options.src);
    if (options.parent) options.parent.append(dom);

    dom.bindOnClick = function () {
        var hasChild = false;
        var child;
        var func;

        var handler = function handler(e) {
            e.stopImmediatePropagation();
            if (e.handled) return;
            e.handled = true;
            func.call(this, e);
        };

        if (arguments.length > 1) {
            func = arguments[1] instanceof Function ? arguments[1] : function () {};
            child = typeof arguments[0] === 'string' ? arguments[0] : '';
        } else {
            func = arguments[0] instanceof Function ? arguments[0] : function () {};
        }

        if (child) {
            $(this).on('click tab', child, handler);
        } else {
            $(this).on('click tab', handler);
        }
    };

    return dom;
};

/***/ }),

/***/ "./src/core/event.js":
/*!***************************!*\
  !*** ./src/core/event.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Event = function (sender) {
    this._sender = sender;
    this._listeners = [];
};

(function (p) {
    p.attach = function (obj, fn) {
        var that = this;
        var listener = {
            obj: obj,
            fn: fn,
            destroy: function destroy() {
                that.detach(this);
            }
        };
        this._listeners.push(listener);
        return listener;
    };

    p.detach = function (listener) {
        var listeners = this._listeners || [];
        var index = listeners.indexOf(listener);
        if (index > -1) return listeners.splice(index, 1);
    };

    p.clear = function () {
        var listeners = this._listeners;
        while (listeners.length) {
            listeners.pop().destroy();
        }
    };

    p.notify = function () {
        var args = arguments;
        this._listeners.slice().forEach(function (listener) {
            listener.fn.apply(listener.obj, args);
        });
    };

    p.hasListeners = function () {
        return !!this._listeners.length;
    };
})(Entry.Event.prototype);

/***/ }),

/***/ "./src/core/model.js":
/*!***************************!*\
  !*** ./src/core/model.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * Entry Model object generator.
 * @param {object} obj
 */

Entry.Model = function (obj, isSeal) {
    var model = Entry.Model;
    model.generateSchema(obj);
    model.generateSetter(obj);
    model.generateObserve(obj);
    if (isSeal === undefined || isSeal) Object.seal(obj);

    return obj;
};

(function (m) {
    m.generateSchema = function (obj) {
        var schema = obj.schema;
        if (schema === undefined) return;
        try {
            schema = JSON.parse(JSON.stringify(schema));
        } catch (e) {
            console.log(schema);
            console.error(e);
        }
        obj.data = {};
        for (var key in schema) {
            (function (localKey) {
                obj.data[localKey] = schema[localKey];
                Object.defineProperty(obj, localKey, {
                    get: function get() {
                        return obj.data[localKey];
                    }
                });
            })(key);
        }
        obj._toJSON = this._toJSON;
    };

    m.generateSetter = function (obj) {
        obj.set = this.set;
    };

    m.set = function (data, isSilent) {
        var oldValue = {};
        var keys = Object.keys(data);
        for (var key in this.data) {
            if (data[key] !== undefined) {
                if (data[key] === this.data[key]) {
                    keys.splice(keys.indexOf(key), 1);
                } else {
                    oldValue[key] = this.data[key];
                    if (data[key] instanceof Array) this.data[key] = data[key].concat();else this.data[key] = data[key];
                }
            }
        }
        if (!isSilent) this.notify(keys, oldValue);
    };

    m.generateObserve = function (obj) {
        obj.observers = [];
        obj.observe = this.observe;
        obj.unobserve = this.unobserve;
        obj.notify = this.notify;
    };

    /*
     * @param {object} object that observe this model
     * @param {string} eventFunc will be call when notify
     * @param {?object} attrs includes which property to watch. Should be array or null.
     * @param {boolean} isNotify
     */
    m.observe = function (object, funcName, attrs, isNotify) {
        var observer = new Entry.Observer(this.observers, object, funcName, attrs);
        if (isNotify !== false) object[funcName]([]);
        return observer;
    };

    m.unobserve = function (observer) {
        observer.destroy();
    };

    /*
     * @param {object|string} key
     * @param {} oldValue
     */
    m.notify = function (keys, oldValue) {
        if (typeof keys === 'string') keys = [keys];

        var that = this;
        var observers = that.observers;

        if (!observers.length) return;

        var intersect = Entry.Utils.intersectArray;

        observers.forEach(function (observeData) {
            var attrs = keys;
            if (observeData.attrs !== undefined) attrs = intersect(observeData.attrs, keys);

            if (!attrs.length) return;

            observeData.object[observeData.funcName](attrs.forEach(function (key) {
                return {
                    name: key,
                    object: that,
                    oldValue: oldValue[key]
                };
            }));
        });
    };

    m._toJSON = function () {
        var json = {};
        for (var key in this.data) {
            json[key] = this.data[key];
        }return json;
    };
})(Entry.Model);

/***/ }),

/***/ "./src/core/observer.js":
/*!******************************!*\
  !*** ./src/core/observer.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * Entry Observer object Constructor
 * @param {object} obj
 */

Entry.Observer = function (parent, object, funcName, attrs) {
    this.parent = parent;
    this.object = object;
    this.funcName = funcName;
    this.attrs = attrs;
    parent.push(this);
};

(function (p) {
    p.destroy = function () {
        var parent = this.parent;
        var index = parent.indexOf(this);
        if (index > -1) parent.splice(index, 1);
        return this;
    };
})(Entry.Observer.prototype);

/***/ }),

/***/ "./src/core/svg.js":
/*!*************************!*\
  !*** ./src/core/svg.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview View element constructor
 * @author Kyumin Sim
 * @version 0.2
 */


/**
 * Function for construct html dom element.
 * @function
 * @param {string} tag or html to construct dom element.
 * @param {?object} options include id, classes, parent etc.
 */

Entry.SVG = function (id, svgDom) {
    var element = svgDom ? svgDom : document.getElementById(id);
    return Entry.SVG.createElement(element);
};

Entry.SVG.NS = 'http://www.w3.org/2000/svg';
Entry.SVG.NS_XLINK = 'http://www.w3.org/1999/xlink';

Entry.SVG.createElement = function (tag, options) {
    var el;
    if (typeof tag === 'string') el = document.createElementNS(Entry.SVG.NS, tag);else el = tag;

    if (options) {
        if (options.href) {
            el.setAttributeNS(Entry.SVG.NS_XLINK, 'href', options.href);
            delete options.href;
        }

        for (var key in options) {
            el.setAttribute(key, options[key]);
        }
    }

    //add util functions
    el.elem = Entry.SVG.createElement;
    el.attr = Entry.SVG.attr;
    el.addClass = Entry.SVG.addClass;
    el.removeClass = Entry.SVG.removeClass;
    el.hasClass = Entry.SVG.hasClass;
    el.remove = Entry.SVG.remove;
    el.removeAttr = Entry.SVG.removeAttr;

    if (tag === 'text') el.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');

    if (this instanceof SVGElement) this.appendChild(el);

    return el;
};

Entry.SVG.attr = function (options, property) {
    if (typeof options === 'string') {
        var o = {};
        o[options] = property;
        options = o;
    }

    if (options) {
        if (options.href) {
            this.setAttributeNS(Entry.SVG.NS_XLINK, 'href', options.href);
            delete options.href;
        }
        for (var key in options) {
            this.setAttribute(key, options[key]);
        }
    }

    return this;
};

Entry.SVG.addClass = function (className) {
    var classAttr = this.getAttribute('class');
    for (var i = 0; i < arguments.length; i++) {
        var className = arguments[i];
        if (!this.hasClass(className)) classAttr += ' ' + className;
    }

    this.setAttribute('class', classAttr.replace(/\s+/g, ' '));
    return this;
};

Entry.SVG.removeClass = function (className) {
    var classAttr = this.getAttribute('class');
    for (var i = 0; i < arguments.length; i++) {
        var className = arguments[i];
        if (this.hasClass(className)) {
            classAttr = classAttr.replace(new RegExp('(\\s|^)' + className + '(\\s|$)'), ' ');
        }
    }

    this.setAttribute('class', classAttr.replace(/\s+/g, ' '));
    return this;
};

Entry.SVG.hasClass = function (className) {
    var attr = this.getAttribute('class');
    if (!attr) return false;else return attr.match(new RegExp('(\\s|^)' + className + '(\\s|$)'));
};

Entry.SVG.remove = function () {
    if (this.parentNode) this.parentNode.removeChild(this);
};

Entry.SVG.removeAttr = function (attrName) {
    this.removeAttribute(attrName);
};

/***/ }),

/***/ "./src/css/entry.less":
/*!****************************!*\
  !*** ./src/css/entry.less ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./src/entry.js":
/*!**********************!*\
  !*** ./src/entry.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var Entry = {};

module.exports = Entry;
global.Entry = Entry;

__webpack_require__(/*! ./css/entry.less */ "./src/css/entry.less");
__webpack_require__(/*! ./class/container */ "./src/class/container.js");
__webpack_require__(/*! ./class/dialog */ "./src/class/dialog.js");
__webpack_require__(/*! ./class/doneProject */ "./src/class/doneProject.js");
__webpack_require__(/*! ./class/engine */ "./src/class/engine.js");
__webpack_require__(/*! ./class/entity */ "./src/class/entity.js");
__webpack_require__(/*! ./class/function */ "./src/class/function.js");
__webpack_require__(/*! ./class/helper */ "./src/class/helper.js");
__webpack_require__(/*! ./class/hw */ "./src/class/hw.js");
__webpack_require__(/*! ./class/hw_monitor */ "./src/class/hw_monitor.js");
__webpack_require__(/*! ./class/object */ "./src/class/object.js");
__webpack_require__(/*! ./class/painter */ "./src/class/painter.js");
__webpack_require__(/*! ./class/pdf */ "./src/class/pdf.js");
__webpack_require__(/*! ./class/playground */ "./src/class/playground.js");
__webpack_require__(/*! ./class/popup */ "./src/class/popup.js");
__webpack_require__(/*! ./class/popup_helper */ "./src/class/popup_helper.js");
__webpack_require__(/*! ./class/popup_list */ "./src/class/popup_list.js");
__webpack_require__(/*! ./class/project */ "./src/class/project.js");
__webpack_require__(/*! ./class/property_panel */ "./src/class/property_panel.js");
__webpack_require__(/*! ./class/reporter */ "./src/class/reporter.js");
__webpack_require__(/*! ./class/scene */ "./src/class/scene.js");
__webpack_require__(/*! ./class/script */ "./src/class/script.js");
__webpack_require__(/*! ./class/stage */ "./src/class/stage.js");
__webpack_require__(/*! ./class/stamp_entity */ "./src/class/stamp_entity.js");
__webpack_require__(/*! ./class/toast */ "./src/class/toast.js");
__webpack_require__(/*! ./class/variable */ "./src/class/variable.js");
__webpack_require__(/*! ./class/variable_container */ "./src/class/variable_container.js");
__webpack_require__(/*! ./command/command */ "./src/command/command.js");
__webpack_require__(/*! ./command/commander */ "./src/command/commander.js");
__webpack_require__(/*! ./core/collection */ "./src/core/collection.js");
__webpack_require__(/*! ./core/db */ "./src/core/db.js");
__webpack_require__(/*! ./core/dom */ "./src/core/dom.js");
__webpack_require__(/*! ./core/event */ "./src/core/event.js");
__webpack_require__(/*! ./core/model */ "./src/core/model.js");
__webpack_require__(/*! ./core/observer */ "./src/core/observer.js");
__webpack_require__(/*! ./core/svg */ "./src/core/svg.js");
__webpack_require__(/*! ./extensions/extension */ "./src/extensions/extension.js");
__webpack_require__(/*! ./extensions/target_checker */ "./src/extensions/target_checker.js");
__webpack_require__(/*! ./log/activity */ "./src/log/activity.js");
__webpack_require__(/*! ./log/activityReporter */ "./src/log/activityReporter.js");
__webpack_require__(/*! ./log/recorder */ "./src/log/recorder.js");
__webpack_require__(/*! ./log/state */ "./src/log/state.js");
__webpack_require__(/*! ./log/state_manager */ "./src/log/state_manager.js");
__webpack_require__(/*! ./model/block_model */ "./src/model/block_model.js");
__webpack_require__(/*! ./model/block_render_model */ "./src/model/block_render_model.js");
__webpack_require__(/*! ./model/box_model */ "./src/model/box_model.js");
__webpack_require__(/*! ./model/drag_instance */ "./src/model/drag_instance.js");
__webpack_require__(/*! ./model/thread_model */ "./src/model/thread_model.js");
__webpack_require__(/*! ./parser-no/block */ "./src/parser-no/block.js");
__webpack_require__(/*! ./parser-no/js */ "./src/parser-no/js.js");
__webpack_require__(/*! ./parser-no/parser */ "./src/parser-no/parser.js");
__webpack_require__(/*! ./playground/block */ "./src/playground/block.js");
__webpack_require__(/*! ./playground/block_entry */ "./src/playground/block_entry.js");
__webpack_require__(/*! ./playground/basic_block */ "./src/playground/basic_block.js");
__webpack_require__(/*! ./playground/block_entry_mini */ "./src/playground/block_entry_mini.js");
__webpack_require__(/*! ./playground/block_menu */ "./src/playground/block_menu.js");
__webpack_require__(/*! ./playground/block_menu_scroll */ "./src/playground/block_menu_scroll.js");
__webpack_require__(/*! ./playground/block_view */ "./src/playground/block_view.js");
__webpack_require__(/*! ./playground/board */ "./src/playground/board.js");
__webpack_require__(/*! ./playground/code */ "./src/playground/code.js");
__webpack_require__(/*! ./playground/code_view */ "./src/playground/code_view.js");
__webpack_require__(/*! ./playground/connection_ripple */ "./src/playground/connection_ripple.js");
__webpack_require__(/*! ./playground/executors */ "./src/playground/executors.js");
__webpack_require__(/*! ./playground/globalSvg */ "./src/playground/globalSvg.js");
__webpack_require__(/*! ./playground/mutator */ "./src/playground/mutator.js");
__webpack_require__(/*! ./playground/renderView */ "./src/playground/renderView.js");
__webpack_require__(/*! ./playground/scroll */ "./src/playground/scroll.js");
__webpack_require__(/*! ./playground/skeleton */ "./src/playground/skeleton.js");
__webpack_require__(/*! ./playground/skinner */ "./src/playground/skinner.js");
__webpack_require__(/*! ./playground/thread */ "./src/playground/thread.js");
__webpack_require__(/*! ./playground/thread_view */ "./src/playground/thread_view.js");
__webpack_require__(/*! ./playground/trashcan */ "./src/playground/trashcan.js");
__webpack_require__(/*! ./playground/vim */ "./src/playground/vim.js");
__webpack_require__(/*! ./playground/workspace */ "./src/playground/workspace.js");
__webpack_require__(/*! ./textcoding/parser */ "./src/textcoding/parser.js");
__webpack_require__(/*! ./util/block_driver */ "./src/util/block_driver.js");
__webpack_require__(/*! ./util/contextmenu */ "./src/util/contextmenu.js");
__webpack_require__(/*! ./util/curtain */ "./src/util/curtain.js");
__webpack_require__(/*! ./util/fuzzy */ "./src/util/fuzzy.js");
__webpack_require__(/*! ./util/init */ "./src/util/init.js");
__webpack_require__(/*! ./util/loader */ "./src/util/loader.js");
__webpack_require__(/*! ./util/popup */ "./src/util/popup.js");
__webpack_require__(/*! ./util/restrictor */ "./src/util/restrictor.js");
__webpack_require__(/*! ./util/static */ "./src/util/static.js");
__webpack_require__(/*! ./util/toast */ "./src/util/toast.js");
__webpack_require__(/*! ./util/tooltip */ "./src/util/tooltip.js");
__webpack_require__(/*! ./util/tvCast */ "./src/util/tvCast.js");
__webpack_require__(/*! ./util/utils */ "./src/util/utils.js");
__webpack_require__(/*! ./util/youtube */ "./src/util/youtube.js");
__webpack_require__(/*! ./command/commands/block */ "./src/command/commands/block.js");
__webpack_require__(/*! ./command/commands/container */ "./src/command/commands/container.js");
__webpack_require__(/*! ./command/commands/engine */ "./src/command/commands/engine.js");
__webpack_require__(/*! ./command/commands/object */ "./src/command/commands/object.js");
__webpack_require__(/*! ./command/commands/painter */ "./src/command/commands/painter.js");
__webpack_require__(/*! ./command/commands/playground */ "./src/command/commands/playground.js");
__webpack_require__(/*! ./command/commands/textbox */ "./src/command/commands/textbox.js");
__webpack_require__(/*! ./command/commands/variableContainer */ "./src/command/commands/variableContainer.js");
__webpack_require__(/*! ./command/commands/scene */ "./src/command/commands/scene.js");
__webpack_require__(/*! ./playground/blocks/block_albert */ "./src/playground/blocks/block_albert.js");
__webpack_require__(/*! ./playground/blocks/block_altino */ "./src/playground/blocks/block_altino.js");
__webpack_require__(/*! ./playground/blocks/block_arduino */ "./src/playground/blocks/block_arduino.js");
__webpack_require__(/*! ./playground/blocks/block_bitbrick */ "./src/playground/blocks/block_bitbrick.js");
__webpack_require__(/*! ./playground/blocks/block_blacksmith */ "./src/playground/blocks/block_blacksmith.js");
__webpack_require__(/*! ./playground/blocks/block_byrobot_dronefighter_controller */ "./src/playground/blocks/block_byrobot_dronefighter_controller.js");
__webpack_require__(/*! ./playground/blocks/block_byrobot_dronefighter_drive */ "./src/playground/blocks/block_byrobot_dronefighter_drive.js");
__webpack_require__(/*! ./playground/blocks/block_byrobot_dronefighter_flight */ "./src/playground/blocks/block_byrobot_dronefighter_flight.js");
__webpack_require__(/*! ./playground/blocks/block_byrobot_petrone_v2_controller */ "./src/playground/blocks/block_byrobot_petrone_v2_controller.js");
__webpack_require__(/*! ./playground/blocks/block_byrobot_petrone_v2_drive */ "./src/playground/blocks/block_byrobot_petrone_v2_drive.js");
__webpack_require__(/*! ./playground/blocks/block_byrobot_petrone_v2_flight */ "./src/playground/blocks/block_byrobot_petrone_v2_flight.js");
__webpack_require__(/*! ./playground/blocks/block_chocopi */ "./src/playground/blocks/block_chocopi.js");
__webpack_require__(/*! ./playground/blocks/block_cobl */ "./src/playground/blocks/block_cobl.js");
__webpack_require__(/*! ./playground/blocks/block_coconut */ "./src/playground/blocks/block_coconut.js");
__webpack_require__(/*! ./playground/blocks/block_codeino */ "./src/playground/blocks/block_codeino.js");
__webpack_require__(/*! ./playground/blocks/block_codestar */ "./src/playground/blocks/block_codestar.js");
__webpack_require__(/*! ./playground/blocks/block_dadublock */ "./src/playground/blocks/block_dadublock.js");
__webpack_require__(/*! ./playground/blocks/block_edumaker */ "./src/playground/blocks/block_edumaker.js");
__webpack_require__(/*! ./playground/blocks/block_ev3 */ "./src/playground/blocks/block_ev3.js");
__webpack_require__(/*! ./playground/blocks/block_hamster */ "./src/playground/blocks/block_hamster.js");
__webpack_require__(/*! ./playground/blocks/block_hummingbird */ "./src/playground/blocks/block_hummingbird.js");
__webpack_require__(/*! ./playground/blocks/block_iboard */ "./src/playground/blocks/block_iboard.js");
__webpack_require__(/*! ./playground/blocks/block_jdkit */ "./src/playground/blocks/block_jdkit.js");
__webpack_require__(/*! ./playground/blocks/block_mechatronics_4d */ "./src/playground/blocks/block_mechatronics_4d.js");
__webpack_require__(/*! ./playground/blocks/block_modi */ "./src/playground/blocks/block_modi.js");
__webpack_require__(/*! ./playground/blocks/block_neobot */ "./src/playground/blocks/block_neobot.js");
__webpack_require__(/*! ./playground/blocks/block_neobot_sensor_theme */ "./src/playground/blocks/block_neobot_sensor_theme.js");
__webpack_require__(/*! ./playground/blocks/block_roborobo */ "./src/playground/blocks/block_roborobo.js");
__webpack_require__(/*! ./playground/blocks/block_robotis */ "./src/playground/blocks/block_robotis.js");
__webpack_require__(/*! ./playground/blocks/block_robotori */ "./src/playground/blocks/block_robotori.js");
__webpack_require__(/*! ./playground/blocks/block_truerobot */ "./src/playground/blocks/block_truerobot.js");
__webpack_require__(/*! ./playground/blocks/block_turtle */ "./src/playground/blocks/block_turtle.js");
__webpack_require__(/*! ./playground/blocks/block_xbot */ "./src/playground/blocks/block_xbot.js");
__webpack_require__(/*! ./playground/extension/extension */ "./src/playground/extension/extension.js");
__webpack_require__(/*! ./playground/extension/guide */ "./src/playground/extension/guide.js");
__webpack_require__(/*! ./playground/extension/side_tag */ "./src/playground/extension/side_tag.js");
__webpack_require__(/*! ./playground/field/angle */ "./src/playground/field/angle.js");
__webpack_require__(/*! ./playground/field/block */ "./src/playground/field/block.js");
__webpack_require__(/*! ./playground/field/color */ "./src/playground/field/color.js");
__webpack_require__(/*! ./playground/field/dropdown */ "./src/playground/field/dropdown.js");
__webpack_require__(/*! ./playground/field/dropdownDynamic */ "./src/playground/field/dropdownDynamic.js");
__webpack_require__(/*! ./playground/field/field */ "./src/playground/field/field.js");
__webpack_require__(/*! ./playground/field/image */ "./src/playground/field/image.js");
__webpack_require__(/*! ./playground/field/indicator */ "./src/playground/field/indicator.js");
__webpack_require__(/*! ./playground/field/keyboardInput */ "./src/playground/field/keyboardInput.js");
__webpack_require__(/*! ./playground/field/lineBreak */ "./src/playground/field/lineBreak.js");
__webpack_require__(/*! ./playground/field/output */ "./src/playground/field/output.js");
__webpack_require__(/*! ./playground/field/statement */ "./src/playground/field/statement.js");
__webpack_require__(/*! ./playground/field/text */ "./src/playground/field/text.js");
__webpack_require__(/*! ./playground/field/textInput */ "./src/playground/field/textInput.js");
__webpack_require__(/*! ./textcoding/ast/jsAstGenerator */ "./src/textcoding/ast/jsAstGenerator.js");
__webpack_require__(/*! ./textcoding/ast/pyAstGenerator */ "./src/textcoding/ast/pyAstGenerator.js");
__webpack_require__(/*! ./textcoding/data_processing/map */ "./src/textcoding/data_processing/map.js");
__webpack_require__(/*! ./textcoding/data_processing/queue */ "./src/textcoding/data_processing/queue.js");
__webpack_require__(/*! ./textcoding/error/textCodingError */ "./src/textcoding/error/textCodingError.js");
__webpack_require__(/*! ./textcoding/hint/python */ "./src/textcoding/hint/python.js");
__webpack_require__(/*! ./textcoding/static/codeMap */ "./src/textcoding/static/codeMap.js");
__webpack_require__(/*! ./textcoding/static/keyboardCode */ "./src/textcoding/static/keyboardCode.js");
__webpack_require__(/*! ./textcoding/util/console */ "./src/textcoding/util/console.js");
__webpack_require__(/*! ./textcoding/util/textCodingUtil */ "./src/textcoding/util/textCodingUtil.js");

window.Entry = Entry;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./src/extensions/extension.js":
/*!*************************************!*\
  !*** ./src/extensions/extension.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Extension object for ws.
 */


/**
 * @constructor
 */

Entry.Extension = function () {};

(function (p) {
  p.renderView = function () {};

  p.toggleInformation = function () {};
})(Entry.Extension.prototype);

/***/ }),

/***/ "./src/extensions/target_checker.js":
/*!******************************************!*\
  !*** ./src/extensions/target_checker.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview TargetChecker for courseware.
 */


__webpack_require__(/*! ../util/utils */ "./src/util/utils.js");
__webpack_require__(/*! ../extensions/extension */ "./src/extensions/extension.js");

/**
 * @constructor
 */
Entry.TargetChecker = function (code, isForEdit, type) {
    this.isForEdit = isForEdit;
    this.goals = [];
    this.publicGoals = [];
    this.unachievedGoals = [];
    this.remainPublicGoal = 0;
    this.lastMessage = "";
    if (this.isForEdit) {
        this.watchingBlocks = [];
        Entry.playground.mainWorkspace.blockMenu.unbanClass("checker");
        Entry.addEventListener("run", this.reRegisterAll.bind(this));
    }

    this.type = type || "mission";

    this.isFail = false;
    this.isSuccess = false;

    this.entity = this;
    this.parent = this;

    Entry.achieveEvent = new Entry.Event();
    Entry.addEventListener("stop", this.reset.bind(this));

    Entry.registerAchievement = this.registerAchievement.bind(this);
    this.script = new Entry.Code(code ? code : [], this);
    Entry.targetChecker = this;
};

Entry.Utils.inherit(Entry.Extension, Entry.TargetChecker);

(function (p) {
    p.renderView = function () {
        this._view = Entry.Dom('li', {
            class: "targetChecker"
        });

        this._view.bindOnClick(function (e) {
            Entry.playground.injectObject(this);
        }.bind(this));
        this.updateView();
        if (!this.isForEdit) this._view.addClass("entryRemove");
        return this._view;
    };

    p.generateStatusView = function (isForIframe) {
        this._statusView = Entry.Dom('div', {
            class: "entryTargetStatus"
        });
        var innerWrapper = Entry.Dom('div', {
            class: "innerWrapper",
            parent: this._statusView
        });
        this._statusViewIndicator = Entry.Dom('div', {
            class: "statusIndicator",
            parent: innerWrapper
        });
        var statusViewContentWrapper = Entry.Dom('div', {
            class: "statusMessage",
            parent: innerWrapper
        });
        this._statusViewContent = Entry.Dom('p', {
            parent: statusViewContentWrapper
        });
        if (isForIframe) {
            $(Entry.view_).addClass("iframeWithTargetStatus");
            Entry.view_.appendChild(this._statusView[0]);
        }
        this.updateView();
        this.showDefaultMessage();
    };

    p.updateView = function () {
        if (this._view) {
            this.renderViewMessage();
            if (this.isSuccess) this._view.addClass("success");else this._view.removeClass("success");
            if (this.isFail) this._view.addClass("fail");else this._view.removeClass("fail");
        }
        if (this._statusView) {
            this.renderIndicatorMessage();
        }
    };

    p.getStatusView = function () {
        if (!this._statusView) this.generateStatusView();
        return this._statusView;
    };

    p.showStatusMessage = function (message) {
        this.lastMessage = message;
        this.lastIndicatorMessage = null;
        this.renderIndicatorMessage();
        if (this._statusViewContent && !this.isFail) this._statusViewContent.text(message);
        this.renderViewMessage();
    };

    p.achieveCheck = function (isSuccess, id) {
        if (this.isFail || !Entry.engine.achieveEnabled) return;
        if (isSuccess) this.achieveGoal(id);else this.fail(id);
    };

    p.achieveGoal = function (id) {
        if (this.isSuccess || this.isFail || this.unachievedGoals.indexOf(id) < 0) return;
        this.unachievedGoals.splice(this.unachievedGoals.indexOf(id), 1);
        if (this.publicGoals.indexOf(id) > -1) this.remainPublicGoal--;
        if (this.remainPublicGoal === 0) {
            this.isSuccess = true;
            this.showSuccessMessage();
            Entry.achieveEvent.notify("success", id);
        }
        this.updateView();
    };

    p.fail = function (id) {
        if (this.isSuccess || this.isFail) return;
        this.showStatusMessage(id);
        this.isFail = true;
        Entry.achieveEvent.notify("fail", id);
        this.updateView();
    };

    p.reset = function () {
        this.unachievedGoals = this.goals.concat();
        this.remainPublicGoal = this.publicGoals.length;
        this.isFail = false;
        this.isSuccess = false;
        this.updateView();
        this.showDefaultMessage();
    };

    p.showDefaultMessage = function () {
        switch (this.type) {
            case "mission":
                this.showStatusMessage("작품을 실행 해봅시다.");
                break;
            case "mission_intro":
                this.showStatusMessage("작품을 실행하며 미션을 파악해 봅시다.");
                this.renderIndicatorMessage("미션");
                break;
            case "guide_intro":
                this.showStatusMessage("작품을 실행하며 무엇을 만들지 알아 봅시다.");
                this.renderIndicatorMessage("안내");
                break;
        }
    };

    p.showSuccessMessage = function () {
        switch (this.type) {
            case "mission":
                break;
            case "mission_intro":
                this.showStatusMessage("이제 작품을 만들며 미션을 해결해 봅시다.");
                this.renderIndicatorMessage("미션");
                break;
            case "guide_intro":
                this.showStatusMessage("이제 학습을 시작해 봅시다.");
                this.renderIndicatorMessage("안내");
                break;
        }
    };

    p.checkGoal = function (goalName) {
        return this.goals.indexOf(goalName) > -1 && this.unachievedGoals.indexOf(goalName) < 0;
    };

    p.registerAchievement = function (block) {
        if (this.isForEdit) this.watchingBlocks.push(block);
        if (block.params[1] && this.goals.indexOf(block.params[0] + "") < 0) {
            this.goals.push(block.params[0] + "");
            if (block.params[2]) this.publicGoals.push(block.params[0] + "");
            this.remainPublicGoal = this.publicGoals.length;
        }
        this.reset();
    };

    p.reRegisterAll = function () {
        var blocks = this.script.getBlockList(false, "check_lecture_goal");
        this.watchingBlocks = blocks;
        this.goals = _.uniq(blocks.filter(function (b) {
            return b.params[1] === 1;
        }).map(function (b) {
            return b.params[0] + "";
        }));
        this.publicGoals = _.uniq(blocks.filter(function (b) {
            return b.params[1] === 1 && b.params[2] === 1;
        }).map(function (b) {
            return b.params[0] + "";
        }));
        this.remainPublicGoal = this.publicGoals.length;
    };

    p.clearExecutor = function () {
        this.script.clearExecutors();
    };

    p.destroy = function () {
        this.reset();
        Entry.achieveEvent.clear();
        this.script.destroy();
        $(this._view).remove();
    };

    p.renderViewMessage = function () {
        var len = this.goals.length;
        var publicLen = this.publicGoals.length;
        if (this._view) this._view.html("목표 : " + (len - this.unachievedGoals.length) + " / " + len + " , 공식 목표 : " + (publicLen - this.remainPublicGoal) + " / " + publicLen + "<br>" + this.lastMessage);
    };

    p.renderIndicatorMessage = function (message) {
        if (!this._statusViewIndicator) return;
        if (message) this.lastIndicatorMessage = message;

        var publicLen = this.publicGoals.length;
        this._statusViewIndicator.text(this.lastIndicatorMessage || Math.min(publicLen - this.remainPublicGoal + 1, publicLen) + "/" + publicLen);
    };
})(Entry.TargetChecker.prototype);

/***/ }),

/***/ "./src/log/activity.js":
/*!*****************************!*\
  !*** ./src/log/activity.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Activity = function (name, data) {
    this.name = name;
    this.timestamp = new Date();
    var arr = [];
    if (data !== undefined) {
        for (var i = 0, len = data.length; i < len; i++) {
            var datum = data[i];
            arr.push({
                key: datum[0],
                value: datum[1]
            });
        }
    }
    this.data = arr;
};

/***/ }),

/***/ "./src/log/activityReporter.js":
/*!*************************************!*\
  !*** ./src/log/activityReporter.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.ActivityReporter = function () {
    this._activities = [];
};

(function (p) {
    p.add = function (data) {
        if (!data || data.length === 0) return;
        var activity;
        if (data instanceof Entry.Activity) activity = data;else {
            var type = data.shift();
            activity = new Entry.Activity(type, data);
        }

        this._activities.push(activity);
    };

    p.clear = function () {
        this._activities = [];
    };

    p.get = function () {
        return this._activities;
    };

    p.report = function () {};
})(Entry.ActivityReporter.prototype);

/***/ }),

/***/ "./src/log/recorder.js":
/*!*****************************!*\
  !*** ./src/log/recorder.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Recorder = function () {
    this._recordData = [];
    Entry.commander.addReporter(this);
};

(function (p) {
    p.add = function (data) {
        var commandType = data[0];
        if (!commandType) return;
        var command = Entry.Command[commandType];
        switch (command.recordable) {
            case Entry.STATIC.RECORDABLE.SUPPORT:
                this._recordData.push(data);
                Entry.toast.warning('Record', Lang.Command[commandType + '']);
                return;
            case Entry.STATIC.RECORDABLE.SKIP:
                return;
            case Entry.STATIC.RECORDABLE.ABANDON:
                Entry.toast.alert('지원하지 않음');
                return;
        }
    };

    p.getData = function () {
        return this._recordData;
    };
})(Entry.Recorder.prototype);

/***/ }),

/***/ "./src/log/state.js":
/*!**************************!*\
  !*** ./src/log/state.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview State class for undo and redo.
 */


/**
 * @constructor
 */

Entry.State = function (type, caller, func, param) {
  /**
   * function's caller.
   * @type {!object}
   */
  this.caller = caller;
  /**
   * function to recover state.
   * @type {!function}
   */
  this.func = func;
  /**
   * parameters for function.
   * @type {Array}
   */
  if (arguments.length > 3) this.params = Array.prototype.slice.call(arguments).slice(3);
  /**
   * message for interface.
   * @type {?String}
   * */
  this.message = type;
  /**
   * born time
   * @type {Number}
   * */
  this.time = Entry.getUpTime();

  this.isPass = Entry.Command[type] ? Entry.Command[type].isPass : false;

  this.id = Entry.generateHash();
};

/**
 * generate message for interface.
 */
Entry.State.prototype.generateMessage = function () {};

/***/ }),

/***/ "./src/log/state_manager.js":
/*!**********************************!*\
  !*** ./src/log/state_manager.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview State Manager class for undo and redo.
 */


/**
 * @constructor
 */

Entry.StateManager = function () {
    this.undoStack_ = [];
    this.redoStack_ = [];
    /** prevent add command when undo and redo */
    this.isRestore = false;
    this._isRedoing = false;
    this.isIgnore = false;
    Entry.addEventListener('cancelLastCommand', function (e) {
        Entry.stateManager.cancelLastCommand();
    });
    Entry.addEventListener('saveWorkspace', function (e) {
        Entry.stateManager.addStamp();
    });
    Entry.addEventListener('undo', function (e) {
        Entry.stateManager.undo();
    });
    Entry.addEventListener('redo', function (e) {
        Entry.stateManager.redo();
    });
};

/**
 * @param {!Element} stateManagerView stateManagerView for undo redo control.
 * @param {?string} option for choose type of view.
 */
Entry.StateManager.prototype.generateView = function (stateManagerView, option) {};

/**
 * Add command to record
 * @param {String} type command type
 * @param {!object} caller function caller
 * @param {!func} func function to restore
 * @param {} params function's parameters or state data
 */
Entry.StateManager.prototype.addCommand = function (type, caller, func, params) {
    if (this.isIgnoring()) return;
    var state = new Entry.State();
    Entry.State.prototype.constructor.apply(state, Array.prototype.slice.call(arguments));

    if (this.isRestoring()) {
        this.redoStack_.push(state);
    } else {
        this.undoStack_.push(state);
        if (!this._isRedoing) this.redoStack_ = [];
    }
    if (Entry.reporter) Entry.reporter.report(state);
    if (Entry.creationChangedEvent) Entry.creationChangedEvent.notify();
    return state;
};

/**
 * Cancel last command
 */
Entry.StateManager.prototype.cancelLastCommand = function () {
    if (!this.canUndo()) return;
    this.undoStack_.pop();
    if (Entry.creationChangedEvent) Entry.creationChangedEvent.notify();
};

Entry.StateManager.prototype.getLastCommand = function () {
    return this.undoStack_[this.undoStack_.length - 1];
};

Entry.StateManager.prototype.getLastCommandById = function (id) {
    var undoStack = this.undoStack_;
    var len = undoStack.length - 1;
    for (var i = len; i >= 0; i--) {
        var state = undoStack[i];
        if (state.id === id) return state;
    }
};

Entry.StateManager.prototype.getLastRedoCommand = function () {
    return this.redoStack_[this.redoStack_.length - 1];
};

Entry.StateManager.prototype.removeAllPictureCommand = function () {
    this.undoStack_ = this.undoStack_.filter(function (stack) {
        return !(stack.message >= 400 && stack.message < 500);
    });
    this.redoStack_ = this.redoStack_.filter(function (stack) {
        return !(stack.message >= 400 && stack.message < 500);
    });
};

/**
 * Do undo
 */
Entry.StateManager.prototype.undo = function (count) {
    if (!this.canUndo() || this.isRestoring()) return;
    this.addActivity("undo");
    this.startRestore();
    var isFirst = true;
    while (this.undoStack_.length) {
        var state = this.undoStack_.pop();
        state.func.apply(state.caller, state.params);

        var command = this.getLastRedoCommand();

        if (isFirst) {
            command.isPass = false;
            isFirst = !isFirst;
        } else command.isPass = true;

        if (count) count--;

        if (!count && state.isPass !== true) break;
    }
    this.endRestore();
    if (Entry.disposeEvent) Entry.disposeEvent.notify();
    if (Entry.creationChangedEvent) Entry.creationChangedEvent.notify();
};

/**
 * Do redo
 */
Entry.StateManager.prototype.redo = function () {
    if (!this.canRedo() || this.isRestoring()) return;

    this._isRedoing = true;
    this.addActivity("undo");
    this.addActivity("redo");
    var isFirst = true;
    while (this.redoStack_.length) {
        var state = this.redoStack_.pop();
        var ret = state.func.apply(state.caller, state.params);

        if (isFirst) {
            ret.isPass(false);
            isFirst = !isFirst;
        } else ret.isPass(true);

        if (state.isPass !== true) break;
    }
    this._isRedoing = false;
    if (Entry.creationChangedEvent) Entry.creationChangedEvent.notify();
};

/**
 * update view.
 * toggle undo and redo button active when available.
 */
Entry.StateManager.prototype.updateView = function () {
    return;
    if (this.undoButton && this.redoButton) {
        if (this.canUndo()) this.undoButton.addClass('active');else this.undoButton.removeClass('active');

        if (this.canRedo()) this.redoButton.addClass('active');else this.redoButton.removeClass('active');
    }
};

/**
 * Start restoring
 */
Entry.StateManager.prototype.startRestore = function () {
    this.isRestore = true;
};

/**
 * End restoring
 */
Entry.StateManager.prototype.endRestore = function () {
    this.isRestore = false;
};

/**
 * Return true when restoring is not progress
 * @return {boolean} true when restoring is doing
 */
Entry.StateManager.prototype.isRestoring = function () {
    return this.isRestore;
};

/**
 * Start ignoring
 */
Entry.StateManager.prototype.startIgnore = function () {
    this.isIgnore = true;
};

/**
 * End ignoring
 */
Entry.StateManager.prototype.endIgnore = function () {
    this.isIgnore = false;
};

/**
 * Return true when restoring is not progress
 * @return {boolean} true when restoring is doing
 */
Entry.StateManager.prototype.isIgnoring = function () {
    return this.isIgnore;
};

/**
 * @return {!boolean} return true when undo is available
 */
Entry.StateManager.prototype.canUndo = function () {
    return this.undoStack_.length > 0 && Entry.engine.isState('stop');
};

/**
 * @return {!boolean} return true when redo is available
 */
Entry.StateManager.prototype.canRedo = function () {
    return this.redoStack_.length > 0 && Entry.engine.isState('stop');
};

/**
 * mark state which one saved
 */
Entry.StateManager.prototype.addStamp = function () {
    this.stamp = Entry.generateHash();
    if (this.undoStack_.length) this.undoStack_[this.undoStack_.length - 1].stamp = this.stamp;
};

/**
 * @return {!boolean} return true when project is up-to-date
 */
Entry.StateManager.prototype.isSaved = function () {
    return this.undoStack_.length === 0 || this.undoStack_[this.undoStack_.length - 1].stamp == this.stamp && typeof this.stamp == 'string';
};

/**
 * @param {String} activityType
 */
Entry.StateManager.prototype.addActivity = function (activityType) {
    if (Entry.reporter) Entry.reporter.report(new Entry.State(activityType));
};

Entry.StateManager.prototype.getUndoStack = function () {
    return this.undoStack_.slice(0);
};

Entry.StateManager.prototype.changeLastCommandType = function (type) {
    var cmd = this.getLastCommand();
    if (cmd) cmd.message = type;
    return cmd;
};

Entry.StateManager.prototype.clear = function () {
    while (this.undoStack_.length) {
        this.undoStack_.pop();
    }while (this.redoStack_.length) {
        this.redoStack_.pop();
    }
};

/***/ }),

/***/ "./src/model/block_model.js":
/*!**********************************!*\
  !*** ./src/model/block_model.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.BlockModel = function () {
    Entry.Model(this);
};

Entry.BlockModel.prototype.schema = {
    id: null,
    x: 0,
    y: 0,
    type: null,
    params: {},
    statements: {},
    prev: null,
    next: null,
    view: null
};

/***/ }),

/***/ "./src/model/block_render_model.js":
/*!*****************************************!*\
  !*** ./src/model/block_render_model.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.BlockRenderModel = function () {
    Entry.Model(this);
};

Entry.BlockRenderModel.prototype.schema = {
    id: 0,
    type: Entry.STATIC.BLOCK_RENDER_MODEL,
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    magneting: false
};

/***/ }),

/***/ "./src/model/box_model.js":
/*!********************************!*\
  !*** ./src/model/box_model.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.BoxModel = function () {
    Entry.Model(this);
};

Entry.BoxModel.prototype.schema = {
    id: 0,
    type: Entry.STATIC.BOX_MODEL,
    x: 0,
    y: 0,
    width: 0,
    height: 0
};

/***/ }),

/***/ "./src/model/drag_instance.js":
/*!************************************!*\
  !*** ./src/model/drag_instance.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.DragInstance = function (model) {
    Entry.Model(this);

    this.set(model);
};

Entry.DragInstance.prototype.schema = {
    type: Entry.STATIC.DRAG_INSTANCE,
    startX: 0,
    startY: 0,
    offsetX: 0,
    offsetY: 0,
    absX: 0,
    absY: 0,
    prev: null,
    height: 0,
    mode: 0,
    isNew: false
};

/***/ }),

/***/ "./src/model/thread_model.js":
/*!***********************************!*\
  !*** ./src/model/thread_model.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.ThreadModel = function () {
    Entry.Model(this);
};

Entry.ThreadModel.prototype.schema = {
    id: 0,
    type: Entry.STATIC.THREAD_MODEL,
    x: 0,
    y: 0,
    width: 0,
    minWidth: 0,
    height: 0
};

/***/ }),

/***/ "./src/parser-no/block.js":
/*!********************************!*\
  !*** ./src/parser-no/block.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


Entry.BlockParser = function (syntax) {
    this.syntax = syntax;

    this._iterVariableCount = 0;
    this._iterVariableChunk = ['i', 'j', 'k'];
};

(function (p) {
    p.Code = function (code) {
        if (code instanceof Entry.Thread) return this.Thread(code);
        if (code instanceof Entry.Block) return this.Block(code);

        var textCode = '',
            threads = code.getThreads();

        for (var i = 0; i < threads.length; i++) {
            var thread = threads[i];
            textCode += this.Thread(thread);
        }

        return textCode;
    };

    p.Thread = function (thread) {
        if (thread instanceof Entry.Block) return this.Block(thread);
        var code = '',
            blocks = thread.getBlocks();

        for (var i = 0; i < blocks.length; i++) {
            var block = blocks[i];
            code += this.Block(block);
        }
        return code;
    };

    p.Block = function (block) {
        var syntax = block._schema.syntax;
        if (!syntax) return '';
        var syntaxType = syntax[0];
        return this[syntaxType](block);
    };

    p.Program = function (block) {
        return '';
    };

    p.Scope = function (block) {
        var syntax = block._schema.syntax.concat();
        return syntax.splice(1, syntax.length - 1).join('.') + '();\n';
    };

    p.BasicFunction = function (block) {
        var statementCode = this.Thread(block.statements[0]);
        var code = 'function promise() {\n' + this.indent(statementCode) + '}\n';
        return code;
    };

    p.BasicIteration = function (block) {
        var iterateNumber = block.params[0];
        var iterVariable = this.publishIterateVariable();
        var statementCode = this.Thread(block.statements[0]);
        this.unpublishIterateVariable();
        var code = 'for (var ' + iterVariable + ' = 0; ' + iterVariable + ' < ' + iterateNumber + '; ' + iterVariable + '++){\n' + this.indent(statementCode) + '}\n';
        return code;
    };

    p.BasicIf = function (block) {
        var statementCode = this.Thread(block.statements[0]);
        var syntax = block._schema.syntax.concat();
        var code = 'if (' + syntax[1] + ') {\n' + this.indent(statementCode) + '}\n';
        return code;
    };

    p.BasicWhile = function (block) {
        var statementCode = this.Thread(block.statements[0]);
        var syntax = block._schema.syntax.concat();
        var code = 'while (' + syntax[1] + ') {\n' + this.indent(statementCode) + '}\n';
        return code;
    };

    p.indent = function (textCode) {
        var result = '    ';
        var indentedCode = textCode.split('\n');
        indentedCode.pop();
        result += indentedCode.join('\n    ') + '\n';
        return result;
    };

    // iterate variable
    p.publishIterateVariable = function () {
        var iterVariable = '';
        var iterVariableCount = this._iterVariableCount;
        do {
            var chunk = this._iterVariableChunk[iterVariableCount % 3];
            iterVariable = chunk + iterVariable;
            iterVariableCount = parseInt(iterVariableCount / 3) - 1;
            if (iterVariableCount === 0) iterVariable = this._iterVariableChunk[0] + iterVariable;
        } while (iterVariableCount > 0);
        this._iterVariableCount++;
        return iterVariable;
    };

    p.unpublishIterateVariable = function () {
        if (this._iterVariableCount) this._iterVariableCount--;
    };
})(Entry.BlockParser.prototype);

/***/ }),

/***/ "./src/parser-no/js.js":
/*!*****************************!*\
  !*** ./src/parser-no/js.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Entry.JSParser = function (syntax) {
    this.syntax = syntax;

    this.scopeChain = [];
    this.scope = null;
};

(function (p) {
    p.Program = function (node) {
        var code = [];
        var block = [];
        var body = node.body;

        //block statement

        block.push({
            type: this.syntax.Program
        });

        var separatedBlocks = this.initScope(node);

        block = block.concat(this.BlockStatement(node));

        this.unloadScope();

        code.push(block);
        code = code.concat(separatedBlocks);
        return code;
    };

    p.Identifier = function (node, scope) {
        if (scope) return scope[node.name];else return this.scope[node.name];
    };

    // Statement
    p.ExpressionStatement = function (node) {
        var expression = node.expression;
        return this[expression.type](expression);
    };

    p.ForStatement = function (node) {
        var init = node.init,
            test = node.test,
            update = node.update,
            body = node.body;

        var contents = '';

        var blockType = this.syntax.ForStatement;

        if (!blockType) {
            body = this[body.type](body);

            var startVal = init.declarations[0].init.value;
            var test = test;
            var op = test.operator;
            var endVal = test.right.value;
            var updateOp = update.operator;

            var res = 0;
            if (!(updateOp == '++')) {
                var temp = startVal;
                var startVal = endVal;
                var endVal = temp;
            }

            switch (op) {
                case '<':
                    res = endVal - startVal;
                    break;

                case '<=':
                    res = endVal + 1 - startVal;
                    break;

                case '>':
                    res = startVal - endVal;
                    break;

                case '>=':
                    res = startVal + 1 - endVal;
                    break;
            }

            return this.BasicIteration(node, res, body);
        } else {
            throw {
                message: '지원하지 않는 표현식 입니다.',
                node: node
            };
        }
    };

    p.BlockStatement = function (node) {
        var blocks = [];
        var body = node.body;

        for (var i = 0; i < body.length; i++) {
            var childNode = body[i];

            var block = this[childNode.type](childNode);
            if (!block) {
                continue;
            } else if (block.type === undefined) {
                throw {
                    message: '해당하는 블록이 없습니다.',
                    node: childNode
                };
            } else if (block) blocks.push(block);
        }

        return blocks;
    };

    p.EmptyStatement = function (node) {
        throw {
            message: 'empty는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.DebuggerStatement = function (node) {
        throw {
            message: 'debugger는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.WithStatement = function (node) {
        var object = node.object,
            body = node.body;

        throw {
            message: 'with는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    //control flow
    p.ReturnStaement = function (node) {
        var args = node.arguments;

        throw {
            message: 'return은 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.LabeledStatement = function (node) {
        var label = node.label,
            body = node.body;

        throw {
            message: 'label은 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.BreakStatement = function (node) {
        var label = node.label;

        throw {
            message: 'break는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.ContinueStatement = function (node) {
        var label = node.label;

        throw {
            message: 'continue는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.IfStatement = function (node) {
        var test = node.test,
            consequent = node.consequent,
            alternate = node.alternate;

        var blockType = this.syntax.IfStatement;
        if (!blockType) {
            return this.BasicIf(node);
        } else {
            throw {
                message: 'if는 지원하지 않는 표현식 입니다.',
                node: node
            };
        }
    };

    p.SwitchStatement = function (node) {
        var discriminant = node.discriminant,
            cases = node.cases;

        throw {
            message: 'switch는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.SwitchCase = function (node) {
        var test = node.test,
            consequent = node.consequent;

        throw {
            message: 'switch ~ case는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    //throwstatement

    p.ThrowStatement = function (node) {
        var args = node.arguments;

        throw {
            message: 'throw는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.TryStatement = function (node) {
        var block = node.block,
            handler = node.handler,
            finalizer = node.finalizer;

        throw {
            message: 'try는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.CatchClause = function (node) {
        var param = node.param,
            body = node.body;

        throw {
            message: 'catch는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.WhileStatement = function (node) {
        var test = node.test,
            body = node.body;
        var blockType = this.syntax.WhileStatement;
        body = this[body.type](body);

        if (!blockType) {
            return this.BasicWhile(node, body);
        } else {
            throw {
                message: 'while은 지원하지 않는 표현식 입니다.',
                node: node
            };
        }
    };

    p.DoWhileStatement = function (node) {
        var body = node.body,
            test = node.test;

        throw {
            message: 'do ~ while은 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.ForInStatement = function (node) {
        var left = node.left,
            right = node.right,
            body = node.body;

        throw {
            message: 'for ~ in은 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    //Declaration

    p.FunctionDeclaration = function (node) {
        var id = node.id;

        var blockType = this.syntax.FunctionDeclaration;

        if (!blockType) {
            return null;
        } else {
            throw {
                message: 'function은 지원하지 않는 표현식 입니다.',
                node: node
            };
        }
    };

    p.VariableDeclaration = function (node) {
        var declaration = node.declarations,
            kind = node.kind;

        throw {
            message: 'var은 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    // Expression
    p.ThisExpression = function (node) {
        return this.scope.this;
    };

    p.ArrayExpression = function (node) {
        var elements = node.elements;

        throw {
            message: 'array는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.ObjectExpression = function (node) {
        var property = node.property;

        throw {
            message: 'object는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.Property = function (node) {
        var key = node.key,
            value = node.value,
            kind = node.kind;

        throw {
            message: 'init, get, set은 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.FunctionExpression = function (node) {
        throw {
            message: 'function은 지원하지 않는 표현식 입니다.',
            node: node
        };
    };
    // unary expression

    p.UnaryExpression = function (node) {
        var operator = node.operator,
            prefix = node.prefix,
            args = node.argument;

        throw {
            message: operator + '은(는) 지원하지 않는 명령어 입니다.',
            node: node
        };
    };

    p.UnaryOperator = function () {
        return ['-', '+', '!', '~', 'typeof', 'void', 'delete'];
    };

    p.updateOperator = function () {
        return ['++', '--'];
    };

    //Binary expression
    p.BinaryOperator = function () {
        return ['==', '!=', '===', '!==', '<', '<=', '>', '>=', '<<', '>>', '>>>', '+', '-', '*', '/', '%', ',', '^', '&', 'in', 'instanceof'];
    };

    p.AssignmentExpression = function (node) {
        var operator = node.operator,
            left = node.left,
            right = node.right;

        throw {
            message: operator + '은(는) 지원하지 않는 명령어 입니다.',
            node: node
        };
    };

    p.AssignmentOperator = function () {
        return ['=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=', ',=', '^=', '&='];
    };

    p.LogicalExpression = function (node) {
        var operator = node.operator,
            left = node.left,
            right = node.right;
        throw {
            message: operator + '은(는) 지원하지 않는 명령어 입니다.',
            node: node
        };
    };

    p.LogicalOperator = function () {
        return ['||', '&&'];
    };

    p.MemberExpression = function (node) {
        var object = node.object,
            property = node.property,
            computed = node.computed;

        console.log(object.type);
        object = this[object.type](object);
        console.log(object);

        property = this[property.type](property, object);

        if (!(Object(object) === object && Object.getPrototypeOf(object) === Object.prototype)) {
            throw {
                message: object + '은(는) 잘못된 멤버 변수입니다.',
                node: node
            };
        }

        var blockType = property;
        if (!blockType) {
            throw {
                message: property + '이(가) 존재하지 않습니다.',
                node: node
            };
        }
        return blockType;
    };

    p.ConditionalExpression = function (node) {
        var test = node.test,
            alternate = node.alternate,
            consequent = node.consequent;

        throw {
            message: '지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.UpdateExpression = function (node) {
        var operator = node.operator,
            args = node.argument,
            prefix = node.prefix;

        throw {
            message: operator + '은(는) 지원하지 않는 명렁어 입니다.',
            node: node
        };
    };

    p.CallExpression = function (node) {
        var callee = node.callee,
            args = node.arguments;
        var blockType = this[callee.type](callee);
        return {
            type: blockType
        };
    };

    p.NewExpression = function (node) {
        throw {
            message: 'new는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.SequenceExpression = function (node) {
        var expressions = node.expressions;

        throw {
            message: '지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    // scope method
    p.initScope = function (node) {
        if (this.scope === null) {
            var scoper = function scoper() {};
            scoper.prototype = this.syntax.Scope;
            this.scope = new scoper();
        } else {
            var scoper = function scoper() {};
            scoper.prototype = this.scope;
            this.scope = new scoper();
        }
        this.scopeChain.push(this.scope);
        return this.scanDefinition(node);
    };

    p.unloadScope = function () {
        this.scopeChain.pop();
        if (this.scopeChain.length) this.scope = this.scopeChain[this.scopeChain.length - 1];else this.scope = null;
    };

    p.scanDefinition = function (node) {
        var body = node.body;
        var separatedBlocks = [];
        for (var i = 0; i < body.length; i++) {
            var childNode = body[i];
            if (childNode.type === 'FunctionDeclaration') {
                this.scope[childNode.id.name] = this.scope.promise;
                if (this.syntax.BasicFunction) {
                    var childBody = childNode.body;
                    separatedBlocks.push([{
                        type: this.syntax.BasicFunction,
                        statements: [this[childBody.type](childBody)]
                    }]);
                }
            }
        }
        return separatedBlocks;
    };

    p.BasicFunction = function (node, body) {
        return null;
    };

    // custom node parser
    p.BasicIteration = function (node, iterCount, body) {
        var blockType = this.syntax.BasicIteration;
        if (!blockType) throw {
            message: '지원하지 않는 표현식 입니다.',
            node: node
        };
        return {
            params: [iterCount],
            type: blockType,
            statements: [body]
        };
    };

    p.BasicWhile = function (node, body) {
        var raw = node.test.raw;
        if (this.syntax.BasicWhile[raw]) {
            return {
                type: this.syntax.BasicWhile[raw],
                statements: [body]
            };
        } else {
            throw {
                message: '지원하지 않는 표현식 입니다.',
                node: node.test
            };
        }
    };

    p.BasicIf = function (node) {
        var consequent = node.consequent;
        consequent = this[consequent.type](consequent);
        try {
            var test = '';
            var operator = node.test.operator === '===' ? '==' : node.test.operator;

            if (node.test.left.type === 'Identifier' && node.test.right.type === 'Literal') {
                test = node.test.left.name + ' ' + operator + ' ' + node.test.right.raw;
            } else if (node.test.left.type === 'Literal' && node.test.right.type === 'Identifier') {
                test = node.test.right.name + ' ' + operator + ' ' + node.test.left.raw;
            } else {
                throw new Error();
            }

            if (this.syntax.BasicIf[test]) {
                if (!Array.isArray(consequent) && (typeof consequent === 'undefined' ? 'undefined' : _typeof(consequent)) === 'object') consequent = [consequent];
                return {
                    type: this.syntax.BasicIf[test],
                    statements: [consequent]
                };
            } else {
                throw new Error();
            }
        } catch (e) {
            throw {
                message: '지원하지 않는 표현식 입니다.',
                node: node.test
            };
        }
    };
})(Entry.JSParser.prototype);

/***/ }),

/***/ "./src/parser-no/parser.js":
/*!*********************************!*\
  !*** ./src/parser-no/parser.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Entry.Parser = function (mode, syntax, cm) {
    this._mode = mode; // maze ai workspace
    this.syntax = {};
    this.codeMirror = cm;
    this._lang = syntax || 'js';
    this.availableCode = [];

    if (mode === 'maze') {
        this._stageId = Number(Ntry.configManager.getConfig('stageId'));
        if ((typeof NtryData === 'undefined' ? 'undefined' : _typeof(NtryData)) == 'object') {
            var configCode = NtryData.config[this._stageId].availableCode;
            var playerCode = NtryData.player[this._stageId].code;
            this.setAvailableCode(configCode, playerCode);
        }
    }
    this.mappingSyntax(mode);

    switch (this._lang) {
        case 'js':
            this._parser = new Entry.JSParser(this.syntax);

            var syntax = this.syntax;

            var assistScope = {};

            for (var key in syntax.Scope) {
                assistScope[key + '();\n'] = syntax.Scope[key];
            }

            if ('BasicIf' in syntax) {
                assistScope['front'] = 'BasicIf';
            }

            CodeMirror.commands.javascriptComplete = function (cm) {
                CodeMirror.showHint(cm, null, { globalScope: assistScope });
            };

            cm.on('keyup', function (cm, event) {
                if (!cm.state.completionActive && event.keyCode >= 65 && event.keyCode <= 95) {
                    CodeMirror.showHint(cm, null, {
                        completeSingle: false,
                        globalScope: assistScope
                    });
                }
            });

            break;
        case 'block':
            this._parser = new Entry.BlockParser(this.syntax);
            break;
    }
};

(function (p) {
    p.parse = function (code) {
        var result = null;

        switch (this._lang) {
            case 'js':
                try {
                    var astTree = acorn.parse(code);
                    result = this._parser.Program(astTree);
                } catch (error) {
                    if (this.codeMirror) {
                        var annotation;
                        if (error instanceof SyntaxError) {
                            annotation = {
                                from: {
                                    line: error.loc.line - 1,
                                    ch: error.loc.column - 2
                                },
                                to: {
                                    line: error.loc.line - 1,
                                    ch: error.loc.column + 1
                                }
                            };
                            error.message = '문법 오류입니다.';
                        } else {
                            annotation = this.getLineNumber(error.node.start, error.node.end);
                            annotation.message = error.message;
                            annotation.severity = 'error';
                            this.codeMirror.markText(annotation.from, annotation.to, {
                                className: 'CodeMirror-lint-mark-error',
                                __annotation: annotation,
                                clearOnEnter: true
                            });
                        }

                        Entry.toast.alert('Error', error.message);
                    }
                    result = [];
                }
                break;
            case 'block':
                var textCode = this._parser.Code(code);
                var textArr = textCode.match(/(.*{.*[\S|\s]+?}|.+)/g);
                if (Array.isArray(textArr)) {
                    result = textArr.reduce(function (prev, current, index) {
                        var temp = '';

                        if (index === 1) {
                            prev = prev + '\n';
                        }
                        if (current.indexOf('function') > -1) {
                            temp = current + prev;
                        } else {
                            temp = prev + current;
                        }

                        return temp + '\n';
                    });
                } else {
                    result = '';
                }

                break;
        }

        return result;
    };

    p.getLineNumber = function (start, end) {
        var value = this.codeMirror.getValue();
        var lines = {
            from: {},
            to: {}
        };

        var startline = value.substring(0, start).split(/\n/gi);
        lines.from.line = startline.length - 1;
        lines.from.ch = startline[startline.length - 1].length;

        var endline = value.substring(0, end).split(/\n/gi);
        lines.to.line = endline.length - 1;
        lines.to.ch = endline[endline.length - 1].length;

        return lines;
    };

    p.mappingSyntax = function (mode) {
        var types = Object.keys(Entry.block);

        for (var i = 0; i < types.length; i++) {
            var type = types[i];
            var block = Entry.block[type];
            if (block.mode === mode && this.availableCode.indexOf(type) > -1) {
                var syntaxArray = block.syntax;
                if (!syntaxArray) continue;
                var syntax = this.syntax;
                for (var j = 0; j < syntaxArray.length; j++) {
                    var key = syntaxArray[j];
                    if (j === syntaxArray.length - 2 && typeof syntaxArray[j + 1] === 'function') {
                        syntax[key] = syntaxArray[j + 1];
                        break;
                    }
                    if (!syntax[key]) {
                        syntax[key] = {};
                    }
                    if (j === syntaxArray.length - 1) {
                        syntax[key] = type;
                    } else {
                        syntax = syntax[key];
                    }
                }
            }
        }
    };

    p.setAvailableCode = function (configCode, playerCode) {
        var availableList = [];
        configCode.forEach(function (items, i) {
            items.forEach(function (item, i) {
                availableList.push(item.type);
            });
        });

        if (playerCode instanceof Entry.Code) {
            var blocks = playerCode.getBlockList();
            blocks.forEach(function (item) {
                if (item.type !== NtryData.START && availableList.indexOf(item.type) === -1) availableList.push(item.type);
            });
        } else {
            playerCode.forEach(function (items, i) {
                items.forEach(function (item, i) {
                    if (item.type !== NtryData.START && availableList.indexOf(item.type) === -1) {
                        availableList.push(item.type);
                    }
                });
            });
        }

        this.availableCode = this.availableCode.concat(availableList);
    };
})(Entry.Parser.prototype);

/***/ }),

/***/ "./src/playground/basic_block.js":
/*!***************************************!*\
  !*** ./src/playground/basic_block.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.block.run = {
    skeleton: "basic",
    color: "#3BBD70",
    contents: ["this is", "basic block"],
    func: function func() {}
};

Entry.block.mutant = {
    skeleton: "basic",
    event: "start",
    color: "#3BBD70",
    template: "test mutant block",
    params: [],
    func: function func() {},
    changeEvent: new Entry.Event()
};

Entry.block.jr_start = {
    skeleton: "pebble_event",
    event: "start",
    color: "#3BBD70",
    template: "%1",
    params: [{
        type: "Indicator",
        img: "/img/assets/ntry/bitmap/jr/block_play_image.png",
        highlightColor: "#3BBD70",
        position: { x: 0, y: 0 },
        size: 22
    }],
    func: function func() {
        var entities = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);

        for (var key in entities) {
            this._unit = entities[key];
        }Ntry.unitComp = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.UNIT);
    }
};

Entry.block.jr_repeat = {
    skeleton: "pebble_loop",
    color: "#127CDB",
    template: "%1 반복",
    params: [{
        type: "Text",
        text: Lang.Menus.repeat_0
    }, {
        type: "Dropdown",
        options: [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],
        value: 3,
        fontSize: 14,
        roundValue: 3
    }, {
        type: "Text",
        text: Lang.Menus.repeat_1
    }],
    statements: [],
    func: function func() {
        if (this.repeatCount === undefined) {
            this.repeatCount = this.block.params[0];
            return Entry.STATIC.CONTINUE;
        } else if (this.repeatCount > 0) {
            this.repeatCount--;
            var statement = this.block.statements[0];
            if (statement.getBlocks().length === 0) return;
            this.executor.stepInto(statement);
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.repeatCount;
        }
    }
};

Entry.block.jr_item = {
    skeleton: "pebble_basic",
    color: "#F46C6C",
    template: "꽃 모으기 %1",
    params: [{
        type: "Indicator",
        img: "/img/assets/ntry/bitmap/jr/block_item_image.png",
        highlightColor: "#FFF",
        position: { x: 83, y: 0 },
        size: 22
    }],
    func: function func() {
        if (!this.isContinue) {
            this.isContinue = true;
            this.isAction = true;
            var self = this;
            var callBack = function callBack() {
                Ntry.dispatchEvent("getItem");
                self.isAction = false;
            };
            Ntry.dispatchEvent("unitAction", Ntry.STATIC.GET_ITEM, callBack);
            return Entry.STATIC.CONTINUE;
        } else if (this.isAction) {
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.isAction;
            delete this.isContinue;
        }
    }
};

Entry.block.cparty_jr_item = {
    skeleton: "pebble_basic",
    color: "#8ABC1D",
    template: "%1 %2",
    params: [{
        type: "Text",
        text: Lang.Menus.pick_up_pencil
    }, {
        type: "Indicator",
        img: "/img/assets/ntry/bitmap/cpartyjr/pen.png",
        highlightColor: "#FFF",
        position: { x: 83, y: 0 },
        size: 22
    }],
    func: function func() {
        if (!this.isContinue) {
            this.isContinue = true;
            this.isAction = true;
            var self = this;
            var callBack = function callBack() {
                Ntry.dispatchEvent("getItem");
                self.isAction = false;
            };
            Ntry.dispatchEvent("unitAction", Ntry.STATIC.GET_ITEM, callBack);
            return Entry.STATIC.CONTINUE;
        } else if (this.isAction) {
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.isAction;
            delete this.isContinue;
        }
    }
};

Entry.block.jr_north = {
    skeleton: "pebble_basic",
    color: "#A751E3",
    template: "%1 %2",
    params: [{
        type: "Text",
        text: Lang.Menus.go_up
    }, {
        type: "Indicator",
        img: "/img/assets/ntry/bitmap/jr/block_up_image.png",
        position: { x: 83, y: 0 },
        size: 22
    }],
    func: function func() {
        if (!this.isContinue) {
            this.isContinue = true;
            this.isAction = true;
            var STATIC = Ntry.STATIC;
            var self = this;
            var callBack = function callBack() {
                window.setTimeout(function () {
                    Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function () {
                        self.isAction = false;
                    });
                }, 3);
            };
            var actionType;
            switch (Ntry.unitComp.direction) {
                case Ntry.STATIC.EAST:
                    actionType = STATIC.TURN_LEFT;
                    break;
                case Ntry.STATIC.SOUTH:
                    actionType = STATIC.HALF_ROTATION;
                    break;
                case Ntry.STATIC.WEST:
                    actionType = STATIC.TURN_RIGHT;
                    break;
                default:
                    callBack();
                    break;
            }
            if (actionType) Ntry.dispatchEvent("unitAction", actionType, callBack);
            return Entry.STATIC.CONTINUE;
        } else if (this.isAction) {
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.isAction;
            delete this.isContinue;
        }
    }
};

Entry.block.jr_east = {
    skeleton: "pebble_basic",
    color: "#A751E3",
    template: "%1 %2",
    params: [{
        type: "Text",
        text: Lang.Menus.go_right
    }, {
        type: "Indicator",
        img: "/img/assets/ntry/bitmap/jr/block_right_image.png",
        position: { x: 83, y: 0 },
        size: 22
    }],
    func: function func() {
        var STATIC = Ntry.STATIC;

        if (!this.isContinue) {
            this.isContinue = true;
            this.isAction = true;
            var self = this;
            var callBack = function callBack() {
                window.setTimeout(function () {
                    Ntry.dispatchEvent("unitAction", STATIC.WALK, function () {
                        self.isAction = false;
                    });
                }, 3);
            };

            // turn direction
            var actionType;
            switch (Ntry.unitComp.direction) {
                case STATIC.SOUTH:
                    actionType = STATIC.TURN_LEFT;
                    break;
                case STATIC.WEST:
                    actionType = STATIC.HALF_ROTATION;
                    break;
                case STATIC.NORTH:
                    actionType = STATIC.TURN_RIGHT;
                    break;
                default:
                    callBack();
                    break;
            }
            if (actionType) Ntry.dispatchEvent("unitAction", actionType, callBack);
            return Entry.STATIC.CONTINUE;
        } else if (this.isAction) {
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.isAction;
            delete this.isContinue;
        }
    }
};

Entry.block.jr_south = {
    skeleton: "pebble_basic",
    color: "#A751E3",
    template: "%1 %2",
    params: [{
        type: "Text",
        text: Lang.Menus.go_down
    }, {
        type: "Indicator",
        img: "/img/assets/ntry/bitmap/jr/block_down_image.png",
        position: { x: 83, y: 0 },
        size: 22
    }],
    func: function func() {
        if (!this.isContinue) {

            this.isContinue = true;
            this.isAction = true;
            var STATIC = Ntry.STATIC;
            var self = this;
            var callBack = function callBack() {
                window.setTimeout(function () {
                    Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function () {
                        self.isAction = false;
                    });
                }, 3);
            };

            // turn direction
            var actionType;
            switch (Ntry.unitComp.direction) {
                case STATIC.EAST:
                    actionType = STATIC.TURN_RIGHT;
                    break;
                case STATIC.NORTH:
                    actionType = STATIC.HALF_ROTATION;
                    break;
                case STATIC.WEST:
                    actionType = STATIC.TURN_LEFT;
                    break;
                default:
                    callBack();
                    break;
            }
            if (actionType) Ntry.dispatchEvent("unitAction", actionType, callBack);
            return Entry.STATIC.CONTINUE;
        } else if (this.isAction) {
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.isAction;
            delete this.isContinue;
        }
    }
};

Entry.block.jr_west = {
    skeleton: "pebble_basic",
    color: "#A751E3",
    template: "%1 %2",
    params: [{
        type: "Text",
        text: Lang.Menus.go_left
    }, {
        type: "Indicator",
        img: "/img/assets/ntry/bitmap/jr/block_left_image.png",
        position: { x: 83, y: 0 },
        size: 22
    }],
    func: function func() {
        if (!this.isContinue) {

            this.isContinue = true;
            this.isAction = true;
            var STATIC = Ntry.STATIC;
            var self = this;
            var callBack = function callBack() {
                window.setTimeout(function () {
                    Ntry.dispatchEvent("unitAction", STATIC.WALK, function () {
                        self.isAction = false;
                    });
                }, 3);
            };

            // turn direction
            var actionType;
            switch (Ntry.unitComp.direction) {
                case STATIC.SOUTH:
                    actionType = STATIC.TURN_RIGHT;
                    break;
                case STATIC.EAST:
                    actionType = STATIC.HALF_ROTATION;
                    break;
                case STATIC.NORTH:
                    actionType = STATIC.TURN_LEFT;
                    break;
                default:
                    callBack();
                    break;
            }
            if (actionType) Ntry.dispatchEvent("unitAction", actionType, callBack);
            return Entry.STATIC.CONTINUE;
        } else if (this.isAction) {
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.isAction;
            delete this.isContinue;
        }
    }
};

//maze 명세의 주니버 시작
Entry.block.jr_start_basic = {
    skeleton: "basic_event",
    event: "start",
    color: "#3BBD70",
    template: "%1 %2",
    params: [{
        type: "Indicator",
        boxMultiplier: 2,
        img: "/img/assets/block_icon/start_icon_play.png",
        highlightColor: "#3BBD70",
        size: 17,
        position: {
            x: 0, y: -2
        }
    }, Lang.Menus.maze_when_run],
    func: function func() {
        var entities = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);

        for (var key in entities) {
            this._unit = entities[key];
        }Ntry.unitComp = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.UNIT);
    }
};

Entry.block.jr_go_straight = {
    skeleton: "basic",
    color: "#A751E3",
    template: "%1 %2",
    params: [Lang.Menus.go_forward, {
        type: "Image",
        img: "/img/assets/ntry/bitmap/jr/cparty_go_straight.png",
        size: 24
    }],
    func: function func() {
        if (!this.isContinue) {

            this.isContinue = true;
            this.isAction = true;
            var self = this;
            var callBack = function callBack() {
                self.isAction = false;
            };
            // turn direction
            Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, callBack);

            return Entry.STATIC.CONTINUE;
        } else if (this.isAction) {
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.isAction;
            delete this.isContinue;
        }
    }
};

Entry.block.jr_turn_left = {
    skeleton: "basic",
    color: "#A751E3",
    template: "%1 %2",
    params: [Lang.Menus.jr_turn_left, {
        type: "Image",
        img: "/img/assets/ntry/bitmap/jr/cparty_rotate_l.png",
        size: 24
    }],
    func: function func() {
        if (!this.isContinue) {

            this.isContinue = true;
            this.isAction = true;
            var self = this;
            var callBack = function callBack() {
                self.isAction = false;
            };

            // turn direction
            Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_LEFT, callBack);

            return Entry.STATIC.CONTINUE;
        } else if (this.isAction) {
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.isAction;
            delete this.isContinue;
        }
    }
};

Entry.block.jr_turn_right = {
    skeleton: "basic",
    color: "#A751E3",
    template: "%1 %2",
    params: [Lang.Menus.jr_turn_right, {
        type: "Image",
        img: "/img/assets/ntry/bitmap/jr/cparty_rotate_r.png",
        size: 24
    }],
    func: function func() {
        if (!this.isContinue) {

            this.isContinue = true;
            this.isAction = true;
            var self = this;
            var callBack = function callBack() {
                self.isAction = false;
            };

            // turn direction
            Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_RIGHT, callBack);

            return Entry.STATIC.CONTINUE;
        } else if (this.isAction) {
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.isAction;
            delete this.isContinue;
        }
    }
};

Entry.block.jr_go_slow = {
    skeleton: "basic",
    color: "#f46c6c",
    template: "%1 %2",
    params: [Lang.Menus.go_slow, {
        type: "Image",
        img: "/img/assets/ntry/bitmap/jr/cparty_go_slow.png",
        size: 24
    }],
    func: function func() {
        if (!this.isContinue) {

            this.isContinue = true;
            this.isAction = true;
            var self = this;
            var callBack = function callBack() {
                self.isAction = false;
            };

            // turn direction
            Ntry.dispatchEvent("unitAction", Ntry.STATIC.GO_SLOW, callBack);

            return Entry.STATIC.CONTINUE;
        } else if (this.isAction) {
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.isAction;
            delete this.isContinue;
        }
    }
};

Entry.block.jr_repeat_until_dest = {
    skeleton: "basic_loop",
    color: "#498DEB",
    template: "%1 %2 %3 %4",
    syntax: ["BasicWhile", "true"],
    params: [Lang.Menus.repeat_until_reach_2, {
        type: "Image",
        img: "/img/assets/ntry/bitmap/jr/jr_goal_image.png",
        size: 18
    }, Lang.Menus.repeat_until_reach_1, {
        type: "Image",
        img: "/img/assets/week/blocks/for.png",
        size: 24
    }],
    statements: [{
        accept: "basic"
    }],
    func: function func() {
        var statement = this.block.statements[0];
        if (statement.getBlocks().length === 0) return;

        this.executor.stepInto(statement);
        return Entry.STATIC.CONTINUE;
    }
};

Entry.block.jr_if_construction = {
    skeleton: "basic_loop",
    color: "#498DEB",
    template: "%1 %2 %3 %4",
    params: [Lang.Menus.jr_if_1, {
        type: "Image",
        img: "/img/assets/ntry/bitmap/jr/jr_construction_image.png",
        size: 18
    }, Lang.Menus.jr_if_2, {
        type: "Image",
        img: "/img/assets/week/blocks/for.png",
        size: 24
    }],
    statements: [{
        accept: "basic"
    }],
    func: function func() {
        if (this.isContinue) return;
        var entities = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);

        var entity;
        for (var key in entities) {
            entity = entities[key];
        }var unitComp = Ntry.entityManager.getComponent(entity.id, Ntry.STATIC.UNIT);
        var gridComp = Ntry.entityManager.getComponent(entity.id, Ntry.STATIC.GRID);

        var grid = { x: gridComp.x, y: gridComp.y };
        Ntry.addVectorByDirection(grid, unitComp.direction, 1);

        var fitEntities = Ntry.entityManager.find({
            type: Ntry.STATIC.GRID,
            x: grid.x,
            y: grid.y
        }, {
            type: Ntry.STATIC.TILE,
            tileType: Ntry.STATIC.OBSTACLE_REPAIR
        });

        this.isContinue = true;

        var statement = this.block.statements[0];
        if (fitEntities.length === 0) return;else if (statement.getBlocks().length === 0) return;else {
            this.executor.stepInto(statement);
            return Entry.STATIC.CONTINUE;
        }
    }
};

Entry.block.jr_if_speed = {
    skeleton: "basic_loop",
    color: "#498DEB",
    template: Lang.Menus.jr_if_1 + " %1 " + Lang.Menus.jr_if_2 + " %2",
    params: [{
        type: "Image",
        img: "/img/assets/ntry/bitmap/jr/jr_speed_image.png",
        size: 18
    }, {
        type: "Image",
        img: "/img/assets/week/blocks/for.png",
        size: 24
    }],
    statements: [{
        accept: "basic"
    }],
    func: function func() {
        if (this.isContinue) return;
        var entities = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);

        var entity;
        for (var key in entities) {
            entity = entities[key];
        }var unitComp = Ntry.entityManager.getComponent(entity.id, Ntry.STATIC.UNIT);
        var gridComp = Ntry.entityManager.getComponent(entity.id, Ntry.STATIC.GRID);

        var grid = { x: gridComp.x, y: gridComp.y };
        Ntry.addVectorByDirection(grid, unitComp.direction, 1);

        var fitEntities = Ntry.entityManager.find({
            type: Ntry.STATIC.GRID,
            x: grid.x,
            y: grid.y
        }, {
            type: Ntry.STATIC.TILE,
            tileType: Ntry.STATIC.OBSTACLE_SLOW
        });

        this.isContinue = true;

        var statement = this.block.statements[0];
        if (fitEntities.length === 0) return;else if (statement.getBlocks().length === 0) return;else {
            this.executor.stepInto(statement);
            return Entry.STATIC.CONTINUE;
        }
    }
};

// Entry.block.jr_promise_call = Entry.block.jr_promise_wrap;
// maze start block

Entry.block.maze_step_start = {
    skeleton: "basic_event",
    mode: "maze",
    event: "start",
    color: "#3BBD70",
    template: "%1 시작하기를 클릭했을 때",
    syntax: ["Program"],
    params: [{
        type: "Indicator",
        boxMultiplier: 2,
        img: "/img/assets/block_icon/start_icon_play.png",
        highlightColor: "#3BBD70",
        size: 17,
        position: {
            x: 0, y: -2
        }
    }],
    func: function func() {
        var entities = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);

        for (var key in entities) {
            this._unit = entities[key];
        }Ntry.unitComp = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.UNIT);
    }
};

Entry.block.maze_step_jump = {
    skeleton: "basic",
    mode: "maze",
    color: "#FF6E4B",
    template: "뛰어넘기%1",
    params: [{
        type: "Image",
        img: "/img/assets/week/blocks/jump.png",
        size: 24
    }],
    syntax: ["Scope", "jump"],
    func: function func() {
        if (!this.isContinue) {

            this.isContinue = true;
            this.isAction = true;
            var self = this;
            var callBack = function callBack() {
                self.isAction = false;
            };

            // turn direction

            Ntry.dispatchEvent("unitAction", Ntry.STATIC.JUMP, callBack);

            return Entry.STATIC.CONTINUE;
        } else if (this.isAction) {
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.isAction;
            delete this.isContinue;
        }
    }
};

Entry.block.maze_step_for = {
    skeleton: "basic_loop",
    mode: "maze",
    color: "#498DEB",
    template: "%1 번 반복하기%2",
    syntax: ["BasicIteration"],
    params: [{
        type: "Dropdown",
        key: "REPEAT",
        options: [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],
        value: 1
    }, {
        type: "Image",
        img: "/img/assets/week/blocks/for.png",
        size: 24
    }],
    statements: [{
        accept: "basic"
    }],
    func: function func() {
        if (this.repeatCount === undefined) {
            this.repeatCount = this.block.params[0];
            return Entry.STATIC.CONTINUE;
        } else if (this.repeatCount > 0) {
            this.repeatCount--;
            var statement = this.block.statements[0];
            if (statement.getBlocks().length === 0) return;
            this.executor.stepInto(statement);
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.repeatCount;
        }
    }
};

Entry.block.test = {
    skeleton: "basic_boolean_field",
    mode: "maze",
    color: "#127CDB",
    template: "%1 this is test block %2",
    params: [{
        type: "Angle",
        value: "90"

    }, {
        type: "Dropdown",
        options: [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],
        value: 1
    }],
    func: function func() {}
};

Entry.block.maze_repeat_until_1 = {
    skeleton: "basic_loop",
    mode: "maze",
    color: "#498DEB",
    template: "%1 만날 때 까지 반복%2",
    syntax: ["BasicWhile", "true"],
    params: [{
        type: "Image",
        img: "/img/assets/ntry/block_inner/repeat_goal_1.png",
        size: 18
    }, {
        type: "Image",
        img: "/img/assets/week/blocks/for.png",
        size: 24
    }],
    statements: [{
        accept: "basic"
    }],
    func: function func() {
        var statement = this.block.statements[0];
        if (statement.getBlocks().length === 0) return;

        this.executor.stepInto(statement);
        return Entry.STATIC.CONTINUE;
    }
};

Entry.block.maze_repeat_until_2 = {
    skeleton: "basic_loop",
    mode: "maze",
    color: "#498DEB",
    template: "모든 %1 만날 때 까지 반복%2",
    syntax: ["BasicWhile", "true"],
    params: [{
        type: "Image",
        img: "/img/assets/ntry/block_inner/repeat_goal_1.png",
        size: 18
    }, {
        type: "Image",
        img: "/img/assets/week/blocks/for.png",
        size: 24
    }],
    statements: [{
        accept: "basic"
    }],
    func: function func() {
        var statement = this.block.statements[0];
        if (statement.getBlocks().length === 0) return;

        this.executor.stepInto(statement);
        return Entry.STATIC.CONTINUE;
    }
};

Entry.block.maze_step_if_1 = {
    skeleton: "basic_loop",
    mode: "maze",
    color: "#498DEB",
    template: "만약 앞에 %1 있다면%2",
    syntax: ["BasicIf", 'front == "wall"'],
    params: [{
        type: "Image",
        img: "/img/assets/ntry/block_inner/if_target_1.png",
        size: 18
    }, {
        type: "Image",
        img: "/img/assets/week/blocks/if.png",
        size: 24
    }],
    statements: [{
        accept: "basic"
    }],
    func: function func() {
        if (this.isContinue) return;
        var entities = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);

        var entity;
        for (var key in entities) {
            entity = entities[key];
        }var unitComp = Ntry.entityManager.getComponent(entity.id, Ntry.STATIC.UNIT);
        var gridComp = Ntry.entityManager.getComponent(entity.id, Ntry.STATIC.GRID);

        var grid = { x: gridComp.x, y: gridComp.y };
        Ntry.addVectorByDirection(grid, unitComp.direction, 1);

        var existEntities = Ntry.entityManager.find({
            type: Ntry.STATIC.GRID,
            x: grid.x,
            y: grid.y
        });

        var statement = this.block.statements[0];

        if (existEntities.length === 0) {
            this.executor.stepInto(statement);
            return Entry.STATIC.CONTINUE;
        }

        var fitEntities = Ntry.entityManager.find({
            type: Ntry.STATIC.GRID,
            x: grid.x,
            y: grid.y
        }, {
            type: Ntry.STATIC.TILE,
            tileType: Ntry.STATIC.WALL
        });

        this.isContinue = true;

        if (fitEntities.length === 0) {
            return;
        } else if (statement.getBlocks().length === 0) return;else {
            this.executor.stepInto(statement);
            return Entry.STATIC.CONTINUE;
        }
    }
};

Entry.block.maze_step_if_2 = {
    skeleton: "basic_loop",
    mode: "maze",
    color: "#498DEB",
    template: "만약 앞에 %1 있다면%2",
    syntax: ["BasicIf", 'front == "bee"'],
    params: [{
        type: "Image",
        img: "/img/assets/ntry/bitmap/maze2/obstacle_01.png",
        size: 18
    }, {
        type: "Image",
        img: "/img/assets/week/blocks/if.png",
        size: 24
    }],
    statements: [{
        accept: "basic"
    }],
    func: function func() {
        if (this.isContinue) return;
        var entities = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);

        var entity;
        for (var key in entities) {
            entity = entities[key];
        }var unitComp = Ntry.entityManager.getComponent(entity.id, Ntry.STATIC.UNIT);
        var gridComp = Ntry.entityManager.getComponent(entity.id, Ntry.STATIC.GRID);

        var grid = { x: gridComp.x, y: gridComp.y };
        Ntry.addVectorByDirection(grid, unitComp.direction, 1);

        var fitEntities = Ntry.entityManager.find({
            type: Ntry.STATIC.GRID,
            x: grid.x,
            y: grid.y
        }, {
            type: Ntry.STATIC.TILE,
            tileType: Ntry.STATIC.OBSTACLE_BEE
        });

        this.isContinue = true;

        var statement = this.block.statements[0];
        if (fitEntities.length === 0) {
            return;
        } else if (statement.getBlocks().length === 0) return;else {
            this.executor.stepInto(statement);
            return Entry.STATIC.CONTINUE;
        }
    }
};

Entry.block.maze_call_function = {
    skeleton: "basic",
    mode: "maze",
    color: "#B57242",
    template: "약속 불러오기%1",
    syntax: ["Scope", "promise"],
    params: [{
        type: "Image",
        img: "/img/assets/week/blocks/function.png",
        size: 24
    }],
    func: function func() {
        if (!this.funcExecutor) {
            var codes = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE);

            for (var key in codes) {
                var code = codes[key].components[Ntry.STATIC.CODE].code;
                this.funcExecutor = new Entry.Executor(code.getEventMap("define")[0]);
            }
        }

        this.funcExecutor.execute();
        if (this.funcExecutor.scope.block === null) return;else return Entry.STATIC.CONTINUE;
    }
};

Entry.block.maze_define_function = {
    skeleton: "basic_define",
    mode: "maze",
    color: "#B57242",
    event: "define",
    template: "약속하기%1",
    syntax: ["BasicFunction"],
    params: [{
        type: "Image",
        img: "/img/assets/week/blocks/function.png",
        size: 24
    }],
    statements: [{
        accept: "basic"
    }],
    func: function func(executor) {
        if (this.executed) return;
        var statement = this.block.statements[0];
        if (statement.getBlocks().length === 0) return;
        this.executor.stepInto(statement);
        this.executed = true;
        return Entry.STATIC.CONTINUE;
    }
};

Entry.block.maze_step_if_3 = {
    skeleton: "basic_loop",
    mode: "maze",
    color: "#498DEB",
    template: "만약 앞에 %1 있다면%2",
    syntax: ["BasicIf", 'front == "banana"'],
    params: [{
        type: "Image",
        img: "/img/assets/ntry/block_inner/if_target_3.png",
        size: 18
    }, {
        type: "Image",
        img: "/img/assets/week/blocks/if.png",
        size: 24
    }],
    statements: [{
        accept: "basic"
    }],
    func: function func() {
        if (this.isContinue) return;
        var entities = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);

        var entity;
        for (var key in entities) {
            entity = entities[key];
        }var unitComp = Ntry.entityManager.getComponent(entity.id, Ntry.STATIC.UNIT);
        var gridComp = Ntry.entityManager.getComponent(entity.id, Ntry.STATIC.GRID);

        var grid = { x: gridComp.x, y: gridComp.y };
        Ntry.addVectorByDirection(grid, unitComp.direction, 1);

        var fitEntities = Ntry.entityManager.find({
            type: Ntry.STATIC.GRID,
            x: grid.x,
            y: grid.y
        }, {
            type: Ntry.STATIC.TILE,
            tileType: Ntry.STATIC.OBSTACLE_BANANA
        });

        this.isContinue = true;

        var statement = this.block.statements[0];
        if (fitEntities.length === 0) {
            return;
        } else if (statement.getBlocks().length === 0) return;else {
            this.executor.stepInto(statement);
            return Entry.STATIC.CONTINUE;
        }
    }
};

Entry.block.maze_step_if_4 = {
    skeleton: "basic_loop",
    mode: "maze",
    color: "#498DEB",
    template: "만약 앞에 %1 있다면%2",
    syntax: ["BasicIf", 'front == "wall"'],
    params: [{
        type: "Image",
        img: "/img/assets/ntry/block_inner/if_target_2.png",
        size: 18
    }, {
        type: "Image",
        img: "/img/assets/week/blocks/if.png",
        size: 24
    }],
    statements: [{
        accept: "basic"
    }],
    func: function func() {
        if (this.isContinue) return;
        var entities = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);

        var entity;
        for (var key in entities) {
            entity = entities[key];
        }var unitComp = Ntry.entityManager.getComponent(entity.id, Ntry.STATIC.UNIT);
        var gridComp = Ntry.entityManager.getComponent(entity.id, Ntry.STATIC.GRID);

        var grid = { x: gridComp.x, y: gridComp.y };
        Ntry.addVectorByDirection(grid, unitComp.direction, 1);

        var fitEntities = Ntry.entityManager.find({
            type: Ntry.STATIC.GRID,
            x: grid.x,
            y: grid.y
        }, {
            type: Ntry.STATIC.TILE,
            tileType: Ntry.STATIC.WALL
        });

        this.isContinue = true;

        var statement = this.block.statements[0];
        if (fitEntities.length === 0) {
            return;
        } else if (statement.getBlocks().length === 0) return;else {
            this.executor.stepInto(statement);
            return Entry.STATIC.CONTINUE;
        }
    }
};

Entry.block.maze_step_move_step = {
    skeleton: "basic",
    mode: "maze",
    color: "#A751E3",
    template: "앞으로 한 칸 이동%1",
    syntax: ["Scope", "move"],
    params: [{
        type: "Image",
        img: "/img/assets/week/blocks/moveStep.png",
        size: 24
    }],
    func: function func() {
        if (!this.isContinue) {

            this.isContinue = true;
            this.isAction = true;
            var self = this;
            var callBack = function callBack() {
                self.isAction = false;
            };
            // turn direction
            Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, callBack);

            return Entry.STATIC.CONTINUE;
        } else if (this.isAction) {
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.isAction;
            delete this.isContinue;
        }
    }
};

Entry.block.maze_step_rotate_left = {
    skeleton: "basic",
    mode: "maze",
    color: "#A751E3",
    template: "왼쪽으로 회전%1",
    syntax: ["Scope", "left"],
    params: [{
        type: "Image",
        img: "/img/assets/week/blocks/turnL.png",
        size: 24
    }],
    func: function func() {
        if (!this.isContinue) {

            this.isContinue = true;
            this.isAction = true;
            var self = this;
            var callBack = function callBack() {
                self.isAction = false;
            };

            // turn direction
            Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_LEFT, callBack);

            return Entry.STATIC.CONTINUE;
        } else if (this.isAction) {
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.isAction;
            delete this.isContinue;
        }
    }
};

Entry.block.maze_step_rotate_right = {
    skeleton: "basic",
    mode: "maze",
    color: "#A751E3",
    template: "오른쪽으로 회전%1",
    syntax: ["Scope", "right"],
    params: [{
        type: "Image",
        img: "/img/assets/week/blocks/turnR.png",
        size: 24
    }],
    func: function func() {
        if (!this.isContinue) {

            this.isContinue = true;
            this.isAction = true;
            var self = this;
            var callBack = function callBack() {
                self.isAction = false;
            };

            // turn direction
            Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_RIGHT, callBack);

            return Entry.STATIC.CONTINUE;
        } else if (this.isAction) {
            return Entry.STATIC.CONTINUE;
        } else {
            delete this.isAction;
            delete this.isContinue;
        }
    }

};

Entry.block.test_wrapper = {
    skeleton: "basic",
    mode: "maze",
    color: "#3BBD70",
    template: "%1 this is test block %2",
    params: [{
        type: "Block",
        accept: "basic_boolean_field",
        value: [{
            type: "test",
            params: [30, 50]
        }]
    }, {
        type: "Dropdown",
        options: [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],
        value: 1
    }],
    func: function func() {}
};

Entry.block.basic_button = {
    skeleton: "basic_button",
    color: "#eee",
    template: "%1",
    params: [{
        type: "Text",
        text: "basic button",
        color: "#333",
        align: "center"
    }],
    func: function func() {}
};

/***/ }),

/***/ "./src/playground/block.js":
/*!*********************************!*\
  !*** ./src/playground/block.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


/*
 *
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Entry.Block = function (block, thread) {
    var that = this;
    Entry.Model(this, false);
    this._schema = null;

    if (block._backupParams) this._backupParams = block._backupParams;

    this.setThread(thread);
    this.load(block);

    var category = block.category;
    if (category) {
        this.category = category;
        var entryBlock = Entry.block[this.type];
        if (entryBlock) entryBlock.isFor = ['category_' + category];
    }

    var code = this.getCode();

    if (block.display !== undefined) this.display = block.display;

    code.registerBlock(this);
    var events = this.events.dataAdd;
    if (events && code.object) {
        events.forEach(function (fn) {
            if (Entry.Utils.isFunction(fn)) fn(that);
        });
    }

    events = this.events.viewAdd;
    var board = code.board;
    if (events && Entry.getMainWS() && Entry.isTextMode && (!board || board && board.constructor !== Entry.BlockMenu)) {
        events.forEach(function (fn) {
            if (Entry.Utils.isFunction(fn)) fn.apply(that, [that]);
        });
    }
};

Entry.Block.MAGNET_RANGE = 10;
Entry.Block.MAGNET_OFFSET = 0.4;

Entry.Block.DELETABLE_TRUE = 1;
Entry.Block.DELETABLE_FALSE = 2;
Entry.Block.DELETABLE_FALSE_LIGHTEN = 3;

(function (p) {
    p.schema = {
        id: null,
        x: 0,
        y: 0,
        type: null,
        params: [],
        statements: [],
        view: null,
        thread: null,
        movable: null,
        deletable: Entry.Block.DELETABLE_TRUE,
        emphasized: false,
        readOnly: null,
        copyable: true,
        events: {},
        extensions: []
    };

    p.load = function (block) {
        if (!block.id) block.id = Entry.Utils.generateId();

        this.set(block);
        this.loadSchema();
    };

    p.changeSchema = function (diff, changeData) {
        var params = [];

        if (changeData) {
            if (changeData.isRestore) {
                params = this._backupParams || [];
                delete this._backupParams;
            } else {
                var changeType = changeData.type;

                switch (changeData.type) {
                    case 'noChange':
                        params = this.params;
                        break;
                    case 'cut':
                        var pos = changeData.pos;
                        this.params.splice(pos);
                        params = this.params;
                        break;
                    case 'insert':
                        var startPos = changeData.startPos;
                        var endPos = changeData.endPos;
                        var schemaParams = Entry.block[this.type].params;
                        params = new Array(schemaParams.length);

                        for (var i = 0; i < startPos; i++) {
                            params[i] = this.params[i];
                        }var adjust = endPos - startPos + 1;
                        for (i = endPos + 1; i < schemaParams.length; i++) {
                            params[i] = this.params[i - adjust];
                        }break;
                }
            }
        }

        params.forEach(function (p) {
            if (p instanceof Entry.Block) {
                p.destroyView();
            }
        });

        this.set({ params: params });

        this.loadSchema();
        this.view && this.view.changeType();
    };

    p.getSchema = function () {
        // for lazy loading
        if (!this._schema) this.loadSchema();
        return this._schema;
    };

    p.loadSchema = function () {
        var that = this;
        this._schema = Entry.block[this.type];
        if (!this._schema) {
            return;
        }

        if (!this._schemaChangeEvent && this._schema.changeEvent) this._schemaChangeEvent = this._schema.changeEvent.attach(this, this.changeSchema);

        if (!this._paramsBackupEvent && this._schema.paramsBackupEvent) {
            this._paramsBackupEvent = this._schema.paramsBackupEvent.attach(this, this.paramsBackup);
        }

        if (!this._destroyParamsBackupEvent && this._schema.destroyParamsBackupEvent) this._destroyParamsBackupEvent = this._schema.destroyParamsBackupEvent.attach(this, this.destroyParamsBackup);

        var events = this._schema.events;
        if (events) {
            for (var key in events) {
                if (!this.events[key]) this.events[key] = [];
                var funcs = events[key];
                for (var i = 0; i < funcs.length; i++) {
                    var func = funcs[i];
                    if (!func) continue;
                    if (this.events[key].indexOf(func) < 0) {
                        this.events[key].push(func);
                    }
                }
            }
        }

        if (this._schema.event) this.thread.registerEvent(this, this._schema.event);
        var thisParams = this.params;

        var params = this._schema.params;
        for (var i = 0; params && i < params.length; i++) {
            var value = thisParams[i] === undefined || thisParams[i] === null ? params[i].value : thisParams[i];

            var paramInjected = thisParams[i] || i < thisParams.length;

            if (value && (params[i].type === 'Output' || params[i].type === 'Block')) {
                if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') value = {
                    type: 'number',
                    params: [value]
                };
                value = new Entry.Block(value, this.thread);
            }

            if (paramInjected) thisParams.splice(i, 1, value);else thisParams.push(value);
        }

        var statements = this._schema.statements;
        if (statements) {
            for (var i = 0; i < statements.length; i++) {
                this.statements.splice(i, 1, new Entry.Thread(this.statements[i], that.getCode(), this));
            }
        }

        return true;
    };

    p.changeType = function (type) {
        if (this._schemaChangeEvent) this._schemaChangeEvent.destroy();
        if (this._backupEvent) this._backupEvent.destroy();
        if (this._destroyBackupEvent) this._destroyBackupEvent.destroy();

        this.set({ type: type });
        this.loadSchema();
        if (this.view) this.view.changeType(type);
    };

    p.setThread = function (thread) {
        this.set({ thread: thread });
    };

    p.getThread = function () {
        return this.thread;
    };

    p.insertAfter = function (blocks) {
        this.thread.insertByBlock(this, blocks);
    };

    p._updatePos = function () {
        if (this.view) this.set({
            x: this.view.x,
            y: this.view.y
        });
    };

    p.moveTo = function (x, y) {
        if (this.view) this.view._moveTo(x, y);
        this._updatePos();
        this.getCode().changeEvent.notify();
    };

    p.createView = function (board, mode) {
        board = board || this.getCode().view.board;
        if (!this.view) {
            this.set({
                view: new Entry.BlockView(this, board, mode)
            });
            this._updatePos();
        }
    };

    p.destroyView = function () {
        this.view && this.view.destroy();
    };

    p.clone = function (thread) {
        return new Entry.Block(this.toJSON(true), thread);
    };

    p.toJSON = function (isNew, excludeData, option) {
        var json = this._toJSON();
        delete json.view;
        delete json.thread;
        delete json.events;

        option = option || {};

        if (isNew) delete json.id;

        var _params = [];

        for (var i = 0; i < json.params.length; i++) {
            var p = json.params[i];
            if (p instanceof Entry.Block) p = p.toJSON(isNew, excludeData, option);else if (option.captureDynamic && this.view.getParam(i) instanceof Entry.FieldDropdownDynamic) {
                p = this.view.getParam(i).getTextValue();
            }
            _params.push(p);
        }

        json.params = _params;

        json.statements = json.statements.map(function (s) {
            return s.toJSON(isNew, undefined, excludeData, option);
        });

        json.x = this.x;
        json.y = this.y;

        json.movable = this.movable;
        json.deletable = this.deletable;
        json.emphasized = this.emphasized;
        json.readOnly = this.readOnly;
        if (this._backupParams) {
            json._backupParams = this._backupParams.map(function (p) {
                if (p instanceof Entry.Block) return p.toJSON();else return p;
            });
        }

        if (excludeData && excludeData instanceof Array) {
            excludeData.forEach(function (i) {
                delete json[i];
            });
        }

        return json;
    };

    p.destroy = function (animate, next, isNotForce) {
        if (isNotForce && !this.isDeletable()) return;

        var blockType = this.getBlockType();

        if (blockType === 'output' && !next) {
            var prevOutput = this.getPrevOutputBlock();
            var nextOutput = this.getOutputBlock();

            if (prevOutput) {
                this.separate(1);

                if (nextOutput) {
                    nextOutput.separate();
                    nextOutput.doInsert(prevOutput.view._contents[1]);
                }
            } else if (nextOutput) {
                var nextOutputView = nextOutput.view;
                nextOutputView && nextOutputView._toGlobalCoordinate();
                nextOutput.doInsert(this.getThread());
            }
        }

        var that = this;
        var params = this.params || [];
        for (var i = 0; i < params.length; i++) {
            var param = params[i];
            if (param instanceof Entry.Block) {
                param.doNotSplice = !(param.thread instanceof Entry.FieldOutput);
                param.destroy(animate);
            }
        }

        var statements = this.statements || [];
        for (var i = 0; i < statements.length; i++) {
            statements[i].destroy(animate);
        }var code = this.getCode();

        code.unregisterBlock(this);

        var thread = this.getThread();
        if (this._schema && this._schema.event) thread.unregisterEvent(this, this._schema.event);

        if (blockType === 'basic') {
            var prevBlock = this.getPrevBlock();
            var nextBlock = this.getNextBlock();
            if (nextBlock) {
                if (next) nextBlock.destroy(animate, next);else {
                    var nextBlockView = nextBlock.view;
                    if (!prevBlock) {
                        if (thread.view) {
                            var parent = thread.view.getParent();
                            var pConstructor = parent.constructor;
                            if (pConstructor === Entry.FieldStatement) {
                                nextBlockView && nextBlockView.bindPrev(parent);
                                parent.insertTopBlock(nextBlock);
                            } else if (pConstructor === Entry.FieldStatement) {
                                nextBlock.replace(parent._valueBlock);
                            } else nextBlockView && nextBlockView._toGlobalCoordinate();
                        }
                    } else nextBlockView && nextBlockView.bindPrev(prevBlock, true);
                }
            }
        }

        var notSpliced = this.doNotSplice;
        if (!this.doNotSplice && thread.spliceBlock) thread.spliceBlock(this);else delete this.doNotSplice;

        this.view && this.view.destroy(animate);
        this._schemaChangeEvent && this._schemaChangeEvent.destroy();
        this._paramsBackupEvent && this._paramsBackupEvent.destroy();
        this._destroyParamsBackupEvent && this._destroyParamsBackupEvent.destroy();

        var events = this.events.dataDestroy;
        if (events && code.object) {
            events.forEach(function (fn) {
                if (Entry.Utils.isFunction(fn)) fn.apply(that, [that, notSpliced]);
            });
        }

        events = this.events.viewDestroy;
        var board = this.getCode().board;
        if (events && Entry.getMainWS() && Entry.isTextMode && (!board || board && board.constructor !== Entry.BlockMenu)) {
            events.forEach(function (fn) {
                if (Entry.Utils.isFunction(fn)) fn.apply(that, [that, notSpliced]);
            });
        }
    };

    p.getView = function () {
        return this.view;
    };

    p.setMovable = function (movable) {
        if (this.movable == movable) return;
        this.set({ movable: movable });
    };

    p.setCopyable = function (copyable) {
        if (this.copyable == copyable) return;
        this.set({ copyable: copyable });
    };

    p.isMovable = function () {
        return this.movable;
    };

    p.isCopyable = function () {
        return this.copyable;
    };

    p.setDeletable = function (deletable) {
        if (this.deletable == deletable) return;
        this.set({ deletable: deletable });
    };

    p.isDeletable = function () {
        return this.deletable === Entry.Block.DELETABLE_TRUE || this.deletable === true;
    };

    p.isReadOnly = function () {
        return this.readOnly;
    };

    p.getCode = function () {
        return this.thread.getCode();
    };

    // command func
    p.doAdd = function () {
        this.getCode().changeEvent.notify();
    };

    p.doMove = function () {
        this._updatePos();
        this.getCode().changeEvent.notify();
    };

    p.doInsert = function (targetBlock) {
        if (this.getBlockType() === 'basic') this.insert(targetBlock);else this.replace(targetBlock);
    };

    p.doDestroy = function (animate) {
        this.destroy(animate);
        this.getCode().changeEvent.notify();
        return this;
    };

    p.doDestroyBelow = function (animate) {
        this.destroy(animate, true);
        this.getCode().changeEvent.notify();
        return this;
    };

    p.copy = function () {
        var thread = this.getThread();
        var cloned = [];
        if (thread instanceof Entry.Thread) {
            var index = thread.getBlocks().indexOf(this);
            var json = thread.toJSON(true, index);
            for (var i = 0; i < json.length; i++) {
                cloned.push(json[i]);
            }
        } else cloned.push(this.toJSON(true));

        var pos = this.view.getAbsoluteCoordinate();
        var block = cloned[0];
        block.x = pos.x + 15;
        block.y = pos.y + 15;
        block.id = Entry.Utils.generateId();

        return cloned;
    };

    p.copyToClipboard = function () {
        Entry.clipboard = this.copy();
    };

    p.separate = function (count, index) {
        this.thread.separate(this, count, index);
        this._updatePos();
        this.getCode().changeEvent.notify();
    };

    p.doSeparate = p.separate;

    p.insert = function (targetBlock) {
        var blocks = this.thread.cut(this);
        if (targetBlock instanceof Entry.Thread) {
            targetBlock.insertByBlock(null, blocks);
        } else {
            targetBlock.insertAfter(blocks);
        }
        this._updatePos();
        this.getCode().changeEvent.notify();
    };

    p.replace = function (targetBlock) {
        this.thread.cut(this);
        targetBlock.getThread().replace(this);
        this.getCode().changeEvent.notify();
    };

    p.getPrevBlock = function () {
        return this.thread.getPrevBlock(this);
    };

    p.getNextBlock = function () {
        return this.thread.getNextBlock(this) || null;
    };

    p.getLastBlock = function () {
        return this.thread.getLastBlock();
    };

    p.getPrevOutputBlock = function () {
        if (this.thread instanceof Entry.FieldOutput) return this.thread._block;
        return null;
    };

    p.getOutputBlock = function () {
        var params = this._schema.params;
        for (var i = 0; params && i < params.length; i++) {
            var paramDef = params[i];
            if (paramDef.type === 'Output') return this.params[i];
        }
        return null;
    };

    p.getTerminateOutputBlock = function () {
        var block = this;
        while (true) {
            var outputBlock = block.getOutputBlock();
            if (!outputBlock) return block;
            block = outputBlock;
        }
    };

    p.getOutputBlockCount = function (count) {
        count = count || 0;
        var outputBlock = this.getOutputBlock();
        if (outputBlock) return outputBlock.getOutputBlockCount(count + 1);else return count;
    };

    p.getBlockType = function () {
        if (!this.view) return null;
        var skeleton = Entry.skeleton[this._schema.skeleton];

        if (!skeleton.magnets) return null;

        var magnet = skeleton.magnets(this.view);
        if (magnet.next || magnet.previous) return 'basic';else if (magnet.boolean || magnet.string) return 'field';else if (magnet.output || magnet.param) return 'output';else return null;
    };

    p.indexOfStatements = function (statement) {
        return this.statements.indexOf(statement);
    };

    p.pointer = function (pointer) {
        return this.thread.pointer(pointer || [], this);
    };

    p.targetPointer = function () {
        var pointer = this.thread.pointer([], this);
        if (pointer.length === 4 && pointer[3] === 0) {
            pointer.pop();
        } else if (pointer[pointer.length - 2] > -1) {
            if (pointer[pointer.length - 1] === 0) pointer.pop();else pointer[pointer.length - 1] = pointer[pointer.length - 1] - 1;
        }
        return pointer;
    };

    p.getDataByPointer = function (pointer) {
        pointer = pointer.concat();
        var data = this.params[pointer.shift()];
        if (pointer.length) {
            if (data.getDataByPointer) return data.getDataByPointer(pointer);else return null;
        } else return data;
    };

    p.getBlockList = function (excludePrimitive, type) {
        var blocks = [];
        var currentType = type || this.type;

        if (!this._schema && !this.loadSchema()) {
            return [];
        }

        if (excludePrimitive && this._schema.isPrimitive) {
            return blocks;
        }

        currentType === this.type && blocks.push(this);

        var params = this.params;
        for (var k = 0; k < params.length; k++) {
            var param = params[k];
            if (param && param.constructor == Entry.Block) {
                blocks = blocks.concat(param.getBlockList(excludePrimitive, type));
            }
        }

        var statements = this.statements;
        if (statements) {
            for (var j = 0; j < statements.length; j++) {
                var statement = statements[j];
                if (statement.constructor !== Entry.Thread) continue;
                blocks = blocks.concat(statement.getBlockList(excludePrimitive, type));
            }
        }
        return blocks;
    };

    p.stringify = function (excludeData) {
        return JSON.stringify(this.toJSON(false, excludeData));
    };

    p.isInOrigin = function () {
        return this.x === 0 && this.y === 0;
    };

    p.isSameParamWith = function (target) {
        if (target.type.substr(0, 8) === 'wildcard' || this.type.substr(0, 8) === 'wildcard') return true;

        var targetType = target.type;
        var thisType = this.type;

        if (targetType === 'angle' && thisType === 'text' || targetType === 'text' && thisType === 'angle') {} else if (targetType !== thisType) return false;
        for (var i = 0; i < this.params.length; i++) {
            var param = this.params[i];
            if (param instanceof Entry.Block) {
                if (!param.isSameParamWith(target.params[i])) return false;
            } else {
                var l = this.params[i],
                    r = target.params[i];
                l = typeof l === 'number' ? l + '' : l;
                r = typeof r === 'number' ? r + '' : r;
                if (l !== r) return false;
            }
        }
        return true;
    };

    p.paramsBackup = function () {
        //do not backup params for blockMenu block
        if (this.view && this.view.isInBlockMenu) return;

        this._backupParams = this.params.slice();
    };

    p.destroyParamsBackup = function () {
        this._backupParams = null;
    };

    p.getDom = function (query) {
        if (query.length > 0) {
            var key = query.shift();
            if (key === 'magnet') return this.view.getMagnet(query);
        }
        return this.view.svgGroup;
    };

    p.getParam = function (index) {
        return this.params[index];
    };

    p.isParamBlockType = function () {
        return this._schema.skeleton === 'basic_string_field' || this._schema.skeleton === 'basic_boolean_field';
    };

    p.getFuncId = function () {
        var ret = /func_(.*)/.exec(this.type);
        if (!ret) return;
        return ret[1];
    };

    p.getRootBlock = function () {
        var block = this;

        while (block) {
            var thread = block.getThread();
            var parent = thread.parent;

            if (!parent) {
                //field block
                block = thread._block;
            } else if (parent instanceof Entry.Code) {
                //thread
                block = thread.getFirstBlock();
                break;
            } else if (parent instanceof Entry.Block) {
                //statement
                block = thread.parent;
            } else {
                block = undefined;
            }
        }

        return block;
    };
})(Entry.Block.prototype);

/***/ }),

/***/ "./src/playground/block_entry.js":
/*!***************************************!*\
  !*** ./src/playground/block_entry.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};if(_typeof(global.Entry)!=='object'){global.Entry={};}if(( false?undefined:_typeof(exports))=='object'){if((typeof EntryStatic==='undefined'?'undefined':_typeof(EntryStatic))!=='object'){global.EntryStatic={};}}if(!Entry.block){Entry.block={};}if(!Entry.block.converters){Entry.block.converters={};}__webpack_require__(/*! ./blocks */ "./src/playground/blocks/index.js");if(Entry&&Entry.block){(function(c){c.keyboardCode=function(key,value){var code;if(key)code=key.toUpperCase();var map={32:'space',13:'enter',38:'up',37:'left',39:'right',40:'down'};code=map[value]||code||value;if(!Entry.Utils.isNumber(code)){return'"()"'.replace('()',code);}else return'"()"'.replace('"()"',code);};c.returnStringKey=function(key,value){if(!value&&typeof value!=='number'||value==='null')return'None';key=String(key);if(value==='mouse')key='mouse';var name=Entry.TextCodingUtil.dropdownDynamicIdToNameConvertor(value,this.menuName);if(name)key=name;if(this.codeMap)var codeMap=eval(this.codeMap);var codeMapKey=value;if(codeMap){var codeMapValue=codeMap[codeMapKey];if(codeMapValue)key=codeMapValue;}key=key.replace(/\"/gi,'');return'"()"'.replace('()',key);};c.returnRawStringKey=function(key,value){if(!value&&typeof value!=='number'||value==='null')return'None';key=String(key);if(value==='mouse')key=value;var name=Entry.TextCodingUtil.dropdownDynamicIdToNameConvertor(value,this.menuName);if(name)key=name;key=key.replace(/\"/gi,'');return'"()"'.replace('"()"',key);};c.returnStringValue=function(key,value){if(!value&&typeof value!=='number'||value==='null')return'None';if(this.codeMap)var codeMap=eval(this.codeMap);var codeMapKey=value;if(codeMap){var codeMapValue=codeMap[codeMapKey];if(codeMapValue)value=codeMapValue;}return'"()"'.replace('()',value);};c.returnOperator=function(key,value){var map={EQUAL:'==',GREATER:'>',LESS:'<',GREATER_OR_EQUAL:'>=',LESS_OR_EQUAL:'<=',PLUS:'+',MINUS:'-',MULTI:'*',DIVIDE:'/','==':'EQUAL','>':'GREATER','<':'LESS','>=':'GREATER_OR_EQUAL','<=':'LESS_OR_EQUAL','+':'PLUS','-':'MINUS','*':'MULTI','/':'DIVIDE',AND:'and',OR:'or'};return map[value];};c.returnRawNumberValueByKey=function(key,value){//return String(key).replace(/\D/, '');
return key;};c.returnStringOrNumberByValue=function(key,value){if(!Entry.Utils.isNumber(value)){value=value.replace(/\"/gi,'');return'"()"'.replace('()',value);}else return value;};c.returnObjectOrStringValue=function(key,value){if(Entry.container&&Entry.container.getObject(value)){var objectName=Entry.container.getObject(value).name;return'"()"'.replace('()',objectName);}else{if(this.codeMap)var codeMap=eval(this.codeMap);var codeMapKey=value;if(codeMap){var codeMapValue=codeMap[codeMapKey];if(codeMapValue)value=codeMapValue;}value=value.replace(/\"/gi,'');return'"()"'.replace('()',value);}};c.returnStringValueUpperCase=function(key,value){if(this.codeMap)var codeMap=eval(this.codeMap);var codeMapKey=value;if(codeMap){var codeMapValue=codeMap[codeMapKey];if(codeMapValue)value=codeMapValue;}return'"()"'.replace('()',value).toUpperCase();};c.returnValueUpperCase=function(key,value){if(this.codeMap)var codeMap=eval(this.codeMap);var codeMapKey=value;if(codeMap){var codeMapValue=codeMap[codeMapKey];if(codeMapValue)value=codeMapValue;}return value.toUpperCase();};c.returnStringValueLowerCase=function(key,value){if(this.codeMap)var codeMap=eval(this.codeMap);var codeMapKey=value;if(codeMap){var codeMapValue=codeMap[codeMapKey];if(codeMapValue)value=codeMapValue;}return'"()"'.replace('()',value).toLowerCase();};c.returnValuePartialUpperCase=function(key,value){if(this.codeMap)var codeMap=eval(this.codeMap);var codeMapKey=value;if(codeMap){var codeMapValue=codeMap[codeMapKey];if(codeMapValue)value=codeMapValue;}var dot=value.indexOf('.')+1;if(dot>1){return value.charAt(0).toUpperCase()+value.substring(1,dot)+value.substring(dot).toUpperCase();}else{return value.toUpperCase();}};})(Entry.block.converters);}var block={//region hardware 하드웨어 기본
arduino_download_connector:{skeleton:'basic_button',isNotFor:['arduinoDisconnected'],color:'#eee',params:[{type:'Text',text:!Entry.isOffline?Lang.Blocks.ARDUINO_download_connector:Lang.Blocks.ARDUINO_open_connector,color:'#333',align:'center'}],events:{mousedown:[function(){Entry.hw.downloadConnector();}]}},download_guide:{skeleton:'basic_button',isNotFor:['arduinoDisconnected'],color:'#eee',params:[{type:'Text',text:Lang.Blocks.download_guide,color:'#333',align:'center'}],events:{mousedown:[function(){Entry.hw.downloadGuide();}]}},arduino_download_source:{skeleton:'basic_button',isNotFor:['arduinoDisconnected'],color:'#eee',params:[{type:'Text',text:Lang.Blocks.ARDUINO_download_source,color:'#333',align:'center'}],events:{mousedown:[function(){Entry.hw.downloadSource();}]}},arduino_connected:{skeleton:'basic_button',color:'#eee',isNotFor:['arduinoConnected'],params:[{type:'Text',text:Lang.Blocks.ARDUINO_connected,color:'#333',align:'center'}],events:{}},arduino_connect:{skeleton:'basic_button',color:'#eee',isNotFor:['arduinoConnect'],params:[{type:'Text',text:Lang.Blocks.ARDUINO_connect,color:'#333',align:'center'}],events:{}},arduino_reconnect:{skeleton:'basic_button',color:'#eee',isNotFor:['arduinoDisconnected'],params:[{type:'Text',text:Lang.Blocks.ARDUINO_reconnect,color:'#333',align:'center'}],events:{mousedown:[function(){Entry.hw.retryConnect();}]}},robot_reconnect:{skeleton:'basic_button',color:'#eee',isNotFor:['arduinoDisconnected'],template:'%1',params:[{type:'Text',text:Lang.Blocks.ROBOT_reconnect,color:'#333',align:'center'}],events:{mousedown:[function(){Entry.hw.retryConnect();}]}},arduino_open:{skeleton:'basic_button',color:'#eee',isNotFor:['arduinoDisconnected'],template:'%1',params:[{type:'Text',text:Lang.Blocks.ARDUINO_open_connector,color:'#333',align:'center'}],events:{mousedown:[function(){Entry.hw.openHardwareProgram();}]}},arduino_cloud_pc_open:{skeleton:'basic_button',color:'#eee',isNotFor:['arduinoConnect','arduinoConnected'],template:'%1',params:[{type:'Text',text:Lang.Blocks.ARDUINO_cloud_pc_connector,color:'#333',align:'center'}],events:{mousedown:[function(){Entry.hw.openHardwareProgram();}]}},//endregion hardware 하드웨어 기본
//region basic 기본블록
start_drawing:{color:'#FF9E20',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/brush_03.png',size:12}],events:{},def:{params:[null],type:'start_drawing'},class:'brush_control',isNotFor:['textBox'],func:function func(sprite,script){Entry.setBasicBrush(sprite);sprite.brush.moveTo(sprite.getX(),sprite.getY()*-1);return script.callReturn();},syntax:{js:[],py:['Entry.start_drawing()']}},stop_drawing:{color:'#FF9E20',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/brush_03.png',size:12}],events:{},def:{params:[null],type:'stop_drawing'},class:'brush_control',isNotFor:['textBox'],func:function func(sprite,script){if(sprite.brush&&sprite.shapes.length)sprite.brush.stop=true;return script.callReturn();},syntax:{js:[],py:['Entry.stop_drawing()']}},set_color:{color:'#FF9E20',skeleton:'basic',statements:[],params:[{type:'Color'},{type:'Indicator',img:'block_icon/brush_03.png',size:12}],events:{},def:{params:[null],type:'set_color'},pyHelpDef:{params:['A&value'],type:'set_color'},paramsKeyMap:{VALUE:0},class:'brush_color',isNotFor:['textBox'],func:function func(sprite,script){var colour=script.getField('VALUE',script);if(!sprite.brush||!sprite.shapes.length){Entry.setBasicBrush(sprite);sprite.brush.stop=true;}if(sprite.brush){var rgb=Entry.hex2rgb(colour);sprite.brush.rgb=rgb;sprite.brush.endStroke();sprite.brush.beginStroke('rgba('+rgb.r+','+rgb.g+','+rgb.b+','+sprite.brush.opacity/100+')');sprite.brush.moveTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();},syntax:{js:[],py:[{syntax:'Entry.set_brush_color_to(%1)',textParams:[{type:'Color',converter:Entry.block.converters.returnStringValueUpperCase,codeMap:'Entry.CodeMap.Entry.set_color[0]'}]}]}},set_random_color:{color:'#FF9E20',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/brush_03.png',size:12}],events:{},def:{params:[null],type:'set_random_color'},class:'brush_color',isNotFor:['textBox'],func:function func(sprite,script){if(!sprite.brush||!sprite.shapes.length){Entry.setBasicBrush(sprite);sprite.brush.stop=true;}if(sprite.brush){var rgb=Entry.generateRgb();sprite.brush.rgb=rgb;sprite.brush.endStroke();sprite.brush.beginStroke('rgba('+rgb.r+','+rgb.g+','+rgb.b+','+sprite.brush.opacity/100+')');sprite.brush.moveTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();},syntax:{js:[],py:['Entry.set_brush_color_to_random()']}},change_thickness:{color:'#FF9E20',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/brush_03.png',size:12}],events:{},def:{params:[{type:'number',params:['1']},null],type:'change_thickness'},pyHelpDef:{params:[{type:'number',params:['A&value']},null],type:'change_thickness'},paramsKeyMap:{VALUE:0},class:'brush_thickness',isNotFor:['textBox'],func:function func(sprite,script){var thickness=script.getNumberValue('VALUE',script);if(!sprite.brush||!sprite.shapes.length){Entry.setBasicBrush(sprite);sprite.brush.stop=true;}if(sprite.brush){sprite.brush.thickness+=thickness;if(sprite.brush.thickness<1)sprite.brush.thickness=1;sprite.brush.setStrokeStyle(sprite.brush.thickness);sprite.brush.moveTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();},syntax:{js:[],py:['Entry.add_brush_size(%1)']}},set_thickness:{color:'#FF9E20',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/brush_03.png',size:12}],events:{},def:{params:[{type:'number',params:['1']},null],type:'set_thickness'},pyHelpDef:{params:[{type:'number',params:['A&value']},null],type:'set_thickness'},paramsKeyMap:{VALUE:0},class:'brush_thickness',isNotFor:['textBox'],func:function func(sprite,script){var thickness=script.getNumberValue('VALUE',script);if(!sprite.brush||!sprite.shapes.length){Entry.setBasicBrush(sprite);sprite.brush.stop=true;}if(sprite.brush){sprite.brush.thickness=thickness;sprite.brush.setStrokeStyle(sprite.brush.thickness);sprite.brush.moveTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();},syntax:{js:[],py:['Entry.set_brush_size(%1)']}},change_opacity:{color:'#FF9E20',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/brush_03.png',size:12}],events:{},def:{params:[{type:'number',params:['10']},null],type:'change_opacity'},paramsKeyMap:{VALUE:0},class:'brush_opacity',isNotFor:['textBox'],func:function func(sprite,script){var opacity=script.getNumberValue('VALUE',script);if(!sprite.brush||!sprite.shapes.length){Entry.setBasicBrush(sprite);sprite.brush.stop=true;}opacity=Entry.adjustValueWithMaxMin(sprite.brush.opacity+opacity,0,100);if(sprite.brush){sprite.brush.opacity=opacity;sprite.brush.endStroke();var rgb=sprite.brush.rgb;sprite.brush.beginStroke('rgba('+rgb.r+','+rgb.g+','+rgb.b+','+sprite.brush.opacity/100+')');sprite.brush.moveTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();},syntax:{js:[],py:['']}},set_opacity:{color:'#FF9E20',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/brush_03.png',size:12}],events:{},def:{params:[{type:'number',params:['50']},null],type:'set_opacity'},paramsKeyMap:{VALUE:0},class:'brush_opacity',isNotFor:['textBox'],func:function func(sprite,script){var opacity=script.getNumberValue('VALUE',script);if(!sprite.brush||!sprite.shapes.length){Entry.setBasicBrush(sprite);sprite.brush.stop=true;}if(sprite.brush){sprite.brush.opacity=Entry.adjustValueWithMaxMin(opacity,0,100);sprite.brush.endStroke();var rgb=sprite.brush.rgb;sprite.brush.beginStroke('rgba('+rgb.r+','+rgb.g+','+rgb.b+','+sprite.brush.opacity/100+')');sprite.brush.moveTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();},syntax:{js:[],py:['']}},brush_erase_all:{color:'#FF9E20',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/brush_03.png',size:12}],events:{},def:{params:[null],type:'brush_erase_all'},class:'brush_clear',isNotFor:['textBox'],func:function func(sprite,script){sprite.eraseBrush&&sprite.eraseBrush();sprite.removeStamps();return script.callReturn();},syntax:{js:[],py:['Entry.clear_drawing()']}},brush_stamp:{color:'#FF9E20',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/brush_03.png',size:12}],events:{},def:{params:[null],type:'brush_stamp'},class:'stamp',isNotFor:['textBox'],func:function func(sprite,script){sprite.addStamp();return script.callReturn();},syntax:{js:[],py:['Entry.stamp()']}},change_brush_transparency:{color:'#FF9E20',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/brush_03.png',size:12}],events:{},def:{params:[{type:'number',params:['10']},null],type:'change_brush_transparency'},pyHelpDef:{params:[{type:'number',params:['A&value']},null],type:'change_brush_transparency'},paramsKeyMap:{VALUE:0},class:'brush_opacity',isNotFor:['textBox'],func:function func(sprite,script){var opacity=script.getNumberValue('VALUE',script);if(!sprite.brush||!sprite.shapes.length){Entry.setBasicBrush(sprite);sprite.brush.stop=true;}opacity=Entry.adjustValueWithMaxMin(sprite.brush.opacity-opacity,0,100);if(sprite.brush){sprite.brush.opacity=opacity;sprite.brush.endStroke();var rgb=sprite.brush.rgb;sprite.brush.beginStroke('rgba('+rgb.r+','+rgb.g+','+rgb.b+','+sprite.brush.opacity/100+')');sprite.brush.moveTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();},syntax:{js:[],py:['Entry.add_brush_transparency(%1)']}},set_brush_tranparency:{color:'#FF9E20',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/brush_03.png',size:12}],events:{},def:{params:[{type:'number',params:['50']},null],type:'set_brush_tranparency'},pyHelpDef:{params:[{type:'number',params:['A&value']},null],type:'set_brush_tranparency'},paramsKeyMap:{VALUE:0},class:'brush_opacity',isNotFor:['textBox'],func:function func(sprite,script){var opacity=script.getNumberValue('VALUE',script);if(!sprite.brush||!sprite.shapes.length){Entry.setBasicBrush(sprite);sprite.brush.stop=true;}if(sprite.brush){sprite.brush.opacity=Entry.adjustValueWithMaxMin(opacity,0,100);sprite.brush.endStroke();var rgb=sprite.brush.rgb;sprite.brush.beginStroke('rgba('+rgb.r+','+rgb.g+','+rgb.b+','+(1-sprite.brush.opacity/100)+')');sprite.brush.moveTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();},syntax:{js:[],py:['Entry.set_brush_transparency(%1)']}},number:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'TextInput',value:10}],events:{},def:{params:[]},paramsKeyMap:{NUM:0},func:function func(sprite,script){return script.getField('NUM',script);},isPrimitive:true,syntax:{js:['Scope','%1'],py:[{syntax:'%1',keyOption:'number',textParams:[{type:'TextInput',converter:Entry.block.converters.returnStringOrNumberByValue}]}]}},angle:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Angle'}],events:{},def:{params:[null],type:'angle'},paramsKeyMap:{ANGLE:0},func:function func(sprite,script){return script.getNumberField('ANGLE');},isPrimitive:true,syntax:{js:[],py:[{syntax:'%1',keyOption:'angle',textParams:[{type:'Angle',converter:Entry.block.converters.returnRawNumberValueByKey}]}]}},get_x_coordinate:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_get_x_coordinate,color:'#3D3D3D'}],events:{},def:{params:[null],type:'get_x_coordinate'},class:'calc',isNotFor:[],func:function func(sprite,script){return sprite.getX();},syntax:{js:[],py:['']}},get_y_coordinate:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_get_y_coordinate,color:'#3D3D3D'}],events:{},def:{params:[null],type:'get_y_coordinate'},class:'calc',isNotFor:[],func:function func(sprite,script){return sprite.getY();},syntax:{js:[],py:['']}},get_angle:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_get_angle,color:'#3D3D3D'}],events:{},def:{params:[null]},func:function func(sprite,script){return parseFloat(sprite.getRotation().toFixed(1));},syntax:{js:[],py:['']}},get_rotation_direction:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Dropdown',options:[[Lang.Blocks.CALC_rotation_value,'ROTATION'],[Lang.Blocks.CALC_direction_value,'DIRECTION']],value:'ROTATION',fontSize:11}],events:{},def:{params:[null],type:'get_rotation_direction'},paramsKeyMap:{OPERATOR:0},class:'calc',isNotFor:[],func:function func(sprite,script){var o=script.getField('OPERATOR',script);if(o.toUpperCase()=='DIRECTION')return parseFloat(sprite.getDirection().toFixed(1));else return parseFloat(sprite.getRotation().toFixed(1));},syntax:{js:[],py:['']}},distance_something:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_distance_something_1,color:'#3D3D3D'},{type:'DropdownDynamic',value:null,menuName:'spritesWithMouse',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC},{type:'Text',text:Lang.Blocks.CALC_distance_something_2,color:'#3D3D3D'}],events:{},def:{params:[null,null,null],type:'distance_something'},pyHelpDef:{params:[null,'A&value',null],type:'distance_something'},paramsKeyMap:{VALUE:1},class:'calc_distance',isNotFor:[],func:function func(sprite,script){var targetId=script.getField('VALUE',script);if(targetId=='mouse'){var mousePos=Entry.stage.mouseCoordinate;return Math.sqrt(Math.pow(sprite.getX()-mousePos.x,2)+Math.pow(sprite.getY()-mousePos.y,2));}else{var targetEntity=Entry.container.getEntity(targetId);return Math.sqrt(Math.pow(sprite.getX()-targetEntity.getX(),2)+Math.pow(sprite.getY()-targetEntity.getY(),2));}},syntax:{js:[],py:[{syntax:'Entry.value_of_distance_to(%2)',blockType:'param',textParams:[undefined,{type:'DropdownDynamic',value:null,menuName:'spritesWithMouse',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC,converter:Entry.block.converters.returnStringKey,codeMap:'Entry.CodeMap.Entry.distance_something[1]'}]}]}},coordinate_mouse:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_coordinate_mouse_1,color:'#3D3D3D'},{type:'Dropdown',options:[['x','x'],['y','y']],value:'x',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC},{type:'Text',text:Lang.Blocks.CALC_coordinate_mouse_2,color:'#3D3D3D'}],events:{},def:{params:[null,null,null],type:'coordinate_mouse'},pyHelpDef:{params:[null,'A&value',null],type:'coordinate_mouse'},paramsKeyMap:{VALUE:1},class:'calc',isNotFor:[],func:function func(sprite,script){var targetCoordinate=script.getField('VALUE',script);if(targetCoordinate==='x'){return Number(Entry.stage.mouseCoordinate.x);}else{return Number(Entry.stage.mouseCoordinate.y);}},syntax:{js:[],py:[{syntax:'Entry.value_of_mouse_pointer(%2)',blockType:'param',textParams:[{type:'Text',text:Lang.Blocks.CALC_coordinate_mouse_1,color:'#3D3D3D'},{type:'Dropdown',options:[['x','x'],['y','y']],value:'x',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC,converter:Entry.block.converters.returnStringKey,codeMap:'Entry.CodeMap.Entry.coordinate_mouse[1]'},{type:'Text',text:Lang.Blocks.CALC_coordinate_mouse_2,color:'#3D3D3D'}]}]}},coordinate_object:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_coordinate_object_1,color:'#3D3D3D'},{type:'DropdownDynamic',value:null,menuName:'spritesWithSelf',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC},{type:'Text',text:Lang.Blocks.CALC_coordinate_object_2,color:'#3D3D3D'},{type:'Dropdown',options:[[Lang.Blocks.CALC_coordinate_x_value,'x'],[Lang.Blocks.CALC_coordinate_y_value,'y'],[Lang.Blocks.CALC_coordinate_rotation_value,'rotation'],[Lang.Blocks.CALC_coordinate_direction_value,'direction'],[Lang.Blocks.CALC_coordinate_size_value,'size'],[Lang.Blocks.CALC_picture_index,'picture_index'],[Lang.Blocks.CALC_picture_name,'picture_name']],value:'x',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC}],events:{},def:{params:[null,null,null,null],type:'coordinate_object'},pyHelpDef:{params:[null,'A&value',null,'B&value'],type:'coordinate_object'},paramsKeyMap:{VALUE:1,COORDINATE:3},class:'calc',isNotFor:[],func:function func(sprite,script){var targetId=script.getField('VALUE',script);var targetEntity;if(targetId=='self')targetEntity=sprite;else targetEntity=Entry.container.getEntity(targetId);var targetCoordinate=script.getField('COORDINATE',script);switch(targetCoordinate){case'x':return targetEntity.getX();case'y':return targetEntity.getY();case'rotation':return targetEntity.getRotation();case'direction':return targetEntity.getDirection();case'picture_index':var object=targetEntity.parent;var pictures=object.pictures;return pictures.indexOf(targetEntity.picture)+1;case'size':return Number(targetEntity.getSize().toFixed(1));case'picture_name':var object=targetEntity.parent;var pictures=object.pictures;var picture=pictures[pictures.indexOf(targetEntity.picture)];return picture.name;}},syntax:{js:[],py:[{syntax:'Entry.value_of_object(%2, %4)',blockType:'param',textParams:[undefined,{type:'DropdownDynamic',value:null,menuName:'spritesWithSelf',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC,converter:Entry.block.converters.returnObjectOrStringValue,codeMap:'Entry.CodeMap.Entry.coordinate_object[1]'},undefined,{type:'Dropdown',options:[[Lang.Blocks.CALC_coordinate_x_value,'x'],[Lang.Blocks.CALC_coordinate_y_value,'y'],[Lang.Blocks.CALC_coordinate_rotation_value,'rotation'],[Lang.Blocks.CALC_coordinate_direction_value,'direction'],[Lang.Blocks.CALC_coordinate_size_value,'size'],[Lang.Blocks.CALC_picture_index,'picture_index'],[Lang.Blocks.CALC_picture_name,'picture_name']],value:'x',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC,converter:Entry.block.converters.returnStringValue,codeMap:'Entry.CodeMap.Entry.coordinate_object[3]'}]}]}},calc_basic:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Block',accept:'string'},{type:'Dropdown',options:[['+','PLUS'],['-','MINUS'],['x','MULTI'],['/','DIVIDE']],value:'PLUS',fontSize:11,noArrow:true},{type:'Block',accept:'string'}],events:{},def:{params:[{type:'number',params:['10']},'PLUS',{type:'number',params:['10']}],type:'calc_basic'},pyHelpDef:{params:[{type:'number',params:['A&value']},'PLUS',{type:'number',params:['B&value']}],type:'calc_basic'},defs:[{params:[{type:'number',params:['10']},'PLUS',{type:'number',params:['10']}],type:'calc_basic'},{params:[{type:'number',params:['10']},'MINUS',{type:'number',params:['10']}],type:'calc_basic'},{params:[{type:'number',params:['10']},'MULTI',{type:'number',params:['10']}],type:'calc_basic'},{params:[{type:'number',params:['10']},'DIVIDE',{type:'number',params:['10']}],type:'calc_basic'}],paramsKeyMap:{LEFTHAND:0,OPERATOR:1,RIGHTHAND:2},class:'calc',isNotFor:[],func:function func(sprite,script){var operator=script.getField('OPERATOR',script);var leftValue=script.getNumberValue('LEFTHAND',script);var rightValue=script.getNumberValue('RIGHTHAND',script);if(operator=='PLUS'){var leftStringValue=script.getValue('LEFTHAND',script);var rightStringValue=script.getValue('RIGHTHAND',script);if(!Entry.Utils.isNumber(leftStringValue))leftValue=leftStringValue;if(!Entry.Utils.isNumber(rightStringValue))rightValue=rightStringValue;if(typeof leftValue==='number'&&typeof rightValue==='number')return new BigNumber(leftValue).plus(rightValue).toNumber();else return leftValue+rightValue;}leftValue=new BigNumber(leftValue);if(operator=='MINUS')return leftValue.minus(rightValue).toNumber();else if(operator=='MULTI')return leftValue.times(rightValue).toNumber();else return leftValue.dividedBy(rightValue).toNumber();},syntax:{js:[],py:[{syntax:'(%1 %2 %3)',template:'%1 %2 %3',keyOption:'calc_basic',blockType:'param',textParams:[{type:'Block',accept:'string'},{type:'Dropdown',options:[['+','PLUS'],['-','MINUS'],['x','MULTI'],['/','DIVIDE']],value:'PLUS',fontSize:11,noArrow:true,converter:Entry.block.converters.returnOperator,paramType:'operator'},{type:'Block',accept:'string'}]}]}},calc_plus:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Block',accept:'string'},{type:'Text',text:'+',color:'#3D3D3D'},{type:'Block',accept:'string'}],events:{},def:{params:[null]},paramsKeyMap:{LEFTHAND:0,RIGHTHAND:2},func:function func(sprite,script){var leftValue=script.getNumberValue('LEFTHAND',script);var rightValue=script.getNumberValue('RIGHTHAND',script);return leftValue+rightValue;},syntax:{js:[],py:['']}},calc_minus:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Block',accept:'string'},{type:'Text',text:'-',color:'#3D3D3D'},{type:'Block',accept:'string'}],events:{},def:{params:[null]},paramsKeyMap:{LEFTHAND:0,RIGHTHAND:2},func:function func(sprite,script){var leftValue=script.getNumberValue('LEFTHAND',script);var rightValue=script.getNumberValue('RIGHTHAND',script);return leftValue-rightValue;},syntax:{js:[],py:['']}},calc_times:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Block',accept:'string'},{type:'Text',text:'x',color:'#3D3D3D'},{type:'Block',accept:'string'}],events:{},def:{params:[null]},paramsKeyMap:{LEFTHAND:0,RIGHTHAND:2},func:function func(sprite,script){var leftValue=script.getNumberValue('LEFTHAND',script);var rightValue=script.getNumberValue('RIGHTHAND',script);return leftValue*rightValue;},syntax:{js:[],py:['']}},calc_divide:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Block',accept:'string'},{type:'Text',text:'/',color:'#3D3D3D'},{type:'Block',accept:'string'}],events:{},def:{params:[null]},paramsKeyMap:{LEFTHAND:0,RIGHTHAND:2},func:function func(sprite,script){var leftValue=script.getNumberValue('LEFTHAND',script);var rightValue=script.getNumberValue('RIGHTHAND',script);return leftValue/rightValue;},syntax:{js:[],py:['']}},calc_mod:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Block',accept:'string'},{type:'Text',text:'/',color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_calc_mod_3,color:'#3D3D3D'}],events:{},def:{params:[{type:'number',params:['10']},null,{type:'number',params:['10']},null],type:'calc_mod'},paramsKeyMap:{LEFTHAND:0,RIGHTHAND:2},class:'calc',isNotFor:[],func:function func(sprite,script){var leftValue=script.getNumberValue('LEFTHAND',script);var rightValue=script.getNumberValue('RIGHTHAND',script);return leftValue%rightValue;},syntax:{js:[],py:['Entry.get_remainder(%1, %3)']}},calc_share:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Block',accept:'string'},{type:'Text',text:'/',color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:'의 몫',color:'#3D3D3D'}],events:{},def:{params:[{type:'number',params:['10']},null,{type:'number',params:['10']},null],type:'calc_share'},paramsKeyMap:{LEFTHAND:0,RIGHTHAND:2},class:'calc',isNotFor:[],func:function func(sprite,script){var leftValue=script.getNumberValue('LEFTHAND',script);var rightValue=script.getNumberValue('RIGHTHAND',script);return Math.floor(leftValue/rightValue);},syntax:{js:[],py:['']}},calc_operation:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_calc_operation_of_1,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_calc_operation_of_2,color:'#3D3D3D'},{type:'Dropdown',options:[[Lang.Blocks.CALC_calc_operation_square,'square'],[Lang.Blocks.CALC_calc_operation_root,'root'],[Lang.Blocks.CALC_calc_operation_sin,'sin'],[Lang.Blocks.CALC_calc_operation_cos,'cos'],[Lang.Blocks.CALC_calc_operation_tan,'tan'],[Lang.Blocks.CALC_calc_operation_asin,'asin_radian'],[Lang.Blocks.CALC_calc_operation_acos,'acos_radian'],[Lang.Blocks.CALC_calc_operation_atan,'atan_radian'],[Lang.Blocks.CALC_calc_operation_log,'log'],[Lang.Blocks.CALC_calc_operation_ln,'ln'],[Lang.Blocks.CALC_calc_operation_unnatural,'unnatural'],[Lang.Blocks.CALC_calc_operation_floor,'floor'],[Lang.Blocks.CALC_calc_operation_ceil,'ceil'],[Lang.Blocks.CALC_calc_operation_round,'round'],[Lang.Blocks.CALC_calc_operation_factorial,'factorial'],[Lang.Blocks.CALC_calc_operation_abs,'abs']],value:'square',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC}],events:{},def:{params:[null,{type:'number',params:['10']},null,null],type:'calc_operation'},pyHelpDef:{params:[null,{type:'number',params:['A&value']},null,null],type:'calc_operation'},paramsKeyMap:{LEFTHAND:1,VALUE:3},class:'calc',isNotFor:[],func:function func(sprite,script){var value=script.getNumberValue('LEFTHAND',script);var operator=script.getField('VALUE',script);var xRangeCheckList=['asin_radian','acos_radian'];if(xRangeCheckList.indexOf(operator)>-1&&(value>1||value<-1))throw new Error('x range exceeded');var needToConvertList=['sin','cos','tan'];if(operator.indexOf('_'))operator=operator.split('_')[0];if(needToConvertList.indexOf(operator)>-1)value=Entry.toRadian(value);var returnVal=0;switch(operator){case'square':returnVal=value*value;break;case'factorial':returnVal=Entry.factorial(value);break;case'root':returnVal=Math.sqrt(value);break;case'log':returnVal=Math.log(value)/Math.LN10;break;case'ln':returnVal=Math.log(value);break;case'asin':case'acos':case'atan':returnVal=Entry.toDegrees(Math[operator](value));break;case'unnatural':returnVal=new BigNumber(value).minus(Math.floor(value)).toNumber();if(value<0)returnVal=1-returnVal;break;default:returnVal=Math[operator](value);}return returnVal;},syntax:{js:[],py:[{syntax:'(%2 ** 2)',template:'%2 ** 2',params:[null,null,null,'square'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]},{// for square
syntax:'math.pow(%2)',params:[null,null,null,'square'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]},{syntax:'math.sqrt(%2)',params:[null,null,null,'root'],blockType:'param',textParams:[undefined,{type:'Block',isListIndex:true,accept:'string'},undefined,null]},{syntax:'math.sin(%2)',params:[null,null,null,'sin'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]},{syntax:'math.cos(%2)',params:[null,null,null,'cos'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]},{syntax:'math.tan(%2)',params:[null,null,null,'tan'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]},{syntax:'math.asin(%2)',params:[null,null,null,'asin_radian'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]},{syntax:'math.acos(%2)',params:[null,null,null,'acos_radian'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]},{syntax:'math.atan(%2)',params:[null,null,null,'atan_radian'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]},{syntax:'math.log10(%2)',params:[null,null,null,'log'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]},{syntax:'math.log(%2)',params:[null,null,null,'ln'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]},{syntax:'%2 - math.floor(%2)',params:[null,null,null,'unnatural'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]},{syntax:'math.floor(%2)',params:[null,null,null,'floor'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]},{syntax:'math.ceil(%2)',params:[null,null,null,'ceil'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]},{syntax:'math.round(%2)',params:[null,null,null,'round'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]},{syntax:'math.factorial(%2)',params:[null,null,null,'factorial'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]},{syntax:'math.fabs(%2)',params:[null,null,null,'abs'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,null]}]}},calc_rand:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_calc_rand_1,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_calc_rand_2,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_calc_rand_3,color:'#3D3D3D'}],events:{},def:{params:[null,{type:'number',params:['0']},null,{type:'number',params:['10']},null],type:'calc_rand'},pyHelpDef:{params:[null,{type:'number',params:['A&value']},null,{type:'number',params:['B&value']},null],type:'calc_rand'},paramsKeyMap:{LEFTHAND:1,RIGHTHAND:3},class:'calc',isNotFor:[],func:function func(sprite,script){var leftValue=script.getStringValue('LEFTHAND',script);var rightValue=script.getStringValue('RIGHTHAND',script);var left=Math.min(leftValue,rightValue);var right=Math.max(leftValue,rightValue);var isLeftFloat=Entry.isFloat(leftValue);var isRightFloat=Entry.isFloat(rightValue);if(isRightFloat||isLeftFloat)return(Math.random()*(right-left)+left).toFixed(2);else return Math.floor(Math.random()*(right-left+1)+left);},syntax:{js:[],py:[{syntax:'random.randint(%2, %4)',blockType:'param',textParams:[null,{type:'Block',accept:'string',paramType:'integer'},null,{type:'Block',accept:'string',paramType:'integer'},null]},{syntax:'random.uniform(%2, %4)',blockType:'param',textParams:[null,{type:'Block',accept:'string',paramType:'float'},null,{type:'Block',accept:'string',paramType:'float'},null]}]}},get_date:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_get_date_1,color:'#3D3D3D'},{type:'Dropdown',options:[[Lang.Blocks.CALC_get_date_year,'YEAR'],[Lang.Blocks.CALC_get_date_month,'MONTH'],[Lang.Blocks.CALC_get_date_day,'DAY'],[Lang.Blocks.CALC_get_date_hour,'HOUR'],[Lang.Blocks.CALC_get_date_minute,'MINUTE'],[Lang.Blocks.CALC_get_date_second,'SECOND']],value:'YEAR',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC},{type:'Text',text:Lang.Blocks.CALC_get_date_2,color:'#3D3D3D'}],events:{},def:{params:[null,'YEAR',null],type:'get_date'},pyHelpDef:{params:[null,'A&value',null],type:'get_date'},paramsKeyMap:{VALUE:1},class:'calc_date',isNotFor:[],func:function func(sprite,script){var operator=script.getField('VALUE',script);var dateTime=new Date();if(operator=='YEAR')return dateTime.getFullYear();else if(operator=='MONTH')return dateTime.getMonth()+1;else if(operator=='DAY')return dateTime.getDate();else if(operator=='HOUR')return dateTime.getHours();else if(operator=='MINUTE')return dateTime.getMinutes();else return dateTime.getSeconds();},syntax:{js:[],py:[{syntax:'Entry.value_of_current_time(%2)',blockType:'param',textParams:[undefined,{type:'Dropdown',options:[[Lang.Blocks.CALC_get_date_year,'YEAR'],[Lang.Blocks.CALC_get_date_month,'MONTH'],[Lang.Blocks.CALC_get_date_day,'DAY'],[Lang.Blocks.CALC_get_date_hour,'HOUR'],[Lang.Blocks.CALC_get_date_minute,'MINUTE'],[Lang.Blocks.CALC_get_date_second,'SECOND']],value:'YEAR',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC,converter:Entry.block.converters.returnStringValueLowerCase,codeMap:'Entry.CodeMap.Entry.get_date[1]'}]}]}},get_sound_duration:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_get_sound_duration_1,color:'#3D3D3D'},{type:'DropdownDynamic',value:null,menuName:'sounds',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC},{type:'Text',text:Lang.Blocks.CALC_get_sound_duration_2,color:'#3D3D3D'}],events:{},def:{params:[null,null,null],type:'get_sound_duration'},pyHelpDef:{params:[null,'A&value',null],type:'get_sound_duration'},paramsKeyMap:{VALUE:1},class:'calc_duration',isNotFor:[],func:function func(sprite,script){var soundId=script.getField('VALUE',script);var soundsArr=sprite.parent.sounds;for(var i=0;i<soundsArr.length;i++){if(soundsArr[i].id==soundId)return soundsArr[i].duration;}},syntax:{js:[],py:[{syntax:'Entry.value_of_sound_length_of(%2)',blockType:'param',textParams:[undefined,{type:'DropdownDynamic',value:null,menuName:'sounds',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC,converter:Entry.block.converters.returnStringKey}]}]}},get_user_name:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[],events:{},def:{params:[],type:'get_user_name'},class:'calc_user',isNotFor:[],func:function func(sprite,script){return window.user?window.user.username:' ';},syntax:{js:[],py:[{syntax:'Entry.value_of_username()',blockType:'param'}]}},reset_project_timer:{color:'#FFD974',skeleton:'basic',statements:[],params:[{type:'Text',text:'초시계 초기화',color:'#3D3D3D'}],events:{viewAdd:[function(){if(Entry.engine)Entry.engine.showProjectTimer();}],viewDestroy:[function(block,notIncludeSelf){if(Entry.engine)Entry.engine.hideProjectTimer(block,notIncludeSelf);}]},def:{params:[null],type:'reset_project_timer'},class:'calc_timer',isNotFor:[],func:function func(sprite,script){Entry.engine.updateProjectTimer(0);return script.callReturn();},syntax:{js:[],py:['']}},set_visible_project_timer:{color:'#FFD974',skeleton:'basic',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_timer_visible_1,color:'#000'},{type:'Dropdown',options:[[Lang.Blocks.CALC_timer_visible_show,'SHOW'],[Lang.Blocks.CALC_timer_visible_hide,'HIDE']],value:'SHOW',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC},{type:'Text',text:Lang.Blocks.CALC_timer_visible_2,color:'#000'},{type:'Indicator',img:'block_icon/calc_01.png',size:12}],events:{viewAdd:[function(){if(Entry.engine)Entry.engine.showProjectTimer();}],viewDestroy:[function(block,notIncludeSelf){if(Entry.engine)Entry.engine.hideProjectTimer(block,notIncludeSelf);}]},def:{params:[null,'HIDE',null,null],type:'set_visible_project_timer'},pyHelpDef:{params:[null,'A&value',null,null],type:'set_visible_project_timer'},paramsKeyMap:{ACTION:1},class:'calc_timer',isNotFor:[],func:function func(sprite,script){var action=script.getField('ACTION');var timer=Entry.engine.projectTimer;if(action=='SHOW')timer.setVisible(true);else timer.setVisible(false);return script.callReturn();},syntax:{js:[],py:[{template:'%1 %2 %3',syntax:'Entry.timer_view(%2)',textParams:[{type:'Text',text:'Entry.timer_view(',color:'#000'},{type:'Dropdown',options:[[Lang.Blocks.CALC_timer_visible_show,'SHOW'],[Lang.Blocks.CALC_timer_visible_hide,'HIDE']],value:'SHOW',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC,converter:Entry.block.converters.returnStringValueLowerCase,codeMap:'Entry.CodeMap.Entry.set_visible_project_timer[1]'},{type:'Text',text:')',color:'#000'}]}]}},timer_variable:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:'초시계 값',color:'#3D3D3D'},{type:'Text',text:' ',color:'#3D3D3D'}],events:{},def:{params:[null,null]},func:function func(sprite,script){return Entry.container.inputValue.getValue();},syntax:{js:[],py:['']}},get_project_timer_value:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_get_timer_value,color:'#3D3D3D'},{type:'Text',text:'',color:'#3D3D3D'}],events:{viewAdd:[function(){if(Entry.engine)Entry.engine.showProjectTimer();}],viewDestroy:[function(block,notIncludeSelf){if(Entry.engine)Entry.engine.hideProjectTimer(block,notIncludeSelf);}]},def:{params:[null,null],type:'get_project_timer_value'},class:'calc_timer',isNotFor:[],func:function func(sprite,script){return Entry.engine.projectTimer.getValue();},syntax:{js:[],py:[{syntax:'Entry.value_of_timer()',blockType:'param'}]}},char_at:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_char_at_1,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_char_at_2,color:'#3D3D3D'},{type:'Block',isListIndex:true,accept:'string'},{type:'Text',text:Lang.Blocks.CALC_char_at_3,color:'#3D3D3D'}],events:{},def:{params:[null,{type:'text',params:[Lang.Blocks.hi_entry]},null,{type:'number',params:['1']},null],type:'char_at'},pyHelpDef:{params:[null,{type:'text',params:['A&value']},null,{type:'number',params:['B&value']},null],type:'char_at'},paramsKeyMap:{LEFTHAND:1,RIGHTHAND:3},class:'calc_string',isNotFor:[],func:function func(sprite,script){var str=script.getStringValue('LEFTHAND',script);var index=script.getNumberValue('RIGHTHAND',script)-1;if(index<0||index>str.length-1)throw new Error();else return str[index];},syntax:{js:[],py:[{syntax:'%2[%4]',blockType:'param',textParams:[{type:'Text',text:Lang.Blocks.CALC_char_at_1,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_char_at_2,color:'#3D3D3D'},{type:'Block',accept:'string',paramType:'index'},{type:'Text',text:Lang.Blocks.CALC_char_at_3,color:'#3D3D3D'}],keyOption:'char_at'}]}},length_of_string:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_length_of_string_1,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_length_of_string_2,color:'#3D3D3D'}],events:{},def:{params:[null,{type:'text',params:[Lang.Blocks.entry]},null],type:'length_of_string'},pyHelpDef:{params:[null,{type:'text',params:['A&value']},null],type:'length_of_string'},paramsKeyMap:{STRING:1},class:'calc_string',isNotFor:[],func:function func(sprite,script){return script.getStringValue('STRING',script).length;},syntax:{js:[],py:[{syntax:'len(%2)',blockType:'param',keyOption:'length_of_string'}]}},substring:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_substring_1,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_substring_2,color:'#3D3D3D'},{type:'Block',isListIndex:true,accept:'string'},{type:'Text',text:Lang.Blocks.CALC_substring_3,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_substring_4,color:'#3D3D3D'}],events:{},def:{params:[null,{type:'text',params:[Lang.Blocks.hi_entry]},null,{type:'number',params:['2']},null,{type:'number',params:['5']},null],type:'substring'},pyHelpDef:{params:[null,{type:'text',params:['A&value']},null,{type:'number',params:['B&value']},null,{type:'number',params:['C&value']},null],type:'substring'},paramsKeyMap:{STRING:1,START:3,END:5},class:'calc_string',isNotFor:[],func:function func(sprite,script){var str=script.getStringValue('STRING',script);var start=script.getNumberValue('START',script)-1;var end=script.getNumberValue('END',script)-1;var strLen=str.length-1;if(start<0||end<0||start>strLen||end>strLen)throw new Error();else return str.substring(Math.min(start,end),Math.max(start,end)+1);},syntax:{js:[],py:[{syntax:'%2[%4:%6]',blockType:'param',textParams:[null,{type:'Block',accept:'string'},null,{type:'Block',accept:'string',paramType:'index'},null,{type:'Block',accept:'string'},null]}]}},replace_string:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_replace_string_1,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_replace_string_2,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_replace_string_3,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_replace_string_4,color:'#3D3D3D'}],events:{},def:{params:[null,{type:'text',params:[Lang.Blocks.hi_entry]},null,{type:'text',params:[Lang.Blocks.hello]},null,{type:'text',params:[Lang.Blocks.nice]},null],type:'replace_string'},pyHelpDef:{params:[null,{type:'text',params:['A&value']},null,{type:'text',params:['B&value']},null,{type:'text',params:['C&value']},null],type:'replace_string'},paramsKeyMap:{STRING:1,OLD_WORD:3,NEW_WORD:5},class:'calc_string',isNotFor:[],func:function func(sprite,script){return script.getStringValue('STRING',script).replace(new RegExp(script.getStringValue('OLD_WORD',script),'gm'),script.getStringValue('NEW_WORD',script));},syntax:{js:[],py:[{syntax:'%2.replace(%4, %6)',blockType:'param'}]}},change_string_case:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_change_string_case_1,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_change_string_case_2,color:'#3D3D3D'},{type:'Dropdown',options:[[Lang.Blocks.CALC_change_string_case_sub_1,'toUpperCase'],[Lang.Blocks.CALC_change_string_case_sub_2,'toLowerCase']],value:'toUpperCase',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC},{type:'Text',text:Lang.Blocks.CALC_change_string_case_3,color:'#3D3D3D'}],events:{},def:{params:[null,{type:'text',params:['Hello Entry!']},null,null,null],type:'change_string_case'},pyHelpDef:{params:[null,{type:'text',params:['A&value']},null,null,null],type:'change_string_case'},paramsKeyMap:{STRING:1,CASE:3},class:'calc_string',isNotFor:[],func:function func(sprite,script){return script.getStringValue('STRING',script)[script.getField('CASE',script)]();},syntax:{js:[],py:[{syntax:'%2.upper()',params:[null,null,null,'toUpperCase',null],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,{type:'Dropdown',options:[[Lang.Blocks.CALC_change_string_case_sub_1,'toUpperCase'],[Lang.Blocks.CALC_change_string_case_sub_2,'toLowerCase']],value:'toUpperCase',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC,converter:Entry.block.converters.returnStringValue}]},{syntax:'%2.lower()',params:[null,null,null,'toLowerCase',null],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,{type:'Dropdown',options:[[Lang.Blocks.CALC_change_string_case_sub_1,'toUpperCase'],[Lang.Blocks.CALC_change_string_case_sub_2,'toLowerCase']],value:'toUpperCase',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC,converter:Entry.block.converters.returnStringValue}]}]}},index_of_string:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_index_of_string_1,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_index_of_string_2,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_index_of_string_3,color:'#3D3D3D'}],events:{},def:{params:[null,{type:'text',params:[Lang.Blocks.hi_entry]},null,{type:'text',params:[Lang.Blocks.entry]},null],type:'index_of_string'},pyHelpDef:{params:[null,{type:'text',params:['A&value']},null,{type:'text',params:['B&value']},null],type:'index_of_string'},paramsKeyMap:{LEFTHAND:1,RIGHTHAND:3},class:'calc_string',isNotFor:[],func:function func(sprite,script){var str=script.getStringValue('LEFTHAND',script);var target=script.getStringValue('RIGHTHAND',script);var index=str.indexOf(target);return index+1;},syntax:{js:[],py:[{syntax:'%2.find(%4)',blockType:'param'}]}},combine_something:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.VARIABLE_combine_something_1,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.VARIABLE_combine_something_2,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.VARIABLE_combine_something_3,color:'#3D3D3D'}],events:{},def:{params:[null,{type:'text',params:[Lang.Blocks.block_hi]},null,{type:'text',params:[Lang.Blocks.entry]},null],type:'combine_something'},pyHelpDef:{params:[null,{type:'text',params:['A&value']},null,{type:'text',params:['B&value']},null],type:'combine_something'},paramsKeyMap:{VALUE1:1,VALUE2:3},class:'calc_string',isNotFor:[],func:function func(sprite,script){var leftValue=script.getStringValue('VALUE1',script);var rightValue=script.getStringValue('VALUE2',script);return leftValue+rightValue;},syntax:{js:[],py:[{syntax:'(%2 + %4)',template:'%2 + %4',blockType:'param'}]}},get_sound_volume:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_get_sound_volume,color:'#3D3D3D'},{type:'Text',text:'',color:'#3D3D3D'}],events:{},def:{params:[null,null],type:'get_sound_volume'},class:'calc',isNotFor:[],func:function func(sprite,script){return createjs.Sound.getVolume()*100;},syntax:{js:[],py:[{syntax:'Entry.value_of_sound_volume()',blockType:'param'}]}},quotient_and_mod:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_quotient_and_mod_1,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_quotient_and_mod_2,color:'#3D3D3D'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.CALC_quotient_and_mod_3,color:'#3D3D3D'},{type:'Dropdown',options:[[Lang.Blocks.CALC_quotient_and_mod_sub_1,'QUOTIENT'],[Lang.Blocks.CALC_quotient_and_mod_sub_2,'MOD']],value:'QUOTIENT',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC}],events:{},def:{params:[null,{type:'text',params:['10']},null,{type:'text',params:['10']},null,null],type:'quotient_and_mod'},pyHelpDef:{params:[null,{type:'text',params:['A&value']},null,{type:'text',params:['B&value']},null,null],type:'quotient_and_mod'},paramsKeyMap:{LEFTHAND:1,RIGHTHAND:3,OPERATOR:5},class:'calc',isNotFor:[],func:function func(sprite,script){var left=script.getNumberValue('LEFTHAND',script);var right=script.getNumberValue('RIGHTHAND',script);if(isNaN(left)||isNaN(right))throw new Error();var operator=script.getField('OPERATOR',script);if(operator=='QUOTIENT')return Math.floor(left/right);else return left%right;},syntax:{js:[],py:[{syntax:'(%2 // %4)',template:'%2 // %4',params:[null,null,null,null,null,'QUOTIENT'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,{type:'Block',accept:'string'},undefined,{type:'Dropdown',options:[[Lang.Blocks.CALC_quotient_and_mod_sub_1,'QUOTIENT'],[Lang.Blocks.CALC_quotient_and_mod_sub_2,'MOD']],value:'QUOTIENT',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC,converter:Entry.block.converters.returnStringValue}]},{syntax:'(%2 % %4)',template:'%2 % %4',params:[null,null,null,null,null,'MOD'],blockType:'param',textParams:[undefined,{type:'Block',accept:'string'},undefined,{type:'Block',accept:'string'},undefined,{type:'Dropdown',options:[[Lang.Blocks.CALC_quotient_and_mod_sub_1,'QUOTIENT'],[Lang.Blocks.CALC_quotient_and_mod_sub_2,'MOD']],value:'QUOTIENT',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC,converter:Entry.block.converters.returnStringValue}]}]}},choose_project_timer_action:{color:'#FFD974',skeleton:'basic',statements:[],params:[{type:'Text',text:Lang.Blocks.CALC_choose_project_timer_action_1,color:'#000'},{type:'Dropdown',options:[[Lang.Blocks.CALC_choose_project_timer_action_sub_1,'START'],[Lang.Blocks.CALC_choose_project_timer_action_sub_2,'STOP'],[Lang.Blocks.CALC_choose_project_timer_action_sub_3,'RESET']],value:'START',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC},{type:'Text',text:Lang.Blocks.CALC_choose_project_timer_action_2,color:'#000'},{type:'Indicator',img:'block_icon/calc_01.png',size:12}],events:{viewAdd:[function(){if(Entry.engine)Entry.engine.showProjectTimer();}],dataDestroy:[function(block){if(Entry.engine)Entry.engine.hideProjectTimer(block);}]},def:{params:[null,'START',null,null],type:'choose_project_timer_action'},pyHelpDef:{params:[null,'A&value',null,null],type:'choose_project_timer_action'},paramsKeyMap:{ACTION:1},class:'calc_timer',isNotFor:[],func:function func(sprite,script){var engine=Entry.engine;var timer=engine.projectTimer;var isPaused=timer.isPaused;var isInit=timer.isInit;var currentTime=new Date().getTime();switch(script.getField('ACTION')){case'START':if(!isInit){engine.startProjectTimer();}else if(isInit&&isPaused){if(timer.pauseStart)timer.pausedTime+=currentTime-timer.pauseStart;delete timer.pauseStart;timer.isPaused=false;}break;case'STOP':if(isInit&&!isPaused){timer.isPaused=true;timer.pauseStart=currentTime;}break;case'RESET':engine.resetTimer();break;}return script.callReturn();},syntax:{js:[],py:[{template:'%1 %2 %3',syntax:'Entry.timer(%2)',textParams:[{type:'Text',text:'Entry.timer(',color:'#000'},{type:'Dropdown',options:[[Lang.Blocks.CALC_choose_project_timer_action_sub_1,'START'],[Lang.Blocks.CALC_choose_project_timer_action_sub_2,'STOP'],[Lang.Blocks.CALC_choose_project_timer_action_sub_3,'RESET']],value:'START',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_CALC,converter:Entry.block.converters.returnStringValueLowerCase,codeMap:'Entry.CodeMap.Entry.choose_project_timer_action[1]'},{type:'Text',text:')',color:'#000'}]}]}},wait_second:{color:'#498deb',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/flow_03.png',size:12}],events:{},def:{params:[{type:'number',params:['2']},null],type:'wait_second'},pyHelpDef:{params:[{type:'number',params:['A&value']},null],type:'wait_second'},paramsKeyMap:{SECOND:0},class:'delay',isNotFor:[],func:function func(sprite,script){if(!script.isStart){script.isStart=true;script.timeFlag=1;var timeValue=script.getNumberValue('SECOND',script);var fps=Entry.FPS||60;timeValue=60/fps*timeValue*1000;setTimeout(function(){script.timeFlag=0;},timeValue);return script;}else if(script.timeFlag==1){return script;}else{delete script.timeFlag;delete script.isStart;Entry.engine.isContinue=false;return script.callReturn();}},syntax:{js:[],py:[{syntax:'Entry.wait_for_sec(%1)'}]}},repeat_basic:{color:'#498deb',skeleton:'basic_loop',statements:[{accept:'basic'}],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/flow_03.png',size:12}],events:{},def:{params:[{type:'number',params:['10']},null],type:'repeat_basic'},pyHelpDef:{params:[{type:'number',params:['A&value']},null],type:'repeat_basic'},paramsKeyMap:{VALUE:0},statementsKeyMap:{DO:0},class:'repeat',isNotFor:[],func:function func(sprite,script){var iterNumber;if(!script.isLooped){script.isLooped=true;var iterNumber=script.getNumberValue('VALUE',script);if(iterNumber<0)throw new Error(Lang.Blocks.FLOW_repeat_basic_errorMsg);script.iterCount=Math.floor(iterNumber);}if(script.iterCount!=0&&!(script.iterCount<0)){script.iterCount--;return script.getStatement('DO',script);}else{delete script.isLooped;delete script.iterCount;return script.callReturn();}},syntax:{js:[],py:[{syntax:'for i in range(%1):\n$1',template:'for i in range(%1):',idChar:['i','j','k']}]}},repeat_inf:{color:'#498deb',skeleton:'basic_loop',statements:[{accept:'basic'}],params:[{type:'Indicator',img:'block_icon/flow_03.png',size:12},{type:'Block',accept:'Boolean'}],events:{},def:{params:[null],type:'repeat_inf'},pyHelpDef:{params:[null,{type:'boolean_shell',params:['A']}],type:'repeat_inf'},statementsKeyMap:{DO:0},class:'repeat',isNotFor:[],func:function func(sprite,script){//return script.getStatement("DO", script);
script.isLooped=true;return script.getStatement('DO');},syntax:{js:[],py:[{syntax:'while True:\n$1',template:'while %2\n:',textParams:[undefined,{type:'Block',accept:'boolean'}]}]}},stop_repeat:{color:'#498deb',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/flow_03.png',size:12}],events:{},def:{params:[null],type:'stop_repeat'},class:'repeat',isNotFor:[],func:function func(sprite,script){return this.executor.breakLoop();},syntax:{js:[],py:['break']}},wait_until_true:{color:'#498deb',skeleton:'basic',statements:[],params:[{type:'Block',accept:'boolean'},{type:'Indicator',img:'block_icon/flow_03.png',size:12}],events:{},def:{params:[{type:'True'},null],type:'wait_until_true'},pyHelpDef:{params:[{type:'boolean_shell',params:['A']},null],type:'wait_until_true'},paramsKeyMap:{BOOL:0},class:'wait',isNotFor:[],func:function func(sprite,script){var value=script.getBooleanValue('BOOL',script);if(value){return script.callReturn();}else{return script;}},syntax:{js:[],py:['Entry.wait_until(%1)']}},_if:{color:'#498deb',skeleton:'basic_loop',statements:[{accept:'basic'}],params:[{type:'Block',accept:'boolean'},{type:'Indicator',img:'block_icon/flow_03.png',size:12}],events:{},def:{params:[{type:'True'},null],type:'_if'},pyHelpDef:{params:[{type:'boolean_shell',params:['A']},null],type:'_if'},paramsKeyMap:{BOOL:0},statementsKeyMap:{STACK:0},class:'condition',isNotFor:[],func:function func(sprite,script){if(script.isCondition){delete script.isCondition;return script.callReturn();}var value=script.getBooleanValue('BOOL',script);if(value){script.isCondition=true;return script.getStatement('STACK',script);}else{return script.callReturn();}},syntax:{js:[],py:[{syntax:'if %1:\n$1',template:'if %1:'}]}},if_else:{color:'#498deb',skeleton:'basic_double_loop',statements:[{accept:'basic'},{accept:'basic'}],params:[{type:'Block',accept:'boolean'},{type:'Indicator',img:'block_icon/flow_03.png',size:12},{type:'LineBreak'}],events:{},def:{params:[{type:'True'},null],type:'if_else'},pyHelpDef:{params:[{type:'boolean_shell',params:['A']},null],type:'if_else'},paramsKeyMap:{BOOL:0},statementsKeyMap:{STACK_IF:0,STACK_ELSE:1},class:'condition',isNotFor:[],func:function func(sprite,script){if(script.isCondition){delete script.isCondition;return script.callReturn();}var value=script.getBooleanValue('BOOL',script);script.isCondition=true;if(value)return script.getStatement('STACK_IF',script);else return script.getStatement('STACK_ELSE',script);},syntax:{js:[],py:[{syntax:'if %1:\n$1\nelse:\n$2',template:'if %1: %3 else:',textParams:[{type:'Block',accept:'boolean'},undefined,{type:'LineBreak'}]}]}},create_clone:{color:'#498deb',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'clone',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_FLOW},{type:'Indicator',img:'block_icon/flow_03.png',size:12}],events:{},def:{params:[null,null],type:'create_clone'},pyHelpDef:{params:['A&value',null],type:'create_clone'},paramsKeyMap:{VALUE:0},class:'clone',isNotFor:[],func:function func(sprite,script){var targetSpriteId=script.getField('VALUE',script);var returnBlock=script.callReturn();if(targetSpriteId=='self')sprite.parent.addCloneEntity(sprite.parent,sprite,null);else{var object=Entry.container.getObject(targetSpriteId);object.addCloneEntity(sprite.parent,null,null);}return returnBlock;},syntax:{js:[],py:[{syntax:'Entry.make_clone_of(%1)',textParams:[{type:'DropdownDynamic',value:null,menuName:'clone',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_FLOW,converter:Entry.block.converters.returnStringKey,codeMap:'Entry.CodeMap.Entry.create_clone[0]'}]}]}},delete_clone:{color:'#498deb',skeleton:'basic_without_next',statements:[],params:[{type:'Indicator',img:'block_icon/flow_03.png',size:12}],events:{},def:{params:[null],type:'delete_clone'},class:'clone',isNotFor:[],func:function func(sprite,script){if(!sprite.isClone)return script.callReturn();sprite.removeClone();return this.die();},syntax:{js:[],py:['Entry.remove_this_clone()']}},when_clone_start:{color:'#498deb',skeleton:'basic_event',statements:[],params:[{type:'Indicator',img:'block_icon/start_icon_clone.png',size:17,position:{x:0,y:-2}}],events:{},def:{params:[null],type:'when_clone_start'},class:'clone',isNotFor:[],func:function func(sprite,script){return script.callReturn();},event:'when_clone_start',syntax:{js:[],py:[{syntax:'def when_make_clone():',blockType:'event'}]}},stop_run:{color:'#498deb',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/flow_03.png',size:12}],events:{},def:{params:[null]},func:function func(sprite,script){return Entry.engine.toggleStop();},syntax:{js:[],py:['']}},repeat_while_true:{color:'#498deb',skeleton:'basic_loop',statements:[{accept:'basic'}],params:[{type:'Block',accept:'boolean'},{type:'Dropdown',options:[[Lang.Blocks.FLOW_repeat_while_true_until,'until'],[Lang.Blocks.FLOW_repeat_while_true_while,'while']],value:'until',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_FLOW},{type:'Indicator',img:'block_icon/flow_03.png',size:12}],events:{},def:{params:[{type:'True'},null,null],type:'repeat_while_true'},pyHelpDef:{params:[{type:'boolean_shell',params:['A']},null,null],type:'repeat_while_true'},paramsKeyMap:{BOOL:0,OPTION:1},statementsKeyMap:{DO:0},class:'repeat',isNotFor:[],func:function func(sprite,script){var value=script.getBooleanValue('BOOL',script);if(script.getField('OPTION',script)=='until')value=!value;script.isLooped=value;return value?script.getStatement('DO',script):script.callReturn();},syntax:{js:[],py:[{syntax:'while %1 %2:\n$1',template:'while not %1:'}]}},stop_object:{color:'#498deb',skeleton:'basic',statements:[],params:[{type:'Dropdown',options:[[Lang.Blocks.FLOW_stop_object_all,'all'],[Lang.Blocks.FLOW_stop_object_this_object,'thisOnly'],[Lang.Blocks.FLOW_stop_object_this_thread,'thisThread'],[Lang.Blocks.FLOW_stop_object_other_thread,'otherThread'],[Lang.Blocks.FLOW_stop_object_other_objects,'other_objects']],value:'all',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_FLOW},{type:'Indicator',img:'block_icon/flow_03.png',size:12}],events:{},def:{params:[null,null],type:'stop_object'},pyHelpDef:{params:['A&value',null],type:'stop_object'},paramsKeyMap:{TARGET:0},class:'terminate',isNotFor:[],func:function func(sprite,script){var object=sprite.parent;switch(script.getField('TARGET',script)){case'all':Entry.container.mapObject(function(obj){if(!obj.objectType)return;obj.script.clearExecutors();});return this.die();case'thisOnly':object.script.clearExecutorsByEntity(sprite);return this.die();case'thisObject':object.script.clearExecutors();return this.die();case'thisThread':return this.die();case'otherThread':var executor=this.executor;var code=object.script;var executors=code.executors;var spriteId=sprite.id;for(var i=0;i<executors.length;i++){var currentExecutor=executors[i];if(currentExecutor!==executor&&currentExecutor.entity.id===spriteId){code.removeExecutor(currentExecutor);--i;}}return script.callReturn();case'other_objects':Entry.container.mapObject(function(obj){if(!obj.objectType||obj===object){return;}obj.script.clearExecutors();});return script.callReturn();}},syntax:{js:[],py:[{syntax:'Entry.stop_code(%1)',textParams:[{type:'Dropdown',options:[[Lang.Blocks.FLOW_stop_object_all,'all'],[Lang.Blocks.FLOW_stop_object_this_object,'thisOnly'],[Lang.Blocks.FLOW_stop_object_this_thread,'thisThread'],[Lang.Blocks.FLOW_stop_object_other_thread,'otherThread'],[Lang.Blocks.FLOW_stop_object_other_objects,'other_objects']],value:'all',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_FLOW,converter:Entry.block.converters.returnStringValue,codeMap:'Entry.CodeMap.Entry.stop_object[0]'}]}]}},restart_project:{color:'#498deb',skeleton:'basic_without_next',statements:[],params:[{type:'Indicator',img:'block_icon/flow_03.png',size:12}],events:{},def:{params:[null],type:'restart_project'},class:'terminate',isNotFor:[],func:function func(sprite,script){Entry.engine.toggleStop();Entry.engine.toggleRun();},syntax:{js:[],py:['Entry.start_again()']}},remove_all_clones:{color:'#498deb',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/flow_03.png',size:12}],events:{},def:{params:[null],type:'remove_all_clones'},class:'clone',isNotFor:[],func:function func(sprite,script){var clonedEntities=sprite.parent.getClonedEntities();clonedEntities.map(function(entity){entity.removeClone();});clonedEntities=null;return script.callReturn();},syntax:{js:[],py:['Entry.remove_all_clone()']}},functionAddButton:{skeleton:'basic_button',color:'#eee',isNotFor:['functionInit'],params:[{type:'Text',text:Lang.Workspace.function_create,color:'#333',align:'center'}],def:{type:'functionAddButton'},events:{mousedown:[function(){Entry.variableContainer.createFunction();}]}},function_field_label:{skeleton:'basic_param',isNotFor:['functionEdit'],color:'#f9c535',params:[{type:'TextInput',value:Lang.Blocks.FUNCTION_explanation_1},{type:'Output',accept:'param'}],paramsKeyMap:{NAME:0,NEXT:1},def:{params:[Lang.Blocks.FUNCTION_explanation_1],type:'function_field_label'},//"syntax": {"js": [], "py": ["%1function_field_label#"]}
syntax:{js:[],py:['name']}},function_field_string:{skeleton:'basic_param',isNotFor:['functionEdit'],color:'#ffd974',params:[{type:'Block',accept:'string',restore:true},{type:'Output',accept:'param'}],paramsKeyMap:{PARAM:0,NEXT:1},def:{params:[{type:'text',params:[Lang.template.function_param_string]}],type:'function_field_string'},//"syntax": {"js": [], "py": ["%1function_field_string#"]}
syntax:{js:[],py:['value']}},function_field_boolean:{skeleton:'basic_param',isNotFor:['functionEdit'],color:'#aeb8ff',params:[{type:'Block',accept:'boolean',restore:true},{type:'Output',accept:'param'}],paramsKeyMap:{PARAM:0,NEXT:1},def:{params:[{type:'True',params:[Lang.template.function_param_boolean]}],type:'function_field_boolean'},//"syntax": {"js": [], "py": ["%1function_field_boolean#"]}
syntax:{js:[],py:['boolean']}},function_param_string:{skeleton:'basic_string_field',color:'#ffd974',template:'%1 %2',events:{viewAdd:[function(){if(Entry.Func.isEdit)Entry.Func.refreshMenuCode();}]},func:function func(){return this.executor.register.params[this.executor.register.paramMap[this.block.type]];},syntax:{js:[],py:['']}},function_param_boolean:{skeleton:'basic_boolean_field',color:'#aeb8ff',template:'%1 %2',events:{viewAdd:[function(){if(Entry.Func.isEdit)Entry.Func.refreshMenuCode();}]},func:function func(){return this.executor.register.params[this.executor.register.paramMap[this.block.type]];},syntax:{js:[],py:['']}},function_create:{skeleton:'basic_create',color:'#cc7337',event:'funcDef',params:[{type:'Block',accept:'param',value:{type:'function_field_label',params:[Lang.Blocks.FUNC],copyable:false}},{type:'Indicator',img:'block_icon/function_03.png',size:12}],paramsKeyMap:{FIELD:0},func:function func(){},syntax:{js:[],py:[{syntax:'%1',keyOption:'function_create'}]}},function_general:{skeleton:'basic',color:'#cc7337',params:[{type:'Indicator',img:'block_icon/function_03.png',size:12}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_functionRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_functionRefs',block);}],dblclick:[function(blockView){var mode=blockView.getBoard().workspace.getMode();if(mode!==Entry.Workspace.MODE_BOARD)return;if(Entry.type!=='workspace')return;var block=blockView.block;var id=block.getFuncId();Entry.Func.edit(Entry.variableContainer.functions_[id]);}]},func:function func(entity){if(!this.initiated){this.initiated=true;Entry.callStackLength++;if(Entry.callStackLength>Entry.Executor.MAXIMUM_CALLSTACK){Entry.toast.alert(Lang.Workspace.RecursiveCallWarningTitle,Lang.Workspace.RecursiveCallWarningContent);throw new Error();}var func=Entry.variableContainer.getFunction(this.block.getFuncId());this.funcCode=func.content;this.funcExecutor=this.funcCode.raiseEvent('funcDef',entity)[0];this.funcExecutor.register.params=this.getParams();var paramMap={};this.funcExecutor.register.paramMap=func.paramMap;this.funcExecutor.parentExecutor=this.executor;this.funcExecutor.isFuncExecutor=true;}this.funcExecutor.execute();if(!this.funcExecutor.isEnd()){this.funcCode.removeExecutor(this.funcExecutor);return Entry.STATIC.BREAK;}Entry.callStackLength--;},syntax:{js:[],py:['']}},//endregion basic 기본블록
//region basic 기본
show:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null],type:'show'},class:'visibility',isNotFor:[],func:function func(sprite,script){sprite.setVisible(true);return script.callReturn();},syntax:{js:[],py:['Entry.show()']}},hide:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null],type:'hide'},class:'visibility',isNotFor:[],func:function func(sprite,script){sprite.setVisible(false);return script.callReturn();},syntax:{js:[],py:['Entry.hide()']}},dialog_time:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Block',accept:'string'},{type:'Dropdown',options:[[Lang.Blocks.speak,'speak']],value:'speak',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_LOOKS},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[{type:'text',params:[Lang.Blocks.block_hi]},{type:'number',params:['4']},null,null],type:'dialog_time'},pyHelpDef:{params:[{type:'text',params:['A&value']},{type:'number',params:['B&value']},null,null],type:'dialog_time'},paramsKeyMap:{VALUE:0,SECOND:1,OPTION:2},class:'say',isNotFor:['textBox'],func:function func(sprite,script){if(!script.isStart){var timeValue=script.getNumberValue('SECOND',script);var message=script.getValue('VALUE',script);var mode=script.getField('OPTION',script);script.isStart=true;script.timeFlag=1;if(message===''){message='    ';}else if(typeof message==='boolean'){message=message?'True':'False';}else{message=message+'';}message=Entry.convertToRoundedDecimals(message,3);new Entry.Dialog(sprite,message,mode);sprite.syncDialogVisible(sprite.getVisible());setTimeout(function(){script.timeFlag=0;},timeValue*1000);}if(script.timeFlag==0){delete script.timeFlag;delete script.isStart;if(sprite.dialog)sprite.dialog.remove();return script.callReturn();}else{if(!sprite.dialog){var message=script.getStringValue('VALUE',script);var mode=script.getField('OPTION',script);if(!message&&typeof message!='number')message='    ';message=Entry.convertToRoundedDecimals(message,3);new Entry.Dialog(sprite,message,mode);sprite.syncDialogVisible(sprite.getVisible());}return script;}},syntax:{js:[],py:[{syntax:'Entry.print_for_sec(%1, %2)',params:[null,null,'speak'],textParams:[{type:'Block',accept:'string'},{type:'Block',accept:'string'},{type:'Dropdown',options:[[Lang.Blocks.speak,'speak']],value:'speak',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_LOOKS,converter:Entry.block.converters.returnStringValue}]}]}},dialog:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Dropdown',options:[[Lang.Blocks.speak,'speak']],value:'speak',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_LOOKS},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[{type:'text',params:[Lang.Blocks.block_hi]},null,null],type:'dialog'},pyHelpDef:{params:[{type:'text',params:['A&value']},null,null],type:'dialog'},paramsKeyMap:{VALUE:0,OPTION:1},class:'say',isNotFor:['textBox'],func:function func(sprite,script){var message=script.getValue('VALUE',script);if(message===''){message='    ';}else if(typeof message==='boolean'){message=message?'True':'False';}else{message=message+'';}var mode=script.getField('OPTION',script);message=Entry.convertToRoundedDecimals(message,3);new Entry.Dialog(sprite,message,mode);sprite.syncDialogVisible(sprite.getVisible());return script.callReturn();},syntax:{js:[],py:[{syntax:'Entry.print(%1)',params:[null,'speak']}]}},remove_dialog:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null],type:'remove_dialog'},class:'say',isNotFor:['textBox'],func:function func(sprite,script){if(sprite.dialog)sprite.dialog.remove();return script.callReturn();},syntax:{js:[],py:['Entry.clear_print()']}},change_to_nth_shape:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'pictures',fontSize:11},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null,null],type:'change_to_nth_shape'},paramsKeyMap:{VALUE:0},class:'shape',isNotFor:[],func:function func(sprite,script){var imageId=script.getField('VALUE',script);var picture=sprite.parent.getPicture(imageId);sprite.setImage(picture);return script.callReturn();},syntax:{js:[],py:['']}},change_to_next_shape:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Dropdown',options:[[Lang.Blocks.LOOKS_change_shape_next,'next'],[Lang.Blocks.LOOKS_change_shape_prev,'prev']],value:'next',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_LOOKS},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null,null],type:'change_to_next_shape'},pyHelpDef:{params:['A&value',null],type:'change_to_next_shape'},paramsKeyMap:{DRIECTION:0},class:'shape',isNotFor:['textBox'],func:function func(sprite,script){var picture;if(script.getStringField('DRIECTION')!=='prev'){picture=sprite.parent.getNextPicture(sprite.picture.id);}else{picture=sprite.parent.getPrevPicture(sprite.picture.id);}sprite.setImage(picture);return script.callReturn();},syntax:{js:[],py:[{syntax:'Entry.change_shape_to(%1)',textParams:[{type:'Dropdown',options:[[Lang.Blocks.LOOKS_change_shape_next,'next'],[Lang.Blocks.LOOKS_change_shape_prev,'prev']],value:'next',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_LOOKS,converter:Entry.block.converters.returnStringValue,codeMap:'Entry.CodeMap.Entry.change_to_next_shape[0]'}]}]}},set_effect_volume:{color:'#EC4466',skeleton:'basic',statements:[],deprecated:true,params:[{type:'Dropdown',options:[[Lang.Blocks.color,'color'],[Lang.Blocks.brightness,'brightness'],[Lang.Blocks.opacity,'opacity']],value:'color',fontSize:11},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null,{type:'number',params:['10']},null],type:'set_effect_volume'},paramsKeyMap:{EFFECT:0,VALUE:1},class:'effect',isNotFor:['textBox'],func:function func(sprite,script){var effect=script.getField('EFFECT',script);var effectValue=script.getNumberValue('VALUE',script);var effectName='';if(effect=='color'){sprite.effect.hue=effectValue+sprite.effect.hue;effectName='hue';}else if(effect=='lens'){}else if(effect=='swriling'){}else if(effect=='pixel'){}else if(effect=='mosaic'){}else if(effect=='brightness'){sprite.effect.brightness=effectValue+sprite.effect.brightness;effectName='brightness';}else if(effect=='blur'){}else if(effect=='opacity'){sprite.effect.alpha=sprite.effect.alpha+effectValue/100;effectName='alpha';}sprite.applyFilter(true,[effectName]);return script.callReturn();},syntax:{js:[],py:['Entry.set_effect_volume(%1, %2)']}},set_effect:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Dropdown',options:[[Lang.Blocks.color,'color'],[Lang.Blocks.brightness,'brightness'],[Lang.Blocks.opacity,'opacity']],value:'color',fontSize:11},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null,{type:'number',params:['100']},null],type:'set_effect'},paramsKeyMap:{EFFECT:0,VALUE:1},class:'effect',isNotFor:['textBox'],func:function func(sprite,script){var effect=script.getField('EFFECT',script);var effectValue=script.getNumberValue('VALUE',script);var effectName='';if(effect=='color'){sprite.effect.hue=effectValue;effectName='hue';}else if(effect=='lens'){}else if(effect=='swriling'){}else if(effect=='pixel'){}else if(effect=='mosaic'){}else if(effect=='brightness'){sprite.effect.brightness=effectValue;effectName='brightness';}else if(effect=='blur'){}else if(effect=='opacity'){sprite.effect.alpha=effectValue/100;effectName='alpha';}sprite.applyFilter(true,[effectName]);return script.callReturn();},syntax:{js:[],py:['Entry.set_effect(%1, %2)']}},erase_all_effects:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null],type:'erase_all_effects'},class:'effect',isNotFor:['textBox'],func:function func(sprite,script){sprite.resetFilter();return script.callReturn();},syntax:{js:[],py:['Entry.clear_effect()']}},change_scale_percent:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[{type:'number',params:['10']},null],type:'change_scale_percent'},paramsKeyMap:{VALUE:0},class:'scale',isNotFor:[],func:function func(sprite,script){var scaleValue=(script.getNumberValue('VALUE',script)+100)/100;sprite.setScaleX(sprite.getScaleX()*scaleValue);sprite.setScaleY(sprite.getScaleY()*scaleValue);return script.callReturn();},syntax:{js:[],py:['']}},set_scale_percent:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[{type:'number',params:['100']},null],type:'set_scale_percent'},paramsKeyMap:{VALUE:0},class:'scale',isNotFor:[],func:function func(sprite,script){var scaleValue=script.getNumberValue('VALUE',script)/100;var snapshot=sprite.snapshot_;sprite.setScaleX(scaleValue*snapshot.scaleX);sprite.setScaleY(scaleValue*snapshot.scaleY);return script.callReturn();},syntax:{js:[],py:['']}},change_scale_size:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[{type:'number',params:['10']},null],type:'change_scale_size'},pyHelpDef:{params:[{type:'number',params:['A&value']},null],type:'change_scale_size'},paramsKeyMap:{VALUE:0},class:'scale',isNotFor:[],func:function func(sprite,script){var sizeValue=script.getNumberValue('VALUE',script);sprite.setSize(sprite.getSize()+sizeValue);return script.callReturn();},syntax:{js:[],py:['Entry.add_size(%1)']}},set_scale_size:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[{type:'number',params:['100']},null],type:'set_scale_size'},pyHelpDef:{params:[{type:'number',params:['A&value']},null],type:'set_scale_size'},paramsKeyMap:{VALUE:0},class:'scale',isNotFor:[],func:function func(sprite,script){var sizeValue=script.getNumberValue('VALUE',script);sprite.setSize(sizeValue);return script.callReturn();},syntax:{js:[],py:['Entry.set_size(%1)']}},flip_y:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null],type:'flip_y'},class:'flip',isNotFor:[],func:function func(sprite,script){sprite.setScaleX(-1*sprite.getScaleX());return script.callReturn();},syntax:{js:[],py:['Entry.flip_vertical()']}},flip_x:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null],type:'flip_x'},class:'flip',isNotFor:[],func:function func(sprite,script){sprite.setScaleY(-1*sprite.getScaleY());return script.callReturn();},syntax:{js:[],py:['Entry.flip_horizontal()']}},set_object_order:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'objectSequence',fontSize:11},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null,null],type:'set_object_order'},paramsKeyMap:{VALUE:0},class:'z-index',isNotFor:[],func:function func(sprite,script){var targetIndex=script.getField('VALUE',script);//var currentIndex = Entry.container.getBelongedObjectsToScene().indexOf(sprite.parent);
var currentIndex=Entry.container.getCurrentObjects().indexOf(sprite.parent);if(currentIndex>-1){return script.callReturn();}else throw new Error('object is not available');},syntax:{js:[],py:['']}},get_pictures:{color:'#EC4466',skeleton:'basic_string_field',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'pictures',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_LOOKS}],events:{},def:{params:[null]},paramsKeyMap:{VALUE:0},func:function func(sprite,script){return script.getStringField('VALUE');},syntax:{js:[],py:[{syntax:'%1',keyOption:'get_pictures',textParams:[{type:'DropdownDynamic',value:null,menuName:'pictures',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_LOOKS,converter:Entry.block.converters.returnStringKey}]}]}},change_to_some_shape:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[{type:'get_pictures',id:'z4jm'},null],type:'change_to_some_shape'},pyHelpDef:{params:[{type:'get_pictures',params:['A&value']},null],type:'change_to_some_shape'},paramsKeyMap:{VALUE:0},class:'shape',isNotFor:['textBox'],func:function func(sprite,script){var imageId=script.getStringValue('VALUE');var value=Entry.parseNumber(imageId);var picture=sprite.parent.getPicture(imageId);sprite.setImage(picture);return script.callReturn();},syntax:{js:[],py:[{passTest:true,syntax:'Entry.change_shape(%1)'}]}},add_effect_amount:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Dropdown',options:[[Lang.Blocks.color,'color'],[Lang.Blocks.brightness,'brightness'],[Lang.Blocks.transparency,'transparency']],value:'color',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_LOOKS},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null,{type:'number',params:['10']},null],type:'add_effect_amount'},pyHelpDef:{params:['A&value',{type:'number',params:['B&value']},null],type:'add_effect_amount'},paramsKeyMap:{EFFECT:0,VALUE:1},class:'effect',isNotFor:['textBox'],func:function func(sprite,script){var effect=script.getField('EFFECT',script);var effectValue=script.getNumberValue('VALUE',script);var effectName='';if(effect=='color'){sprite.effect.hsv=effectValue+sprite.effect.hsv;effectName='hsv';}else if(effect=='brightness'){sprite.effect.brightness=effectValue+sprite.effect.brightness;effectName='brightness';}else if(effect=='transparency'){sprite.effect.alpha=sprite.effect.alpha-effectValue/100;effectName='alpha';}sprite.applyFilter(true,[effectName]);return script.callReturn();},syntax:{js:[],py:[{syntax:'Entry.add_effect(%1, %2)',textParams:[{type:'Dropdown',options:[[Lang.Blocks.color,'color'],[Lang.Blocks.brightness,'brightness'],[Lang.Blocks.transparency,'transparency']],value:'color',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_LOOKS,converter:Entry.block.converters.returnStringValue,codeMap:'Entry.CodeMap.Entry.add_effect_amount[0]'},{type:'Block',accept:'string'}]}]}},change_effect_amount:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Dropdown',options:[[Lang.Blocks.color,'color'],[Lang.Blocks.brightness,'brightness'],[Lang.Blocks.transparency,'transparency']],value:'color',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_LOOKS},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null,{type:'number',params:['100']},null],type:'change_effect_amount'},pyHelpDef:{params:['A&value',{type:'number',params:['B&value']},null],type:'change_effect_amount'},paramsKeyMap:{EFFECT:0,VALUE:1},class:'effect',isNotFor:['textBox'],func:function func(sprite,script){var effect=script.getField('EFFECT',script);var effectValue=script.getNumberValue('VALUE',script);var effectName='';if(effect=='color'){sprite.effect.hsv=effectValue;effectName='hsv';}else if(effect=='brightness'){sprite.effect.brightness=effectValue;effectName='brightness';}else if(effect=='transparency'){sprite.effect.alpha=1-effectValue/100;effectName='alpha';}sprite.applyFilter(true,[effectName]);return script.callReturn();},syntax:{js:[],py:[{syntax:'Entry.set_effect(%1, %2)',textParams:[{type:'Dropdown',options:[[Lang.Blocks.color,'color'],[Lang.Blocks.brightness,'brightness'],[Lang.Blocks.transparency,'transparency']],value:'color',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_LOOKS,converter:Entry.block.converters.returnStringValue,codeMap:'Entry.CodeMap.Entry.change_effect_amount[0]'},{type:'Block',accept:'string'}]}]}},set_effect_amount:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Dropdown',options:[[Lang.Blocks.color,'color'],[Lang.Blocks.brightness,'brightness'],[Lang.Blocks.transparency,'transparency']],value:'color',fontSize:11},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null,{type:'number',params:['10']},null],type:'set_effect_amount'},paramsKeyMap:{EFFECT:0,VALUE:1},class:'effect',isNotFor:['textBox'],func:function func(sprite,script){var effect=script.getField('EFFECT',script);var effectValue=script.getNumberValue('VALUE',script);var effectName='';if(effect=='color'){sprite.effect.hue=effectValue+sprite.effect.hue;effectName='hue';}else if(effect=='brightness'){sprite.effect.brightness=effectValue+sprite.effect.brightness;effectName='brightness';}else if(effect=='transparency'){sprite.effect.alpha=sprite.effect.alpha-effectValue/100;effectName='alpha';}sprite.applyFilter(true,[effectName]);return script.callReturn();},syntax:{js:[],py:['']}},set_entity_effect:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Dropdown',options:[[Lang.Blocks.color,'color'],[Lang.Blocks.brightness,'brightness'],[Lang.Blocks.transparency,'transparency']],value:'color',fontSize:11},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null,{type:'number',params:['100']},null],type:'set_entity_effect'},paramsKeyMap:{EFFECT:0,VALUE:1},class:'effect',isNotFor:['textBox'],func:function func(sprite,script){var effect=script.getField('EFFECT',script);var effectValue=script.getNumberValue('VALUE',script);var effectName='';if(effect=='color'){sprite.effect.hue=effectValue;effectName='hue';}else if(effect=='brightness'){sprite.effect.brightness=effectValue;effectName='brightness';}else if(effect=='transparency'){sprite.effect.alpha=1-effectValue/100;effectName='alpha';}sprite.applyFilter(true,[effectName]);return script.callReturn();},syntax:{js:[],py:['']}},change_object_index:{color:'#EC4466',skeleton:'basic',statements:[],params:[{type:'Dropdown',options:[[Lang.Blocks.LOOKS_change_object_index_sub_1,'FRONT'],[Lang.Blocks.LOOKS_change_object_index_sub_2,'FORWARD'],[Lang.Blocks.LOOKS_change_object_index_sub_3,'BACKWARD'],[Lang.Blocks.LOOKS_change_object_index_sub_4,'BACK']],value:'FRONT',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_LOOKS},{type:'Indicator',img:'block_icon/looks_03.png',size:12}],events:{},def:{params:[null,null],type:'change_object_index'},pyHelpDef:{params:['A&value',null],type:'change_object_index'},paramsKeyMap:{LOCATION:0},class:'z-index',isNotFor:[],func:function func(sprite,script){var location=script.getField('LOCATION',script);var selectedObjectContainer=Entry.stage.selectedObjectContainer;var currentIndex=selectedObjectContainer.getChildIndex(sprite.object);var max=selectedObjectContainer.children.length-1;var targetIndex=currentIndex;switch(location){case'FRONT':targetIndex=max;break;case'FORWARD':if(currentIndex===max)break;var frontEntity=selectedObjectContainer.getChildAt(currentIndex+1).entity;targetIndex+=(frontEntity.shapes.length?2:1)+frontEntity.stamps.length;break;case'BACKWARD':targetIndex-=(sprite.shapes.length?2:1)+sprite.stamps.length;var backEntity=selectedObjectContainer.getChildAt(targetIndex);if(!backEntity){targetIndex=0;break;}backEntity=backEntity.entity;targetIndex-=(backEntity.shapes.length?1:0)+backEntity.stamps.length;break;case'BACK':targetIndex=0;break;}Entry.stage.setEntityIndex(sprite,targetIndex);return script.callReturn();},syntax:{js:[],py:[{syntax:'Entry.send_layer_to(%1)',textParams:[{type:'Dropdown',options:[[Lang.Blocks.LOOKS_change_object_index_sub_1,'FRONT'],[Lang.Blocks.LOOKS_change_object_index_sub_2,'FORWARD'],[Lang.Blocks.LOOKS_change_object_index_sub_3,'BACKWARD'],[Lang.Blocks.LOOKS_change_object_index_sub_4,'BACK']],value:'FRONT',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_LOOKS,converter:Entry.block.converters.returnStringValueLowerCase,codeMap:'Entry.CodeMap.Entry.change_object_index[0]'}]}]}},move_direction:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'number',params:['10']},null],type:'move_direction'},pyHelpDef:{params:[{type:'number',params:['A&value']},null],type:'move_direction'},paramsKeyMap:{VALUE:0},class:'walk',isNotFor:[],func:function func(sprite,script){var value=script.getNumberValue('VALUE',script);sprite.setX(sprite.getX()+value*Math.cos((sprite.getRotation()+sprite.getDirection()-90)/180*Math.PI));sprite.setY(sprite.getY()-value*Math.sin((sprite.getRotation()+sprite.getDirection()-90)/180*Math.PI));if(sprite.brush&&!sprite.brush.stop){sprite.brush.lineTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();},syntax:{js:[],py:['Entry.move_to_direction(%1)']}},move_x:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'number',params:['10']},null],type:'move_x'},pyHelpDef:{params:[{type:'number',params:['A&value']},null],type:'move_x'},paramsKeyMap:{VALUE:0},class:'move_relative',isNotFor:[],func:function func(sprite,script){var value=script.getNumberValue('VALUE',script);sprite.setX(sprite.getX()+value);if(sprite.brush&&!sprite.brush.stop){sprite.brush.lineTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();},syntax:{js:[],py:['Entry.add_x(%1)']}},move_y:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'number',params:['10']},null],type:'move_y'},pyHelpDef:{params:[{type:'number',params:['A&value']},null],type:'move_y'},paramsKeyMap:{VALUE:0},class:'move_relative',isNotFor:[],func:function func(sprite,script){var value=script.getNumberValue('VALUE',script);sprite.setY(sprite.getY()+value);if(sprite.brush&&!sprite.brush.stop){sprite.brush.lineTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();},syntax:{js:[],py:['Entry.add_y(%1)']}},locate_xy_time:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Block',accept:'string'},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'number',params:['2']},{type:'number',params:['10']},{type:'number',params:['10']},null],type:'locate_xy_time'},pyHelpDef:{params:[{type:'number',params:['C&value']},{type:'number',params:['A&value']},{type:'number',params:['B&value']},null],type:'locate_xy_time'},paramsKeyMap:{VALUE1:0,VALUE2:1,VALUE3:2},class:'move_absolute',isNotFor:[],func:function func(sprite,script){if(!script.isStart){var timeValue;timeValue=script.getNumberValue('VALUE1',script);script.isStart=true;script.frameCount=Math.max(Math.floor(timeValue*Entry.FPS),1);script.x=script.getNumberValue('VALUE2',script);script.y=script.getNumberValue('VALUE3',script);if(script.frameCount==1)action();}if(script.frameCount!=0){action();return script;}else{delete script.isStart;delete script.frameCount;return script.callReturn();}function action(){var dX=script.x-sprite.getX();var dY=script.y-sprite.getY();dX/=script.frameCount;dY/=script.frameCount;sprite.setX(sprite.getX()+dX);sprite.setY(sprite.getY()+dY);script.frameCount--;if(sprite.brush&&!sprite.brush.stop){sprite.brush.lineTo(sprite.getX(),sprite.getY()*-1);}}},syntax:{js:[],py:['Entry.set_xy_for_sec(%2, %3, %1)']}},rotate_by_angle:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'number',params:['90']},null],type:'rotate_by_angle'},paramsKeyMap:{VALUE:0},class:'rotate',isNotFor:[],func:function func(sprite,script){var value=script.getNumberValue('VALUE',script);sprite.setRotation(sprite.getRotation()+value);return script.callReturn();},syntax:{js:[],py:['']}},rotate_by_angle_dropdown:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Dropdown',options:[['45','45'],['90','90'],['135','135'],['180','180']],value:'45',fontSize:11},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:['45',null],type:'rotate_by_angle_dropdown'},paramsKeyMap:{VALUE:0},class:'ebs',isNotFor:[],func:function func(sprite,script){var value=script.getField('VALUE',script);sprite.setRotation(sprite.getRotation()+Number(value));return script.callReturn();},syntax:{js:[],py:['']}},see_angle:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'number',params:['90']},null],type:'see_angle'},paramsKeyMap:{VALUE:0},class:'rotate',isNotFor:[],func:function func(sprite,script){var value=script.getNumberValue('VALUE',script);sprite.setDirection(value);return script.callReturn();},syntax:{js:[],py:['']}},see_direction:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'sprites',fontSize:11},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[null,null]},paramsKeyMap:{VALUE:0},func:function func(sprite,script){var targetId=script.getField('VALUE',script);var targetEntity=Entry.container.getEntity(targetId);var deltaX=targetEntity.getX()-sprite.getX();var deltaY=targetEntity.getY()-sprite.getY();if(deltaX>=0){sprite.setRotation(Math.atan(deltaY/deltaX)/Math.PI*180+90);}else{sprite.setRotation(Math.atan(deltaY/deltaX)/Math.PI*180+270);}return script.callReturn();},syntax:{js:[],py:['']}},locate_xy:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'number',params:['0']},{type:'number',params:['0']},null],type:'locate_xy'},pyHelpDef:{params:[{type:'number',params:['A&value']},{type:'number',params:['B&value']}],type:'locate_xy'},paramsKeyMap:{VALUE1:0,VALUE2:1},class:'move_absolute',isNotFor:[],func:function func(sprite,script){var value1=script.getNumberValue('VALUE1',script);var value2=script.getNumberValue('VALUE2',script);sprite.setX(value1);sprite.setY(value2);if(sprite.brush&&!sprite.brush.stop){sprite.brush.lineTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();},syntax:{js:[],py:['Entry.set_xy(%1, %2)']}},locate_x:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'number',params:['10']},null],type:'locate_x'},pyHelpDef:{params:[{type:'number',params:['A&value']},null],type:'locate_x'},paramsKeyMap:{VALUE:0},class:'move_absolute',isNotFor:[],func:function func(sprite,script){var value=script.getNumberValue('VALUE',script);sprite.setX(value);if(sprite.brush&&!sprite.brush.stop){sprite.brush.lineTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();},syntax:{js:[],py:['Entry.set_x(%1)']}},locate_y:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'number',params:['10']},null],type:'locate_y'},pyHelpDef:{params:[{type:'number',params:['A&value']},null],type:'locate_y'},paramsKeyMap:{VALUE:0},class:'move_absolute',isNotFor:[],func:function func(sprite,script){var value=script.getNumberValue('VALUE',script);//sprite.y = 340 - value;
sprite.setY(value);if(sprite.brush&&!sprite.brush.stop){sprite.brush.lineTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();},syntax:{js:[],py:['Entry.set_y(%1)']}},locate:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'spritesWithMouse',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_MOVING},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[null,null],type:'locate'},pyHelpDef:{params:['A&value',null],type:'locate'},paramsKeyMap:{VALUE:0},class:'move_absolute',isNotFor:[],func:function func(sprite,script){var targetId=script.getField('VALUE',script);var x,y;if(targetId=='mouse'){x=Entry.stage.mouseCoordinate.x;y=Entry.stage.mouseCoordinate.y;}else{var targetEntity=Entry.container.getEntity(targetId);x=targetEntity.getX();y=targetEntity.getY();}sprite.setX(Number(x));sprite.setY(Number(y));if(sprite.brush&&!sprite.brush.stop){sprite.brush.lineTo(x,y*-1);}return script.callReturn();},syntax:{js:[],py:[{syntax:'Entry.move_to(%1)',textParams:[{type:'DropdownDynamic',value:null,menuName:'spritesWithMouse',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_MOVING,converter:Entry.block.converters.returnStringKey,codeMap:'Entry.CodeMap.Entry.locate[0]'}]}]}},move_xy_time:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Block',accept:'string'},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'number',params:['2']},{type:'number',params:['10']},{type:'number',params:['10']},null],type:'move_xy_time'},pyHelpDef:{params:[{type:'number',params:['C&value']},{type:'number',params:['A&value']},{type:'number',params:['B&value']},null],type:'move_xy_time'},paramsKeyMap:{VALUE1:0,VALUE2:1,VALUE3:2},class:'move_relative',isNotFor:[],func:function func(sprite,script){if(!script.isStart){var timeValue;timeValue=script.getNumberValue('VALUE1',script);var xValue=script.getNumberValue('VALUE2',script);var yValue=script.getNumberValue('VALUE3',script);script.isStart=true;script.frameCount=Math.max(Math.floor(timeValue*Entry.FPS),1);script.dX=xValue/script.frameCount;script.dY=yValue/script.frameCount;if(script.frameCount==1)action();}if(script.frameCount!=0){action();return script;}else{delete script.isStart;delete script.frameCount;return script.callReturn();}function action(){sprite.setX(sprite.getX()+script.dX);sprite.setY(sprite.getY()+script.dY);script.frameCount--;if(sprite.brush&&!sprite.brush.stop){sprite.brush.lineTo(sprite.getX(),sprite.getY()*-1);}}},syntax:{js:[],py:['Entry.add_xy_for_sec(%2, %3, %1)']}},rotate_by_angle_time:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'angle',params:['90']},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'number',params:['2']},null,null],type:'rotate_by_angle_time'},paramsKeyMap:{VALUE:1},class:'rotate',isNotFor:[],func:function func(sprite,script){if(!script.isStart){var timeValue;timeValue=script.getNumberValue('VALUE',script);var angleValue=script.getNumberField('VALUE',script);script.isStart=true;script.frameCount=Math.floor(timeValue*Entry.FPS);script.dAngle=angleValue/script.frameCount;}if(script.frameCount!=0){sprite.setRotation(sprite.getRotation()+script.dAngle);script.frameCount--;return script;}else{delete script.isStart;delete script.frameCount;return script.callReturn();}},syntax:{js:[],py:['']}},bounce_wall:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[null],type:'bounce_wall'},class:'walk',isNotFor:[],func:function func(sprite,script){var threshold=0;var method=sprite.parent.getRotateMethod();/*
           var bound = sprite.object.getTransformedBounds();
           var size = {};
           size.width = bound.width * Math.sqrt(1.0 + (bound.height/bound.width) * (bound.height/bound.width));
           size.height = bound.height * Math.sqrt(1.0 + (bound.width/bound.height) * (bound.width/bound.height));
           */if(method=='free')var angle=(sprite.getRotation()+sprite.getDirection()).mod(360);else var angle=sprite.getDirection();var skip=Entry.Utils.COLLISION.NONE;if(angle<90&&angle>=0||angle<360&&angle>=270){skip=sprite.collision==Entry.Utils.COLLISION.UP;var up=ndgmr.checkPixelCollision(Entry.stage.wall.up,sprite.object,threshold,false);if(!up&&skip)sprite.collision=Entry.Utils.COLLISION.NONE;if(up&&skip)up=false;if(up){if(method=='free')sprite.setRotation(-sprite.getRotation()-sprite.getDirection()*2+180);else sprite.setDirection(-sprite.getDirection()+180);sprite.collision=Entry.Utils.COLLISION.UP;//sprite.setY(135 - bound.height/2 - 1);
}else{skip=sprite.collision==Entry.Utils.COLLISION.DOWN;var down=ndgmr.checkPixelCollision(Entry.stage.wall.down,sprite.object,threshold,false);if(!down&&skip)sprite.collision=Entry.Utils.COLLISION.NONE;if(down&&skip)down=false;if(down){if(method=='free')sprite.setRotation(-sprite.getRotation()-sprite.getDirection()*2+180);else sprite.setDirection(-sprite.getDirection()+180);sprite.collision=Entry.Utils.COLLISION.DOWN;//sprite.setY(-135 + bound.height/2 + 1);
}}}else if(angle<270&&angle>=90){skip=sprite.collision==Entry.Utils.COLLISION.DOWN;var down=ndgmr.checkPixelCollision(Entry.stage.wall.down,sprite.object,threshold,false);if(!down&&skip)sprite.collision=Entry.Utils.COLLISION.NONE;if(down&&skip)down=false;if(down){if(method=='free')sprite.setRotation(-sprite.getRotation()-sprite.getDirection()*2+180);else sprite.setDirection(-sprite.getDirection()+180);sprite.collision=Entry.Utils.COLLISION.DOWN;//sprite.setY(-135 + bound.height/2 + 1);
}else{skip=sprite.collision==Entry.Utils.COLLISION.UP;var up=ndgmr.checkPixelCollision(Entry.stage.wall.up,sprite.object,threshold,false);if(!up&&skip)sprite.collision=Entry.Utils.COLLISION.NONE;if(up&&skip)up=false;if(up){if(method=='free')sprite.setRotation(-sprite.getRotation()-sprite.getDirection()*2+180);else sprite.setDirection(-sprite.getDirection()+180);sprite.collision=Entry.Utils.COLLISION.UP;//sprite.setY(135 - bound.height/2 - 1);
}}}if(angle<360&&angle>=180){skip=sprite.collision==Entry.Utils.COLLISION.LEFT;var left=ndgmr.checkPixelCollision(Entry.stage.wall.left,sprite.object,threshold,false);if(!left&&skip)sprite.collision=Entry.Utils.COLLISION.NONE;if(left&&skip)left=false;if(left){if(method=='free')sprite.setRotation(-sprite.getRotation()-sprite.getDirection()*2);else sprite.setDirection(-sprite.getDirection()+360);sprite.collision=Entry.Utils.COLLISION.LEFT;//sprite.setX(-240 + bound.width/2 + 1);
}else{skip=sprite.collision==Entry.Utils.COLLISION.RIGHT;var right=ndgmr.checkPixelCollision(Entry.stage.wall.right,sprite.object,threshold,false);if(!right&&skip)sprite.collision=Entry.Utils.COLLISION.NONE;if(right&&skip)right=false;if(right){if(method=='free')sprite.setRotation(-sprite.getRotation()-sprite.getDirection()*2);else sprite.setDirection(-sprite.getDirection()+360);sprite.collision=Entry.Utils.COLLISION.RIGHT;//sprite.setX(240 - bound.width/2 - 1);
}}}else if(angle<180&&angle>=0){skip=sprite.collision==Entry.Utils.COLLISION.RIGHT;var right=ndgmr.checkPixelCollision(Entry.stage.wall.right,sprite.object,threshold,false);if(!right&&skip)sprite.collision=Entry.Utils.COLLISION.NONE;if(right&&skip)right=false;if(right){if(method=='free')sprite.setRotation(-sprite.getRotation()-sprite.getDirection()*2);else sprite.setDirection(-sprite.getDirection()+360);sprite.collision=Entry.Utils.COLLISION.RIGHT;//sprite.setX(240 - bound.width/2 - 1);
}else{skip=sprite.collision==Entry.Utils.COLLISION.LEFT;var left=ndgmr.checkPixelCollision(Entry.stage.wall.left,sprite.object,threshold,false);if(!left&&skip)sprite.collision=Entry.Utils.COLLISION.NONE;if(left&&skip)left=false;if(left){if(method=='free')sprite.setRotation(-sprite.getRotation()-sprite.getDirection()*2);else sprite.setDirection(-sprite.getDirection()+360);sprite.collision=Entry.Utils.COLLISION.LEFT;//sprite.setX(-240 + bound.width/2 + 1);
}}}return script.callReturn();},syntax:{js:[],py:['Entry.bounce_on_edge()']}},flip_arrow_horizontal:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[null]},func:function func(sprite,script){sprite.setDirection(sprite.getDirection()+180);return script.callReturn();},syntax:{js:[],py:['']}},flip_arrow_vertical:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[null]},func:function func(sprite,script){sprite.setDirection(sprite.getDirection()+180);return script.callReturn();},syntax:{js:[],py:['']}},see_angle_object:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'spritesWithMouse',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_MOVING},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[null,null],type:'see_angle_object'},pyHelpDef:{params:['A&value',null],type:'see_angle_object'},paramsKeyMap:{VALUE:0},class:'rotate_absolute',isNotFor:[],func:function func(sprite,script){var targetId=script.getField('VALUE',script);var spriteX=sprite.getX();var spriteY=sprite.getY();var deltaX,deltaY,value;if(sprite.parent.id==targetId)return script.callReturn();if(targetId=='mouse'){var mX=Entry.stage.mouseCoordinate.x;var mY=Entry.stage.mouseCoordinate.y;deltaX=mX-spriteX;deltaY=mY-spriteY;}else{var targetEntity=Entry.container.getEntity(targetId);deltaX=targetEntity.getX()-spriteX;deltaY=targetEntity.getY()-spriteY;}if(deltaX===0&&deltaY===0){value=sprite.getDirection()+sprite.getRotation();}else if(deltaX>=0){value=-Math.atan(deltaY/deltaX)/Math.PI*180+90;}else{value=-Math.atan(deltaY/deltaX)/Math.PI*180+270;}var nativeDirection=sprite.getDirection()+sprite.getRotation();sprite.setRotation(sprite.getRotation()+value-nativeDirection);return script.callReturn();},syntax:{js:[],py:[{syntax:'Entry.look_at(%1)',textParams:[{type:'DropdownDynamic',value:null,menuName:'spritesWithMouse',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_MOVING,converter:Entry.block.converters.returnStringKey,codeMap:'Entry.CodeMap.Entry.see_angle_object[0]'}]}]}},see_angle_direction:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'number',params:['90']},null],type:'see_angle_direction'},paramsKeyMap:{VALUE:0},class:'rotate',isNotFor:[],func:function func(sprite,script){var value=script.getNumberValue('VALUE',script);var nativeDirection=sprite.getDirection()+sprite.getRotation();sprite.setRotation(sprite.getRotation()+value-nativeDirection);return script.callReturn();},syntax:{js:[],py:['']}},rotate_direction:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'number',params:['90']},null],type:'rotate_direction'},paramsKeyMap:{VALUE:0},class:'rotate',isNotFor:[],func:function func(sprite,script){var value=script.getNumberValue('VALUE',script);sprite.setDirection(value+sprite.getDirection());return script.callReturn();},syntax:{js:[],py:['']}},locate_object_time:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'DropdownDynamic',value:null,menuName:'spritesWithMouse',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_MOVING},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'number',params:['2']},null,null],type:'locate_object_time'},pyHelpDef:{params:[{type:'number',params:['B&value']},'A&value'],type:'locate_object_time'},paramsKeyMap:{VALUE:0,TARGET:1},class:'move_absolute',isNotFor:[],func:function func(sprite,script){if(!script.isStart){var timeValue,xValue,yValue;var targetId=script.getField('TARGET',script);timeValue=script.getNumberValue('VALUE',script);var frameCount=Math.floor(timeValue*Entry.FPS);var mouseCoordi=Entry.stage.mouseCoordinate;if(frameCount!=0){if(targetId=='mouse'){xValue=mouseCoordi.x-sprite.getX();yValue=mouseCoordi.y-sprite.getY();}else{var targetEntity=Entry.container.getEntity(targetId);xValue=targetEntity.getX()-sprite.getX();yValue=targetEntity.getY()-sprite.getY();}script.isStart=true;script.frameCount=frameCount;script.dX=xValue/script.frameCount;script.dY=yValue/script.frameCount;}else{//frame count is zero so execute immediately
if(targetId=='mouse'){xValue=Number(mouseCoordi.x);yValue=Number(mouseCoordi.y);}else{var targetEntity=Entry.container.getEntity(targetId);xValue=targetEntity.getX();yValue=targetEntity.getY();}sprite.setX(xValue);sprite.setY(yValue);if(sprite.brush&&!sprite.brush.stop){sprite.brush.lineTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();}}if(script.frameCount!=0){sprite.setX(sprite.getX()+script.dX);sprite.setY(sprite.getY()+script.dY);script.frameCount--;if(sprite.brush&&!sprite.brush.stop)sprite.brush.lineTo(sprite.getX(),sprite.getY()*-1);return script;}else{delete script.isStart;delete script.frameCount;return script.callReturn();}},syntax:{js:[],py:[{syntax:'Entry.move_to_for_sec(%2, %1)',textParams:[{type:'Block',accept:'string'},{type:'DropdownDynamic',value:null,menuName:'spritesWithMouse',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_MOVING,converter:Entry.block.converters.returnStringKey,codeMap:'Entry.CodeMap.Entry.locate_object_time[1]'}]}]}},rotate_absolute:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',defaultType:'angle',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'angle',params:['90']},null],type:'rotate_absolute'},pyHelpDef:{params:[{type:'angle',params:['A&value']},null],type:'rotate_absolute'},paramsKeyMap:{VALUE:0},class:'rotate_absolute',isNotFor:[],func:function func(entity,script){var value=script.getNumberValue('VALUE',script);entity.setRotation(value);return script.callReturn();},syntax:{js:[],py:['Entry.set_rotation(%1)']}},rotate_relative:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string',defaultType:'angle'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'angle',params:['90']},null],type:'rotate_relative'},pyHelpDef:{params:[{type:'angle',params:['A&value']}],type:'rotate_relative'},paramsKeyMap:{VALUE:0},class:'rotate',isNotFor:[],func:function func(entity,script){var value=script.getNumberValue('VALUE',script);entity.setRotation(value+entity.getRotation());return script.callReturn();},syntax:{js:[],py:['Entry.add_rotation(%1)']}},direction_absolute:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',defaultType:'angle',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'angle',params:['90']},null],type:'direction_absolute'},pyHelpDef:{params:[{type:'angle',params:['A&value']},null],type:'direction_absolute'},paramsKeyMap:{VALUE:0},class:'rotate_absolute',isNotFor:[],func:function func(entity,script){var value=script.getNumberValue('VALUE',script);entity.setDirection(value);return script.callReturn();},syntax:{js:[],py:['Entry.set_direction(%1)']}},direction_relative:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',defaultType:'angle',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'angle',params:['90']},null],type:'direction_relative'},pyHelpDef:{params:[{type:'angle',params:['A&value']},null],type:'direction_relative'},paramsKeyMap:{VALUE:0},class:'rotate',isNotFor:[],func:function func(entity,script){var value=script.getNumberValue('VALUE',script);entity.setDirection(value+entity.getDirection());return script.callReturn();},syntax:{js:[],py:['Entry.add_direction(%1)']}},move_to_angle:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',defaultType:'angle',accept:'string'},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'angle',params:['90']},{type:'number',params:['10']},null],type:'move_to_angle'},pyHelpDef:{params:[{type:'angle',params:['B&value']},{type:'number',params:['A&value']},null],type:'move_to_angle'},paramsKeyMap:{ANGLE:0,VALUE:1},class:'move_rotate',isNotFor:[],func:function func(sprite,script){var value=script.getNumberValue('VALUE',script);var angle=script.getNumberValue('ANGLE',script);sprite.setX(sprite.getX()+value*Math.cos((angle-90)/180*Math.PI));sprite.setY(sprite.getY()-value*Math.sin((angle-90)/180*Math.PI));if(sprite.brush&&!sprite.brush.stop){sprite.brush.lineTo(sprite.getX(),sprite.getY()*-1);}return script.callReturn();},syntax:{js:[],py:['Entry.move_to_degree(%2, %1)']}},rotate_by_time:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Block',defaultType:'angle',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'number',params:['2']},{type:'angle',params:['90']},null],type:'rotate_by_time'},pyHelpDef:{params:[{type:'number',params:['B&value']},{type:'angle',params:['A&value']},null],type:'rotate_by_time'},paramsKeyMap:{VALUE:0,ANGLE:1},class:'rotate',isNotFor:[],func:function func(sprite,script){if(!script.isStart){var timeValue;timeValue=script.getNumberValue('VALUE',script);var angleValue=script.getNumberValue('ANGLE',script);script.isStart=true;script.frameCount=Math.max(Math.floor(timeValue*Entry.FPS),1);script.dAngle=angleValue/script.frameCount;if(script.frameCount==1)action();}if(script.frameCount!=0){action();return script;}else{delete script.isStart;delete script.frameCount;return script.callReturn();}function action(){sprite.setRotation(sprite.getRotation()+script.dAngle);script.frameCount--;}},syntax:{js:[],py:['Entry.add_rotation_for_sec(%2, %1)']}},direction_relative_duration:{color:'#A751E3',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Block',defaultType:'angle',accept:'string'},{type:'Indicator',img:'block_icon/moving_03.png',size:12}],events:{},def:{params:[{type:'text',params:['2']},{type:'angle',params:['90']},null],type:'direction_relative_duration'},pyHelpDef:{params:[{type:'text',params:['B&value']},{type:'angle',params:['A&value']},null],type:'direction_relative_duration'},paramsKeyMap:{DURATION:0,AMOUNT:1},class:'rotate',isNotFor:[],func:function func(sprite,script){if(!script.isStart){var timeValue;timeValue=script.getNumberValue('DURATION',script);var directionValue=script.getNumberValue('AMOUNT',script);script.isStart=true;script.frameCount=Math.max(Math.floor(timeValue*Entry.FPS),1);script.dDirection=directionValue/script.frameCount;if(script.frameCount==1)action();}if(script.frameCount!=0){action();return script;}else{delete script.isStart;delete script.frameCount;delete script.dDirection;return script.callReturn();}function action(){sprite.setDirection(sprite.getDirection()+script.dDirection);script.frameCount--;}},syntax:{js:[],py:['Entry.add_direction_for_sec(%2, %1)']}},//endregion basic 기본
//region basic 기본
when_scene_start:{color:'#3BBD70',skeleton:'basic_event',statements:[],params:[{type:'Indicator',img:'block_icon/start_icon_scene_1_2.png',size:17,position:{x:0,y:-2}}],events:{},def:{params:[null],type:'when_scene_start'},class:'scene',isNotFor:['scene'],func:function func(sprite,script){return script.callReturn();},event:'when_scene_start',syntax:{js:[],py:[{syntax:'def when_start_scene():',blockType:'event'}]}},start_scene:{color:'#3BBD70',skeleton:'basic_without_next',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'scenes',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_START},{type:'Indicator',img:'block_icon/start_03.png',size:12}],events:{},def:{params:[null,null],type:'start_scene'},pyHelpDef:{params:['A&value',null],type:'start_scene'},paramsKeyMap:{VALUE:0},class:'scene',isNotFor:['scene'],func:function func(sprite,script){var value=script.getField('VALUE',script);var scene=Entry.scene.getSceneById(value);if(scene){Entry.scene.selectScene(scene);Entry.engine.fireEvent('when_scene_start');}return null;},syntax:{js:[],py:[{syntax:'Entry.start_scene(%1)',blockType:'last',textParams:[{type:'DropdownDynamic',value:null,menuName:'scenes',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_START,converter:Entry.block.converters.returnStringKey}]}]}},start_neighbor_scene:{color:'#3BBD70',skeleton:'basic_without_next',statements:[],params:[{type:'Dropdown',options:[[Lang.Blocks.SCENE_start_scene_next,'next'],[Lang.Blocks.SCENE_start_scene_pre,'pre']],value:'next',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_START},{type:'Indicator',img:'block_icon/start_03.png',size:12}],events:{},def:{params:[null,null],type:'start_neighbor_scene'},pyHelpDef:{params:['A&value',null],type:'start_neighbor_scene'},paramsKeyMap:{OPERATOR:0},class:'scene',isNotFor:['scene'],func:function func(sprite,script){var currentScene=Entry.scene.selectedScene;var scenes=Entry.scene.getScenes();var index=scenes.indexOf(currentScene);var o=script.getField('OPERATOR',script);if(o=='next'){if(index+1<scenes.length){var nextScene=Entry.scene.getSceneById(scenes[index+1].id);if(nextScene){Entry.scene.selectScene(nextScene);Entry.engine.fireEvent('when_scene_start');}}}else{if(index>0){var nextScene=Entry.scene.getSceneById(scenes[index-1].id);if(nextScene){Entry.scene.selectScene(nextScene);Entry.engine.fireEvent('when_scene_start');}}}return null;},syntax:{js:[],py:[{syntax:'Entry.start_scene_of(%1)',blockType:'last',textParams:[{type:'Dropdown',options:[[Lang.Blocks.SCENE_start_scene_next,'next'],[Lang.Blocks.SCENE_start_scene_pre,'pre']],value:'next',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_START,converter:Entry.block.converters.returnStringValue,codeMap:'Entry.CodeMap.Entry.start_neighbor_scene[0]'}]}]}},sound_something:{color:'#A4D01D',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'sounds',fontSize:11},{type:'Indicator',img:'block_icon/sound_03.png',size:12}],events:{},def:{params:[null,null],type:'sound_something'},paramsKeyMap:{VALUE:0},class:'sound',isNotFor:[],func:function func(sprite,script){var soundId=script.getField('VALUE',script);var sounds=sprite.parent.sounds;var isExist=Entry.isExist(soundId,'id',sounds);if(isExist)createjs.Sound.play(soundId);return script.callReturn();},syntax:{js:[],py:['']}},sound_something_second:{color:'#A4D01D',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'sounds',fontSize:11},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/sound_03.png',size:12}],events:{},def:{params:[null,{type:'number',params:['1']},null],type:'sound_something_second'},paramsKeyMap:{VALUE:0,SECOND:1},class:'sound',isNotFor:[],func:function func(sprite,script){var soundId=script.getField('VALUE',script);var timeValue=script.getNumberValue('SECOND',script);var sounds=sprite.parent.sounds;var isExist=Entry.isExist(soundId,'id',sounds);if(isExist){var instance=createjs.Sound.play(soundId);Entry.Utils.addSoundInstances(instance);setTimeout(function(){instance.stop();},timeValue*1000);}return script.callReturn();},syntax:{js:[],py:['']}},sound_something_wait:{color:'#A4D01D',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'sounds',fontSize:11},{type:'Indicator',img:'block_icon/sound_03.png',size:12}],events:{},def:{params:[null,null],type:'sound_something_wait'},paramsKeyMap:{VALUE:0},class:'sound',isNotFor:[],func:function func(sprite,script){if(!script.isPlay){script.isPlay=true;script.playState=1;var soundId=script.getField('VALUE',script);var sound=sprite.parent.getSound(soundId);var sounds=sprite.parent.sounds;var isExist=Entry.isExist(soundId,'id',sounds);if(isExist){var instance=createjs.Sound.play(soundId);Entry.Utils.addSoundInstances(instance);setTimeout(function(){script.playState=0;},sound.duration*1000);}return script;}else if(script.playState==1){return script;}else{delete script.playState;delete script.isPlay;return script.callReturn();}},syntax:{js:[],py:['']}},sound_something_second_wait:{color:'#A4D01D',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'sounds',fontSize:11},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/sound_03.png',size:12}],events:{},def:{params:[null,{type:'number',params:['1']},null],type:'sound_something_second_wait'},paramsKeyMap:{VALUE:0,SECOND:1},class:'sound',isNotFor:[],func:function func(sprite,script){if(!script.isPlay){script.isPlay=true;script.playState=1;var soundId=script.getField('VALUE',script);var sounds=sprite.parent.sounds;var isExist=Entry.isExist(soundId,'id',sounds);if(isExist){var instance=createjs.Sound.play(soundId);var timeValue=script.getNumberValue('SECOND',script);Entry.Utils.addSoundInstances(instance);setTimeout(function(){instance.stop();script.playState=0;},timeValue*1000);instance.addEventListener('complete',function(e){});}return script;}else if(script.playState==1){return script;}else{delete script.isPlay;delete script.playState;return script.callReturn();}},syntax:{js:[],py:['']}},sound_volume_change:{color:'#A4D01D',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/sound_03.png',size:12}],events:{},def:{params:[{type:'number',params:['10']},null],type:'sound_volume_change'},pyHelpDef:{params:[{type:'number',params:['A&value']},null],type:'sound_volume_change'},paramsKeyMap:{VALUE:0},class:'sound_volume',isNotFor:[],func:function func(sprite,script){var value=script.getNumberValue('VALUE',script)/100;value=value+createjs.Sound.getVolume();if(value>1)value=1;if(value<0)value=0;createjs.Sound.setVolume(value);return script.callReturn();},syntax:{js:[],py:['Entry.add_sound_volume(%1)']}},sound_volume_set:{color:'#A4D01D',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/sound_03.png',size:12}],events:{},def:{params:[{type:'number',params:['10']},null],type:'sound_volume_set'},pyHelpDef:{params:[{type:'number',params:['A&value']},null],type:'sound_volume_set'},paramsKeyMap:{VALUE:0},class:'sound_volume',isNotFor:[],func:function func(sprite,script){var value=script.getNumberValue('VALUE',script)/100;if(value>1)value=1;if(value<0)value=0;createjs.Sound.setVolume(value);return script.callReturn();},syntax:{js:[],py:['Entry.set_sound_volume(%1)']}},sound_silent_all:{color:'#A4D01D',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/sound_03.png',size:12}],events:{},def:{params:[null],type:'sound_silent_all'},class:'sound_stop',isNotFor:[],func:function func(sprite,script){createjs.Sound.stop();return script.callReturn();},syntax:{js:[],py:['Entry.stop_sound()']}},get_sounds:{color:'#A4D01D',skeleton:'basic_string_field',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'sounds',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_SOUNDS}],events:{},def:{params:[null],type:'get_sounds'},paramsKeyMap:{VALUE:0},func:function func(sprite,script){return script.getStringField('VALUE');},syntax:{js:[],py:[{syntax:'%1',textParams:[{type:'DropdownDynamic',value:null,menuName:'sounds',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_SOUNDS,converter:Entry.block.converters.returnStringKey}],keyOption:'get_sounds'}]}},sound_something_with_block:{color:'#A4D01D',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/sound_03.png',size:12}],events:{},def:{params:[{type:'get_sounds'},null],type:'sound_something_with_block'},pyHelpDef:{params:[{type:'get_sounds',params:['A&value']},null],type:'sound_something_with_block'},paramsKeyMap:{VALUE:0},class:'sound_play',isNotFor:[],func:function func(sprite,script){var soundId=script.getStringValue('VALUE',script);var sound=sprite.parent.getSound(soundId);if(sound){Entry.Utils.addSoundInstances(createjs.Sound.play(sound.id));}return script.callReturn();},syntax:{js:[],py:[{passTest:true,syntax:'Entry.play_sound(%1)'}]}},sound_something_second_with_block:{color:'#A4D01D',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/sound_03.png',size:12}],events:{},def:{params:[{type:'get_sounds',id:'95dw'},{type:'number',params:['1']},null],type:'sound_something_second_with_block'},pyHelpDef:{params:[{type:'get_sounds',params:['A&value']},{type:'number',params:['B&value']},null],type:'sound_something_second_with_block'},paramsKeyMap:{VALUE:0,SECOND:1},class:'sound_play',isNotFor:[],func:function func(sprite,script){var soundId=script.getStringValue('VALUE',script);var timeValue=script.getNumberValue('SECOND',script);var sound=sprite.parent.getSound(soundId);if(sound){Entry.Utils.addSoundInstances(createjs.Sound.play(sound.id,{startTime:0,duration:timeValue*1000}));}return script.callReturn();},syntax:{js:[],py:[{passTest:true,syntax:'Entry.play_sound_for_sec(%1, %2)'}]}},sound_something_wait_with_block:{color:'#A4D01D',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/sound_03.png',size:12}],events:{},def:{params:[{type:'get_sounds'},null],type:'sound_something_wait_with_block'},pyHelpDef:{params:[{type:'get_sounds',params:['A&value']},null],type:'sound_something_wait_with_block'},paramsKeyMap:{VALUE:0},class:'sound_wait',isNotFor:[],func:function func(sprite,script){if(!script.isPlay){script.isPlay=true;script.playState=1;var soundId=script.getStringValue('VALUE',script);var sound=sprite.parent.getSound(soundId);if(sound){var instance=createjs.Sound.play(sound.id);Entry.Utils.addSoundInstances(instance);setTimeout(function(){script.playState=0;},sound.duration*1000);}return script;}else if(script.playState==1){return script;}else{delete script.playState;delete script.isPlay;return script.callReturn();}},syntax:{js:[],py:[{passTest:true,syntax:'Entry.play_sound_and_wait(%1)'}]}},sound_something_second_wait_with_block:{color:'#A4D01D',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/sound_03.png',size:12}],events:{},def:{params:[{type:'get_sounds'},{type:'number',params:['1']},null],type:'sound_something_second_wait_with_block'},pyHelpDef:{params:[{type:'get_sounds',params:['A&value']},{type:'number',params:['B&value']},null],type:'sound_something_second_wait_with_block'},paramsKeyMap:{VALUE:0,SECOND:1},class:'sound_wait',isNotFor:[],func:function func(sprite,script){if(!script.isPlay){script.isPlay=true;script.playState=1;var soundId=script.getStringValue('VALUE',script);var sound=sprite.parent.getSound(soundId);if(sound){var instance=createjs.Sound.play(sound.id);var timeValue=script.getNumberValue('SECOND',script);setTimeout(function(){instance.stop();script.playState=0;},timeValue*1000);instance.addEventListener('complete',function(e){});}return script;}else if(script.playState==1){return script;}else{delete script.isPlay;delete script.playState;return script.callReturn();}},syntax:{js:[],py:[{passTest:true,syntax:'Entry.play_sound_for_sec_and_wait(%1, %2)'}]}},sound_from_to:{color:'#A4D01D',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Block',accept:'string'},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/sound_03.png',size:12}],events:{},def:{params:[{type:'get_sounds'},{type:'text',params:['1']},{type:'text',params:['10']},null],type:'sound_from_to'},pyHelpDef:{params:[{type:'get_sounds',params:['A&value']},{type:'text',params:['B&value']},{type:'text',params:['C&value']},null],type:'sound_from_to'},paramsKeyMap:{VALUE:0,START:1,END:2},class:'sound_play',isNotFor:[],func:function func(sprite,script){var soundId=script.getStringValue('VALUE',script);var sound=sprite.parent.getSound(soundId);if(sound){var start=script.getNumberValue('START',script)*1000;var end=script.getNumberValue('END',script)*1000;createjs.Sound.play(sound.id,{startTime:Math.min(start,end),duration:Math.max(start,end)-Math.min(start,end)});}return script.callReturn();},syntax:{js:[],py:[{passTest:true,syntax:'Entry.play_sound_from_to(%1, %2, %3)'}]}},sound_from_to_and_wait:{color:'#A4D01D',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Block',accept:'string'},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/sound_03.png',size:12}],events:{},def:{params:[{type:'get_sounds'},{type:'text',params:['1']},{type:'text',params:['10']},null],type:'sound_from_to_and_wait'},pyHelpDef:{params:[{type:'get_sounds',params:['A&value']},{type:'text',params:['B&value']},{type:'text',params:['C&value']},null],type:'sound_from_to_and_wait'},paramsKeyMap:{VALUE:0,START:1,END:2},class:'sound_wait',isNotFor:[],func:function func(sprite,script){if(!script.isPlay){script.isPlay=true;script.playState=1;var soundId=script.getStringValue('VALUE',script);var sound=sprite.parent.getSound(soundId);if(sound){var start=script.getNumberValue('START',script)*1000;var end=script.getNumberValue('END',script)*1000;var startValue=Math.min(start,end);var endValue=Math.max(start,end);var duration=endValue-startValue;createjs.Sound.play(sound.id,{startTime:startValue,duration:duration});setTimeout(function(){script.playState=0;},duration);}return script;}else if(script.playState==1){return script;}else{delete script.isPlay;delete script.playState;return script.callReturn();}},syntax:{js:[],py:['Entry.play_sound_from_to_and_wait(%1, %2, %3)']}},when_run_button_click:{color:'#3BBD70',skeleton:'basic_event',statements:[],params:[{type:'Indicator',img:'block_icon/start_icon_play.png',size:17,position:{x:0,y:-2}}],events:{},def:{params:[null],type:'when_run_button_click'},class:'event',isNotFor:[],func:function func(sprite,script){return script.callReturn();},event:'start',syntax:{js:[],py:[{syntax:'def when_start():',blockType:'event'}]}},press_some_key:{color:'#3BBD70',skeleton:'basic_event',statements:[],params:[{type:'Indicator',img:'block_icon/start_icon_keyboard.png',size:17,position:{x:0,y:-2}},{type:'Dropdown',options:[['q','81'],['w','87'],['e','69'],['r','82'],['a','65'],['s','83'],['d','68'],['위쪽 화살표','38'],['아래쪽 화살표','40'],['왼쪽 화살표','37'],['오른쪽 화살표','39'],['엔터','13'],['스페이스','32']],value:'81',fontSize:11},{type:'Indicator',img:'block_icon/start_03.png',size:12}],events:{},def:{params:[null,null,null]},paramsKeyMap:{VALUE:1},func:function func(sprite,script){return script.callReturn();},syntax:{js:[],py:['']}},when_some_key_pressed:{color:'#3BBD70',skeleton:'basic_event',statements:[],params:[{type:'Indicator',img:'block_icon/start_icon_keyboard.png',size:17,position:{x:0,y:-2}},{type:'Keyboard',value:'81'}],events:{},def:{params:[null,'81'],type:'when_some_key_pressed'},pyHelpDef:{params:[null,'A&value'],type:'when_some_key_pressed'},paramsKeyMap:{VALUE:1},class:'event',isNotFor:[],func:function func(sprite,script){return script.callReturn();},event:'keyPress',syntax:{js:[],py:[{syntax:'def when_press_key(%2):',passTest:true,blockType:'event',textParams:[undefined,{type:'Keyboard',value:'81',converter:Entry.block.converters.keyboardCode1}]}]}},mouse_clicked:{color:'#3BBD70',skeleton:'basic_event',statements:[],params:[{type:'Indicator',img:'block_icon/start_icon_mouse.png',size:17,position:{x:0,y:-2}}],events:{},def:{params:[null],type:'mouse_clicked'},class:'event',isNotFor:[],func:function func(sprite,script){return script.callReturn();},event:'mouse_clicked',syntax:{js:[],py:[{syntax:'def when_click_mouse_on():',blockType:'event'}]}},mouse_click_cancled:{color:'#3BBD70',skeleton:'basic_event',statements:[],params:[{type:'Indicator',img:'block_icon/start_icon_mouse.png',size:17,position:{x:0,y:-2}}],events:{},def:{params:[null],type:'mouse_click_cancled'},class:'event',isNotFor:[],func:function func(sprite,script){return script.callReturn();},event:'mouse_click_cancled',syntax:{js:[],py:[{syntax:'def when_click_mouse_off():',blockType:'event'}]}},when_object_click:{color:'#3BBD70',skeleton:'basic_event',statements:[],params:[{type:'Indicator',img:'block_icon/start_icon_mouse.png',size:17,position:{x:0,y:-2}}],events:{},def:{params:[null],type:'when_object_click'},class:'event',isNotFor:[],func:function func(sprite,script){return script.callReturn();},event:'when_object_click',syntax:{js:[],py:[{syntax:'def when_click_object_on():',blockType:'event'}]}},when_object_click_canceled:{color:'#3BBD70',skeleton:'basic_event',statements:[],params:[{type:'Indicator',img:'block_icon/start_icon_mouse.png',size:17,position:{x:0,y:-2}}],events:{},def:{params:[null],type:'when_object_click_canceled'},class:'event',isNotFor:[],func:function func(sprite,script){return script.callReturn();},event:'when_object_click_canceled',syntax:{js:[],py:[{syntax:'def when_click_object_off():',blockType:'event'}]}},when_some_key_click:{color:'#3BBD70',skeleton:'basic_event',statements:[],params:[{type:'Indicator',img:'block_icon/start_icon_keyboard.png',size:17,position:{x:0,y:-2}}],events:{},def:{params:[null]},func:function func(sprite,script){return script.callReturn();},event:'keyPress',syntax:{js:[],py:['Entry.on_key_press_down(%1)']}},when_message_cast:{color:'#3BBD70',skeleton:'basic_event',statements:[],params:[{type:'Indicator',img:'block_icon/start_icon_signal.png',size:17,position:{x:0,y:-2}},{type:'DropdownDynamic',value:null,menuName:'messages',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_START}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_messageRefs',block);}],viewDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_messageRefs',block);}]},def:{params:[null,null],type:'when_message_cast'},pyHelpDef:{params:[null,'A&value'],type:'when_message_cast'},paramsKeyMap:{VALUE:1},class:'message',isNotFor:['message'],func:function func(sprite,script){return script.callReturn();},event:'when_message_cast',//"syntax": {"js": [], "py": ["def entry_event_signal():\n\tif signal == %2:"]}
syntax:{js:[],py:[{syntax:'def when_get_signal(%2):',blockType:'event',passTest:true,textParams:[undefined,{type:'DropdownDynamic',value:null,menuName:'messages',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_START,converter:Entry.block.converters.returnStringKey}]}]}},message_cast:{color:'#3BBD70',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'messages',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_START},{type:'Indicator',img:'block_icon/start_03.png',size:12}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_messageRefs',block);}],viewDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_messageRefs',block);}]},def:{params:[null,null],type:'message_cast'},pyHelpDef:{params:['A&value',null],type:'message_cast'},paramsKeyMap:{VALUE:0},class:'message',isNotFor:['message'],func:function func(sprite,script){var value=script.getField('VALUE',script);var arr=Entry.variableContainer.messages_;var isExist=Entry.isExist(value,'id',arr);if(value=='null'||!isExist)throw new Error('value can not be null or undefined');setTimeout(function(){Entry.engine.raiseMessage(value);});},syntax:{js:[],py:[{syntax:'Entry.send_signal(%1)',textParams:[{type:'DropdownDynamic',value:null,menuName:'messages',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_START,converter:Entry.block.converters.returnStringKey,paramType:'signal'},undefined]}]}},message_cast_wait:{color:'#3BBD70',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'messages',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_START},{type:'Indicator',img:'block_icon/start_03.png',size:12}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_messageRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_messageRefs',block);}]},def:{params:[null,null],type:'message_cast_wait'},pyHelpDef:{params:['A&value',null],type:'message_cast_wait'},paramsKeyMap:{VALUE:0},class:'message',isNotFor:['message'],func:function func(sprite,script){if(script.runningScript){var runningScript=script.runningScript;var length=runningScript.length;for(var i=0;i<length;i++){var executor=runningScript.shift();if(executor&&!executor.isEnd())runningScript.push(executor);}if(runningScript.length){return script;}else{return script.callReturn();}}else{var value=script.getField('VALUE',script);var arr=Entry.variableContainer.messages_;var isExist=Entry.isExist(value,'id',arr);if(value=='null'||!isExist)throw new Error('value can not be null or undefined');var data=Entry.engine.raiseMessage(value);var runningScript=[];while(data.length){var executor=data.shift();if(executor)runningScript=runningScript.concat(executor);}script.runningScript=runningScript;return script;}},syntax:{js:[],py:[{syntax:'Entry.send_signal_wait(%1)',textParams:[{type:'DropdownDynamic',value:null,menuName:'messages',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_START,converter:Entry.block.converters.returnStringKey}]}]}},text:{color:'#FFD974',skeleton:'basic_string_field',statements:[],params:[{type:'TextInput',value:10}],events:{},def:{params:[],type:'text'},paramsKeyMap:{NAME:0},func:function func(sprite,script){return script.getField('NAME',script);},isPrimitive:true,syntax:{js:['Scope','%1'],py:[{syntax:'%1',keyOption:'text',textParams:[{type:'TextInput',converter:Entry.block.converters.returnStringOrNumberByValue}]}]}},text_write:{color:'#FFCA36',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/text.png',size:12}],events:{},def:{params:[{type:'text',params:[Lang.Blocks.entry]},null],type:'text_write'},pyHelpDef:{params:[{type:'text',params:['A&value']},null],type:'text_write'},paramsKeyMap:{VALUE:0},class:'text',isNotFor:['sprite'],func:function func(sprite,script){var text=script.getStringValue('VALUE',script);sprite.setText(text);return script.callReturn();},syntax:{js:[],py:['Entry.write_text(%1)']}},text_append:{color:'#FFCA36',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/text.png',size:12}],events:{},def:{params:[{type:'text',params:[Lang.Blocks.entry]},null],type:'text_append'},pyHelpDef:{params:[{type:'text',params:['A&value']},null],type:'text_append'},paramsKeyMap:{VALUE:0},class:'text',isNotFor:['sprite'],func:function func(sprite,script){var text=script.getStringValue('VALUE',script);sprite.setText(sprite.getText()+''+text);return script.callReturn();},syntax:{js:[],py:['Entry.append_text(%1)']}},text_prepend:{color:'#FFCA36',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/text.png',size:12}],events:{},def:{params:[{type:'text',params:[Lang.Blocks.entry]},null],type:'text_prepend'},pyHelpDef:{params:[{type:'text',params:['A&value']},null],type:'text_prepend'},paramsKeyMap:{VALUE:0},class:'text',isNotFor:['sprite'],func:function func(sprite,script){var text=script.getStringValue('VALUE',script);sprite.setText(text+''+sprite.getText());return script.callReturn();},syntax:{js:[],py:['Entry.prepend_text(%1)']}},text_flush:{color:'#FFCA36',skeleton:'basic',statements:[],params:[{type:'Indicator',img:'block_icon/text.png',size:12}],events:{},def:{params:[null],type:'text_flush'},class:'text',isNotFor:['sprite'],func:function func(sprite,script){sprite.setText('');return script.callReturn();},syntax:{js:[],py:['Entry.clear_text()']}},variableAddButton:{skeleton:'basic_button',color:'#eee',params:[{type:'Text',text:Lang.Workspace.variable_create,color:'#333',align:'center'}],def:{type:'variableAddButton'},events:{mousedown:[function(){Entry.variableContainer.openVariableAddPanel('variable');}]},syntax:{js:[],py:['']}},listAddButton:{skeleton:'basic_button',color:'#eee',params:[{type:'Text',text:Lang.Workspace.create_list_block,color:'#333',align:'center'}],def:{type:'listAddButton'},events:{mousedown:[function(){Entry.variableContainer.openVariableAddPanel('list');}]}},change_variable:{color:'#E457DC',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'variables',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/variable_03.png',size:12}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_variableRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_variableRefs',block);}]},def:{params:[null,{type:'text',params:['10']},null],type:'change_variable'},pyHelpDef:{params:['A&value',{type:'text',params:['B&value']},null],type:'change_variable'},paramsKeyMap:{VARIABLE:0,VALUE:1},class:'variable',isNotFor:['variableNotExist'],func:function func(sprite,script){var variableId=script.getField('VARIABLE',script);var value=script.getValue('VALUE',script);var fixed=0;if(value==false&&typeof value=='boolean')throw new Error('Type is not correct');var variable=Entry.variableContainer.getVariable(variableId,sprite);var variableValue=variable.getValue();var sumValue;if(Entry.Utils.isNumber(value)&&variable.isNumber()){value=Entry.parseNumber(value);variableValue=Entry.parseNumber(variableValue);fixed=Entry.getMaxFloatPoint([value,variable.getValue()]);sumValue=new BigNumber(value).plus(variableValue).toNumber().toFixed(fixed);}else{sumValue=''+variableValue+value;}variable.setValue(sumValue);return script.callReturn();},syntax:{js:[],py:[{syntax:'%1 += %2',passTest:true,textParams:[{type:'DropdownDynamic',value:null,menuName:'variables',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnRawStringKey},{type:'Block',accept:'string'}]},{syntax:'%1 = %1 + %2',textParams:[{type:'DropdownDynamic',value:null,menuName:'variables',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnRawStringKey},{type:'Block',accept:'string'}]}]}},set_variable:{color:'#E457DC',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'variables',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/variable_03.png',size:12}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_variableRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_variableRefs',block);}]},def:{params:[null,{type:'text',params:['10']},null],type:'set_variable'},pyHelpDef:{params:['A&value',{type:'text',params:['B&value']},null],type:'set_variable'},paramsKeyMap:{VARIABLE:0,VALUE:1},class:'variable',isNotFor:['variableNotExist'],func:function func(sprite,script){var variableId=script.getField('VARIABLE',script);var value=script.getValue('VALUE',script);var variable=Entry.variableContainer.getVariable(variableId,sprite);variable.setValue(value);return script.callReturn();},syntax:{js:[],py:[{syntax:'%1 = %2',passTest:true,blockType:'variable',textParams:[{type:'DropdownDynamic',value:null,menuName:'variables',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnRawStringKey},{type:'Block',accept:'string'}]}]}},show_variable:{color:'#E457DC',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'variables',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE},{type:'Indicator',img:'block_icon/variable_03.png',size:12}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_variableRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_variableRefs',block);}]},def:{params:[null,null],type:'show_variable'},pyHelpDef:{params:['A&value',null],type:'show_variable'},paramsKeyMap:{VARIABLE:0},class:'variable_visibility',isNotFor:['variableNotExist'],func:function func(sprite,script){var variableId=script.getField('VARIABLE',script);var variable=Entry.variableContainer.getVariable(variableId,sprite);variable.setVisible(true);variable.updateView();return script.callReturn();},syntax:{js:[],py:[{syntax:'Entry.show_variable(%1)',textParams:[{type:'DropdownDynamic',value:null,menuName:'variables',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnStringKey}]}]}},hide_variable:{color:'#E457DC',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'variables',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE},{type:'Indicator',img:'block_icon/variable_03.png',size:12}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_variableRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_variableRefs',block);}]},def:{params:[null,null],type:'hide_variable'},pyHelpDef:{params:['A&value',null],type:'hide_variable'},paramsKeyMap:{VARIABLE:0},class:'variable_visibility',isNotFor:['variableNotExist'],func:function func(sprite,script){var variableId=script.getField('VARIABLE',script);var variable=Entry.variableContainer.getVariable(variableId,sprite);variable.setVisible(false);return script.callReturn();},syntax:{js:[],py:[{syntax:'Entry.hide_variable(%1)',textParams:[{type:'DropdownDynamic',value:null,menuName:'variables',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnStringKey}]}]}},get_variable:{color:'#E457DC',skeleton:'basic_string_field',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'variables',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE},{type:'Text',text:Lang.Blocks.VARIABLE_get_variable_1,color:'white'}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_variableRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_variableRefs',block);}]},def:{params:[null],type:'get_variable'},pyHelpDef:{params:['A&value'],type:'get_variable'},paramsKeyMap:{VARIABLE:0},class:'variable',isNotFor:['variableNotExist'],func:function func(sprite,script){var variableId=script.getField('VARIABLE',script);var variable=Entry.variableContainer.getVariable(variableId,sprite);return variable.getValue();},syntax:{js:[],py:[{syntax:'%1',passTest:true,keyOption:'get_variable',blockType:'param',textParams:[{type:'DropdownDynamic',value:null,menuName:'variables',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnRawStringKey}]}]}},ask_and_wait:{color:'#E457DC',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/variable_03.png',size:12}],events:{viewAdd:[function(){if(Entry.container)Entry.container.showProjectAnswer();}],viewDestroy:[function(block,notIncludeSelf){if(Entry.container)Entry.container.hideProjectAnswer(block,notIncludeSelf);}]},def:{params:[{type:'text',params:[Lang.Blocks.block_hi]},null],type:'ask_and_wait'},pyHelpDef:{params:[{type:'text',params:['A&value']},null],type:'ask_and_wait'},paramsKeyMap:{VALUE:0},class:'ask',isNotFor:[],func:function func(sprite,script){var inputModel=Entry.container.inputValue,inputView=Entry.stage.inputField,/*message = script.getValue("VALUE", script);

            if (!message)
                throw new Error('message can not be empty');

            if (inputModel.sprite == sprite &&
                inputView && !inputView._isHidden) {
                    return script;
                } else if (inputModel.sprite != sprite && script.isInit) {
                    if(sprite.dialog)
                        sprite.dialog.remove();
                    delete script.isInit;
                    return script.callReturn();
                } else if (inputModel.complete &&
                           inputModel.sprite == sprite &&
                           inputView._isHidden && script.isInit) {
                               if(sprite.dialog)
                                   sprite.dialog.remove();
                               delete inputModel.complete;
                               delete script.isInit;
                               return script.callReturn();
                           } else {
                               message = Entry.convertToRoundedDecimals(message, 3);
                               new Entry.Dialog(sprite, message, 'speak');
                               Entry.stage.showInputField();
                               inputModel.script = script;
                               inputModel.sprite = sprite;
                               script.isInit = true;
                               return script;
                           }*/message=script.getValue('VALUE',script);if(!message)throw new Error('message can not be empty');if(inputModel.sprite==sprite&&inputView&&!inputView._isHidden){return script;}else if(inputModel.sprite!=sprite&&script.isInit){if(sprite.dialog)sprite.dialog.remove();delete script.isInit;return script.callReturn();}else if(inputModel.complete&&inputModel.sprite==sprite&&inputView._isHidden&&script.isInit){if(sprite.dialog)sprite.dialog.remove();delete inputModel.complete;delete script.isInit;return script.callReturn();}else{message=Entry.convertToRoundedDecimals(message,3);Entry.stage.showInputField();new Entry.Dialog(sprite,message,'ask');inputModel.script=script;inputModel.sprite=sprite;inputModel.complete=false;script.isInit=true;return script;}},syntax:{js:[],py:['Entry.input(%1)']}},get_canvas_input_value:{color:'#E457DC',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.VARIABLE_get_canvas_input_value,color:'#fff'}],events:{viewAdd:[function(){if(Entry.container)Entry.container.showProjectAnswer();}],viewDestroy:[function(block,notIncludeSelf){if(Entry.container)Entry.container.hideProjectAnswer(block,notIncludeSelf);}]},def:{params:[null],type:'get_canvas_input_value'},class:'ask',isNotFor:[],func:function func(sprite,script){return Entry.container.getInputValue();},syntax:{js:[],py:[{template:'%1',syntax:'Entry.answer()',blockType:'param',textParams:[{type:'Text',text:'Entry.answer()',color:'#fff'}]}]}},add_value_to_list:{color:'#E457DC',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE},{type:'Indicator',img:'block_icon/variable_03.png',size:12}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_variableRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_variableRefs',block);}]},def:{params:[{type:'text',params:['10']},null,null],type:'add_value_to_list'},pyHelpDef:{params:[{type:'text',params:['B&value']},'A&value',null],type:'add_value_to_list'},paramsKeyMap:{VALUE:0,LIST:1},class:'list',isNotFor:['listNotExist'],func:function func(sprite,script){var listId=script.getField('LIST',script);var value=script.getValue('VALUE',script);var list=Entry.variableContainer.getList(listId,sprite);if(!list.array_)list.array_=[];list.array_.push({data:value});list.updateView();return script.callReturn();},syntax:{js:[],py:[{passTest:true,syntax:'%2.append(%1)',textParams:[{type:'Block',accept:'string'},{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnRawStringKey}]}]}},remove_value_from_list:{color:'#E457DC',skeleton:'basic',statements:[],params:[{type:'Block',isListIndex:true,accept:'string'},{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE},{type:'Indicator',img:'block_icon/variable_03.png',size:12}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_variableRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_variableRefs',block);}]},def:{params:[{type:'number',params:['1']},null,null],type:'remove_value_from_list'},pyHelpDef:{params:[{type:'number',params:['B&value']},'A&value',null],type:'remove_value_from_list'},paramsKeyMap:{VALUE:0,LIST:1},class:'list',isNotFor:['listNotExist'],func:function func(sprite,script){var listId=script.getField('LIST',script);var value=script.getValue('VALUE',script);var list=Entry.variableContainer.getList(listId,sprite);if(!list.array_||!Entry.Utils.isNumber(value)||value>list.array_.length)throw new Error('can not remove value from array');list.array_.splice(value-1,1);list.updateView();return script.callReturn();},syntax:{js:[],py:[{syntax:'%2.pop(%1)',passTest:true,textParams:[{type:'Block',accept:'string',paramType:'index'},{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnRawStringKey}]}]}},insert_value_to_list:{color:'#E457DC',skeleton:'basic',statements:[],params:[{type:'Block',accept:'string'},{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE},{type:'Block',isListIndex:true,accept:'string'},{type:'Indicator',img:'block_icon/variable_03.png',size:12}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_variableRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_variableRefs',block);}]},def:{params:[{type:'text',params:['10']},null,{type:'text',params:['1']},null],type:'insert_value_to_list'},pyHelpDef:{params:[{type:'text',params:['C&value']},'A&value',{type:'text',params:['B&value']},null],type:'insert_value_to_list'},paramsKeyMap:{DATA:0,LIST:1,INDEX:2},class:'list',isNotFor:['listNotExist'],func:function func(sprite,script){var listId=script.getField('LIST',script);var data=script.getValue('DATA',script);var index=script.getValue('INDEX',script);var list=Entry.variableContainer.getList(listId,sprite);if(!list.array_||!Entry.Utils.isNumber(index)||index==0||index>list.array_.length+1)throw new Error('can not insert value to array');list.array_.splice(index-1,0,{data:data});list.updateView();return script.callReturn();},syntax:{js:[],py:[{syntax:'%2.insert(%3, %1)',passTest:true,textParams:[{type:'Block',accept:'string'},{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnRawStringKey},{type:'Block',accept:'string',paramType:'index'}]}]}},change_value_list_index:{color:'#E457DC',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE},{type:'Block',isListIndex:true,accept:'string'},{type:'Block',accept:'string'},{type:'Indicator',img:'block_icon/variable_03.png',size:12}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_variableRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_variableRefs',block);}]},def:{params:[null,{type:'text',params:['1']},{type:'text',params:['10']},null],type:'change_value_list_index'},pyHelpDef:{params:['A&value',{type:'text',params:['B&value']},{type:'text',params:['C&value']},null],type:'change_value_list_index'},paramsKeyMap:{LIST:0,INDEX:1,DATA:2},class:'list',isNotFor:['listNotExist'],func:function func(sprite,script){var listId=script.getField('LIST',script);var data=script.getValue('DATA',script);var index=script.getValue('INDEX',script);var list=Entry.variableContainer.getList(listId,sprite);if(!list.array_||!Entry.Utils.isNumber(index)||index>list.array_.length)throw new Error('can not insert value to array');list.array_[index-1].data=data;list.updateView();return script.callReturn();},syntax:{js:[],py:[{syntax:'%1[%2] = %3',passTest:true,textParams:[{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnRawStringKey},{type:'Block',accept:'string',paramType:'index'},{type:'Block',accept:'string'}]}]}},value_of_index_from_list:{color:'#E457DC',fontColor:'#fff',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.VARIABLE_value_of_index_from_list_1,color:'white'},{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE},{type:'Text',text:Lang.Blocks.VARIABLE_value_of_index_from_list_2,color:'white'},{type:'Block',isListIndex:true,accept:'string'},{type:'Text',text:Lang.Blocks.VARIABLE_value_of_index_from_list_3,color:'white'}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_variableRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_variableRefs',block);}]},def:{params:[null,null,null,{type:'number',params:['1']}],type:'value_of_index_from_list'},pyHelpDef:{params:[null,'A&value',null,{type:'number',params:['B&value']}],type:'value_of_index_from_list'},paramsKeyMap:{LIST:1,INDEX:3},class:'list_element',isNotFor:['listNotExist'],func:function func(sprite,script){var listId=script.getField('LIST',script);var index=script.getValue('INDEX',script);var list=Entry.variableContainer.getList(listId,sprite);index=Entry.getListRealIndex(index,list);if(!list.array_||!Entry.Utils.isNumber(index)||index>list.array_.length)throw new Error('can not insert value to array');return list.array_[index-1].data;},syntax:{js:[],py:[{syntax:'%2[%4]',passTest:true,blockType:'param',textParams:[undefined,{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnRawStringKey},undefined,{type:'Block',accept:'string',paramType:'index'}]}]}},length_of_list:{color:'#E457DC',fontColor:'#fff',skeleton:'basic_string_field',statements:[],params:[{type:'Text',text:Lang.Blocks.VARIABLE_length_of_list_1,color:'white'},{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE},{type:'Text',text:Lang.Blocks.VARIABLE_length_of_list_2,color:'white'}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_variableRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_variableRefs',block);}]},def:{params:[null,null,null],type:'length_of_list'},pyHelpDef:{params:[null,'A&value',null],type:'length_of_list'},paramsKeyMap:{LIST:1},class:'list',isNotFor:['listNotExist'],func:function func(sprite,script){var listId=script.getField('LIST',script);var list=Entry.variableContainer.getList(listId,sprite);return list.array_.length;},syntax:{js:[],py:[{syntax:'len(%2)',blockType:'param',passTest:true,textParams:[undefined,{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnRawStringKey}]}]}},show_list:{color:'#E457DC',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE},{type:'Indicator',img:'block_icon/variable_03.png',size:12}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_variableRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_variableRefs',block);}]},def:{params:[null,null],type:'show_list'},pyHelpDef:{params:['A&value',null],type:'show_list'},paramsKeyMap:{LIST:0},class:'list_visibility',isNotFor:['listNotExist'],func:function func(sprite,script){var listId=script.getField('LIST',script);var list=Entry.variableContainer.getList(listId);list.setVisible(true);return script.callReturn();},syntax:{js:[],py:[{syntax:'Entry.show_list(%1)',textParams:[{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnStringKey}]}]}},hide_list:{color:'#E457DC',skeleton:'basic',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE},{type:'Indicator',img:'block_icon/variable_03.png',size:12}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_variableRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_variableRefs',block);}]},def:{params:[null,null],type:'hide_list'},pyHelpDef:{params:['A&value',null],type:'hide_list'},paramsKeyMap:{LIST:0},class:'list_visibility',isNotFor:['listNotExist'],func:function func(sprite,script){var listId=script.getField('LIST',script);var list=Entry.variableContainer.getList(listId);list.setVisible(false);return script.callReturn();},syntax:{js:[],py:[{syntax:'Entry.hide_list(%1)',textParams:[{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnStringKey}]}]}},options_for_list:{color:'#E457DC',skeleton:'basic_string_field',statements:[],params:[{type:'Dropdown',options:[['첫번째','FIRST'],['마지막','LAST'],['무작위','RANDOM']],value:'FIRST',fontSize:11}],events:{},def:{params:[null]},paramsKeyMap:{OPERATOR:0},func:function func(sprite,script){return script.getField('OPERATOR',script);},syntax:{js:[],py:['']}},set_visible_answer:{color:'#E457DC',skeleton:'basic',statements:[],params:[{type:'Dropdown',options:[[Lang.Blocks.CALC_timer_visible_show,'SHOW'],[Lang.Blocks.CALC_timer_visible_hide,'HIDE']],value:'SHOW',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE},{type:'Indicator',img:'block_icon/variable_03.png',size:12}],events:{viewAdd:[function(block){if(Entry.container)Entry.container.showProjectAnswer();}],viewDestroy:[function(block,notIncludeSelf){if(Entry.container)Entry.container.hideProjectAnswer(block,notIncludeSelf);}]},def:{params:['HIDE',null],type:'set_visible_answer'},pyHelpDef:{params:['A&value',null],type:'set_visible_answer'},paramsKeyMap:{BOOL:0},class:'ask',isNotFor:[],func:function func(sprite,script){var bool=script.getField('BOOL',script);if(bool=='HIDE')Entry.container.inputValue.setVisible(false);else Entry.container.inputValue.setVisible(true);return script.callReturn();},syntax:{js:[],py:[{syntax:'Entry.answer_view(%1)',textParams:[{type:'Dropdown',options:[[Lang.Blocks.CALC_timer_visible_show,'SHOW'],[Lang.Blocks.CALC_timer_visible_hide,'HIDE']],value:'SHOW',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnStringValueLowerCase,codeMap:'Entry.CodeMap.Entry.set_visible_answer[0]'}]}]}},is_included_in_list:{color:'#E457DC',fontColor:'#fff',skeleton:'basic_boolean_field',statements:[],params:[{type:'Text',text:Lang.Blocks.VARIABLE_is_included_in_list_1,color:'white'},{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE},{type:'Text',text:Lang.Blocks.VARIABLE_is_included_in_list_2,color:'white'},{type:'Block',accept:'string'},{type:'Text',text:Lang.Blocks.VARIABLE_is_included_in_list_3,color:'white'}],events:{dataAdd:[function(block){var vc=Entry.variableContainer;if(vc)vc.addRef('_variableRefs',block);}],dataDestroy:[function(block){var vc=Entry.variableContainer;if(vc)vc.removeRef('_variableRefs',block);}]},def:{params:[null,null,null,{type:'text',params:['10']},null],type:'is_included_in_list'},pyHelpDef:{params:[null,'B&value',null,{type:'text',params:['A&value']},null],type:'is_included_in_list'},paramsKeyMap:{LIST:1,DATA:3},class:'list',isNotFor:['listNotExist'],func:function func(sprite,script){var listId=script.getField('LIST',script);var data=script.getStringValue('DATA',script);var list=Entry.variableContainer.getList(listId,sprite);if(!list)return false;var arr=list.array_;for(var i=0,len=arr.length;i<len;i++){if(arr[i].data.toString()==data.toString())return true;}return false;},syntax:{js:[],py:[{syntax:'%4 in %2',blockType:'param',passTest:true,textParams:[undefined,{type:'DropdownDynamic',value:null,menuName:'lists',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_VARIABLE,converter:Entry.block.converters.returnRawStringKey},undefined,{type:'Block',accept:'string'}]}]}},//endregion basic 기본
//region basic 기본
run:{skeleton:'basic',color:'#3BBD70',contents:['this is','basic block']},mutant:{skeleton:'basic',event:'start',color:'#3BBD70',params:[],changeEvent:{_listeners:[]}},jr_start:{skeleton:'pebble_event',event:'start',color:'#3BBD70',params:[{type:'Indicator',img:'../../../img/assets/ntry/bitmap/jr/block_play_image.png',highlightColor:'#3BBD70',position:{x:0,y:0},size:22}],func:function func(){var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);for(var key in entities){this._unit=entities[key];}Ntry.unitComp=Ntry.entityManager.getComponent(this._unit.id,Ntry.STATIC.UNIT);}},jr_repeat:{skeleton:'pebble_loop',color:'#127CDB',params:[{type:'Text',text:''},{type:'Dropdown',options:[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]],value:3,fontSize:14,roundValue:3}],statements:[{accept:'pebble_basic'}],func:function func(){if(this.repeatCount===undefined){this.repeatCount=this.block.params[1];return Entry.STATIC.BREAK;}else if(this.repeatCount>0){this.repeatCount--;var statement=this.block.statements[0];if(statement.getBlocks().length===0)return;this.executor.stepInto(statement);return Entry.STATIC.BREAK;}else{delete this.repeatCount;}}},jr_item:{skeleton:'pebble_basic',color:'#F46C6C',params:[{type:'Indicator',img:'../../../img/assets/ntry/bitmap/jr/block_item_image.png',highlightColor:'#FFF',position:{x:83,y:0},size:22}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){Ntry.dispatchEvent('getItem');self.isAction=false;};Ntry.dispatchEvent('unitAction',Ntry.STATIC.GET_ITEM,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},cparty_jr_item:{skeleton:'pebble_basic',color:'#8ABC1D',params:[{type:'Indicator',img:'../../../img/assets/ntry/bitmap/cpartyjr/pen.png',highlightColor:'#FFF',position:{x:83,y:0},size:22}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){Ntry.dispatchEvent('getItem');self.isAction=false;};Ntry.dispatchEvent('unitAction',Ntry.STATIC.GET_ITEM,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},jr_north:{skeleton:'pebble_basic',color:'#A751E3',params:[{type:'Indicator',img:'../../../img/assets/ntry/bitmap/jr/block_up_image.png',position:{x:83,y:0},size:22}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var STATIC=Ntry.STATIC;var self=this;var callBack=function callBack(){window.setTimeout(function(){Ntry.dispatchEvent('unitAction',Ntry.STATIC.WALK,function(){self.isAction=false;});},3);};var actionType;switch(Ntry.unitComp.direction){case Ntry.STATIC.EAST:actionType=STATIC.TURN_LEFT;break;case Ntry.STATIC.SOUTH:actionType=STATIC.HALF_ROTATION;break;case Ntry.STATIC.WEST:actionType=STATIC.TURN_RIGHT;break;default:callBack();break;}if(actionType)Ntry.dispatchEvent('unitAction',actionType,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},jr_east:{skeleton:'pebble_basic',color:'#A751E3',params:[{type:'Indicator',img:'../../../img/assets/ntry/bitmap/jr/block_right_image.png',position:{x:83,y:0},size:22}],func:function func(){var STATIC=Ntry.STATIC;if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){window.setTimeout(function(){Ntry.dispatchEvent('unitAction',STATIC.WALK,function(){self.isAction=false;});},3);};// turn direction
var actionType;switch(Ntry.unitComp.direction){case STATIC.SOUTH:actionType=STATIC.TURN_LEFT;break;case STATIC.WEST:actionType=STATIC.HALF_ROTATION;break;case STATIC.NORTH:actionType=STATIC.TURN_RIGHT;break;default:callBack();break;}if(actionType)Ntry.dispatchEvent('unitAction',actionType,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},jr_south:{skeleton:'pebble_basic',color:'#A751E3',params:[{type:'Indicator',img:'../../../img/assets/ntry/bitmap/jr/block_down_image.png',position:{x:83,y:0},size:22}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var STATIC=Ntry.STATIC;var self=this;var callBack=function callBack(){window.setTimeout(function(){Ntry.dispatchEvent('unitAction',Ntry.STATIC.WALK,function(){self.isAction=false;});},3);};// turn direction
var actionType;switch(Ntry.unitComp.direction){case STATIC.EAST:actionType=STATIC.TURN_RIGHT;break;case STATIC.NORTH:actionType=STATIC.HALF_ROTATION;break;case STATIC.WEST:actionType=STATIC.TURN_LEFT;break;default:callBack();break;}if(actionType)Ntry.dispatchEvent('unitAction',actionType,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},jr_west:{skeleton:'pebble_basic',color:'#A751E3',params:[{type:'Indicator',img:'../../../img/assets/ntry/bitmap/jr/block_left_image.png',position:{x:83,y:0},size:22}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var STATIC=Ntry.STATIC;var self=this;var callBack=function callBack(){window.setTimeout(function(){Ntry.dispatchEvent('unitAction',STATIC.WALK,function(){self.isAction=false;});},3);};// turn direction
var actionType;switch(Ntry.unitComp.direction){case STATIC.SOUTH:actionType=STATIC.TURN_RIGHT;break;case STATIC.EAST:actionType=STATIC.HALF_ROTATION;break;case STATIC.NORTH:actionType=STATIC.TURN_LEFT;break;default:callBack();break;}if(actionType)Ntry.dispatchEvent('unitAction',actionType,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},jr_start_basic:{skeleton:'basic_event',event:'start',color:'#3BBD70',params:[{type:'Indicator',boxMultiplier:2,img:'../../../img/assets/block_icon/start_icon_play.png',highlightColor:'#3BBD70',size:17,position:{x:0,y:-2}},{text:'시작하기를 클릭했을때',type:'Text'}],func:function func(){var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);for(var key in entities){this._unit=entities[key];}Ntry.unitComp=Ntry.entityManager.getComponent(this._unit.id,Ntry.STATIC.UNIT);}},jr_go_straight:{skeleton:'basic',color:'#A751E3',params:[{type:'Image',img:'../../../img/assets/ntry/bitmap/jr/cparty_go_straight.png',size:24}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){self.isAction=false;};// turn direction
Ntry.dispatchEvent('unitAction',Ntry.STATIC.WALK,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}},syntax:['Scope','move']},jr_turn_left:{skeleton:'basic',color:'#A751E3',params:[{type:'Image',img:'../../../img/assets/ntry/bitmap/jr/cparty_rotate_l.png',size:24}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){self.isAction=false;};// turn direction
Ntry.dispatchEvent('unitAction',Ntry.STATIC.TURN_LEFT,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}},syntax:['Scope','left']},jr_turn_right:{skeleton:'basic',color:'#A751E3',params:[{type:'Image',img:'../../../img/assets/ntry/bitmap/jr/cparty_rotate_r.png',size:24}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){self.isAction=false;};// turn direction
Ntry.dispatchEvent('unitAction',Ntry.STATIC.TURN_RIGHT,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}},syntax:['Scope','right']},jr_go_slow:{skeleton:'basic',color:'#f46c6c',params:[{type:'Image',img:'../../../img/assets/ntry/bitmap/jr/cparty_go_slow.png',size:24}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){self.isAction=false;};// turn direction
Ntry.dispatchEvent('unitAction',Ntry.STATIC.GO_SLOW,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}},syntax:['Scope','move_slowly']},jr_repeat_until_dest:{skeleton:'basic_loop',color:'#498DEB',syntax:['BasicWhile','true'],params:[{type:'Image',img:'../../../img/assets/ntry/bitmap/jr/jr_goal_image.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}],statements:[{accept:'basic'}],func:function func(){var statement=this.block.statements[0];if(statement.getBlocks().length===0)return;this.executor.stepInto(statement);return Entry.STATIC.BREAK;}},jr_if_construction:{skeleton:'basic_loop',color:'#498DEB',syntax:['BasicIf',"front == 'wall'"],params:[{type:'Image',img:'../../../img/assets/ntry/bitmap/jr/jr_construction_image.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}],statements:[{accept:'basic'}],func:function func(){if(this.isContinue)return;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};Ntry.addVectorByDirection(grid,unitComp.direction,1);var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.OBSTACLE_REPAIR});this.isContinue=true;var statement=this.block.statements[0];if(fitEntities.length===0)return;else if(statement.getBlocks().length===0)return;else{this.executor.stepInto(statement);return Entry.STATIC.BREAK;}}},jr_if_speed:{skeleton:'basic_loop',color:'#498DEB',syntax:['BasicIf',"front == 'hump'"],params:[{type:'Image',img:'../../../img/assets/ntry/bitmap/jr/jr_speed_image.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}],statements:[{accept:'basic'}],func:function func(){if(this.isContinue)return;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};Ntry.addVectorByDirection(grid,unitComp.direction,1);var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.OBSTACLE_SLOW});this.isContinue=true;var statement=this.block.statements[0];if(fitEntities.length===0)return;else if(statement.getBlocks().length===0)return;else{this.executor.stepInto(statement);return Entry.STATIC.BREAK;}}},maze_step_start:{skeleton:'basic_event',mode:'maze',event:'start',color:'#3BBD70',syntax:['Program'],params:[{type:'Indicator',boxMultiplier:2,img:'../../../img/assets/block_icon/start_icon_play.png',highlightColor:'#3BBD70',size:17,position:{x:0,y:-2}}],func:function func(){var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);for(var key in entities){this._unit=entities[key];}Ntry.unitComp=Ntry.entityManager.getComponent(this._unit.id,Ntry.STATIC.UNIT);Ntry.unit=this._unit;}},maze_step_jump:{skeleton:'basic',mode:'maze',color:'#FF6E4B',params:[{type:'Image',img:'/img/assets/week/blocks/jump.png',size:24}],syntax:['Scope','jump'],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){self.isAction=false;};Ntry.dispatchEvent('unitAction',Ntry.STATIC.JUMP,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_step_jump2:{parent:'maze_step_jump',func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){self.isAction=false;};var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var unitId;$.each(entities,function(id,entity){unitId=id;});var unitComp=Ntry.entityManager.getComponent(unitId,Ntry.STATIC.UNIT);var unitGrid=$.extend({},Ntry.entityManager.getComponent(unitId,Ntry.STATIC.GRID));var checkGrid={x:unitGrid.x,y:unitGrid.y};var isCollisionPossible=Ntry.checkCollisionTile(unitGrid,unitComp.direction,[Ntry.STATIC.OBSTACLE_IRON],2);if(isCollisionPossible){Ntry.dispatchEvent('unitAction',Ntry.STATIC.FAIL_JUMP,callBack);Ntry.dispatchEvent('complete',false,Ntry.STATIC.CONTACT_IRON);return;}Ntry.dispatchEvent('unitAction',Ntry.STATIC.JUMP,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_step_jump_pinkbean:{parent:'maze_step_jump',func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){self.isAction=false;};var unit=Ntry.getUnit();var components=unit.components||{};var unitComp=components[Ntry.STATIC.UNIT]||{};var unitGrid=$.extend({},components[Ntry.STATIC.GRID]);var checkGrid={x:unitGrid.x,y:unitGrid.y};var isCollisionPossible=Ntry.checkCollisionTile(unitGrid,unitComp.direction,[Ntry.STATIC.OBSTACLE_MUSHROOM],1);if(isCollisionPossible){Ntry.dispatchEvent('unitAction',Ntry.STATIC.FAIL_JUMP,callBack);Ntry.dispatchEvent('complete',false,Ntry.STATIC.HIT_UNIT_BY_MUSHROOM);return;}Ntry.dispatchEvent('unitAction',Ntry.STATIC.JUMP,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_step_for:{skeleton:'basic_loop',mode:'maze',color:'#498DEB',syntax:['BasicIteration'],params:[{type:'Dropdown',key:'REPEAT',options:[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]],value:1},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}],statements:[{accept:'basic'}],func:function func(){if(this.repeatCount===undefined){this.repeatCount=this.block.params[0];return Entry.STATIC.BREAK;}else if(this.repeatCount>0){this.repeatCount--;var statement=this.block.statements[0];if(statement.getBlocks().length===0)return;this.executor.stepInto(statement);return Entry.STATIC.BREAK;}else{delete this.repeatCount;}}},test:{skeleton:'basic_boolean_field',mode:'maze',color:'#127CDB',params:[{type:'Angle',value:'90'},{type:'Dropdown',options:[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]],value:1}]},maze_repeat_until_1:{skeleton:'basic_loop',mode:'maze',color:'#498DEB',syntax:['BasicWhile','true'],params:[{type:'Image',img:'/img/assets/ntry/block_inner/repeat_goal_1.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}],statements:[{accept:'basic'}],func:function func(){var statement=this.block.statements[0];if(statement.getBlocks().length===0)return;this.executor.stepInto(statement);return Entry.STATIC.BREAK;}},maze_repeat_until_2:{skeleton:'basic_loop',mode:'maze',color:'#498DEB',syntax:['BasicWhile','true'],params:[{type:'Image',img:'/img/assets/ntry/block_inner/repeat_goal_1.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}],statements:[{accept:'basic'}],func:function func(){var statement=this.block.statements[0];if(statement.getBlocks().length===0)return;this.executor.stepInto(statement);return Entry.STATIC.BREAK;}},maze_step_if_1:{skeleton:'basic_loop',mode:'maze',color:'#498DEB',syntax:['BasicIf',"front == 'wall'"],params:[{type:'Image',img:'/img/assets/ntry/block_inner/if_target_1.png',size:18},{type:'Image',img:'/img/assets/week/blocks/if.png',size:24}],statements:[{accept:'basic'}],func:function func(){if(this.isContinue)return;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};Ntry.addVectorByDirection(grid,unitComp.direction,1);var existEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y});var statement=this.block.statements[0];if(existEntities.length===0){this.executor.stepInto(statement);return Entry.STATIC.BREAK;}var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.WALL});this.isContinue=true;if(fitEntities.length===0){return;}else if(statement.getBlocks().length===0)return;else{this.executor.stepInto(statement);return Entry.STATIC.BREAK;}}},maze_step_if_2:{skeleton:'basic_loop',mode:'maze',color:'#498DEB',syntax:['BasicIf',"front == 'bee'"],params:[{type:'Image',img:'../../../img/assets/ntry/bitmap/maze2/obstacle_01.png',size:18},{type:'Image',img:'/img/assets/week/blocks/if.png',size:24}],statements:[{accept:'basic'}],func:function func(){if(this.isContinue)return;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};Ntry.addVectorByDirection(grid,unitComp.direction,1);var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.OBSTACLE_BEE});this.isContinue=true;var statement=this.block.statements[0];if(fitEntities.length===0){return;}else if(statement.getBlocks().length===0)return;else{this.executor.stepInto(statement);return Entry.STATIC.BREAK;}}},maze_call_function:{skeleton:'basic',mode:'maze',color:'#B57242',syntax:['Scope','promise'],params:[{type:'Image',img:'/img/assets/week/blocks/function.png',size:24}],func:function func(){if(!this.funcExecutor){var codes=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE);for(var key in codes){var code=codes[key].components[Ntry.STATIC.CODE].code;this.funcExecutor=new Entry.Executor(code.getEventMap('define')[0]);}}this.funcExecutor.execute();if(this.funcExecutor.scope.block===null)return;else return Entry.STATIC.BREAK;}},maze_define_function:{skeleton:'basic_define',mode:'maze',color:'#B57242',event:'define',syntax:['BasicFunction'],params:[{type:'Image',img:'/img/assets/week/blocks/function.png',size:24}],statements:[{accept:'basic'}],func:function func(executor){if(this.executed)return;var statement=this.block.statements[0];if(statement.getBlocks().length===0)return;this.executor.stepInto(statement);this.executed=true;return Entry.STATIC.BREAK;}},maze_step_if_3:{skeleton:'basic_loop',mode:'maze',color:'#498DEB',syntax:['BasicIf','front == banana'],params:[{type:'Image',img:'/img/assets/ntry/block_inner/if_target_3.png',size:18},{type:'Image',img:'/img/assets/week/blocks/if.png',size:24}],statements:[{accept:'basic'}],func:function func(){if(this.isContinue)return;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};Ntry.addVectorByDirection(grid,unitComp.direction,1);var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.OBSTACLE_BANANA});this.isContinue=true;var statement=this.block.statements[0];if(fitEntities.length===0){return;}else if(statement.getBlocks().length===0)return;else{this.executor.stepInto(statement);return Entry.STATIC.BREAK;}}},maze_step_if_4:{skeleton:'basic_loop',mode:'maze',color:'#498DEB',syntax:['BasicIf','front == wall'],params:[{type:'Image',img:'/img/assets/ntry/block_inner/if_target_2.png',size:18},{type:'Image',img:'/img/assets/week/blocks/if.png',size:24}],statements:[{accept:'basic'}],func:function func(){if(this.isContinue)return;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};Ntry.addVectorByDirection(grid,unitComp.direction,1);var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.WALL});this.isContinue=true;var statement=this.block.statements[0];if(fitEntities.length===0){return;}else if(statement.getBlocks().length===0)return;else{this.executor.stepInto(statement);return Entry.STATIC.BREAK;}}},maze_step_move_step:{skeleton:'basic',mode:'maze',color:'#A751E3',syntax:['Scope','move'],params:[{type:'Image',img:'/img/assets/week/blocks/moveStep.png',size:24}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){self.isAction=false;};// turn direction
Ntry.dispatchEvent('unitAction',Ntry.STATIC.WALK,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_step_rotate_left:{skeleton:'basic',mode:'maze',color:'#A751E3',syntax:['Scope','left'],params:[{type:'Image',img:'/img/assets/week/blocks/turnL.png',size:24}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){self.isAction=false;};// turn direction
Ntry.dispatchEvent('unitAction',Ntry.STATIC.TURN_LEFT,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_step_rotate_right:{skeleton:'basic',mode:'maze',color:'#A751E3',syntax:['Scope','right'],params:[{type:'Image',img:'/img/assets/week/blocks/turnR.png',size:24}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){self.isAction=false;};// turn direction
Ntry.dispatchEvent('unitAction',Ntry.STATIC.TURN_RIGHT,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_step_forward:{skeleton:'basic',mode:'maze',color:'#A751E3',syntax:['Scope','move'],params:[{type:'Image',img:'/img/assets/week/blocks/moveStep.png',size:24}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){self.isAction=false;};// turn direction
Ntry.dispatchEvent('unitAction',Ntry.STATIC.WALK,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_turn_right:{skeleton:'basic',mode:'maze',color:'#A751E3',syntax:['Scope','turn_right'],params:[{type:'Indicator',img:'../../../img/assets/week/blocks/right_ic.png',size:12}],func:function func(){if(this.isDead){return Entry.STATIC.BREAK;}else if(this.executor.register.isTurned){Ntry.dispatchEvent('startEnemyWalk',false,function(){});this.isDead=true;return Entry.STATIC.BREAK;}else{Ntry.unit.components[Ntry.STATIC.UNIT].direction=Ntry.STATIC.EAST;this.executor.register.isTurned=true;}}},maze_turn_left:{skeleton:'basic',mode:'maze',color:'#A751E3',syntax:['Scope','turn_left'],params:[{type:'Indicator',img:'../../../img/assets/week/blocks/left_ic.png',size:12}],func:function func(){if(this.isDead){return Entry.STATIC.BREAK;}else if(this.executor.register.isTurned){Ntry.dispatchEvent('startEnemyWalk',false,function(){});this.isDead=true;return Entry.STATIC.BREAK;}else{Ntry.unit.components[Ntry.STATIC.UNIT].direction=Ntry.STATIC.WEST;this.executor.register.isTurned=true;}}},maze_step_if_left_monster:{skeleton:'basic_double_loop',mode:'maze',color:'#498DEB',syntax:['BasicIf','left == monster'],params:[{type:'Indicator',img:'../../../img/assets/week/blocks/if.png',size:12},{type:'LineBreak'}],statements:[{accept:'basic'},{accept:'basic'}],statementsKeyMap:{STACK_IF:0,STACK_ELSE:1},func:function func(sprite,script){if(this.isContinue)return;var unitComp=Ntry.entityManager.getComponent(Ntry.unit.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(Ntry.unit.id,Ntry.STATIC.GRID);var grid={x:gridComp.x-1,y:gridComp.y};var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y}).filter(function(e){return e.components[Ntry.STATIC.ENEMY];});this.isContinue=true;if(fitEntities.length===0){return script.getStatement('STACK_ELSE',script);}else{return script.getStatement('STACK_IF',script);}}},maze_step_if_right_monster:{skeleton:'basic_double_loop',mode:'maze',color:'#498DEB',syntax:['BasicIf','right == monster'],params:[{type:'Indicator',img:'../../../img/assets/week/blocks/if.png',size:12},{type:'LineBreak'}],statements:[{accept:'basic'},{accept:'basic'}],statementsKeyMap:{STACK_IF:0,STACK_ELSE:1},func:function func(sprite,script){if(this.isContinue)return;var unitComp=Ntry.entityManager.getComponent(Ntry.unit.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(Ntry.unit.id,Ntry.STATIC.GRID);var grid={x:gridComp.x+1,y:gridComp.y};var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y}).filter(function(e){return e.components[Ntry.STATIC.ENEMY];});this.isContinue=true;if(fitEntities.length===0){return script.getStatement('STACK_ELSE',script);}else{return script.getStatement('STACK_IF',script);}}},maze_step_if_yeti:{skeleton:'basic_double_loop',mode:'maze',color:'#498DEB',syntax:['BasicIf','front == yeti'],params:[{type:'Image',img:'/img/assets/week/blocks/yeti.png',size:24},{type:'Indicator',img:'../../../img/assets/week/blocks/if.png',size:12},{type:'LineBreak'}],statements:[{accept:'basic'},{accept:'basic'}],statementsKeyMap:{STACK_IF:0,STACK_ELSE:1},func:function func(sprite,script){if(this.isContinue)return;var unitComp=Ntry.entityManager.getComponent(Ntry.unit.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(Ntry.unit.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};Ntry.addVectorByDirection(grid,unitComp.direction,1);var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.OBSTACLE_YETI});this.isContinue=true;if(fitEntities.length===0){return script.getStatement('STACK_ELSE',script);}else{return script.getStatement('STACK_IF',script);}}},maze_repeat_until_beat_monster:{parent:'repeat_inf',params:[{type:'Indicator',img:'../../../img/assets/week/blocks/for.png',size:12}]},maze_ladder_climb:{skeleton:'basic',mode:'maze',color:'#71C11B',emphasizedColor:'#9BDB40',syntax:['Scope','climb'],params:[{type:'Image',img:'/img/assets/week/blocks/ladder.png',size:24}],func:function func(sprite,script){if(!script.isContinue){script.isContinue=true;script.isAction=true;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var unitId;$.each(entities,function(id,entity){unitId=id;});var unitComp=Ntry.entityManager.getComponent(unitId,Ntry.STATIC.UNIT);var unitGrid=$.extend({},Ntry.entityManager.getComponent(unitId,Ntry.STATIC.GRID));script.direction=unitComp.direction;var callBack=function callBack(){unitComp.direction=script.direction;script.isAction=false;};var isCollisionPossible=false;if(unitGrid.y>3){unitComp.direction=Ntry.STATIC.NORTH;isCollisionPossible=Ntry.checkCollisionTile(unitGrid,unitComp.direction,[Ntry.STATIC.LADDER],2);}else{unitComp.direction=Ntry.STATIC.SOUTH;var tile=Ntry.getTileByGrid(unitGrid);if(tile.tileType===Ntry.STATIC.LADDER){isCollisionPossible=true;}}if(isCollisionPossible){Ntry.dispatchEvent('unitAction',Ntry.STATIC.CLIMB,callBack);}else{Ntry.dispatchEvent('unitAction',Ntry.STATIC.NOT_FOUND_LADDER,callBack);}return Entry.STATIC.BREAK;}else if(script.isAction){return Entry.STATIC.BREAK;}else{delete script.isAction;delete script.isContinue;}}},maze_attack_lupin:{skeleton:'basic',mode:'maze',color:'#ef6d6a',emphasizedColor:'#f29999',syntax:['Scope','yoyo'],params:[{type:'Image',img:'/img/assets/week/blocks/lupin.png',size:24},{type:'Image',img:'/img/assets/week/blocks/pinkbean_ic.png',size:24}],func:function func(sprite,script){if(!script.isContinue){var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var unitId;$.each(entities,function(id,entity){unitId=id;});var unitComp=Ntry.entityManager.getComponent(unitId,Ntry.STATIC.UNIT);script.isContinue=true;script.isAction=true;var isFoundMushroom=false;var grid=$.extend({},Ntry.entityManager.getComponent(unitId,Ntry.STATIC.GRID));for(var i=0;i<2;i++){Ntry.addVectorByDirection(grid,unitComp.direction,1);var findTile=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.OBSTACLE_MUSHROOM});if(findTile&&findTile.length){isFoundMushroom=true;}}if(isFoundMushroom){Ntry.dispatchEvent('unitAction',Ntry.STATIC.WRONG_ATTACK_OBSTACLE,function(){script.isAction=false;});return Entry.STATIC.BREAK;}var unitGrid=$.extend({},Ntry.entityManager.getComponent(unitId,Ntry.STATIC.GRID));var isCollisionPossible=Ntry.checkCollisionTile(unitGrid,unitComp.direction,[Ntry.STATIC.OBSTACLE_LUPIN],2);if(!isCollisionPossible){Ntry.dispatchEvent('unitAction',Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT,function(){script.isAction=false;});return Entry.STATIC.BREAK;}var callBack=function callBack(){Ntry.dispatchEvent('playSound','dieLupin');Ntry.dispatchEvent('destroyObstacle',2,function(state){script.isAction=false;});};Ntry.dispatchEvent('unitAction',Ntry.STATIC.ATTACK_LUPIN,callBack);return Entry.STATIC.BREAK;}else if(script.isAction){return Entry.STATIC.BREAK;}else{delete script.isAction;delete script.isContinue;}}},maze_attack_both_side:{skeleton:'basic',mode:'maze',color:'#ef6d6a',emphasizedColor:'#f29999',syntax:['Scope','both_side'],params:[{type:'Image',img:'/img/assets/week/blocks/pinkbean_ic.png',size:24}],func:function func(sprite,script){if(!script.isContinue){Ntry.dispatchEvent('stopEnemyWalk');this.executor.register.isTurned=false;script.isContinue=true;script.isAction=true;var grid=$.extend({type:Ntry.STATIC.GRID},Ntry.entityManager.getComponent(Ntry.unit.id,Ntry.STATIC.GRID));var backGrid=$.extend({type:Ntry.STATIC.GRID},Ntry.entityManager.getComponent(Ntry.unit.id,Ntry.STATIC.GRID));Ntry.addVectorByDirection(grid,Ntry.unitComp.direction,1);Ntry.addVectorByDirection(backGrid,Ntry.unitComp.direction,-1);var frontExist=!!Ntry.entityManager.find(grid).filter(function(e){return e.components[Ntry.STATIC.ENEMY];}).length;var backExist=!!Ntry.entityManager.find(backGrid).filter(function(e){return e.components[Ntry.STATIC.ENEMY];}).length;if(!frontExist||!backExist){Ntry.dispatchEvent('unitAction',Ntry.STATIC.BOTH_SIDE_FAIL,function(){script.isAction=false;});return Entry.STATIC.BREAK;}Ntry.dispatchEvent('destroyObstacle',1,function(state){});Ntry.dispatchEvent('destroyObstacle',-1,function(state){});var callBack=function callBack(){Ntry.dispatchEvent('startEnemyWalk',true,function(){script.isAction=false;});};Ntry.dispatchEvent('unitAction',Ntry.STATIC.BOTH_SIDE,callBack);return Entry.STATIC.BREAK;}else if(script.isAction){return Entry.STATIC.BREAK;}else{delete script.isAction;delete script.isContinue;}}},maze_attack_pepe:{skeleton:'basic',mode:'maze',color:'#ef6d6a',emphasizedColor:'#f29999',params:[{type:'Image',img:'/img/assets/week/blocks/pepe.png',size:24},{type:'Image',img:'/img/assets/week/blocks/pinkbean_ic.png',size:24}],func:function func(sprite,script){if(!script.isContinue){Ntry.dispatchEvent('stopEnemyWalk');this.executor.register.isTurned=false;script.isContinue=true;script.isAction=true;var grid=$.extend({type:Ntry.STATIC.GRID},Ntry.entityManager.getComponent(Ntry.unit.id,Ntry.STATIC.GRID));var backGrid=$.extend({type:Ntry.STATIC.GRID},Ntry.entityManager.getComponent(Ntry.unit.id,Ntry.STATIC.GRID));Ntry.addVectorByDirection(grid,Ntry.unitComp.direction,1);var findTile=Ntry.entityManager.find(grid,{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.OBSTACLE_PEPE});Ntry.addVectorByDirection(backGrid,Ntry.unitComp.direction,-1);var findBackTile=Ntry.entityManager.find(backGrid).filter(function(e){return e.components[Ntry.STATIC.ENEMY];});var frontEnemyExist=!!Ntry.entityManager.find(grid).filter(function(e){return e.components[Ntry.STATIC.ENEMY];}).length;var frontEnemyValid=!!findTile.length;var backEnemyExist=!!findBackTile.length;if(frontEnemyValid&&!backEnemyExist){// success
var callBack=function callBack(){Ntry.dispatchEvent('destroyObstacle',1,function(state){});Ntry.dispatchEvent('startEnemyWalk',true,function(){console.log('???');script.isAction=false;});};Ntry.dispatchEvent('unitAction',Ntry.STATIC.PEPE,callBack);}else if(frontEnemyValid&&backEnemyExist){// attack and dead
var callBack=function callBack(){Ntry.dispatchEvent('destroyObstacle',1,function(state){});Ntry.dispatchEvent('startEnemyWalk',false,function(){});};Ntry.dispatchEvent('unitAction',Ntry.STATIC.PEPE,callBack);}else if(backEnemyExist){// dead
if(frontEnemyExist)Ntry.dispatchEvent('unitAction',Ntry.STATIC.PEPE_FAIL,function(){script.isAction=false;});else Ntry.dispatchEvent('startEnemyWalk',false,function(){});}else{// music time
Ntry.dispatchEvent('unitAction',Ntry.STATIC.PEPE_FAIL,function(){script.isAction=false;});}return Entry.STATIC.BREAK;}else if(script.isAction){return Entry.STATIC.BREAK;}else{delete script.isAction;delete script.isContinue;}}},maze_attack_yeti:{skeleton:'basic',mode:'maze',color:'#ef6d6a',emphasizedColor:'#f29999',params:[{type:'Image',img:'/img/assets/week/blocks/yeti.png',size:24},{type:'Image',img:'/img/assets/week/blocks/pinkbean_ic.png',size:24}],func:function func(sprite,script){if(!script.isContinue){Ntry.dispatchEvent('stopEnemyWalk');this.executor.register.isTurned=false;script.isContinue=true;script.isAction=true;var grid=$.extend({type:Ntry.STATIC.GRID},Ntry.entityManager.getComponent(Ntry.unit.id,Ntry.STATIC.GRID));var backGrid=$.extend({type:Ntry.STATIC.GRID},Ntry.entityManager.getComponent(Ntry.unit.id,Ntry.STATIC.GRID));Ntry.addVectorByDirection(grid,Ntry.unitComp.direction,1);var findTile=Ntry.entityManager.find(grid,{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.OBSTACLE_YETI});Ntry.addVectorByDirection(backGrid,Ntry.unitComp.direction,-1);var findBackTile=Ntry.entityManager.find(backGrid).filter(function(e){return e.components[Ntry.STATIC.ENEMY];});var frontEnemyExist=!!Ntry.entityManager.find(grid).filter(function(e){return e.components[Ntry.STATIC.ENEMY];}).length;var frontEnemyValid=!!findTile.length;var backEnemyExist=!!findBackTile.length;if(frontEnemyValid&&!backEnemyExist){// success
var callBack=function callBack(){Ntry.dispatchEvent('destroyObstacle',1,function(state){});Ntry.dispatchEvent('startEnemyWalk',true,function(){script.isAction=false;});};Ntry.dispatchEvent('unitAction',Ntry.STATIC.PEPE,callBack);}else if(frontEnemyValid&&backEnemyExist){// attack and dead
var callBack=function callBack(){Ntry.dispatchEvent('destroyObstacle',1,function(state){});Ntry.dispatchEvent('startEnemyWalk',false,function(){});};Ntry.dispatchEvent('unitAction',Ntry.STATIC.PEPE,callBack);}else if(backEnemyExist){// dead
if(frontEnemyExist)Ntry.dispatchEvent('unitAction',Ntry.STATIC.YETI_FAIL,function(){script.isAction=false;});else Ntry.dispatchEvent('startEnemyWalk',false,function(){});}else{// music time
Ntry.dispatchEvent('unitAction',Ntry.STATIC.YETI_FAIL,function(){script.isAction=false;});}return Entry.STATIC.BREAK;}else if(script.isAction){return Entry.STATIC.BREAK;}else{delete script.isAction;delete script.isContinue;}}},maze_attack_mushroom:{skeleton:'basic',mode:'maze',color:'#ef6d6a',emphasizedColor:'#f29999',syntax:['Scope','both_side'],params:[{type:'Image',img:'/img/assets/week/blocks/mushroom.png',size:24},{type:'Image',img:'/img/assets/week/blocks/pinkbean_ic.png',size:24}],func:function func(sprite,script){if(!script.isContinue){var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var unitId;$.each(entities,function(id,entity){unitId=id;});var unitComp=Ntry.entityManager.getComponent(unitId,Ntry.STATIC.UNIT);var unitGrid=$.extend({},Ntry.entityManager.getComponent(unitId,Ntry.STATIC.GRID));var isCollisionPossible=Ntry.checkCollisionTile(unitGrid,unitComp.direction,[Ntry.STATIC.OBSTACLE_MUSHROOM],1);script.isContinue=true;script.isAction=true;if(!isCollisionPossible){Ntry.dispatchEvent('unitAction',Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT,function(){script.isAction=false;});// Ntry.dispatchEvent("unitAction", Ntry.STATIC.NOT_FOUND_MEAT, callBack);
return Entry.STATIC.BREAK;}var callBack=function callBack(){Ntry.dispatchEvent('destroyObstacle',1,function(state){script.isAction=false;});};Ntry.dispatchEvent('unitAction',Ntry.STATIC.ATTACK_MUSHROOM,callBack);return Entry.STATIC.BREAK;}else if(script.isAction){return Entry.STATIC.BREAK;}else{delete script.isAction;delete script.isContinue;}}},maze_attack_peti:{skeleton:'basic',mode:'maze',color:'#ef6d6a',emphasizedColor:'#f29999',syntax:['Scope','both_side'],params:[{type:'Image',img:'/img/assets/week/blocks/bigYeti.png',size:24},{type:'Image',img:'/img/assets/week/blocks/pinkbean_ic.png',size:24}],func:function func(sprite,script){if(!script.isContinue){Ntry.dispatchEvent('stopEnemyWalk');this.executor.register.isTurned=false;script.isContinue=true;script.isAction=true;var grid=$.extend({type:Ntry.STATIC.GRID},Ntry.entityManager.getComponent(Ntry.unit.id,Ntry.STATIC.GRID));var backGrid=$.extend({type:Ntry.STATIC.GRID},Ntry.entityManager.getComponent(Ntry.unit.id,Ntry.STATIC.GRID));Ntry.addVectorByDirection(grid,Ntry.unitComp.direction,1);var findTile=Ntry.entityManager.find(grid,{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.OBSTACLE_PETI});Ntry.addVectorByDirection(backGrid,Ntry.unitComp.direction,-1);var findBackTile=Ntry.entityManager.find(backGrid).filter(function(e){return e.components[Ntry.STATIC.ENEMY];});var frontEnemyExist=!!Ntry.entityManager.find(grid).filter(function(e){return e.components[Ntry.STATIC.ENEMY];}).length;var frontEnemyValid=!!findTile.length;var backEnemyExist=!!findBackTile.length;if(frontEnemyValid&&!backEnemyExist){// success
Ntry.dispatchEvent('destroyObstacle',1,function(state){});var callBack=function callBack(){Ntry.dispatchEvent('startEnemyWalk',true,function(){script.isAction=false;});};Ntry.dispatchEvent('unitAction',Ntry.STATIC.PETI,callBack);}else if(frontEnemyValid&&backEnemyExist){// attack and dead
Ntry.dispatchEvent('destroyObstacle',1,function(state){});var callBack=function callBack(){Ntry.dispatchEvent('startEnemyWalk',false,function(){});};Ntry.dispatchEvent('unitAction',Ntry.STATIC.PETI,callBack);}else if(backEnemyExist){// dead
if(frontEnemyExist)Ntry.dispatchEvent('unitAction',Ntry.STATIC.PETI_FAIL,function(){script.isAction=false;});else Ntry.dispatchEvent('startEnemyWalk',false,function(){});}else{// music time
Ntry.dispatchEvent('unitAction',Ntry.STATIC.PETI_FAIL,function(){script.isAction=false;});}return Entry.STATIC.BREAK;}else if(script.isAction){return Entry.STATIC.BREAK;}else{delete script.isAction;delete script.isContinue;}}},maze_eat_item:{skeleton:'basic',mode:'maze',color:'#b2521d',emphasizedColor:'#9BDB40',syntax:['Scope','item'],params:[{type:'Image',img:'/img/assets/week/blocks/eat.png',size:24}],func:function func(sprite,script){if(!script.isContinue){script.isContinue=true;script.isAction=true;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var unitId;$.each(entities,function(id,entity){unitId=id;});var callBack=function callBack(){script.isAction=false;};var unitComp=Ntry.entityManager.getComponent(unitId,Ntry.STATIC.UNIT);var unitGrid=$.extend({},Ntry.entityManager.getComponent(unitId,Ntry.STATIC.GRID));var meatEntity=Ntry.checkTileByGrid(unitGrid,Ntry.STATIC.MEAT);if(!meatEntity||meatEntity.components[Ntry.STATIC.ITEM].isEaten){Ntry.dispatchEvent('unitAction',Ntry.STATIC.NOT_FOUND_MEAT,callBack);return Entry.STATIC.BREAK;}Ntry.dispatchEvent('unlockItem');Ntry.dispatchEvent('unitAction',Ntry.STATIC.EAT,callBack);return Entry.STATIC.BREAK;}else if(script.isAction){return Entry.STATIC.BREAK;}else{delete script.isAction;delete script.isContinue;}}},maze_rotate_left:{skeleton:'basic',mode:'maze',color:'#A751E3',syntax:['Scope','left'],params:[{type:'Image',img:'/img/assets/week/blocks/turnL.png',size:24}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){self.isAction=false;};// turn direction
Ntry.dispatchEvent('unitAction',Ntry.STATIC.TURN_LEFT,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_rotate_right:{skeleton:'basic',mode:'maze',color:'#A751E3',syntax:['Scope','right'],params:[{type:'Image',img:'/img/assets/week/blocks/turnR.png',size:24}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var self=this;var callBack=function callBack(){self.isAction=false;};// turn direction
Ntry.dispatchEvent('unitAction',Ntry.STATIC.TURN_RIGHT,callBack);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_moon_kick:{skeleton:'basic',mode:'maze',color:'#2EB0E8',syntax:['Scope','right'],params:[{type:'Image',img:'/img/assets/maze/sprite/moon_icon.png',size:24}],func:function func(){// TODO: func 내용은 변경해야 함.
if(!this.isContinue){var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var unitId;$.each(entities,function(id,entity){unitId=id;});var unitComp=Ntry.entityManager.getComponent(unitId,Ntry.STATIC.UNIT);var unitGrid=$.extend({},Ntry.entityManager.getComponent(unitId,Ntry.STATIC.GRID));var isCollisionPossible=Ntry.checkCollisionTile(unitGrid,unitComp.direction,[Ntry.STATIC.OBSTACLE_BRICK],1);if(!isCollisionPossible){Ntry.dispatchEvent('playSound',Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);Ntry.dispatchEvent('complete',false,Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);return;}this.isContinue=true;this.isAction=true;var self=this;var callback=function callback(){Ntry.dispatchEvent('destroyObstacle',1,function(state){switch(state){case Ntry.STATIC.OBSTACLE_DESTROY_SUCCESS:self.isAction=false;break;}});};// turn direction
Ntry.dispatchEvent('unitAction',Ntry.STATIC.ATTACK,callback);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_cony_flower_throw:{skeleton:'basic',mode:'maze',color:'#D8617D',syntax:['Scope','right'],params:[{type:'Image',img:'/img/assets/maze/sprite/cony_icon.png',size:24}],func:function func(){var self=this;if(!this.isContinue){this.isContinue=true;this.isAction=true;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var unitId,components;$.each(entities,function(id,entity){unitId=id;components=entity.components;});var unitComp=Ntry.entityManager.getComponent(unitId,Ntry.STATIC.UNIT);var unitGrid=$.extend({},Ntry.entityManager.getComponent(unitId,Ntry.STATIC.GRID));var isCollisionPossible=Ntry.checkCollisionTile(unitGrid,unitComp.direction,[Ntry.STATIC.OBSTACLE_SPIDER]);var particleZIndex=550;if(unitComp.direction===Ntry.STATIC.NORTH){particleZIndex=450;}if(!isCollisionPossible){Ntry.dispatchEvent('playSound',Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);Ntry.dispatchEvent('complete',false,Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);return;}var particle=Ntry.entityManager.addEntity();Ntry.dispatchEvent('unitAction',Ntry.STATIC.ATTACK,function(){$.each(components,function(type,component){if(+type===Ntry.STATIC.SPRITE){var cloneComponent=$.extend({},component);cloneComponent.zIndex=particleZIndex;Ntry.entityManager.addComponent(particle.id,cloneComponent);}else if(+type!=Ntry.STATIC.UNIT){Ntry.entityManager.addComponent(particle.id,component);}else{Ntry.entityManager.addComponent(particle.id,{type:Ntry.STATIC.PARTICLE,direction:component.direction,collisionList:[Ntry.STATIC.OBSTACLE_SPIDER]});}});Ntry.dispatchEvent('particleAction',{entityId:particle.id,actionType:Ntry.STATIC.FLOWER_ATTACK,callback:function callback(){Ntry.entityManager.removeEntity(particle.id);self.isAction=false;}});});return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_cony_flower_throw2:{skeleton:'basic',mode:'maze',color:'#D8617D',template:Lang.template.maze_cony_flower_throw,syntax:['Scope','right'],params:[{type:'Image',img:'/img/assets/maze/sprite/cony_icon.png',size:24}],func:function func(){var self=this;if(!this.isContinue){var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var unitId,components;$.each(entities,function(id,entity){unitId=id;components=entity.components;});var unitComp=Ntry.entityManager.getComponent(unitId,Ntry.STATIC.UNIT);var unitGrid=$.extend({},Ntry.entityManager.getComponent(unitId,Ntry.STATIC.GRID));var isCollisionPossible=Ntry.checkCollisionTile(unitGrid,unitComp.direction,[Ntry.STATIC.OBSTACLE_ENERMY5,Ntry.STATIC.OBSTACLE_ENERMY4],2,true);var particleZIndex=550;if(unitComp.direction===Ntry.STATIC.NORTH){particleZIndex=450;}if(!isCollisionPossible){Ntry.dispatchEvent('playSound',Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);Ntry.dispatchEvent('complete',false,Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);return;}this.isContinue=true;this.isAction=true;var particle=Ntry.entityManager.addEntity();Ntry.dispatchEvent('unitAction',Ntry.STATIC.ATTACK,function(){$.each(components,function(type,component){if(+type===Ntry.STATIC.SPRITE){var cloneComponent=$.extend({},component);cloneComponent.zIndex=particleZIndex;Ntry.entityManager.addComponent(particle.id,cloneComponent);}else if(+type!=Ntry.STATIC.UNIT){Ntry.entityManager.addComponent(particle.id,component);}else{Ntry.entityManager.addComponent(particle.id,{type:Ntry.STATIC.PARTICLE,direction:component.direction,collisionList:[Ntry.STATIC.OBSTACLE_ENERMY5,,Ntry.STATIC.OBSTACLE_ENERMY4],penetrationList:[Ntry.STATIC.WALL]});}});Ntry.dispatchEvent('particleAction',{entityId:particle.id,actionType:Ntry.STATIC.HEART_ATTACK,callback:function callback(){Ntry.entityManager.removeEntity(particle.id);self.isAction=false;}});});return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_james_heart:{skeleton:'basic',mode:'maze',color:'#D39D18',syntax:['Scope','right'],params:[{type:'Image',img:'/img/assets/maze/sprite/james_icon.png',size:24}],func:function func(){var self=this;if(!this.isContinue){var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var unitId,components;$.each(entities,function(id,entity){unitId=id;components=entity.components;});var unitComp=Ntry.entityManager.getComponent(unitId,Ntry.STATIC.UNIT);var unitGrid=$.extend({},Ntry.entityManager.getComponent(unitId,Ntry.STATIC.GRID));var isCollisionPossible=Ntry.checkCollisionTile(unitGrid,unitComp.direction,[Ntry.STATIC.OBSTACLE_ENERMY1,Ntry.STATIC.OBSTACLE_ENERMY2,Ntry.STATIC.OBSTACLE_ENERMY3,Ntry.STATIC.OBSTACLE_ENERMY5]);var particleZIndex=550;if(unitComp.direction===Ntry.STATIC.NORTH){particleZIndex=450;}if(!isCollisionPossible){Ntry.dispatchEvent('playSound',Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);Ntry.dispatchEvent('complete',false,Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);return;}this.isContinue=true;this.isAction=true;var particle=Ntry.entityManager.addEntity();Ntry.dispatchEvent('unitAction',Ntry.STATIC.ATTACK,function(){$.each(components,function(type,component){if(+type===Ntry.STATIC.SPRITE){var cloneComponent=$.extend({},component);cloneComponent.zIndex=particleZIndex;Ntry.entityManager.addComponent(particle.id,cloneComponent);}else if(+type!=Ntry.STATIC.UNIT){Ntry.entityManager.addComponent(particle.id,component);}else{Ntry.entityManager.addComponent(particle.id,{type:Ntry.STATIC.PARTICLE,direction:component.direction,collisionList:[Ntry.STATIC.OBSTACLE_ENERMY1,Ntry.STATIC.OBSTACLE_ENERMY2,Ntry.STATIC.OBSTACLE_ENERMY3,Ntry.STATIC.OBSTACLE_ENERMY5]});}});Ntry.dispatchEvent('particleAction',{entityId:particle.id,actionType:Ntry.STATIC.HEART_ATTACK,callback:function callback(){Ntry.entityManager.removeEntity(particle.id);self.isAction=false;}});});return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_james_heart2:{skeleton:'basic',mode:'maze',color:'#D39D18',template:Lang.template.maze_james_heart,syntax:['Scope','right'],params:[{type:'Image',img:'/img/assets/maze/sprite/james_icon.png',size:24}],func:function func(){var self=this;if(!this.isContinue){var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var unitId,components;$.each(entities,function(id,entity){unitId=id;components=entity.components;});var unitComp=Ntry.entityManager.getComponent(unitId,Ntry.STATIC.UNIT);var unitGrid=$.extend({},Ntry.entityManager.getComponent(unitId,Ntry.STATIC.GRID));var isCollisionPossible=Ntry.checkCollisionTile(unitGrid,unitComp.direction,[Ntry.STATIC.OBSTACLE_ENERMY3,Ntry.STATIC.OBSTACLE_ENERMY4],2);var particleZIndex=550;if(unitComp.direction===Ntry.STATIC.NORTH){particleZIndex=450;}if(!isCollisionPossible){Ntry.dispatchEvent('playSound',Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);Ntry.dispatchEvent('complete',false,Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);return;}this.isContinue=true;this.isAction=true;var particle=Ntry.entityManager.addEntity();Ntry.dispatchEvent('unitAction',Ntry.STATIC.ATTACK,function(){$.each(components,function(type,component){if(+type===Ntry.STATIC.SPRITE){var cloneComponent=$.extend({},component);cloneComponent.zIndex=particleZIndex;Ntry.entityManager.addComponent(particle.id,cloneComponent);}else if(+type!=Ntry.STATIC.UNIT){Ntry.entityManager.addComponent(particle.id,component);}else{Ntry.entityManager.addComponent(particle.id,{type:Ntry.STATIC.PARTICLE,direction:component.direction,collisionList:[Ntry.STATIC.OBSTACLE_ENERMY3,Ntry.STATIC.OBSTACLE_ENERMY4,Ntry.STATIC.OBSTACLE_ENERMY_AREA],penetrationList:[Ntry.STATIC.OBSTACLE_ENERMY_AREA]});}});Ntry.dispatchEvent('particleAction',{entityId:particle.id,actionType:Ntry.STATIC.HEART_ATTACK,callback:function callback(){Ntry.entityManager.removeEntity(particle.id);self.isAction=false;}});});return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_iron_switch:{skeleton:'basic',mode:'maze',color:'#748d69',syntax:['Scope','right'],params:[{type:'Image',img:'/img/assets/maze/sprite/iron_icon.png',size:24}],func:function func(){if(!this.isContinue){this.isContinue=true;this.isAction=true;var eventCount=0;var self=this;var gridSize=Ntry.configManager.getConfig('gridSize');var tileSize=Ntry.configManager.getConfig('tileSize').width;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.OBSTACLE);for(var id in entities){var obstacleComp=Ntry.entityManager.getComponent(id,Ntry.STATIC.OBSTACLE);if(obstacleComp.tileType===Ntry.STATIC.OBSTACLE_IRON){var obstacleGrid=Ntry.entityManager.getComponent(id,Ntry.STATIC.GRID);var obstaclePosition=Ntry.entityManager.getComponent(id,Ntry.STATIC.POSITION);var grid={x:obstacleGrid.x,y:obstacleGrid.y===1?3:1};obstacleGrid.y=obstacleGrid.y===1?3:1;var deltaY=tileSize*2;if(obstacleGrid.y===1){deltaY=-deltaY;}var deltaPos={x:0,y:deltaY*0.5};var deltaPos2={x:0,y:deltaY};var targetPos={minY:0,maxY:gridSize.height*tileSize};if(deltaY>0){targetPos.maxY=obstacleGrid.y*tileSize+tileSize/2;}else{targetPos.minY=obstacleGrid.y*tileSize+tileSize/2;}(function(_id,_deltaPos,_deltaPos2,_targetPos,obstacleGrid){var comp=Ntry.entityManager.getComponent(_id,Ntry.STATIC.ANIMATE);if(comp){if(eventCount===0){self.isAction=false;}Ntry.entityManager.addComponent(_id,{type:Ntry.STATIC.ANIMATE,animateType:Ntry.STATIC.TRANSITION,duration:20,option:{deltaPos:_deltaPos2,targetPos:_targetPos},afterAnimate:function afterAnimate(){var unitGrid=Ntry.getUtilGrid();if(obstacleGrid.x==unitGrid.x&&obstacleGrid.y==unitGrid.y){Ntry.dispatchEvent('unitAction',Ntry.STATIC.CONTACT_IRON2);}}});}else{Ntry.entityManager.addComponent(_id,{type:Ntry.STATIC.ANIMATE,animateType:Ntry.STATIC.TRANSITION,duration:10,option:{deltaPos:_deltaPos},afterAnimate:function afterAnimate(){if(eventCount===0){self.isAction=false;}Ntry.entityManager.addComponent(_id,{type:Ntry.STATIC.ANIMATE,animateType:Ntry.STATIC.TRANSITION,duration:10,option:{deltaPos:_deltaPos,targetPos:_targetPos},afterAnimate:function afterAnimate(){var unitGrid=Ntry.getUtilGrid();if(obstacleGrid.x==unitGrid.x&&obstacleGrid.y==unitGrid.y){console.log('충돌');// Ntry.dispatchEvent("playSound", Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);
Ntry.dispatchEvent('unitAction',Ntry.STATIC.CONTACT_IRON2);// Ntry.dispatchEvent("complete", false, Ntry.STATIC.CONTACT_IRON2);
}}});}});}})(id,deltaPos,deltaPos2,targetPos,obstacleGrid);}}return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_brown_punch:{skeleton:'basic',mode:'maze',color:'#6C483A',syntax:['Scope','right'],params:[{type:'Image',img:'/img/assets/maze/sprite/brown_icon.png',size:24}],func:function func(){if(!this.isContinue){var self=this;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var unitId;$.each(entities,function(id,entity){unitId=id;});var unitComp=Ntry.entityManager.getComponent(unitId,Ntry.STATIC.UNIT);var unitGrid=$.extend({},Ntry.entityManager.getComponent(unitId,Ntry.STATIC.GRID));var isCollisionPossible=Ntry.checkCollisionTile(unitGrid,unitComp.direction,[Ntry.STATIC.OBSTACLE_ICE],1);if(!isCollisionPossible){Ntry.dispatchEvent('playSound',Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);Ntry.dispatchEvent('complete',false,Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);return;}this.isContinue=true;this.isAction=true;var callback=function callback(){Ntry.dispatchEvent('destroyObstacle',1,function(state){switch(state){case Ntry.STATIC.OBSTACLE_DESTROY_SUCCESS:self.isAction=false;break;}});};// turn direction
Ntry.dispatchEvent('unitAction',Ntry.STATIC.ATTACK,callback);return Entry.STATIC.BREAK;}else if(this.isAction){return Entry.STATIC.BREAK;}else{delete this.isAction;delete this.isContinue;}}},maze_repeat_until_3:{skeleton:'basic_loop',mode:'maze',color:'#498DEB',syntax:['BasicWhile','true'],params:[{type:'Image',img:'/img/assets/maze/bitmap/ws/tile_goal_01.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}],statements:[{accept:'basic'}],func:function func(){var isGoal=false;var statement=this.block.statements[0];if(statement.getBlocks().length===0){return;}var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);if(unitComp.isStartedUnit){var unitGrid=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var entities=Ntry.entityManager.getEntitiesByGrid(unitGrid.x,unitGrid.y);for(var idx in entities){var entity=entities[idx];var tile=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.TILE);var item=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.ITEM);if(tile&&item&&tile.tileType===Ntry.STATIC.GOAL&&Ntry.STATIC.GOAL_ITEM_LIST.indexOf(item.itemType)>-1){isGoal=true;break;}}}if(!isGoal){this.executor.stepInto(statement);return Entry.STATIC.BREAK;}// Ntry.dispatchEvent('executeEnd');
}},maze_repeat_until_4:{parent:'maze_repeat_until_3',params:[{type:'Image',img:'/img/assets/maze/bitmap/ws/tile_goal_02.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}]},maze_repeat_until_5:{parent:'maze_repeat_until_3',params:[{type:'Image',img:'/img/assets/maze/bitmap/ws/tile_goal_03.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}]},maze_repeat_until_6:{parent:'maze_repeat_until_3',params:[{type:'Image',img:'/img/assets/maze/bitmap/ws/blcok-1.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}]},maze_repeat_until_7:{parent:'maze_repeat_until_3',params:[{type:'Image',img:'/img/assets/maze/bitmap/ws/blcok-4.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}]},maze_repeat_until_8:{template:Lang.template.maze_repeat_until_7,parent:'maze_repeat_until_3',params:[{type:'Image',img:'/img/assets/maze/bitmap/ws/blcok-5.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}]},maze_repeat_until_9:{template:Lang.template.maze_repeat_until_7,parent:'maze_repeat_until_3',params:[{type:'Image',img:'/img/assets/maze/bitmap/ws/blcok-6.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}]},maze_repeat_until_10:{template:Lang.template.maze_repeat_until_7,parent:'maze_repeat_until_3',params:[{type:'Image',img:'/img/assets/maze/bitmap/ws/blcok-7.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}]},maze_repeat_until_11:{template:Lang.template.maze_repeat_until_7,parent:'maze_repeat_until_3',params:[{type:'Image',img:'/img/assets/maze/bitmap/ws/blcok-9.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}]},maze_repeat_until_12:{template:Lang.template.maze_repeat_until_7,parent:'maze_repeat_until_3',params:[{type:'Image',img:'/img/assets/maze/bitmap/ws/blcok-10.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}]},maze_repeat_until_13:{template:Lang.template.maze_repeat_until_7,parent:'maze_repeat_until_3',params:[{type:'Image',img:'/img/assets/maze/bitmap/ws/blcok-11.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}]},maze_repeat_until_14:{template:Lang.template.maze_repeat_until_7,parent:'maze_repeat_until_3',params:[{type:'Image',img:'/img/assets/maze/bitmap/ws/blcok-12.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}]},maze_repeat_until_15:{template:Lang.template.maze_repeat_until_7,parent:'maze_repeat_until_3',params:[{type:'Image',img:'/img/assets/maze/bitmap/ws/tile_goal_04.png',size:18},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}]},maze_repeat_until_goal:{parent:'maze_repeat_until_3',params:[{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}]},maze_radar_check:{skeleton:'basic_boolean_field',mode:'maze',color:'#AEB8FF',params:[{type:'Dropdown',options:[[Lang.Menus.maze_distance1,'1'],[Lang.Menus.maze_distance2,'2']],value:'1',fontSize:11},{type:'Dropdown',options:[[Lang.Menus.maze_object_trap,'TRAP'],[Lang.Menus.maze_object_monster,'MONSTER'],[Lang.Menus.maze_object_obstacle1,'OBSTACLE']],value:'TRAP',fontSize:11}],paramsKeyMap:{DISTANCE:0,TYPE:1},func:function func(sprite,script){var distance=script.getNumberField('DISTANCE',script);var type=script.getField('TYPE',script);var entityId=Ntry.getRadarEntityIdByDistance(distance);var tileType;if(entityId){var tileComp=Ntry.entityManager.getComponent(entityId,Ntry.STATIC.TILE);switch(tileComp.tileType){case Ntry.STATIC.OBSTACLE_HOLE:tileType='TRAP';break;case Ntry.STATIC.OBSTACLE_ENERMY1:case Ntry.STATIC.OBSTACLE_ENERMY2:case Ntry.STATIC.OBSTACLE_ENERMY3:case Ntry.STATIC.OBSTACLE_ENERMY4:case Ntry.STATIC.OBSTACLE_ENERMY5:tileType='MONSTER';break;case Ntry.STATIC.OBSTACLE_IRON:tileType='OBSTACLE';break;}}else{tileType='TRAP';}if(type===tileType){return true;}else{return false;}}},// TODO: 해당 부분 수정 필요
maze_step_if_5:{skeleton:'basic_loop',mode:'maze',color:'#498DEB',syntax:['BasicIf','front == bee'],params:[{type:'Image',img:'../../../img/assets/ntry/bitmap/maze2/obstacle_01.png',size:18},{type:'Image',img:'/img/assets/week/blocks/if.png',size:24}],statements:[{accept:'basic'}],func:function func(){if(this.isContinue)return;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};Ntry.addVectorByDirection(grid,unitComp.direction,1);var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.OBSTACLE_BEE});this.isContinue=true;var statement=this.block.statements[0];if(fitEntities.length===0){return;}else if(statement.getBlocks().length===0)return;else{this.executor.stepInto(statement);return Entry.STATIC.BREAK;}}},// TODO: 해당 부분 수정 필요
maze_step_if_6:{skeleton:'basic_loop',mode:'maze',color:'#498DEB',syntax:['BasicIf','front == bee'],params:[{type:'Image',img:'../../../img/assets/maze/bitmap/stage4/road_4_01.png',size:18},{type:'Image',img:'/img/assets/week/blocks/if.png',size:24}],statements:[{accept:'basic'}],func:function func(){if(this.isContinue)return;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};Ntry.addVectorByDirection(grid,unitComp.direction,1);var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.ROAD});this.isContinue=true;var statement=this.block.statements[0];if(fitEntities.length>0){return;}else if(statement.getBlocks().length===0){return;}else{this.executor.stepInto(statement);return Entry.STATIC.BREAK;}}},// TODO: 해당 부분 수정 필요
maze_step_if_7:{skeleton:'basic_loop',mode:'maze',color:'#498DEB',syntax:['BasicIf','front == ice'],params:[{type:'Image',img:'../../../img/assets/maze/bitmap/stage4/obj_ice_01.png',size:18},{type:'Image',img:'/img/assets/week/blocks/if.png',size:24}],statements:[{accept:'basic'}],func:function func(){if(this.isContinue)return;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};Ntry.addVectorByDirection(grid,unitComp.direction,1);var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.OBSTACLE_ICE});this.isContinue=true;var statement=this.block.statements[0];if(fitEntities.length===0){return;}else if(statement.getBlocks().length===0)return;else{this.executor.stepInto(statement);return Entry.STATIC.BREAK;}}},maze_step_if_8:{parent:'_if',class:'',syntax:{js:[],py:[]}},maze_step_if_mushroom:{skeleton:'basic_loop',mode:'maze',color:'#498DEB',syntax:['BasicIf','front == mushroom'],params:[{type:'Image',img:'/img/assets/week/blocks/mushroom.png',size:24},{type:'Image',img:'/img/assets/week/blocks/if.png',size:24}],statements:[{accept:'basic'}],func:function func(){if(this.isContinue)return;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};Ntry.addVectorByDirection(grid,unitComp.direction,1);var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.OBSTACLE_MUSHROOM});this.isContinue=true;var statement=this.block.statements[0];if(fitEntities.length===0){return;}else if(statement.getBlocks().length===0)return;else{this.executor.stepInto(statement);return Entry.STATIC.BREAK;}}},maze_step_if_lupin:{skeleton:'basic_loop',mode:'maze',color:'#498DEB',syntax:['BasicIf','front == lupin'],params:[{type:'Image',img:'/img/assets/week/blocks/lupin.png',size:24},{type:'Image',img:'/img/assets/week/blocks/if.png',size:24}],statements:[{accept:'basic'}],func:function func(){if(this.isContinue)return;var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};Ntry.addVectorByDirection(grid,unitComp.direction,2);var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.OBSTACLE_LUPIN});this.isContinue=true;var statement=this.block.statements[0];if(fitEntities.length===0){return;}else if(statement.getBlocks().length===0)return;else{this.executor.stepInto(statement);return Entry.STATIC.BREAK;}}},maze_step_if_else_road:{skeleton:'basic_double_loop',mode:'maze',color:'#498DEB',params:[{type:'Image',img:'/img/assets/week/blocks/if.png',size:24},{type:'LineBreak'}],statements:[{accept:'basic'},{accept:'basic'}],statementsKeyMap:{STACK_IF:0,STACK_ELSE:1},func:function func(sprite,script){if(script.isCondition){delete script.isCondition;return script.callReturn();}var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};Ntry.addVectorByDirection(grid,unitComp.direction,1);var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.ROAD});script.isCondition=true;if(fitEntities.length){return script.getStatement('STACK_IF',script);}else{return script.getStatement('STACK_ELSE',script);}}},maze_step_if_else_mushroom:{skeleton:'basic_double_loop',mode:'maze',color:'#498DEB',params:[{type:'Image',img:'/img/assets/week/blocks/mushroom.png',size:24},{type:'Image',img:'/img/assets/week/blocks/if.png',size:24},{type:'LineBreak'}],statements:[{accept:'basic'},{accept:'basic'}],statementsKeyMap:{STACK_IF:0,STACK_ELSE:1},func:function func(sprite,script){if(script.isCondition){delete script.isCondition;return script.callReturn();}var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};Ntry.addVectorByDirection(grid,unitComp.direction,1);var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.OBSTACLE_MUSHROOM});script.isCondition=true;if(fitEntities.length){return script.getStatement('STACK_IF',script);}else{return script.getStatement('STACK_ELSE',script);}}},maze_step_if_else_lupin:{skeleton:'basic_double_loop',mode:'maze',color:'#498DEB',params:[{type:'Image',img:'/img/assets/week/blocks/lupin.png',size:24},{type:'Image',img:'/img/assets/week/blocks/if.png',size:24},{type:'LineBreak'}],statements:[{accept:'basic'},{accept:'basic'}],statementsKeyMap:{STACK_IF:0,STACK_ELSE:1},func:function func(sprite,script){if(script.isCondition){delete script.isCondition;return script.callReturn();}var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};Ntry.addVectorByDirection(grid,unitComp.direction,2);var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.OBSTACLE_LUPIN});script.isCondition=true;if(fitEntities.length){return script.getStatement('STACK_IF',script);}else{return script.getStatement('STACK_ELSE',script);}}},maze_step_if_else_ladder:{skeleton:'basic_double_loop',mode:'maze',color:'#498DEB',params:[{type:'Image',img:'/img/assets/week/blocks/ic_ladder.png',size:24},{type:'Image',img:'/img/assets/week/blocks/if.png',size:24},{type:'LineBreak'}],statements:[{accept:'basic'},{accept:'basic'}],statementsKeyMap:{STACK_IF:0,STACK_ELSE:1},func:function func(sprite,script){if(script.isCondition){delete script.isCondition;return script.callReturn();}var entities=Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);var entity;for(var key in entities){entity=entities[key];}var unitComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.UNIT);var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);var grid={x:gridComp.x,y:gridComp.y};if(grid.y>3){grid.y=2;}Ntry.addVectorByDirection(grid,unitComp.direction,1);var fitEntities=Ntry.entityManager.find({type:Ntry.STATIC.GRID,x:grid.x,y:grid.y},{type:Ntry.STATIC.TILE,tileType:Ntry.STATIC.LADDER});script.isCondition=true;if(fitEntities.length){return script.getStatement('STACK_IF',script);}else{return script.getStatement('STACK_ELSE',script);}}},maze_step_if_else:{parent:'if_else',class:'',syntax:{js:[],py:[]}},test_wrapper:{skeleton:'basic',mode:'maze',color:'#3BBD70',params:[{type:'Block',accept:'basic_boolean_field',value:[{type:'test',params:[30,50]}]},{type:'Dropdown',options:[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]],value:1}]},basic_button:{skeleton:'basic_button',color:'#eee',params:[{type:'Text',text:'basic button',color:'#333',align:'center'}]},//endregion basic 기본
//region basic 기본
ebs_if:{parent:'_if',def:{type:'_if',params:[{type:'reach_something',params:[null,'wall']}]},syntax:{js:[],py:[]}},ebs_if2:{parent:'_if',def:{type:'_if',params:[{type:'reach_something',params:[null,'cwz5']}]},syntax:{js:[],py:[]}},ai_move_right:{skeleton:'basic',mode:'maze',color:'#A751E3',syntax:['Scope','move'],params:[{type:'Image',img:'/img/assets/week/blocks/moveStep.png',size:24}],func:function func(entity,script){if(!script.isStart){script.isStart=true;script.isAction=true;Ntry.dispatchEvent('gridChange',function(){script.isAction=false;});var spaceShipComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.SPACE_SHIP);spaceShipComp.direction=Ntry.STATIC.EAST;var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);Ntry.entityManager.addComponent(entity.id,{type:Ntry.STATIC.ANIMATE,animateType:Ntry.STATIC.ROTATE_TO,animateValue:0});gridComp.x++;return Entry.STATIC.BREAK;}else if(script.isAction){return Entry.STATIC.BREAK;}else{delete script.isAction;delete script.isStart;//Entry.engine.isContinue = false;
}}},ai_move_up:{skeleton:'basic',mode:'maze',color:'#A751E3',syntax:['Scope','up'],params:[{type:'Image',img:'/img/assets/week/blocks/ai_move_up.png',size:24}],func:function func(entity,script){if(!script.isStart){script.isStart=true;script.isAction=true;Ntry.dispatchEvent('gridChange',function(){script.isAction=false;});var spaceShipComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.SPACE_SHIP);spaceShipComp.direction=Ntry.STATIC.NORTH;var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);Ntry.entityManager.addComponent(entity.id,{type:Ntry.STATIC.ANIMATE,animateType:Ntry.STATIC.ROTATE_TO,animateValue:-45});gridComp.x++;gridComp.y--;return script;}else if(script.isAction){return script;}else{delete script.isAction;delete script.isStart;return script.callReturn();}}},ai_move_down:{skeleton:'basic',mode:'maze',color:'#A751E3',syntax:['Scope','down'],params:[{type:'Image',img:'/img/assets/week/blocks/ai_move_down.png',size:24}],func:function func(entity,script){if(!script.isStart){script.isStart=true;script.isAction=true;Ntry.dispatchEvent('gridChange',function(){script.isAction=false;});var spaceShipComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.SPACE_SHIP);spaceShipComp.direction=Ntry.STATIC.SOUTH;var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);Ntry.entityManager.addComponent(entity.id,{type:Ntry.STATIC.ANIMATE,animateType:Ntry.STATIC.ROTATE_TO,animateValue:45});gridComp.x++;gridComp.y++;return script;}else if(script.isAction){return script;}else{delete script.isAction;delete script.isStart;return script.callReturn();}}},ai_repeat_until_reach:{skeleton:'basic_loop',mode:'maze',color:'#498DEB',syntax:['BasicWhile','true'],statements:[{accept:'basic'}],params:[{type:'Image',img:'/img/assets/week/blocks/for.png',size:24}],func:function func(){var statement=this.block.statements[0];if(statement.getBlocks().length===0)return;return this.executor.stepInto(statement);}},ai_if_else_1:{skeleton:'basic_double_loop',mode:'maze',color:'#498DEB',syntax:['BasicIf',"front == 'stone'"],statements:[{accept:'basic'},{accept:'basic'}],params:[{type:'Image',img:'/img/assets/ntry/bitmap/ai/obstacle_1.png',size:24},{type:'Image',img:'/img/assets/week/blocks/for.png',size:24},{type:'LineBreak'}],func:function func(entity,script){if(script.isLooped){delete script.isLooped;return script.callReturn();}var radar=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.RADAR);var statements=this.block.statements;var index=1;script.isLooped=true;if(radar.center.type==Ntry.STATIC.AI_METEO&&radar.center.distance==1)index=0;this.executor.stepInto(statements[index]);return Entry.STATIC.BREAK;}},ai_boolean_distance:{skeleton:'basic_boolean_field',mode:'maze',color:'#2fc9f0',fontColor:'#fff',syntax:['Scope','radar_%1 %2 %3#'],params:[{type:'Dropdown',options:[[Lang.Menus.ai_above,'UP'],[Lang.Menus.ai_front,'RIGHT'],[Lang.Menus.ai_under,'DOWN']],value:'RIGHT',fontSize:11},{type:'Dropdown',options:[['>','BIGGER'],['>=','BIGGER_EQUAL'],['=','EQUAL'],['<','SMALLER'],['<=','SMALLER_EQUAL']],value:'BIGGER',fontSize:11},{type:'Block',accept:'string'}],func:function func(entity,script){var radar=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.RADAR);var params=this.block.params;var direction=params[0];var operator=params[1];var value=this.getParam(2);var radarValue;switch(direction){case'UP':radarValue=radar.left;break;case'RIGHT':radarValue=radar.center;break;case'DOWN':radarValue=radar.right;break;}if(radarValue.type==Ntry.STATIC.AI_GOAL)radarValue=Number.MAX_VALUE;else radarValue=radarValue.distance;switch(operator){case'BIGGER':return radarValue>value;case'BIGGER_EQUAL':return radarValue>=value;case'EQUAL':return radarValue==value;case'SMALLER':return radarValue<value;case'SMALLER_EQUAL':return radarValue<=value;}}},ai_distance_value:{skeleton:'basic_string_field',mode:'maze',color:'#ffd974',syntax:['Scope','radar_%1#'],params:[{type:'Dropdown',options:[[Lang.Menus.ai_above,'UP'],[Lang.Menus.ai_front,'RIGHT'],[Lang.Menus.ai_under,'DOWN']],value:'RIGHT',fontSize:11}],func:function func(entity,script){var radar=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.RADAR);var radarValue={};switch(this.block.params[0]){case'UP':radarValue=radar.left;break;case'RIGHT':radarValue=radar.center;break;case'DOWN':radarValue=radar.right;break;}return radarValue.type==Ntry.STATIC.AI_GOAL?Number.MAX_VALUE:radarValue.distance;}},ai_boolean_object:{skeleton:'basic_boolean_field',fontColor:'#fff',mode:'maze',color:'#2fc9f0',syntax:['Scope','object_%1 == %2#'],params:[{type:'Dropdown',options:[[Lang.Menus.ai_above,'UP'],[Lang.Menus.ai_front,'RIGHT'],[Lang.Menus.ai_under,'DOWN']],value:'RIGHT',fontSize:11,arrowColor:EntryStatic.ARROW_COLOR_HW},{type:'Dropdown',options:[[Lang.Menus.asteroids,'OBSTACLE'],[Lang.Menus.wall,'WALL'],[Lang.Menus.item,'ITEM']],value:'OBSTACLE',fontSize:11}],func:function func(entity,script){var radar=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.RADAR);var params=this.block.params;var radarValue;switch(params[0]){case'UP':radarValue=radar.left.type;break;case'RIGHT':radarValue=radar.center.type;break;case'DOWN':radarValue=radar.right.type;break;}switch(params[1]){case'OBSTACLE':return radarValue==Ntry.STATIC.AI_METEO;case'WALL':return radarValue==Ntry.STATIC.AI_WALL;case'ITEM':return radarValue==Ntry.STATIC.AI_ITEM;}}},ai_use_item:{skeleton:'basic',mode:'maze',color:'#EACF11',syntax:['Scope','use_item'],params:[{type:'Image',img:'/img/assets/week/blocks/item.png',size:24}],func:function func(entity,script){if(!script.isStart){Ntry.dispatchEvent('triggerWeapon');script.isStart=true;script.isAction=true;Ntry.dispatchEvent('gridChange',function(){script.isAction=false;});var spaceShipComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.SPACE_SHIP);spaceShipComp.direction=Ntry.STATIC.EAST;var gridComp=Ntry.entityManager.getComponent(entity.id,Ntry.STATIC.GRID);Ntry.entityManager.addComponent(entity.id,{type:Ntry.STATIC.ANIMATE,animateType:Ntry.STATIC.ROTATE_TO,animateValue:0});gridComp.x++;return script;}else if(script.isAction){return script;}else{delete script.isAction;delete script.isStart;//Entry.engine.isContinue = false;
return script.callReturn();}}},ai_boolean_and:{color:'#2fc9f0',skeleton:'basic_boolean_field',fontColor:'#fff',statements:[],syntax:['Scope','%1 && %3#'],params:[{type:'Block',accept:'boolean'},{type:'Text',text:Lang.Blocks.JUDGEMENT_boolean_and,color:'#fff'},{type:'Block',accept:'boolean'}],events:{},func:function func(){return this.getParam(0)&&this.getParam(2);}},ai_True:{color:'#2fc9f0',skeleton:'basic_boolean_field',statements:[],params:[{type:'Text',text:Lang.Blocks.JUDGEMENT_true,color:'#3D3D3D'}],events:{},def:{params:[null],type:'True'},func:function func(sprite,script){return true;},isPrimitive:true},ai_if_else:{color:'#498deb',skeleton:'basic_double_loop',statements:[{accept:'basic'},{accept:'basic'}],params:[{type:'Block',accept:'boolean'},{type:'Indicator',img:'block_icon/if.png',size:12},{type:'LineBreak'}],func:function func(sprite,script){if(script.isCondition){delete script.isCondition;return script.callReturn();}var value=this.getParam(0);script.isCondition=true;var statement=this.block.statements[value?0:1];//no blocks end execute
if(statement.getBlocks().length===0)return this.executor.end();else return this.executor.stepInto(statement);},syntax:['BasicIf','true']},//endregion basic 기본
//region basic 기본
hidden:{color:'#7C7C7C',skeleton:'basic',template:'         %1       %2',statements:[],params:[{type:'TextInput',value:'?',clearBG:true,color:'white'},{type:'Indicator',color:'#6B6B6B',size:12}],events:{},def:{params:[null],type:'hidden'},paramsKeyMap:{VALUE:0},class:'etc',isNotFor:[],func:function func(sprite,script){}},hidden_event:{color:'#7C7C7C',skeleton:'basic_event',template:'         %1       ',statements:[],params:[{type:'TextInput',value:'?',clearBG:true,color:'white'},{type:'Indicator',color:'#6B6B6B',size:12}],events:{},def:{params:[null],type:'hidden_event'},paramsKeyMap:{VALUE:0},class:'etc',isNotFor:[],func:function func(sprite,script){}},hidden_loop:{color:'#7C7C7C',skeleton:'basic_loop',statements:[{accept:'basic'}],params:[{type:'Image',img:'/img/assets/maze/icon/group.png',size:{width:47,height:20}},{type:'Indicator',color:'#6B6B6B',size:12}],events:{},def:{params:[null],type:'hidden_if'},class:'etc',isNotFor:[],func:function func(sprite,script){}},hidden_if_else:{color:'#7C7C7C',skeleton:'basic_double_loop',template:'         %1       %2%3',statements:[{accept:'basic'},{accept:'basic'}],params:[{type:'TextInput',value:'?',clearBG:true,color:'white'},{type:'Indicator',color:'#6B6B6B',size:12},{type:'LineBreak'}],events:{},def:{params:[null],type:'hidden_if'},class:'etc',isNotFor:[],func:function func(sprite,script){}},check_object_property:{color:'#7C7C7C',skeleton:'basic',template:'%1 가 %2 %3 %4 %5 %6',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'sprites',fontSize:11},{type:'Dropdown',options:[['언젠가',0],['지금',1]],value:'0',fontSize:11},{type:'Dropdown',options:[['x','x'],['y','y'],['크기','size'],['방향','rotation'],['이동 방향','direction'],['텍스트','text']],value:'x',fontSize:11},{type:'Dropdown',options:[['=','EQUAL'],['>','GREATER'],['<','LESS'],['≥','GREATER_OR_EQUAL'],['≤','LESS_OR_EQUAL']],value:'EQUAL',fontSize:11,noArrow:true},{type:'Block',accept:'string'},{type:'Indicator',color:'#6B6B6B',size:12}],events:{},def:{params:[null],type:'check_object_property'},paramsKeyMap:{VALUE:0},class:'checker',isNotFor:['checker'],func:function func(sprite,script){var obj=Entry.container.getObject(this.block.params[0]),flow=this.block.params[1],propertyKey=this.block.params[2],rightValue=this.getParam(4);propertyKey=propertyKey[0].toUpperCase()+propertyKey.substr(1);var leftValue=obj.entity['get'+propertyKey].call(obj.entity),returnVal;switch(this.block.params[3]){case'EQUAL':returnVal=leftValue==rightValue;break;case'GREATER':returnVal=Number(leftValue)>Number(rightValue);break;case'LESS':returnVal=Number(leftValue)<Number(rightValue);break;case'GREATER_OR_EQUAL':returnVal=Number(leftValue)>=Number(rightValue);break;case'LESS_OR_EQUAL':returnVal=Number(leftValue)<=Number(rightValue);break;}if(returnVal)return;else if(flow==0)return Entry.STATIC.BREAK;else this.die();}},check_lecture_goal:{color:'#7C7C7C',skeleton:'basic',template:'목표 %1 %2 ( %3 ) %4',statements:[],params:[{type:'TextInput',value:0},{type:'Dropdown',options:[['달성',1],['실패',0]],fontSize:11},{type:'Dropdown',options:[['공식',1],['비공식',0]],value:1,fontSize:11},{type:'Indicator',color:'#6B6B6B',size:12}],events:{dataAdd:[function(block){Entry.registerAchievement(block);}]},def:{params:[0,1,1],type:'check_lecture_goal'},paramsKeyMap:{VALUE:0},class:'checker',isNotFor:['checker'],func:function func(sprite,script){Entry.targetChecker.achieveCheck(this.block.params[1],this.block.params[0]+'');}},switch_scope:{color:'#7C7C7C',skeleton:'basic',template:'%1 오브젝트 기준으로 실행하기 %2',statements:[],params:[{type:'DropdownDynamic',value:null,menuName:'sprites',fontSize:11},{type:'Indicator',color:'#6B6B6B',size:12}],events:{},def:{params:[null],type:'switch_scope'},paramsKeyMap:{VALUE:0},class:'checker',isNotFor:['checker'],func:function func(sprite,script){var obj=Entry.container.getObject(this.block.params[0]);this.executor.entity=obj.entity;}},is_answer_submited:{color:'#7C7C7C',skeleton:'basic',template:'대답을 입력 받을때 까지 기다리기 %1',statements:[],params:[{type:'Indicator',color:'#6B6B6B',size:12}],events:{},def:{params:[null],type:'is_answer_submited'},paramsKeyMap:{VALUE:0},class:'checker',isNotFor:['checker'],func:function func(sprite,script){if(this.isSubmitted){Entry.removeEventListener('answerSubmitted',checkFunc);return;}else if(this.isSubmitted===false)return Entry.STATIC.BREAK;var checkFunc=function checkFunc(){that.isSubmitted=true;};this.isSubmitted=false;var that=this;Entry.addEventListener('answerSubmitted',checkFunc);return Entry.STATIC.BREAK;}},check_block_execution:{color:'#7C7C7C',skeleton:'basic_loop',template:'%1 에서 아래 블록이 %2 %3 번 실행되었는가 %4',statements:[{accept:'basic'}],params:[{type:'DropdownDynamic',value:null,menuName:'sprites',fontSize:11},{type:'Dropdown',options:[['비슷하게',0],['똑같이',1]],value:'16',fontSize:11},{type:'TextInput',value:1},{type:'Indicator',color:'#6B6B6B',size:12}],events:{},def:{params:[null,0],type:'check_block_execution'},paramsKeyMap:{VALUE:0},class:'checker',isNotFor:['checker'],func:function func(sprite,script){if(this.listener){if(this.remainCheck===0){this.listener.destroy();return;}else return Entry.STATIC.BREAK;}var code=Entry.container.getObject(this.block.params[0]).script,accuracy=this.block.params[1],statements=this.block.statements[0].getBlocks(),lastBlock=null;this.remainCheck=Number(this.block.params[2]);var index=0;this.listener=code.watchEvent.attach(this,function(blocks){//dangerous
blocks=blocks.concat();var block,isFirst=true;while(blocks.length&&index<statements.length){block=blocks.shift();if(isFirst&&block===lastBlock)continue;if(accuracy===0&&statements[index].type===block.type){index++;}else if(accuracy===1&&statements[index].isSameParamWith(block)){index++;}else{index=0;}isFirst=false;}lastBlock=block;if(index===statements.length){this.remainCheck=this.remainCheck-1;index=0;}});return Entry.STATIC.BREAK;}},check_variable_by_name:{color:'#7C7C7C',skeleton:'basic_string_field',template:'%1 이름의 변수',statements:[],params:[{type:'TextInput',value:'?'}],events:{},def:{params:['변수'],type:'check_variable_by_name'},paramsKeyMap:{VALUE:0},class:'checker',isNotFor:['checker'],func:function func(sprite,script){var variableName=this.block.params[0]+'';var variable=Entry.variableContainer.getVariableByName(variableName);if(variable)return variable.getValue();else return;}},show_prompt:{color:'#7C7C7C',skeleton:'basic',template:'%1 안내하기 %2',statements:[],params:[{type:'TextInput',value:''},{type:'Indicator',color:'#6B6B6B',size:12}],events:{},def:{params:[' '],type:'show_prompt'},paramsKeyMap:{VALUE:0},class:'checker',isNotFor:['checker'],func:function func(sprite,script){if(Entry.targetChecker)Entry.targetChecker.showStatusMessage(this.block.params[0]);}},check_goal_success:{color:'#7C7C7C',skeleton:'basic_boolean_field',template:'목표 %1 이 성공?',statements:[],params:[{type:'TextInput',value:''}],events:{},def:{params:['0'],type:'check_goal_success'},paramsKeyMap:{VALUE:0},class:'checker',isNotFor:['checker'],func:function func(sprite,script){var goalName=this.block.params[0]+'';return Entry.targetChecker.checkGoal(goalName);}},wildcard_string:{color:'#7C7C7C',skeleton:'basic_string_field',template:'    *    ',fontColor:'#fff',statements:[],params:[],events:{},def:{params:[],type:'wildcard_string'},paramsKeyMap:{VALUE:0},class:'checker',isNotFor:['checker'],func:function func(sprite,script){}},wildcard_boolean:{color:'#7C7C7C',skeleton:'basic_boolean_field',template:'    *    ',fontColor:'#fff',statements:[],params:[],events:{},def:{params:[],type:'wildcard_boolean'},paramsKeyMap:{},class:'checker',isNotFor:['checker'],func:function func(sprite,script){}},hidden_string:{color:'#7C7C7C',skeleton:'basic_string_field',template:'    %1    ',fontColor:'#fff',statements:[],params:[{type:'TextInput',value:'?',clearBG:true,color:'white'}],events:{},def:{params:[],type:'hidden_string'},paramsKeyMap:{VALUE:0},class:'etc',isNotFor:[],func:function func(sprite,script){}},hidden_boolean:{color:'#7C7C7C',skeleton:'basic_boolean_field',template:'    %1    ',fontColor:'#fff',statements:[],params:[{type:'TextInput',value:'?',clearBG:true,color:'white'}],events:{},def:{params:[],type:'hidden_boolean'},paramsKeyMap:{},class:'etc',isNotFor:[],func:function func(sprite,script){}},//endregion basic 기본
//region basic 기본
boolean_shell:{color:'#AEB8FF',skeleton:'basic_boolean_field',template:'%1',isPrimitive:true,params:[{type:'Text',text:'A',color:'#3D3D3D'}],func:function func(sprite,script){}},//endregion basic 기본
//region basic 기본
register_score:{color:'#7C7C7C',skeleton:'basic',template:'%1를 %2로 정하기 %3',statements:[],params:[{type:'TextInput',value:'score'},{type:'TextInput',value:'1'},{type:'Indicator',color:'#6B6B6B',size:12}],events:{},def:{params:['score',1],type:'register_score'},class:'checker',isNotFor:['checker'],func:function func(sprite,script){var obj={};obj[this.block.params[0]]=this.block.params[1];if(typeof entrylms!=='undefined')entrylms.emit('registerScore',obj);return script.callReturn();}}//endregion basic 기본
};Object.assign(Entry.block,block);(function(){// console.log('hw', Entry.HW, Entry.Arduino);
for(var id in Entry.HARDWARE_LIST){var hw=Entry.HARDWARE_LIST[id];if(!hw){continue;}if('setLanguage'in hw){var hwLang=hw.setLanguage();var data=hwLang[global.Lang.type];for(var _key in data){Object.assign(Lang[_key],data[_key]);}}if('getBlocks'in hw){var block=hw.getBlocks();Object.assign(Entry.block,block);}};for(var type in Entry.block){var block=Entry.block[type];if(!block.isNotFor)block.isNotFor=[];if(block.parent){var f=function f(){};f.prototype=Entry.block[block.parent];var schema=new f();schema.syntax=undefined;for(var key in block){schema[key]=block[key];}Entry.block[type]=schema;}}})();if(( false?undefined:_typeof(exports))=='object'){exports.block=Entry.block;}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./src/playground/block_entry_mini.js":
/*!********************************************!*\
  !*** ./src/playground/block_entry_mini.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
    var miniBlock = {
        practical_course_dummy: {
            color: '#7C7C7C',
            skeleton: 'basic',
            statements: [],
            isNotFor: ['arduinoDisconnected'],
            template: '%1',
            params: [{
                type: "Indicator",
                color: "#6B6B6B",
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: "practical_course_dummy"
            },
            paramsKeyMap: {
                VALUE: 0
            },
            func: function func(sprite, script) {}
        },
        practical_course_motor_speed: {
            color: '#00B200',
            skeleton: 'basic_string_field',
            statements: [],
            isNotFor: ['neobot'],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8'], ['9', '9'], ['10', '10'], ['11', '11'], ['12', '12'], ['13', '13'], ['14', '14'], ['15', '15']],
                value: '15',
                fontsIze: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                VALUE: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('VALUE');
            }
        },
        practical_course_set_servo2: {
            color: '#D126BD',
            skeleton: 'basic',
            statements: [],
            isNotFor: ['neobot'],
            template: '%1 포트의 서보모터를 %2 도 이동 %3',
            params: [{
                type: 'Dropdown',
                options: [['OUT1', '1'], ['OUT2', '2'], ['OUT3', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/servo.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'practical_course_set_servo2'
            },
            paramsKeyMap: {
                PORT: 0,
                'DEGREE': 1
            },
            class: 'practical_course_servo',
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT');
                var degree = script.getNumberValue('DEGREE');
                if (degree < 0) {
                    degree = 0;
                } else if (degree > 180) {
                    degree = 180;
                }
                Entry.hw.sendQueue['OUT' + port] = degree;
                var option = port;
                if (option === 3) {
                    option = 4;
                }
                Entry.hw.sendQueue['OPT'] = Entry.hw.sendQueue['OPT'] | option;
                return script.callReturn();
            }
        },
        practical_course_move_for_secs: {
            color: '#00B200',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['neobot'],
            template: '%1모터를 %2 %3의 속도로 %4초 동안 회전 %5',
            params: [{
                type: 'Dropdown',
                options: [['양쪽', '1'], ['오른쪽', '2'], ['왼쪽', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['앞으로', '16'], ['뒤로', '32']],
                value: '16',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/dcmotor.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'practical_course_motor_speed'
                }, {
                    type: 'number',
                    params: ['2']
                }, null],
                type: 'practical_course_move_for_secs'
            },
            paramsKeyMap: {
                'WHEEL': 0,
                'DIRECTION': 1,
                'SPEED': 2,
                DURATION: 3
            },
            class: 'practical_course_motor',
            func: function func(sprite, script) {
                if (!script.isStart) {
                    var wheel = script.getNumberField('WHEEL');
                    var speed = script.getNumberValue('SPEED');
                    var direction = script.getNumberField('DIRECTION');
                    var duration = script.getNumberValue('DURATION');
                    var value = speed + direction;
                    switch (wheel) {
                        case 1:
                            {
                                Entry.hw.sendQueue['DCL'] = value;
                                Entry.hw.sendQueue['DCR'] = value;
                                break;
                            }

                        case 2:
                            {
                                Entry.hw.sendQueue['DCR'] = value;
                                break;
                            }

                        case 3:
                            {
                                Entry.hw.sendQueue['DCL'] = value;
                                break;
                            }
                    }

                    script.wheelMode = wheel;
                    script.isStart = true;
                    script.timeFlag = 1;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, duration * 1000);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    switch (script.wheelMode) {
                        case 1:
                            {
                                Entry.hw.sendQueue['DCL'] = 0;
                                Entry.hw.sendQueue['DCR'] = 0;
                                break;
                            }

                        case 2:
                            {
                                Entry.hw.sendQueue['DCR'] = 0;
                                break;
                            }

                        case 3:
                            {
                                Entry.hw.sendQueue['DCL'] = 0;
                                break;
                            }
                    }
                    delete script.timeFlag;
                    delete script.isStart;
                    delete script.wheelMode;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            }
        },
        practical_course_move_for_secs2: {
            color: '#00B200',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['neobot'],
            template: '왼쪽 모터를 %1 %2의 속도로, 오른쪽 모터를 %3 %4의 속도로 %5초 동안 회전 %6',
            params: [{
                type: 'Dropdown',
                options: [['앞으로', '16'], ['뒤로', '32']],
                value: '16',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [['앞으로', '16'], ['뒤로', '32']],
                value: '16',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/dcmotor.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'practical_course_motor_speed'
                }, null, {
                    type: 'practical_course_motor_speed'
                }, {
                    type: 'number',
                    params: ['2']
                }, null],
                type: 'practical_course_move_for_secs2'
            },
            paramsKeyMap: {
                DIRECTION1: 0,
                SPEED1: 1,
                DIRECTION2: 2,
                SPEED2: 3,
                DURATION: 4
            },
            class: 'practical_course_motor',
            func: function func(sprite, script) {
                if (!script.isStart) {
                    // var wheel = script.getNumberField('WHEEL');
                    var speed1 = script.getNumberValue('SPEED1');
                    var speed2 = script.getNumberValue('SPEED2');
                    var direction1 = script.getNumberField('DIRECTION1');
                    var direction2 = script.getNumberField('DIRECTION2');
                    var duration = script.getNumberValue('DURATION');
                    var value1 = speed1 + direction1;
                    var value2 = speed2 + direction2;

                    Entry.hw.sendQueue['DCL'] = value1;
                    Entry.hw.sendQueue['DCR'] = value2;

                    script.isStart = true;
                    script.timeFlag = 1;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, duration * 1000);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    Entry.hw.sendQueue['DCL'] = 0;
                    Entry.hw.sendQueue['DCR'] = 0;

                    delete script.timeFlag;
                    delete script.isStart;
                    delete script.wheelMode;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            }
        },
        practical_course_move_for: {
            color: '#00B200',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['neobot'],
            template: '%1모터를 %2 %3의 속도로 계속 회전 %4',
            params: [{
                type: 'Dropdown',
                options: [['양쪽', '1'], ['오른쪽', '2'], ['왼쪽', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['앞으로', '16'], ['뒤로', '32']],
                value: '16',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/dcmotor.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'practical_course_motor_speed'
                }, null],
                type: 'practical_course_move_for'
            },
            paramsKeyMap: {
                'WHEEL': 0,
                'DIRECTION': 1,
                'SPEED': 2
            },
            class: 'practical_course_motor',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var wheel = script.getNumberField('WHEEL');
                var speed = script.getNumberValue('SPEED');
                var direction = script.getNumberField('DIRECTION');
                var value = speed + direction;

                switch (wheel) {
                    case 1:
                        {
                            Entry.hw.sendQueue['DCL'] = value;
                            Entry.hw.sendQueue['DCR'] = value;
                            break;
                        }

                    case 2:
                        {
                            Entry.hw.sendQueue['DCR'] = value;
                            break;
                        }

                    case 3:
                        {
                            Entry.hw.sendQueue['DCL'] = value;
                            break;
                        }
                }

                return script.callReturn();
            }
        },
        practical_course_move_for2: {
            color: '#00B200',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['neobot'],
            template: '왼쪽 모터를 %1 %2의 속도로, 오른쪽 모터를 %3 %4의 속도로 계속 회전 %5',
            params: [{
                type: 'Dropdown',
                options: [['앞으로', '16'], ['뒤로', '32']],
                value: '16',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [['앞으로', '16'], ['뒤로', '32']],
                value: '16',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/dcmotor.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'practical_course_motor_speed'
                }, null, {
                    type: 'practical_course_motor_speed'
                }, null],
                type: 'practical_course_move_for2'
            },
            paramsKeyMap: {
                'DIRECTION1': 0,
                'SPEED1': 1,
                'DIRECTION2': 2,
                'SPEED2': 3
            },
            class: 'practical_course_motor',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var speed1 = script.getNumberValue('SPEED1');
                var direction1 = script.getNumberField('DIRECTION1');
                var speed2 = script.getNumberValue('SPEED2');
                var direction2 = script.getNumberField('DIRECTION2');
                var value1 = speed1 + direction1;
                var value2 = speed2 + direction2;

                Entry.hw.sendQueue['DCL'] = value1;
                Entry.hw.sendQueue['DCR'] = value2;

                return script.callReturn();
            }
        },
        practical_course_stop_for: {
            color: '#00B200',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['neobot'],
            template: '%1모터를 정지 %2',
            params: [{
                type: 'Dropdown',
                options: [['양쪽', '1'], ['오른쪽', '2'], ['왼쪽', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/dcmotor.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'practical_course_stop_for'
            },
            paramsKeyMap: {
                'WHEEL': 0
            },
            class: 'practical_course_motor',
            func: function func(sprite, script) {
                var wheel = script.getNumberField('WHEEL');
                if (wheel == 2) {
                    Entry.hw.sendQueue['DCR'] = 0;
                } else if (wheel == 3) {
                    Entry.hw.sendQueue['DCL'] = 0;
                } else {
                    Entry.hw.sendQueue['DCR'] = 0;
                    Entry.hw.sendQueue['DCL'] = 0;
                }
                return script.callReturn();
            }
        },
        practical_course_touch_value: {
            color: '#2AB4D3',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['neobot'],
            template: '%1번 포트의 접촉 센서 값',
            params: [{
                type: 'Dropdown',
                options: [['IN 1', '1'], ['IN 2', '2'], ['IN 3', '3']],
                value: '1',
                fontsIze: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'practical_course_touch_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'practical_course_touch',
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                var value = Entry.hw.portData['IN' + port] > 125 ? 1 : 0;
                return value;
            }
        },
        practical_course_touch_value_boolean: {
            color: '#2AB4D3',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['neobot'],
            template: '%1번 포트의 접촉 센서가 %2',
            params: [{
                type: 'Dropdown',
                options: [['IN 1', '1'], ['IN 2', '2'], ['IN 3', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['접촉 되면', '1'], ['접촉 안되면', '0']],
                value: '1',
                fontsIze: 11
            }],
            def: {
                params: [null, null, null],
                type: 'practical_course_touch_value_boolean'
            },
            paramsKeyMap: {
                PORT: 0,
                'TOUCH': 1
            },
            class: 'practical_course_touch',
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                var touch = script.getNumberField('TOUCH', script);
                var value = Entry.hw.portData['IN' + port];
                var isTouch = !(value > 125 ^ touch);

                return isTouch;
            }
        },
        practical_course_light_value: {
            color: '#498DEB',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['neobot'],
            template: '%1번 포트의 빛 감지 센서 값',
            params: [{
                type: 'Dropdown',
                options: [['IN 1', '1'], ['IN 2', '2'], ['IN 3', '3']],
                value: '1',
                fontsIze: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'practical_course_light_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'practical_course_light',
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                return Entry.hw.portData['IN' + port];
            }
        },
        practical_course_light_value_boolean: {
            color: '#498DEB',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['neobot'],
            template: '%1번 포트의 빛 감지 센서 값 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['IN 1', '1'], ['IN 2', '2'], ['IN 3', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['=', 'EQUAL'], ['>', 'GREATER'], ['<', 'LESS'], ['≥', 'GREATER_OR_EQUAL'], ['≤', 'LESS_OR_EQUAL']],
                value: 'LESS',
                fontsIze: 11,
                noaRrow: true
            }, {
                type: 'Block',
                accept: 'string'
            }],
            def: {
                params: [null, null, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'practical_course_light_value_boolean'
            },
            paramsKeyMap: {
                PORT: 0,
                'OPERATOR': 1,
                'RIGHTVALUE': 2
            },
            class: 'practical_course_light',
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT', script);
                var operator = script.getField('OPERATOR', script);
                var rightValue = script.getNumberValue('RIGHTVALUE', script);
                var leftValue = Entry.hw.portData['IN' + port];
                var isCheck = false;

                switch (operator) {
                    case 'EQUAL':
                        isCheck = leftValue == rightValue;
                        break;
                    case 'GREATER':
                        isCheck = Number(leftValue) > Number(rightValue);
                        break;
                    case 'LESS':
                        isCheck = Number(leftValue) < Number(rightValue);
                        break;
                    case 'GREATER_OR_EQUAL':
                        isCheck = Number(leftValue) >= Number(rightValue);
                        break;
                    case 'LESS_OR_EQUAL':
                        isCheck = Number(leftValue) <= Number(rightValue);
                        break;
                }

                return isCheck;
            }
        },
        practical_course_sound_value: {
            color: '#00D67F',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['neobot'],
            template: '%1번 포트의 소리 센서에 감지되는 소리 값',
            params: [{
                type: 'Dropdown',
                options: [['IN 1', '1'], ['IN 2', '2'], ['IN 3', '3']],
                value: '1',
                fontsIze: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'practical_course_sound_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'practical_course_sound',
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                return Entry.hw.portData['IN' + port];
            }
        },
        practical_course_sound_value_boolean: {
            color: '#00D67F',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['neobot'],
            template: '%1번 포트의 소리 센서에 감지되는 소리 값 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['IN 1', '1'], ['IN 2', '2'], ['IN 3', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['=', 'EQUAL'], ['>', 'GREATER'], ['<', 'LESS'], ['≥', 'GREATER_OR_EQUAL'], ['≤', 'LESS_OR_EQUAL']],
                value: 'LESS',
                fontsIze: 11,
                noaRrow: true
            }, {
                type: 'Block',
                accept: 'string'
            }],
            def: {
                params: [null, null, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'practical_course_sound_value_boolean'
            },
            paramsKeyMap: {
                PORT: 0,
                'OPERATOR': 1,
                'RIGHTVALUE': 2
            },
            class: 'practical_course_sound',
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT', script);
                var operator = script.getField('OPERATOR', script);
                var rightValue = script.getNumberValue('RIGHTVALUE', script);
                var leftValue = Entry.hw.portData['IN' + port];
                var isCheck = false;

                switch (operator) {
                    case 'EQUAL':
                        isCheck = leftValue == rightValue;
                        break;
                    case 'GREATER':
                        isCheck = Number(leftValue) > Number(rightValue);
                        break;
                    case 'LESS':
                        isCheck = Number(leftValue) < Number(rightValue);
                        break;
                    case 'GREATER_OR_EQUAL':
                        isCheck = Number(leftValue) >= Number(rightValue);
                        break;
                    case 'LESS_OR_EQUAL':
                        isCheck = Number(leftValue) <= Number(rightValue);
                        break;
                }

                return isCheck;
            }
        },
        practical_course_irs_value: {
            color: '#C4065C',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['neobot'],
            template: '%1번 포트의 적외선 센서에 감지되는 크기 값',
            params: [{
                type: 'Dropdown',
                options: [['IN 1', '1'], ['IN 2', '2'], ['IN 3', '3']],
                value: '1',
                fontsIze: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'practical_course_irs_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'practical_course_irs',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                return Entry.hw.portData['IN' + port];
            }
        },
        practical_course_irs_value_boolean: {
            color: '#C4065C',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['neobot'],
            template: '%1번 포트의 적외선 센서에 감지되는 크기 값이 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['IN 1', '1'], ['IN 2', '2'], ['IN 3', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['=', 'EQUAL'], ['>', 'GREATER'], ['<', 'LESS'], ['≥', 'GREATER_OR_EQUAL'], ['≤', 'LESS_OR_EQUAL']],
                value: 'LESS',
                fontsIze: 11,
                noaRrow: true
            }, {
                type: 'Block',
                accept: 'string'
            }],
            def: {
                params: [null, null, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'practical_course_irs_value_boolean'
            },
            paramsKeyMap: {
                PORT: 0,
                'OPERATOR': 1,
                'RIGHTVALUE': 2
            },
            class: 'practical_course_irs',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT', script);
                var operator = script.getField('OPERATOR', script);
                var rightValue = script.getNumberValue('RIGHTVALUE', script);
                var leftValue = Entry.hw.portData['IN' + port];
                var isCheck = false;

                switch (operator) {
                    case 'EQUAL':
                        isCheck = leftValue == rightValue;
                        break;
                    case 'GREATER':
                        isCheck = Number(leftValue) > Number(rightValue);
                        break;
                    case 'LESS':
                        isCheck = Number(leftValue) < Number(rightValue);
                        break;
                    case 'GREATER_OR_EQUAL':
                        isCheck = Number(leftValue) >= Number(rightValue);
                        break;
                    case 'LESS_OR_EQUAL':
                        isCheck = Number(leftValue) <= Number(rightValue);
                        break;
                }

                return isCheck;
            }
        },
        practical_course_diode_secs_toggle: {
            color: '#FF8D10',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['neobot'],
            template: '%1번 포트의 발광다이오드를 %2초 동안 %3 %4',
            params: [{
                type: 'Dropdown',
                options: [['OUT 1', '1'], ['OUT 2', '2'], ['OUT 3', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [['켜기', '255'], ['끄기', '0']],
                value: '255',
                fontsIze: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/diode.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['2']
                }, null, null],
                type: 'practical_course_diode_secs_toggle'
            },
            paramsKeyMap: {
                PORT: 0,
                DURATION: 1,
                VALUE: 2
            },
            class: 'practical_course_diode',
            func: function func(sprite, script) {
                if (!script.isStart) {
                    var port = script.getNumberField('PORT');
                    var duration = script.getNumberValue('DURATION');
                    var value = script.getNumberField('VALUE');

                    var option = port;
                    if (value < 0) {
                        value = 0;
                    } else if (value > 255) {
                        value = 255;
                    }
                    if (option === 3) {
                        option = 4;
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    script.outPort = port;
                    script.outOption = option;
                    Entry.hw.sendQueue['OUT' + port] = value;
                    Entry.hw.sendQueue['OPT'] = Entry.hw.sendQueue['OPT'] & ~option;

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, duration * 1000);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    Entry.hw.sendQueue['OUT' + script.outPort] = 0;
                    Entry.hw.sendQueue['OPT'] = Entry.hw.sendQueue['OPT'] & ~script.outOption;
                    delete script.timeFlag;
                    delete script.isStart;
                    delete script.outPort;
                    delete script.outOption;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            }
        },
        practical_course_diode_toggle: {
            color: '#FF8D10',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['neobot'],
            template: '%1번 포트의 발광다이오드를 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['OUT 1', '1'], ['OUT 2', '2'], ['OUT 3', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['켜기', '255'], ['끄기', '0']],
                value: '255',
                fontsIze: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/diode.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'practical_course_diode_toggle'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'practical_course_diode',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT');
                var value = script.getNumberField('VALUE');
                var option = port;

                if (value < 0) {
                    value = 0;
                } else if (value > 255) {
                    value = 255;
                }

                if (option === 3) {
                    option = 4;
                }

                Entry.hw.sendQueue['OUT' + port] = value;
                Entry.hw.sendQueue['OPT'] = Entry.hw.sendQueue['OPT'] & ~option;

                return script.callReturn();
            }
        },
        practical_course_diode_inout_toggle: {
            color: '#FF8D10',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['neobot'],
            template: '%1번 포트의 발광다이오드를 %2번 포트의 %3~%4의 범위로 켜기%5',
            params: [{
                type: 'Dropdown',
                options: [['OUT 1', '1'], ['OUT 2', '2'], ['OUT 3', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['IN 1', '1'], ['IN 2', '2'], ['IN 3', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/diode.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, { type: 'number', params: ['0'] }, { type: 'number', params: ['255'] }, null],
                type: 'practical_course_diode_inout_toggle'
            },
            paramsKeyMap: {
                'OUTPUT': 0,
                'INPUT': 1,
                'MIN': 2,
                'MAX': 3
            },
            class: 'practical_course_diode',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var outputPort = script.getNumberField('OUTPUT');
                var inputPort = script.getNumberField('INPUT');
                var option = inputPort;
                if (option === 3) {
                    option = 4;
                }
                var oMin = script.getNumberValue('MIN');
                var oMax = script.getNumberValue('MAX');
                var nMin = 0;
                var nMax = 255;
                var x = Entry.hw.portData['IN' + inputPort];
                var percent = (x - oMin) / (oMax - oMin);
                var result = percent * (nMax - nMin) + nMin;
                if (result > nMax) result = nMax;
                if (result < nMin) result = nMin;

                Entry.hw.sendQueue['OUT' + outputPort] = result;
                Entry.hw.sendQueue['OPT'] = Entry.hw.sendQueue['OPT'] & ~option;

                return script.callReturn();
            }
        },
        practical_course_diode_set_output: {
            color: '#FF8D10',
            skeleton: 'basic',
            statements: [],
            isNotFor: ['neobot'],
            template: '%1번 포트의 발광다이오드를 %2의 밝기로 정하기 %3',
            params: [{
                type: 'Dropdown',
                options: [['OUT 1', '1'], ['OUT 2', '2'], ['OUT 3', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/diode.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['255']
                }, null],
                type: 'practical_course_diode_set_output'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'practical_course_diode',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT', script);
                var value = script.getNumberValue('VALUE', script);
                var option = port;
                if (value < 0) {
                    value = 0;
                } else if (value > 255) {
                    value = 255;
                }
                if (option === 3) {
                    option = 4;
                }
                Entry.hw.sendQueue['OUT' + port] = value;
                Entry.hw.sendQueue['OPT'] = Entry.hw.sendQueue['OPT'] & ~option;
                return script.callReturn();
            }
        },
        practical_course_diode_input_value: {
            color: '#FF8D10',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['neobot'],
            template: '%1번 포트의 값',
            params: [{
                type: 'Dropdown',
                options: [['IN 1', '1'], ['IN 2', '2'], ['IN 3', '3']],
                value: '1',
                fontsIze: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'practical_course_diode_input_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'practical_course_diode',
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                return Entry.hw.portData['IN' + port];
            }
        },
        practical_course_melody_note_for: {
            color: '#FC327F',
            skeleton: 'basic',
            statements: [],
            isNotFor: ['neobot'],
            template: '멜로디 %1 을(를) %2 옥타브로 %3 길이만큼 소리내기 %4',
            params: [{
                type: 'Dropdown',
                options: [['무음', '0'], ['도', '1'], ['도#(레♭)', '2'], ['레', '3'], ['레#(미♭)', '4'], ['미', '5'], ['파', '6'], ['파#(솔♭)', '7'], ['솔', '8'], ['솔#(라♭)', '9'], ['라', '10'], ['라#(시♭)', '11'], ['시', '12']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['1', '0'], ['2', '1'], ['3', '2'], ['4', '3'], ['5', '4'], ['6', '5']],
                value: '2',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['온음표', '1'], ['2분음표', '2'], ['4분음표', '4'], ['8분음표', '8'], ['16분음표', '16']],
                value: '4',
                fontsIze: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/melody.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null, null],
                type: 'practical_course_melody_note_for'
            },
            paramsKeyMap: {
                'NOTE': 0,
                'OCTAVE': 1,
                DURATION: 2
            },
            class: 'practical_course_melody',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;

                if (!script.isStart) {
                    var note = script.getNumberField('NOTE', script);
                    var octave = script.getNumberField('OCTAVE', script);
                    var duration = script.getNumberField('DURATION', script);
                    var value = note > 0 ? note + 12 * octave : 0;

                    script.isStart = true;
                    script.timeFlag = 1;
                    script.soundFlag = 1;
                    if (value > 65) {
                        value = 65;
                    }
                    sq.SND = value;
                    setTimeout(function () {
                        setTimeout(function () {
                            script.timeFlag = 0;
                        }, 50);
                    }, 1 / duration * 2000);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else if (script.soundFlag == 1) {
                    Entry.hw.sendQueue['SND'] = 0;
                    script.soundFlag = 0;
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            }
        },

        // roborobo_mini
        roborobo_motor_speed: {
            color: '#00B200',
            skeleton: 'basic_string_field',
            statements: [],
            isNotFor: ['roborobo_schoolkit'],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['1', '52'], ['2', '66'], ['3', '80'], ['4', '94'], ['5', '107'], ['6', '120'], ['7', '134'], ['8', '148'], ['9', '162'], ['10', '176'], ['11', '190'], ['12', '204'], ['13', '218'], ['14', '232'], ['15', '255']],
                value: '255',
                fontsIze: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                VALUE: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('VALUE');
            }
        },
        roborobo_move_for_secs: {
            color: '#00B200',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['roborobo_schoolkit'],
            template: '%1모터를 %2 %3의 속도로 %4초 동안 회전 %5',
            params: [{
                type: 'Dropdown',
                options: [['양쪽', '1'], ['오른쪽', '2'], ['왼쪽', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['앞으로', '1'], ['뒤로', '2']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/dcmotor.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'roborobo_motor_speed'
                }, {
                    type: 'number',
                    params: ['2']
                }, null],
                type: 'roborobo_move_for_secs'
            },
            paramsKeyMap: {
                'WHEEL': 0,
                'DIRECTION': 1,
                'SPEED': 2,
                DURATION: 3
            },
            class: 'roborobo_motor',
            func: function func(sprite, script) {
                var motor1 = 0;
                var motor2 = 1;
                var wheel = script.getNumberField('WHEEL');
                var speed = script.getNumberValue('SPEED');
                var direction = script.getNumberField('DIRECTION');
                var duration = script.getNumberValue('DURATION');

                if (!Entry.hw.sendQueue.digitalPinMode) {
                    Entry.hw.sendQueue.digitalPinMode = {};
                }

                if (!script.isStart) {
                    if (wheel == 1) {
                        Entry.hw.sendQueue.digitalPinMode[7] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                        Entry.hw.sendQueue.digitalPinMode[0] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                        Entry.hw.sendQueue.digitalPinMode[8] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                        Entry.hw.sendQueue.digitalPinMode[1] = Entry.Roborobo_SchoolKit.pinMode.PWM;

                        if (direction == 1) {
                            Entry.hw.sendQueue[motor1] = speed;
                            Entry.hw.sendQueue[motor2] = speed;
                        } else if (direction == 2) {
                            Entry.hw.sendQueue[motor1] = -speed;
                            Entry.hw.sendQueue[motor2] = -speed;
                        }
                    } else if (wheel == 2) {
                        Entry.hw.sendQueue.digitalPinMode[8] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                        Entry.hw.sendQueue.digitalPinMode[1] = Entry.Roborobo_SchoolKit.pinMode.PWM;

                        if (direction == 1) {
                            Entry.hw.sendQueue[motor1] = 0x00;
                            Entry.hw.sendQueue[motor2] = speed;
                        } else if (direction == 2) {
                            Entry.hw.sendQueue[motor1] = 0x00;
                            Entry.hw.sendQueue[motor2] = -speed;
                        }
                    } else if (wheel == 3) {
                        Entry.hw.sendQueue.digitalPinMode[7] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                        Entry.hw.sendQueue.digitalPinMode[0] = Entry.Roborobo_SchoolKit.pinMode.PWM;

                        if (direction == 1) {
                            Entry.hw.sendQueue[motor1] = speed;
                            Entry.hw.sendQueue[motor2] = 0x00;
                        } else if (direction == 2) {
                            Entry.hw.sendQueue[motor1] = -speed;
                            Entry.hw.sendQueue[motor2] = 0x00;
                        }
                    }

                    script.wheelMode = wheel;
                    script.isStart = true;
                    script.timeFlag = 1;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, duration * 1000);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    Entry.hw.sendQueue[motor1] = 0x00;
                    Entry.hw.sendQueue[motor2] = 0x00;

                    delete script.timeFlag;
                    delete script.isStart;
                    delete script.wheelMode;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            }
        },
        roborobo_move_for: {
            color: '#00B200',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['roborobo_schoolkit'],
            template: '%1모터를 %2 %3의 속도로 계속 회전 %4',
            params: [{
                type: 'Dropdown',
                options: [['양쪽', '1'], ['오른쪽', '2'], ['왼쪽', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['앞으로', '1'], ['뒤로', '2']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/dcmotor.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'roborobo_motor_speed'
                }, null],
                type: 'roborobo_move_for'
            },
            paramsKeyMap: {
                'WHEEL': 0,
                'DIRECTION': 1,
                'SPEED': 2
            },
            class: 'roborobo_motor',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var motor1 = 0;
                var motor2 = 1;
                var wheel = script.getNumberField('WHEEL');
                var speed = script.getNumberValue('SPEED');
                var direction = script.getNumberField('DIRECTION');

                if (!Entry.hw.sendQueue.digitalPinMode) {
                    Entry.hw.sendQueue.digitalPinMode = {};
                }

                if (wheel == 1) {
                    Entry.hw.sendQueue.digitalPinMode[7] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                    Entry.hw.sendQueue.digitalPinMode[0] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                    Entry.hw.sendQueue.digitalPinMode[8] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                    Entry.hw.sendQueue.digitalPinMode[1] = Entry.Roborobo_SchoolKit.pinMode.PWM;

                    if (direction == 1) {
                        Entry.hw.sendQueue[motor1] = speed;
                        Entry.hw.sendQueue[motor2] = speed;
                    } else if (direction == 2) {
                        Entry.hw.sendQueue[motor1] = -speed;
                        Entry.hw.sendQueue[motor2] = -speed;
                    }
                } else if (wheel == 2) {
                    Entry.hw.sendQueue.digitalPinMode[8] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                    Entry.hw.sendQueue.digitalPinMode[1] = Entry.Roborobo_SchoolKit.pinMode.PWM;

                    if (direction == 1) {
                        Entry.hw.sendQueue[motor1] = 0x00;
                        Entry.hw.sendQueue[motor2] = speed;
                    } else if (direction == 2) {
                        Entry.hw.sendQueue[motor1] = 0x00;
                        Entry.hw.sendQueue[motor2] = -speed;
                    }
                } else if (wheel == 3) {
                    Entry.hw.sendQueue.digitalPinMode[7] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                    Entry.hw.sendQueue.digitalPinMode[0] = Entry.Roborobo_SchoolKit.pinMode.PWM;

                    if (direction == 1) {
                        Entry.hw.sendQueue[motor1] = speed;
                        Entry.hw.sendQueue[motor2] = 0x00;
                    } else if (direction == 2) {
                        Entry.hw.sendQueue[motor1] = -speed;
                        //Entry.hw.sendQueue[motor2] = 0x00;
                    }
                }

                return script.callReturn();
            }
        },
        roborobo_turn_for: {
            color: '#00B200',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['roborobo_schoolkit'],
            template: '오른쪽 모터를 %1 %2, 왼쪽 모터를 %3 %4의 속도로 계속 회전 %5',
            params: [{
                type: 'Dropdown',
                options: [['앞으로', '1'], ['뒤로', '2']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [['앞으로', '1'], ['뒤로', '2']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/dcmotor.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, { type: 'roborobo_motor_speed' }, null, { type: 'roborobo_motor_speed' }, null],
                type: 'roborobo_turn_for'
            },
            paramsKeyMap: {
                'RDIR': 0,
                'RSPEED': 1,
                'LDIR': 2,
                'LSPEED': 3
            },
            class: 'roborobo_motor',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var motor1 = 0;
                var motor2 = 1;

                var rightDir = script.getNumberField('RDIR');
                var rightSpeed = script.getNumberValue('RSPEED');
                var leftDir = script.getNumberField('LDIR');
                var leftSpeed = script.getNumberValue('LSPEED');

                if (!Entry.hw.sendQueue.digitalPinMode) {
                    Entry.hw.sendQueue.digitalPinMode = {};
                }

                Entry.hw.sendQueue.digitalPinMode[7] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                Entry.hw.sendQueue.digitalPinMode[0] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                Entry.hw.sendQueue.digitalPinMode[8] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                Entry.hw.sendQueue.digitalPinMode[1] = Entry.Roborobo_SchoolKit.pinMode.PWM;

                if (leftDir == 1) {
                    Entry.hw.sendQueue[motor1] = leftSpeed;
                } else {
                    Entry.hw.sendQueue[motor1] = -leftSpeed;
                }

                if (rightDir == 1) {
                    Entry.hw.sendQueue[motor2] = rightSpeed;
                } else {
                    Entry.hw.sendQueue[motor2] = -rightSpeed;
                }

                return script.callReturn();
            }
        },
        roborobo_stop_for: {
            color: '#00B200',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['roborobo_schoolkit'],
            template: '%1모터를 정지 %2',
            params: [{
                type: 'Dropdown',
                options: [['양쪽', '1'], ['오른쪽', '2'], ['왼쪽', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/dcmotor.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'roborobo_stop_for'
            },
            paramsKeyMap: {
                'WHEEL': 0
            },
            class: 'roborobo_motor',
            func: function func(sprite, script) {
                var motor1 = 0;
                var motor2 = 1;
                var wheel = script.getNumberField('WHEEL');

                if (!Entry.hw.sendQueue.digitalPinMode) {
                    Entry.hw.sendQueue.digitalPinMode = {};
                }

                if (wheel == 1) {
                    Entry.hw.sendQueue.digitalPinMode[7] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                    Entry.hw.sendQueue.digitalPinMode[0] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                    Entry.hw.sendQueue.digitalPinMode[8] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                    Entry.hw.sendQueue.digitalPinMode[1] = Entry.Roborobo_SchoolKit.pinMode.PWM;

                    Entry.hw.sendQueue[motor1] = 0x00;
                    Entry.hw.sendQueue[motor2] = 0x00;
                } else if (wheel == 2) {
                    Entry.hw.sendQueue.digitalPinMode[8] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                    Entry.hw.sendQueue.digitalPinMode[1] = Entry.Roborobo_SchoolKit.pinMode.PWM;

                    Entry.hw.sendQueue[motor2] = 0x00;
                } else if (wheel == 3) {
                    Entry.hw.sendQueue.digitalPinMode[7] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                    Entry.hw.sendQueue.digitalPinMode[0] = Entry.Roborobo_SchoolKit.pinMode.PWM;

                    Entry.hw.sendQueue[motor1] = 0x00;
                }

                return script.callReturn();
            }
        },
        roborobo_touch_value: {
            color: '#2AB4D3',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['roborobo_schoolkit'],
            template: '접촉 센서 값',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [null],
                type: 'roborobo_touch_value'
            },
            paramsKeyMap: {},
            class: 'roborobo_touch',
            func: function func(sprite, script) {
                var port = Entry.Roborobo_SchoolKit.inputPort.contact;
                Entry.hw.sendQueue.digitalPinMode[port] = Entry.Roborobo_SchoolKit.pinMode.INPUT;
                Entry.hw.update();
                return Entry.hw.portData[port - 7];
            }
        },
        roborobo_touch_value_boolean: {
            color: '#2AB4D3',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['roborobo_schoolkit'],
            template: '접촉 센서가 %1',
            params: [{
                type: 'Dropdown',
                options: [['접촉 되면', '1'], ['접촉 안되면', '0']],
                value: '1',
                fontsIze: 11
            }],
            def: {
                params: [null],
                type: 'roborobo_touch_value_boolean'
            },
            paramsKeyMap: {
                'TOUCH': 0
            },
            class: 'roborobo_touch',
            func: function func(sprite, script) {
                var port = Entry.Roborobo_SchoolKit.inputPort.contact;
                var touch = script.getNumberField('TOUCH', script);

                Entry.hw.sendQueue.digitalPinMode[port] = Entry.Roborobo_SchoolKit.pinMode.INPUT;
                Entry.hw.update();

                var value = Entry.hw.portData[port - 7];
                var isTouch = touch == value ? true : false;

                return isTouch;
            }
        },
        roborobo_light_value: {
            color: '#498DEB',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['roborobo_schoolkit'],
            template: 'CDS 센서 값',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [null],
                type: 'roborobo_light_value'
            },
            paramsKeyMap: {},
            class: 'roborobo_light',
            func: function func(sprite, script) {
                var port = Entry.Roborobo_SchoolKit.inputPort.cds;
                return Entry.hw.portData[port - 7];
            }
        },
        roborobo_light_value_boolean: {
            color: '#498DEB',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['roborobo_schoolkit'],
            template: 'CDS 센서 값 %1 %2',
            params: [{
                type: 'Dropdown',
                options: [['=', 'EQUAL'], ['>', 'GREATER'], ['<', 'LESS'], ['≥', 'GREATER_OR_EQUAL'], ['≤', 'LESS_OR_EQUAL']],
                value: 'LESS',
                fontsIze: 11,
                noaRrow: true
            }, {
                type: 'Block',
                accept: 'string'
            }],
            def: {
                params: [null, {
                    type: 'number',
                    params: ['512']
                }],
                type: 'roborobo_light_value_boolean'
            },
            paramsKeyMap: {
                'OPERATOR': 0,
                'RIGHTVALUE': 1
            },
            class: 'roborobo_light',
            func: function func(sprite, script) {
                var port = Entry.Roborobo_SchoolKit.inputPort.cds;
                var operator = script.getField('OPERATOR', script);
                var rightValue = script.getNumberValue('RIGHTVALUE', script);
                var leftValue = Entry.hw.portData[port - 7];
                var isCheck = false;

                if (rightValue < 0) {
                    rightValue = 0;
                } else if (rightValue > 1023) {
                    rightValue = 1023;
                }
                switch (operator) {
                    case 'EQUAL':
                        isCheck = leftValue == rightValue;
                        break;
                    case 'GREATER':
                        isCheck = Number(leftValue) > Number(rightValue);
                        break;
                    case 'LESS':
                        isCheck = Number(leftValue) < Number(rightValue);
                        break;
                    case 'GREATER_OR_EQUAL':
                        isCheck = Number(leftValue) >= Number(rightValue);
                        break;
                    case 'LESS_OR_EQUAL':
                        isCheck = Number(leftValue) <= Number(rightValue);
                        break;
                }
                return isCheck;
            }
        },
        roborobo_sound_value: {
            color: '#00D67F',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['roborobo_schoolkit'],
            template: '소리 센서에 감지되는 소리 값',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [null],
                type: 'roborobo_sound_value'
            },
            paramsKeyMap: {},
            class: 'roborobo_sound',
            func: function func(sprite, script) {
                var port = Entry.Roborobo_SchoolKit.inputPort.sound;
                return Entry.hw.portData[port - 7];
            }
        },
        roborobo_sound_value_boolean: {
            color: '#00D67F',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['roborobo_schoolkit'],
            template: '소리 센서에 감지되는 소리 값 %1 %2',
            params: [{
                type: 'Dropdown',
                options: [['=', 'EQUAL'], ['>', 'GREATER'], ['<', 'LESS'], ['≥', 'GREATER_OR_EQUAL'], ['≤', 'LESS_OR_EQUAL']],
                value: 'LESS',
                fontsIze: 11,
                noaRrow: true
            }, {
                type: 'Block',
                accept: 'string'
            }],
            def: {
                params: [null, {
                    type: 'number',
                    params: ['512']
                }],
                type: 'roborobo_sound_value_boolean'
            },
            paramsKeyMap: {
                'OPERATOR': 0,
                'RIGHTVALUE': 1
            },
            class: 'roborobo_sound',
            func: function func(sprite, script) {
                var port = Entry.Roborobo_SchoolKit.inputPort.sound;
                var operator = script.getField('OPERATOR', script);
                var rightValue = script.getNumberValue('RIGHTVALUE', script);
                var leftValue = Entry.hw.portData[port - 7];
                var isCheck = false;

                if (rightValue < 0) {
                    rightValue = 0;
                } else if (rightValue > 1023) {
                    rightValue = 1023;
                }

                switch (operator) {
                    case 'EQUAL':
                        isCheck = leftValue == rightValue;
                        break;
                    case 'GREATER':
                        isCheck = Number(leftValue) > Number(rightValue);
                        break;
                    case 'LESS':
                        isCheck = Number(leftValue) < Number(rightValue);
                        break;
                    case 'GREATER_OR_EQUAL':
                        isCheck = Number(leftValue) >= Number(rightValue);
                        break;
                    case 'LESS_OR_EQUAL':
                        isCheck = Number(leftValue) <= Number(rightValue);
                        break;
                }

                return isCheck;
            }
        },
        roborobo_irs_value: {
            color: '#C4065C',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['roborobo_schoolkit'],
            template: '적외선 센서 값',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [null],
                type: 'roborobo_irs_value'
            },
            paramsKeyMap: {},
            class: 'roborobo_irs',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var port = Entry.Roborobo_SchoolKit.inputPort.ir;
                var value = Entry.hw.portData[port - 7] == undefined ? 0 : Entry.hw.portData[port - 7];
                return value;
            }
        },
        roborobo_irs_value_boolean: {
            color: '#C4065C',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['roborobo_schoolkit'],
            template: '적외선 센서가 %1',
            params: [{
                type: 'Dropdown',
                options: [['감지 되면', '1'], ['감지 안되면', '0']],
                value: '1',
                fontsIze: 11
            }],
            def: {
                params: [null],
                type: 'roborobo_irs_value_boolean'
            },
            paramsKeyMap: {
                'DETECT': 0
            },
            class: 'roborobo_irs',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var port = Entry.Roborobo_SchoolKit.inputPort.ir;
                var detect = script.getNumberField('DETECT', script);

                Entry.hw.sendQueue.digitalPinMode[port] = Entry.Roborobo_SchoolKit.pinMode.INPUT;
                Entry.hw.update();

                var value = Entry.hw.portData[port - 7];
                var isDetect = detect == value ? true : false;

                return isDetect;
            }
        },
        roborobo_diode_secs_toggle: {
            color: '#FF8D10',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['roborobo_schoolkit'],
            template: '%1번 포트의 발광다이오드를 %2초 동안 %3 %4',
            params: [{
                type: 'Dropdown',
                options: [['LED 1', '5'], ['LED 2', '4'], ['R - A', '3'], ['R - B', '2']],
                value: '5',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [['켜기', '255'], ['끄기', '0']],
                value: '255',
                fontsIze: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/diode.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['2']
                }, null, null],
                type: 'roborobo_diode_secs_toggle'
            },
            paramsKeyMap: {
                PORT: 0,
                DURATION: 1,
                VALUE: 2
            },
            class: 'roborobo_diode',
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT');
                var duration = script.getNumberValue('DURATION');
                var value = script.getNumberField('VALUE');
                if (!Entry.hw.sendQueue.digitalPinMode) {
                    Entry.hw.sendQueue.digitalPinMode = {};
                }
                Entry.hw.sendQueue.digitalPinMode[port] = Entry.Roborobo_SchoolKit.pinMode.PWM;

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    Entry.hw.sendQueue[port] = value;

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, duration * 1000);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    Entry.hw.sendQueue[port] = 0;
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            }
        },
        roborobo_diode_toggle: {
            color: '#FF8D10',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['roborobo_schoolkit'],
            template: '%1번 포트의 발광다이오드를 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['LED 1', '5'], ['LED 2', '4'], ['R - A', '3'], ['R - B', '2']],
                value: '5',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['켜기', '255'], ['끄기', '0']],
                value: '255',
                fontsIze: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/diode.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'roborobo_diode_toggle'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'roborobo_diode',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT');
                var value = script.getNumberField('VALUE');

                if (!Entry.hw.sendQueue.digitalPinMode) {
                    Entry.hw.sendQueue.digitalPinMode = {};
                }

                Entry.hw.sendQueue.digitalPinMode[port] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                Entry.hw.sendQueue[port] = value;

                return script.callReturn();
            }
        },
        roborobo_diode_inout_toggle: {
            color: '#FF8D10',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['roborobo_schoolkit'],
            template: '%1번 포트의 발광다이오드를 %2번 포트의 %3~%4의 범위로 켜기%5',
            params: [{
                type: 'Dropdown',
                options: [['LED 1', '5'], ['LED 2', '4'], ['R - A', '3'], ['R - B', '2']],
                value: '5',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['소 리', '8'], ['CDS', '10']],
                value: '8',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/diode.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, { type: 'number', params: ['0'] }, { type: 'number', params: ['255'] }, null],
                type: 'roborobo_diode_inout_toggle'
            },
            paramsKeyMap: {
                'OUTPUT': 0,
                'INPUT': 1,
                'MIN': 2,
                'MAX': 3
            },
            class: 'roborobo_diode',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var outputPort = script.getNumberField('OUTPUT');
                var inputPort = script.getNumberField('INPUT');

                var oMin = script.getNumberValue('MIN');
                var oMax = script.getNumberValue('MAX');
                var nMin = 0;
                var nMax = 255;
                var x = Entry.hw.portData[inputPort - 7] / 4;
                var percent = (x - oMin) / (oMax - oMin);
                var result = percent * (nMax - nMin) + nMin;
                if (result > nMax) result = nMax;
                if (result < nMin) result = nMin;

                if (!Entry.hw.sendQueue.digitalPinMode) {
                    Entry.hw.sendQueue.digitalPinMode = {};
                }

                Entry.hw.sendQueue.digitalPinMode[outputPort] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                Entry.hw.sendQueue[outputPort] = result;

                return script.callReturn();
            }
        },
        roborobo_diode_set_output: {
            color: '#FF8D10',
            skeleton: 'basic',
            statements: [],
            isNotFor: ['roborobo_schoolkit'],
            template: '%1번 포트의 발광다이오드를 %2의 밝기로 켜기 %3',
            params: [{
                type: 'Dropdown',
                options: [['LED 1', '5'], ['LED 2', '4'], ['R - A', '3'], ['R - B', '2']],
                value: '5',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/diode.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['255']
                }, null],
                type: 'roborobo_diode_set_output'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'roborobo_diode',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT', script);
                var value = script.getNumberValue('VALUE', script);

                if (value < 0) {
                    value = 0;
                } else if (value > 255) {
                    value = 255;
                }
                if (!Entry.hw.sendQueue.digitalPinMode) {
                    Entry.hw.sendQueue.digitalPinMode = {};
                }
                Entry.hw.sendQueue.digitalPinMode[port] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                Entry.hw.sendQueue[port] = value;

                return script.callReturn();
            }
        },
        roborobo_diode_input_value: {
            color: '#FF8D10',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['roborobo_schoolkit'],
            template: '%1 포트의 값',
            params: [{
                type: 'Dropdown',
                options: [['적외선', '7'], ['소 리', '8'], ['접 촉', '9'], ['CDS', '10']],
                value: '8',
                fontsIze: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'roborobo_diode_input_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'roborobo_diode',
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT');
                return Entry.hw.portData[port - 7];
            }
        },
        robotis_set_led: {
            color: '#2AB4D3',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['robotis_openCM70'],
            template: '%1번 포트 LED를 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['PORT 3', '3'], ['PORT 4', '4'], ['PORT 5', '5'], ['PORT 6', '6']],
                value: '3',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['모두 끄기', '0'], ['노랑색 켜기', '1'], ['파랑색 켜기', '2'], ['모두 켜기', '3']],
                value: '0',
                fontsIze: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/light.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'robotis_set_led'
            },
            paramsKeyMap: {
                PORT: 0,
                'COLOR': 1
            },
            class: 'robotis_led',
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                var value = 0;
                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_LED_MODULE[1];
                var data_value = script.getNumberField('COLOR');
                switch (port) {
                    case '3':
                        data_address = 212;
                        break;
                    case '4':
                        data_address = 213;
                        break;
                    case '5':
                        data_address = 214;
                        break;
                    case '6':
                        data_address = 215;
                        break;
                }
                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                //Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                //Entry.Robotis_carCont.update();
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_openCM70.delay);
            }
        },
        robotis_touch_value: {
            color: '#2AB4D3',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['robotis_openCM70'],
            template: '%1번 포트 접촉 센서 값',
            params: [{
                type: 'Dropdown',
                options: [['PORT 3', '3'], ['PORT 4', '4'], ['PORT 5', '5'], ['PORT 6', '6']],
                value: '3',
                fontsIze: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'robotis_touch_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'robotis_touch',
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                var value = 0;

                switch (port) {
                    case '3':
                        value = Entry.hw.portData['TOUCH0'];
                        break;
                    case '4':
                        value = Entry.hw.portData['TOUCH1'];
                        break;
                    case '5':
                        value = Entry.hw.portData['TOUCH2'];
                        break;
                    case '6':
                        value = Entry.hw.portData['TOUCH3'];
                        break;
                }
                //var value = (Entry.hw.portData['IN' + port] > 125) ? 1 : 0;
                return value;
            }
        },
        robotis_touch_value_boolean: {
            color: '#2AB4D3',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['robotis_openCM70'],
            template: '%1번 포트 접촉 센서가 %2',
            params: [{
                type: 'Dropdown',
                options: [['PORT 3', '3'], ['PORT 4', '4'], ['PORT 5', '5'], ['PORT 6', '6']],
                value: '3',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['접촉 되면', '1'], ['접촉 안되면', '0']],
                value: '1',
                fontsIze: 11
            }],
            def: {
                params: [null, null, null],
                type: 'robotis_touch_value_boolean'
            },
            paramsKeyMap: {
                PORT: 0,
                'TOUCH': 1
            },
            class: 'robotis_touch',
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                var touch = script.getNumberField('TOUCH', script);
                var value = 0;
                switch (port) {
                    case '3':
                        value = Entry.hw.portData['TOUCH0'];
                        break;
                    case '4':
                        value = Entry.hw.portData['TOUCH1'];
                        break;
                    case '5':
                        value = Entry.hw.portData['TOUCH2'];
                        break;
                    case '6':
                        value = Entry.hw.portData['TOUCH3'];
                        break;
                }
                var isTouch = !(value == 1 ^ touch);

                return isTouch;
            }
        },
        robotis_irs_value: {
            color: '#C4065C',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['robotis_openCM70'],
            template: '%1번 포트 적외선 센서 값',
            params: [{
                type: 'Dropdown',
                options: [['PORT 3', '3'], ['PORT 4', '4'], ['PORT 5', '5'], ['PORT 6', '6']],
                value: '3',
                fontsIze: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'robotis_irs_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'robotis_irs',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                var value = 0;
                var data_address = 0;
                switch (port) {
                    case '3':
                        value = Entry.hw.portData['IR0'];
                        data_address = 108;
                        break;
                    case '4':
                        value = Entry.hw.portData['IR1'];
                        data_address = 109;
                        break;
                    case '5':
                        value = Entry.hw.portData['IR2'];
                        data_address = 110;
                        break;
                    case '6':
                        value = Entry.hw.portData['IR3'];
                        data_address = 111;
                        break;
                }
                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_length = 1;
                var data_value = 2;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                //Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                //Entry.Robotis_carCont.update();
                if (!Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT3 && port == '3') {
                    Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                    Entry.Robotis_carCont.update();
                    Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT3 = true;
                }if (!Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT4 && port == '4') {
                    Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                    Entry.Robotis_carCont.update();
                    Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT4 = true;
                }if (!Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT5 && port == '5') {
                    Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                    Entry.Robotis_carCont.update();
                    Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT5 = true;
                }if (!Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT6 && port == '6') {
                    Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                    Entry.Robotis_carCont.update();
                    Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT6 = true;
                }
                //var value = (Entry.hw.portData['IN' + port] > 125) ? 1 : 0;
                return value;
            }
        },
        robotis_irs_value_boolean: {
            color: '#C4065C',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['robotis_openCM70'],
            template: '%1번 포트 적외선 센서 값 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['PORT 3', '3'], ['PORT 4', '4'], ['PORT 5', '5'], ['PORT 6', '6']],
                value: '3',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['=', 'EQUAL'], ['>', 'GREATER'], ['<', 'LESS'], ['≥', 'GREATER_OR_EQUAL'], ['≤', 'LESS_OR_EQUAL']],
                value: 'LESS',
                fontsIze: 11,
                noaRrow: true
            }, {
                type: 'Block',
                accept: 'string'
            }],
            def: {
                params: [null, null, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'robotis_irs_value_boolean'
            },
            paramsKeyMap: {
                PORT: 0,
                'OPERATOR': 1,
                'RIGHTVALUE': 2
            },
            class: 'robotis_irs',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT', script);
                var operator = script.getField('OPERATOR', script);
                var rightValue = script.getNumberValue('RIGHTVALUE', script);
                var leftValue = 0;
                var isCheck = false;
                var data_address = 0;

                switch (port) {
                    case '3':
                        leftValue = Entry.hw.portData['IR0'];
                        data_address = 108;
                        break;
                    case '4':
                        leftValue = Entry.hw.portData['IR1'];
                        data_address = 109;
                        break;
                    case '5':
                        leftValue = Entry.hw.portData['IR2'];
                        data_address = 110;
                        break;
                    case '6':
                        leftValue = Entry.hw.portData['IR3'];
                        data_address = 111;
                        break;
                }
                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_length = 1;
                var data_value = 2;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                //Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                //Entry.Robotis_carCont.update();
                if (!Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT3 && port == '3') {
                    Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                    Entry.Robotis_carCont.update();
                    Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT3 = true;
                }if (!Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT4 && port == '4') {
                    Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                    Entry.Robotis_carCont.update();
                    Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT4 = true;
                }if (!Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT5 && port == '5') {
                    Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                    Entry.Robotis_carCont.update();
                    Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT5 = true;
                }if (!Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT6 && port == '6') {
                    Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                    Entry.Robotis_carCont.update();
                    Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT6 = true;
                }

                switch (operator) {
                    case 'EQUAL':
                        isCheck = leftValue == rightValue;
                        break;
                    case 'GREATER':
                        isCheck = Number(leftValue) > Number(rightValue);
                        break;
                    case 'LESS':
                        isCheck = Number(leftValue) < Number(rightValue);
                        break;
                    case 'GREATER_OR_EQUAL':
                        isCheck = Number(leftValue) >= Number(rightValue);
                        break;
                    case 'LESS_OR_EQUAL':
                        isCheck = Number(leftValue) <= Number(rightValue);
                        break;
                }

                return isCheck;
            }
        },
        robotis_light_value: {
            color: '#498DEB',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['robotis_openCM70'],
            template: '%1번 포트 빛 감지 센서 값',
            params: [{
                type: 'Dropdown',
                options: [['PORT 3', '0'], ['PORT 4', '1'], ['PORT 5', '2'], ['PORT 6', '3']],
                value: '0',
                fontsIze: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'robotis_light_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'robotis_light',
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                return Entry.hw.portData['LIGHT' + port];
            }
        },
        robotis_light_value_boolean: {
            color: '#498DEB',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['robotis_openCM70'],
            template: '%1번 포트 빛 감지 센서 값 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['PORT 3', '0'], ['PORT 4', '1'], ['PORT 5', '2'], ['PORT 6', '3']],
                value: '0',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['=', 'EQUAL'], ['>', 'GREATER'], ['<', 'LESS'], ['≥', 'GREATER_OR_EQUAL'], ['≤', 'LESS_OR_EQUAL']],
                value: 'LESS',
                fontsIze: 11,
                noaRrow: true
            }, {
                type: 'Block',
                accept: 'string'
            }],
            def: {
                params: [null, null, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'robotis_light_value_boolean'
            },
            paramsKeyMap: {
                PORT: 0,
                'OPERATOR': 1,
                'RIGHTVALUE': 2
            },
            class: 'robotis_light',
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT', script);
                var operator = script.getField('OPERATOR', script);
                var rightValue = script.getNumberValue('RIGHTVALUE', script);
                var leftValue = Entry.hw.portData['LIGHT' + port];
                var isCheck = false;

                switch (operator) {
                    case 'EQUAL':
                        isCheck = leftValue == rightValue;
                        break;
                    case 'GREATER':
                        isCheck = Number(leftValue) > Number(rightValue);
                        break;
                    case 'LESS':
                        isCheck = Number(leftValue) < Number(rightValue);
                        break;
                    case 'GREATER_OR_EQUAL':
                        isCheck = Number(leftValue) >= Number(rightValue);
                        break;
                    case 'LESS_OR_EQUAL':
                        isCheck = Number(leftValue) <= Number(rightValue);
                        break;
                }

                return isCheck;
            }
        },
        robotis_detectedsound_value: {
            color: '#00D67F',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['robotis_openCM70'],
            template: '소리 센서 최종 소리 횟수',
            events: {},
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            def: {
                params: [null],
                type: 'robotis_detectedsound_value'
            },
            paramsKeyMap: {},
            class: 'robotis_sound',
            func: function func(sprite, script) {
                return Entry.hw.portData['DETECTEDSOUNDE'];
            }
        },
        robotis_detectedsound_value_boolean: {
            color: '#00D67F',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['robotis_openCM70'],
            template: '소리 센서 최종 소리 횟수 %1 %2',
            params: [{
                type: 'Dropdown',
                options: [['=', 'EQUAL'], ['>', 'GREATER'], ['<', 'LESS'], ['≥', 'GREATER_OR_EQUAL'], ['≤', 'LESS_OR_EQUAL']],
                value: 'LESS',
                fontsIze: 11,
                noaRrow: true
            }, {
                type: 'Block',
                accept: 'string'
            }],
            def: {
                params: [null, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'robotis_detectedsound_value_boolean'
            },
            paramsKeyMap: {
                'OPERATOR': 0,
                'RIGHTVALUE': 1
            },
            class: 'robotis_sound',
            func: function func(sprite, script) {
                var operator = script.getField('OPERATOR', script);
                var rightValue = script.getNumberValue('RIGHTVALUE', script);
                var leftValue = Entry.hw.portData['DETECTEDSOUNDE'];
                var isCheck = false;

                switch (operator) {
                    case 'EQUAL':
                        isCheck = leftValue == rightValue;
                        break;
                    case 'GREATER':
                        isCheck = Number(leftValue) > Number(rightValue);
                        break;
                    case 'LESS':
                        isCheck = Number(leftValue) < Number(rightValue);
                        break;
                    case 'GREATER_OR_EQUAL':
                        isCheck = Number(leftValue) >= Number(rightValue);
                        break;
                    case 'LESS_OR_EQUAL':
                        isCheck = Number(leftValue) <= Number(rightValue);
                        break;
                }

                return isCheck;
            }
        },
        robotis_detectingsound_value: {
            color: '#00D67F',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['robotis_openCM70'],
            template: '소리 센서 실시간 소리 횟수',
            events: {},
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            def: {
                params: [null],
                type: 'robotis_detectingsound_value'
            },
            paramsKeyMap: {},
            class: 'robotis_sound',
            func: function func(sprite, script) {
                return Entry.hw.portData['DETECTINGSOUNDE1'];
            }
        },
        robotis_detectingsound_value_boolean: {
            color: '#00D67F',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['robotis_openCM70'],
            template: '소리 센서 실시간 소리 횟수 %1 %2',
            params: [{
                type: 'Dropdown',
                options: [['=', 'EQUAL'], ['>', 'GREATER'], ['<', 'LESS'], ['≥', 'GREATER_OR_EQUAL'], ['≤', 'LESS_OR_EQUAL']],
                value: 'LESS',
                fontsIze: 11,
                noaRrow: true
            }, {
                type: 'Block',
                accept: 'string'
            }],
            def: {
                params: [null, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'robotis_detectingsound_value_boolean'
            },
            paramsKeyMap: {
                'OPERATOR': 0,
                'RIGHTVALUE': 1
            },
            class: 'robotis_sound',
            func: function func(sprite, script) {
                var operator = script.getField('OPERATOR', script);
                var rightValue = script.getNumberValue('RIGHTVALUE', script);
                var leftValue = Entry.hw.portData['DETECTINGSOUNDE1'];
                var isCheck = false;

                switch (operator) {
                    case 'EQUAL':
                        isCheck = leftValue == rightValue;
                        break;
                    case 'GREATER':
                        isCheck = Number(leftValue) > Number(rightValue);
                        break;
                    case 'LESS':
                        isCheck = Number(leftValue) < Number(rightValue);
                        break;
                    case 'GREATER_OR_EQUAL':
                        isCheck = Number(leftValue) >= Number(rightValue);
                        break;
                    case 'LESS_OR_EQUAL':
                        isCheck = Number(leftValue) <= Number(rightValue);
                        break;
                }

                return isCheck;
            }
        },
        robotis_color_value: {
            color: '#2AB4D3',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['robotis_openCM70'],
            template: '%1번 포트 칼라 센서 값',
            params: [{
                type: 'Dropdown',
                options: [['PORT 3', '3'], ['PORT 4', '4'], ['PORT 5', '5'], ['PORT 6', '6']],
                value: '3',
                fontsIze: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'robotis_color_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'robotis_color',
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                var value = 0;
                var data_address = 0;
                switch (port) {
                    case '3':
                        value = Entry.hw.portData['COLOR0'];
                        data_address = 108;
                        break;
                    case '4':
                        value = Entry.hw.portData['COLOR1'];
                        data_address = 109;
                        break;
                    case '5':
                        value = Entry.hw.portData['COLOR2'];
                        data_address = 110;
                        break;
                    case '6':
                        value = Entry.hw.portData['COLOR3'];
                        data_address = 111;
                        break;
                }
                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_length = 1;
                var data_value = 4;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                Entry.Robotis_carCont.update();

                switch (value) {
                    case 0:
                        value = "알 수 없음";
                        break;
                    case 1:
                        value = "흰색";
                        break;
                    case 2:
                        value = "검은색";
                        break;
                    case 3:
                        value = "빨강색";
                        break;
                    case 4:
                        value = "초록색";
                        break;
                    case 5:
                        value = "파랑색";
                        break;
                    case 6:
                        value = "노랑색";
                        break;
                }

                return value;
            }
        },
        robotis_color_value_boolean: {
            color: '#C4065C',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['robotis_openCM70'],
            template: '%1번 포트 칼라 센서 값 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['PORT 3', '3'], ['PORT 4', '4'], ['PORT 5', '5'], ['PORT 6', '6']],
                value: '3',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['=', 'EQUAL'], ['>', 'GREATER'], ['<', 'LESS'], ['≥', 'GREATER_OR_EQUAL'], ['≤', 'LESS_OR_EQUAL']],
                value: 'LESS',
                fontsIze: 11,
                noaRrow: true
            }, {
                type: 'Dropdown',
                options: [['알 수 없음 : 0', '0'], ['흰색 : 1', '1'], ['검은색 : 2', '2'], ['빨강색 : 3', '3'], ['초록색 : 4', '4'], ['파랑색 : 5', '5'], ['노랑색 : 6', '6']],
                value: '0',
                fontsIze: 11
            }],
            def: {
                params: [null, null, null],
                type: 'robotis_color_value_boolean'
            },
            paramsKeyMap: {
                PORT: 0,
                'OPERATOR': 1,
                RIGHTVALUE: 2
            },
            class: 'robotis_color',
            func: function func(sprite, script) {
                var port = script.getField('PORT', script);
                var operator = script.getField('OPERATOR', script);
                var rightValue = script.getNumberField('RIGHTVALUE', script);
                var leftValue = 0;
                var data_address = 0;
                var isCheck = false;

                switch (port) {
                    case '3':
                        leftValue = Entry.hw.portData['COLOR0'];
                        data_address = 108;
                        break;
                    case '4':
                        leftValue = Entry.hw.portData['COLOR1'];
                        data_address = 109;
                        break;
                    case '5':
                        leftValue = Entry.hw.portData['COLOR2'];
                        data_address = 110;
                        break;
                    case '6':
                        leftValue = Entry.hw.portData['COLOR3'];
                        data_address = 111;
                        break;
                }

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_length = 1;
                var data_value = 4;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                Entry.Robotis_carCont.update();

                switch (operator) {
                    case 'EQUAL':
                        isCheck = leftValue == rightValue;
                        break;
                    case 'GREATER':
                        isCheck = Number(leftValue) > Number(rightValue);
                        break;
                    case 'LESS':
                        isCheck = Number(leftValue) < Number(rightValue);
                        break;
                    case 'GREATER_OR_EQUAL':
                        isCheck = Number(leftValue) >= Number(rightValue);
                        break;
                    case 'LESS_OR_EQUAL':
                        isCheck = Number(leftValue) <= Number(rightValue);
                        break;
                }

                return isCheck;
            }
        },
        robotis_humidity_value: {
            color: '#2AB4D3',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['robotis_openCM70'],
            template: '%1번 포트 습도 센서 값',
            params: [{
                type: 'Dropdown',
                options: [['PORT 3', '3'], ['PORT 4', '4'], ['PORT 5', '5'], ['PORT 6', '6']],
                value: '3',
                fontsIze: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'robotis_humidity_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'robotis_humidity',
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                var value = 0;
                var data_address = 0;
                switch (port) {
                    case '3':
                        value = Entry.hw.portData['HUMIDTY0'];
                        data_address = 108;
                        break;
                    case '4':
                        value = Entry.hw.portData['HUMIDTY1'];
                        data_address = 109;
                        break;
                    case '5':
                        value = Entry.hw.portData['HUMIDTY2'];
                        data_address = 110;
                        break;
                    case '6':
                        value = Entry.hw.portData['HUMIDTY3'];
                        data_address = 111;
                        break;
                }
                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_length = 1;
                var data_value = 5;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                Entry.Robotis_carCont.update();

                return value;
            }
        },
        robotis_humidity_value_boolean: {
            color: '#C4065C',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['robotis_openCM70'],
            template: '%1번 포트 습도 센서 값 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['PORT 3', '3'], ['PORT 4', '4'], ['PORT 5', '5'], ['PORT 6', '6']],
                value: '3',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['=', 'EQUAL'], ['>', 'GREATER'], ['<', 'LESS'], ['≥', 'GREATER_OR_EQUAL'], ['≤', 'LESS_OR_EQUAL']],
                value: 'LESS',
                fontsIze: 11,
                noaRrow: true
            }, {
                type: 'Block',
                accept: 'string'
            }],
            def: {
                params: [null, null, {
                    type: 'number',
                    params: ['50']
                }],
                type: 'robotis_humidity_value_boolean'
            },
            paramsKeyMap: {
                PORT: 0,
                'OPERATOR': 1,
                'RIGHTVALUE': 2
            },
            class: 'robotis_humidity',
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT', script);
                var operator = script.getField('OPERATOR', script);
                var rightValue = script.getNumberValue('RIGHTVALUE', script);
                var leftValue = 0;
                var data_address = 0;
                var isCheck = true;

                switch (port) {
                    case 3:
                        leftValue = Entry.hw.portData['HUMIDTY0'];
                        data_address = 108;
                        break;
                    case 4:
                        leftValue = Entry.hw.portData['HUMIDTY1'];
                        data_address = 109;
                        break;
                    case 5:
                        leftValue = Entry.hw.portData['HUMIDTY2'];
                        data_address = 110;
                        break;
                    case 6:
                        leftValue = Entry.hw.portData['HUMIDTY3'];
                        data_address = 111;
                        break;
                }

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_length = 1;
                var data_value = 5;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                Entry.Robotis_carCont.update();
                switch (operator) {

                    case 'EQUAL':
                        isCheck = leftValue == rightValue;
                        break;
                    case 'GREATER':
                        isCheck = Number(leftValue) > Number(rightValue);
                        break;
                    case 'LESS':
                        isCheck = Number(leftValue) < Number(rightValue);
                        break;
                    case 'GREATER_OR_EQUAL':
                        isCheck = Number(leftValue) >= Number(rightValue);
                        break;
                    case 'LESS_OR_EQUAL':
                        isCheck = Number(leftValue) <= Number(rightValue);
                        break;
                }
                return isCheck;
            }
        },
        robotis_temperature_value: {
            color: '#2AB4D3',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['robotis_openCM70'],
            template: '%1번 포트 온도 센서 값',
            params: [{
                type: 'Dropdown',
                options: [['PORT 3', '3'], ['PORT 4', '4'], ['PORT 5', '5'], ['PORT 6', '6']],
                value: '3',
                fontsIze: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'robotis_temperature_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'robotis_temperature',
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                var value = 0;
                var data_address = 0;
                switch (port) {
                    case '3':
                        value = Entry.hw.portData['TEMPERATURE0'];
                        data_address = 108;
                        break;
                    case '4':
                        value = Entry.hw.portData['TEMPERATURE1'];
                        data_address = 109;
                        break;
                    case '5':
                        value = Entry.hw.portData['TEMPERATURE2'];
                        data_address = 110;
                        break;
                    case '6':
                        value = Entry.hw.portData['TEMPERATURE3'];
                        data_address = 111;
                        break;
                }
                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_length = 1;
                var data_value = 5;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                Entry.Robotis_carCont.update();

                return value;
            }
        },
        robotis_temperature_value_boolean: {
            color: '#C4065C',
            skeleton: 'basic_boolean_field',
            fontColor: '#fff',
            isNotFor: ['robotis_openCM70'],
            template: '%1번 포트 온도 센서 값 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['PORT 3', '3'], ['PORT 4', '4'], ['PORT 5', '5'], ['PORT 6', '6']],
                value: '3',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['=', 'EQUAL'], ['>', 'GREATER'], ['<', 'LESS'], ['≥', 'GREATER_OR_EQUAL'], ['≤', 'LESS_OR_EQUAL']],
                value: 'LESS',
                fontsIze: 11,
                noaRrow: true
            }, {
                type: 'Block',
                accept: 'string'
            }],
            def: {
                params: [null, null, {
                    type: 'number',
                    params: ['50']
                }],
                type: 'robotis_temperature_value_boolean'
            },
            paramsKeyMap: {
                PORT: 0,
                'OPERATOR': 1,
                'RIGHTVALUE': 2
            },
            class: 'robotis_temperature',
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT', script);
                var operator = script.getField('OPERATOR', script);
                var rightValue = script.getNumberValue('RIGHTVALUE', script);
                var leftValue = 0;
                var data_address = 0;
                var isCheck = true;

                switch (port) {
                    case 3:
                        leftValue = Entry.hw.portData['TEMPERATURE0'];
                        data_address = 108;
                        break;
                    case 4:
                        leftValue = Entry.hw.portData['TEMPERATURE1'];
                        data_address = 109;
                        break;
                    case 5:
                        leftValue = Entry.hw.portData['TEMPERATURE2'];
                        data_address = 110;
                        break;
                    case 6:
                        leftValue = Entry.hw.portData['TEMPERATURE3'];
                        data_address = 111;
                        break;
                }

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_length = 1;
                var data_value = 5;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                Entry.Robotis_carCont.update();
                switch (operator) {

                    case 'EQUAL':
                        isCheck = leftValue == rightValue;
                        break;
                    case 'GREATER':
                        isCheck = Number(leftValue) > Number(rightValue);
                        break;
                    case 'LESS':
                        isCheck = Number(leftValue) < Number(rightValue);
                        break;
                    case 'GREATER_OR_EQUAL':
                        isCheck = Number(leftValue) >= Number(rightValue);
                        break;
                    case 'LESS_OR_EQUAL':
                        isCheck = Number(leftValue) <= Number(rightValue);
                        break;
                }
                return isCheck;
            }
        },
        robotis_move_for_secs: {
            color: '#00B200',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['robotis_openCM70'],
            template: '%1모터를 %2 %3의 속도로 %4초 동안 회전 %5',
            params: [{
                type: 'Dropdown',
                options: [['왼쪽', '1'], ['오른쪽', '2'], ['양쪽', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['앞으로', 'CW'], ['뒤로', 'CCW']],
                value: 'CW',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/dcmotor.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'practical_course_motor_speed'
                }, {
                    type: 'number',
                    params: ['2']
                }, null],
                type: 'robotis_move_for_secs'
            },
            paramsKeyMap: {
                'WHEEL': 0,
                'DIRECTION': 1,
                'SPEED': 2,
                DURATION: 3
            },
            class: 'robotis_motor',
            func: function func(sprite, script) {
                var duration = script.getNumberValue('DURATION');
                var wheel = script.getNumberField('WHEEL');
                var value = script.getNumberValue('SPEED');
                var direction = script.getStringField('DIRECTION');

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[0];

                if (wheel == '3') {
                    data_length = 4;
                    data_address = 136;
                } else {
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[1];
                    data_address = data_address + (wheel - 1) * data_length;
                }

                if (!script.isStart) {

                    value = value * 68;
                    if (wheel == '3' || wheel == '1') {
                        if (direction == 'CCW') {
                            value = value + 1024;
                            if (value > 2047) {
                                value = 2047;
                            }
                        } else {
                            if (value > 1023) {
                                value = 1023;
                            }
                        }
                    } else {
                        if (direction == 'CW') {
                            value = value + 1024;
                            if (value > 2047) {
                                value = 2047;
                            }
                        } else {
                            if (value > 1023) {
                                value = 1023;
                            }
                        }
                    }

                    data_value = value;

                    var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];

                    script.wheelMode = wheel;

                    script.isStart = true;
                    script.timeFlag = 1;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, duration * 1000);

                    Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                    Entry.Robotis_carCont.update();
                    //return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, 2000);
                    return script;
                } else if (script.timeFlag == 1) {

                    //data_sendqueue = [[data_instruction, data_address, data_length, 0]];
                    //Entry.Robotis_carCont.setRobotisData(data_sendqueue);                    
                    return script;
                } else {

                    delete script.timeFlag;
                    delete script.isStart;
                    delete script.wheelMode;
                    Entry.engine.isContinue = false;

                    data_sendqueue = [[data_instruction, data_address, data_length, 0]];
                    Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                    Entry.engine.isContinue = false;
                    Entry.Robotis_carCont.update();
                    return script.callReturn();
                }
                //return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, 2000);
            }
        },
        robotis_aux_move_for: {
            color: '#00B200',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['robotis_openCM70'],
            template: '%1모터를 %2 %3의 속도로 계속 회전 %4',
            params: [{
                type: 'Dropdown',
                options: [['왼쪽', '1'], ['오른쪽', '2'], ['양쪽', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['앞으로', 'CW'], ['뒤로', 'CCW']],
                value: 'CW',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/dcmotor.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'practical_course_motor_speed'
                }, null],
                type: 'robotis_aux_move_for'
            },
            paramsKeyMap: {
                'WHEEL': 0,
                'DIRECTION': 1,
                'SPEED': 2
            },
            class: 'robotis_motor',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {
                var wheel = script.getNumberField('WHEEL');
                var value = script.getNumberValue('SPEED');
                var direction = script.getStringField('DIRECTION');

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;
                data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[0];

                if (wheel == '3') {
                    data_length = 4;
                    data_address = 136;
                } else {
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[1];
                    data_address = data_address + (wheel - 1) * data_length;
                }
                value = value * 68;

                if (wheel == '3' || wheel == '1') {
                    if (direction == 'CCW') {
                        value = value + 1024;
                        if (value > 2047) {
                            value = 2047;
                        }
                    } else {
                        if (value > 1023) {
                            value = 1023;
                        }
                    }
                } else {
                    if (direction == 'CW') {
                        value = value + 1024;
                        if (value > 2047) {
                            value = 2047;
                        }
                    } else {
                        if (value > 1023) {
                            value = 1023;
                        }
                    }
                }

                data_value = value;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_openCM70.delay);
            }
        },
        robotis_aux_stop_for: {
            color: '#00B200',
            skeleton: 'basic',
            fontColor: '#fff',
            statements: [],
            isNotFor: ['robotis_openCM70'],
            template: '%1모터를 정지 %2',
            params: [{
                type: 'Dropdown',
                options: [['왼쪽', '1'], ['오른쪽', '2'], ['양쪽', '3']],
                value: '1',
                fontsIze: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/dcmotor.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'robotis_aux_stop_for'
            },
            paramsKeyMap: {
                'WHEEL': 0
            },
            class: 'robotis_motor',
            func: function func(sprite, script) {
                var wheel = script.getNumberField('WHEEL');
                var value = 0;

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[0];
                if (wheel == '3') {
                    data_length = 4;
                    data_address = 136;
                } else {
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[1];
                    data_address = data_address + (wheel - 1) * data_length;
                }

                data_value = value;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_openCM70.delay);
            }
        },
        robotis_set_servo_wheel: {
            color: '#D126BD',
            skeleton: 'basic',
            statements: [],
            isNotFor: ['robotis_openCM70'],
            template: '%1 포트의 서보모터를 %2 %3속도로 회전 %4',
            params: [{
                type: 'Dropdown',
                options: [['PORT 3', '3'], ['PORT 4', '4'], ['PORT 5', '5'], ['PORT 6', '6']],
                value: '3',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['시계방향', 'CW'], ['반시계방향', 'CCW']],
                value: 'CW',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['1', 1], ['2', 2], ['3', 3], ['4', 4], ['5', 5], ['6', 6], ['7', 7], ['8', 8], ['9', 9], ['10', 10], ['11', 11], ['12', 12], ['13', 13], ['14', 14], ['15', 15]],
                value: 7,
                fontsIze: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/servo.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null, null],
                type: 'robotis_set_servo_wheel'
            },
            paramsKeyMap: {
                "PORT": 0,
                "DIRECTION": 1,
                "SPEED": 2
            },
            class: 'robotis_servo_motor',
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var port = script.getField("PORT", script);
                var direction = script.getStringField('DIRECTION');
                var speed = script.getNumberField('SPEED');
                var value = 0;

                var data_address3 = 0;
                var data_length3 = 0;
                var data_value3 = 0;

                var data_address2 = 0;
                var data_length2 = 1;
                var data_value2 = 7;

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                var data_address4 = 0; // servo speed
                var data_length4 = 2;
                var data_value4 = 0;

                data_value4 = speed * 68;
                if (data_value4 > 1023) data_value4 = 1023;
                switch (port) {
                    case "3":
                        data_address2 = 108;
                        Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT3 = true;
                        break;
                    case "4":
                        data_address2 = 109;
                        Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT4 = true;
                        break;
                    case "5":
                        data_address2 = 110;
                        Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT5 = true;
                        break;
                    case "6":
                        data_address2 = 111;
                        Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT6 = true;
                        break;
                }

                data_address3 = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0];
                data_length3 = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1];

                data_address3 = data_address3 + (port - 1) * data_length3;

                data_address4 = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[0];
                data_length4 = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[1];

                data_address4 = data_address4 + (port - 1) * data_length4;

                data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[0];
                data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[1];

                data_address = data_address + (port - 1) * data_length;
                data_value = 0;

                if (direction == 'CW') {
                    data_value4 = data_value4 + 1024;
                    if (data_value4 > 2047) {
                        data_value4 = 2047;
                    }
                } else {
                    if (data_value4 > 1023) {
                        data_value4 = 1023;
                    }
                }

                data_value3 = direction;

                //var data_sendqueue = [[data_instruction, data_address2, data_length2, data_value2], [data_instruction, data_address, data_length, data_value], [data_instruction, data_address4, data_length4, data_value4]];
                //return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_openCM70.delay);
                //
                if (!script.isStart) {

                    if (!Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT3 && port == '3' || !Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT4 && port == '4' || !Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT5 && port == '5' || !Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT6 && port == '6') {

                        var data_sendqueue = [[data_instruction, data_address2, data_length2, data_value2]];
                        Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                        Entry.Robotis_carCont.update();
                        script.isStart = true;
                        script.timeFlag = 1;
                        setTimeout(function () {
                            script.timeFlag = 0;
                        }, 1 * 650);
                    } else {
                        script.isStart = true;
                        script.timeFlag = 0;
                    }

                    /*
                    var data_sendqueue = [[data_instruction, data_address2, data_length2, data_value2]];
                    Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                    Entry.Robotis_carCont.update();
                    script.isStart = true;
                    script.timeFlag = 1;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, 1 * 650);
                    */

                    return script;
                } else if (script.timeFlag == 1) {

                    //data_sendqueue = [[data_instruction, data_address, data_length, 0]];
                    //Entry.Robotis_carCont.setRobotisData(data_sendqueue);                    
                    return script;
                } else {

                    delete script.timeFlag;
                    delete script.isStart;
                    delete script.wheelMode;
                    Entry.engine.isContinue = false;

                    data_sendqueue = [[data_instruction, data_address, data_length, data_value], [data_instruction, data_address4, data_length4, data_value4]];
                    Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                    Entry.engine.isContinue = false;
                    Entry.Robotis_carCont.update();
                    return script.callReturn();
                }
                //
            }
        },
        robotis_set_servo_joint: {
            color: '#D126BD',
            skeleton: 'basic',
            statements: [],
            isNotFor: ['robotis_openCM70'],
            template: '%1 포트의 서보모터를 %2 도 %3속도로 이동 %4',
            params: [{
                type: 'Dropdown',
                options: [['PORT 3', '3'], ['PORT 4', '4'], ['PORT 5', '5'], ['PORT 6', '6']],
                value: '3',
                fontsIze: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [['1', 1], ['2', 2], ['3', 3], ['4', 4], ['5', 5], ['6', 6], ['7', 7], ['8', 8], ['9', 9], ['10', 10], ['11', 11], ['12', 12], ['13', 13], ['14', 14], ['15', 15]],
                value: 7,
                fontsIze: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/servo.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    "type": "number",
                    "params": ["512"]
                }, null, null],
                type: 'robotis_set_servo_joint'
            },
            paramsKeyMap: {
                "PORT": 0,
                "VALUE": 1,
                "SPEED": 2
            },
            class: 'robotis_servo_motor',
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var port = script.getField("PORT", script);
                var value = script.getNumberValue('VALUE');
                var speed = script.getNumberField('SPEED');

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address3 = 0;
                var data_length3 = 0;
                var data_value3 = 0;

                var data_address2 = 0;
                var data_length2 = 1;
                var data_value2 = 7;

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                var data_address4 = 0; // servo speed
                var data_length4 = 2;
                var data_value4 = 0;

                data_value4 = speed * 68;
                if (data_value4 > 1023) data_value4 = 1023;
                switch (port) {
                    case "3":
                        data_address2 = 108;
                        break;
                    case "4":
                        data_address2 = 109;
                        break;
                    case "5":
                        data_address2 = 110;
                        break;
                    case "6":
                        data_address2 = 111;
                        break;
                }

                data_address3 = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0];
                data_length3 = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1];

                data_address3 = data_address3 + (port - 1) * data_length3;

                data_address4 = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[0];
                data_length4 = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[1];

                data_address4 = data_address4 + (port - 1) * data_length4;

                data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[0];
                data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[1];

                data_address = data_address + (port - 1) * data_length;
                data_value = 1;

                if (value > 1023) {
                    value = 1023;
                } else if (value < 0) {
                    value = 0;
                }

                data_value3 = value;

                if (!script.isStart) {

                    var data_sendqueue = [[data_instruction, data_address2, data_length2, data_value2]];
                    //Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                    //Entry.Robotis_carCont.update();
                    if (!Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT3 && port == '3' || !Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT4 && port == '4' || !Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT5 && port == '5' || !Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT6 && port == '6') {
                        script.isStart = true;
                        script.timeFlag = 1;
                        setTimeout(function () {
                            script.timeFlag = 0;
                        }, 1 * 650);
                    } else {
                        script.isStart = true;
                        script.timeFlag = 0;
                    }

                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {

                    delete script.timeFlag;
                    delete script.isStart;
                    delete script.wheelMode;
                    Entry.engine.isContinue = false;

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, 1 * 70);

                    data_sendqueue = [[data_instruction, data_address, data_length, data_value], [data_instruction, data_address4, data_length4, data_value4], [data_instruction, data_address3, data_length3, data_value3]];
                    Entry.Robotis_carCont.setRobotisData(data_sendqueue);
                    Entry.engine.isContinue = false;
                    Entry.Robotis_carCont.update();
                    return script.callReturn();
                }
                //
            }
        },
        robotis_melody_note_for: {
            color: '#FC327F',
            skeleton: 'basic',
            statements: [],
            isNotFor: ['robotis_openCM70'],
            template: '멜로디 %1 을(를) %2 옥타브로 %3 만큼 소리내기 %4',
            params: [{
                type: 'Dropdown',
                options: [
                //['무음', '12'],
                ['도', '0'], ['도#(레♭)', '1'], ['레', '2'], ['레#(미♭)', '3'], ['미', '4'], ['파', '5'], ['파#(솔♭)', '6'], ['솔', '7'], ['솔#(라♭)', '8'], ['라', '9'], ['라#(시♭)', '10'], ['시', '11']],
                value: '0',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['1', '0'], ['2', '1'], ['3', '2'], ['4', '3'], ['5', '4'], ['6', '5']],
                value: '2',
                fontsIze: 11
            }, {
                type: 'Dropdown',
                options: [['온음표', '4'], ['2분음표', '2'], ['4분음표', '1'], ['8분음표', '0.5'], ['16분음표', '0.25']],
                value: '4',
                fontsIze: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/practical_course/melody.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null, null],
                type: 'robotis_melody_note_for'
            },
            paramsKeyMap: {
                'NOTE': 0,
                'OCTAVE': 1,
                'DURATION': 2
            },
            class: 'robotis_melody',
            //'isNotFor': ['mini'],
            func: function func(sprite, script) {

                var note = script.getNumberField('NOTE', script);
                var octave = script.getNumberField('OCTAVE', script);
                var cmBuzzerTime = script.getNumberField('DURATION', script);

                var cmBuzzerIndex = note + octave * 12;
                if (cmBuzzerIndex > 51) cmBuzzerIndex = 51;
                if (cmBuzzerIndex < 0) cmBuzzerIndex = 0;

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address_1 = 0;
                var data_length_1 = 0;
                var data_value_1 = 0;
                var data_address_2 = 0;
                var data_length_2 = 0;
                var data_value_2 = 0;

                data_address_1 = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[0];
                data_length_1 = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[1];

                // TODO 텍스트 입력으로 바꾸고 최대는 5초 : 0.5 초 하려면 5를 입력  - console.log(parseInt(0.59 * 10)); max 는 5초

                data_value_1 = parseInt(cmBuzzerTime * 10);
                if (data_value_1 > 50) {
                    data_value_1 = 50;
                }
                //data_value_1
                data_address_2 = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[0];
                data_length_2 = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[1];
                data_value_2 = cmBuzzerIndex;

                var data_sendqueue = [[data_instruction, data_address_1, data_length_1, data_value_1], [data_instruction, data_address_2, data_length_2, data_value_2]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, cmBuzzerTime * 1000);
            }
        }
    };

    $.extend(Entry.block, miniBlock);
})();

/***/ }),

/***/ "./src/playground/block_menu.js":
/*!**************************************!*\
  !*** ./src/playground/block_menu.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 *
 * @param {object} dom which to inject playground
 */

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

Entry.BlockMenu = function (dom, align, categoryData, scroll, readOnly) {
    Entry.Model(this, false);

    this.reDraw = Entry.Utils.debounce(this.reDraw, 100);
    this._dAlign = this.align;
    this._setDynamic = Entry.Utils.debounce(this._setDynamic, 150);
    this._dSelectMenu = Entry.Utils.debounce(this.selectMenu, 0);

    this._align = align || 'CENTER';
    this.setAlign(this._align);
    this._scroll = scroll !== undefined ? scroll : false;
    this._bannedClass = [];
    this._categories = [];
    this.suffix = 'blockMenu';
    this._isSelectingMenu = false;
    this._dynamicThreads = [];
    this._setDynamicTimer = null;
    this._renderedCategories = {};
    this.categoryRendered = false;
    this.readOnly = readOnly === undefined ? true : readOnly;

    this._threadsMap = {};

    if (typeof dom === 'string') dom = $('#' + dom);else dom = $(dom);

    if (dom.prop('tagName') !== 'DIV') return console.error('Dom is not div element');

    this.view = dom;

    this.visible = true;
    this.hwCodeOutdated = false;
    this._svgId = 'blockMenu' + new Date().getTime();
    this._clearCategory();
    this._categoryData = categoryData;
    this._generateView(categoryData);

    this._splitters = [];
    this.setWidth();

    this.svg = Entry.SVG(this._svgId);
    Entry.Utils.addFilters(this.svg, this.suffix);
    var returnVal = Entry.Utils.addBlockPattern(this.svg, this.suffix);
    this.pattern = returnVal.pattern;

    this.svgGroup = this.svg.elem('g');

    this.svgThreadGroup = this.svgGroup.elem('g');
    this.svgThreadGroup.board = this;

    this.svgBlockGroup = this.svgGroup.elem('g');
    this.svgBlockGroup.board = this;

    this.changeEvent = new Entry.Event(this);
    this.categoryDoneEvent = new Entry.Event(this);

    this.observe(this, '_handleDragBlock', ['dragBlock']);

    this.changeCode(new Entry.Code([]));
    categoryData && this._generateCategoryCodes();

    if (this._scroll) {
        this._scroller = new Entry.BlockMenuScroller(this);
        this._addControl(dom);
    }

    if (Entry.documentMousedown) Entry.documentMousedown.attach(this, this.setSelectedBlock);
    if (this.code && Entry.keyPressed) Entry.keyPressed.attach(this, this._captureKeyEvent);
    if (Entry.windowResized) {
        var dUpdateOffset = Entry.Utils.debounce(this.updateOffset, 200);
        Entry.windowResized.attach(this, dUpdateOffset);
    }

    Entry.addEventListener('setBlockMenuDynamic', function () {
        this._setDynamicTimer = this._setDynamic.apply(this, arguments);
    }.bind(this));

    Entry.addEventListener('cancelBlockMenuDynamic', this._cancelDynamic.bind(this));
    Entry.addEventListener('fontLoaded', this.reDraw.bind(this));
};

(function (p) {
    var VARIABLE = 'variable';
    var HW = 'arduino';

    var splitterHPadding = 20;

    p.schema = {
        code: null,
        dragBlock: null,
        closeBlock: null,
        selectedBlockView: null
    };

    p._generateView = function (categoryData) {
        var parent = this.view;
        var that = this;

        categoryData && this._generateCategoryView(categoryData);

        this.blockMenuContainer = Entry.Dom('div', {
            class: 'blockMenuContainer',
            parent: parent
        });

        this.svgDom = Entry.Dom($('<svg id="' + this._svgId + '" class="blockMenu" version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), { parent: this.blockMenuContainer });

        this.svgDom.mouseenter(function (e) {
            that._scroller && that._scroller.setOpacity(1);

            var selectedBlockView = that.workspace.selectedBlockView;
            if (!Entry.playground || Entry.playground.resizing || selectedBlockView && selectedBlockView.dragMode === Entry.DRAG_MODE_DRAG) return;
            Entry.playground.focusBlockMenu = true;
            var bBox = that.svgGroup.getBBox();
            var adjust = that.hasCategory() ? 64 : 0;
            var expandWidth = bBox.width + bBox.x + adjust;
            var menuWidth = Entry.interfaceState.menuWidth;

            if (expandWidth > menuWidth) {
                this.widthBackup = menuWidth - adjust;
                $(this).stop().animate({ width: expandWidth - adjust }, 200);
            }
        });

        this.svgDom.mouseleave(function (e) {
            var playground = Entry.playground;
            if (!playground || playground.resizing) return;

            if (that._scroller) that._scroller.setOpacity(0);

            var widthBackup = this.widthBackup;
            if (widthBackup) {
                $(this).stop().animate({ width: widthBackup }, 200);
            }
            delete this.widthBackup;
            delete playground.focusBlockMenu;
        });

        Entry.Utils.bindBlockViewHoverEvent(this, this.svgDom);
        $(window).scroll(this.updateOffset.bind(this));
    };

    p.changeCode = function (code, isImmediate) {
        if (code instanceof Array) code = new Entry.Code(code);

        if (!(code instanceof Entry.Code)) return console.error('You must inject code instance');

        if (this.codeListener) this.codeListener.destroy();

        var that = this;
        this.set({ code: code });
        this.codeListener = this.code.changeEvent.attach(this, function () {
            that.changeEvent.notify();
        });
        code.createView(this);

        if (isImmediate) this.align();else this._dAlign();
    };

    p.bindCodeView = function (codeView) {
        this.svgBlockGroup.remove();
        this.svgThreadGroup.remove();
        this.svgBlockGroup = codeView.svgBlockGroup;
        this.svgThreadGroup = codeView.svgThreadGroup;
        this.svgGroup.appendChild(this.svgThreadGroup);
        this.svgGroup.appendChild(this.svgBlockGroup);
        if (this._scroller) this.svgGroup.appendChild(this._scroller.svgGroup);
    };

    p.align = function () {
        var code = this.code;
        if (!(this._isOn() && code)) return;
        this._clearSplitters();

        var vPadding = 15,
            marginFromTop = 10,
            hPadding = this._align == 'LEFT' ? 10 : this.svgDom.width() / 2;

        var pastClass;
        var blocks = this._getSortedBlocks();

        var _blocks = _slicedToArray(blocks, 2),
            _blocks$ = _blocks[0],
            visibles = _blocks$ === undefined ? [] : _blocks$,
            _blocks$2 = _blocks[1],
            inVisibles = _blocks$2 === undefined ? [] : _blocks$2;

        inVisibles.forEach(function (block) {
            var blockView = block && block.view;
            if (!blockView) return;
            blockView.set({ display: false });
            blockView.detach();
        });

        var lastSelector = this.lastSelector;
        var shouldReDraw = !this._renderedCategories[lastSelector];
        visibles.forEach(function (block) {
            var blockView = block && block.view;
            if (!blockView) return;
            blockView.attach();
            blockView.set({ display: true });
            shouldReDraw && blockView.reDraw();

            var className = Entry.block[block.type].class;
            if (pastClass && pastClass !== className) {
                this._createSplitter(marginFromTop);
                marginFromTop += vPadding;
            }
            pastClass = className;

            var left = hPadding - blockView.offsetX;
            if (this._align == 'CENTER') left -= blockView.width / 2;

            marginFromTop -= blockView.offsetY;
            blockView._moveTo(left, marginFromTop, false);
            marginFromTop += blockView.height + vPadding;
        }.bind(this));

        this.updateSplitters();

        if (this.workspace) {
            var mode = this.workspace.getMode();
            switch (mode) {
                case Entry.Workspace.MODE_BOARD:
                case Entry.Workspace.MODE_OVERLAYBOARD:
                    this.renderBlock(blocks);
                    break;
                case Entry.Workspace.MODE_VIMBOARD:
                    this.renderText(blocks);
                    break;
                default:
                    this.renderBlock(blocks);
            }
        }

        if (lastSelector !== 'func') this._renderedCategories[lastSelector] = true;
        this.changeEvent.notify();
    };

    p.cloneToGlobal = function (e) {
        var blockView = this.dragBlock;
        if (this._boardBlockView || blockView === null) return;

        var GS = Entry.GlobalSvg;
        var workspace = this.workspace;
        var workspaceMode = workspace.getMode();
        var WORKSPACE = Entry.Workspace;

        var svgWidth = this._svgWidth;

        var board = workspace.selectedBoard;
        var mouseDownCoordinate = blockView.mouseDownCoordinate;
        var dx = 0,
            dy = 0;

        if (mouseDownCoordinate) {
            dx = e.pageX - mouseDownCoordinate.x;
            dy = e.pageY - mouseDownCoordinate.y;
        }

        if (board && (workspaceMode === WORKSPACE.MODE_BOARD || workspaceMode === WORKSPACE.MODE_OVERLAYBOARD)) {
            if (!board.code) {
                if (Entry.toast) {
                    Entry.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.add_object_alert_msg);
                }
                if (this.selectedBlockView) {
                    this.selectedBlockView.removeSelected();
                    this.set({
                        selectedBlockView: null,
                        dragBlock: null
                    });
                }
                return;
            }

            var block = blockView.block;
            var code = this.code;
            var currentThread = block.getThread();
            if (block && currentThread) {
                var distance = this.offset().top - board.offset().top - $(window).scrollTop();

                var datum = currentThread.toJSON(true);
                datum[0].x = datum[0].x - svgWidth + (dx || 0);
                datum[0].y = datum[0].y + distance + (dy || 0);

                var newBlock = Entry.do('addThreadFromBlockMenu', datum).value.getFirstBlock();
                var newBlockView = newBlock && newBlock.view;

                //if some error occured
                //blockView is not exist
                if (!newBlockView) {
                    newBlock && newBlock.destroy();
                    return;
                }

                this._boardBlockView = newBlockView;

                newBlockView.onMouseDown.call(newBlockView, e);
                newBlockView.dragInstance.set({
                    isNew: true
                });

                GS.setView(newBlockView, workspaceMode);
            }
        } else {
            if (GS.setView(blockView, workspaceMode)) {
                GS.adjust(dx, dy);
                GS.addControl(e);
            }
        }
    };

    p.terminateDrag = function () {
        if (!this._boardBlockView) return;

        var boardBlockView = this._boardBlockView;
        if (!boardBlockView) return;
        var thisCode = this.code;
        var workspace = this.workspace;
        var boardCode = workspace.getBoard().code;

        this._boardBlockView = null;

        //board block should be removed below the amount of range
        var blockLeft = Entry.GlobalSvg.left;
        var width = Entry.GlobalSvg.width / 2;
        var boardLeft = boardBlockView.getBoard().offset().left;
        return blockLeft < boardLeft - width;
    };

    p.getCode = function (thread) {
        return this.code;
    };

    p.setSelectedBlock = function (blockView) {
        var old = this.selectedBlockView;

        if (old) old.removeSelected();

        if (blockView instanceof Entry.BlockView) {
            blockView.addSelected();
        } else blockView = null;

        this.set({ selectedBlockView: blockView });
    };

    p.hide = function () {
        this.view.addClass('entryRemove');
    };

    p.show = function () {
        this.view.removeClass('entryRemove');
    };

    p.renderText = function (blocks) {
        if (!this._isOn()) return;

        var blocks = blocks || this._getSortedBlocks();
        var targetMode = Entry.BlockView.RENDER_MODE_TEXT;

        blocks[0].forEach(function (block) {
            if (targetMode === block.view.renderMode) return;
            var thread = block.getThread();
            if (thread.view) {
                thread.view.renderText();
            } else thread.createView(this, Entry.BlockView.RENDER_MODE_TEXT);
        }.bind(this));
        return blocks;
    };

    p.renderBlock = function (blocks) {
        if (!this._isOn()) return;

        var that = this;

        blocks = blocks || this._getSortedBlocks();
        var targetMode = Entry.BlockView.RENDER_MODE_BLOCK;

        blocks[0].forEach(function (block) {
            if (targetMode === block.view.renderMode) return;
            var thread = block.getThread();
            if (thread.view) {
                thread.view.renderBlock();
            } else thread.createView(that, Entry.BlockView.RENDER_MODE_BLOCK);
        });
        return blocks;
    };

    p._createSplitter = function (topPos) {
        this._splitters.push(this.svgBlockGroup.elem('line', {
            x1: splitterHPadding,
            y1: topPos,
            x2: this._svgWidth - splitterHPadding,
            y2: topPos,
            stroke: '#b5b5b5'
        }));
    };

    p.updateSplitters = function (y) {
        y = y === undefined ? 0 : y;
        var splitters = this._splitters;
        var width = this._svgWidth;
        var xDest = width - splitterHPadding;
        var yDest;
        splitters.forEach(function (line) {
            yDest = parseFloat(line.getAttribute('y1')) + y;
            line.attr({
                x2: xDest,
                y1: yDest,
                y2: yDest
            });
        });
    };

    p._clearSplitters = function () {
        var splitters = this._splitters;
        while (splitters.length) {
            splitters.pop().remove();
        }
    };

    p.setWidth = function () {
        this._svgWidth = this.blockMenuContainer.width();
        this.updateSplitters();
    };

    p.setMenu = function (doNotAlign) {
        if (!this.hasCategory()) return;

        var sorted = [[], []];

        this._categoryData.forEach(function (data) {
            var category = data.category;
            var threads = data.blocks;

            if (category === 'func') {
                var funcThreads = this.code.getThreadsByCategory('func').map(function (t) {
                    return t.getFirstBlock().type;
                });
                threads = funcThreads.length ? funcThreads : threads;
            }

            var count = threads.length;
            for (var i = 0; i < threads.length; i++) {
                if (this.checkBanClass(Entry.block[threads[i]])) count--;
            }
            var elem = this._categoryElems[category];

            if (count === 0) sorted[1].push(elem);else sorted[0].push(elem);
        }.bind(this));

        requestAnimationFrame(function () {
            //visible
            sorted[0].forEach(function (elem) {
                elem.removeClass('entryRemove');
            });
            //invisible
            sorted[1].forEach(function (elem) {
                elem.addClass('entryRemove');
            });
            this.selectMenu(0, true, doNotAlign);
        }.bind(this));
    };

    p.getCategoryCodes = function (selector) {
        //TODO if needed
    };

    p._convertSelector = function (selector) {
        if (!Entry.Utils.isNumber(selector)) return selector;

        selector = Number(selector);
        var categories = this._categories;
        var elems = this._categoryElems;
        for (var i = 0; i < categories.length; i++) {
            var key = categories[i];
            var visible = !elems[key].hasClass('entryRemove');
            if (visible) if (selector-- === 0) return key;
        }
    };

    p.selectMenu = function (selector, doNotFold, doNotAlign) {
        if (!this._isOn() || !this._categoryData) return;

        var className = 'entrySelectedCategory';
        var oldView = this._selectedCategoryView;

        var name = this._convertSelector(selector);
        if (selector !== undefined && !name) {
            this._dAlign();
            return;
        }

        if (name) this.lastSelector = name;

        this._isSelectingMenu = true;
        switch (name) {
            case VARIABLE:
                Entry.playground.checkVariables();
                break;
            case HW:
                this._generateHwCode();
                this.align();
                break;
        }

        var elem = this._categoryElems[name];
        var animate = false;
        var board = this.workspace.board,
            boardView = board.view;

        if (oldView) oldView.removeClass(className);

        doNotFold = doNotFold || !this.hasCategory();

        if (elem == oldView && !doNotFold) {
            boardView.addClass('folding');
            this._selectedCategoryView = null;
            elem && elem.removeClass(className);
            Entry.playground.hideTabs();
            animate = true;
            this.visible = false;
        } else if (!oldView && this.hasCategory()) {
            if (!this.visible) {
                animate = true;
                boardView.addClass('foldOut');
                Entry.playground.showTabs();
            }
            boardView.removeClass('folding');
            this.visible = true;
        } else if (!name) this._selectedCategoryView = null;

        if (animate) {
            Entry.bindAnimationCallbackOnce(boardView, function () {
                board.scroller.resizeScrollBar.call(board.scroller);
                boardView.removeClass('foldOut');
                Entry.windowResized.notify();
            });
        }

        this._isSelectingMenu = false;

        if (this.visible) {
            this._selectedCategoryView = elem;
            elem && elem.addClass(className);
        }

        doNotAlign !== true && this._dAlign();
    };

    p._generateCategoryCodes = function (elems) {
        if (!elems) {
            this.categoryRendered = false;
            this.view.addClass('init');
            elems = Object.keys(this._categoryElems);
        }
        if (elems.length) {
            var key = elems.shift();
            if (key !== HW) {
                this._generateCategoryCode(key);
            } else this._generateHwCode(true);

            if (elems.length) {
                this._generateCodesTimer = setTimeout(function () {
                    this._generateCategoryCodes(elems);
                }.bind(this), 0);
            } else {
                this._generateCodesTimer = null;
                this.view.removeClass('init');
                this.align();
                this.categoryRendered = true;
                this.categoryDoneEvent.notify();
            }
        }
    };

    p._generateCategoryCode = function (key) {
        if (!this._categoryData) return;

        var code = this.code;
        var codes = [];
        var datum = this._categoryData.filter(function (obj) {
            return obj.category == key;
        })[0];

        if (!datum) return;

        var category = key;
        var blocks = datum.blocks;
        blocks.forEach(function (b) {
            var block = Entry.block[b];
            if (!block || !block.def) {
                codes.push([{ type: b, category: category }]);
            } else {
                if (block.defs) {
                    block.defs.forEach(function (d) {
                        d.category = category;
                    });
                    for (var i = 0; i < block.defs.length; i++) {
                        codes.push([block.defs[i]]);
                    }
                } else {
                    block.def.category = category;
                    codes.push([block.def]);
                }
            }
        });

        this._categories.push(category);

        var index;
        if (key == 'func') {
            var threads = this.code.getThreadsByCategory('func');
            if (threads.length) index = this.code.getThreadIndex(threads[0]);
        }

        codes.forEach(function (t) {
            if (!t || !t[0]) return;
            t[0].x = -99999;
            this._createThread(t, index);
            if (index !== undefined) index++;
            delete t[0].x;
        }.bind(this));

        code.changeEvent.notify();
    };

    p.banCategory = function (categoryName) {
        var categoryElem;
        if (categoryName in this._categoryElems) {
            categoryElem = this._categoryElems[categoryName];
            categoryElem.addClass('entryRemoveCategory');
            if (this.lastSelector === categoryName) {
                this._dSelectMenu(this.firstSelector, true);
            }
        }
    };

    p.unbanCategory = function (categoryName) {
        var categoryElem;

        var threads;
        this._categoryData.some(function (data) {
            var isFindCategory = categoryName === data.category;
            if (isFindCategory) {
                threads = data.blocks;
            }
            return isFindCategory;
        });

        var count = threads.length;
        for (var i = 0; i < threads.length; i++) {
            if (this.checkBanClass(Entry.block[threads[i]])) count--;
        }

        if (categoryName in this._categoryElems && count > 0) {
            categoryElem = this._categoryElems[categoryName];
            categoryElem.removeClass('entryRemoveCategory');
            categoryElem.removeClass('entryRemove');
        }
    };

    p.banClass = function (className, doNotAlign) {
        var index = this._bannedClass.indexOf(className);
        if (index < 0) {
            this._bannedClass.push(className);
            doNotAlign !== true && this._dAlign();
        }
    };

    p.unbanClass = function (className, doNotAlign) {
        var index = this._bannedClass.indexOf(className);
        if (index > -1) {
            this._bannedClass.splice(index, 1);
            doNotAlign !== true && this._dAlign();
        }
    };

    p.checkBanClass = function (blockInfo) {
        if (!blockInfo) return;
        var isNotFor = blockInfo.isNotFor;
        if (!isNotFor || isNotFor.length === 0) return false;

        var current;
        var banned = this._bannedClass;
        for (var i = 0; i < isNotFor.length; i++) {
            current = isNotFor[i];
            if (current && banned.indexOf(current) === -1) {
                return false;
            }
        }

        return true;
    };

    p.checkCategory = function (blockInfo) {
        if (!this.hasCategory() || !blockInfo) return;

        if (!this.lastSelector || this._selectDynamic) return true;

        var isFor = blockInfo.isFor;
        return isFor && isFor.indexOf('category_' + this.lastSelector) < 0;
    };

    p._addControl = function (dom) {
        var that = this;
        var svgDom = this.svgDom;

        dom.on('wheel', function () {
            that._mouseWheel.apply(that, arguments);
        });

        if (that._scroller) {
            $(this.svg).bind('mousedown touchstart', function (e) {
                that.onMouseDown.apply(that, arguments);
            });
        }
    };

    p.removeControl = function (eventType) {
        this.svgDom.off(eventType);
    };

    p.onMouseDown = function (e) {
        if (e.stopPropagation) e.stopPropagation();
        if (e.preventDefault) e.preventDefault();

        var blockMenu = this;
        if (e.button === 0 || e.originalEvent && e.originalEvent.touches) {
            var mouseEvent = Entry.Utils.convertMouseEvent(e);

            if (Entry.documentMousedown) Entry.documentMousedown.notify(mouseEvent);
            var doc = $(document);

            doc.bind('mousemove.blockMenu', onMouseMove);
            doc.bind('mouseup.blockMenu', onMouseUp);
            doc.bind('touchmove.blockMenu', onMouseMove);
            doc.bind('touchend.blockMenu', onMouseUp);
            this.dragInstance = new Entry.DragInstance({
                startY: mouseEvent.pageY,
                offsetY: mouseEvent.pageY
            });
        }

        function onMouseMove(e) {
            if (e.stopPropagation) e.stopPropagation();
            if (e.preventDefault) e.preventDefault();

            var mouseEvent = Entry.Utils.convertMouseEvent(e);

            var dragInstance = blockMenu.dragInstance;
            blockMenu._scroller.scroll(-mouseEvent.pageY + dragInstance.offsetY);
            dragInstance.set({ offsetY: mouseEvent.pageY });
        }

        function onMouseUp(e) {
            $(document).unbind('.blockMenu');
            delete blockMenu.dragInstance;
        }
    };

    p._mouseWheel = function (e) {
        e = e.originalEvent;
        e.preventDefault();
        var disposeEvent = Entry.disposeEvent;
        if (disposeEvent) disposeEvent.notify(e);
        this._scroller.scroll(-e.wheelDeltaY || e.deltaY / 3);
    };

    p.dominate = function (block) {
        this.svgBlockGroup.appendChild(block.view.svgGroup);
    };

    p.reDraw = function () {
        if (!this._isOn()) return;

        var selector = this.lastSelector;
        if (this._selectDynamic) selector = undefined;

        this.selectMenu(selector, true);
        this._getSortedBlocks().shift().forEach(function (block) {
            block.view.reDraw();
        });
    };

    p._handleDragBlock = function () {
        this._boardBlockView = null;
        if (this._scroller) {
            this._scroller.setOpacity(0);
        }
    };

    p._captureKeyEvent = function (e) {
        var keyCode = e.keyCode;

        if (e.ctrlKey && Entry.type == 'workspace') {
            if (keyCode > 48 && keyCode < 58) {
                e.preventDefault();
                setTimeout(function () {
                    this._cancelDynamic(true);
                    this._dSelectMenu(keyCode - 49, true);
                }.bind(this), 200);
            }
        }
    };

    p.enablePattern = function () {
        this.pattern.removeAttribute('style');
    };

    p.disablePattern = function () {
        this.pattern.attr({ style: 'display: none' });
    };

    p._clearCategory = function () {
        if (this._generateCodesTimer) {
            clearTimeout(this._generateCodesTimer);
            this._generateCodesTimer = null;
        }

        this._selectedCategoryView = null;
        this._categories = [];
        this._threadsMap = {};

        var categories = this._categoryElems;
        for (var key in categories) {
            categories[key].remove();
        }this._categoryElems = {};

        if (this.code && this.code.constructor == Entry.Code) this.code.clear();

        this._categoryCol && this._categoryCol.remove();
        this._categoryData = null;
    };

    p.clearCategory = p._clearCategory;

    p.setCategoryData = function (data) {
        this._clearCategory();
        this._categoryData = data;
        this._generateCategoryView(data);
        this._generateCategoryCodes();
        this.setMenu();
        Entry.resizeElement();
    };

    p.setNoCategoryData = function (data) {
        this._clearCategory();
        Entry.resizeElement();
        this.changeCode(data, true);
        this.categoryDoneEvent.notify();
    };

    p._generateCategoryView = function (data) {
        if (!data) return;

        this._categoryCol && this._categoryCol.remove && this._categoryCol.remove();

        this._categoryCol = Entry.Dom('ul', {
            class: 'entryCategoryListWorkspace'
        });
        this.view.prepend(this._categoryCol);

        var fragment = document.createDocumentFragment();

        data.forEach(function (datum, i) {
            var cName = datum.category;
            if (i === 0) {
                this.firstSelector = cName;
            }
            var elem = this._generateCategoryElement(cName, datum.visible);
            fragment.appendChild(elem[0]);
        }.bind(this));

        this._categoryCol[0].appendChild(fragment);
    };

    p._generateCategoryElement = function (name, visible) {
        var that = this;
        var element = Entry.Dom('li', {
            id: 'entryCategory' + name,
            classes: ['entryCategoryElementWorkspace', 'entryRemove']
        });
        if (visible === false) {
            element.addClass('entryRemoveCategory');
        }

        (function (elem, name) {
            elem.text(Lang.Blocks[name.toUpperCase()]);
            that._categoryElems[name] = elem;
            elem.bindOnClick(function (e) {
                that._cancelDynamic(true, function () {
                    that.selectMenu(name, undefined, true);
                    that.align();
                });
            });
        })(element, name);

        return element;
    };

    p.updateOffset = function () {
        this._offset = this.svgDom.offset();
    };

    p.offset = function () {
        var offset = this._offset;
        if (!offset || offset.top === 0 && offset.left === 0) {
            this.updateOffset();
        }
        return this._offset;
    };

    p._generateHwCode = function (shouldHide) {
        var code = this.code;
        var threads = code.getThreadsByCategory(HW);

        if (!(this._categoryData && this.shouldGenerateHwCode(threads))) return;

        threads.forEach(function (t) {
            this._deleteThreadsMap(t);
            t.destroy();
        }.bind(this));

        var data = this._categoryData;
        var blocks;
        for (var i = data.length - 1; i >= 0; i--) {
            var category = data[i].category;
            if (category === HW) {
                blocks = data[i].blocks;
                break;
            }
        }

        if (!blocks) return;
        var threads = [];

        for (i = 0; i < blocks.length; i++) {
            var type = blocks[i];
            var block = Entry.block[type];
            if (!this.checkBanClass(block)) {
                if (!block || !block.def) {
                    threads.push([{ type: type, category: HW }]);
                } else {
                    if (block.defs) {
                        block.defs.forEach(function (d) {
                            d.category = HW;
                        });
                        for (var i = 0; i < block.defs.length; i++) {
                            threads.push([block.defs[i]]);
                        }
                    } else {
                        block.def.category = HW;
                        threads.push([block.def]);
                    }
                }
            }
        }

        threads.forEach(function (t) {
            if (shouldHide) t[0].x = -99999;
            this._createThread(t);
            delete t[0].x;
        }.bind(this));
        this.hwCodeOutdated = false;

        Entry.dispatchEvent('hwCodeGenerated');
    };

    p.setAlign = function (align) {
        this._align = align || 'CENTER';
    };

    p._isNotVisible = function (blockInfo) {
        return this.checkCategory(blockInfo) || this.checkBanClass(blockInfo);
    };

    p._getSortedBlocks = function () {
        var that = this;
        var visibles = [];
        var inVisibles;
        var block;
        var allBlocks = that._getThreads().map(function (thread) {
            return thread && thread.getFirstBlock();
        }).filter(function (block) {
            return !!block;
        });

        if (that._selectDynamic) {
            var threadsMap = that._threadsMap;
            that._dynamicThreads.forEach(function (type) {
                var thread = threadsMap[type];
                block = thread && thread.getFirstBlock();
                if (block) visibles.push(block);
            });

            inVisibles = allBlocks;
        } else {
            inVisibles = [];

            allBlocks.forEach(function (block) {
                if (!that._isNotVisible(Entry.block[block.type])) visibles.push(block);else inVisibles.push(block);
            });
        }

        return [visibles, inVisibles];
    };

    p._setDynamic = function (blocks) {
        if (!this._isOn()) return;
        var that = this;
        var data;

        this._dynamicThreads = blocks.map(function (b) {
            if (typeof b === 'string') {
                return b;
            } else if (b.constructor === Array) {
                var keyName = b[0];
                if (!that.getThreadByBlockKey(keyName)) {
                    data = b[1];
                    data.category = 'extra';
                    that._createThread([data], undefined, keyName);
                }
                return keyName;
            }
        }).filter(function (type) {
            return !!type;
        });

        this._selectDynamic = true;
        this.selectMenu(undefined, true);
    };

    p._cancelDynamic = function (fromElement, cb) {
        if (this._setDynamicTimer) {
            clearTimeout(this._setDynamicTimer);
            this._setDynamicTimer = null;
        }
        this._selectDynamic = false;
        this._dynamicThreads = [];
        if (fromElement !== true) this.selectMenu(this.lastSelector, true);
        cb && cb();
    };

    p._isOn = function () {
        return this.view.css('display') !== 'none';
    };

    p.deleteRendered = function (name) {
        delete this._renderedCategories[name];
    };

    p.clearRendered = function () {
        this._renderedCategories = {};
    };

    p.hasCategory = function () {
        return !!this._categoryData;
    };

    p.getDom = function (query) {
        if (query.length >= 1) {
            if (query[0] === 'category') return this._categoryElems[query[1]];else {
                var type = query[0][0].type;
                var dom = this.getSvgDomByType(type);
                this.align();
                this.scrollToType(type);
                return dom;
            }
        } else {}
    };

    p.getSvgDomByType = function (type) {
        var code = this.code;

        var threads = code.getThreads();

        for (var i = 0; i < threads.length; i++) {
            var block = threads[i] && threads[i].getFirstBlock();
            if (!block) continue;
            if (block.type === type) return block.view.svgGroup;
        }
    };

    p.scrollToType = function (type) {
        if (!type) return;

        var block = this.code.getBlockList(false, type)[0];
        var blockView = block.view;

        this.hasCategory() && this.selectMenu(block.category, true);

        var dom = this.getSvgDomByType(type);
        var rect = dom.getBoundingClientRect();
        if (isOverFlow()) {
            var currentY = blockView.y;
            var targetY = 20;
            var diff = currentY - targetY;
            this._scroller.scrollByPx(diff);
        }

        function isOverFlow() {
            return rect.bottom > $(window).height() - 10;
        }
    };

    p.shouldGenerateHwCode = function (threads) {
        return this.hwCodeOutdated || threads.length === 0;
    };

    p._registerThreadsMap = function (type, thread) {
        if (!(type && thread && thread.getFirstBlock())) return;
        this._threadsMap[type] = thread;
    };

    p._deleteThreadsMap = function (thread) {
        var block = thread && thread.getFirstBlock();
        if (!block) return;
        delete this._threadsMap[block.type];
    };

    p.getThreadByBlockKey = function (key) {
        return this._threadsMap[key];
    };

    p._getThreads = function () {
        return this.code.getThreads();
    };

    p._createThread = function (data, index, keyName) {
        if (typeof keyName !== 'string') keyName = undefined;
        keyName = keyName || data[0].type;

        var thread = this.code.createThread(data, index);
        this._registerThreadsMap(keyName, thread);
        return thread;
    };
})(Entry.BlockMenu.prototype);

/***/ }),

/***/ "./src/playground/block_menu_scroll.js":
/*!*********************************************!*\
  !*** ./src/playground/block_menu_scroll.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


/*
 *
 * @param {object} board
 */

Entry.BlockMenuScroller = function (board) {
    var that = this;
    this.board = board;
    this.board.changeEvent.attach(this, this._reset);

    this.svgGroup = null;

    this.hX = 0;
    this.vWidth = 0;
    this.vY = 0;
    this.vRatio = 0;
    this._visible = true;
    this._opacity = -1;

    this.mouseHandler = function () {
        that.onMouseDown.apply(that, arguments);
    };

    this.createScrollBar();
    this.setOpacity(0);
    this._addControl();

    this._domHeight = 0;
    this._dResizeScrollBar = Entry.Utils.debounce(this.resizeScrollBar, 50);
    if (Entry.windowResized) Entry.windowResized.attach(this, this._dResizeScrollBar);
};

Entry.BlockMenuScroller.RADIUS = 7;

(function (p) {
    p.createScrollBar = function () {
        var r = Entry.Scroller.RADIUS;
        var that = this;

        this.svgGroup = this.board.svgGroup.elem('g', {
            class: 'boardScrollbar'
        });

        this.vScrollbar = this.svgGroup.elem('rect', {
            rx: 4,
            ry: 4
        });
    };

    p.resizeScrollBar = function () {
        this._updateRatio();

        var dom = this.board.blockMenuContainer;
        var newHeight = dom.height();
        if (newHeight !== this._domHeight) {
            this._domHeight = newHeight;
            return this.board.align();
        }
        if (!this._visible || this.vRatio === 0) return;

        if (this.vRatio === 0) return;
        var that = this;

        this.vScrollbar.attr({
            width: 9,
            height: dom.height() / that.vRatio,
            x: dom.width() - 9
        });
    };

    p.updateScrollBar = function (dy) {
        this.vY += dy;
        this.vScrollbar.attr({ y: this.vY });
    };

    p.scroll = function (dy) {
        if (!this.isVisible()) return;
        var dest = this._adjustValue(dy);

        dy = dest - this.vY;
        if (dy === 0) return;

        this.board.code.moveBy(0, -dy * this.vRatio);
        this.updateScrollBar(dy);
    };

    p.scrollByPx = function (px) {
        if (!this.vRatio) this._updateRatio();
        this.scroll(px / this.vRatio);
    };

    //adjust value by dy for min/max value
    p._adjustValue = function (dy) {
        var domHeight = this.board.svgDom.height();
        var limitBottom = domHeight - domHeight / this.vRatio;
        var newY = this.vY + dy;

        newY = Math.max(0, newY);
        newY = Math.min(limitBottom, newY);

        return newY;
    };

    p.setVisible = function (visible) {
        if (visible == this.isVisible()) return;
        this._visible = visible;
        this.svgGroup.attr({
            display: visible === true ? 'block' : 'none'
        });
    };

    p.setOpacity = function (value) {
        if (this._opacity == value) return;
        this.vScrollbar.attr({
            opacity: value
        });
        this._opacity = value;
    };

    p.isVisible = function () {
        return this._visible;
    };

    p._updateRatio = function () {
        var board = this.board,
            bRect = board.svgBlockGroup.getBBox(),
            svgDom = board.svgDom,
            realHeight = board.blockMenuContainer.height();

        var vRatio = (bRect.height + 20) / realHeight;
        this.vRatio = vRatio;
        if (vRatio <= 1) this.setVisible(false);else this.setVisible(true);
    };

    p._reset = function () {
        this.vY = 0;
        this.vScrollbar.attr({
            y: this.vY
        });
        this._dResizeScrollBar();
    };

    p.onMouseDown = function (e) {
        var that = this;
        if (e.stopPropagation) e.stopPropagation();
        if (e.preventDefault) e.preventDefault();

        if (e.button === 0 || e.originalEvent && e.originalEvent.touches) {
            if (Entry.documentMousedown) Entry.documentMousedown.notify(e);

            var mouseEvent;
            if (e.originalEvent && e.originalEvent.touches) {
                mouseEvent = e.originalEvent.touches[0];
            } else mouseEvent = e;

            var doc = $(document);
            doc.bind('mousemove.scroll', onMouseMove);
            doc.bind('mouseup.scroll', onMouseUp);
            doc.bind('touchmove.scroll', onMouseMove);
            doc.bind('touchend.scroll', onMouseUp);
            that.dragInstance = new Entry.DragInstance({
                startY: mouseEvent.pageY,
                offsetY: mouseEvent.pageY
            });
        }

        function onMouseMove(e) {
            if (e.stopPropagation) e.stopPropagation();
            if (e.preventDefault) e.preventDefault();

            var mouseEvent;
            if (e.originalEvent && e.originalEvent.touches) {
                mouseEvent = e.originalEvent.touches[0];
            } else mouseEvent = e;

            var dragInstance = that.dragInstance;
            that.scroll(mouseEvent.pageY - dragInstance.offsetY);

            dragInstance.set({
                offsetY: mouseEvent.pageY
            });
        }

        function onMouseUp(e) {
            $(document).unbind('.scroll');
            delete that.dragInstance;
        }
        e.stopPropagation();
    };

    p._addControl = function () {
        var that = this;
        $(this.vScrollbar).bind('mousedown touchstart', that.mouseHandler);
    };
})(Entry.BlockMenuScroller.prototype);

/***/ }),

/***/ "./src/playground/block_view.js":
/*!**************************************!*\
  !*** ./src/playground/block_view.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


/*
 *
 */

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

Entry.BlockView = function (block, board, mode) {
    var that = this;
    Entry.Model(this, false);
    this.block = block;
    this._lazyUpdatePos = Entry.Utils.debounce(block._updatePos.bind(block), 200);
    this.mouseUpEvent = new Entry.Event(this);
    this.disableMouseEvent = false;

    this.dAlignContent = this.alignContent;
    this._board = board;
    this._observers = [];
    this.set(block);
    this.svgGroup = board.svgBlockGroup.elem('g');
    this.svgGroup.blockView = this;

    this._schema = Entry.skinContainer.getSkin(block);

    if (this._schema === undefined) {
        this.block.destroy(false, false);
        return;
    }

    if (mode === undefined) {
        var workspace = this.getBoard().workspace;
        if (workspace && workspace.getBlockViewRenderMode) this.renderMode = workspace.getBlockViewRenderMode();else this.renderMode = Entry.BlockView.RENDER_MODE_BLOCK;
    } else this.renderMode = Entry.BlockView.RENDER_MODE_BLOCK;

    if (this._schema.deletable) this.block.setDeletable(this._schema.deletable);
    if (this._schema.copyable) this.block.setCopyable(this._schema.copyable);
    if (this._schema.display === false || block.display === false) {
        this.set({ display: false });
    }

    var skeleton = this._skeleton = Entry.skeleton[this._schema.skeleton];
    this._contents = [];
    this._statements = [];
    this._extensions = [];
    this.magnet = {};
    this._paramMap = {};

    if (skeleton.magnets && skeleton.magnets(this).next) {
        this.svgGroup.nextMagnet = this.block;
        this._nextGroup = this.svgGroup.elem('g');
        this._observers.push(this.observe(this, '_updateMagnet', ['contentHeight']));
    }

    this.isInBlockMenu = this.getBoard() instanceof Entry.BlockMenu;

    this.mouseHandler = function () {
        var events = that.block.events;
        if (events && events.mousedown) events.mousedown.forEach(function (fn) {
            fn(that);
        });

        that.onMouseDown.apply(that, arguments);
    };

    this._startRender(block, mode);

    // observe
    var thisBlock = this.block;
    this._observers.push(thisBlock.observe(this, '_setMovable', ['movable']));
    this._observers.push(thisBlock.observe(this, '_setReadOnly', ['movable']));
    this._observers.push(thisBlock.observe(this, '_setCopyable', ['copyable']));
    this._observers.push(thisBlock.observe(this, '_updateColor', ['deletable'], false));
    this._observers.push(this.observe(this, '_updateBG', ['magneting'], false));

    this._observers.push(this.observe(this, '_updateOpacity', ['visible'], false));
    this._observers.push(this.observe(this, '_updateDisplay', ['display']));
    this._observers.push(this.observe(this, '_updateShadow', ['shadow']));
    this._observers.push(this.observe(this, '_updateMagnet', ['offsetY']));
    this._observers.push(board.code.observe(this, '_setBoard', ['board'], false));

    this.dragMode = Entry.DRAG_MODE_NONE;
    Entry.Utils.disableContextmenu(this.svgGroup.node);
    var events = block.events.viewAdd;
    if (Entry.type == 'workspace' && events && this._board instanceof Entry.Board) {
        events.forEach(function (fn) {
            if (Entry.Utils.isFunction(fn)) fn(block);
        });
    }
};

Entry.BlockView.PARAM_SPACE = 5;
Entry.BlockView.DRAG_RADIUS = 5;
Entry.BlockView.pngMap = {};

Entry.BlockView.RENDER_MODE_BLOCK = 1;
Entry.BlockView.RENDER_MODE_TEXT = 2;

(function (p) {
    p.schema = {
        id: 0,
        type: Entry.STATIC.BLOCK_RENDER_MODEL,
        x: 0,
        y: 0,
        offsetX: 0,
        offsetY: 0,
        width: 0,
        height: 0,
        contentWidth: 0,
        contentHeight: 0,
        magneting: false,
        visible: true,
        animating: false,
        shadow: true,
        display: true
    };

    p._startRender = function (block, mode) {
        var that = this;
        var skeleton = this._skeleton;
        var attr = { class: 'block' };

        if (this.display === false) attr.display = 'none';

        var svgGroup = this.svgGroup;

        if (this._schema.css) {
            attr.style = this._schema.css;
        }

        svgGroup.attr(attr);

        (skeleton.classes || []).forEach(function (c) {
            svgGroup.addClass(c);
        });

        var path = skeleton.path(this);

        this.pathGroup = svgGroup.elem('g');
        this._updateMagnet();

        this._path = this.pathGroup.elem('path');

        var fillColor = this._schema.color;
        if (this.block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN || this.block.emphasized) {
            var emphasizedColor = this._schema.emphasizedColor;
            if (!emphasizedColor) {
                fillColor = Entry.Utils.getEmphasizeColor(fillColor);
            } else {
                fillColor = emphasizedColor;
            }
        }

        this._fillColor = fillColor;

        var pathStyle = {
            d: path,
            fill: fillColor,
            class: 'blockPath',
            blockId: this.id
        };

        if (this.magnet.next || this._skeleton.nextShadow) {
            this.pathGroup.attr({
                filter: 'url(#entryBlockShadowFilter_' + this.getBoard().suffix + ')'
            });
        } else if (this.magnet.string || this.magnet.boolean) pathStyle.stroke = skeleton.outerLine;

        if (skeleton.outerLine) {
            pathStyle['stroke-width'] = '0.6';
        }
        this._path.attr(pathStyle);

        this._moveTo(this.x, this.y, false);
        this._startContentRender(mode);
        this._startExtension(mode);
        if (this._board.disableMouseEvent !== true) {
            this._addControl();
        }

        var guide = this.guideSvgGroup;
        guide && svgGroup.insertBefore(guide, svgGroup.firstChild);

        this.bindPrev();
    };

    p._startContentRender = function (mode) {
        mode = mode === undefined ? this.renderMode : mode;

        this.contentSvgGroup && this.contentSvgGroup.remove();
        this.statementSvgGroup && this.statementSvgGroup.remove();

        this.contentSvgGroup = this.svgGroup.elem('g');
        this._contents = [];

        var schema = this._schema;
        var statements = this._schema.statements;
        if (statements && statements.length) {
            this.statementSvgGroup = this.svgGroup.elem('g');
        }

        var reg = /(%\d+)/im;
        var parsingReg = /%(\d+)/im;
        var parsingRet;

        var template = this._getTemplate(mode);
        var params = this._getSchemaParams(mode);

        if (mode === Entry.BlockView.RENDER_MODE_TEXT) {
            if (/(if)+(.|\n)+(else)+/gim.test(template) && !reg.test(template) && this.isInBlockMenu) {
                template = template.replace('else', '%' + params.length + ' else');
            }
        }

        var templateParams = template.split(reg);

        for (var i = 0; i < templateParams.length; i++) {
            var param = templateParams[i];
            if (param[0] === ' ') param = param.substring(1);
            if (param[param.length - 1] === ' ') param = param.substring(0, param.length - 1);
            if (param.length === 0) continue;

            parsingRet = parsingReg.exec(param);
            if (parsingRet) {
                var paramIndex = parsingRet[1] - 1;
                param = params[paramIndex];
                var field = new Entry['Field' + param.type](param, this, paramIndex, mode || this.renderMode, i);
                this._contents.push(field);
                this._paramMap[paramIndex] = field;
            } else {
                this._contents.push(new Entry.FieldText({ text: param }, this));
            }
        }

        statements = schema.statements || [];
        for (i = 0; i < statements.length; i++) {
            this._statements.push(new Entry.FieldStatement(statements[i], this, i));
        }this.alignContent(false);
    };

    p._startExtension = function (mode) {
        this._extensions = this.block.extensions.map(function (e) {
            return new Entry['Ext' + e.type](e, this, mode);
        }.bind(this));
    };

    p._updateSchema = function () {
        this._startContentRender();
    };

    p.changeType = function (type) {
        this._schema = Entry.block[type || this.type];
        this._updateSchema();
    };

    p.alignContent = function (animate) {
        if (animate !== true) animate = false;
        var cursor = { x: 0, y: 0, height: 0 };
        var statementIndex = 0;
        var width = 0;
        var secondLineHeight = 0;

        for (var i = 0; i < this._contents.length; i++) {
            var c = this._contents[i];
            if (c instanceof Entry.FieldLineBreak) {
                this._alignStatement(animate, statementIndex);
                c.align(statementIndex);
                statementIndex++;
                cursor.y = c.box.y;
                cursor.x = 8;
            } else {
                c.align(cursor.x, cursor.y, animate);
                // space between content
                if (i !== this._contents.length - 1 && !(c instanceof Entry.FieldText && c._text.length === 0)) cursor.x += Entry.BlockView.PARAM_SPACE;
            }

            var box = c.box;
            if (statementIndex !== 0) {
                secondLineHeight = Math.max(Math.round(box.height) * 1000000, secondLineHeight);
            } else cursor.height = Math.max(box.height, cursor.height);

            cursor.x += box.width;
            width = Math.max(width, cursor.x);
            if (this.contentWidth !== width || this.contentHeight !== cursor.height) {
                this.set({
                    contentWidth: width,
                    contentHeight: cursor.height
                });
            }
        }

        if (secondLineHeight) {
            this.set({
                contentHeight: cursor.height + secondLineHeight
            });
        }

        if (this._statements.length != statementIndex) this._alignStatement(animate, statementIndex);

        var contentPos = this.getContentPos();
        this.contentSvgGroup.attr('transform', 'translate(' + contentPos.x + ',' + contentPos.y + ')');
        this.contentPos = contentPos;
        this._render();

        this._updateMagnet();
        var ws = this.getBoard().workspace;
        if (ws && (this.isFieldEditing() || ws.widgetUpdateEveryTime)) ws.widgetUpdateEvent.notify();
    };

    p.isFieldEditing = function () {
        var contents = this._contents;
        for (var i = 0; i < contents.length; i++) {
            var content = contents[i];
            if (!content || content.isEditing === undefined) continue;
            if (content.isEditing()) return true;
        }
        return false;
    };

    p._alignStatement = function (animate, index) {
        var positions = this._skeleton.statementPos ? this._skeleton.statementPos(this) : [];
        var statement = this._statements[index];
        if (!statement) return;
        var pos = positions[index];
        if (pos) statement.align(pos.x, pos.y, animate);
    };

    p._render = function () {
        this._renderPath();
        this.set(this._skeleton.box(this));
    };

    p._renderPath = function () {
        var newPath = this._skeleton.path(this);

        //no change occured
        if (this._path.getAttribute('d') === newPath) return;

        if (false) { var that; } else {
            this._path.attr({ d: newPath });
            this.animating === true && this.set({ animating: false });
        }
    };

    p._setPosition = function (animate) {
        animate = animate === undefined ? true : animate;

        //this.svgGroup.stop();
        if (!(this.x || this.y)) {
            this.svgGroup.removeAttr('transform');
        } else {
            var transform = 'translate(' + this.x + ',' + this.y + ')';

            if (animate && Entry.ANIMATION_DURATION !== 0) {
                this.svgGroup.attr('transform', transform);
                /*
                this.svgGroup.animate({
                    transform: transform
                }, Entry.ANIMATION_DURATION, mina.easeinout);
                */
            } else {
                this.svgGroup.attr('transform', transform);
            }
        }
    };

    p._toLocalCoordinate = function (parentSvgGroup) {
        this.disableMouseEvent = false;
        this._moveTo(0, 0, false);
        parentSvgGroup.appendChild(this.svgGroup);
    };

    p._toGlobalCoordinate = function (dragMode, doNotUpdatePos) {
        this.disableMouseEvent = false;
        var pos = this.getAbsoluteCoordinate(dragMode);
        this._moveTo(pos.x, pos.y, false, doNotUpdatePos);
        this.getBoard().svgBlockGroup.appendChild(this.svgGroup);
    };

    p._moveTo = function (x, y, animate, doNotUpdatePos) {
        var thisX = this.x;
        var thisY = this.y;
        if (!this.display) {
            x = -99999;
            y = -99999;
        }
        if (thisX !== x || thisY !== y) this.set({ x: x, y: y });

        doNotUpdatePos !== true && this._lazyUpdatePos();

        if (this.visible && this.display) this._setPosition(animate);
    };

    p._moveBy = function (x, y, animate, doNotUpdatePos) {
        return this._moveTo(this.x + x, this.y + y, animate, doNotUpdatePos);
    };

    p.moveBy = p._moveBy;

    p._addControl = function () {
        var that = this;
        this._mouseEnable = true;
        $(this.svgGroup).bind('mousedown.blockViewMousedown touchstart.blockViewMousedown', that.mouseHandler);

        var events = that.block.events;
        if (events && events.dblclick) {
            $(this.svgGroup).dblclick(function () {
                if (!that._board.readOnly) {
                    events.dblclick.forEach(function (fn) {
                        if (fn) fn(that);
                    });
                }
            });
        }
    };

    p.removeControl = function () {
        this._mouseEnable = false;
        $(this.svgGroup).unbind('.blockViewMousedown');
    };

    p.onMouseDown = function (e) {
        if (e.stopPropagation) e.stopPropagation();
        if (e.preventDefault) e.preventDefault();
        var longPressTimer = null;

        var blockView = this;
        var board = this.getBoard();
        if (Entry.documentMousedown) Entry.documentMousedown.notify(e);
        if (this.readOnly || board.viewOnly) return;

        board.setSelectedBlock(this);

        //left mousedown
        if ((e.button === 0 || e.originalEvent && e.originalEvent.touches) && !this._board.readOnly) {
            var eventType = e.type;
            var mouseEvent;
            if (e.originalEvent && e.originalEvent.touches) {
                mouseEvent = e.originalEvent.touches[0];
            } else mouseEvent = e;

            this.mouseDownCoordinate = {
                x: mouseEvent.pageX,
                y: mouseEvent.pageY
            };
            var doc = $(document);
            if (!this.disableMouseEvent) doc.bind('mousemove.block touchmove.block', onMouseMove);
            doc.bind('mouseup.block touchend.block', onMouseUp);
            this.dragInstance = new Entry.DragInstance({
                startX: mouseEvent.pageX,
                startY: mouseEvent.pageY,
                offsetX: mouseEvent.pageX,
                offsetY: mouseEvent.pageY,
                height: 0,
                mode: true
            });
            board.set({ dragBlock: this });
            this.addDragging();
            this.dragMode = Entry.DRAG_MODE_MOUSEDOWN;

            if (eventType === 'touchstart') {
                longPressTimer = setTimeout(function () {
                    if (longPressTimer) {
                        longPressTimer = null;
                        onMouseUp();
                        blockView._rightClick(e, 'longPress');
                    }
                }, 1000);
            }
        } else if (Entry.Utils.isRightButton(e)) this._rightClick(e);

        if (board.workspace.getMode() === Entry.Workspace.MODE_VIMBOARD && e) {
            document.getElementsByClassName('CodeMirror')[0].dispatchEvent(Entry.Utils.createMouseEvent('dragStart', event));
        }

        var that = this;

        function onMouseMove(e) {
            e.stopPropagation();
            var workspaceMode = board.workspace.getMode();

            var mouseEvent;
            if (workspaceMode === Entry.Workspace.MODE_VIMBOARD) p.vimBoardEvent(e, 'dragOver');
            if (e.originalEvent && e.originalEvent.touches) mouseEvent = e.originalEvent.touches[0];else mouseEvent = e;

            var mouseDownCoordinate = blockView.mouseDownCoordinate;
            var diff = Math.sqrt(Math.pow(mouseEvent.pageX - mouseDownCoordinate.x, 2) + Math.pow(mouseEvent.pageY - mouseDownCoordinate.y, 2));
            if (blockView.dragMode == Entry.DRAG_MODE_DRAG || diff > Entry.BlockView.DRAG_RADIUS) {
                if (longPressTimer) {
                    clearTimeout(longPressTimer);
                    longPressTimer = null;
                }
                if (!blockView.movable) return;

                if (!blockView.isInBlockMenu) {
                    var isFirst = false;
                    if (blockView.dragMode != Entry.DRAG_MODE_DRAG) {
                        blockView._toGlobalCoordinate(undefined, true);
                        blockView.dragMode = Entry.DRAG_MODE_DRAG;
                        blockView.block.getThread().changeEvent.notify();
                        Entry.GlobalSvg.setView(blockView, workspaceMode);
                        isFirst = true;
                    }

                    if (this.animating) this.set({ animating: false });

                    if (blockView.dragInstance.height === 0) {
                        var block = blockView.block;
                        var height = -1 + blockView.height;
                        blockView.dragInstance.set({ height: height });
                    }

                    var dragInstance = blockView.dragInstance;
                    blockView._moveBy(mouseEvent.pageX - dragInstance.offsetX, mouseEvent.pageY - dragInstance.offsetY, false, true);
                    dragInstance.set({
                        offsetX: mouseEvent.pageX,
                        offsetY: mouseEvent.pageY
                    });

                    Entry.GlobalSvg.position();
                    if (!blockView.originPos) blockView.originPos = {
                        x: blockView.x,
                        y: blockView.y
                    };
                    if (isFirst) board.generateCodeMagnetMap();
                    blockView._updateCloseBlock();
                } else {
                    board.cloneToGlobal(e);
                }
            }
        }

        function onMouseUp(e) {
            if (longPressTimer) {
                clearTimeout(longPressTimer);
                longPressTimer = null;
            }
            $(document).unbind('.block', onMouseUp);
            $(document).unbind('.block', onMouseMove);
            blockView.terminateDrag(e);
            if (board) board.set({ dragBlock: null });
            blockView._setHoverBlockView({ that: blockView });
            Entry.GlobalSvg.remove();
            blockView.mouseUpEvent.notify();

            delete this.mouseDownCoordinate;
            delete blockView.dragInstance;
        }
    };

    p.vimBoardEvent = function (event, type, block) {
        if (event) {
            var dragEvent = Entry.Utils.createMouseEvent(type, event);

            if (block) dragEvent.block = block;
            $('.entryVimBoard>.CodeMirror')[0].dispatchEvent(dragEvent);
        }
    };

    p.terminateDrag = function (e) {
        var gs = Entry.GlobalSvg;
        var board = this.getBoard();
        var dragMode = this.dragMode;
        var block = this.block;
        var workspaceMode = board.workspace.getMode();
        this.removeDragging();
        this.set({ visible: true });
        this.dragMode = Entry.DRAG_MODE_NONE;

        var gsRet = gs.terminateDrag(this);

        if (workspaceMode === Entry.Workspace.MODE_VIMBOARD) {
            if (board instanceof Entry.BlockMenu) {
                board.terminateDrag();
                gsRet === gs.DONE && this.vimBoardEvent(e, 'dragEnd', block);
            } else board.clear();
        } else {
            var fromBlockMenu = this.dragInstance && this.dragInstance.isNew;
            if (dragMode === Entry.DRAG_MODE_DRAG) {
                var ripple = false;
                var prevBlock = this.block.getPrevBlock(this.block);
                var suffix = this._board.workspace.trashcan.isOver ? 'ForDestroy' : '';
                switch (gsRet) {
                    case gs.DONE:
                        var closeBlock = board.magnetedBlockView;
                        if (closeBlock instanceof Entry.BlockView) closeBlock = closeBlock.block;
                        if (prevBlock && !closeBlock) {
                            Entry.do('separateBlock' + suffix, block);
                        } else if (!prevBlock && !closeBlock && !fromBlockMenu) {
                            if (!block.getThread().view.isGlobal()) {
                                Entry.do('separateBlock' + suffix, block);
                            } else {
                                Entry.do('moveBlock' + suffix, block);
                                this.dominate();
                            }
                        } else {
                            suffix = fromBlockMenu ? 'FromBlockMenu' : '';
                            if (closeBlock) {
                                if (closeBlock.view.magneting === 'next') {
                                    var lastBlock = block.getLastBlock();
                                    this.dragMode = dragMode;
                                    var targetPointer = closeBlock.pointer();
                                    targetPointer[3] = -1;
                                    Entry.do('insertBlock' + suffix, block, targetPointer).isPass(fromBlockMenu);

                                    Entry.ConnectionRipple.setView(closeBlock.view).dispose();
                                    this.dragMode = Entry.DRAG_MODE_NONE;
                                } else {
                                    if (closeBlock.getThread) {
                                        var thread = closeBlock.getThread();
                                        var closeBlockType = closeBlock.type;
                                        if (closeBlockType && thread instanceof Entry.FieldBlock && !Entry.block[closeBlockType].isPrimitive) suffix += 'FollowSeparate';
                                    }
                                    Entry.do('insertBlock' + suffix, block, closeBlock).isPass(fromBlockMenu);
                                    ripple = true;
                                }
                                createjs.Sound.play('entryMagneting');
                            } else {
                                Entry.do('moveBlock' + suffix, block).isPass(fromBlockMenu);
                                this.dominate();
                            }
                        }
                        break;
                    case gs.RETURN:
                        var block = this.block;
                        if (fromBlockMenu) {
                            Entry.do('destroyBlockBelow', this.block).isPass(true);
                        } else {
                            if (prevBlock) {
                                this.set({ animating: false });
                                createjs.Sound.play('entryMagneting');
                                this.bindPrev(prevBlock);
                                block.insert(prevBlock);
                            } else {
                                var parent = block.getThread().view.getParent();

                                if (!(parent instanceof Entry.Board)) {
                                    createjs.Sound.play('entryMagneting');
                                    Entry.do('insertBlock', block, parent);
                                } else {
                                    var originPos = this.originPos;
                                    this._moveTo(originPos.x, originPos.y, false);
                                    this.dominate();
                                }
                            }
                        }
                        break;
                    case gs.REMOVE:
                        createjs.Sound.play('entryDelete');
                        Entry.do('destroyBlockBelow', this.block).isPass(fromBlockMenu);
                        break;
                }

                board.setMagnetedBlock(null);
                if (ripple) {
                    Entry.ConnectionRipple.setView(block.view).dispose();
                }
            } else if (gsRet === gs.REMOVE && fromBlockMenu && dragMode === Entry.DRAG_MODE_MOUSEDOWN) {
                Entry.do('destroyBlockBelow', this.block).isPass(true);
            }
        }

        this.destroyShadow();
        delete this.originPos;
    };

    p._updateCloseBlock = function () {
        var board = this.getBoard(),
            closeBlock;
        if (!this._skeleton.magnets) return;
        for (var type in this.magnet) {
            var magnet = this.magnet[type];
            if (type === 'next') {
                closeBlock = this.getBoard().getNearestMagnet(this.x, this.y + this.getBelowHeight(), type);
            } else {
                closeBlock = this.getBoard().getNearestMagnet(this.x, this.y, type);
            }
            if (closeBlock) return board.setMagnetedBlock(closeBlock.view, type);
        }
        board.setMagnetedBlock(null);
    };

    p.dominate = function () {
        this.block.getThread().view.dominate();
    };

    p.getSvgRoot = function () {
        var svgBlockGroup = this.getBoard().svgBlockGroup;
        var node = this.svgGroup;
        while (node.parentNode !== svgBlockGroup) {
            node = node.parentNode;
        }return node;
    };

    p.getBoard = function () {
        return this._board;
    };

    p._setBoard = function () {
        this._board = this._board.code.board;
    };

    p.destroy = function (animate) {
        this.block.set({ view: null });
        $(this.svgGroup).unbind('.blockViewMousedown');
        this._destroyObservers();
        var svgGroup = this.svgGroup;

        if (animate) {
            $(svgGroup).fadeOut(100, function () {
                svgGroup.remove();
            });
        } else svgGroup.remove();

        if (this._contents) {
            this._contents.forEach(function (c) {
                c.destroy();
            });
        }

        if (this._statements) {
            this._statements.forEach(function (s) {
                s.destroy();
            });
        }

        var block = this.block;
        var events = block.events.viewDestroy;
        if (Entry.type == 'workspace' && events && !this.isInBlockMenu) events.forEach(function (fn) {
            if (Entry.Utils.isFunction(fn)) fn(block);
        });
    };

    p.getShadow = function () {
        if (!this._shadow) {
            this._shadow = Entry.SVG.createElement(this.svgGroup.cloneNode(true), { opacity: 0.5 });
            this.getBoard().svgGroup.appendChild(this._shadow);
        }
        return this._shadow;
    };

    p.destroyShadow = function () {
        if (this._shadow) {
            this._shadow.remove();
            delete this._shadow;
        }
    };

    p._updateMagnet = function () {
        if (!this._skeleton.magnets) return;
        var magnet = this._skeleton.magnets(this);
        if (magnet.next) this._nextGroup.attr('transform', 'translate(' + magnet.next.x + ',' + magnet.next.y + ')');
        this.magnet = magnet;
        this.block.getThread().changeEvent.notify();
    };

    p._updateBG = function () {
        var dragBlock = this._board.dragBlock;
        if (!dragBlock || !dragBlock.dragInstance) return;

        var blockView = this;
        var svgGroup = blockView.svgGroup;
        if (!(this.magnet.next || this.magnet.previous)) {
            // field block
            if (this.magneting) {
                svgGroup.attr({
                    filter: 'url(#entryBlockHighlightFilter_' + this.getBoard().suffix + ')'
                });
                svgGroup.addClass('outputHighlight');
            } else {
                svgGroup.removeClass('outputHighlight');
                svgGroup.removeAttr('filter');
            }
            return;
        }
        var magneting = blockView.magneting;
        var block = blockView.block;
        if (magneting) {
            var shadow = dragBlock.getShadow();
            var pos = this.getAbsoluteCoordinate();
            var magnet, transform;
            if (magneting === 'previous') {
                magnet = this.magnet.next;
                transform = 'translate(' + (pos.x + magnet.x) + ',' + (pos.y + magnet.y) + ')';
            } else if (magneting === 'next') {
                magnet = this.magnet.previous;
                var dragHeight = dragBlock.getBelowHeight();
                transform = 'translate(' + (pos.x + magnet.x) + ',' + (pos.y + magnet.y - dragHeight) + ')';
            }

            var $shadow = $(shadow);
            $shadow.attr({
                transform: transform
            });
            $shadow.removeAttr('display');

            this._clonedShadow = shadow;

            if (blockView.background) {
                blockView.background.remove();
                blockView.nextBackground.remove();
                delete blockView.background;
                delete blockView.nextBackground;
            }

            if (magneting === 'previous') {
                var height = dragBlock.getBelowHeight() + this.offsetY;

                blockView.originalHeight = blockView.offsetY;
                blockView.set({
                    offsetY: height
                });
            }
        } else {
            if (this._clonedShadow) {
                this._clonedShadow.attr({
                    display: 'none'
                });
                delete this._clonedShadow;
            }

            var height = blockView.originalHeight;
            if (height !== undefined) {
                if (blockView.background) {
                    blockView.background.remove();
                    blockView.nextBackground.remove();
                    delete blockView.background;
                    delete blockView.nextBackground;
                }
                blockView.set({
                    offsetY: height
                });
                delete blockView.originalHeight;
            }
        }
        var changeEvent = blockView.block.thread.changeEvent;
        if (changeEvent) changeEvent.notify();
    };

    p.addDragging = function () {
        this.svgGroup.addClass('dragging');
    };

    p.removeDragging = function () {
        this.svgGroup.removeClass('dragging');
    };

    p.addSelected = function () {
        this.svgGroup.addClass('selected');
    };

    p.removeSelected = function () {
        this.svgGroup.removeClass('selected');
    };

    p.getSkeleton = function () {
        return this._skeleton;
    };

    p.getContentPos = function () {
        return this._skeleton.contentPos(this);
    };

    p.renderText = function () {
        this.renderMode = Entry.BlockView.RENDER_MODE_TEXT;
        this._startContentRender(Entry.BlockView.RENDER_MODE_TEXT);
    };

    p.renderBlock = function () {
        this.renderMode = Entry.BlockView.RENDER_MODE_BLOCK;
        this._startContentRender(Entry.BlockView.RENDER_MODE_BLOCK);
    };

    p.renderByMode = function (mode, isReDraw) {
        if (this.isRenderMode(mode) && !isReDraw) return;

        this.renderMode = mode;
        this._startContentRender(mode);
    };

    p._updateOpacity = function () {
        if (this.visible === false) {
            this.svgGroup.attr({ opacity: 0 });
        } else {
            this.svgGroup.removeAttr('opacity');
            this._setPosition();
        }
    };

    p._updateShadow = function () {
        var shadow = this.shadow;
        var fill;

        if (shadow) fill = Entry.Utils.colorDarken(this._schema.color, 0.7);else fill = 'transparent';
    };

    p._setMovable = function () {
        this.movable = this.block.isMovable() !== null ? this.block.isMovable() : this._skeleton.movable !== undefined ? this._skeleton.movable : true;
    };

    p._setReadOnly = function () {
        this.readOnly = this.block.isReadOnly() !== null ? this.block.isReadOnly() : this._skeleton.readOnly !== undefined ? this._skeleton.readOnly : false;
    };

    p._setCopyable = function () {
        this.copyable = this.block.isCopyable() !== null ? this.block.isCopyable() : this._skeleton.copyable !== undefined ? this._skeleton.copyable : true;
    };

    p.bumpAway = function (distance, delay) {
        var that = this;
        distance = distance || 15;
        if (delay) {
            var oldX = this.x,
                oldY = this.y;
            window.setTimeout(function () {
                //only when position not changed
                if (oldX === that.x && oldY === that.y) that._moveBy(distance, distance, false);
            }, delay);
        } else that._moveBy(distance, distance, false);
    };

    p.bindPrev = function (prevBlock, isDestroy) {
        if (prevBlock) {
            this._toLocalCoordinate(prevBlock.view._nextGroup);
            var nextBlock = prevBlock.getNextBlock();
            if (nextBlock) if (nextBlock && nextBlock !== this.block) {
                var endBlock = this.block.getLastBlock();
                if (isDestroy) nextBlock.view._toLocalCoordinate(prevBlock.view._nextGroup);else if (endBlock.view.magnet.next) nextBlock.view._toLocalCoordinate(endBlock.view._nextGroup);else {
                    nextBlock.view._toGlobalCoordinate();
                    nextBlock.separate();
                    nextBlock.view.bumpAway(null, 100);
                }
            }
        } else {
            prevBlock = this.block.getPrevBlock();
            if (prevBlock) {
                var prevBlockView = prevBlock.view;

                this._toLocalCoordinate(prevBlockView._nextGroup);
                var nextBlock = this.block.getNextBlock();
                if (nextBlock && nextBlock.view) nextBlock.view._toLocalCoordinate(this._nextGroup);
            }
        }
    };

    p.getAbsoluteCoordinate = function (dragMode) {
        dragMode = dragMode !== undefined ? dragMode : this.dragMode;
        if (dragMode === Entry.DRAG_MODE_DRAG) {
            return {
                x: this.x,
                y: this.y
            };
        }
        var threadView = this.block.getThread().view;
        var pos = threadView.requestAbsoluteCoordinate(this);
        pos.x += this.x;
        pos.y += this.y;
        return pos;
    };

    p.getBelowHeight = function () {
        return this.block.getThread().view.requestPartHeight(this);
    };

    p._updateDisplay = function () {
        if (this.display) {
            $(this.svgGroup).removeAttr('display');
            this._setPosition();
        } else {
            this.svgGroup.attr({
                display: 'none'
            });
        }
    };

    p._updateColor = function () {
        var fillColor = this._schema.color;
        if (this.block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN || this.block.emphasized) {
            var emphasizedColor = this._schema.emphasizedColor;
            if (!emphasizedColor) {
                fillColor = Entry.Utils.getEmphasizeColor(fillColor);
            } else {
                fillColor = emphasizedColor;
            }
        }
        this._fillColor = fillColor;
        this._path.attr({ fill: fillColor });
        this._updateContents();
    };

    p._updateContents = function (isReDraw) {
        this._contents.forEach(function (c) {
            c.renderStart(undefined, undefined, this.renderMode, isReDraw);
        }.bind(this));
        this.alignContent(false);
    };

    p._destroyObservers = function () {
        var observers = this._observers;
        while (observers.length) {
            observers.pop().destroy();
        }
    };

    p.addActivated = function () {
        this.svgGroup.addClass('activated');
    };

    p.removeActivated = function () {
        this.svgGroup.removeClass('activated');
    };

    p.reDraw = function () {
        if (!(this.visible && this.display)) return;

        var block = this.block;
        this._updateContents(true);

        var statements = block.statements || [];
        for (var i = 0; i < statements.length; i++) {
            var statement = statements[i];
            statement.view.reDraw();
        }

        var extensions = this._extensions || [];
        for (var i = 0; i < extensions.length; i++) {
            var ext = extensions[i];
            ext.updatePos && ext.updatePos();
        }
    };

    p.getParam = function (index) {
        return this._paramMap[index];
    };

    p.getDataUrl = function (notClone, notPng) {
        var deferred = $.Deferred();
        var svgData = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 %W %H">(svgGroup)(defs)</svg>';
        var bBox = this.svgGroup.getBoundingClientRect();
        var svgGroup = notClone ? this.svgGroup : this.svgGroup.cloneNode(true);
        var box = this._skeleton.box(this);
        var scale = notPng ? 1 : 1.5;
        var fontWeight = isWindow7() ? 0.9 : 0.95;
        if (this.type.indexOf('func_') > -1) fontWeight *= 0.99;
        svgGroup.setAttribute('transform', 'scale(%SCALE) translate(%X,%Y)'.replace('%X', -box.offsetX).replace('%Y', -box.offsetY).replace('%SCALE', scale));

        var defs = this.getBoard().svgDom.find('defs');

        var images = svgGroup.getElementsByTagName('image');
        var texts = svgGroup.getElementsByTagName('text');

        var fontFamily = "'nanumBarunRegular', 'NanumGothic', '나눔고딕','NanumGothicWeb', '맑은 고딕', 'Malgun Gothic', Dotum";
        var boldTypes = ['≥', '≤'];
        var notResizeTypes = ['≥', '≤', '-', '>', '<', '=', '+', '-', 'x', '/'];

        _.toArray(texts).forEach(function (text) {
            text.setAttribute('font-family', fontFamily);
            var size = parseInt(text.getAttribute('font-size'));
            var content = $(text).text();
            if (_.contains(boldTypes, content)) {
                text.setAttribute('font-weight', '500');
            }

            if (content == 'q') {
                var y = parseInt(text.getAttribute('y'));
                text.setAttribute('y', y - 1);
            }

            if (_.contains(notResizeTypes, content)) {
                text.setAttribute('font-size', size + 'px');
            } else {
                text.setAttribute('font-size', size * fontWeight + 'px');
            }
            text.setAttribute('alignment-baseline', 'baseline');
        });

        var counts = 0;
        if (!images.length) {
            processSvg();
        } else {
            _.toArray(images).forEach(function (img) {
                var href = img.getAttribute('href');
                loadImage(href, img.getAttribute('width'), img.getAttribute('height')).then(function (src) {
                    img.setAttribute('href', src);
                    if (++counts == images.length) return processSvg();
                });
            });
        }

        return deferred.promise();

        function processSvg() {
            svgData = svgData.replace('(svgGroup)', new XMLSerializer().serializeToString(svgGroup)).replace('%W', bBox.width * scale).replace('%H', bBox.height * scale).replace('(defs)', new XMLSerializer().serializeToString(defs[0])).replace(/>\s+/g, '>').replace(/\s+</g, '<');
            var src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgData)));
            svgData = null;
            if (notPng) {
                deferred.resolve({
                    src: src,
                    width: bBox.width,
                    height: bBox.height
                });
                svgGroup = null;
            } else {
                loadImage(src, bBox.width, bBox.height, 1.5).then(function (src) {
                    svgGroup = null;
                    deferred.resolve({
                        src: src,
                        width: bBox.width,
                        height: bBox.height
                    });
                }, function (err) {
                    deferred.reject('error occured');
                });
            }
            src = null;
        }

        function loadImage(src, width, height) {
            var multiplier = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

            return new Promise(function (resolve, reject) {
                if (Entry.BlockView.pngMap[src] !== undefined) {
                    return resolve(Entry.BlockView.pngMap[src]);
                }

                width *= multiplier;
                height *= multiplier;
                //float point cropped
                width = Math.ceil(width);
                height = Math.ceil(height);

                var img = document.createElement('img');
                img.crossOrigin = 'Anonymous';
                var canvas = document.createElement('canvas');

                canvas.width = width;
                canvas.height = height;
                var ctx = canvas.getContext('2d');

                img.onload = function () {
                    ctx.drawImage(img, 0, 0, width, height);
                    var data = canvas.toDataURL('image/png');
                    if (/\.png$/.test(src)) Entry.BlockView.pngMap[src] = data;
                    return resolve(data);
                };

                img.onerror = function () {
                    return reject('error occured');
                };
                img.src = src;
            });
        }

        function isWindow7() {
            var platform = window.platform;
            if (platform && platform.name.toLowerCase() === 'windows' && platform.version[0] === '7') {
                return true;
            }
            return false;
        }
    };

    p.downloadAsImage = function (i) {
        this.getDataUrl().then(function (data) {
            var download = document.createElement('a');
            download.href = data.src;
            var name = '엔트리 블록';
            if (i) name += i;
            download.download = name + '.png';
            download.click();
        });
    };

    p._rightClick = function (e, eventSource) {
        var disposeEvent = Entry.disposeEvent;
        if (disposeEvent) disposeEvent.notify(e);

        var block = this.block;

        //if long pressed block is function_general block
        //edit function
        if (this.isInBlockMenu && eventSource === 'longPress' && block.getFuncId()) {
            return this._schema.events.dblclick[0](this);
        }

        var _Entry$Utils$convertM = Entry.Utils.convertMouseEvent(e),
            x = _Entry$Utils$convertM.clientX,
            y = _Entry$Utils$convertM.clientY;

        return Entry.ContextMenu.show(_getOptions(this), null, { x: x, y: y });

        //helper functon get get context options
        function _getOptions(blockView) {
            var isBoardReadOnly = blockView._board.readOnly,
                block = blockView.block,
                isInBlockMenu = blockView.isInBlockMenu,
                copyable = blockView.copyable,
                _Lang = Lang,
                _Lang$Blocks = _Lang.Blocks,
                Duplication_option = _Lang$Blocks.Duplication_option,
                CONTEXT_COPY_option = _Lang$Blocks.CONTEXT_COPY_option,
                Delete_Blocks = _Lang$Blocks.Delete_Blocks,
                save_as_image = _Lang.Menus.save_as_image;


            var copyAndPaste = {
                text: Duplication_option,
                enable: copyable && !isBoardReadOnly,
                callback: function callback() {
                    Entry.do('cloneBlock', block.copy());
                }
            };

            var copy = {
                text: CONTEXT_COPY_option,
                enable: copyable && !isBoardReadOnly,
                callback: function callback() {
                    block.copyToClipboard();
                }
            };

            var remove = {
                text: Delete_Blocks,
                enable: block.isDeletable() && !isBoardReadOnly,
                callback: function callback() {
                    Entry.do('destroyBlock', block);
                }
            };

            var download = {
                text: save_as_image,
                callback: function callback() {
                    blockView.downloadAsImage();
                }
            };

            var options = [];
            if (_isDownloadable()) {
                options.push(download);
            }

            if (!isInBlockMenu) {
                options = [copyAndPaste, copy, remove].concat(_toConsumableArray(options));
            }

            return options;

            function _isDownloadable() {
                return Entry.Utils.isChrome() && Entry.type == 'workspace' && !Entry.isMobile();
            }
        }
    };

    p.clone = function () {
        return this.svgGroup.cloneNode(true);
    };

    p.setBackgroundPath = function () {
        var board = this.getBoard();
        if (board.dragBlock) return;

        this.resetBackgroundPath();

        var originPath = this._path;

        var clonedPath = originPath.cloneNode(true);
        clonedPath.setAttribute('class', 'blockBackgroundPath');
        clonedPath.setAttribute('fill', this._fillColor);

        this._backgroundPath = clonedPath;
        this.pathGroup.insertBefore(clonedPath, originPath);

        board.enablePattern();
        originPath.attr({
            fill: 'url(#blockHoverPattern_' + board.suffix + ')'
        });
    };

    p.resetBackgroundPath = function () {
        var board = this.getBoard();
        if (!this._backgroundPath || !board || !board.disablePattern) return;

        board.disablePattern();
        this._backgroundPath && $(this._backgroundPath).remove();
        this._backgroundPath = null;
        this._path.attr({ fill: this._fillColor });
    };

    p._getTemplate = function (renderMode) {
        var schema = this._schema;
        var defaultTemplate = schema.template ? schema.template : Lang.template[this.block.type];
        var template;
        var board = this.getBoard();

        if (renderMode === Entry.BlockView.RENDER_MODE_TEXT) {
            var syntax;
            var workspace = board.workspace;
            if (workspace && workspace.vimBoard) {
                syntax = workspace.vimBoard.getBlockSyntax(this);
            } else {
                if (board.getBlockSyntax) syntax = board.getBlockSyntax(this, renderMode);
            }

            if (syntax) {
                if (typeof syntax === 'string') template = syntax;else template = syntax.template;
            }
        }

        return template || defaultTemplate;
    };

    p._getSchemaParams = function (mode) {
        var schema = this._schema;
        var params = schema.params;
        if (mode === Entry.BlockView.RENDER_MODE_TEXT) {
            var workspace = this.getBoard().workspace;
            if (workspace && workspace.vimBoard) {
                var syntax = workspace.vimBoard.getBlockSyntax(this);
                if (syntax && syntax.textParams) params = syntax.textParams;
            }
        }
        return params;
    };

    p.detach = function () {
        this.svgGroup.remove();
    };

    p.attach = function (target) {
        (target || this._board.svgBlockGroup).appendChild(this.svgGroup);
    };

    p.getMagnet = function (query) {
        var selector = query.shift() || 'next';
        var halfWidth = query.shift();
        if (halfWidth === undefined) halfWidth = 20;
        return {
            getBoundingClientRect: function () {
                var coord = this.getAbsoluteCoordinate(),
                    boardOffset = this._board.relativeOffset,
                    magnet = this.magnet[selector];
                return {
                    top: coord.y + boardOffset.top + magnet.y - halfWidth,
                    left: coord.x + boardOffset.left + magnet.x - halfWidth,
                    width: 2 * halfWidth,
                    height: 2 * halfWidth
                };
            }.bind(this)
        };
    };

    p.isRenderMode = function (mode) {
        return this.renderMode === mode;
    };

    p._setHoverBlockView = function (data) {
        if (!data) return;

        var that = data.that,
            blockView = data.blockView;


        var target = that.getBoard();
        target = target && target.workspace;
        target && target.setHoverBlockView(blockView);
    };

    p.setHoverBlockView = p._setHoverBlockView;

    p.getFields = function () {
        if (!this._schema) {
            return [];
        }

        var THREAD = Entry.Thread,
            FIELD_BLOCK = Entry.FieldBlock,
            FIELD_OUTPUT = Entry.FieldOutput;

        return (this._statements || []).reduce(function (fields, statement) {
            statement = statement && statement._thread;
            if (!(statement instanceof THREAD)) {
                return fields;
            }

            return fields.concat(statement.view.getFields());
        }, (this._contents || []).reduce(function (fields, c) {
            if (!c) return fields;

            fields.push(c);

            if (c instanceof FIELD_BLOCK || c instanceof FIELD_OUTPUT) {
                //some output block doesn't have value block
                var valueBlock = c.getValueBlock && c.getValueBlock();
                if (!valueBlock) {
                    return fields;
                }
                fields = fields.concat(valueBlock.view.getFields());
            }

            return fields;
        }, []));
    };
})(Entry.BlockView.prototype);

/***/ }),

/***/ "./src/playground/blocks/block_albert.js":
/*!***********************************************!*\
  !*** ./src/playground/blocks/block_albert.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Albert = {
    PORT_MAP: {
        leftWheel: 0,
        rightWheel: 0,
        buzzer: 0,
        leftEye: 0,
        rightEye: 0,
        note: 0,
        bodyLed: 0,
        frontLed: 0,
        padWidth: 0,
        padHeight: 0
    },
    setZero: function setZero() {
        var portMap = Entry.Albert.PORT_MAP;
        var sq = Entry.hw.sendQueue;
        for (var port in portMap) {
            sq[port] = portMap[port];
        }
        Entry.hw.update();
        var albert = Entry.Albert;
        albert.tempo = 60;
        albert.removeAllTimeouts();
    },
    monitorTemplate: {
        imgPath: 'hw/albert.png',
        width: 387,
        height: 503,
        listPorts: {
            temperature: {
                name: Lang.Blocks.ALBERT_sensor_temperature,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            accelerationX: {
                name: Lang.Blocks.ALBERT_sensor_acceleration_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            accelerationY: {
                name: Lang.Blocks.ALBERT_sensor_acceleration_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            accelerationZ: {
                name: Lang.Blocks.ALBERT_sensor_acceleration_z,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            frontOid: {
                name: Lang.Blocks.ALBERT_sensor_front_oid,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            backOid: {
                name: Lang.Blocks.ALBERT_sensor_back_oid,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            positionX: {
                name: Lang.Blocks.ALBERT_sensor_position_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            positionY: {
                name: Lang.Blocks.ALBERT_sensor_position_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            orientation: {
                name: Lang.Blocks.ALBERT_sensor_orientation,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            buzzer: {
                name: Lang.Hw.buzzer,
                type: 'output',
                pos: { x: 0, y: 0 }
            },
            note: { name: Lang.Hw.note, type: 'output', pos: { x: 0, y: 0 } }
        },
        ports: {
            leftProximity: {
                name: Lang.Blocks.ALBERT_sensor_left_proximity,
                type: 'input',
                pos: { x: 178, y: 401 }
            },
            rightProximity: {
                name: Lang.Blocks.ALBERT_sensor_right_proximity,
                type: 'input',
                pos: { x: 66, y: 359 }
            },
            battery: {
                name: Lang.Blocks.ALBERT_sensor_battery,
                type: 'input',
                pos: { x: 88, y: 368 }
            },
            light: {
                name: Lang.Blocks.ALBERT_sensor_light,
                type: 'input',
                pos: { x: 127, y: 391 }
            },
            leftWheel: {
                name: Lang.Hw.leftWheel,
                type: 'output',
                pos: { x: 299, y: 406 }
            },
            rightWheel: {
                name: Lang.Hw.rightWheel,
                type: 'output',
                pos: { x: 22, y: 325 }
            },
            leftEye: {
                name: Lang.Hw.leftEye,
                type: 'output',
                pos: { x: 260, y: 26 }
            },
            rightEye: {
                name: Lang.Hw.rightEye,
                type: 'output',
                pos: { x: 164, y: 13 }
            },
            bodyLed: {
                name: Lang.Hw.body + ' ' + Lang.Hw.led_en,
                type: 'output',
                pos: { x: 367, y: 308 }
            },
            frontLed: {
                name: Lang.Hw.front + ' ' + Lang.Hw.led_en,
                pos: { x: 117, y: 410 }
            }
        },
        mode: 'both'
    },
    tempo: 60,
    timeouts: [],
    removeTimeout: function removeTimeout(id) {
        clearTimeout(id);
        var timeouts = this.timeouts;
        var index = timeouts.indexOf(id);
        if (index >= 0) {
            timeouts.splice(index, 1);
        }
    },
    removeAllTimeouts: function removeAllTimeouts() {
        var timeouts = this.timeouts;
        for (var i in timeouts) {
            clearTimeout(timeouts[i]);
        }
        this.timeouts = [];
    },
    controller: {
        PI: 3.14159265,
        PI2: 6.2831853,
        prevDirection: 0,
        prevDirectionFine: 0,
        directionFineCount: 0,
        positionCount: 0,
        finalPositionCount: 0,
        GAIN_ANGLE: 30,
        GAIN_ANGLE_FINE: 30,
        GAIN_POSITION_FINE: 30,
        STRAIGHT_SPEED: 20,
        MAX_BASE_SPEED: 20,
        GAIN_BASE_SPEED: 1.0,
        GAIN_POSITION: 35,
        POSITION_TOLERANCE_FINE: 3,
        POSITION_TOLERANCE_FINE_LARGE: 5,
        POSITION_TOLERANCE_ROUGH: 5,
        POSITION_TOLERANCE_ROUGH_LARGE: 10,
        ORIENTATION_TOLERANCE_FINE: 0.08,
        ORIENTATION_TOLERANCE_ROUGH: 0.09,
        ORIENTATION_TOLERANCE_ROUGH_LARGE: 0.18,
        MINIMUM_WHEEL_SPEED: 18,
        MINIMUM_WHEEL_SPEED_FINE: 15,
        clear: function clear() {
            this.prevDirection = 0;
            this.prevDirectionFine = 0;
            this.directionFineCount = 0;
            this.positionCount = 0;
            this.finalPositionCount = 0;
        },
        controlAngleFine: function controlAngleFine(currentRadian, targetRadian) {
            var sq = Entry.hw.sendQueue;
            var diff = this.validateRadian(targetRadian - currentRadian);
            var mag = Math.abs(diff);
            if (mag < this.ORIENTATION_TOLERANCE_FINE) return false;

            var direction = diff > 0 ? 1 : -1;
            if (direction * this.prevDirectionFine < 0) {
                if (++this.directionFineCount > 5) return false;
            }
            this.prevDirectionFine = direction;

            var value = 0;
            if (diff > 0) {
                value = Math.log(1 + mag) * this.GAIN_ANGLE_FINE;
                if (value < this.MINIMUM_WHEEL_SPEED) value = this.MINIMUM_WHEEL_SPEED;
            } else {
                value = -Math.log(1 + mag) * this.GAIN_ANGLE_FINE;
                if (value > -this.MINIMUM_WHEEL_SPEED) value = -this.MINIMUM_WHEEL_SPEED;
            }
            value = parseInt(value);
            sq.leftWheel = -value;
            sq.rightWheel = value;
            return true;
        },
        controlAngle: function controlAngle(currentRadian, targetRadian) {
            var sq = Entry.hw.sendQueue;
            var diff = this.validateRadian(targetRadian - currentRadian);
            var mag = Math.abs(diff);
            if (mag < this.ORIENTATION_TOLERANCE_ROUGH) return false;

            var direction = diff > 0 ? 1 : -1;
            if (mag < this.ORIENTATION_TOLERANCE_ROUGH_LARGE && direction * this.prevDirection < 0) return false;
            this.prevDirection = direction;

            var value = 0;
            if (diff > 0) {
                value = Math.log(1 + mag) * this.GAIN_ANGLE;
                if (value < this.MINIMUM_WHEEL_SPEED) value = this.MINIMUM_WHEEL_SPEED;
            } else {
                value = -Math.log(1 + mag) * this.GAIN_ANGLE;
                if (value > -this.MINIMUM_WHEEL_SPEED) value = -this.MINIMUM_WHEEL_SPEED;
            }
            value = parseInt(value);
            sq.leftWheel = -value;
            sq.rightWheel = value;
            return true;
        },
        controlPositionFine: function controlPositionFine(currentX, currentY, currentRadian, targetX, targetY) {
            var sq = Entry.hw.sendQueue;
            var targetRadian = Math.atan2(targetY - currentY, targetX - currentX);
            var diff = this.validateRadian(targetRadian - currentRadian);
            var mag = Math.abs(diff);
            var ex = targetX - currentX;
            var ey = targetY - currentY;
            var dist = Math.sqrt(ex * ex + ey * ey);
            if (dist < this.POSITION_TOLERANCE_FINE) return false;
            if (dist < this.POSITION_TOLERANCE_FINE_LARGE) {
                if (++this.finalPositionCount > 5) {
                    this.finalPositionCount = 0;
                    return false;
                }
            }
            var value = 0;
            if (diff > 0) value = Math.log(1 + mag) * this.GAIN_POSITION_FINE;else value = -Math.log(1 + mag) * this.GAIN_POSITION_FINE;
            value = parseInt(value);
            sq.leftWheel = this.MINIMUM_WHEEL_SPEED_FINE - value;
            sq.rightWheel = this.MINIMUM_WHEEL_SPEED_FINE + value;
            return true;
        },
        controlPosition: function controlPosition(currentX, currentY, currentRadian, targetX, targetY) {
            var sq = Entry.hw.sendQueue;
            var targetRadian = Math.atan2(targetY - currentY, targetX - currentX);
            var diff = this.validateRadian(targetRadian - currentRadian);
            var mag = Math.abs(diff);
            var ex = targetX - currentX;
            var ey = targetY - currentY;
            var dist = Math.sqrt(ex * ex + ey * ey);
            if (dist < this.POSITION_TOLERANCE_ROUGH) return false;
            if (dist < this.POSITION_TOLERANCE_ROUGH_LARGE) {
                if (++this.positionCount > 10) {
                    this.positionCount = 0;
                    return false;
                }
            } else {
                this.positionCount = 0;
            }
            if (mag < 0.01) {
                sq.leftWheel = this.STRAIGHT_SPEED;
                sq.rightWheel = this.STRAIGHT_SPEED;
            } else {
                var base = (this.MINIMUM_WHEEL_SPEED + 0.5 / mag) * this.GAIN_BASE_SPEED;
                if (base > this.MAX_BASE_SPEED) base = this.MAX_BASE_SPEED;

                var value = 0;
                if (diff > 0) value = Math.log(1 + mag) * this.GAIN_POSITION;else value = -Math.log(1 + mag) * this.GAIN_POSITION;
                base = parseInt(base);
                value = parseInt(value);
                sq.leftWheel = base - value;
                sq.rightWheel = base + value;
            }
            return true;
        },
        validateRadian: function validateRadian(radian) {
            if (radian > this.PI) return radian - this.PI2;else if (radian < -this.PI) return radian + this.PI2;
            return radian;
        },
        toRadian: function toRadian(degree) {
            return degree * 3.14159265 / 180.0;
        }
    },
    name: 'albert',
    url: 'http://albert.school/',
    imageName: 'albertschool.png',
    title: {
        ko: '알버트 스쿨버전',
        en: 'Albert School'
    }
};

Entry.Albert.getBlocks = function () {
    return {
        //region albert 알버트
        albert_hand_found: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [],
            events: {},
            def: {
                params: [],
                type: 'albert_hand_found'
            },
            class: 'albert_sensor',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                return pd.leftProximity > 40 || pd.rightProximity > 40;
            },
            syntax: { js: [], py: ['Albert.hand_found()'] }
        },
        albert_is_oid_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_front_oid, 'FRONT'], [Lang.Blocks.ALBERT_back_oid, 'BACK']],
                value: 'FRONT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['0']
                }],
                type: 'albert_is_oid_value'
            },
            paramsKeyMap: {
                OID: 0,
                VALUE: 1
            },
            class: 'albert_sensor',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var oid = script.getField('OID', script);
                var value = script.getNumberValue('VALUE');
                if (oid == 'FRONT') {
                    return pd.frontOid == value;
                } else {
                    return pd.backOid == value;
                }
            }
        },
        albert_value: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.ALBERT_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.ALBERT_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.ALBERT_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.ALBERT_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.ALBERT_sensor_front_oid, 'frontOid'], [Lang.Blocks.ALBERT_sensor_back_oid, 'backOid'], [Lang.Blocks.ALBERT_sensor_position_x, 'positionX'], [Lang.Blocks.ALBERT_sensor_position_y, 'positionY'], [Lang.Blocks.ALBERT_sensor_orientation, 'orientation'], [Lang.Blocks.ALBERT_sensor_light, 'light'], [Lang.Blocks.ALBERT_sensor_temperature, 'temperature'], [Lang.Blocks.ALBERT_sensor_battery, 'battery'], [Lang.Blocks.ALBERT_sensor_signal_strength, 'signalStrength']],
                value: 'leftProximity',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'albert_value'
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'albert_sensor',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('DEVICE');
                return pd[dev];
            },
            syntax: { js: [], py: ['Albert.value(%1)'] }
        },
        albert_move_forward_for_secs: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'albert_move_forward_for_secs'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'albert_wheel',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    sq.leftWheel = 30;
                    sq.rightWheel = 30;
                    var timeValue = script.getNumberValue('VALUE') * 1000;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Albert.removeTimeout(timer);
                    }, timeValue);
                    Entry.Albert.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Albert.move_forward_for_secs(%1)'] }
        },
        albert_move_backward_for_secs: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'albert_move_backward_for_secs'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'albert_wheel',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    sq.leftWheel = -30;
                    sq.rightWheel = -30;
                    var timeValue = script.getNumberValue('VALUE') * 1000;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Albert.removeTimeout(timer);
                    }, timeValue);
                    Entry.Albert.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Albert.move_backward_for_secs(%1)'] }
        },
        albert_turn_for_secs: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_turn_left, 'LEFT'], [Lang.Blocks.ALBERT_turn_right, 'RIGHT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'albert_turn_for_secs',
                id: 'como'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1
            },
            class: 'albert_wheel',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    var direction = script.getField('DIRECTION', script);
                    if (direction == 'LEFT') {
                        sq.leftWheel = -30;
                        sq.rightWheel = 30;
                    } else {
                        sq.leftWheel = 30;
                        sq.rightWheel = -30;
                    }
                    var timeValue = script.getNumberValue('VALUE') * 1000;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Albert.removeTimeout(timer);
                    }, timeValue);
                    Entry.Albert.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Albert.turn_for_secs(%1, %2)'] }
        },
        albert_change_both_wheels_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['10']
                }, {
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'albert_change_both_wheels_by'
            },
            paramsKeyMap: {
                LEFT: 0,
                RIGHT: 1
            },
            class: 'albert_wheel',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var left = script.getNumberValue('LEFT');
                var right = script.getNumberValue('RIGHT');
                sq.leftWheel = sq.leftWheel != undefined ? sq.leftWheel + left : left;
                sq.rightWheel = sq.rightWheel != undefined ? sq.rightWheel + right : right;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.change_both_wheels(%1, %2)'] }
        },
        albert_set_both_wheels_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['30']
                }, {
                    type: 'text',
                    params: ['30']
                }, null],
                type: 'albert_set_both_wheels_to'
            },
            paramsKeyMap: {
                LEFT: 0,
                RIGHT: 1
            },
            class: 'albert_wheel',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                sq.leftWheel = script.getNumberValue('LEFT');
                sq.rightWheel = script.getNumberValue('RIGHT');
                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.set_both_wheels(%1, %2)'] }
        },
        albert_change_wheel_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_left_wheel, 'LEFT'], [Lang.Blocks.ALBERT_right_wheel, 'RIGHT'], [Lang.Blocks.ALBERT_both_wheels, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'albert_change_wheel_by'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1
            },
            class: 'albert_wheel',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var direction = script.getField('DIRECTION');
                var value = script.getNumberValue('VALUE');
                if (direction == 'LEFT') {
                    sq.leftWheel = sq.leftWheel != undefined ? sq.leftWheel + value : value;
                } else if (direction == 'RIGHT') {
                    sq.rightWheel = sq.rightWheel != undefined ? sq.rightWheel + value : value;
                } else {
                    sq.leftWheel = sq.leftWheel != undefined ? sq.leftWheel + value : value;
                    sq.rightWheel = sq.rightWheel != undefined ? sq.rightWheel + value : value;
                }
                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.change_wheel(%1, %2)'] }
        },
        albert_set_wheel_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_left_wheel, 'LEFT'], [Lang.Blocks.ALBERT_right_wheel, 'RIGHT'], [Lang.Blocks.ALBERT_both_wheels, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['30']
                }, null],
                type: 'albert_set_wheel_to'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1
            },
            class: 'albert_wheel',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var direction = script.getField('DIRECTION');
                var value = script.getNumberValue('VALUE');
                if (direction == 'LEFT') {
                    sq.leftWheel = value;
                } else if (direction == 'RIGHT') {
                    sq.rightWheel = value;
                } else {
                    sq.leftWheel = value;
                    sq.rightWheel = value;
                }
                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.set_wheel(%1, %2)'] }
        },
        albert_stop: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'albert_stop',
                id: '4adb'
            },
            class: 'albert_wheel',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                sq.leftWheel = 0;
                sq.rightWheel = 0;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.stop()'] }
        },
        albert_set_pad_size_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['108']
                }, {
                    type: 'text',
                    params: ['76']
                }, null],
                type: 'albert_set_pad_size_to',
                id: '5mhg'
            },
            paramsKeyMap: {
                WIDTH: 0,
                HEIGHT: 1
            },
            class: 'albert_wheel',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                sq.padWidth = script.getNumberValue('WIDTH');
                sq.padHeight = script.getNumberValue('HEIGHT');
                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.set_pad_size(%1, %2)'] }
        },
        albert_move_to_x_y_on_board: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'albert_move_to_x_y_on_board'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1
            },
            class: 'albert_wheel',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var controller = Entry.Albert.controller;
                if (!script.isStart) {
                    script.isStart = true;
                    script.isMoving = true;
                    script.initialized = false;
                    script.boardState = 1;
                    script.x = -1;
                    script.y = -1;
                    script.theta = -200;
                    script.targetX = script.getNumberValue('X');
                    script.targetY = script.getNumberValue('Y');
                    controller.clear();
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    return script;
                } else if (script.isMoving) {
                    if (pd.positionX >= 0) script.x = pd.positionX;
                    if (pd.positionY >= 0) script.y = pd.positionY;
                    script.theta = pd.orientation;
                    switch (script.boardState) {
                        case 1:
                            {
                                if (script.initialized == false) {
                                    if (script.x < 0 || script.y < 0) {
                                        sq.leftWheel = 20;
                                        sq.rightWheel = -20;
                                        return script;
                                    }
                                    script.initialized = true;
                                }
                                var current = controller.toRadian(script.theta);
                                var dx = script.targetX - script.x;
                                var dy = script.targetY - script.y;
                                var target = Math.atan2(dy, dx);
                                if (controller.controlAngle(current, target) == false) script.boardState = 2;
                                break;
                            }
                        case 2:
                            {
                                if (controller.controlPosition(script.x, script.y, controller.toRadian(script.theta), script.targetX, script.targetY) == false) script.boardState = 3;
                                break;
                            }
                        case 3:
                            {
                                if (controller.controlPositionFine(script.x, script.y, controller.toRadian(script.theta), script.targetX, script.targetY) == false) {
                                    sq.leftWheel = 0;
                                    sq.rightWheel = 0;
                                    script.isMoving = false;
                                }
                                break;
                            }
                    }
                    return script;
                } else {
                    delete script.isStart;
                    delete script.isMoving;
                    delete script.initialized;
                    delete script.boardState;
                    delete script.x;
                    delete script.y;
                    delete script.theta;
                    delete script.targetX;
                    delete script.targetY;
                    Entry.engine.isContinue = false;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    return script.callReturn();
                }
            }
        },
        albert_set_orientation_on_board: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'albert_set_orientation_on_board'
            },
            paramsKeyMap: {
                ORIENTATION: 0
            },
            class: 'albert_wheel',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var controller = Entry.Albert.controller;
                if (!script.isStart) {
                    script.isStart = true;
                    script.isMoving = true;
                    script.boardState = 1;
                    script.theta = -200;
                    script.targetTheta = script.getNumberValue('ORIENTATION');
                    controller.clear();
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    return script;
                } else if (script.isMoving) {
                    script.theta = pd.orientation;
                    switch (script.boardState) {
                        case 1:
                            {
                                var current = controller.toRadian(script.theta);
                                var target = controller.toRadian(script.targetTheta);
                                if (controller.controlAngle(current, target) == false) script.boardState = 2;
                                break;
                            }
                        case 2:
                            {
                                var current = controller.toRadian(script.theta);
                                var target = controller.toRadian(script.targetTheta);
                                if (controller.controlAngleFine(current, target) == false) {
                                    sq.leftWheel = 0;
                                    sq.rightWheel = 0;
                                    script.isMoving = false;
                                }
                                break;
                            }
                    }
                    return script;
                } else {
                    delete script.isStart;
                    delete script.isMoving;
                    delete script.boardState;
                    delete script.theta;
                    delete script.targetTheta;
                    Entry.engine.isContinue = false;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    return script.callReturn();
                }
            }
        },
        albert_set_eye_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_left_eye, 'LEFT'], [Lang.Blocks.ALBERT_right_eye, 'RIGHT'], [Lang.Blocks.ALBERT_both_eyes, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_color_red, '4'], [Lang.Blocks.ALBERT_color_yellow, '6'], [Lang.Blocks.ALBERT_color_green, '2'], [Lang.Blocks.ALBERT_color_cyan, '3'], [Lang.Blocks.ALBERT_color_blue, '1'], [Lang.Blocks.ALBERT_color_magenta, '5'], [Lang.Blocks.ALBERT_color_white, '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'albert_set_eye_to'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                COLOR: 1
            },
            class: 'albert_led',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var direction = script.getField('DIRECTION', script);
                var color = Number(script.getField('COLOR', script));
                if (direction == 'LEFT') {
                    sq.leftEye = color;
                } else if (direction == 'RIGHT') {
                    sq.rightEye = color;
                } else {
                    sq.leftEye = color;
                    sq.rightEye = color;
                }
                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.set_eye(%1, %2)'] }
        },
        albert_clear_eye: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_left_eye, 'LEFT'], [Lang.Blocks.ALBERT_right_eye, 'RIGHT'], [Lang.Blocks.ALBERT_both_eyes, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'albert_clear_eye'
            },
            paramsKeyMap: {
                DIRECTION: 0
            },
            class: 'albert_led',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var direction = script.getField('DIRECTION', script);
                if (direction == 'LEFT') {
                    sq.leftEye = 0;
                } else if (direction == 'RIGHT') {
                    sq.rightEye = 0;
                } else {
                    sq.leftEye = 0;
                    sq.rightEye = 0;
                }
                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.clear_eye(%1)'] }
        },
        albert_body_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_turn_on, 'ON'], [Lang.Blocks.ALBERT_turn_off, 'OFF']],
                value: 'ON',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'albert_body_led'
            },
            paramsKeyMap: {
                STATE: 0
            },
            class: 'albert_led',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var state = script.getField('STATE', script);
                if (state == 'ON') sq.bodyLed = 1;else sq.bodyLed = 0;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.body_led(%1)'] }
        },
        albert_front_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_turn_on, 'ON'], [Lang.Blocks.ALBERT_turn_off, 'OFF']],
                value: 'ON',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'albert_front_led'
            },
            paramsKeyMap: {
                STATE: 0
            },
            class: 'albert_led',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var state = script.getField('STATE', script);
                if (state == 'ON') sq.frontLed = 1;else sq.frontLed = 0;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.front_led(%1)'] }
        },
        albert_beep: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'albert_beep'
            },
            class: 'albert_buzzer',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    sq.buzzer = 440;
                    sq.note = 0;
                    var timeValue = 0.2 * 1000;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Albert.removeTimeout(timer);
                    }, timeValue);
                    Entry.Albert.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    sq.buzzer = 0;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Albert.beep()'] }
        },
        albert_change_buzzer_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'albert_change_buzzer_by'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'albert_buzzer',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var value = script.getNumberValue('VALUE');
                sq.buzzer = sq.buzzer != undefined ? sq.buzzer + value : value;
                sq.note = 0;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.change_buzzer(%1)'] }
        },
        albert_set_buzzer_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'albert_set_buzzer_to'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'albert_buzzer',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                sq.buzzer = script.getNumberValue('VALUE');
                sq.note = 0;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.set_buzzer(%1)'] }
        },
        albert_clear_buzzer: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'albert_clear_buzzer'
            },
            class: 'albert_buzzer',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                sq.buzzer = 0;
                sq.note = 0;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.clear_buzzer()'] }
        },
        albert_play_note_for: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_note_c + '', '4'], [Lang.Blocks.ALBERT_note_c + '#', '5'], [Lang.Blocks.ALBERT_note_d + '', '6'], [Lang.Blocks.ALBERT_note_e + 'b', '7'], [Lang.Blocks.ALBERT_note_e + '', '8'], [Lang.Blocks.ALBERT_note_f + '', '9'], [Lang.Blocks.ALBERT_note_f + '#', '10'], [Lang.Blocks.ALBERT_note_g + '', '11'], [Lang.Blocks.ALBERT_note_g + '#', '12'], [Lang.Blocks.ALBERT_note_a + '', '13'], [Lang.Blocks.ALBERT_note_b + 'b', '14'], [Lang.Blocks.ALBERT_note_b + '', '15']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, '4', {
                    type: 'text',
                    params: ['0.5']
                }, null],
                type: 'albert_play_note_for'
            },
            paramsKeyMap: {
                NOTE: 0,
                OCTAVE: 1,
                VALUE: 2
            },
            class: 'albert_buzzer',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                if (!script.isStart) {
                    var note = script.getNumberField('NOTE', script);
                    var octave = script.getNumberField('OCTAVE', script);
                    var beat = script.getNumberValue('VALUE', script);
                    var tempo = Entry.Albert.tempo;
                    note += (octave - 1) * 12;
                    var timeValue = beat * 60 * 1000 / tempo;
                    script.isStart = true;
                    script.timeFlag = 1;
                    sq.buzzer = 0;
                    sq.note = note;
                    if (timeValue > 100) {
                        var timer1 = setTimeout(function () {
                            sq.note = 0;
                            Entry.Albert.removeTimeout(timer1);
                        }, timeValue - 100);
                        Entry.Albert.timeouts.push(timer1);
                    }
                    var timer2 = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Albert.removeTimeout(timer2);
                    }, timeValue);
                    Entry.Albert.timeouts.push(timer2);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    sq.note = 0;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Albert.play_note(%1, %2, %3)'] }
        },
        albert_rest_for: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.25']
                }, null],
                type: 'albert_rest_for'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'albert_buzzer',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    var timeValue = script.getNumberValue('VALUE');
                    timeValue = timeValue * 60 * 1000 / Entry.Albert.tempo;
                    sq.buzzer = 0;
                    sq.note = 0;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Albert.removeTimeout(timer);
                    }, timeValue);
                    Entry.Albert.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Albert.rest(%1)'] }
        },
        albert_change_tempo_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['20']
                }, null],
                type: 'albert_change_tempo_by'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'albert_buzzer',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                Entry.Albert.tempo += script.getNumberValue('VALUE');
                if (Entry.Albert.tempo < 1) Entry.Albert.tempo = 1;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.change_tempo(%1)'] }
        },
        albert_set_tempo_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['60']
                }, null],
                type: 'albert_set_tempo_to'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'albert_buzzer',
            isNotFor: ['albert'],
            func: function func(sprite, script) {
                Entry.Albert.tempo = script.getNumberValue('VALUE');
                if (Entry.Albert.tempo < 1) Entry.Albert.tempo = 1;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.set_tempo(%1)'] }
        },
        albert_move_forward: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null]
            },
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    sq.leftWheel = 30;
                    sq.rightWheel = 30;
                    var timeValue = 1 * 1000;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Albert.move_forward()'] }
        },
        albert_move_backward: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null]
            },
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    var timeValue = 1 * 1000;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    sq.leftWheel = -30;
                    sq.rightWheel = -30;
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Albert.move_backward()'] }
        },
        albert_turn_around: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_turn_left, 'LEFT'], [Lang.Blocks.ALBERT_turn_right, 'RIGHT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null]
            },
            paramsKeyMap: {
                DIRECTION: 0
            },
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                if (!script.isStart) {
                    var direction = script.getField('DIRECTION', script);
                    var isLeft = direction == 'LEFT';
                    script.leftValue = isLeft ? -30 : 30;
                    script.rightValue = isLeft ? 30 : -30;
                    script.isStart = true;
                    script.timeFlag = 1;
                    var timeValue = 1 * 1000;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    sq.leftWheel = script.leftValue;
                    sq.rightWheel = script.rightValue;
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    delete script.leftValue;
                    delete script.rightValue;
                    Entry.engine.isContinue = false;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Albert.turn_around()'] }
        },
        albert_set_led_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'FRONT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null]
            },
            paramsKeyMap: {
                DIRECTION: 0,
                COLOR: 1
            },
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var direction = script.getField('DIRECTION', script);
                var color = Number(script.getField('COLOR', script));
                if (direction == 'FRONT') {
                    sq.leftEye = color;
                    sq.rightEye = color;
                } else if (direction == 'LEFT') sq.leftEye = color;else sq.rightEye = color;

                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.set_led(%1, %2)'] }
        },
        albert_clear_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'FRONT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null]
            },
            paramsKeyMap: {
                DIRECTION: 0
            },
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var direction = script.getField('DIRECTION', script);
                if (direction == 'FRONT') {
                    sq.leftEye = 0;
                    sq.rightEye = 0;
                } else if (direction == 'LEFT') sq.leftEye = 0;else sq.rightEye = 0;

                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.clear_led(%1)'] }
        },
        albert_change_wheels_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_left_wheel, 'LEFT'], [Lang.Blocks.ALBERT_right_wheel, 'RIGHT'], [Lang.Blocks.ALBERT_both_wheels, 'FRONT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null]
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1
            },
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var direction = script.getField('DIRECTION');
                var value = script.getNumberValue('VALUE');

                if (direction == 'LEFT') {
                    sq.leftWheel = sq.leftWheel != undefined ? sq.leftWheel + value : pd.leftWheel + value;
                } else if (direction == 'RIGHT') sq.rightWheel = sq.rightWheel != undefined ? sq.rightWheel + value : pd.rightWheel + value;else {
                    sq.leftWheel = sq.leftWheel != undefined ? sq.leftWheel + value : pd.leftWheel + value;
                    sq.rightWheel = sq.rightWheel != undefined ? sq.rightWheel + value : pd.rightWheel + value;
                }

                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.change_wheels(%1, %2)'] }
        },
        albert_set_wheels_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_left_wheel, 'LEFT'], [Lang.Blocks.ALBERT_right_wheel, 'RIGHT'], [Lang.Blocks.ALBERT_both_wheels, 'FRONT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null]
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1
            },
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var direction = script.getField('DIRECTION');
                var value = script.getNumberValue('VALUE');

                if (direction == 'LEFT') sq.leftWheel = value;else if (direction == 'RIGHT') sq.rightWheel = value;else {
                    sq.leftWheel = value;
                    sq.rightWheel = value;
                }

                return script.callReturn();
            },
            syntax: { js: [], py: ['Albert.set_wheels(%1, %2)'] }
        }
        //endregion albert 알버트
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_altino.js":
/*!***********************************************!*\
  !*** ./src/playground/blocks/block_altino.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Altino = {
    PORT_MAP: {
        rightWheel: 0,
        leftWheel: 0,
        steering: 0,
        ascii: 0,
        led: 0,
        led2: 0,
        note: 0,
        dot1: 0,
        dot2: 0,
        dot3: 0,
        dot4: 0,
        dot5: 0,
        dot6: 0,
        dot7: 0,
        dot8: 0
    },
    setZero: function setZero() {
        var portMap = Entry.Altino.PORT_MAP;
        var sq = Entry.hw.sendQueue;
        for (var port in portMap) {
            sq[port] = portMap[port];
        }
        Entry.hw.update();
        var Altino = Entry.Altino;
        Altino.removeAllTimeouts();
    },
    timeouts: [],
    removeTimeout: function removeTimeout(id) {
        clearTimeout(id);
        var timeouts = this.timeouts;
        var index = timeouts.indexOf(id);
        if (index >= 0) {
            timeouts.splice(index, 1);
        }
    },
    removeAllTimeouts: function removeAllTimeouts() {
        var timeouts = this.timeouts;
        for (var i in timeouts) {
            clearTimeout(timeouts[i]);
        }
        this.timeouts = [];
    },
    name: 'altino',
    url: 'http://saeon.co.kr/',
    imageName: 'altino.png',
    title: {
        "en": "Altino",
        "ko": "알티노"
    }
};

Entry.Altino.getBlocks = function () {
    return {
        //region Altino 알티노
        altino_analogValue: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALTINO_CDS, 'cds'], [Lang.Blocks.ALTINO_IR1, 'ir1'], [Lang.Blocks.ALTINO_IR2, 'ir2'], [Lang.Blocks.ALTINO_IR3, 'ir3'], [Lang.Blocks.ALTINO_IR4, 'ir4'], [Lang.Blocks.ALTINO_IR5, 'ir5'], [Lang.Blocks.ALTINO_IR6, 'ir6'], [Lang.Blocks.ALTINO_TOR1, 'tor1'], [Lang.Blocks.ALTINO_TOR2, 'tor2'], [Lang.Blocks.ALTINO_TEM, 'tem'], [Lang.Blocks.ALTINO_ACCX, 'accx'], [Lang.Blocks.ALTINO_ACCY, 'accy'], [Lang.Blocks.ALTINO_ACCZ, 'accz'], [Lang.Blocks.ALTINO_MAGX, 'magx'], [Lang.Blocks.ALTINO_MAGY, 'magy'], [Lang.Blocks.ALTINO_MAGZ, 'magz'], [Lang.Blocks.ALTINO_GYROX, 'gyrox'], [Lang.Blocks.ALTINO_GYROY, 'gyroy'], [Lang.Blocks.ALTINO_GYROZ, 'gyroz'], [Lang.Blocks.ALTINO_STVAR, 'stvar'], [Lang.Blocks.ALTINO_STTOR, 'sttor'], [Lang.Blocks.ALTINO_BAT, 'bat'], [Lang.Blocks.ALTINO_REMOTE, 'remote']],
                value: 'cds',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'altino_analogValue'
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'altino_sensor',
            isNotFor: ['altino'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('DEVICE');
                return pd[dev];
            },
            syntax: { js: [], py: ['Altino.analog_value(%1)'] }
        },
        altino_steering: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALTINO_Steering_Angle_Center, 'Center'], [Lang.Blocks.ALTINO_Steering_Angle_Left5, 'Left5'], [Lang.Blocks.ALTINO_Steering_Angle_Left10, 'Left10'], [Lang.Blocks.ALTINO_Steering_Angle_Left15, 'Left15'], [Lang.Blocks.ALTINO_Steering_Angle_Left20, 'Left20'], [Lang.Blocks.ALTINO_Steering_Angle_Right5, 'Right5'], [Lang.Blocks.ALTINO_Steering_Angle_Right10, 'Right10'], [Lang.Blocks.ALTINO_Steering_Angle_Right15, 'Right15'], [Lang.Blocks.ALTINO_Steering_Angle_Right20, 'Right20']],
                value: 'Center',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'altino_steering'
            },
            paramsKeyMap: {
                DIRECTION: 0
            },
            class: 'altino_motor',
            isNotFor: ['altino'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var direction = script.getField('DIRECTION', script);

                if (direction == 'Center') {
                    sq.steering = 2;
                } else if (direction == 'Left5') {
                    sq.steering = 160;
                } else if (direction == 'Left10') {
                    sq.steering = 192;
                } else if (direction == 'Left15') {
                    sq.steering = 224;
                } else if (direction == 'Left20') {
                    sq.steering = 255;
                } else if (direction == 'Right5') {
                    sq.steering = 32;
                } else if (direction == 'Right10') {
                    sq.steering = 64;
                } else if (direction == 'Right15') {
                    sq.steering = 96;
                } else if (direction == 'Right20') {
                    sq.steering = 127;
                }
                return script.callReturn();
            },
            syntax: { js: [], py: ['Altino.steering(%1,%2)'] }
        },
        altino_rear_wheel: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['300']
                }, {
                    type: 'text',
                    params: ['300']
                }, null],
                type: 'altino_rear_wheel'
            },
            paramsKeyMap: {
                rightWheel: 0,
                leftWheel: 1
            },
            class: 'altino_motor',
            isNotFor: ['altino'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;

                sq.rightWheel = script.getNumberValue('rightWheel');
                sq.leftWheel = script.getNumberValue('leftWheel');

                return script.callReturn();
            },
            syntax: { js: [], py: ['Altino.rear_wheel(%1, %2)'] }
        },
        altino_sound: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ALTINO_h, 'NOT'], [Lang.Blocks.ALTINO_c, 'C'], [Lang.Blocks.ALTINO_c2, 'C#'], [Lang.Blocks.ALTINO_d, 'D'], [Lang.Blocks.ALTINO_d2, 'D#'], [Lang.Blocks.ALTINO_e, 'E'], [Lang.Blocks.ALTINO_f, 'F'], [Lang.Blocks.ALTINO_f2, 'F#'], [Lang.Blocks.ALTINO_g, 'G'], [Lang.Blocks.ALTINO_g2, 'G#'], [Lang.Blocks.ALTINO_a, 'A'], [Lang.Blocks.ALTINO_a2, 'A#'], [Lang.Blocks.ALTINO_b, 'B']],
                value: 'NOT',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'altino_sound'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                NOTE: 1
            },
            class: 'altino_display',
            isNotFor: ['altino'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var octave = script.getStringField('OCTAVE', script);
                var note = script.getStringField('NOTE', script);
                var octave_int = octave + note;

                if (note == 'NOT') sq.note = 0;else if (octave_int == '2C') sq.note = 13;else if (octave_int == '2C#') sq.note = 14;else if (octave_int == '2D') sq.note = 15;else if (octave_int == '2D#') sq.note = 16;else if (octave_int == '2E') sq.note = 17;else if (octave_int == '2F') sq.note = 18;else if (octave_int == '2F#') sq.note = 19;else if (octave_int == '2G') sq.note = 20;else if (octave_int == '2G#') sq.note = 21;else if (octave_int == '2A') sq.note = 22;else if (octave_int == '2A#') sq.note = 23;else if (octave_int == '2B') sq.note = 24;else if (octave_int == '3C') sq.note = 25;else if (octave_int == '3C#') sq.note = 26;else if (octave_int == '3D') sq.note = 27;else if (octave_int == '3D#') sq.note = 28;else if (octave_int == '3E') sq.note = 29;else if (octave_int == '3F') sq.note = 30;else if (octave_int == '3F#') sq.note = 31;else if (octave_int == '3G') sq.note = 32;else if (octave_int == '3G#') sq.note = 33;else if (octave_int == '3A') sq.note = 34;else if (octave_int == '3A#') sq.note = 35;else if (octave_int == '3B') sq.note = 36;else if (octave_int == '4C') sq.note = 37;else if (octave_int == '4C#') sq.note = 38;else if (octave_int == '4D') sq.note = 39;else if (octave_int == '4D#') sq.note = 40;else if (octave_int == '4E') sq.note = 41;else if (octave_int == '4F') sq.note = 42;else if (octave_int == '4F#') sq.note = 43;else if (octave_int == '4G') sq.note = 44;else if (octave_int == '4G#') sq.note = 45;else if (octave_int == '4A') sq.note = 46;else if (octave_int == '4A#') sq.note = 47;else if (octave_int == '4B') sq.note = 48;else if (octave_int == '5C') sq.note = 49;else if (octave_int == '5C#') sq.note = 50;else if (octave_int == '5D') sq.note = 51;else if (octave_int == '5D#') sq.note = 52;else if (octave_int == '5E') sq.note = 53;else if (octave_int == '5F') sq.note = 54;else if (octave_int == '5F#') sq.note = 55;else if (octave_int == '5G') sq.note = 56;else if (octave_int == '5G#') sq.note = 57;else if (octave_int == '5A') sq.note = 58;else if (octave_int == '5A#') sq.note = 59;else if (octave_int == '5B') sq.note = 60;else if (octave_int == '6C') sq.note = 61;else if (octave_int == '6C#') sq.note = 62;else if (octave_int == '6D') sq.note = 63;else if (octave_int == '6D#') sq.note = 64;else if (octave_int == '6E') sq.note = 65;else if (octave_int == '6F') sq.note = 66;else if (octave_int == '6F#') sq.note = 67;else if (octave_int == '6G') sq.note = 68;else if (octave_int == '6G#') sq.note = 69;else if (octave_int == '6A') sq.note = 70;else if (octave_int == '6A#') sq.note = 71;else if (octave_int == '6B') sq.note = 72;else if (octave_int == '7C') sq.note = 73;else if (octave_int == '7C#') sq.note = 74;else if (octave_int == '7D') sq.note = 75;else if (octave_int == '7D#') sq.note = 76;else if (octave_int == '7E') sq.note = 77;else if (octave_int == '7F') sq.note = 78;else if (octave_int == '7F#') sq.note = 79;else if (octave_int == '7G') sq.note = 80;else if (octave_int == '7G#') sq.note = 81;else if (octave_int == '7A') sq.note = 82;else if (octave_int == '7A#') sq.note = 83;else if (octave_int == '7B') sq.note = 84;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Altino.sound(%1, %2)'] }
        },
        altino_light: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALTINO_Led_Forward_Light, '2'], [Lang.Blocks.ALTINO_Led_Reverse_Light, '3'], [Lang.Blocks.ALTINO_Led_Brake_Light, '4'], [Lang.Blocks.ALTINO_Led_Turn_Left_Light, '5'], [Lang.Blocks.ALTINO_Led_Turn_Right_Light, '6']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ALTINO_h2, '255'], [Lang.Blocks.ALTINO_h, '0']],
                value: '255',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'altino_light'
            },
            paramsKeyMap: {
                SELECT: 0,
                ONOFF: 1
            },
            class: 'altino_display',
            isNotFor: ['altino'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var select = script.getStringField('SELECT', script);
                var onoff = script.getStringField('ONOFF', script);

                if (select == '2' && onoff == '255') {
                    sq.led = sq.led | 0x03;
                } else if (select == '2' && onoff == '0') {
                    sq.led = sq.led & 0xfc;
                }

                if (select == '3' && onoff == '255') {
                    sq.led = sq.led | 0x0c;
                } else if (select == '3' && onoff == '0') {
                    sq.led = sq.led & 0xf3;
                }

                if (select == '4' && onoff == '255') {
                    sq.led2 = sq.led2 | 0xc1;
                } else if (select == '4' && onoff == '0') {
                    sq.led2 = sq.led2 & 0x3f;
                }

                if (select == '5' && onoff == '255') {
                    sq.led = sq.led | 0xa0;
                } else if (select == '5' && onoff == '0') {
                    sq.led = sq.led & 0x5f;
                }

                if (select == '6' && onoff == '255') {
                    sq.led = sq.led | 0x50;
                } else if (select == '6' && onoff == '0') {
                    sq.led = sq.led & 0xaf;
                }

                //sq.led = 0xff;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Altino.light(%1, %2)'] }
        },
        altino_dot_display: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['A']
                }, null],
                type: 'altino_dot_display'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'altino_display',
            isNotFor: ['altino'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var str = script.getStringValue('VALUE');
                sq.ascii = str.charCodeAt(0);

                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Altino.dot_display(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        altino_dot_display_line: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0xff']
                }, {
                    type: 'text',
                    params: ['0xff']
                }, {
                    type: 'text',
                    params: ['0xff']
                }, {
                    type: 'text',
                    params: ['0xff']
                }, {
                    type: 'text',
                    params: ['0xff']
                }, {
                    type: 'text',
                    params: ['0xff']
                }, {
                    type: 'text',
                    params: ['0xff']
                }, {
                    type: 'text',
                    params: ['0xff']
                }, null],
                type: 'altino_dot_display_line'
            },
            paramsKeyMap: {
                VALUE1: 0,
                VALUE2: 1,
                VALUE3: 2,
                VALUE4: 3,
                VALUE5: 4,
                VALUE6: 5,
                VALUE7: 6,
                VALUE8: 7
            },
            class: 'altino_display',
            isNotFor: ['altino'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                sq.ascii = 0;
                sq.dot1 = script.getNumberValue('VALUE1');
                sq.dot2 = script.getNumberValue('VALUE2');
                sq.dot3 = script.getNumberValue('VALUE3');
                sq.dot4 = script.getNumberValue('VALUE4');
                sq.dot5 = script.getNumberValue('VALUE5');
                sq.dot6 = script.getNumberValue('VALUE6');
                sq.dot7 = script.getNumberValue('VALUE7');
                sq.dot8 = script.getNumberValue('VALUE8');

                return script.callReturn();
            }
        }
        //endregion Altino 알티노
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_ardublock.js":
/*!**************************************************!*\
  !*** ./src/playground/blocks/block_ardublock.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.ardublock = {
    name: 'ardublock',
    url: 'http://www.jkelec.co.kr/',
    imageName: 'ardublock.png',
    title: {
        "ko": "아두블럭",
        "en": "ardublock"
    },
    setZero: function setZero() {
        if (!Entry.hw.sendQueue.SET) {
            Entry.hw.sendQueue = {
                GET: {},
                SET: {}
            };
        } else {
            var keySet = Object.keys(Entry.hw.sendQueue.SET);
            keySet.forEach(function (key) {
                Entry.hw.sendQueue.SET[key].data = 0;
                Entry.hw.sendQueue.SET[key].time = new Date().getTime();
            });
        }
        Entry.hw.update();
    },
    sensorTypes: {
        ALIVE: 0,
        DIGITAL: 1,
        ANALOG: 2,
        PWM: 3,
        SERVO_PIN: 4,
        TONE: 5,
        PULSEIN: 6,
        ULTRASONIC: 7,
        TIMER: 8,
        MOTOR_LEFT: 9,
        MOTOR_RIGHT: 10
    },
    toneTable: {
        '0': 0,
        C: 1,
        CS: 2,
        D: 3,
        DS: 4,
        E: 5,
        F: 6,
        FS: 7,
        G: 8,
        GS: 9,
        A: 10,
        AS: 11,
        B: 12
    },
    toneMap: {
        '1': [33, 65, 131, 262, 523, 1046, 2093, 4186],
        '2': [35, 69, 139, 277, 554, 1109, 2217, 4435],
        '3': [37, 73, 147, 294, 587, 1175, 2349, 4699],
        '4': [39, 78, 156, 311, 622, 1245, 2849, 4978],
        '5': [41, 82, 165, 330, 659, 1319, 2637, 5274],
        '6': [44, 87, 175, 349, 698, 1397, 2794, 5588],
        '7': [46, 92, 185, 370, 740, 1480, 2960, 5920],
        '8': [49, 98, 196, 392, 784, 1568, 3136, 6272],
        '9': [52, 104, 208, 415, 831, 1661, 3322, 6645],
        '10': [55, 110, 220, 440, 880, 1760, 3520, 7040],
        '11': [58, 117, 233, 466, 932, 1865, 3729, 7459],
        '12': [62, 123, 247, 494, 988, 1976, 3951, 7902]
    },
    directionTable: {
        Forward: 0,
        Backward: 1
    },
    highList: ['high', '1', 'on'],
    lowList: ['low', '0', 'off'],
    BlockState: {}
};

Entry.ardublock.getBlocks = function () {
    return {
        //region ardublock 아두블록
        ardublock_analog_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['A0', '0'], ['A1', '1'], ['A2', '2'], ['A3', '3'], ['A4', '4'], ['A5', '5']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getField('PORT');
            },
            syntax: { js: [], py: [] }
        },
        ardublock_get_analog_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_ext_analog_list'
                }],
                type: 'ardublock_get_analog_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'ardublockGet',
            isNotFor: ['ardublock'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                if (port[0] === 'A') port = port.substring(1);
                return ANALOG ? ANALOG[port] || 0 : 0;
            },
            syntax: { js: [], py: [] }
        },
        ardublock_get_analog_value_map: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'ardublock_get_analog_value',
                    params: [{
                        type: 'arduino_ext_analog_list'
                    }]
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'ardublock_get_analog_value_map'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE2: 1,
                VALUE3: 2,
                VALUE4: 3,
                VALUE5: 4
            },
            class: 'ardublockGet',
            isNotFor: ['ardublock'],
            func: function func(sprite, script) {
                var result = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                var value2 = script.getNumberValue('VALUE2', script);
                var value3 = script.getNumberValue('VALUE3', script);
                var value4 = script.getNumberValue('VALUE4', script);
                var value5 = script.getNumberValue('VALUE5', script);

                if (value2 > value3) {
                    var swap = value2;
                    value2 = value3;
                    value3 = swap;
                }
                if (value4 > value5) {
                    var swap = value4;
                    value4 = value5;
                    value5 = swap;
                }
                result -= value2;
                result = result * ((value5 - value4) / (value3 - value2));
                result += value4;
                result = Math.min(value5, result);
                result = Math.max(value4, result);

                return result;
            },
            syntax: { js: [], py: [] }
        },
        ardublock_get_ultrasonic_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: ['13']
                }, {
                    type: 'arduino_get_port_number',
                    params: ['12']
                }],
                type: 'ardublock_get_ultrasonic_value'
            },
            paramsKeyMap: {
                PORT1: 0,
                PORT2: 1
            },
            class: 'ardublockGet',
            isNotFor: ['ardublock'],
            func: function func(sprite, script) {
                var port1 = script.getNumberValue('PORT1', script);
                var port2 = script.getNumberValue('PORT2', script);

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                delete Entry.hw.sendQueue['SET'][port1];
                delete Entry.hw.sendQueue['SET'][port2];

                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.ardublock.sensorTypes.ULTRASONIC] = {
                    port: [port1, port2],
                    time: new Date().getTime()
                };
                return Entry.hw.portData.ULTRASONIC || 0;
            },
            syntax: { js: [], py: [] }
        },
        ardublock_get_digital: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }],
                type: 'ardublock_get_digital'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'ardublockGet',
            isNotFor: ['ardublock'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT', script);
                var DIGITAL = Entry.hw.portData.DIGITAL;
                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.ardublock.sensorTypes.DIGITAL] = {
                    port: port,
                    time: new Date().getTime()
                };
                return DIGITAL ? DIGITAL[port] || 0 : 0;
            },
            syntax: { js: [], py: [] }
        },
        ardublock_toggle_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }, {
                    type: 'arduino_get_digital_toggle',
                    params: ['on']
                }, null],
                type: 'ardublock_toggle_led'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'ardublock',
            isNotFor: ['ardublock'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getValue('VALUE');

                if (typeof value === 'string') {
                    value = value.toLowerCase();
                }
                if (Entry.ardublock.highList.indexOf(value) > -1) {
                    value = 255;
                } else if (Entry.ardublock.lowList.indexOf(value) > -1) {
                    value = 0;
                } else {
                    throw new Error();
                }
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.ardublock.sensorTypes.DIGITAL,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        ardublock_digital_pwm: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_pwm_port_number'
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'ardublock_digital_pwm'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'ardublock',
            isNotFor: ['ardublock'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 0);
                value = Math.min(value, 255);
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.ardublock.sensorTypes.PWM,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        ardublock_tone_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.silent, '0'], [Lang.Blocks.do_name, 'C'], [Lang.Blocks.do_sharp_name, 'CS'], [Lang.Blocks.re_name, 'D'], [Lang.Blocks.re_sharp_name, 'DS'], [Lang.Blocks.mi_name, 'E'], [Lang.Blocks.fa_name, 'F'], [Lang.Blocks.fa_sharp_name, 'FS'], [Lang.Blocks.sol_name, 'G'], [Lang.Blocks.sol_sharp_name, 'GS'], [Lang.Blocks.la_name, 'A'], [Lang.Blocks.la_sharp_name, 'AS'], [Lang.Blocks.si_name, 'B']],
                value: 'C',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                NOTE: 0
            },
            func: function func(sprite, script) {
                return script.getField('NOTE');
            },
            syntax: { js: [], py: [] }
        },
        ardublock_tone_value: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'ardublock_tone_list'
                }],
                type: 'ardublock_tone_value'
            },
            paramsKeyMap: {
                NOTE: 0
            },
            func: function func(sprite, script) {
                return script.getNumberValue('NOTE');
            },
            syntax: { js: [], py: [] }
        },
        ardublock_octave_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6']],
                value: '3',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                OCTAVE: 0
            },
            func: function func(sprite, script) {
                return script.getField('OCTAVE');
            },
            syntax: { js: [], py: [] }
        },
        ardublock_set_tone: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    value: 4,
                    params: ['11']
                }, {
                    type: 'ardublock_tone_list'
                }, {
                    type: 'ardublock_octave_list'
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'ardublock_set_tone'
            },
            paramsKeyMap: {
                PORT: 0,
                NOTE: 1,
                OCTAVE: 2,
                DURATION: 3
            },
            class: 'ardublock',
            isNotFor: ['ardublock'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var port = script.getNumberValue('PORT', script);

                if (!script.isStart) {
                    var note = script.getValue('NOTE', script);
                    if (!Entry.Utils.isNumber(note)) note = Entry.ardublock.toneTable[note];

                    if (note < 0) {
                        note = 0;
                    } else if (note > 12) {
                        note = 12;
                    }

                    var duration = script.getNumberValue('DURATION', script);

                    if (duration < 0) {
                        duration = 0;
                    }

                    if (!sq['SET']) {
                        sq['SET'] = {};
                    }

                    if (duration === 0) {
                        sq['SET'][port] = {
                            type: Entry.ardublock.sensorTypes.TONE,
                            data: 0,
                            time: new Date().getTime()
                        };
                        return script.callReturn();
                    }

                    var octave = script.getNumberValue('OCTAVE', script) - 1;
                    if (octave < 0) {
                        octave = 0;
                    } else if (octave > 5) {
                        octave = 5;
                    }

                    var value = 0;

                    if (note != 0) {
                        value = Entry.ardublock.toneMap[note][octave];
                    }

                    duration = duration * 1000;
                    script.isStart = true;
                    script.timeFlag = 1;

                    sq['SET'][port] = {
                        type: Entry.ardublock.sensorTypes.TONE,
                        data: {
                            value: value,
                            duration: duration
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, duration + 32);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    sq['SET'][port] = {
                        type: Entry.ardublock.sensorTypes.TONE,
                        data: 0,
                        time: new Date().getTime()
                    };
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        ardublock_set_servo: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: ['10']
                }, null],
                type: 'ardublock_set_servo'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'ardublock',
            isNotFor: ['ardublock'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var port = script.getNumberValue('PORT', script);
                var value = script.getNumberValue('VALUE', script);
                value = Math.min(180, value);
                value = Math.max(0, value);

                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.ardublock.sensorTypes.SERVO_PIN,
                    data: value,
                    time: new Date().getTime()
                };

                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        ardublock_motor_direction_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ardublock_motor_forward, '0'], [Lang.Blocks.ardublock_motor_backward, '1']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                MOTOR_DIRECTION: 0
            },
            func: function func(sprite, script) {
                return script.getField('MOTOR_DIRECTION');
            },
            syntax: { js: [], py: [] }
        },
        ardublock_set_left_motor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'ardublock_motor_direction_list'
                }, {
                    type: 'text',
                    params: ['100']
                }, null],
                type: 'ardublock_set_left_motor'
            },
            paramsKeyMap: {
                MOTOR_DIRECTION: 0,
                MOTOR_SPEED: 1
            },
            class: 'ardublock',
            isNotFor: ['ardublock'],
            func: function func(sprite, script) {
                // var sq = Entry.hw.sendQueue;
                var direction = script.getValue('MOTOR_DIRECTION', script);
                if (!Entry.Utils.isNumber(direction)) direction = Entry.ardublock.directionTable[direction];

                if (direction < 0) {
                    direction = 0;
                } else if (direction > 1) {
                    direction = 1;
                }

                var speed = script.getNumberValue('MOTOR_SPEED', script) - 1;
                if (speed < 0) {
                    speed = 0;
                } else if (speed > 254) {
                    speed = 254;
                }
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }

                Entry.hw.sendQueue['SET'][0] = {
                    type: Entry.ardublock.sensorTypes.MOTOR_LEFT,
                    data: {
                        direction: direction,
                        speed: speed
                    },
                    time: new Date().getTime()
                };

                setTimeout(function () {
                    script.timeFlag = 0;
                }, 10);

                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        ardublock_set_right_motor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'ardublock_motor_direction_list'
                }, {
                    type: 'text',
                    params: ['100']
                }, null],
                type: 'ardublock_set_right_motor'
            },
            paramsKeyMap: {
                MOTOR_DIRECTION: 0,
                MOTOR_SPEED: 1
            },
            class: 'ardublock',
            isNotFor: ['ardublock'],
            func: function func(sprite, script) {
                // var sq = Entry.hw.sendQueue;
                var direction = script.getValue('MOTOR_DIRECTION', script);
                if (!Entry.Utils.isNumber(direction)) direction = Entry.ardublock.directionTable[direction];

                if (direction < 0) {
                    direction = 0;
                } else if (direction > 1) {
                    direction = 1;
                }

                var speed = script.getNumberValue('MOTOR_SPEED', script) - 1;
                if (speed < 0) {
                    speed = 0;
                } else if (speed > 254) {
                    speed = 254;
                }

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }

                Entry.hw.sendQueue['SET'][1] = {
                    type: Entry.ardublock.sensorTypes.MOTOR_RIGHT,
                    data: {
                        direction: direction,
                        speed: speed
                    },
                    time: new Date().getTime()
                };

                setTimeout(function () {
                    script.timeFlag = 0;
                }, 10);

                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        ardublock_get_left_cds_analog_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_ext_analog_list',
                    params: ['0']
                }],
                type: 'ardublock_get_left_cds_analog_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'ardublockGet',
            isNotFor: ['ardublock'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                if (port[0] === 'A') port = port.substring(1);
                return ANALOG ? ANALOG[port] || 0 : 0;
            },
            syntax: { js: [], py: [] }
        },
        ardublock_get_right_cds_analog_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_ext_analog_list',
                    params: ['1']
                }],
                type: 'ardublock_get_right_cds_analog_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'ardublockGet',
            isNotFor: ['ardublock'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                if (port[0] === 'A') port = port.substring(1);
                return ANALOG ? ANALOG[port] || 0 : 0;
            },
            syntax: { js: [], py: [] }
        },
        ardublock_toggle_left_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: ['3']
                }, {
                    type: 'arduino_get_digital_toggle',
                    params: ['on']
                }, null],
                type: 'ardublock_toggle_left_led'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'ardublock',
            isNotFor: ['ardublock'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getValue('VALUE');

                if (typeof value === 'string') {
                    value = value.toLowerCase();
                }
                if (Entry.ardublock.highList.indexOf(value) > -1) {
                    value = 255;
                } else if (Entry.ardublock.lowList.indexOf(value) > -1) {
                    value = 0;
                } else {
                    throw new Error();
                }
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.ardublock.sensorTypes.DIGITAL,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        ardublock_toggle_right_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: ['9']
                }, {
                    type: 'arduino_get_digital_toggle',
                    params: ['on']
                }, null],
                type: 'ardublock_toggle_right_led'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'ardublock',
            isNotFor: ['ardublock'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getValue('VALUE');

                if (typeof value === 'string') {
                    value = value.toLowerCase();
                }
                if (Entry.ardublock.highList.indexOf(value) > -1) {
                    value = 255;
                } else if (Entry.ardublock.lowList.indexOf(value) > -1) {
                    value = 0;
                } else {
                    throw new Error();
                }
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.ardublock.sensorTypes.DIGITAL,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        ardublock_get_sound_analog_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_ext_analog_list',
                    params: ['2']
                }],
                type: 'ardublock_get_sound_analog_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'ardublockGet',
            isNotFor: ['ardublock'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                if (port[0] === 'A') port = port.substring(1);
                return ANALOG ? ANALOG[port] || 0 : 0;
            },
            syntax: { js: [], py: [] }
        }
        //endregion ardublock 아두블록
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_arduino.js":
/*!************************************************!*\
  !*** ./src/playground/blocks/block_arduino.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Arduino = {
    name: 'arduino',
    url: 'http://www.arduino.cc/',
    imageName: 'arduino.png',
    title: {
        "ko": "아두이노",
        "en": "Arduino"
    },
    setZero: function setZero() {
        Entry.hw.sendQueue.readablePorts = [];
        for (var port = 0; port < 20; port++) {
            Entry.hw.sendQueue[port] = 0;
            Entry.hw.sendQueue.readablePorts.push(port);
        }
        Entry.hw.update();
    },
    monitorTemplate: {
        imgPath: 'hw/arduino.png',
        width: 605,
        height: 434,
        listPorts: {
            '2': {
                name: Lang.Hw.port_en + ' 2 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '3': {
                name: Lang.Hw.port_en + ' 3 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '4': {
                name: Lang.Hw.port_en + ' 4 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '5': {
                name: Lang.Hw.port_en + ' 5 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '6': {
                name: Lang.Hw.port_en + ' 6 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '7': {
                name: Lang.Hw.port_en + ' 7 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '8': {
                name: Lang.Hw.port_en + ' 8 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '9': {
                name: Lang.Hw.port_en + ' 9 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '10': {
                name: Lang.Hw.port_en + ' 10 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '11': {
                name: Lang.Hw.port_en + ' 11 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '12': {
                name: Lang.Hw.port_en + ' 12 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '13': {
                name: Lang.Hw.port_en + ' 13 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a0: {
                name: Lang.Hw.port_en + ' A0 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a1: {
                name: Lang.Hw.port_en + ' A1 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a2: {
                name: Lang.Hw.port_en + ' A2 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a3: {
                name: Lang.Hw.port_en + ' A3 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a4: {
                name: Lang.Hw.port_en + ' A4 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a5: {
                name: Lang.Hw.port_en + ' A5 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            }
        },
        mode: 'both'
    }
};

Entry.Arduino.getBlocks = function () {
    return {
        //region arduino 아두이노
        arduino_text: {
            color: '#FFD974',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'TextInput',
                value: 10
            }],
            events: {},
            def: {
                params: []
            },
            paramsKeyMap: {
                NAME: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('NAME');
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    textParams: [{
                        type: 'TextInput',
                        value: 10,
                        converter: Entry.block.converters.returnStringOrNumberByValue
                    }],
                    keyOption: 'arduino_text'
                }]
            }
        },
        arduino_send: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: []
            },
            paramsKeyMap: {
                VALUE: 0
            },
            func: function func(sprite, script) {
                var signal = script.getValue('VALUE', script);
                var xmlHttp = new XMLHttpRequest();
                xmlHttp.open('POST', 'http://localhost:23518/arduino/', false);
                xmlHttp.send(String(signal));
                Entry.assert(xmlHttp.status == 200, 'arduino is not connected');
                return script.callReturn();
            }
        },
        arduino_get_number: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: []
            },
            paramsKeyMap: {
                VALUE: 0
            },
            func: function func(sprite, script) {
                var signal = script.getValue('VALUE', script);
                var xmlHttp = new XMLHttpRequest();
                xmlHttp.open('POST', 'http://localhost:23518/arduino/', false);
                xmlHttp.send(String(signal));
                Entry.assert(xmlHttp.status == 200, 'arduino is not connected');
                var data = xmlHttp.responseText;
                return Number(data);
            }
        },
        arduino_get_string: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: []
            },
            paramsKeyMap: {
                VALUE: 0
            },
            func: function func(sprite, script) {
                var signal = script.getValue('VALUE', script);
                var xmlHttp = new XMLHttpRequest();
                xmlHttp.open('POST', 'http://localhost:23518/arduino/', false);
                xmlHttp.send(String(signal));
                Entry.assert(xmlHttp.status == 200, 'arduino is not connected');
                var data = xmlHttp.responseText;
                return data;
            }
        },
        arduino_get_sensor_number: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['0', 'A0'], ['1', 'A1'], ['2', 'A2'], ['3', 'A3'], ['4', 'A4'], ['5', 'A5']],
                value: 'A0',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [['0', 'A0'], ['1', 'A1'], ['2', 'A2'], ['3', 'A3'], ['4', 'A4'], ['5', 'A5']],
                        value: 'A0',
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_HW,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    keyOption: 'arduino_get_sensor_number'
                }]
            }
        },
        arduino_get_port_number: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8'], ['9', '9'], ['10', '10'], ['11', '11'], ['12', '12'], ['13', '13']],
                value: '0',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    textParams: [{
                        type: 'Dropdown',
                        options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8'], ['9', '9'], ['10', '10'], ['11', '11'], ['12', '12'], ['13', '13']],
                        value: '0',
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_HW
                    }],
                    keyOption: 'arduino_get_port_number'
                }]
            }
        },
        arduino_get_pwm_port_number: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['3', '3'], ['5', '5'], ['6', '6'], ['9', '9'], ['10', '10'], ['11', '11']],
                value: '3',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    textParams: [{
                        type: 'Dropdown',
                        options: [['3', '3'], ['5', '5'], ['6', '6'], ['9', '9'], ['10', '10'], ['11', '11']],
                        value: '3',
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_HW,
                        converter: Entry.block.converters.returnStringOrNumberByValue
                    }],
                    keyOption: 'arduino_get_pwm_port_number'
                }]
            }
        },
        arduino_get_number_sensor_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_sensor_number'
                }],
                type: 'arduino_get_number_sensor_value'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'arduino_value',
            isNotFor: ['arduino'],
            func: function func(sprite, script) {
                var signal = script.getValue('VALUE', script);
                return Entry.hw.getAnalogPortValue(signal[1]);
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.sensor_value(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        arduino_get_digital_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }],
                type: 'arduino_get_digital_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'arduino_value',
            isNotFor: ['arduino'],
            func: function func(sprite, script) {
                var _Entry$hw$hwModule = Entry.hw.hwModule,
                    hwModule = _Entry$hw$hwModule === undefined ? {} : _Entry$hw$hwModule;
                var name = hwModule.name;

                if (name === 'ArduinoExt') {
                    return Entry.block.arduino_ext_get_digital.func(sprite, script);
                } else {
                    var signal = script.getNumberValue('PORT', script);
                    return Entry.hw.getDigitalPortValue(signal);
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.digitalRead(%1)',
                    blockType: 'param',
                    replaceBlockType: 'arduino_ext_get_digital',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        arduino_toggle_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ARDUINO_on, 'on'], [Lang.Blocks.ARDUINO_off, 'off']],
                value: 'on',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }, null, null],
                type: 'arduino_toggle_led'
            },
            paramsKeyMap: {
                VALUE: 0,
                OPERATOR: 1
            },
            class: 'arduino_set',
            isNotFor: ['arduino'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('VALUE');
                var operator = script.getField('OPERATOR');
                var value = operator == 'on' ? 255 : 0;
                Entry.hw.setDigitalPortValue(port, value);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.pin_digital(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ARDUINO_on, 'on'], [Lang.Blocks.ARDUINO_off, 'off']],
                        value: 'on',
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_HW,
                        converter: Entry.block.converters.returnStringValue
                    }]
                }]
            }
        },
        arduino_toggle_pwm: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_pwm_port_number'
                }, {
                    type: 'arduino_text',
                    params: ['255']
                }, null],
                type: 'arduino_toggle_pwm'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'arduino_set',
            isNotFor: ['arduino'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 0);
                value = Math.min(value, 255);
                Entry.hw.setDigitalPortValue(port, value);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.set_pin_digital(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        arduino_convert_scale: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_number_sensor_value',
                    params: [{
                        type: 'arduino_get_sensor_number',
                        id: 'bl5e'
                    }]
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'arduino_convert_scale'
            },
            paramsKeyMap: {
                VALUE1: 0,
                VALUE2: 1,
                VALUE3: 2,
                VALUE4: 3,
                VALUE5: 4
            },
            class: 'arduino',
            isNotFor: ['arduino'],
            func: function func(sprite, script) {
                var value1 = script.getNumberValue('VALUE1', script);
                var value2 = script.getNumberValue('VALUE2', script);
                var value3 = script.getNumberValue('VALUE3', script);
                var value4 = script.getNumberValue('VALUE4', script);
                var value5 = script.getNumberValue('VALUE5', script);

                var stringValue4 = script.getValue('VALUE4', script);
                var stringValue5 = script.getValue('VALUE5', script);
                var isFloat = false;

                if (Entry.Utils.isNumber(stringValue4) && stringValue4.indexOf('.') > -1 || Entry.Utils.isNumber(stringValue5) && stringValue5.indexOf('.') > -1) {
                    isFloat = true;
                }

                var result = value1;
                if (value2 > value3) {
                    var swap = value2;
                    value2 = value3;
                    value3 = swap;
                }
                if (value4 > value5) {
                    var swap = value4;
                    value4 = value5;
                    value5 = swap;
                }
                result -= value2;
                result = result * ((value5 - value4) / (value3 - value2));
                result += value4;
                result = Math.min(value5, result);
                result = Math.max(value4, result);

                if (isFloat) {
                    result = Math.round(result * 100) / 100;
                } else {
                    result = Math.round(result);
                }

                return result;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.convert_scale(%1, %2, %3, %4, %5)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        }
        //endregion arduino 아두이노
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_arduino_ext.js":
/*!****************************************************!*\
  !*** ./src/playground/blocks/block_arduino_ext.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.ArduinoExt = {
    name: 'ArduinoExt',
    url: 'http://www.arduino.cc/',
    imageName: 'arduinoExt.png',
    title: {
        "ko": "아두이노 Uno 확장모드",
        "en": "ArduinoExt Uno"
    },
    setZero: function setZero() {
        if (!Entry.hw.sendQueue.SET) {
            Entry.hw.sendQueue = {
                GET: {},
                SET: {}
            };
        } else {
            var keySet = Object.keys(Entry.hw.sendQueue.SET);
            keySet.forEach(function (key) {
                Entry.hw.sendQueue.SET[key].data = 0;
                Entry.hw.sendQueue.SET[key].time = new Date().getTime();
            });
        }
        Entry.hw.update();
    },
    sensorTypes: {
        ALIVE: 0,
        DIGITAL: 1,
        ANALOG: 2,
        PWM: 3,
        SERVO_PIN: 4,
        TONE: 5,
        PULSEIN: 6,
        ULTRASONIC: 7,
        TIMER: 8
    },
    toneTable: {
        '0': 0,
        C: 1,
        CS: 2,
        D: 3,
        DS: 4,
        E: 5,
        F: 6,
        FS: 7,
        G: 8,
        GS: 9,
        A: 10,
        AS: 11,
        B: 12
    },
    toneMap: {
        '1': [33, 65, 131, 262, 523, 1046, 2093, 4186],
        '2': [35, 69, 139, 277, 554, 1109, 2217, 4435],
        '3': [37, 73, 147, 294, 587, 1175, 2349, 4699],
        '4': [39, 78, 156, 311, 622, 1245, 2849, 4978],
        '5': [41, 82, 165, 330, 659, 1319, 2637, 5274],
        '6': [44, 87, 175, 349, 698, 1397, 2794, 5588],
        '7': [46, 92, 185, 370, 740, 1480, 2960, 5920],
        '8': [49, 98, 196, 392, 784, 1568, 3136, 6272],
        '9': [52, 104, 208, 415, 831, 1661, 3322, 6645],
        '10': [55, 110, 220, 440, 880, 1760, 3520, 7040],
        '11': [58, 117, 233, 466, 932, 1865, 3729, 7459],
        '12': [62, 123, 247, 494, 988, 1976, 3951, 7902]
    },
    highList: ['high', '1', 'on'],
    lowList: ['low', '0', 'off'],
    BlockState: {}
};

Entry.ArduinoExt.setLanguage = function () {
    return {
        ko: {
            template: {
                arduino_ext_get_analog_value: '아날로그 %1 번 센서값',
                arduino_ext_get_analog_value_map: '%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값',
                arduino_ext_get_ultrasonic_value: '울트라소닉 Trig %1 Echo %2 센서값',
                arduino_ext_toggle_led: '디지털 %1 번 핀 %2 %3',
                arduino_ext_digital_pwm: '디지털 %1 번 핀을 %2 (으)로 정하기 %3',
                arduino_ext_set_tone: '디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5',
                arduino_ext_set_servo: '디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3',
                arduino_ext_get_digital: '디지털 %1 번 센서값'
            }
        },
        en: {
            template: {
                arduino_ext_get_analog_value: 'Analog %1 Sensor value',
                arduino_ext_get_analog_value_map: 'Map Value %1 %2 ~ %3 to %4 ~ %5',
                arduino_ext_get_ultrasonic_value: 'Read ultrasonic sensor trig pin %1 echo pin %2',
                arduino_ext_toggle_led: 'Digital %1 Pin %2 %3',
                arduino_ext_digital_pwm: 'Digital %1 Pin %2 %3',
                arduino_ext_set_tone: 'Play tone pin %1 on note %2 octave %3 beat %4 %5',
                arduino_ext_set_servo: 'Set servo pin %1 angle as %2 %3',
                arduino_ext_get_digital: 'Digital %1 Sensor value'
            }
        }
    };
};

//region arduinoExt 아두이노 확장모드
Entry.ArduinoExt.getBlocks = function () {
    return {
        arduino_ext_analog_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['A0', '0'], ['A1', '1'], ['A2', '2'], ['A3', '3'], ['A4', '4'], ['A5', '5']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getField('PORT');
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [['A0', '0'], ['A1', '1'], ['A2', '2'], ['A3', '3'], ['A4', '4'], ['A5', '5']],
                        value: '0',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringKey,
                        codeMap: 'Entry.CodeMap.Arduino.arduino_ext_analog_list[0]'
                    }],
                    keyOption: 'arduino_ext_analog_list'
                }]
            }
        },
        arduino_ext_get_analog_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_ext_analog_list'
                }],
                type: 'arduino_ext_get_analog_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'ArduinoExtGet',
            isNotFor: ['ArduinoExt'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                if (port[0] === 'A') port = port.substring(1);
                return ANALOG ? ANALOG[port] || 0 : 0;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.analogRead(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        arduino_ext_get_analog_value_map: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_ext_get_analog_value',
                    params: [{
                        type: 'arduino_ext_analog_list'
                    }]
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'arduino_ext_get_analog_value_map'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE2: 1,
                VALUE3: 2,
                VALUE4: 3,
                VALUE5: 4
            },
            class: 'ArduinoExtGet',
            isNotFor: ['ArduinoExt'],
            func: function func(sprite, script) {
                var result = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                var value2 = script.getNumberValue('VALUE2', script);
                var value3 = script.getNumberValue('VALUE3', script);
                var value4 = script.getNumberValue('VALUE4', script);
                var value5 = script.getNumberValue('VALUE5', script);
                var stringValue4 = script.getValue('VALUE4', script);
                var stringValue5 = script.getValue('VALUE5', script);
                var isFloat = false;

                if (Entry.Utils.isNumber(stringValue4) && stringValue4.indexOf('.') > -1 || Entry.Utils.isNumber(stringValue5) && stringValue5.indexOf('.') > -1) {
                    isFloat = true;
                }

                if (value2 > value3) {
                    var swap = value2;
                    value2 = value3;
                    value3 = swap;
                }
                if (value4 > value5) {
                    var swap = value4;
                    value4 = value5;
                    value5 = swap;
                }
                result -= value2;
                result = result * ((value5 - value4) / (value3 - value2));
                result += value4;
                result = Math.min(value5, result);
                result = Math.max(value4, result);

                if (isFloat) {
                    result = Math.round(result * 100) / 100;
                } else {
                    result = Math.round(result);
                }

                return result;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.map(%1, %2, %3, %4, %5)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        arduino_ext_get_ultrasonic_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: ['2']
                }, {
                    type: 'arduino_get_port_number',
                    params: ['4']
                }],
                type: 'arduino_ext_get_ultrasonic_value'
            },
            paramsKeyMap: {
                PORT1: 0,
                PORT2: 1
            },
            class: 'ArduinoExtGet',
            isNotFor: ['ArduinoExt'],
            func: function func(sprite, script) {
                var port1 = script.getNumberValue('PORT1', script);
                var port2 = script.getNumberValue('PORT2', script);

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                delete Entry.hw.sendQueue['SET'][port1];
                delete Entry.hw.sendQueue['SET'][port2];

                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.ArduinoExt.sensorTypes.ULTRASONIC] = {
                    port: [port1, port2],
                    time: new Date().getTime()
                };
                return Entry.hw.portData.ULTRASONIC || 0;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.ultrasonicRead(%1, %2)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        arduino_ext_get_digital: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: [2]
                }],
                type: 'arduino_ext_get_digital'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'ArduinoExtGet',
            isNotFor: ['ArduinoExt'],
            func: function func(sprite, script) {
                var _Entry$hw$hwModule = Entry.hw.hwModule,
                    hwModule = _Entry$hw$hwModule === undefined ? {} : _Entry$hw$hwModule;
                var name = hwModule.name;

                if (name === 'ArduinoExt') {
                    var port = script.getNumberValue('PORT', script);
                    var DIGITAL = Entry.hw.portData.DIGITAL;
                    if (!Entry.hw.sendQueue['GET']) {
                        Entry.hw.sendQueue['GET'] = {};
                    }
                    Entry.hw.sendQueue['GET'][Entry.ArduinoExt.sensorTypes.DIGITAL] = {
                        port: port,
                        time: new Date().getTime()
                    };
                    return DIGITAL ? DIGITAL[port] || 0 : 0;
                } else {
                    return Entry.block.arduino_get_digital_value.func(sprite, script);
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.digitalRead(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        arduino_get_digital_toggle: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ARDUINO_on, 'on'], [Lang.Blocks.ARDUINO_off, 'off']],
                value: 'on',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                OPERATOR: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('OPERATOR');
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ARDUINO_on, 'on'], [Lang.Blocks.ARDUINO_off, 'off']],
                        value: 'on',
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_HW,
                        converter: Entry.block.converters.returnStringValueUpperCase,
                        codeMap: 'Entry.CodeMap.Arduino.arduino_get_digital_toggle[0]'
                    }],
                    keyOption: 'arduino_get_digital_toggle'
                }]
            }
        },
        arduino_ext_toggle_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: [3]
                }, {
                    type: 'arduino_get_digital_toggle',
                    params: ['on']
                }, null],
                type: 'arduino_ext_toggle_led'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'ArduinoExt',
            isNotFor: ['ArduinoExt'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getValue('VALUE');

                if (typeof value === 'string') {
                    value = value.toLowerCase();
                }
                if (Entry.ArduinoExt.highList.indexOf(value) > -1) {
                    value = 255;
                } else if (Entry.ArduinoExt.lowList.indexOf(value) > -1) {
                    value = 0;
                } else {
                    throw new Error();
                }
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.ArduinoExt.sensorTypes.DIGITAL,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.digitalWrite(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        arduino_ext_digital_pwm: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_pwm_port_number'
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'arduino_ext_digital_pwm'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'ArduinoExt',
            isNotFor: ['ArduinoExt'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 0);
                value = Math.min(value, 255);
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.ArduinoExt.sensorTypes.PWM,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.analogWrite(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        arduino_ext_tone_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.silent, '0'], [Lang.Blocks.do_name, 'C'], [Lang.Blocks.do_sharp_name, 'CS'], [Lang.Blocks.re_name, 'D'], [Lang.Blocks.re_sharp_name, 'DS'], [Lang.Blocks.mi_name, 'E'], [Lang.Blocks.fa_name, 'F'], [Lang.Blocks.fa_sharp_name, 'FS'], [Lang.Blocks.sol_name, 'G'], [Lang.Blocks.sol_sharp_name, 'GS'], [Lang.Blocks.la_name, 'A'], [Lang.Blocks.la_sharp_name, 'AS'], [Lang.Blocks.si_name, 'B']],
                value: 'C',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                NOTE: 0
            },
            func: function func(sprite, script) {
                return script.getField('NOTE');
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.silent, '0'], [Lang.Blocks.do_name, 'C'], [Lang.Blocks.do_sharp_name, 'CS'], [Lang.Blocks.re_name, 'D'], [Lang.Blocks.re_sharp_name, 'DS'], [Lang.Blocks.mi_name, 'E'], [Lang.Blocks.fa_name, 'F'], [Lang.Blocks.fa_sharp_name, 'FS'], [Lang.Blocks.sol_name, 'G'], [Lang.Blocks.sol_sharp_name, 'GS'], [Lang.Blocks.la_name, 'A'], [Lang.Blocks.la_sharp_name, 'AS'], [Lang.Blocks.si_name, 'B']],
                        value: 'C',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValueUpperCase
                    }],
                    keyOption: 'arduino_ext_tone_list'
                }]
            }
        },
        arduino_ext_tone_value: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_ext_tone_list'
                }],
                type: 'arduino_ext_tone_value'
            },
            paramsKeyMap: {
                NOTE: 0
            },
            func: function func(sprite, script) {
                return script.getNumberValue('NOTE');
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    keyOption: 'arduino_ext_tone_value'
                }]
            }
        },
        arduino_ext_octave_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6']],
                value: '4',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                OCTAVE: 0
            },
            func: function func(sprite, script) {
                return script.getField('OCTAVE');
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    keyOption: 'arduino_ext_octave_list'
                }]
            }
        },
        arduino_ext_set_tone: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: [3]
                }, {
                    type: 'arduino_ext_tone_list'
                }, {
                    type: 'arduino_ext_octave_list'
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'arduino_ext_set_tone'
            },
            paramsKeyMap: {
                PORT: 0,
                NOTE: 1,
                OCTAVE: 2,
                DURATION: 3
            },
            class: 'ArduinoExt',
            isNotFor: ['ArduinoExt'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var port = script.getNumberValue('PORT', script);

                if (!script.isStart) {
                    var note = script.getValue('NOTE', script);
                    if (!Entry.Utils.isNumber(note)) note = Entry.ArduinoExt.toneTable[note];

                    if (note < 0) {
                        note = 0;
                    } else if (note > 12) {
                        note = 12;
                    }

                    var duration = script.getNumberValue('DURATION', script);

                    if (duration < 0) {
                        duration = 0;
                    }

                    if (!sq['SET']) {
                        sq['SET'] = {};
                    }

                    if (duration === 0) {
                        sq['SET'][port] = {
                            type: Entry.ArduinoExt.sensorTypes.TONE,
                            data: 0,
                            time: new Date().getTime()
                        };
                        return script.callReturn();
                    }

                    var octave = script.getNumberValue('OCTAVE', script) - 1;
                    if (octave < 0) {
                        octave = 0;
                    } else if (octave > 5) {
                        octave = 5;
                    }

                    var value = 0;

                    if (note != 0) {
                        value = Entry.ArduinoExt.toneMap[note][octave];
                    }

                    duration = duration * 1000;
                    script.isStart = true;
                    script.timeFlag = 1;

                    sq['SET'][port] = {
                        type: Entry.ArduinoExt.sensorTypes.TONE,
                        data: {
                            value: value,
                            duration: duration
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, duration + 32);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    sq['SET'][port] = {
                        type: Entry.ArduinoExt.sensorTypes.TONE,
                        data: 0,
                        time: new Date().getTime()
                    };
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.tone(%1, %2, %3, %4)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        arduino_ext_set_servo: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: ['3']
                }, null],
                type: 'arduino_ext_set_servo'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'ArduinoExt',
            isNotFor: ['ArduinoExt'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var port = script.getNumberValue('PORT', script);
                var value = script.getNumberValue('VALUE', script);
                value = Math.min(180, value);
                value = Math.max(0, value);

                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.ArduinoExt.sensorTypes.SERVO_PIN,
                    data: value,
                    time: new Date().getTime()
                };

                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.servomotorWrite(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        }
    };
};
//endregion arduinoExt 아두이노 확장모드

/***/ }),

/***/ "./src/playground/blocks/block_arduino_nano.js":
/*!*****************************************************!*\
  !*** ./src/playground/blocks/block_arduino_nano.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.ArduinoNano = {
    name: 'ArduinoNano',
    url: 'http://www.arduino.cc/',
    imageName: 'arduinoNano.png',
    title: {
        "ko": "아두이노 Nano",
        "en": "Arduino Nano"
    },
    setZero: function setZero() {
        if (!Entry.hw.sendQueue.SET) {
            Entry.hw.sendQueue = {
                GET: {},
                SET: {}
            };
        } else {
            var keySet = Object.keys(Entry.hw.sendQueue.SET);
            keySet.forEach(function (key) {
                Entry.hw.sendQueue.SET[key].data = 0;
                Entry.hw.sendQueue.SET[key].time = new Date().getTime();
            });
        }
        Entry.hw.update();
    },
    sensorTypes: {
        ALIVE: 0,
        DIGITAL: 1,
        ANALOG: 2,
        PWM: 3,
        SERVO_PIN: 4,
        TONE: 5,
        PULSEIN: 6,
        ULTRASONIC: 7,
        TIMER: 8
    },
    toneTable: {
        '0': 0,
        C: 1,
        CS: 2,
        D: 3,
        DS: 4,
        E: 5,
        F: 6,
        FS: 7,
        G: 8,
        GS: 9,
        A: 10,
        AS: 11,
        B: 12
    },
    toneMap: {
        '1': [33, 65, 131, 262, 523, 1046, 2093, 4186],
        '2': [35, 69, 139, 277, 554, 1109, 2217, 4435],
        '3': [37, 73, 147, 294, 587, 1175, 2349, 4699],
        '4': [39, 78, 156, 311, 622, 1245, 2849, 4978],
        '5': [41, 82, 165, 330, 659, 1319, 2637, 5274],
        '6': [44, 87, 175, 349, 698, 1397, 2794, 5588],
        '7': [46, 92, 185, 370, 740, 1480, 2960, 5920],
        '8': [49, 98, 196, 392, 784, 1568, 3136, 6272],
        '9': [52, 104, 208, 415, 831, 1661, 3322, 6645],
        '10': [55, 110, 220, 440, 880, 1760, 3520, 7040],
        '11': [58, 117, 233, 466, 932, 1865, 3729, 7459],
        '12': [62, 123, 247, 494, 988, 1976, 3951, 7902]
    },
    highList: ['high', '1', 'on'],
    lowList: ['low', '0', 'off'],
    BlockState: {}
};

Entry.ArduinoNano.setLanguage = function () {
    return {
        ko: {
            template: {
                arduino_nano_get_analog_value: '아날로그 %1 번 센서값',
                arduino_nano_get_analog_value_map: '%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값',
                arduino_nano_get_ultrasonic_value: '울트라소닉 Trig %1 Echo %2 센서값',
                arduino_nano_toggle_led: '디지털 %1 번 핀 %2 %3',
                arduino_nano_digital_pwm: '디지털 %1 번 핀을 %2 (으)로 정하기 %3',
                arduino_nano_set_tone: '디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5',
                arduino_nano_set_servo: '디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3',
                arduino_nano_get_digital: '디지털 %1 번 센서값'
            }
        },
        en: {
            template: {
                arduino_nano_get_analog_value: 'Analog %1 Sensor value',
                arduino_nano_get_analog_value_map: 'Map Value %1 %2 ~ %3 to %4 ~ %5',
                arduino_nano_get_ultrasonic_value: 'Read ultrasonic sensor trig pin %1 echo pin %2',
                arduino_nano_toggle_led: 'Digital %1 Pin %2 %3',
                arduino_nano_digital_pwm: 'Digital %1 Pin %2 %3',
                arduino_nano_set_tone: 'Play tone pin %1 on note %2 octave %3 beat %4 %5',
                arduino_nano_set_servo: 'Set servo pin %1 angle as %2 %3',
                arduino_nano_get_digital: 'Digital %1 Sensor value'
            }
        }
    };
};

Entry.ArduinoNano.getBlocks = function () {
    return {
        //region arduinoNano 아두이노 나노
        arduino_nano_analog_list: {
            parent: 'arduino_ext_analog_list',
            params: [{
                type: 'Dropdown',
                options: [['A0', '0'], ['A1', '1'], ['A2', '2'], ['A3', '3'], ['A4', '4'], ['A5', '5'], ['A6', '6'], ['A7', '7']],
                value: '0',
                fontSize: 11
            }],
            syntax: undefined
        },
        arduino_nano_get_analog_value: {
            parent: 'arduino_ext_get_analog_value',
            template: Lang.template.arduino_ext_get_analog_value,
            def: {
                params: [{
                    type: 'arduino_nano_analog_list'
                }],
                type: 'arduino_nano_get_analog_value'
            },
            isNotFor: ['ArduinoNano'],
            syntax: undefined
        },
        arduino_nano_get_analog_value_map: {
            parent: 'arduino_ext_get_analog_value_map',
            template: Lang.template.arduino_ext_get_analog_value_map,
            def: {
                params: [{
                    type: 'arduino_nano_get_analog_value',
                    params: [{
                        type: 'arduino_nano_analog_list'
                    }]
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'arduino_nano_get_analog_value_map'
            },
            isNotFor: ['ArduinoNano'],
            syntax: undefined
        },
        arduino_nano_get_ultrasonic_value: {
            template: Lang.template.arduino_ext_get_ultrasonic_value,
            parent: 'arduino_ext_get_ultrasonic_value',
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: ['2']
                }, {
                    type: 'arduino_get_port_number',
                    params: ['4']
                }],
                type: 'arduino_nano_get_ultrasonic_value'
            },
            isNotFor: ['ArduinoNano'],
            syntax: undefined
        },
        arduino_nano_get_digital: {
            template: Lang.template.arduino_ext_get_digital,
            parent: 'arduino_ext_get_digital',
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }],
                type: 'arduino_nano_get_digital'
            },
            isNotFor: ['ArduinoNano'],
            syntax: undefined
        },
        arduino_nano_toggle_led: {
            template: Lang.template.arduino_ext_toggle_led,
            parent: 'arduino_ext_toggle_led',
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }, {
                    type: 'arduino_get_digital_toggle',
                    params: ['on']
                }, null],
                type: 'arduino_nano_toggle_led'
            },
            isNotFor: ['ArduinoNano'],
            syntax: undefined
        },
        arduino_nano_digital_pwm: {
            template: Lang.template.arduino_ext_digital_pwm,
            parent: 'arduino_ext_digital_pwm',
            def: {
                params: [{
                    type: 'arduino_get_pwm_port_number'
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'arduino_nano_digital_pwm'
            },
            isNotFor: ['ArduinoNano'],
            syntax: undefined
        },
        arduino_nano_set_tone: {
            template: Lang.template.arduino_ext_set_tone,
            parent: 'arduino_ext_set_tone',
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    value: 4
                }, {
                    type: 'arduino_ext_tone_list'
                }, {
                    type: 'arduino_ext_octave_list'
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'arduino_nano_set_tone'
            },
            isNotFor: ['ArduinoNano'],
            syntax: undefined
        },
        arduino_nano_set_servo: {
            template: Lang.template.arduino_ext_set_servo,
            parent: 'arduino_ext_set_servo',
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }, null],
                type: 'arduino_nano_set_servo'
            },
            isNotFor: ['ArduinoNano'],
            syntax: undefined
        }
        //endregion arduinoNano 아두이노 나노
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_bitbrick.js":
/*!*************************************************!*\
  !*** ./src/playground/blocks/block_bitbrick.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Bitbrick = {
    SENSOR_MAP: {
        1: 'light',
        2: 'IR',
        3: 'touch',
        4: 'potentiometer',
        5: 'MIC',
        21: 'UserSensor',
        11: 'UserInput',
        20: 'LED',
        19: 'SERVO',
        18: 'DC'
    },
    PORT_MAP: {
        buzzer: 2,
        '5': 4,
        '6': 6,
        '7': 8,
        '8': 10,
        LEDR: 12,
        LEDG: 14,
        LEDB: 16
    },
    sensorList: function sensorList() {
        var list = [];
        var portData = Entry.hw.portData;
        for (var i = 1; i < 5; i++) {
            var data = portData[i];
            if (data && (data.value || data.value === 0)) {
                list.push([i + ' - ' + Lang.Blocks['BITBRICK_' + data.type], i.toString()]);
            }
        }

        if (list.length == 0) return [[Lang.Blocks.no_target, 'null']];
        return list;
    },
    touchList: function touchList() {
        var list = [];
        var portData = Entry.hw.portData;
        for (var i = 1; i < 5; i++) {
            var data = portData[i];
            if (data && data.type === 'touch') list.push([i.toString(), i.toString()]);
        }
        if (list.length == 0) return [[Lang.Blocks.no_target, 'null']];
        return list;
    },
    servoList: function servoList() {
        var list = [];
        var portData = Entry.hw.portData;
        for (var i = 5; i < 9; i++) {
            var data = portData[i];
            if (data && data.type === 'SERVO') list.push(['ABCD'[i - 5], i.toString()]);
        }
        if (list.length == 0) return [[Lang.Blocks.no_target, 'null']];
        return list;
    },
    dcList: function dcList() {
        var list = [];
        var portData = Entry.hw.portData;
        for (var i = 5; i < 9; i++) {
            var data = portData[i];
            if (data && data.type === 'DC') list.push(['ABCD'[i - 5], i.toString()]);
        }
        if (list.length == 0) return [[Lang.Blocks.no_target, 'null']];
        return list;
    },
    setZero: function setZero() {
        var sq = Entry.hw.sendQueue;
        for (var port in Entry.Bitbrick.PORT_MAP) {
            sq[port] = 0;
        }Entry.hw.update();
    },
    name: 'bitbrick',
    url: 'http://www.bitbrick.cc/',
    imageName: 'bitbrick.png',
    title: {
        "ko": "비트브릭",
        "en": "bitbrick"
    },
    servoMaxValue: 181,
    servoMinValue: 1,
    dcMaxValue: 100,
    dcMinValue: -100,
    monitorTemplate: {
        keys: ['value'],
        imgPath: 'hw/bitbrick.png',
        width: 400,
        height: 400,
        listPorts: {
            '1': {
                name: Lang.Hw.port_en + ' 1 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '2': {
                name: Lang.Hw.port_en + ' 2 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '3': {
                name: Lang.Hw.port_en + ' 3 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '4': {
                name: Lang.Hw.port_en + ' 4 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            A: {
                name: Lang.Hw.port_en + ' A ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            B: {
                name: Lang.Hw.port_en + ' B ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            C: {
                name: Lang.Hw.port_en + ' C ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            D: {
                name: Lang.Hw.port_en + ' D ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            }
        },
        // },
        // ports : {
        //     "1":{name: "light", type: "input", pos: {x: 0, y: 0}},
        //     "2":{name: "IR", type: "input", pos: {x : 0, y: 0}},
        //     "3":{name: "touch", type: "input", pos: {x: 0, y: 0}},
        //     "4":{name: "potentiometer", type: "input", pos: {x: 0, y: 0}},
        //     "5":{name: "MIC", type: "input", pos: {x: 0, y: 0}},
        //     "21":{name: "UserSensor", type: "input", pos: {x: 0, y: 0}},
        //     "11":{name: "USER INPUT", type: "input", pos: {x: 0, y: 0}},
        //     "20":{name: "LED", type: "input", pos: {x: 0, y: 0}},
        //     "19":{name: "SERVO", type: "input", pos: {x: 0, y: 0}},
        //     "18":{name: "DC", type: "input", pos: {x: 0, y: 0}},
        //     "buzzer":{name: "부저", type: "input", pos: {x: 0, y: 0}},
        //     "LEDR":{name: "LEDR", type: "output", pos: {x: 0, y: 0}},
        //     "LEDG":{name: "LEDG", type: "output", pos: {x: 0, y: 0}},
        //     "LEDB":{name: "LEDG", type: "output", pos: {x: 0, y: 0}}
        // },
        mode: 'both'
    }
};

Entry.Bitbrick.getBlocks = function () {
    return {
        //region bitbrick 비트브릭
        bitbrick_sensor_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW,
                menuName: Entry.Bitbrick.sensorList
            }],
            events: {},
            def: {
                params: [null],
                type: 'bitbrick_sensor_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'condition',
            isNotFor: ['bitbrick'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                return Entry.hw.portData[port].value;
            },
            syntax: { js: [], py: ['Bitbrick.sensor_value(%1)'] }
        },
        bitbrick_is_touch_pressed: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.Bitbrick.touchList
            }],
            events: {},
            def: {
                params: [null],
                type: 'bitbrick_is_touch_pressed'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'condition',
            isNotFor: ['bitbrick'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getStringField('PORT')].value === 0;
            },
            syntax: { js: [], py: ['Bitbrick.is_touch_pressed(%1)'] }
        },
        bitbrick_turn_off_color_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'bitbrick_turn_off_color_led',
                id: 'i3je'
            },
            class: 'condition',
            isNotFor: ['bitbrick'],
            func: function func(sprite, script) {
                Entry.hw.sendQueue['LEDR'] = 0;
                Entry.hw.sendQueue['LEDG'] = 0;
                Entry.hw.sendQueue['LEDB'] = 0;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Bitbrick.turn_off_color_led()'] }
        },
        bitbrick_turn_on_color_led_by_rgb: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'bitbrick_turn_on_color_led_by_rgb'
            },
            paramsKeyMap: {
                rValue: 0,
                gValue: 1,
                bValue: 2
            },
            class: 'condition',
            isNotFor: ['bitbrick'],
            func: function func(sprite, script) {
                var red = script.getNumberValue('rValue'),
                    green = script.getNumberValue('gValue'),
                    blue = script.getNumberValue('bValue'),
                    min = 0,
                    max = 255,
                    adjustor = Entry.adjustValueWithMaxMin,
                    sq = Entry.hw.sendQueue;

                sq['LEDR'] = adjustor(red, min, max);
                sq['LEDG'] = adjustor(green, min, max);
                sq['LEDB'] = adjustor(blue, min, max);
                return script.callReturn();
            },
            syntax: { js: [], py: ['Bitbrick.color_led_by_rgb(%1, %2, %3)'] }
        },
        bitbrick_turn_on_color_led_by_picker: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Color'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'bitbrick_turn_on_color_led_by_picker'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'condition',
            isNotFor: ['bitbrick'],
            func: function func(sprite, script) {
                var port = script.getStringField('VALUE');
                Entry.hw.sendQueue['LEDR'] = parseInt(port.substr(1, 2), 16);
                Entry.hw.sendQueue['LEDG'] = parseInt(port.substr(3, 2), 16);
                Entry.hw.sendQueue['LEDB'] = parseInt(port.substr(5, 2), 16);
                return script.callReturn();
            },
            syntax: { js: [], py: ['Bitbrick.color_led_by_picker(%1)'] }
        },
        bitbrick_turn_on_color_led_by_value: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'bitbrick_turn_on_color_led_by_value'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'condition',
            isNotFor: ['bitbrick'],
            func: function func(sprite, script) {
                var value = script.getNumberValue('VALUE');
                var red, green, blue;
                value = value % 200;
                if (value < 67) {
                    red = 200 - value * 3;
                    green = value * 3;
                    blue = 0;
                } else if (value < 134) {
                    value = value - 67;
                    red = 0;
                    green = 200 - value * 3;
                    blue = value * 3;
                } else if (value < 201) {
                    value = value - 134;
                    red = value * 3;
                    green = 0;
                    blue = 200 - value * 3;
                }
                Entry.hw.sendQueue['LEDR'] = red;
                Entry.hw.sendQueue['LEDG'] = green;
                Entry.hw.sendQueue['LEDB'] = blue;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Bitbrick.color_led_by_value(%1)'] }
        },
        bitbrick_buzzer: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['60']
                }, null],
                type: 'bitbrick_buzzer'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'condition',
            isNotFor: ['bitbrick'],
            func: function func(sprite, script) {
                if (!script.isStart) {
                    var value = script.getNumberValue('VALUE');
                    Entry.hw.sendQueue['buzzer'] = value;
                    script.isStart = true;
                    return script;
                } else {
                    Entry.hw.sendQueue['buzzer'] = 0;
                    delete script.isStart;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Bitbrick.buzzer(%1)'] }
        },
        bitbrick_turn_off_all_motors: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'bitbrick_turn_off_all_motors'
            },
            class: 'condition',
            isNotFor: ['bitbrick'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var bitbrick = Entry.Bitbrick;
                bitbrick.servoList().map(function (servo) {
                    sq[servo[1]] = 0;
                });
                bitbrick.dcList().map(function (dc) {
                    sq[dc[1]] = 128;
                });
                return script.callReturn();
            },
            syntax: { js: [], py: ['Bitbrick.turn_off_all_motors()'] }
        },
        bitbrick_dc_speed: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.Bitbrick.dcList
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['60']
                }, null],
                type: 'bitbrick_dc_speed'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'condition',
            isNotFor: ['bitbrick'],
            func: function func(sprite, script) {
                var value = script.getNumberValue('VALUE');
                value = Math.min(value, Entry.Bitbrick.dcMaxValue);
                value = Math.max(value, Entry.Bitbrick.dcMinValue);

                Entry.hw.sendQueue[script.getStringField('PORT')] = value + 128;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Bitbrick.dc_speed(%1, %2)'] }
        },
        bitbrick_dc_direction_speed: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.Bitbrick.dcList
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.BITBRICK_dc_direction_cw, 'CW'], [Lang.Blocks.BITBRICK_dc_direction_ccw, 'CCW']],
                value: 'CW',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['100']
                }, null],
                type: 'bitbrick_dc_direction_speed'
            },
            paramsKeyMap: {
                PORT: 0,
                DIRECTION: 1,
                VALUE: 2
            },
            class: 'condition',
            isNotFor: ['bitbrick'],
            func: function func(sprite, script) {
                var isFront = script.getStringField('DIRECTION') === 'CW';
                var value = script.getNumberValue('VALUE');
                value = Math.min(value, Entry.Bitbrick.dcMaxValue);
                value = Math.max(value, 0);

                Entry.hw.sendQueue[script.getStringField('PORT')] = isFront ? value + 128 : 128 - value;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Bitbrick.dc_direction_speed(%1, %2, %3)'] }
        },
        bitbrick_servomotor_angle: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.Bitbrick.servoList
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['100']
                }, null],
                type: 'bitbrick_servomotor_angle'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'condition',
            isNotFor: ['bitbrick'],
            func: function func(sprite, script) {
                var value = Entry.Bitbrick.servoMaxValue - (script.getNumberValue('VALUE') + 1);
                value = Math.min(value, Entry.Bitbrick.servoMaxValue);
                value = Math.max(value, Entry.Bitbrick.servoMinValue);
                Entry.hw.sendQueue[script.getStringField('PORT')] = value;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Bitbrick.servomotor_angle(%1, %2)'] }
        },
        bitbrick_convert_scale: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.Bitbrick.sensorList
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['-100']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'bitbrick_convert_scale'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE2: 1,
                VALUE3: 2,
                VALUE4: 3,
                VALUE5: 4
            },
            class: 'condition',
            isNotFor: ['bitbrick'],
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT');
                var value1 = Entry.hw.portData[port].value;
                var value2 = script.getNumberValue('VALUE2', script);
                var value3 = script.getNumberValue('VALUE3', script);
                var value4 = script.getNumberValue('VALUE4', script);
                var value5 = script.getNumberValue('VALUE5', script);
                var result = value1;

                if (value4 > value5) {
                    var swap = value4;
                    value4 = value5;
                    value5 = swap;
                }

                result -= value2;
                result = result * ((value5 - value4) / (value3 - value2));
                result += value4;
                result = Math.min(value5, result);
                result = Math.max(value4, result);
                return Math.round(result);
            },
            syntax: {
                js: [],
                py: ['Bitbrick.convert_scale(%1, %2, %3, %4, %5)']
            }
        }
        //endregion bitbrick 비트브릭
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_blacksmith.js":
/*!***************************************************!*\
  !*** ./src/playground/blocks/block_blacksmith.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Blacksmith = {
    name: 'blacksmith',
    url: 'http://www.hanibot.com',
    imageName: 'blacksmith.png',
    title: {
        "ko": "대장장이 보드",
        "en": "Blacksmith Board"
    },
    setZero: function setZero() {
        if (!Entry.hw.sendQueue.SET) {
            Entry.hw.sendQueue = {
                GET: {},
                SET: {}
            };
        } else {
            var keySet = Object.keys(Entry.hw.sendQueue.SET);
            keySet.forEach(function (key) {
                Entry.hw.sendQueue.SET[key].data = 0;
                Entry.hw.sendQueue.SET[key].time = new Date().getTime();
            });
        }
        Entry.hw.update();
    },
    toByte: function toByte(data) {
        switch (data) {
            case ' ':
                data = 32;
                break;
            case '!':
                data = 33;
                break;
            case '"':
                data = 34;
                break;
            case '#':
                data = 35;
                break;
            case '$':
                data = 36;
                break;
            case '%':
                data = 37;
                break;
            case '&':
                data = 38;
                break;
            case "'":
                data = 39;
                break;
            case '(':
                data = 40;
                break;
            case ')':
                data = 41;
                break;
            case '*':
                data = 42;
                break;
            case '+':
                data = 43;
                break;
            case ',':
                data = 44;
                break;
            case '-':
                data = 45;
                break;
            case '.':
                data = 46;
                break;
            case '/':
                data = 47;
                break;
            case '0':
                data = 48;
                break;
            case '1':
                data = 49;
                break;
            case '2':
                data = 50;
                break;
            case '3':
                data = 51;
                break;
            case '4':
                data = 52;
                break;
            case '5':
                data = 53;
                break;
            case '6':
                data = 54;
                break;
            case '7':
                data = 55;
                break;
            case '8':
                data = 56;
                break;
            case '9':
                data = 57;
                break;
            case ':':
                data = 58;
                break;
            case ';':
                data = 59;
                break;
            case '<':
                data = 60;
                break;
            case '=':
                data = 61;
                break;
            case '>':
                data = 62;
                break;
            case '?':
                data = 63;
                break;
            case '@':
                data = 64;
                break;
            case 'A':
                data = 65;
                break;
            case 'B':
                data = 66;
                break;
            case 'C':
                data = 67;
                break;
            case 'D':
                data = 68;
                break;
            case 'E':
                data = 69;
                break;
            case 'F':
                data = 70;
                break;
            case 'G':
                data = 71;
                break;
            case 'H':
                data = 72;
                break;
            case 'I':
                data = 73;
                break;
            case 'J':
                data = 74;
                break;
            case 'K':
                data = 75;
                break;
            case 'L':
                data = 76;
                break;
            case 'M':
                data = 77;
                break;
            case 'N':
                data = 78;
                break;
            case 'O':
                data = 79;
                break;
            case 'P':
                data = 80;
                break;
            case 'Q':
                data = 81;
                break;
            case 'R':
                data = 82;
                break;
            case 'S':
                data = 83;
                break;
            case 'T':
                data = 84;
                break;
            case 'U':
                data = 85;
                break;
            case 'V':
                data = 86;
                break;
            case 'W':
                data = 87;
                break;
            case 'X':
                data = 88;
                break;
            case 'Y':
                data = 89;
                break;
            case 'Z':
                data = 90;
                break;
            case '[':
                data = 91;
                break;
            case '\\':
                data = 92;
                break;
            case ']':
                data = 93;
                break;
            case '^':
                data = 94;
                break;
            case '_':
                data = 95;
                break;
            case '`':
                data = 96;
                break;
            case 'a':
                data = 97;
                break;
            case 'b':
                data = 98;
                break;
            case 'c':
                data = 99;
                break;
            case 'd':
                data = 100;
                break;
            case 'e':
                data = 101;
                break;
            case 'f':
                data = 102;
                break;
            case 'g':
                data = 103;
                break;
            case 'h':
                data = 104;
                break;
            case 'i':
                data = 105;
                break;
            case 'j':
                data = 106;
                break;
            case 'k':
                data = 107;
                break;
            case 'l':
                data = 108;
                break;
            case 'm':
                data = 109;
                break;
            case 'n':
                data = 110;
                break;
            case 'o':
                data = 111;
                break;
            case 'p':
                data = 112;
                break;
            case 'q':
                data = 113;
                break;
            case 'r':
                data = 114;
                break;
            case 's':
                data = 115;
                break;
            case 't':
                data = 116;
                break;
            case 'u':
                data = 117;
                break;
            case 'v':
                data = 118;
                break;
            case 'w':
                data = 119;
                break;
            case 'x':
                data = 120;
                break;
            case 'y':
                data = 121;
                break;
            case 'z':
                data = 122;
                break;
            case '{':
                data = 123;
                break;
            case '|':
                data = 124;
                break;
            case '}':
                data = 125;
                break;
            case '~':
                data = 126;
                break;
        }

        return data;
    },
    sensorTypes: {
        ALIVE: 0,
        DIGITAL: 1,
        ANALOG: 2,
        PWM: 3,
        SERVO: 4,
        TONE: 5,
        PULSEIN: 6,
        ULTRASONIC: 7,
        TIMER: 8,
        rxBLUETOOTH: 9,
        LCD: 10,
        txBLUETOOTH: 11
    },
    toneTable: {
        '0': 0,
        C: 1,
        CS: 2,
        D: 3,
        DS: 4,
        E: 5,
        F: 6,
        FS: 7,
        G: 8,
        GS: 9,
        A: 10,
        AS: 11,
        B: 12
    },
    toneMap: {
        '1': [33, 65, 131, 262, 523, 1046, 2093, 4186],
        '2': [35, 69, 139, 277, 554, 1109, 2217, 4435],
        '3': [37, 73, 147, 294, 587, 1175, 2349, 4699],
        '4': [39, 78, 156, 311, 622, 1245, 2849, 4978],
        '5': [41, 82, 165, 330, 659, 1319, 2637, 5274],
        '6': [44, 87, 175, 349, 698, 1397, 2794, 5588],
        '7': [46, 92, 185, 370, 740, 1480, 2960, 5920],
        '8': [49, 98, 196, 392, 784, 1568, 3136, 6272],
        '9': [52, 104, 208, 415, 831, 1661, 3322, 6645],
        '10': [55, 110, 220, 440, 880, 1760, 3520, 7040],
        '11': [58, 117, 233, 466, 932, 1865, 3729, 7459],
        '12': [62, 123, 247, 494, 988, 1976, 3951, 7902]
    },
    highList: ['high', '1', 'on'],
    lowList: ['low', '0', 'off'],
    BlockState: {}
};

Entry.Blacksmith.getBlocks = function () {
    return {
        //region blacksmith 대장장이보드
        blacksmith_list_analog_basic: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['A0', '0'], ['A1', '1'], ['A2', '2'], ['A3', '3']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getField('PORT');
            }
        },
        blacksmith_list_digital_basic: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['6', '6'], ['7', '7'], ['8', '8'], ['9', '9'], ['10', '10'], ['11', '11']],
                value: '10',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            }
        },
        blacksmith_list_digital_octave: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8']],
                value: '3',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                OCTAVE: 0
            },
            func: function func(sprite, script) {
                return script.getField('OCTAVE');
            }
        },
        blacksmith_list_digital_pwm: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['~6', '6'], ['~9', '9'], ['~10', '10'], ['~11', '11']],
                value: '10',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            }
        },
        blacksmith_list_digital_toggle: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.blacksmith_toggle_on, 'on'], [Lang.Blocks.blacksmith_toggle_off, 'off']],
                value: 'on',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                OPERATOR: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('OPERATOR');
            }
        },
        blacksmith_list_digital_tone: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.silent, '0'], [Lang.Blocks.do_name, 'C'], [Lang.Blocks.do_sharp_name, 'CS'], [Lang.Blocks.re_name, 'D'], [Lang.Blocks.re_sharp_name, 'DS'], [Lang.Blocks.mi_name, 'E'], [Lang.Blocks.fa_name, 'F'], [Lang.Blocks.fa_sharp_name, 'FS'], [Lang.Blocks.sol_name, 'G'], [Lang.Blocks.sol_sharp_name, 'GS'], [Lang.Blocks.la_name, 'A'], [Lang.Blocks.la_sharp_name, 'AS'], [Lang.Blocks.si_name, 'B']],
                value: 'C',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                NOTE: 0
            },
            func: function func(sprite, script) {
                return script.getField('NOTE');
            }
        },
        blacksmith_list_digital_lcd: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.blacksmith_lcd_first_line, '0'], [Lang.Blocks.blacksmith_lcd_seconds_line, '1']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                LINE: 0
            },
            func: function func(sprite, script) {
                return script.getField('LINE');
            }
        },
        blacksmith_get_analog_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: Lang.template.blacksmith_get_analog_value,
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'blacksmith_list_analog_basic'
                }],
                type: 'blacksmith_get_analog_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'blacksmithGet',
            isNotFor: ['blacksmith'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;

                if (port[0] === 'A') port = port.substring(1);

                return ANALOG ? ANALOG[port] || 0 : 0;
            },
            syntax: { js: [], py: ['blacksmith.get_analog_value(%1)'] }
        },
        blacksmith_get_analog_mapping: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: Lang.template.blacksmith_get_analog_mapping,
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'blacksmith_list_analog_basic'
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'blacksmith_get_analog_mapping'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE2: 1,
                VALUE3: 2,
                VALUE4: 3,
                VALUE5: 4
            },
            class: 'blacksmithGet',
            isNotFor: ['blacksmith'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var result = 0;
                var ANALOG = Entry.hw.portData.ANALOG;
                var value2 = script.getNumberValue('VALUE2', script);
                var value3 = script.getNumberValue('VALUE3', script);
                var value4 = script.getNumberValue('VALUE4', script);
                var value5 = script.getNumberValue('VALUE5', script);

                if (port[0] === 'A') {
                    port = port.substring(1);
                }
                result = ANALOG ? ANALOG[port] || 0 : 0;
                if (value2 > value3) {
                    var swap = value2;
                    value2 = value3;
                    value3 = swap;
                }
                if (value4 > value5) {
                    var swap = value4;
                    value4 = value5;
                    value5 = swap;
                }
                result -= value2;
                result = result * ((value5 - value4) / (value3 - value2));
                result += value4;
                result = Math.min(value5, result);
                result = Math.max(value4, result);

                return result;
            },
            syntax: {
                js: [],
                py: ['blacksmith.get_analog_mapping(%1, %2, %3, %4, %5)']
            }
        },
        blacksmith_get_digital_bluetooth: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: Lang.template.blacksmith_get_digital_bluetooth,
            statements: [],
            params: [],
            events: {},
            def: {
                params: [],
                type: 'blacksmith_get_digital_bluetooth'
            },
            paramsKeyMap: {},
            class: 'blacksmithGet',
            isNotFor: ['blacksmith'],
            func: function func(sprite, script) {
                var port = 2;

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                delete Entry.hw.sendQueue['SET'][port];
                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.Blacksmith.sensorTypes.rxBLUETOOTH] = {
                    port: port,
                    time: new Date().getTime()
                };

                return Entry.hw.portData.rxBLUETOOTH || 0;
            },
            syntax: { js: [], py: ['blacksmith.get_digital_bluetooth()'] }
        },
        blacksmith_get_digital_ultrasonic: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: Lang.template.blacksmith_get_digital_ultrasonic,
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['4']
                }, {
                    type: 'text',
                    params: ['5']
                }],
                type: 'blacksmith_get_digital_ultrasonic'
            },
            paramsKeyMap: {
                PORT1: 0,
                PORT2: 1
            },
            class: 'blacksmithGet',
            isNotFor: ['blacksmith'],
            func: function func(sprite, script) {
                var port1 = script.getNumberValue('PORT1');
                var port2 = script.getNumberValue('PORT2');

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                delete Entry.hw.sendQueue['SET'][port1];
                delete Entry.hw.sendQueue['SET'][port2];
                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.Blacksmith.sensorTypes.ULTRASONIC] = {
                    port: [port1, port2],
                    time: new Date().getTime()
                };

                return Entry.hw.portData.ULTRASONIC || 0;
            },
            syntax: {
                js: [],
                py: ['blacksmith.get_digital_ultrasonic(%1, %2)']
            }
        },
        blacksmith_get_digital_toggle: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            template: Lang.template.blacksmith_get_digital_toggle,
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'blacksmith_list_digital_basic'
                }],
                type: 'blacksmith_get_digital_toggle'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'blacksmithGet',
            isNotFor: ['blacksmith'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var DIGITAL = Entry.hw.portData.DIGITAL;

                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.Blacksmith.sensorTypes.DIGITAL] = {
                    port: port,
                    time: new Date().getTime()
                };

                return DIGITAL ? DIGITAL[port] || 0 : 0;
            },
            syntax: { js: [], py: ['blacksmith.get_digital_toggle(%1)'] }
        },
        blacksmith_set_digital_toggle: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            statements: [],
            template: Lang.template.blacksmith_set_digital_toggle,
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'blacksmith_list_digital_basic'
                }, {
                    type: 'blacksmith_list_digital_toggle'
                }, null],
                type: 'blacksmith_set_digital_toggle'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'blacksmithSet',
            isNotFor: ['blacksmith'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getValue('VALUE');

                if (typeof value === 'string') {
                    value = value.toLowerCase();
                }
                if (Entry.Blacksmith.highList.indexOf(value) > -1) {
                    value = 255;
                } else if (Entry.Blacksmith.lowList.indexOf(value) > -1) {
                    value = 0;
                } else {
                    throw new Error();
                }
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.Blacksmith.sensorTypes.DIGITAL,
                    data: value,
                    time: new Date().getTime()
                };

                return script.callReturn();
            },
            syntax: { js: [], py: ['blacksmith.set_digital_toggle(%1, %2)'] }
        },
        blacksmith_set_digital_pwm: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            statements: [],
            template: Lang.template.blacksmith_set_digital_pwm,
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'blacksmith_list_digital_pwm'
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'blacksmith_set_digital_pwm'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'blacksmithSet',
            isNotFor: ['blacksmith'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getNumberValue('VALUE');

                value = Math.round(value);
                value = Math.min(value, 255);
                value = Math.max(value, 0);
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.Blacksmith.sensorTypes.PWM,
                    data: value,
                    time: new Date().getTime()
                };

                return script.callReturn();
            },
            syntax: { js: [], py: ['blacksmith.set_digital_pwm(%1, %2)'] }
        },
        blacksmith_set_digital_servo: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            statements: [],
            template: Lang.template.blacksmith_set_digital_servo,
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'blacksmith_list_digital_basic'
                }, {
                    type: 'text',
                    params: ['90']
                }, null],
                type: 'blacksmith_set_digital_servo'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'blacksmithSet',
            isNotFor: ['blacksmith'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getNumberValue('VALUE');
                value = Math.min(value, 180);
                value = Math.max(value, 0);

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.Blacksmith.sensorTypes.SERVO,
                    data: value,
                    time: new Date().getTime()
                };

                return script.callReturn();
            },
            syntax: { js: [], py: ['blacksmith.set_digital_servo(%1, %2)'] }
        },
        blacksmith_set_digital_buzzer: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            statements: [],
            template: Lang.template.blacksmith_set_digital_buzzer,
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'blacksmith_list_digital_basic'
                }, {
                    type: 'blacksmith_list_digital_tone'
                }, {
                    type: 'blacksmith_list_digital_octave'
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'blacksmith_set_digital_buzzer'
            },
            paramsKeyMap: {
                PORT: 0,
                NOTE: 1,
                OCTAVE: 2,
                DURATION: 3
            },
            class: 'blacksmithSet',
            isNotFor: ['blacksmith'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var duration = script.getNumberValue('DURATION');
                var octave = script.getNumberValue('OCTAVE') - 1;
                var value = 0;

                if (!script.isStart) {
                    var note = script.getValue('NOTE');
                    if (!Entry.Utils.isNumber(note)) {
                        note = Entry.Blacksmith.toneTable[note];
                    }
                    if (note < 0) {
                        note = 0;
                    } else if (note > 12) {
                        note = 12;
                    }
                    if (duration < 0) {
                        duration = 0;
                    }
                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }
                    if (duration === 0) {
                        Entry.hw.sendQueue['SET'][port] = {
                            type: Entry.Blacksmith.sensorTypes.TONE,
                            data: 0,
                            time: new Date().getTime()
                        };
                        return script.callReturn();
                    }
                    if (octave < 0) {
                        octave = 0;
                    } else if (octave > 8) {
                        octave = 8;
                    }
                    if (note != 0) {
                        value = Entry.Blacksmith.toneMap[note][octave];
                    }

                    duration = duration * 1000;
                    script.isStart = true;
                    script.timeFlag = 1;

                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.Blacksmith.sensorTypes.TONE,
                        data: {
                            value: value,
                            duration: duration
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, duration + 32);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.Blacksmith.sensorTypes.TONE,
                        data: 0,
                        time: new Date().getTime()
                    };
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: ['blacksmith.set_digital_toggle(%1, %2, %3, %4)']
            }
        },
        blacksmith_set_digital_lcd: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            template: Lang.template.blacksmith_set_digital_lcd,
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'blacksmith_list_digital_lcd'
                }, {
                    type: 'text',
                    params: ['My Entry!!']
                }, null],
                type: 'blacksmith_set_digital_lcd'
            },
            paramsKeyMap: {
                LINE: 0,
                STRING: 1
            },
            class: 'blacksmithSet',
            isNotFor: ['blacksmith'],
            func: function func(sprite, script) {
                var line = script.getNumberValue('LINE');
                var string = script.getValue('STRING');
                var text = [];

                if (!script.isStart) {
                    if (typeof string === 'string') {
                        for (var i = 0; i < string.length; i++) {
                            text[i] = Entry.Blacksmith.toByte(string[i]);
                        }
                    } else if (typeof string === 'number') {
                        text[0] = 1;
                        text[1] = string / 1;
                    } else {
                        text[0] = string;
                    }

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = 60 / fps * 50;

                    Entry.hw.sendQueue['SET'][line] = {
                        type: Entry.Blacksmith.sensorTypes.LCD,
                        data: {
                            text0: text[0],
                            text1: text[1],
                            text2: text[2],
                            text3: text[3],
                            text4: text[4],
                            text5: text[5],
                            text6: text[6],
                            text7: text[7],
                            text8: text[8],
                            text9: text[9],
                            text10: text[10],
                            text11: text[11],
                            text12: text[12],
                            text13: text[13],
                            text14: text[14],
                            text15: text[15]
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['blacksmith.set_digital_lcd(%1, %2)'] }
        },
        blacksmith_set_digital_bluetooth: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            template: Lang.template.blacksmith_set_digital_bluetooth,
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['My Entry!!']
                }, null],
                type: 'blacksmith_set_digital_bluetooth'
            },
            paramsKeyMap: {
                STRING: 0
            },
            class: 'blacksmithSet',
            isNotFor: ['blacksmith'],
            func: function func(sprite, script) {
                var string = script.getValue('STRING');
                var port = 3;
                var text = [];

                if (!script.isStart) {
                    if (typeof string === 'string') {
                        for (var i = 0; i < string.length; i++) {
                            text[i] = Entry.Blacksmith.toByte(string[i]);
                        }
                    } else {
                        text[0] = string;
                    }
                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = 60 / fps * 50;

                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.Blacksmith.sensorTypes.txBLUETOOTH,
                        data: {
                            text0: text[0],
                            text1: text[1],
                            text2: text[2],
                            text3: text[3],
                            text4: text[4],
                            text5: text[5],
                            text6: text[6],
                            text7: text[7],
                            text8: text[8],
                            text9: text[9],
                            text10: text[10],
                            text11: text[11],
                            text12: text[12],
                            text13: text[13],
                            text14: text[14],
                            text15: text[15]
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['blacksmith.set_digital_bluetooth(%1)'] }
        }
        //endregion blacksmith 대장장이보드
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_byrobot_dronefighter_controller.js":
/*!************************************************************************!*\
  !*** ./src/playground/blocks/block_byrobot_dronefighter_controller.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/***************************************************************************************
 *
 *  이름 붙이기 규칙(2017.1.16)
 *
 *  1. 변수에 해당하는 이름들은 모두 소문자
 *  2. 이어지는 추가 이름은 '_'를 붙여서 연결
 *
 ***************************************************************************************/

/***************************************************************************************
 *  장치와 연관된 변수 및 함수 정의
 ***************************************************************************************/

Entry.byrobot_dronefighter_controller = {
    name: 'byrobot_dronefighter_controller',
    url: 'http://www.byrobot.co.kr/',
    imageName: 'byrobot_dronefighter_controller.png',
    title: {
        "ko": "바이로봇 드론파이터 조종기",
        "en": "BYROBOT Drone Fighter controller"
    },

    // 초기화
    setZero: function setZero() {
        // 초기화

        // 한 번에 명령을 전송하면 hw까지 제대로 전달되지 않는 경우가 있어
        // 명령을 각각 분리하여 전송하게 함(2017.01.03)
        for (var i = 0; i < 1; i++) {
            this.transferVibrator(0, 0, 0, 0);
            this.transferbuzzer(0, 0, 0);
            this.transferLightManual(0x11, 0xff, 0);
            this.transferCommand(0x11, 0x81, 0);
        }
    },

    // Entry 좌측 하단 하드웨어 모니터 화면에 표시하는 속성
    // listPorts와 ports 두 곳 동시에 동일한 속성을 표시할 수는 없음
    monitorTemplate: {
        imgPath: 'hw/byrobot_dronefighter_controller.png', // 배경 이미지
        width: 500, // 이미지의 폭
        height: 500, // 이미지의 높이

        // 모니터 화면 상단에 차례대로 나열하는 값
        listPorts: {
            joystick_left_x: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_y: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_direction: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_event: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_command: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_x: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_y: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_direction: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_event: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_command: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            button_button: {
                name: Lang.Blocks.byrobot_dronefighter_controller_button_button,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            button_event: {
                name: Lang.Blocks.byrobot_dronefighter_controller_button_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            entryhw_countTransferReserved: {
                name: Lang.Blocks.byrobot_dronefighter_entryhw_count_transfer_reserved,
                type: 'output',
                pos: { x: 0, y: 0 }
            }
        },

        // 모니터 화면 지정 위치와 선으로 연결하여 표시하는 값
        ports: {},

        mode: 'both' // 표시 모드
    },

    // functions

    // 시간 지연
    checkFinish: function checkFinish(script, ms) {
        if (!script.isStart) {
            script.isStart = true;
            script.timeFlag = 1;

            var fps = Entry.FPS || 60;
            var timeValue = 60 / fps * ms;

            setTimeout(function () {
                script.timeFlag = 0;
            }, timeValue);

            return 'Start';
        } else if (script.timeFlag == 1) {
            return 'Running';
        } else {
            delete script.timeFlag;
            delete script.isStart;
            Entry.engine.isContinue = false;
            return 'Finish';
        }
    },

    // 데이터 전송
    transferLightManual: function transferLightManual(target, flags, brightness) {
        // 범위 조정
        target = Math.max(target, 0);
        target = Math.min(target, 255);
        flags = Math.max(flags, 0);
        flags = Math.min(flags, 255);
        brightness = Math.max(brightness, 0);
        brightness = Math.min(brightness, 255);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('light_manual_flags', flags);
        Entry.hw.setDigitalPortValue('light_manual_brightness', brightness);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['light_manual_flags'];
        delete Entry.hw.sendQueue['light_manual_brightness'];
    },

    transferbuzzer: function transferbuzzer(mode, value, time) {
        // 전송
        Entry.hw.setDigitalPortValue('target', 0x11);
        Entry.hw.setDigitalPortValue('buzzer_mode', mode);
        Entry.hw.setDigitalPortValue('buzzer_value', value);
        Entry.hw.setDigitalPortValue('buzzer_time', time);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['buzzer_mode'];
        delete Entry.hw.sendQueue['buzzer_value'];
        delete Entry.hw.sendQueue['buzzer_time'];
    },

    transferVibrator: function transferVibrator(mode, timeOn, timeOff, timeRun) {
        // 범위 조정
        timeOn = Math.max(timeOn, 1);
        timeOn = Math.min(timeOn, 60000);
        timeOff = Math.max(timeOff, 1);
        timeOff = Math.min(timeOff, 60000);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x11);
        Entry.hw.setDigitalPortValue('vibrator_mode', mode);
        Entry.hw.setDigitalPortValue('vibrator_on', timeOn);
        Entry.hw.setDigitalPortValue('vibrator_off', timeOff);
        Entry.hw.setDigitalPortValue('vibrator_total', timeRun);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['vibrator_mode'];
        delete Entry.hw.sendQueue['vibrator_on'];
        delete Entry.hw.sendQueue['vibrator_off'];
        delete Entry.hw.sendQueue['vibrator_total'];
    },

    transferCommand: function transferCommand(target, command, option) {
        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('command_command', command);
        Entry.hw.setDigitalPortValue('command_option', option);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['command_command'];
        delete Entry.hw.sendQueue['command_option'];
    },

    transferUserInterface: function transferUserInterface(uicommand, uifunction) {
        // 전송
        Entry.hw.setDigitalPortValue('target', 0x11);
        Entry.hw.setDigitalPortValue('userinterface_command', uicommand);
        Entry.hw.setDigitalPortValue('userinterface_function', uifunction);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['userinterface_command'];
        delete Entry.hw.sendQueue['userinterface_function'];
    },

    // functions for block

    // 데이터 읽기
    getData: function getData(script, device) {
        return Entry.hw.portData[device];
    },

    // LED 수동 설정
    setLightManual: function setLightManual(script, target, flags, brightness) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferLightManual(target, flags, brightness);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 버저 설정(함수 호출 시 시간은 모두 ms 단위 사용)
    /*  
        MuteInstantally     = 1,    // 묵음 즉시 적용
        MuteContinually     = 2,    // 묵음 예약
        
        ScaleInstantally    = 3,    // 음계 즉시 적용
        ScaleContinually    = 4,    // 음계 예약
        
        HzInstantally       = 5,    // 주파수 즉시 적용
        HzContinually       = 6,    // 주파수 예약
     */
    // 정지
    setBuzzerStop: function setBuzzerStop(script) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferbuzzer(0, 0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 묵음
    setBuzzerMute: function setBuzzerMute(script, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 2; // 묵음 연속
                    if (flagInstantly) mode = 1; // 묵음 즉시

                    this.transferbuzzer(mode, 0xee, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setBuzzerScale: function setBuzzerScale(script, octave, scale, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 4; // Scale 연속
                    if (flagInstantly) mode = 3; // Scale 즉시

                    var scalecalc = octave * 12 + scale;

                    this.transferbuzzer(mode, scalecalc, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setBuzzerHz: function setBuzzerHz(script, hz, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 6; // Hz 연속
                    if (flagInstantly) mode = 5; // Hz 즉시

                    // 범위 조정
                    hz = Math.max(hz, 1);
                    hz = Math.min(hz, 63999);

                    this.transferbuzzer(mode, hz, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 진동 제어
    /*
        Stop            = 0,    // 정지
        Instantally     = 1,    // 즉시 적용
        Continually     = 2,    // 예약
     */
    setVibratorStop: function setVibratorStop(script) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferVibrator(0, 0, 0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setVibrator: function setVibrator(script, timeOn, timeOff, timeRun, flagDelay, flagInstantly) {
        timeRun = Math.max(timeRun, 0);
        timeRun = Math.min(timeRun, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = timeRun;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 2; // 예약
                    if (flagInstantly) mode = 1; // 즉시

                    this.transferVibrator(mode, timeOn, timeOff, timeRun);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendCommand: function sendCommand(script, target, command, option) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferCommand(target, command, option);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setUserInterface: function setUserInterface(script, uicommand, uifunction) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferUserInterface(uicommand, uifunction);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    }
};

Entry.byrobot_dronefighter_controller.getBlocks = function () {
    return {
        //region byrobot 바이로봇
        /* BYROBOT DroneFighter Controller Start */
        byrobot_dronefighter_controller_controller_value_button: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_button_button, 'button_button'], [Lang.Blocks.byrobot_dronefighter_controller_button_event, 'button_event']],
                value: 'button_button', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_controller_controller_value_button' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_dronefighter_controller_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;
                var device = script.getField('DEVICE'); // paramsKeyMap에 정의된 이름 사용
                return read[device];
            }
        },
        byrobot_dronefighter_controller_controller_value_joystick: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x, 'joystick_left_x'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y, 'joystick_left_y'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction, 'joystick_left_direction'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event, 'joystick_left_event'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command, 'joystick_left_command'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x, 'joystick_right_x'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y, 'joystick_right_y'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction, 'joystick_right_direction'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event, 'joystick_right_event'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command, 'joystick_right_command']],
                value: 'joystick_left_x', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_controller_controller_value_joystick' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_dronefighter_controller_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;
                var device = script.getField('DEVICE'); // paramsKeyMap에 정의된 이름 사용
                return read[device];
            }
        },
        byrobot_dronefighter_controller_controller_if_button_press: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_button_front_left, '1'], [Lang.Blocks.byrobot_dronefighter_controller_button_front_right, '2'], [Lang.Blocks.byrobot_dronefighter_controller_button_front_left_right, '3'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up_left, '4'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up_right, '8'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up, '16'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_left, '32'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_right, '64'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_down, '128'], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_left, '256'], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_right, '512'], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_left_right, '768']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_controller_controller_if_button_press'
            },
            paramsKeyMap: {
                BUTTON: 0
            },
            class: 'byrobot_dronefighter_controller_boolean_input',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;
                var button = 'button_button'; // paramsKeyMap에 정의된 이름 사용
                var buttonevent = 'button_event'; // paramsKeyMap에 정의된 이름 사용

                if (read[button] == script.getField('BUTTON') && read[buttonevent] == 2) return true;else return false;
            }
        },
        byrobot_dronefighter_controller_controller_if_joystick_direction: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_common_left, 'joystick_left_direction'], [Lang.Blocks.byrobot_dronefighter_common_right, 'joystick_right_direction']],
                value: 'joystick_left_direction',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left_up, '17'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_up, '18'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right_up, '20'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left, '33'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_center, '34'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right, '36'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left_down, '65'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_down, '66'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right_down, '68']],
                value: '34',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'byrobot_dronefighter_controller_controller_if_joystick_direction'
            },
            paramsKeyMap: {
                DEVICE: 0,
                DIRECTION: 1
            },
            class: 'byrobot_dronefighter_controller_boolean_input',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;

                var device = script.getField('DEVICE'); // paramsKeyMap에 정의된 이름 사용

                if (read[device] == script.getField('DIRECTION')) return true;else return false;
            }
        },
        byrobot_dronefighter_controller_controller_light_manual_single_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_controller_controller_light_manual_single_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_controller_controller_light',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_controller.setLightManual(script, 0x11, 0xff, 0);
            }
        },
        byrobot_dronefighter_controller_controller_light_manual_single: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_all, '255'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_1, '128'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_2, '64'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_3, '32'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_4, '16'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_5, '8'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_6, '4'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_blue, '2'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_red, '1']],
                value: '128',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_on, '220'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_off, '0'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b25, '75'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b50, '125'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b75, '200'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b100, '255']],
                value: '220',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_dronefighter_controller_controller_light_manual_single'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_dronefighter_controller_controller_light',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var flags = parseInt(script.getField('FLAGS'));
                var brightness = parseInt(script.getField('BRIGHTNESS'));
                return Entry.byrobot_dronefighter_controller.setLightManual(script, 0x11, flags, brightness);
            }
        },
        byrobot_dronefighter_controller_controller_light_manual_single_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0b11111111']
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'byrobot_dronefighter_controller_controller_light_manual_single_input'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_dronefighter_controller_controller_light',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var flags = script.getNumberValue('FLAGS');
                var brightness = script.getNumberValue('BRIGHTNESS');
                return Entry.byrobot_dronefighter_controller.setLightManual(script, 0x11, flags, brightness);
            }
        },
        byrobot_dronefighter_controller_controller_buzzer_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_controller_controller_buzzer_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_controller_buzzer',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_controller.setBuzzerStop(script);
            }
        },
        byrobot_dronefighter_controller_controller_buzzer_scale: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_dronefighter_controller_controller_buzzer_scale'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1
            },
            class: 'byrobot_dronefighter_controller_buzzer',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));

                if (scale == -1) return Entry.byrobot_dronefighter_controller.setBuzzerMute(script, 60000, false, true);else return Entry.byrobot_dronefighter_controller.setBuzzerScale(script, octave, scale, 60000, false, true);
            }
        },
        byrobot_dronefighter_controller_controller_buzzer_scale_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_controller_controller_buzzer_scale_delay'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1,
                TIME: 2
            },
            class: 'byrobot_dronefighter_controller_buzzer',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));
                var time = parseInt(script.getNumberValue('TIME') * 1000);

                if (scale == -1) return Entry.byrobot_dronefighter_controller.setBuzzerMute(script, time, true, true);else return Entry.byrobot_dronefighter_controller.setBuzzerScale(script, octave, scale, time, true, true);
            }
        },
        byrobot_dronefighter_controller_controller_buzzer_scale_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_controller_controller_buzzer_scale_reserve'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1,
                TIME: 2
            },
            class: 'byrobot_dronefighter_controller_buzzer',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));
                var time = parseInt(script.getNumberValue('TIME') * 1000);

                if (scale == -1) return Entry.byrobot_dronefighter_controller.setBuzzerMute(script, time, false, false);else return Entry.byrobot_dronefighter_controller.setBuzzerScale(script, octave, scale, time, false, false);
            }
        },
        byrobot_dronefighter_controller_controller_buzzer_hz: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'byrobot_dronefighter_controller_controller_buzzer_hz'
            },
            paramsKeyMap: {
                HZ: 0
            },
            class: 'byrobot_dronefighter_controller_buzzer',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                return Entry.byrobot_dronefighter_controller.setBuzzerHz(script, hz, 60000, false, true);
            }
        },
        byrobot_dronefighter_controller_controller_buzzer_hz_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_controller_controller_buzzer_hz_delay'
            },
            paramsKeyMap: {
                HZ: 0,
                TIME: 1
            },
            class: 'byrobot_dronefighter_controller_buzzer',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                var time = parseInt(script.getNumberValue('TIME') * 1000);
                return Entry.byrobot_dronefighter_controller.setBuzzerHz(script, hz, time, true, true);
            }
        },
        byrobot_dronefighter_controller_controller_buzzer_hz_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_controller_controller_buzzer_hz_reserve'
            },
            paramsKeyMap: {
                HZ: 0,
                TIME: 1
            },
            class: 'byrobot_dronefighter_controller_buzzer',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                var time = parseInt(script.getNumberValue('TIME') * 1000);
                return Entry.byrobot_dronefighter_controller.setBuzzerHz(script, hz, time, false, false);
            }
        },
        byrobot_dronefighter_controller_controller_vibrator_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_controller_controller_vibrator_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_controller_vibrator',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_controller.setVibratorStop(script);
            }
        },
        byrobot_dronefighter_controller_controller_vibrator_on_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_controller_controller_vibrator_on_delay'
            },
            paramsKeyMap: {
                TIMEON: 0
            },
            class: 'byrobot_dronefighter_controller_vibrator',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                return Entry.byrobot_dronefighter_controller.setVibrator(script, timeOn, 0, timeOn, true, true);
            }
        },
        byrobot_dronefighter_controller_controller_vibrator_on_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_controller_controller_vibrator_on_reserve'
            },
            paramsKeyMap: {
                TIMEON: 0
            },
            class: 'byrobot_dronefighter_controller_vibrator',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                return Entry.byrobot_dronefighter_controller.setVibrator(script, timeOn, 0, timeOn, false, false);
            }
        },
        byrobot_dronefighter_controller_controller_vibrator_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.02']
                }, {
                    type: 'text',
                    params: ['0.2']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_controller_controller_vibrator_delay'
            },
            paramsKeyMap: {
                TIMEON: 0,
                TIMEOFF: 1,
                TIMERUN: 2
            },
            class: 'byrobot_dronefighter_controller_vibrator',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                var timeOff = parseInt(script.getNumberValue('TIMEOFF') * 1000);
                var timeRun = parseInt(script.getNumberValue('TIMERUN') * 1000);
                return Entry.byrobot_dronefighter_controller.setVibrator(script, timeOn, timeOff, timeRun, true, true);
            }
        },
        byrobot_dronefighter_controller_controller_vibrator_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.02']
                }, {
                    type: 'text',
                    params: ['0.2']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_controller_controller_vibrator_reserve'
            },
            paramsKeyMap: {
                TIMEON: 0,
                TIMEOFF: 1,
                TIMERUN: 2
            },
            class: 'byrobot_dronefighter_controller_vibrator',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                var timeOff = parseInt(script.getNumberValue('TIMEOFF') * 1000);
                var timeRun = parseInt(script.getNumberValue('TIMERUN') * 1000);
                return Entry.byrobot_dronefighter_controller.setVibrator(script, timeOn, timeOff, timeRun, false, false);
            }
        },
        byrobot_dronefighter_controller_controller_userinterface_preset: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_userinterface_preset_clear, '1'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_preset_dronefighter2017, '3'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_preset_education, '4']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'byrobot_dronefighter_controller_controller_userinterface_preset'
            },
            paramsKeyMap: {
                PRESET: 0
            },
            class: 'byrobot_dronefighter_controller_userinterface',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var preset = parseInt(script.getField('PRESET'));
                return Entry.byrobot_dronefighter_controller.sendCommand(script, 0x11, 0x80, preset);
            }
        },
        byrobot_dronefighter_controller_controller_userinterface: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_frontleft_down, '1'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_frontright_down, '2'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_midturnleft_down, '3'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_midturnright_down, '4'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_midup_down, '5'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_midleft_down, '6'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_midright_down, '7'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_middown_down, '8'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_left_up_in, '9'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_left_left_in, '10'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_left_right_in, '11'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_left_down_in, '12'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_right_up_in, '13'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_right_left_in, '14'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_right_right_in, '15'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_right_down_in, '16']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_joystickcalibration_reset, '1'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_team_red, '2'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_team_blue, '3'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_vehicle_flight, '4'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_vehicle_flightnoguard, '5'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_vehicle_drive, '6'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_coordinate_local, '7'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_coordinate_world, '8'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_control_mode1, '9'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_control_mode2, '10'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_control_mode3, '11'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_control_mode4, '12'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_gyrobias_reset, '13'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_usb_cdc, '14'], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_usb_hid, '15']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_dronefighter_controller_controller_userinterface'
            },
            paramsKeyMap: {
                COMMAND: 0,
                FUNCTION: 1
            },
            class: 'byrobot_dronefighter_controller_userinterface',
            isNotFor: ['byrobot_dronefighter_controller'],
            func: function func(sprite, script) {
                var uicommand = parseInt(script.getField('COMMAND'));
                var uifunction = parseInt(script.getField('FUNCTION'));
                return Entry.byrobot_dronefighter_controller.setUserInterface(script, uicommand, uifunction);
            }
        }
        /* BYROBOT DroneFighter Controller End */
        //endregion byrobot 바이로봇
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_byrobot_dronefighter_drive.js":
/*!*******************************************************************!*\
  !*** ./src/playground/blocks/block_byrobot_dronefighter_drive.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/***************************************************************************************
 *
 *  이름 붙이기 규칙(2017.1.16)
 *
 *  1. 변수에 해당하는 이름들은 모두 소문자
 *  2. 이어지는 추가 이름은 '_'를 붙여서 연결
 *
 ***************************************************************************************/

/***************************************************************************************
 *  장치와 연관된 변수 및 함수 정의
 ***************************************************************************************/

Entry.byrobot_dronefighter_drive = {
    name: 'byrobot_dronefighter_drive',
    url: 'http://www.byrobot.co.kr/',
    imageName: 'byrobot_dronefighter_drive.png',
    title: {
        "ko": "바이로봇 드론파이터 자동차",
        "en": "BYROBOT Drone Fighter drive"
    },

    // 초기화
    setZero: function setZero() {
        // 초기화

        // 한 번에 명령을 전송하면 hw까지 제대로 전달되지 않는 경우가 있어
        // 명령을 각각 분리하여 전송하게 함(2017.01.03)
        for (var i = 0; i < 1; i++) {
            this.transferCommand(0x10, 0x24, 0);
            this.transferVibrator(0, 0, 0, 0);
            this.transferbuzzer(0, 0, 0);
            this.transferLightManual(0x10, 0xff, 0);
            this.transferLightManual(0x11, 0xff, 0);
        }
    },

    // Entry 좌측 하단 하드웨어 모니터 화면에 표시하는 속성
    // listPorts와 ports 두 곳 동시에 동일한 속성을 표시할 수는 없음
    monitorTemplate: {
        imgPath: 'hw/byrobot_dronefighter_drive.png', // 배경 이미지
        width: 500, // 이미지의 폭
        height: 500, // 이미지의 높이

        // 모니터 화면 상단에 차례대로 나열하는 값
        listPorts: {
            state_modeVehicle: {
                name: Lang.Blocks.byrobot_dronefighter_drone_state_mode_vehicle,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            state_modeDrive: {
                name: Lang.Blocks.byrobot_dronefighter_drone_state_mode_drive,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            state_battery: {
                name: Lang.Blocks.byrobot_dronefighter_drone_state_battery,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            attitude_roll: {
                name: Lang.Blocks.byrobot_dronefighter_drone_attitude_roll,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            attitude_pitch: {
                name: Lang.Blocks.byrobot_dronefighter_drone_attitude_pitch,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            attitude_yaw: {
                name: Lang.Blocks.byrobot_dronefighter_drone_attitude_yaw,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            irmessage_irdata: {
                name: Lang.Blocks.byrobot_dronefighter_drone_irmessage,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_x: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_y: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_direction: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_event: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_command: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_x: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_y: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_direction: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_event: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_command: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            button_button: {
                name: Lang.Blocks.byrobot_dronefighter_controller_button_button,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            button_event: {
                name: Lang.Blocks.byrobot_dronefighter_controller_button_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            entryhw_countTransferReserved: {
                name: Lang.Blocks.byrobot_dronefighter_entryhw_count_transfer_reserved,
                type: 'output',
                pos: { x: 0, y: 0 }
            }
        },

        // 모니터 화면 지정 위치와 선으로 연결하여 표시하는 값
        ports: {},

        mode: 'both' // 표시 모드
    },

    // functions

    // 시간 지연
    checkFinish: function checkFinish(script, ms) {
        if (!script.isStart) {
            script.isStart = true;
            script.timeFlag = 1;

            var fps = Entry.FPS || 60;
            var timeValue = 60 / fps * ms;

            setTimeout(function () {
                script.timeFlag = 0;
            }, timeValue);

            return 'Start';
        } else if (script.timeFlag == 1) {
            return 'Running';
        } else {
            delete script.timeFlag;
            delete script.isStart;
            Entry.engine.isContinue = false;
            return 'Finish';
        }
    },

    // 데이터 전송
    transferLightManual: function transferLightManual(target, flags, brightness) {
        // 범위 조정
        target = Math.max(target, 0);
        target = Math.min(target, 255);
        flags = Math.max(flags, 0);
        flags = Math.min(flags, 255);
        brightness = Math.max(brightness, 0);
        brightness = Math.min(brightness, 255);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('light_manual_flags', flags);
        Entry.hw.setDigitalPortValue('light_manual_brightness', brightness);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['light_manual_flags'];
        delete Entry.hw.sendQueue['light_manual_brightness'];
    },

    transferbuzzer: function transferbuzzer(mode, value, time) {
        // 전송
        Entry.hw.setDigitalPortValue('target', 0x11);
        Entry.hw.setDigitalPortValue('buzzer_mode', mode);
        Entry.hw.setDigitalPortValue('buzzer_value', value);
        Entry.hw.setDigitalPortValue('buzzer_time', time);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['buzzer_mode'];
        delete Entry.hw.sendQueue['buzzer_value'];
        delete Entry.hw.sendQueue['buzzer_time'];
    },

    transferVibrator: function transferVibrator(mode, timeOn, timeOff, timeRun) {
        // 범위 조정
        timeOn = Math.max(timeOn, 1);
        timeOn = Math.min(timeOn, 60000);
        timeOff = Math.max(timeOff, 1);
        timeOff = Math.min(timeOff, 60000);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x11);
        Entry.hw.setDigitalPortValue('vibrator_mode', mode);
        Entry.hw.setDigitalPortValue('vibrator_on', timeOn);
        Entry.hw.setDigitalPortValue('vibrator_off', timeOff);
        Entry.hw.setDigitalPortValue('vibrator_total', timeRun);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['vibrator_mode'];
        delete Entry.hw.sendQueue['vibrator_on'];
        delete Entry.hw.sendQueue['vibrator_off'];
        delete Entry.hw.sendQueue['vibrator_total'];
    },

    transferIrMessage: function transferIrMessage(irmessage) {
        // 범위 조정
        irmessage = Math.max(irmessage, 0);
        irmessage = Math.min(irmessage, 127);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x10);
        Entry.hw.setDigitalPortValue('irmessage_data', irmessage);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['irmessage_data'];
    },

    transferMotorSingle: function transferMotorSingle(motorIndex, motorDirection, motorSpeed) {
        // 범위 조정
        motorSpeed = Math.max(motorSpeed, 0);
        motorSpeed = Math.min(motorSpeed, 4096);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x10);
        Entry.hw.setDigitalPortValue('motorsingle_target', motorIndex);
        Entry.hw.setDigitalPortValue('motorsingle_direction', motorDirection);
        Entry.hw.setDigitalPortValue('motorsingle_value', motorSpeed);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['motorsingle_target'];
        delete Entry.hw.sendQueue['motorsingle_direction'];
        delete Entry.hw.sendQueue['motorsingle_value'];
    },

    transferCommand: function transferCommand(target, command, option) {
        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('command_command', command);
        Entry.hw.setDigitalPortValue('command_option', option);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['command_command'];
        delete Entry.hw.sendQueue['command_option'];
    },

    transferControlDouble: function transferControlDouble(wheel, accel) {
        // 범위 조정
        wheel = Math.max(wheel, -100);
        wheel = Math.min(wheel, 100);
        accel = Math.max(accel, 0);
        accel = Math.min(accel, 100);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x10);
        Entry.hw.setDigitalPortValue('control_wheel', wheel);
        Entry.hw.setDigitalPortValue('control_accel', accel);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['control_wheel'];
        delete Entry.hw.sendQueue['control_accel'];
    },

    transferControlQuad: function transferControlQuad(roll, pitch, yaw, throttle) {
        // 범위 조정
        roll = Math.max(roll, -100);
        roll = Math.min(roll, 100);
        pitch = Math.max(pitch, -100);
        pitch = Math.min(pitch, 100);
        yaw = Math.max(yaw, -100);
        yaw = Math.min(yaw, 100);
        throttle = Math.max(throttle, -100);
        throttle = Math.min(throttle, 100);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x10);
        Entry.hw.setDigitalPortValue('control_roll', roll);
        Entry.hw.setDigitalPortValue('control_pitch', pitch);
        Entry.hw.setDigitalPortValue('control_yaw', yaw);
        Entry.hw.setDigitalPortValue('control_throttle', throttle);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['control_roll'];
        delete Entry.hw.sendQueue['control_pitch'];
        delete Entry.hw.sendQueue['control_yaw'];
        delete Entry.hw.sendQueue['control_throttle'];
    },

    // functions for block

    // 데이터 읽기
    getData: function getData(script, device) {
        return Entry.hw.portData[device];
    },

    // LED 수동 설정
    setLightManual: function setLightManual(script, target, flags, brightness) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferLightManual(target, flags, brightness);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 버저 설정(함수 호출 시 시간은 모두 ms 단위 사용)
    /*  
        MuteInstantally     = 1,    // 묵음 즉시 적용
        MuteContinually     = 2,    // 묵음 예약
        
        ScaleInstantally    = 3,    // 음계 즉시 적용
        ScaleContinually    = 4,    // 음계 예약
        
        HzInstantally       = 5,    // 주파수 즉시 적용
        HzContinually       = 6,    // 주파수 예약
     */
    // 정지
    setBuzzerStop: function setBuzzerStop(script) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferbuzzer(0, 0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 묵음
    setBuzzerMute: function setBuzzerMute(script, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 2; // 묵음 연속
                    if (flagInstantly) mode = 1; // 묵음 즉시

                    this.transferbuzzer(mode, 0xee, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setBuzzerScale: function setBuzzerScale(script, octave, scale, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 4; // Scale 연속
                    if (flagInstantly) mode = 3; // Scale 즉시

                    var scalecalc = octave * 12 + scale;

                    this.transferbuzzer(mode, scalecalc, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setBuzzerHz: function setBuzzerHz(script, hz, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 6; // Hz 연속
                    if (flagInstantly) mode = 5; // Hz 즉시

                    // 범위 조정
                    hz = Math.max(hz, 1);
                    hz = Math.min(hz, 63999);

                    this.transferbuzzer(mode, hz, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 진동 제어
    /*
        Stop            = 0,    // 정지
        Instantally     = 1,    // 즉시 적용
        Continually     = 2,    // 예약
     */
    setVibratorStop: function setVibratorStop(script) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferVibrator(0, 0, 0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setVibrator: function setVibrator(script, timeOn, timeOff, timeRun, flagDelay, flagInstantly) {
        timeRun = Math.max(timeRun, 0);
        timeRun = Math.min(timeRun, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = timeRun;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 2; // 예약
                    if (flagInstantly) mode = 1; // 즉시

                    this.transferVibrator(mode, timeOn, timeOff, timeRun);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendIrMessage: function sendIrMessage(script, irmessage) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferIrMessage(irmessage);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendStop: function sendStop(script) {
        return this.sendCommand(script, 0x10, 0x24, 0);
    },

    sendCommand: function sendCommand(script, target, command, option) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferCommand(target, command, option);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setMotorSingle: function setMotorSingle(script, motorIndex, motorDirection, motorSpeed) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferMotorSingle(motorIndex, motorDirection, motorSpeed);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },
    /*
        None = 0,           ///< 없음
        
        Flight = 0x10,      ///< 비행(가드 포함)
        FlightNoGuard,      ///< 비행(가드 없음)
        FlightFPV,          ///< 비행(FPV)
        
        Drive = 0x20,       ///< 주행
        DriveFPV,           ///< 주행(FPV)
        
        Test = 0x30,        ///< 테스트
     */
    setModeVehicle: function setModeVehicle(script, modeVehicle) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferCommand(0x10, 0x10, modeVehicle);

                    this.transferControlDouble(0, 0);
                    this.transferControlQuad(0, 0, 0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendControlDoubleSingle: function sendControlDoubleSingle(script, controlTarget, value, time, flagDelay) {
        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    switch (controlTarget) {
                        case 'control_wheel':
                            {
                                // 범위 조정
                                value = Math.max(value, -100);
                                value = Math.min(value, 100);
                            }
                            break;

                        case 'control_accel':
                            {
                                // 범위 조정
                                value = Math.max(value, 0);
                                value = Math.min(value, 100);
                            }
                            break;
                    }

                    // 전송
                    Entry.hw.setDigitalPortValue('target', 0x10);
                    Entry.hw.setDigitalPortValue(controlTarget, value);

                    Entry.hw.update();

                    delete Entry.hw.sendQueue['target'];
                    delete Entry.hw.sendQueue[controlTarget];
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                if (flagDelay) {
                    // 블럭을 빠져나갈 때 변경했던 값을 초기화

                    // 전송
                    Entry.hw.setDigitalPortValue('target', 0x10);
                    Entry.hw.setDigitalPortValue(controlTarget, 0);

                    Entry.hw.update();

                    delete Entry.hw.sendQueue['target'];
                    delete Entry.hw.sendQueue[controlTarget];
                }
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendControlDouble: function sendControlDouble(script, wheel, accel, time, flagDelay) {
        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    this.transferControlDouble(wheel, accel);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                if (flagDelay) {
                    this.transferControlDouble(0, 0);
                }
                return script.callReturn();

            default:
                return script.callReturn();
        }
    }
};

Entry.byrobot_dronefighter_drive.getBlocks = function () {
    return {
        //region byrobot 바이로봇
        /* BYROBOT DroneFighter Drive Start */
        byrobot_dronefighter_drive_drone_value_attitude: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_drone_attitude_roll, 'attitude_roll'], [Lang.Blocks.byrobot_dronefighter_drone_attitude_pitch, 'attitude_pitch'], [Lang.Blocks.byrobot_dronefighter_drone_attitude_yaw, 'attitude_yaw']],
                value: 'attitude_roll', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_drive_drone_value_attitude' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_dronefighter_drive_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;
                var device = script.getField('DEVICE'); // paramsKeyMap에 정의된 이름 사용
                return read[device];
            }
        },
        byrobot_dronefighter_drive_drone_value_etc: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_drone_state_mode_vehicle, 'state_modeVehicle'], [Lang.Blocks.byrobot_dronefighter_drone_state_mode_drive, 'state_modeDrive'], [Lang.Blocks.byrobot_dronefighter_drone_state_battery, 'state_battery'], [Lang.Blocks.byrobot_dronefighter_drone_irmessage, 'irmessage_irdata']],
                value: 'irmessage_irdata', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_drive_drone_value_etc' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_dronefighter_drive_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;
                var device = script.getField('DEVICE'); // paramsKeyMap에 정의된 이름 사용
                return read[device];
            }
        },
        byrobot_dronefighter_drive_controller_value_button: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_button_button, 'button_button'], [Lang.Blocks.byrobot_dronefighter_controller_button_event, 'button_event']],
                value: 'button_button', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_drive_controller_value_button' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_dronefighter_drive_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;
                var device = script.getField('DEVICE'); // paramsKeyMap에 정의된 이름 사용
                return read[device];
            }
        },
        byrobot_dronefighter_drive_controller_value_joystick: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x, 'joystick_left_x'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y, 'joystick_left_y'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction, 'joystick_left_direction'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event, 'joystick_left_event'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command, 'joystick_left_command'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x, 'joystick_right_x'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y, 'joystick_right_y'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction, 'joystick_right_direction'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event, 'joystick_right_event'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command, 'joystick_right_command']],
                value: 'joystick_left_x', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_drive_controller_value_joystick' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_dronefighter_drive_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;
                var device = script.getField('DEVICE'); // paramsKeyMap에 정의된 이름 사용
                return read[device];
            }
        },
        byrobot_dronefighter_drive_controller_if_button_press: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_button_front_left, '1'], [Lang.Blocks.byrobot_dronefighter_controller_button_front_right, '2'], [Lang.Blocks.byrobot_dronefighter_controller_button_front_left_right, '3'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up_left, '4'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up_right, '8'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up, '16'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_left, '32'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_right, '64'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_down, '128'], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_left, '256'], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_right, '512'], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_left_right, '768']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_drive_controller_if_button_press'
            },
            paramsKeyMap: {
                BUTTON: 0
            },
            class: 'byrobot_dronefighter_drive_boolean_input',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;
                var button = 'button_button'; // paramsKeyMap에 정의된 이름 사용
                var buttonevent = 'button_event'; // paramsKeyMap에 정의된 이름 사용

                if (read[button] == script.getField('BUTTON') && read[buttonevent] == 2) return true;else return false;
            },
            syntax: { js: [], py: [] }
        },
        byrobot_dronefighter_drive_controller_if_joystick_direction: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_common_left, 'joystick_left_direction'], [Lang.Blocks.byrobot_dronefighter_common_right, 'joystick_right_direction']],
                value: 'joystick_left_direction',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left_up, '17'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_up, '18'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right_up, '20'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left, '33'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_center, '34'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right, '36'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left_down, '65'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_down, '66'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right_down, '68']],
                value: '34',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'byrobot_dronefighter_drive_controller_if_joystick_direction'
            },
            paramsKeyMap: {
                DEVICE: 0,
                DIRECTION: 1
            },
            class: 'byrobot_dronefighter_drive_boolean_input',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;

                var device = script.getField('DEVICE'); // paramsKeyMap에 정의된 이름 사용

                if (read[device] == script.getField('DIRECTION')) return true;else return false;
            }
        },
        byrobot_dronefighter_drive_drone_control_car_stop: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_drive_drone_control_car_stop'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_drive_control_drive',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_drive.sendStop(script);
            }
        },
        byrobot_dronefighter_drive_drone_control_double_one: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_drone_control_double_wheel, 'control_wheel'], [Lang.Blocks.byrobot_dronefighter_drone_control_double_accel_forward, 'control_accel']],
                value: 'control_accel',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'byrobot_dronefighter_drive_drone_control_double_one'
            },
            paramsKeyMap: {
                CONTROLTARGET: 0,
                VALUE: 1
            },
            class: 'byrobot_dronefighter_drive_control_drive',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var controlTarget = script.getField('CONTROLTARGET');
                var value = parseInt(script.getNumberValue('VALUE', script));

                return Entry.byrobot_dronefighter_drive.sendControlDoubleSingle(script, controlTarget, value, 0, false);
            }
        },
        byrobot_dronefighter_drive_drone_control_double_one_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_drone_control_double_wheel, 'control_wheel'], [Lang.Blocks.byrobot_dronefighter_drone_control_double_accel_forward, 'control_accel']],
                value: 'control_accel',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['100']
                }, {
                    type: 'number',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_drive_drone_control_double_one_delay'
            },
            paramsKeyMap: {
                CONTROLTARGET: 0,
                VALUE: 1,
                TIME: 2
            },
            class: 'byrobot_dronefighter_drive_control_drive',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var controlTarget = script.getField('CONTROLTARGET');
                var value = parseInt(script.getNumberValue('VALUE', script));
                var time = parseInt(script.getNumberValue('TIME', script) * 1000);

                return Entry.byrobot_dronefighter_drive.sendControlDoubleSingle(script, controlTarget, value, time, true);
            }
        },
        byrobot_dronefighter_drive_drone_control_double: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'byrobot_dronefighter_drive_drone_control_double'
            },
            paramsKeyMap: {
                WHEEL: 0,
                ACCEL: 1
            },
            class: 'byrobot_dronefighter_drive_control_drive',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var wheel = parseInt(script.getNumberValue('WHEEL', script));
                var accel = parseInt(script.getNumberValue('ACCEL', script));
                return Entry.byrobot_dronefighter_drive.sendControlDouble(script, wheel, accel, 0, false);
            }
        },
        byrobot_dronefighter_drive_drone_motor_stop: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_drive_drone_motor_stop'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_drive_motor',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_drive.sendStop(script);
            }
        },
        byrobot_dronefighter_drive_drone_motorsingle: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['1', '0'], ['2', '1'], ['3', '2'], ['4', '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'byrobot_dronefighter_drive_drone_motorsingle'
            },
            paramsKeyMap: {
                MOTORINDEX: 0,
                MOTORSPEED: 1
            },
            class: 'byrobot_dronefighter_drive_motor',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var motorIndex = parseInt(script.getField('MOTORINDEX'));
                var motorDirection = 1;
                var motorSpeed = parseInt(script.getNumberValue('MOTORSPEED', script));

                return Entry.byrobot_dronefighter_drive.setMotorSingle(script, motorIndex, motorDirection, motorSpeed);
            }
        },
        byrobot_dronefighter_drive_drone_motorsingle_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, {
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'byrobot_dronefighter_drive_drone_motorsingle_input'
            },
            paramsKeyMap: {
                MOTORINDEX: 0,
                MOTORSPEED: 1
            },
            class: 'byrobot_dronefighter_drive_motor',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var motorIndex = parseInt(script.getNumberValue('MOTORINDEX', script)) - 1;
                var motorDirection = 1;
                var motorSpeed = parseInt(script.getNumberValue('MOTORSPEED', script));

                return Entry.byrobot_dronefighter_drive.setMotorSingle(script, motorIndex, motorDirection, motorSpeed);
            }
        },
        byrobot_dronefighter_drive_drone_irmessage: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['100']
                }, null],
                type: 'byrobot_dronefighter_drive_drone_irmessage'
            },
            paramsKeyMap: {
                IRMESSAGE: 0
            },
            class: 'byrobot_dronefighter_drive_irmessage',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var irmessage = script.getNumberValue('IRMESSAGE', script);
                return Entry.byrobot_dronefighter_drive.sendIrMessage(script, irmessage);
            }
        },
        byrobot_dronefighter_drive_controller_light_manual_single_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_drive_controller_light_manual_single_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_drive_controller_light',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_drive.setLightManual(script, 0x11, 0xff, 0);
            }
        },
        byrobot_dronefighter_drive_controller_light_manual_single: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_all, '255'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_1, '128'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_2, '64'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_3, '32'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_4, '16'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_5, '8'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_6, '4'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_blue, '2'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_red, '1']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_on, '220'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_off, '0'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b25, '75'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b50, '125'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b75, '200'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b100, '255']],
                value: '220',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_dronefighter_drive_controller_light_manual_single'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_dronefighter_drive_controller_light',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var flags = parseInt(script.getField('FLAGS'));
                var brightness = parseInt(script.getField('BRIGHTNESS'));
                return Entry.byrobot_dronefighter_drive.setLightManual(script, 0x11, flags, brightness);
            }
        },
        byrobot_dronefighter_drive_controller_light_manual_single_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0b11111111']
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'byrobot_dronefighter_drive_controller_light_manual_single_input'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_dronefighter_drive_controller_light',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var flags = script.getNumberValue('FLAGS');
                var brightness = script.getNumberValue('BRIGHTNESS');
                return Entry.byrobot_dronefighter_drive.setLightManual(script, 0x11, flags, brightness);
            }
        },
        byrobot_dronefighter_drive_drone_light_manual_single_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_drive_drone_light_manual_single_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_drive_drone_light',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_drive.setLightManual(script, 0x10, 0xff, 0);
            }
        },
        byrobot_dronefighter_drive_drone_light_manual_single: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_all, '255'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_1, '128'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_2, '64'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_3, '32'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_4, '16'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_blue, '8'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_red, '4']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_on, '220'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_off, '0'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b25, '75'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b50, '125'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b75, '200'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b100, '255']],
                value: '220',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_dronefighter_drive_drone_light_manual_single'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_dronefighter_drive_drone_light',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var flags = parseInt(script.getField('FLAGS'));
                var brightness = parseInt(script.getField('BRIGHTNESS'));
                return Entry.byrobot_dronefighter_drive.setLightManual(script, 0x10, flags, brightness);
            }
        },
        byrobot_dronefighter_drive_drone_light_manual_single_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0b11111111']
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'byrobot_dronefighter_drive_drone_light_manual_single_input'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_dronefighter_drive_drone_light',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var flags = script.getNumberValue('FLAGS');
                var brightness = script.getNumberValue('BRIGHTNESS');
                return Entry.byrobot_dronefighter_drive.setLightManual(script, 0x10, flags, brightness);
            }
        },
        byrobot_dronefighter_drive_controller_buzzer_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_drive_controller_buzzer_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_drive_buzzer',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_drive.setBuzzerStop(script);
            }
        },
        byrobot_dronefighter_drive_controller_buzzer_scale: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_dronefighter_drive_controller_buzzer_scale'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1
            },
            class: 'byrobot_dronefighter_drive_buzzer',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));

                if (scale == -1) return Entry.byrobot_dronefighter_drive.setBuzzerMute(script, 60000, false, true);else return Entry.byrobot_dronefighter_drive.setBuzzerScale(script, octave, scale, 60000, false, true);
            }
        },
        byrobot_dronefighter_drive_controller_buzzer_scale_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_drive_controller_buzzer_scale_delay'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1,
                TIME: 2
            },
            class: 'byrobot_dronefighter_drive_buzzer',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));
                var time = parseInt(script.getNumberValue('TIME') * 1000);

                if (scale == -1) return Entry.byrobot_dronefighter_drive.setBuzzerMute(script, time, true, true);else return Entry.byrobot_dronefighter_drive.setBuzzerScale(script, octave, scale, time, true, true);
            }
        },
        byrobot_dronefighter_drive_controller_buzzer_scale_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_drive_controller_buzzer_scale_reserve'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1,
                TIME: 2
            },
            class: 'byrobot_dronefighter_drive_buzzer',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));
                var time = parseInt(script.getNumberValue('TIME') * 1000);

                if (scale == -1) return Entry.byrobot_dronefighter_drive.setBuzzerMute(script, time, false, false);else return Entry.byrobot_dronefighter_drive.setBuzzerScale(script, octave, scale, time, false, false);
            }
        },
        byrobot_dronefighter_drive_controller_buzzer_hz: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'byrobot_dronefighter_drive_controller_buzzer_hz'
            },
            paramsKeyMap: {
                HZ: 0
            },
            class: 'byrobot_dronefighter_drive_buzzer',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                return Entry.byrobot_dronefighter_drive.setBuzzerHz(script, hz, 60000, false, true);
            }
        },
        byrobot_dronefighter_drive_controller_buzzer_hz_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_drive_controller_buzzer_hz_delay'
            },
            paramsKeyMap: {
                HZ: 0,
                TIME: 1
            },
            class: 'byrobot_dronefighter_drive_buzzer',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                var time = parseInt(script.getNumberValue('TIME') * 1000);
                return Entry.byrobot_dronefighter_drive.setBuzzerHz(script, hz, time, true, true);
            }
        },
        byrobot_dronefighter_drive_controller_buzzer_hz_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_drive_controller_buzzer_hz_reserve'
            },
            paramsKeyMap: {
                HZ: 0,
                TIME: 1
            },
            class: 'byrobot_dronefighter_drive_buzzer',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                var time = parseInt(script.getNumberValue('TIME') * 1000);
                return Entry.byrobot_dronefighter_drive.setBuzzerHz(script, hz, time, false, false);
            }
        },
        byrobot_dronefighter_drive_controller_vibrator_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_drive_controller_vibrator_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_drive_vibrator',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_drive.setVibratorStop(script);
            }
        },
        byrobot_dronefighter_drive_controller_vibrator_on_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_drive_controller_vibrator_on_delay'
            },
            paramsKeyMap: {
                TIMEON: 0
            },
            class: 'byrobot_dronefighter_drive_vibrator',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                return Entry.byrobot_dronefighter_drive.setVibrator(script, timeOn, 0, timeOn, true, true);
            }
        },
        byrobot_dronefighter_drive_controller_vibrator_on_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_drive_controller_vibrator_on_reserve'
            },
            paramsKeyMap: {
                TIMEON: 0
            },
            class: 'byrobot_dronefighter_drive_vibrator',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                return Entry.byrobot_dronefighter_drive.setVibrator(script, timeOn, 0, timeOn, false, false);
            }
        },
        byrobot_dronefighter_drive_controller_vibrator_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.02']
                }, {
                    type: 'text',
                    params: ['0.2']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_drive_controller_vibrator_delay'
            },
            paramsKeyMap: {
                TIMEON: 0,
                TIMEOFF: 1,
                TIMERUN: 2
            },
            class: 'byrobot_dronefighter_drive_vibrator',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                var timeOff = parseInt(script.getNumberValue('TIMEOFF') * 1000);
                var timeRun = parseInt(script.getNumberValue('TIMERUN') * 1000);
                return Entry.byrobot_dronefighter_drive.setVibrator(script, timeOn, timeOff, timeRun, true, true);
            }
        },
        byrobot_dronefighter_drive_controller_vibrator_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.02']
                }, {
                    type: 'text',
                    params: ['0.2']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_drive_controller_vibrator_reserve'
            },
            paramsKeyMap: {
                TIMEON: 0,
                TIMEOFF: 1,
                TIMERUN: 2
            },
            class: 'byrobot_dronefighter_drive_vibrator',
            isNotFor: ['byrobot_dronefighter_drive'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                var timeOff = parseInt(script.getNumberValue('TIMEOFF') * 1000);
                var timeRun = parseInt(script.getNumberValue('TIMERUN') * 1000);
                return Entry.byrobot_dronefighter_drive.setVibrator(script, timeOn, timeOff, timeRun, false, false);
            }
        }
        /* BYROBOT DroneFighter Drive End */
        //endregion byrobot 바이로봇
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_byrobot_dronefighter_flight.js":
/*!********************************************************************!*\
  !*** ./src/playground/blocks/block_byrobot_dronefighter_flight.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/***************************************************************************************
 *
 *  이름 붙이기 규칙(2017.1.16)
 *
 *  1. 변수에 해당하는 이름들은 모두 소문자
 *  2. 이어지는 추가 이름은 '_'를 붙여서 연결
 *
 ***************************************************************************************/

/***************************************************************************************
 *  장치와 연관된 변수 및 함수 정의
 ***************************************************************************************/

Entry.byrobot_dronefighter_flight = {
    name: 'byrobot_dronefighter_flight',
    url: 'http://www.byrobot.co.kr/',
    imageName: 'byrobot_dronefighter_flight.png',
    title: {
        "ko": "바이로봇 드론파이터 드론",
        "en": "BYROBOT Drone Fighter flight"
    },

    // 초기화
    setZero: function setZero() {
        // 초기화

        // 한 번에 명령을 전송하면 hw까지 제대로 전달되지 않는 경우가 있어
        // 명령을 각각 분리하여 전송하게 함(2017.01.03)
        for (var i = 0; i < 1; i++) {
            this.transferCommand(0x10, 0x24, 0);
            this.transferVibrator(0, 0, 0, 0);
            this.transferbuzzer(0, 0, 0);
            this.transferLightManual(0x10, 0xff, 0);
            this.transferLightManual(0x11, 0xff, 0);
        }
    },

    // Entry 좌측 하단 하드웨어 모니터 화면에 표시하는 속성
    // listPorts와 ports 두 곳 동시에 동일한 속성을 표시할 수는 없음
    monitorTemplate: {
        imgPath: 'hw/byrobot_dronefighter_flight.png', // 배경 이미지
        width: 500, // 이미지의 폭
        height: 500, // 이미지의 높이

        // 모니터 화면 상단에 차례대로 나열하는 값
        listPorts: {
            state_modeVehicle: {
                name: Lang.Blocks.byrobot_dronefighter_drone_state_mode_vehicle,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            state_modeFlight: {
                name: Lang.Blocks.byrobot_dronefighter_drone_state_mode_flight,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            state_coordinate: {
                name: Lang.Blocks.byrobot_dronefighter_drone_state_mode_coordinate,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            state_battery: {
                name: Lang.Blocks.byrobot_dronefighter_drone_state_battery,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            attitude_roll: {
                name: Lang.Blocks.byrobot_dronefighter_drone_attitude_roll,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            attitude_pitch: {
                name: Lang.Blocks.byrobot_dronefighter_drone_attitude_pitch,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            attitude_yaw: {
                name: Lang.Blocks.byrobot_dronefighter_drone_attitude_yaw,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            irmessage_irdata: {
                name: Lang.Blocks.byrobot_dronefighter_drone_irmessage,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_x: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_y: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_direction: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_event: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_command: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_x: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_y: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_direction: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_event: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_command: {
                name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            button_button: {
                name: Lang.Blocks.byrobot_dronefighter_controller_button_button,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            button_event: {
                name: Lang.Blocks.byrobot_dronefighter_controller_button_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            entryhw_countTransferReserved: {
                name: Lang.Blocks.byrobot_dronefighter_entryhw_count_transfer_reserved,
                type: 'output',
                pos: { x: 0, y: 0 }
            }
        },

        // 모니터 화면 지정 위치와 선으로 연결하여 표시하는 값
        ports: {},

        mode: 'both' // 표시 모드
    },

    // functions

    // 시간 지연
    checkFinish: function checkFinish(script, ms) {
        if (!script.isStart) {
            script.isStart = true;
            script.timeFlag = 1;

            var fps = Entry.FPS || 60;
            var timeValue = 60 / fps * ms;

            setTimeout(function () {
                script.timeFlag = 0;
            }, timeValue);

            return 'Start';
        } else if (script.timeFlag == 1) {
            return 'Running';
        } else {
            delete script.timeFlag;
            delete script.isStart;
            Entry.engine.isContinue = false;
            return 'Finish';
        }
    },

    // 데이터 전송
    transferLightManual: function transferLightManual(target, flags, brightness) {
        // 범위 조정
        target = Math.max(target, 0);
        target = Math.min(target, 255);
        flags = Math.max(flags, 0);
        flags = Math.min(flags, 255);
        brightness = Math.max(brightness, 0);
        brightness = Math.min(brightness, 255);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('light_manual_flags', flags);
        Entry.hw.setDigitalPortValue('light_manual_brightness', brightness);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['light_manual_flags'];
        delete Entry.hw.sendQueue['light_manual_brightness'];
    },

    transferbuzzer: function transferbuzzer(mode, value, time) {
        // 전송
        Entry.hw.setDigitalPortValue('target', 0x11);
        Entry.hw.setDigitalPortValue('buzzer_mode', mode);
        Entry.hw.setDigitalPortValue('buzzer_value', value);
        Entry.hw.setDigitalPortValue('buzzer_time', time);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['buzzer_mode'];
        delete Entry.hw.sendQueue['buzzer_value'];
        delete Entry.hw.sendQueue['buzzer_time'];
    },

    transferVibrator: function transferVibrator(mode, timeOn, timeOff, timeRun) {
        // 범위 조정
        timeOn = Math.max(timeOn, 1);
        timeOn = Math.min(timeOn, 60000);
        timeOff = Math.max(timeOff, 1);
        timeOff = Math.min(timeOff, 60000);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x11);
        Entry.hw.setDigitalPortValue('vibrator_mode', mode);
        Entry.hw.setDigitalPortValue('vibrator_on', timeOn);
        Entry.hw.setDigitalPortValue('vibrator_off', timeOff);
        Entry.hw.setDigitalPortValue('vibrator_total', timeRun);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['vibrator_mode'];
        delete Entry.hw.sendQueue['vibrator_on'];
        delete Entry.hw.sendQueue['vibrator_off'];
        delete Entry.hw.sendQueue['vibrator_total'];
    },

    transferIrMessage: function transferIrMessage(irmessage) {
        // 범위 조정
        irmessage = Math.max(irmessage, 0);
        irmessage = Math.min(irmessage, 127);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x10);
        Entry.hw.setDigitalPortValue('irmessage_data', irmessage);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['irmessage_data'];
    },

    transferMotorSingle: function transferMotorSingle(motorIndex, motorDirection, motorSpeed) {
        // 범위 조정
        motorSpeed = Math.max(motorSpeed, 0);
        motorSpeed = Math.min(motorSpeed, 4096);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x10);
        Entry.hw.setDigitalPortValue('motorsingle_target', motorIndex);
        Entry.hw.setDigitalPortValue('motorsingle_direction', motorDirection);
        Entry.hw.setDigitalPortValue('motorsingle_value', motorSpeed);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['motorsingle_target'];
        delete Entry.hw.sendQueue['motorsingle_direction'];
        delete Entry.hw.sendQueue['motorsingle_value'];
    },

    transferCommand: function transferCommand(target, command, option) {
        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('command_command', command);
        Entry.hw.setDigitalPortValue('command_option', option);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['command_command'];
        delete Entry.hw.sendQueue['command_option'];
    },

    transferControlDouble: function transferControlDouble(wheel, accel) {
        // 범위 조정
        wheel = Math.max(wheel, -100);
        wheel = Math.min(wheel, 100);
        accel = Math.max(accel, 0);
        accel = Math.min(accel, 100);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x10);
        Entry.hw.setDigitalPortValue('control_wheel', wheel);
        Entry.hw.setDigitalPortValue('control_accel', accel);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['control_wheel'];
        delete Entry.hw.sendQueue['control_accel'];
    },

    transferControlQuad: function transferControlQuad(roll, pitch, yaw, throttle) {
        // 범위 조정
        roll = Math.max(roll, -100);
        roll = Math.min(roll, 100);
        pitch = Math.max(pitch, -100);
        pitch = Math.min(pitch, 100);
        yaw = Math.max(yaw, -100);
        yaw = Math.min(yaw, 100);
        throttle = Math.max(throttle, -100);
        throttle = Math.min(throttle, 100);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x10);
        Entry.hw.setDigitalPortValue('control_roll', roll);
        Entry.hw.setDigitalPortValue('control_pitch', pitch);
        Entry.hw.setDigitalPortValue('control_yaw', yaw);
        Entry.hw.setDigitalPortValue('control_throttle', throttle);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['control_roll'];
        delete Entry.hw.sendQueue['control_pitch'];
        delete Entry.hw.sendQueue['control_yaw'];
        delete Entry.hw.sendQueue['control_throttle'];
    },

    // functions for block

    // 데이터 읽기
    getData: function getData(script, device) {
        return Entry.hw.portData[device];
    },

    // LED 수동 설정
    setLightManual: function setLightManual(script, target, flags, brightness) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferLightManual(target, flags, brightness);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 버저 설정(함수 호출 시 시간은 모두 ms 단위 사용)
    /*  
        MuteInstantally     = 1,    // 묵음 즉시 적용
        MuteContinually     = 2,    // 묵음 예약
        
        ScaleInstantally    = 3,    // 음계 즉시 적용
        ScaleContinually    = 4,    // 음계 예약
        
        HzInstantally       = 5,    // 주파수 즉시 적용
        HzContinually       = 6,    // 주파수 예약
     */
    // 정지
    setBuzzerStop: function setBuzzerStop(script) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferbuzzer(0, 0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 묵음
    setBuzzerMute: function setBuzzerMute(script, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 2; // 묵음 연속
                    if (flagInstantly) mode = 1; // 묵음 즉시

                    this.transferbuzzer(mode, 0xee, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setBuzzerScale: function setBuzzerScale(script, octave, scale, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 4; // Scale 연속
                    if (flagInstantly) mode = 3; // Scale 즉시

                    var scalecalc = octave * 12 + scale;

                    this.transferbuzzer(mode, scalecalc, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setBuzzerHz: function setBuzzerHz(script, hz, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 6; // Hz 연속
                    if (flagInstantly) mode = 5; // Hz 즉시

                    // 범위 조정
                    hz = Math.max(hz, 1);
                    hz = Math.min(hz, 63999);

                    this.transferbuzzer(mode, hz, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 진동 제어
    /*
        Stop            = 0,    // 정지
        Instantally     = 1,    // 즉시 적용
        Continually     = 2,    // 예약
     */
    setVibratorStop: function setVibratorStop(script) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferVibrator(0, 0, 0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setVibrator: function setVibrator(script, timeOn, timeOff, timeRun, flagDelay, flagInstantly) {
        timeRun = Math.max(timeRun, 0);
        timeRun = Math.min(timeRun, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = timeRun;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 2; // 예약
                    if (flagInstantly) mode = 1; // 즉시

                    this.transferVibrator(mode, timeOn, timeOff, timeRun);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendIrMessage: function sendIrMessage(script, irmessage) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferIrMessage(irmessage);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendStop: function sendStop(script) {
        return this.sendCommand(script, 0x10, 0x24, 0);
    },

    sendCommand: function sendCommand(script, target, command, option) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferCommand(target, command, option);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setMotorSingle: function setMotorSingle(script, motorIndex, motorDirection, motorSpeed) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferMotorSingle(motorIndex, motorDirection, motorSpeed);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },
    /*
        None = 0,           ///< 없음
        
        Flight = 0x10,      ///< 비행(가드 포함)
        FlightNoGuard,      ///< 비행(가드 없음)
        FlightFPV,          ///< 비행(FPV)
        
        Drive = 0x20,       ///< 주행
        DriveFPV,           ///< 주행(FPV)
        
        Test = 0x30,        ///< 테스트
     */
    setModeVehicle: function setModeVehicle(script, modeVehicle) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferCommand(0x10, 0x10, modeVehicle);

                    this.transferControlQuad(0, 0, 0, 0);
                    this.transferControlDouble(0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setEventFlight: function setEventFlight(script, eventFlight, time) {
        switch (this.checkFinish(script, time)) {
            case 'Start':
                {
                    this.transferCommand(0x10, 0x22, eventFlight); // 0x22 : CommandType::FlightEvent
                    this.transferControlQuad(0, 0, 0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendControlQuadSingle: function sendControlQuadSingle(script, controlTarget, value, time, flagDelay) {
        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    // 범위 조정
                    value = Math.max(value, -100);
                    value = Math.min(value, 100);

                    // 전송
                    Entry.hw.setDigitalPortValue('target', 0x10);
                    Entry.hw.setDigitalPortValue(controlTarget, value);

                    Entry.hw.update();

                    delete Entry.hw.sendQueue['target'];
                    delete Entry.hw.sendQueue[controlTarget];
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                if (flagDelay) {
                    // 전송
                    Entry.hw.setDigitalPortValue('target', 0x10);
                    Entry.hw.setDigitalPortValue(controlTarget, 0);

                    Entry.hw.update();

                    delete Entry.hw.sendQueue['target'];
                    delete Entry.hw.sendQueue[controlTarget];
                }
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendControlQuad: function sendControlQuad(script, roll, pitch, yaw, throttle, time, flagDelay) {
        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    this.transferControlQuad(roll, pitch, yaw, throttle);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                if (flagDelay) {
                    this.transferControlQuad(0, 0, 0, 0);
                }
                return script.callReturn();

            default:
                return script.callReturn();
        }
    }
};

Entry.byrobot_dronefighter_flight.getBlocks = function () {
    return {
        //region byrobot 바이로봇
        /* BYROBOT DroneFighter Flight Start */
        byrobot_dronefighter_flight_drone_value_attitude: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_drone_attitude_roll, 'attitude_roll'], [Lang.Blocks.byrobot_dronefighter_drone_attitude_pitch, 'attitude_pitch'], [Lang.Blocks.byrobot_dronefighter_drone_attitude_yaw, 'attitude_yaw']],
                value: 'attitude_roll', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_flight_drone_value_attitude' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_dronefighter_flight_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_dronefighter_flight_drone_value_etc: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_drone_state_mode_vehicle, 'state_modeVehicle'], [Lang.Blocks.byrobot_dronefighter_drone_state_mode_flight, 'state_modeFlight'], [Lang.Blocks.byrobot_dronefighter_drone_state_mode_coordinate, 'state_coordinate'], [Lang.Blocks.byrobot_dronefighter_drone_state_battery, 'state_battery'], [Lang.Blocks.byrobot_dronefighter_drone_irmessage, 'irmessage_irdata']],
                value: 'irmessage_irdata', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_flight_drone_value_etc' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_dronefighter_flight_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_dronefighter_flight_controller_value_button: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_button_button, 'button_button'], [Lang.Blocks.byrobot_dronefighter_controller_button_event, 'button_event']],
                value: 'button_button', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_flight_controller_value_button' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_dronefighter_flight_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_dronefighter_flight_controller_value_joystick: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x, 'joystick_left_x'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y, 'joystick_left_y'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction, 'joystick_left_direction'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event, 'joystick_left_event'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command, 'joystick_left_command'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x, 'joystick_right_x'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y, 'joystick_right_y'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction, 'joystick_right_direction'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event, 'joystick_right_event'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command, 'joystick_right_command']],
                value: 'joystick_left_x', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_flight_controller_value_joystick' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_dronefighter_flight_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_dronefighter_flight_controller_if_button_press: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_button_front_left, '1'], [Lang.Blocks.byrobot_dronefighter_controller_button_front_right, '2'], [Lang.Blocks.byrobot_dronefighter_controller_button_front_left_right, '3'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up_left, '4'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up_right, '8'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up, '16'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_left, '32'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_right, '64'], [Lang.Blocks.byrobot_dronefighter_controller_button_center_down, '128'], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_left, '256'], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_right, '512'], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_left_right, '768']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_flight_controller_if_button_press'
            },
            paramsKeyMap: {
                BUTTON: 0
            },
            class: 'byrobot_dronefighter_flight_boolean_input',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;
                var button = 'button_button'; // paramsKeyMap에 정의된 이름 사용
                var buttonevent = 'button_event'; // paramsKeyMap에 정의된 이름 사용

                if (read[button] == script.getField('BUTTON') && read[buttonevent] == 2) return true;else return false;
            },
            syntax: { js: [], py: [] }
        },
        byrobot_dronefighter_flight_controller_if_joystick_direction: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_common_left, 'joystick_left_direction'], [Lang.Blocks.byrobot_dronefighter_common_right, 'joystick_right_direction']],
                value: 'joystick_left_direction',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left_up, '17'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_up, '18'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right_up, '20'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left, '33'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_center, '34'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right, '36'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left_down, '65'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_down, '66'], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right_down, '68']],
                value: '34',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'byrobot_dronefighter_flight_controller_if_joystick_direction'
            },
            paramsKeyMap: {
                DEVICE: 0,
                DIRECTION: 1
            },
            class: 'byrobot_dronefighter_flight_boolean_input',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;

                var device = script.getField('DEVICE'); // paramsKeyMap에 정의된 이름 사용

                if (read[device] == script.getField('DIRECTION')) return true;else return false;
            }
        },
        byrobot_dronefighter_flight_controller_light_manual_single_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_flight_controller_light_manual_single_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_flight_controller_light',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_flight.setLightManual(script, 0x11, 0xff, 0);
            }
        },
        byrobot_dronefighter_flight_controller_light_manual_single: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_all, '255'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_1, '128'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_2, '64'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_3, '32'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_4, '16'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_5, '8'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_6, '4'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_blue, '2'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_red, '1']],
                value: '128',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_on, '220'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_off, '0'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b25, '75'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b50, '125'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b75, '200'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b100, '255']],
                value: '220',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_dronefighter_flight_controller_light_manual_single'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_dronefighter_flight_controller_light',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var flags = parseInt(script.getField('FLAGS'));
                var brightness = parseInt(script.getField('BRIGHTNESS'));
                return Entry.byrobot_dronefighter_flight.setLightManual(script, 0x11, flags, brightness);
            }
        },
        byrobot_dronefighter_flight_controller_light_manual_single_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0b11111111']
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'byrobot_dronefighter_flight_controller_light_manual_single_input'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_dronefighter_flight_controller_light',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var flags = script.getNumberValue('FLAGS');
                var brightness = script.getNumberValue('BRIGHTNESS');
                return Entry.byrobot_dronefighter_flight.setLightManual(script, 0x11, flags, brightness);
            }
        },
        byrobot_dronefighter_flight_drone_light_manual_single_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_flight_drone_light_manual_single_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_flight_drone_light',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_flight.setLightManual(script, 0x10, 0xff, 0);
            }
        },
        byrobot_dronefighter_flight_drone_light_manual_single: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_all, '255'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_1, '128'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_2, '64'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_3, '32'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_4, '16'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_blue, '8'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_red, '4']],
                value: '128',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_on, '220'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_off, '0'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b25, '75'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b50, '125'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b75, '200'], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b100, '255']],
                value: '220',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_dronefighter_flight_drone_light_manual_single'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_dronefighter_flight_drone_light',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var flags = parseInt(script.getField('FLAGS'));
                var brightness = parseInt(script.getField('BRIGHTNESS'));
                return Entry.byrobot_dronefighter_flight.setLightManual(script, 0x10, flags, brightness);
            }
        },
        byrobot_dronefighter_flight_drone_light_manual_single_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0b11111111']
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'byrobot_dronefighter_flight_drone_light_manual_single_input'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_dronefighter_flight_drone_light',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var flags = script.getNumberValue('FLAGS');
                var brightness = script.getNumberValue('BRIGHTNESS');
                return Entry.byrobot_dronefighter_flight.setLightManual(script, 0x10, flags, brightness);
            }
        },
        byrobot_dronefighter_flight_controller_buzzer_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_flight_controller_buzzer_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_flight_buzzer',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_flight.setBuzzerStop(script);
            }
        },
        byrobot_dronefighter_flight_controller_buzzer_scale: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_dronefighter_flight_controller_buzzer_scale'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1
            },
            class: 'byrobot_dronefighter_flight_buzzer',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));

                if (scale == -1) return Entry.byrobot_dronefighter_flight.setBuzzerMute(script, 60000, false, true);else return Entry.byrobot_dronefighter_flight.setBuzzerScale(script, octave, scale, 60000, false, true);
            }
        },
        byrobot_dronefighter_flight_controller_buzzer_scale_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_flight_controller_buzzer_scale_delay'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1,
                TIME: 2
            },
            class: 'byrobot_dronefighter_flight_buzzer',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));
                var time = parseInt(script.getNumberValue('TIME') * 1000);

                if (scale == -1) return Entry.byrobot_dronefighter_flight.setBuzzerMute(script, time, true, true);else return Entry.byrobot_dronefighter_flight.setBuzzerScale(script, octave, scale, time, true, true);
            }
        },
        byrobot_dronefighter_flight_controller_buzzer_scale_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_flight_controller_buzzer_scale_reserve'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1,
                TIME: 2
            },
            class: 'byrobot_dronefighter_flight_buzzer',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));
                var time = parseInt(script.getNumberValue('TIME') * 1000);

                if (scale == -1) return Entry.byrobot_dronefighter_flight.setBuzzerMute(script, time, false, false);else return Entry.byrobot_dronefighter_flight.setBuzzerScale(script, octave, scale, time, false, false);
            }
        },
        byrobot_dronefighter_flight_controller_buzzer_hz: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'byrobot_dronefighter_flight_controller_buzzer_hz'
            },
            paramsKeyMap: {
                HZ: 0
            },
            class: 'byrobot_dronefighter_flight_buzzer',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                return Entry.byrobot_dronefighter_flight.setBuzzerHz(script, hz, 60000, false, true);
            }
        },
        byrobot_dronefighter_flight_controller_buzzer_hz_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_flight_controller_buzzer_hz_delay'
            },
            paramsKeyMap: {
                HZ: 0,
                TIME: 1
            },
            class: 'byrobot_dronefighter_flight_buzzer',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                var time = parseInt(script.getNumberValue('TIME') * 1000);
                return Entry.byrobot_dronefighter_flight.setBuzzerHz(script, hz, time, true, true);
            }
        },
        byrobot_dronefighter_flight_controller_buzzer_hz_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_flight_controller_buzzer_hz_reserve'
            },
            paramsKeyMap: {
                HZ: 0,
                TIME: 1
            },
            class: 'byrobot_dronefighter_flight_buzzer',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                var time = parseInt(script.getNumberValue('TIME') * 1000);
                return Entry.byrobot_dronefighter_flight.setBuzzerHz(script, hz, time, false, false);
            }
        },
        byrobot_dronefighter_flight_controller_vibrator_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_flight_controller_vibrator_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_flight_vibrator',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_flight.setVibratorStop(script);
            }
        },
        byrobot_dronefighter_flight_controller_vibrator_on_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_flight_controller_vibrator_on_delay'
            },
            paramsKeyMap: {
                TIMEON: 0
            },
            class: 'byrobot_dronefighter_flight_vibrator',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                return Entry.byrobot_dronefighter_flight.setVibrator(script, timeOn, 0, timeOn, true, true);
            }
        },
        byrobot_dronefighter_flight_controller_vibrator_on_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_flight_controller_vibrator_on_reserve'
            },
            paramsKeyMap: {
                TIMEON: 0
            },
            class: 'byrobot_dronefighter_flight_vibrator',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                return Entry.byrobot_dronefighter_flight.setVibrator(script, timeOn, 0, timeOn, false, false);
            }
        },
        byrobot_dronefighter_flight_controller_vibrator_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.02']
                }, {
                    type: 'text',
                    params: ['0.2']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_flight_controller_vibrator_delay'
            },
            paramsKeyMap: {
                TIMEON: 0,
                TIMEOFF: 1,
                TIMERUN: 2
            },
            class: 'byrobot_dronefighter_flight_vibrator',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                var timeOff = parseInt(script.getNumberValue('TIMEOFF') * 1000);
                var timeRun = parseInt(script.getNumberValue('TIMERUN') * 1000);
                return Entry.byrobot_dronefighter_flight.setVibrator(script, timeOn, timeOff, timeRun, true, true);
            }
        },
        byrobot_dronefighter_flight_controller_vibrator_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.02']
                }, {
                    type: 'text',
                    params: ['0.2']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_flight_controller_vibrator_reserve'
            },
            paramsKeyMap: {
                TIMEON: 0,
                TIMEOFF: 1,
                TIMERUN: 2
            },
            class: 'byrobot_dronefighter_flight_vibrator',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                var timeOff = parseInt(script.getNumberValue('TIMEOFF') * 1000);
                var timeRun = parseInt(script.getNumberValue('TIMERUN') * 1000);
                return Entry.byrobot_dronefighter_flight.setVibrator(script, timeOn, timeOff, timeRun, false, false);
            }
        },
        byrobot_dronefighter_flight_drone_irmessage: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['100']
                }, null],
                type: 'byrobot_dronefighter_flight_drone_irmessage'
            },
            paramsKeyMap: {
                IRMESSAGE: 0
            },
            class: 'byrobot_dronefighter_flight_irmessage',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var irmessage = script.getNumberValue('IRMESSAGE', script);
                return Entry.byrobot_dronefighter_flight.sendIrMessage(script, irmessage);
            }
        },
        byrobot_dronefighter_flight_drone_motor_stop: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_flight_drone_motor_stop'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_flight_motor',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_flight.sendStop(script);
            }
        },
        byrobot_dronefighter_flight_drone_motorsingle: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['1', '0'], ['2', '1'], ['3', '2'], ['4', '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'byrobot_dronefighter_flight_drone_motorsingle'
            },
            paramsKeyMap: {
                MOTORINDEX: 0,
                MOTORSPEED: 1
            },
            class: 'byrobot_dronefighter_flight_motor',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var motorIndex = parseInt(script.getField('MOTORINDEX'));
                var motorDirection = 1;
                var motorSpeed = parseInt(script.getNumberValue('MOTORSPEED', script));

                return Entry.byrobot_dronefighter_flight.setMotorSingle(script, motorIndex, motorDirection, motorSpeed);
            }
        },
        byrobot_dronefighter_flight_drone_motorsingle_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, {
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'byrobot_dronefighter_flight_drone_motorsingle_input'
            },
            paramsKeyMap: {
                MOTORINDEX: 0,
                MOTORSPEED: 1
            },
            class: 'byrobot_dronefighter_flight_motor',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var motorIndex = parseInt(script.getNumberValue('MOTORINDEX', script)) - 1;
                var motorDirection = 1;
                var motorSpeed = parseInt(script.getNumberValue('MOTORSPEED', script));

                return Entry.byrobot_dronefighter_flight.setMotorSingle(script, motorIndex, motorDirection, motorSpeed);
            }
        },
        byrobot_dronefighter_flight_drone_command_mode_vehicle_drone: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_flight_drone_command_mode_vehicle_drone'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_flight_control_flight',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_flight.setModeVehicle(script, 0x10); // 0x10 : Mode::Vehicle::Flight
            }
        },
        byrobot_dronefighter_flight_drone_control_drone_takeoff: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_flight_drone_control_drone_takeoff'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_flight_control_flight',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_flight.setEventFlight(script, 0x11, 200); // 0x11 : FlightEvent::TakeOff
            }
        },
        byrobot_dronefighter_flight_drone_control_drone_landing: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_flight_drone_control_drone_landing'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_flight_control_flight',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_flight.setEventFlight(script, 0x12, 200); // 0x12 : FlightEvent::Landing
            }
        },
        byrobot_dronefighter_flight_drone_control_drone_stop: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_flight_drone_control_drone_stop'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_flight_control_flight',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_flight.sendStop(script);
            }
        },
        byrobot_dronefighter_flight_drone_control_coordinate: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_drone_coordinate_world, '1'], [Lang.Blocks.byrobot_dronefighter_drone_coordinate_local, '2']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'byrobot_dronefighter_flight_drone_control_coordinate'
            },
            paramsKeyMap: {
                COORDINATE: 0
            },
            class: 'byrobot_dronefighter_flight_control_flight',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var coordinate = script.getField('COORDINATE');
                return Entry.byrobot_dronefighter_flight.sendCommand(script, 0x10, 0x20, coordinate);
            }
        },
        byrobot_dronefighter_flight_drone_control_drone_reset_heading: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_dronefighter_flight_drone_control_drone_reset_heading'
            },
            paramsKeyMap: {},
            class: 'byrobot_dronefighter_flight_control_flight',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_dronefighter_flight.sendCommand(script, 0x10, 0x22, 0xa0); // 0x22 : CommandType::FlightEvent  // 0xA0 : FlightEvent::ResetHeading
            }
        },
        byrobot_dronefighter_flight_drone_control_quad_one: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_drone_control_quad_roll, 'control_roll'], [Lang.Blocks.byrobot_dronefighter_drone_control_quad_pitch, 'control_pitch'], [Lang.Blocks.byrobot_dronefighter_drone_control_quad_yaw, 'control_yaw'], [Lang.Blocks.byrobot_dronefighter_drone_control_quad_throttle, 'control_throttle']],
                value: 'control_throttle',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'byrobot_dronefighter_flight_drone_control_quad_one'
            },
            paramsKeyMap: {
                CONTROLTARGET: 0,
                VALUE: 1
            },
            class: 'byrobot_dronefighter_flight_control_flight',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var controlTarget = script.getField('CONTROLTARGET');
                var value = parseInt(script.getNumberValue('VALUE', script));

                return Entry.byrobot_dronefighter_flight.sendControlQuadSingle(script, controlTarget, value, 0, false);
            }
        },
        byrobot_dronefighter_flight_drone_control_quad_one_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_dronefighter_drone_control_quad_roll, 'control_roll'], [Lang.Blocks.byrobot_dronefighter_drone_control_quad_pitch, 'control_pitch'], [Lang.Blocks.byrobot_dronefighter_drone_control_quad_yaw, 'control_yaw'], [Lang.Blocks.byrobot_dronefighter_drone_control_quad_throttle, 'control_throttle']],
                value: 'control_throttle',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['100']
                }, {
                    type: 'number',
                    params: ['1']
                }, null],
                type: 'byrobot_dronefighter_flight_drone_control_quad_one_delay'
            },
            paramsKeyMap: {
                CONTROLTARGET: 0,
                VALUE: 1,
                TIME: 2
            },
            class: 'byrobot_dronefighter_flight_control_flight',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var controlTarget = script.getField('CONTROLTARGET');
                var value = parseInt(script.getNumberValue('VALUE', script));
                var time = parseInt(script.getNumberValue('TIME', script) * 1000);

                return Entry.byrobot_dronefighter_flight.sendControlQuadSingle(script, controlTarget, value, time, true);
            }
        },
        byrobot_dronefighter_flight_drone_control_quad: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'byrobot_dronefighter_flight_drone_control_quad'
            },
            paramsKeyMap: {
                ROLL: 0,
                PITCH: 1,
                YAW: 2,
                THROTTLE: 3
            },
            class: 'byrobot_dronefighter_flight_control_flight',
            isNotFor: ['byrobot_dronefighter_flight'],
            func: function func(sprite, script) {
                var roll = parseInt(script.getNumberValue('ROLL', script));
                var pitch = parseInt(script.getNumberValue('PITCH', script));
                var yaw = parseInt(script.getNumberValue('YAW', script));
                var throttle = parseInt(script.getNumberValue('THROTTLE', script));

                return Entry.byrobot_dronefighter_flight.sendControlQuad(script, roll, pitch, yaw, throttle, 0, false);
            }
        }
        /* BYROBOT DroneFighter Flight End */
        //endregion byrobot 바이로봇
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_byrobot_petrone_v2_controller.js":
/*!**********************************************************************!*\
  !*** ./src/playground/blocks/block_byrobot_petrone_v2_controller.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/***************************************************************************************
 *
 *  이름 붙이기 규칙(2017.1.16)
 *
 *  1. 변수에 해당하는 이름들은 모두 소문자
 *  2. 이어지는 추가 이름은 '_'를 붙여서 연결
 *
 ***************************************************************************************/

/***************************************************************************************
 *  장치와 연관된 변수 및 함수 정의
 ***************************************************************************************/

Entry.byrobot_petrone_v2_controller = {
    name: 'byrobot_petrone_v2_controller',
    url: 'http://www.byrobot.co.kr/',
    imageName: 'byrobot_petrone_v2_controller.png',
    title: {
        "en": "BYROBOT Petrone V2 controller",
        "ko": "바이로봇 페트론V2 조종기"
    },

    // 초기화
    setZero: function setZero() {
        // 초기화

        // 한 번에 명령을 전송하면 hw까지 제대로 전달되지 않는 경우가 있어
        // 명령을 각각 분리하여 전송하게 함(2017.01.03)
        for (var i = 0; i < 1; i++) {
            this.transferVibrator(0, 0, 0, 0);
            this.transferbuzzer(0, 0, 0);
            this.transferLightManual(0x31, 0xff, 0); // 조종기, flags = 0xFF (전체선택)
            this.transferCommand(0x31, 0x80, 0); // 조종기, command = 0x80 (DataStorageWrite)
        }
    },

    // Entry 좌측 하단 하드웨어 모니터 화면에 표시하는 속성
    // listPorts와 ports 두 곳 동시에 동일한 속성을 표시할 수는 없음
    monitorTemplate: {
        /* 센서창 가림 현상을 해결하기 위해서 주석 처리함(2017.11.06)
        imgPath: "hw/byrobot_petrone_v2_controller.png",      // 배경 이미지
        width: 500,     // 이미지의 폭
        height: 500,    // 이미지의 높이
        */

        // 모니터 화면 상단에 차례대로 나열하는 값
        listPorts: {
            joystick_left_x: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_y: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_direction: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_direction,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_event: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_x: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_y: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_direction: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_direction,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_event: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            button_button: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_button_button,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            button_event: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_button_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            entryhw_countTransferReserved: {
                name: Lang.Blocks.byrobot_petrone_v2_entryhw_count_transfer_reserved,
                type: 'output',
                pos: { x: 0, y: 0 }
            }
        },

        // 모니터 화면 지정 위치와 선으로 연결하여 표시하는 값
        ports: {},

        mode: 'both' // 표시 모드
    },

    // functions

    // 시간 지연
    checkFinish: function checkFinish(script, ms) {
        if (!script.isStart) {
            script.isStart = true;
            script.timeFlag = 1;

            var fps = Entry.FPS || 60;
            var timeValue = 60 / fps * ms;

            setTimeout(function () {
                script.timeFlag = 0;
            }, timeValue);

            return 'Start';
        } else if (script.timeFlag == 1) {
            return 'Running';
        } else {
            delete script.timeFlag;
            delete script.isStart;
            Entry.engine.isContinue = false;
            return 'Finish';
        }
    },

    // 데이터 전송
    transferLightManual: function transferLightManual(target, flags, brightness) {
        // 범위 조정
        target = Math.max(target, 0);
        target = Math.min(target, 255);
        flags = Math.max(flags, 0);
        flags = Math.min(flags, 255);
        brightness = Math.max(brightness, 0);
        brightness = Math.min(brightness, 255);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('light_manual_flags', flags);
        Entry.hw.setDigitalPortValue('light_manual_brightness', brightness);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['light_manual_flags'];
        delete Entry.hw.sendQueue['light_manual_brightness'];
    },

    transferLightColorRgb: function transferLightColorRgb(target, mode, red, green, blue) {
        // 범위 조정
        target = Math.max(target, 0);
        target = Math.min(target, 255);
        mode = Math.max(mode, 0);
        mode = Math.min(mode, 255);
        red = Math.max(red, 0);
        red = Math.min(red, 255);
        green = Math.max(green, 0);
        green = Math.min(green, 255);
        blue = Math.max(blue, 0);
        blue = Math.min(blue, 255);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('light_mode_mode', mode);
        Entry.hw.setDigitalPortValue('light_color_r', red);
        Entry.hw.setDigitalPortValue('light_color_g', green);
        Entry.hw.setDigitalPortValue('light_color_b', blue);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['light_mode_mode'];
        delete Entry.hw.sendQueue['light_color_r'];
        delete Entry.hw.sendQueue['light_color_g'];
        delete Entry.hw.sendQueue['light_color_b'];
    },

    transferDisplayClear: function transferDisplayClear(target, pixel, clearAll, x, y, width, height) {
        if (clearAll) {
            // 전송
            Entry.hw.setDigitalPortValue('target', target);
            Entry.hw.setDigitalPortValue('display_clearall_pixel', pixel);

            Entry.hw.update();

            delete Entry.hw.sendQueue['target'];
            delete Entry.hw.sendQueue['display_clearall_pixel'];
        } else {
            // 범위 조정
            x = Math.max(x, 0);
            x = Math.min(x, 128);
            y = Math.max(y, 0);
            y = Math.min(y, 64);
            width = Math.max(width, 0);
            width = Math.min(width, 128);
            height = Math.max(height, 0);
            height = Math.min(height, 64);

            // 전송
            Entry.hw.setDigitalPortValue('target', target);
            Entry.hw.setDigitalPortValue('display_clear_x', x);
            Entry.hw.setDigitalPortValue('display_clear_y', y);
            Entry.hw.setDigitalPortValue('display_clear_width', width);
            Entry.hw.setDigitalPortValue('display_clear_height', height);
            Entry.hw.setDigitalPortValue('display_clear_pixel', pixel);

            Entry.hw.update();

            delete Entry.hw.sendQueue['target'];
            delete Entry.hw.sendQueue['display_clear_x'];
            delete Entry.hw.sendQueue['display_clear_y'];
            delete Entry.hw.sendQueue['display_clear_width'];
            delete Entry.hw.sendQueue['display_clear_height'];
            delete Entry.hw.sendQueue['display_clear_pixel'];
        }
    },

    transferDisplayInvert: function transferDisplayInvert(target, x, y, width, height) {
        // 범위 조정
        x = Math.max(x, 0);
        x = Math.min(x, 128);
        y = Math.max(y, 0);
        y = Math.min(y, 64);
        width = Math.max(width, 0);
        width = Math.min(width, 128);
        height = Math.max(height, 0);
        height = Math.min(height, 64);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_invert_x', x);
        Entry.hw.setDigitalPortValue('display_invert_y', y);
        Entry.hw.setDigitalPortValue('display_invert_width', width);
        Entry.hw.setDigitalPortValue('display_invert_height', height);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_invert_x'];
        delete Entry.hw.sendQueue['display_invert_y'];
        delete Entry.hw.sendQueue['display_invert_width'];
        delete Entry.hw.sendQueue['display_invert_height'];
    },

    transferDisplayDrawPoint: function transferDisplayDrawPoint(target, x, y, pixel) {
        // 범위 조정
        x = Math.max(x, 0);
        x = Math.min(x, 128);
        y = Math.max(y, 0);
        y = Math.min(y, 64);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_point_x', x);
        Entry.hw.setDigitalPortValue('display_draw_point_y', y);
        Entry.hw.setDigitalPortValue('display_draw_point_pixel', pixel);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_point_x'];
        delete Entry.hw.sendQueue['display_draw_point_y'];
        delete Entry.hw.sendQueue['display_draw_point_pixel'];
    },

    transferDisplayDrawLine: function transferDisplayDrawLine(target, x1, y1, x2, y2, pixel, line) {
        // 범위 조정
        x1 = Math.max(x1, 0);
        x1 = Math.min(x1, 128);
        y1 = Math.max(y1, 0);
        y1 = Math.min(y1, 64);
        x2 = Math.max(x2, 0);
        x2 = Math.min(x2, 128);
        y2 = Math.max(y2, 0);
        y2 = Math.min(y2, 64);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_line_x1', x1);
        Entry.hw.setDigitalPortValue('display_draw_line_y1', y1);
        Entry.hw.setDigitalPortValue('display_draw_line_x2', x2);
        Entry.hw.setDigitalPortValue('display_draw_line_y2', y2);
        Entry.hw.setDigitalPortValue('display_draw_line_pixel', pixel);
        Entry.hw.setDigitalPortValue('display_draw_line_line', line);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_line_x1'];
        delete Entry.hw.sendQueue['display_draw_line_y1'];
        delete Entry.hw.sendQueue['display_draw_line_x2'];
        delete Entry.hw.sendQueue['display_draw_line_y2'];
        delete Entry.hw.sendQueue['display_draw_line_pixel'];
        delete Entry.hw.sendQueue['display_draw_line_line'];
    },

    transferDisplayDrawRect: function transferDisplayDrawRect(target, x, y, width, height, pixel, flagFill, line) {
        // 범위 조정
        x = Math.max(x, 0);
        x = Math.min(x, 128);
        y = Math.max(y, 0);
        y = Math.min(y, 64);
        width = Math.max(width, 0);
        width = Math.min(width, 128);
        height = Math.max(height, 0);
        height = Math.min(height, 64);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_rect_x', x);
        Entry.hw.setDigitalPortValue('display_draw_rect_y', y);
        Entry.hw.setDigitalPortValue('display_draw_rect_width', width);
        Entry.hw.setDigitalPortValue('display_draw_rect_height', height);
        Entry.hw.setDigitalPortValue('display_draw_rect_pixel', pixel);
        Entry.hw.setDigitalPortValue('display_draw_rect_flagfill', flagFill);
        Entry.hw.setDigitalPortValue('display_draw_rect_line', line);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_rect_x'];
        delete Entry.hw.sendQueue['display_draw_rect_y'];
        delete Entry.hw.sendQueue['display_draw_rect_width'];
        delete Entry.hw.sendQueue['display_draw_rect_height'];
        delete Entry.hw.sendQueue['display_draw_rect_pixel'];
        delete Entry.hw.sendQueue['display_draw_rect_flagfill'];
        delete Entry.hw.sendQueue['display_draw_rect_line'];
    },

    transferDisplayDrawCircle: function transferDisplayDrawCircle(target, x, y, radius, pixel, flagFill) {
        // 범위 조정
        x = Math.max(x, -50);
        x = Math.min(x, 178);
        y = Math.max(y, -50);
        y = Math.min(y, 114);
        radius = Math.max(radius, 1);
        radius = Math.min(radius, 200);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_circle_x', x);
        Entry.hw.setDigitalPortValue('display_draw_circle_y', y);
        Entry.hw.setDigitalPortValue('display_draw_circle_radius', radius);
        Entry.hw.setDigitalPortValue('display_draw_circle_pixel', pixel);
        Entry.hw.setDigitalPortValue('display_draw_circle_flagfill', flagFill);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_circle_x'];
        delete Entry.hw.sendQueue['display_draw_circle_y'];
        delete Entry.hw.sendQueue['display_draw_circle_radius'];
        delete Entry.hw.sendQueue['display_draw_circle_pixel'];
        delete Entry.hw.sendQueue['display_draw_circle_flagfill'];
    },

    transferDisplayDrawString: function transferDisplayDrawString(target, x, y, font, pixel, string) {
        // 범위 조정
        x = Math.max(x, 0);
        x = Math.min(x, 120);
        y = Math.max(y, 0);
        y = Math.min(y, 60);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_string_x', x);
        Entry.hw.setDigitalPortValue('display_draw_string_y', y);
        Entry.hw.setDigitalPortValue('display_draw_string_font', font);
        Entry.hw.setDigitalPortValue('display_draw_string_pixel', pixel);
        Entry.hw.setDigitalPortValue('display_draw_string_string', string);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_string_x'];
        delete Entry.hw.sendQueue['display_draw_string_y'];
        delete Entry.hw.sendQueue['display_draw_string_font'];
        delete Entry.hw.sendQueue['display_draw_string_pixel'];
        delete Entry.hw.sendQueue['display_draw_string_string'];
    },

    transferDisplayDrawStringAlign: function transferDisplayDrawStringAlign(target, xStart, xEnd, y, align, font, pixel, string) {
        // 범위 조정
        xStart = Math.max(xStart, 0);
        xStart = Math.min(xStart, 124);
        xEnd = Math.max(xEnd, 4);
        xEnd = Math.min(xEnd, 128);
        y = Math.max(y, 0);
        y = Math.min(y, 60);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_string_align_x_start', xStart);
        Entry.hw.setDigitalPortValue('display_draw_string_align_x_end', xEnd);
        Entry.hw.setDigitalPortValue('display_draw_string_align_y', y);
        Entry.hw.setDigitalPortValue('display_draw_string_align_align', align);
        Entry.hw.setDigitalPortValue('display_draw_string_align_font', font);
        Entry.hw.setDigitalPortValue('display_draw_string_align_pixel', pixel);
        Entry.hw.setDigitalPortValue('display_draw_string_align_string', string);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_string_align_x_start'];
        delete Entry.hw.sendQueue['display_draw_string_align_x_end'];
        delete Entry.hw.sendQueue['display_draw_string_align_y'];
        delete Entry.hw.sendQueue['display_draw_string_align_align'];
        delete Entry.hw.sendQueue['display_draw_string_align_font'];
        delete Entry.hw.sendQueue['display_draw_string_align_pixel'];
        delete Entry.hw.sendQueue['display_draw_string_align_string'];
    },

    transferbuzzer: function transferbuzzer(mode, value, time) {
        // 전송
        Entry.hw.setDigitalPortValue('target', 0x31);
        Entry.hw.setDigitalPortValue('buzzer_mode', mode);
        Entry.hw.setDigitalPortValue('buzzer_value', value);
        Entry.hw.setDigitalPortValue('buzzer_time', time);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['buzzer_mode'];
        delete Entry.hw.sendQueue['buzzer_value'];
        delete Entry.hw.sendQueue['buzzer_time'];
    },

    transferVibrator: function transferVibrator(mode, timeOn, timeOff, timeRun) {
        // 범위 조정
        timeOn = Math.max(timeOn, 1);
        timeOn = Math.min(timeOn, 60000);
        timeOff = Math.max(timeOff, 1);
        timeOff = Math.min(timeOff, 60000);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x31);
        Entry.hw.setDigitalPortValue('vibrator_mode', mode);
        Entry.hw.setDigitalPortValue('vibrator_on', timeOn);
        Entry.hw.setDigitalPortValue('vibrator_off', timeOff);
        Entry.hw.setDigitalPortValue('vibrator_total', timeRun);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['vibrator_mode'];
        delete Entry.hw.sendQueue['vibrator_on'];
        delete Entry.hw.sendQueue['vibrator_off'];
        delete Entry.hw.sendQueue['vibrator_total'];
    },

    transferCommand: function transferCommand(target, command, option) {
        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('command_command', command);
        Entry.hw.setDigitalPortValue('command_option', option);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['command_command'];
        delete Entry.hw.sendQueue['command_option'];
    },

    // functions for block

    // 데이터 읽기
    getData: function getData(script, device) {
        return Entry.hw.portData[device];
    },

    // LED 수동 설정
    setLightManual: function setLightManual(script, target, flags, brightness) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferLightManual(target, flags, brightness);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // LED 수동 설정 - RGB 값 직접 지정
    setLightColorRgb: function setLightColorRgb(script, target, mode, red, green, blue) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferLightColorRgb(target, mode, red, green, blue);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면 전체 지우기, 선택 영역 지우기
    setDisplayClear: function setDisplayClear(script, target, pixel, clearAll, x, y, width, height) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayClear(target, pixel, clearAll, x, y, width, height);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 선택 영역 반전
    setDisplayInvert: function setDisplayInvert(script, target, x, y, width, height) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayInvert(target, x, y, width, height);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 점 찍기
    setDisplayDrawPoint: function setDisplayDrawPoint(script, target, x, y, pixel) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawPoint(target, x, y, pixel);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 선 그리기
    setDisplayDrawLine: function setDisplayDrawLine(script, target, x1, y1, x2, y2, pixel, line) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawLine(target, x1, y1, x2, y2, pixel, line);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 사각형 그리기
    setDisplayDrawRect: function setDisplayDrawRect(script, target, x, y, width, height, pixel, flagFill, line) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawRect(target, x, y, width, height, pixel, flagFill, line);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 원 그리기
    setDisplayDrawCircle: function setDisplayDrawCircle(script, target, x, y, radius, pixel, flagFill) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawCircle(target, x, y, radius, pixel, flagFill);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 문자열 쓰기
    setDisplayDrawString: function setDisplayDrawString(script, target, x, y, font, pixel, string) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawString(target, x, y, font, pixel, string);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 문자열 정렬하여 그리기
    setDisplayDrawStringAlign: function setDisplayDrawStringAlign(script, target, xStart, xEnd, y, align, font, pixel, string) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawStringAlign(target, xStart, xEnd, y, align, font, pixel, string);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 버저 설정(함수 호출 시 시간은 모두 ms 단위 사용)
    /*  
        MuteInstantally     = 1,    // 묵음 즉시 적용
        MuteContinually     = 2,    // 묵음 예약
        
        ScaleInstantally    = 3,    // 음계 즉시 적용
        ScaleContinually    = 4,    // 음계 예약
        
        HzInstantally       = 5,    // 주파수 즉시 적용
        HzContinually       = 6,    // 주파수 예약
     */
    // 정지
    setBuzzerStop: function setBuzzerStop(script) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferbuzzer(0, 0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 묵음
    setBuzzerMute: function setBuzzerMute(script, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 2; // 묵음 연속
                    if (flagInstantly) mode = 1; // 묵음 즉시

                    this.transferbuzzer(mode, 0xee, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setBuzzerScale: function setBuzzerScale(script, octave, scale, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 4; // Scale 연속
                    if (flagInstantly) mode = 3; // Scale 즉시

                    var scalecalc = octave * 12 + scale;

                    this.transferbuzzer(mode, scalecalc, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setBuzzerHz: function setBuzzerHz(script, hz, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 6; // Hz 연속
                    if (flagInstantly) mode = 5; // Hz 즉시

                    // 범위 조정
                    hz = Math.max(hz, 1);
                    hz = Math.min(hz, 63999);

                    this.transferbuzzer(mode, hz, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 진동 제어
    /*
        Stop            = 0,    // 정지
        Instantally     = 1,    // 즉시 적용
        Continually     = 2,    // 예약
     */
    setVibratorStop: function setVibratorStop(script) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferVibrator(0, 0, 0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setVibrator: function setVibrator(script, timeOn, timeOff, timeRun, flagDelay, flagInstantly) {
        timeRun = Math.max(timeRun, 0);
        timeRun = Math.min(timeRun, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = timeRun;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 2; // 예약
                    if (flagInstantly) mode = 1; // 즉시

                    this.transferVibrator(mode, timeOn, timeOff, timeRun);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendCommand: function sendCommand(script, target, command, option) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferCommand(target, command, option);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    }
};

Entry.byrobot_petrone_v2_controller.getBlocks = function () {
    return {
        //region byrobot 바이로봇
        /* BYROBOT PetroneV2 Controller Start */
        byrobot_petrone_v2_controller_controller_value_button: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_button_button, 'button_button'], [Lang.Blocks.byrobot_petrone_v2_controller_button_event, 'button_event']],
                value: 'button_button', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_controller_controller_value_button' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_petrone_v2_controller_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;
                var device = script.getField('DEVICE'); // paramsKeyMap에 정의된 이름 사용
                return read[device];
            }
        },
        byrobot_petrone_v2_controller_controller_value_joystick: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_x, 'joystick_left_x'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_y, 'joystick_left_y'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_direction, 'joystick_left_direction'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_event, 'joystick_left_event'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_x, 'joystick_right_x'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_y, 'joystick_right_y'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_direction, 'joystick_right_direction'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_event, 'joystick_right_event']],
                value: 'joystick_left_x', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_controller_controller_value_joystick' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_petrone_v2_controller_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;
                var device = script.getField('DEVICE'); // paramsKeyMap에 정의된 이름 사용
                return read[device];
            }
        },
        byrobot_petrone_v2_controller_controller_if_button_press: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_button_front_left, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_button_front_right, '2'], [Lang.Blocks.byrobot_petrone_v2_controller_button_front_left_right, '3'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up_left, '4'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up_right, '8'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up, '16'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_left, '32'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_right, '64'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_down, '128'], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_left, '256'], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_right, '512'], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_left_right, '768']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_controller_controller_if_button_press'
            },
            paramsKeyMap: {
                BUTTON: 0
            },
            class: 'byrobot_petrone_v2_controller_boolean_input',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;
                var button = 'button_button'; // paramsKeyMap에 정의된 이름 사용
                var buttonevent = 'button_event'; // paramsKeyMap에 정의된 이름 사용

                if (read[button] == script.getField('BUTTON') && read[buttonevent] == 2) return true;else return false;
            }
        },
        byrobot_petrone_v2_controller_controller_if_joystick_direction: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_left, 'joystick_left_direction'], [Lang.Blocks.byrobot_petrone_v2_common_right, 'joystick_right_direction']],
                value: 'joystick_left_direction',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left_up, '17'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_up, '18'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right_up, '20'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left, '33'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_center, '34'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right, '36'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left_down, '65'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_down, '66'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right_down, '68']],
                value: '34',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'byrobot_petrone_v2_controller_controller_if_joystick_direction'
            },
            paramsKeyMap: {
                DEVICE: 0,
                DIRECTION: 1
            },
            class: 'byrobot_petrone_v2_controller_boolean_input',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;

                var device = script.getField('DEVICE'); // paramsKeyMap에 정의된 이름 사용

                if (read[device] == script.getField('DIRECTION')) return true;else return false;
            }
        },
        byrobot_petrone_v2_controller_controller_light_manual_single_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_controller_controller_light_manual_single_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_controller_controller_light',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_controller.setLightManual(script, 0x31, 0xff, 0);
            }
        },
        byrobot_petrone_v2_controller_controller_light_manual_single: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_red, '128'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_green, '64'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_blue, '32'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_yellow, '192'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_magenta, '160'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_cyan, '96'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_white, '255']],
                value: '128',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_on, '220'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_off, '0'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b25, '75'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b50, '125'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b75, '200'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b100, '255']],
                value: '220',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_petrone_v2_controller_controller_light_manual_single'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_petrone_v2_controller_controller_light',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var flags = parseInt(script.getField('FLAGS'));
                var brightness = parseInt(script.getField('BRIGHTNESS'));
                return Entry.byrobot_petrone_v2_controller.setLightManual(script, 0x31, flags, brightness);
            }
        },
        byrobot_petrone_v2_controller_controller_light_manual_single_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0b11100000']
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'byrobot_petrone_v2_controller_controller_light_manual_single_input'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_petrone_v2_controller_controller_light',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var flags = script.getNumberValue('FLAGS');
                var brightness = script.getNumberValue('BRIGHTNESS');
                return Entry.byrobot_petrone_v2_controller.setLightManual(script, 0x31, flags, brightness);
            }
        },
        byrobot_petrone_v2_controller_controller_light_color_rgb_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, '0'], // TeamHold = 0x12
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, '1'], // TeamFlicker = 0x13
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, '2'], // TeamFlickerDouble = 0x14
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, null, null],
                type: 'byrobot_petrone_v2_controller_controller_light_color_rgb_input'
            },
            paramsKeyMap: {
                RED: 0,
                GREEN: 1,
                BLUE: 2,
                ADDITION: 3
            },
            class: 'byrobot_petrone_v2_controller_controller_light',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var mode = 0x12 + parseInt(script.getField('ADDITION'));
                var red = script.getNumberValue('RED');
                var green = script.getNumberValue('GREEN');
                var blue = script.getNumberValue('BLUE');
                return Entry.byrobot_petrone_v2_controller.setLightColorRgb(script, 0x31, mode, red, green, blue);
            }
        },
        byrobot_petrone_v2_controller_controller_light_color_rgb_select: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_color_sunset, 'sunset'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_cottoncandy, 'cottonCandy'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_muscat, 'muscat'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_strawberrymilk, 'strawberryMilk'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_emerald, 'emerald'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_lavender, 'lavender']],
                value: 'sunset',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, '0'], // TeamHold = 0x12
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, '1'], // TeamFlicker = 0x13
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, '2'], // TeamFlickerDouble = 0x14
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_petrone_v2_controller_controller_light_color_rgb_select'
            },
            paramsKeyMap: {
                SELECT: 0,
                ADDITION: 1
            },
            class: 'byrobot_petrone_v2_controller_controller_light',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var mode = 0x12 + parseInt(script.getField('ADDITION'));
                var select = script.getField('SELECT');
                var red = 0;
                var green = 0;
                var blue = 0;

                switch (select) {
                    case 'sunset':
                        red = 255;
                        green = 100;
                        blue = 0;
                        break;
                    case 'cottonCandy':
                        red = 20;
                        green = 250;
                        blue = 150;
                        break;
                    case 'muscat':
                        red = 70;
                        green = 255;
                        blue = 0;
                        break;
                    case 'strawberryMilk':
                        red = 150;
                        green = 60;
                        blue = 20;
                        break;
                    case 'emerald':
                        red = 0;
                        green = 255;
                        blue = 30;
                        break;
                    case 'lavender':
                        red = 80;
                        green = 0;
                        blue = 200;
                        break;
                }

                return Entry.byrobot_petrone_v2_controller.setLightColorRgb(script, 0x31, mode, red, green, blue);
            }
        },
        byrobot_petrone_v2_controller_controller_display_clear_all: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'byrobot_petrone_v2_controller_controller_display_clear_all'
            },
            paramsKeyMap: {
                PIXEL: 0
            },
            class: 'byrobot_petrone_v2_controller_controller_display',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var pixel = parseInt(script.getField('PIXEL'));
                return Entry.byrobot_petrone_v2_controller.setDisplayClear(script, 0x31, pixel, true, 0, 0, 0, 0);
            }
        },
        byrobot_petrone_v2_controller_controller_display_clear: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['64']
                }, {
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['16']
                }, null, null],
                type: 'byrobot_petrone_v2_controller_controller_display_clear'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                WIDTH: 2,
                HEIGHT: 3,
                PIXEL: 4
            },
            class: 'byrobot_petrone_v2_controller_controller_display',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var width = script.getNumberValue('WIDTH');
                var height = script.getNumberValue('HEIGHT');
                var pixel = parseInt(script.getField('PIXEL'));
                return Entry.byrobot_petrone_v2_controller.setDisplayClear(script, 0x31, pixel, false, x, y, width, height);
            }
        },
        byrobot_petrone_v2_controller_controller_display_invert: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['16']
                }, {
                    type: 'text',
                    params: ['64']
                }, {
                    type: 'text',
                    params: ['32']
                }, null, null],
                type: 'byrobot_petrone_v2_controller_controller_display_invert'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                WIDTH: 2,
                HEIGHT: 3
            },
            class: 'byrobot_petrone_v2_controller_controller_display',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var width = script.getNumberValue('WIDTH');
                var height = script.getNumberValue('HEIGHT');
                return Entry.byrobot_petrone_v2_controller.setDisplayInvert(script, 0x31, x, y, width, height);
            }
        },
        byrobot_petrone_v2_controller_controller_display_draw_point: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['64']
                }, {
                    type: 'text',
                    params: ['32']
                }, null, null],
                type: 'byrobot_petrone_v2_controller_controller_display_draw_point'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                PIXEL: 2
            },
            class: 'byrobot_petrone_v2_controller_controller_display',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var pixel = parseInt(script.getField('PIXEL'));
                return Entry.byrobot_petrone_v2_controller.setDisplayDrawPoint(script, 0x31, x, y, pixel);
            }
        },
        byrobot_petrone_v2_controller_controller_display_draw_line: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_line_solid, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dotted, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dashed, '2']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['16']
                }, {
                    type: 'text',
                    params: ['96']
                }, {
                    type: 'text',
                    params: ['48']
                }, null, null, null],
                type: 'byrobot_petrone_v2_controller_controller_display_draw_line'
            },
            paramsKeyMap: {
                X1: 0,
                Y1: 1,
                X2: 2,
                Y2: 3,
                PIXEL: 4,
                LINE: 5
            },
            class: 'byrobot_petrone_v2_controller_controller_display',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var x1 = script.getNumberValue('X1');
                var y1 = script.getNumberValue('Y1');
                var x2 = script.getNumberValue('X2');
                var y2 = script.getNumberValue('Y2');
                var pixel = parseInt(script.getField('PIXEL'));
                var line = parseInt(script.getField('LINE'));
                return Entry.byrobot_petrone_v2_controller.setDisplayDrawLine(script, 0x31, x1, y1, x2, y2, pixel, line);
            }
        },
        byrobot_petrone_v2_controller_controller_display_draw_rect: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_off, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_on, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_line_solid, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dotted, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dashed, '2']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['64']
                }, {
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['16']
                }, null, null, null, null],
                type: 'byrobot_petrone_v2_controller_controller_display_draw_rect'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                WIDTH: 2,
                HEIGHT: 3,
                PIXEL: 4,
                FLAGFILL: 5,
                LINE: 6
            },
            class: 'byrobot_petrone_v2_controller_controller_display',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var width = script.getNumberValue('WIDTH');
                var height = script.getNumberValue('HEIGHT');
                var pixel = parseInt(script.getField('PIXEL'));
                var flagFill = parseInt(script.getField('FLAGFILL'));
                var line = parseInt(script.getField('LINE'));
                return Entry.byrobot_petrone_v2_controller.setDisplayDrawRect(script, 0x31, x, y, width, height, pixel, flagFill, line);
            }
        },
        byrobot_petrone_v2_controller_controller_display_draw_circle: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_off, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_on, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['64']
                }, {
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['24']
                }, null, null, null],
                type: 'byrobot_petrone_v2_controller_controller_display_draw_circle'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                RADIUS: 2,
                PIXEL: 3,
                FLAGFILL: 4
            },
            class: 'byrobot_petrone_v2_controller_controller_display',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var radius = script.getNumberValue('RADIUS');
                var pixel = parseInt(script.getField('PIXEL'));
                var flagFill = parseInt(script.getField('FLAGFILL'));
                return Entry.byrobot_petrone_v2_controller.setDisplayDrawCircle(script, 0x31, x, y, radius, pixel, flagFill);
            }
        },
        byrobot_petrone_v2_controller_controller_display_draw_string: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_font_5x8, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_font_10x16, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['4']
                }, {
                    type: 'text',
                    params: ['24']
                }, null, null, {
                    type: 'text',
                    params: ['{Petrone V2}']
                }, null],
                type: 'byrobot_petrone_v2_controller_controller_display_draw_string'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                FONT: 2,
                PIXEL: 3,
                STRING: 4
            },
            class: 'byrobot_petrone_v2_controller_controller_display',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var font = parseInt(script.getField('FONT'));
                var pixel = parseInt(script.getField('PIXEL'));
                var string = script.getStringValue('STRING');
                return Entry.byrobot_petrone_v2_controller.setDisplayDrawString(script, 0x31, x, y, font, pixel, string);
            }
        },
        byrobot_petrone_v2_controller_controller_display_draw_string_align: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_align_left, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_align_center, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_display_align_right, '2']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_font_5x8, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_font_10x16, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['128']
                }, {
                    type: 'text',
                    params: ['24']
                }, null, null, null, {
                    type: 'text',
                    params: ['BYROBOT & U']
                }, null],
                type: 'byrobot_petrone_v2_controller_controller_display_draw_string_align'
            },
            paramsKeyMap: {
                XSTART: 0,
                XEND: 1,
                Y: 2,
                ALIGN: 3,
                FONT: 4,
                PIXEL: 5,
                STRING: 6
            },
            class: 'byrobot_petrone_v2_controller_controller_display',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var xStart = script.getNumberValue('XSTART');
                var xEnd = script.getNumberValue('XEND');
                var y = script.getNumberValue('Y');
                var align = parseInt(script.getField('ALIGN'));
                var font = parseInt(script.getField('FONT'));
                var pixel = parseInt(script.getField('PIXEL'));
                var string = script.getStringValue('STRING');
                return Entry.byrobot_petrone_v2_controller.setDisplayDrawStringAlign(script, 0x31, xStart, xEnd, y, align, font, pixel, string);
            }
        },
        byrobot_petrone_v2_controller_controller_buzzer_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_controller_controller_buzzer_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_controller_buzzer',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_controller.setBuzzerStop(script);
            }
        },
        byrobot_petrone_v2_controller_controller_buzzer_scale: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_petrone_v2_controller_controller_buzzer_scale'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1
            },
            class: 'byrobot_petrone_v2_controller_buzzer',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));

                if (scale == -1) return Entry.byrobot_petrone_v2_controller.setBuzzerMute(script, 60000, false, true);else return Entry.byrobot_petrone_v2_controller.setBuzzerScale(script, octave, scale, 60000, false, true);
            }
        },
        byrobot_petrone_v2_controller_controller_buzzer_scale_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_controller_controller_buzzer_scale_delay'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1,
                TIME: 2
            },
            class: 'byrobot_petrone_v2_controller_buzzer',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));
                var time = parseInt(script.getNumberValue('TIME') * 1000);

                if (scale == -1) return Entry.byrobot_petrone_v2_controller.setBuzzerMute(script, time, true, true);else return Entry.byrobot_petrone_v2_controller.setBuzzerScale(script, octave, scale, time, true, true);
            }
        },
        byrobot_petrone_v2_controller_controller_buzzer_scale_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_controller_controller_buzzer_scale_reserve'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1,
                TIME: 2
            },
            class: 'byrobot_petrone_v2_controller_buzzer',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));
                var time = parseInt(script.getNumberValue('TIME') * 1000);

                if (scale == -1) return Entry.byrobot_petrone_v2_controller.setBuzzerMute(script, time, false, false);else return Entry.byrobot_petrone_v2_controller.setBuzzerScale(script, octave, scale, time, false, false);
            }
        },
        byrobot_petrone_v2_controller_controller_buzzer_hz: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'byrobot_petrone_v2_controller_controller_buzzer_hz'
            },
            paramsKeyMap: {
                HZ: 0
            },
            class: 'byrobot_petrone_v2_controller_buzzer',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                return Entry.byrobot_petrone_v2_controller.setBuzzerHz(script, hz, 60000, false, true);
            }
        },
        byrobot_petrone_v2_controller_controller_buzzer_hz_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_controller_controller_buzzer_hz_delay'
            },
            paramsKeyMap: {
                HZ: 0,
                TIME: 1
            },
            class: 'byrobot_petrone_v2_controller_buzzer',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                var time = parseInt(script.getNumberValue('TIME') * 1000);
                return Entry.byrobot_petrone_v2_controller.setBuzzerHz(script, hz, time, true, true);
            }
        },
        byrobot_petrone_v2_controller_controller_buzzer_hz_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_controller_controller_buzzer_hz_reserve'
            },
            paramsKeyMap: {
                HZ: 0,
                TIME: 1
            },
            class: 'byrobot_petrone_v2_controller_buzzer',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                var time = parseInt(script.getNumberValue('TIME') * 1000);
                return Entry.byrobot_petrone_v2_controller.setBuzzerHz(script, hz, time, false, false);
            }
        },
        byrobot_petrone_v2_controller_controller_vibrator_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_controller_controller_vibrator_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_controller_vibrator',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_controller.setVibratorStop(script);
            }
        },
        byrobot_petrone_v2_controller_controller_vibrator_on_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_controller_controller_vibrator_on_delay'
            },
            paramsKeyMap: {
                TIMEON: 0
            },
            class: 'byrobot_petrone_v2_controller_vibrator',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                return Entry.byrobot_petrone_v2_controller.setVibrator(script, timeOn, 0, timeOn, true, true);
            }
        },
        byrobot_petrone_v2_controller_controller_vibrator_on_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_controller_controller_vibrator_on_reserve'
            },
            paramsKeyMap: {
                TIMEON: 0
            },
            class: 'byrobot_petrone_v2_controller_vibrator',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                return Entry.byrobot_petrone_v2_controller.setVibrator(script, timeOn, 0, timeOn, false, false);
            }
        },
        byrobot_petrone_v2_controller_controller_vibrator_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.02']
                }, {
                    type: 'text',
                    params: ['0.2']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_controller_controller_vibrator_delay'
            },
            paramsKeyMap: {
                TIMEON: 0,
                TIMEOFF: 1,
                TIMERUN: 2
            },
            class: 'byrobot_petrone_v2_controller_vibrator',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                var timeOff = parseInt(script.getNumberValue('TIMEOFF') * 1000);
                var timeRun = parseInt(script.getNumberValue('TIMERUN') * 1000);
                return Entry.byrobot_petrone_v2_controller.setVibrator(script, timeOn, timeOff, timeRun, true, true);
            }
        },
        byrobot_petrone_v2_controller_controller_vibrator_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.02']
                }, {
                    type: 'text',
                    params: ['0.2']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_controller_controller_vibrator_reserve'
            },
            paramsKeyMap: {
                TIMEON: 0,
                TIMEOFF: 1,
                TIMERUN: 2
            },
            class: 'byrobot_petrone_v2_controller_vibrator',
            isNotFor: ['byrobot_petrone_v2_controller'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                var timeOff = parseInt(script.getNumberValue('TIMEOFF') * 1000);
                var timeRun = parseInt(script.getNumberValue('TIMERUN') * 1000);
                return Entry.byrobot_petrone_v2_controller.setVibrator(script, timeOn, timeOff, timeRun, false, false);
            }
        }
        /* BYROBOT PetroneV2 Controller End */
        //endregion byrobot 바이로봇
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_byrobot_petrone_v2_drive.js":
/*!*****************************************************************!*\
  !*** ./src/playground/blocks/block_byrobot_petrone_v2_drive.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/***************************************************************************************
 *
 *  이름 붙이기 규칙(2017.1.16)
 *
 *  1. 변수에 해당하는 이름들은 모두 소문자
 *  2. 이어지는 추가 이름은 '_'를 붙여서 연결
 *
 ***************************************************************************************/

/***************************************************************************************
 *  장치와 연관된 변수 및 함수 정의
 ***************************************************************************************/

Entry.byrobot_petrone_v2_drive = {
    name: 'byrobot_petrone_v2_drive',
    url: 'http://www.byrobot.co.kr/',
    imageName: 'byrobot_petrone_v2_drive.png',
    title: {
        "en": "BYROBOT Petrone V2 drive",
        "ko": "바이로봇 페트론V2 자동차"
    },

    // 초기화
    setZero: function setZero() {
        // 초기화
        this.transferBufferClear();

        // 한 번에 명령을 전송하면 hw까지 제대로 전달되지 않는 경우가 있어
        // 명령을 각각 분리하여 전송하게 함(2017.01.03)
        for (var i = 0; i < 1; i++) {
            this.transferCommand(0x30, 0x24, 0); // 드론, command = 0x24 (Stop)
            this.transferVibrator(0, 0, 0, 0);
            this.transferbuzzer(0, 0, 0);
            this.transferLightManual(0x30, 0xff, 0); // LED 초기화(모두 꺼짐)
            this.transferLightManual(0x31, 0xff, 0); // LED 초기화(모두 꺼짐)
            this.transferLightManual(0x30, 0x80, 200); // LED 초기화(눈 빨강)
            this.transferLightManual(0x30, 0x10, 200); // LED 초기화(팔 빨강)
            this.transferMotorSingle(0, 1, 0); // 1번 모터방향 초기화(시계방향)
            this.transferMotorSingle(1, 2, 0); // 2번 모터방향 초기화(반시계방향)
        }
    },

    // Entry 좌측 하단 하드웨어 모니터 화면에 표시하는 속성
    // listPorts와 ports 두 곳 동시에 동일한 속성을 표시할 수는 없음
    monitorTemplate: {
        /* 센서창 가림 현상을 해결하기 위해서 주석 처리함(2017.11.06)
        imgPath: "hw/byrobot_petrone_v2_drive.png",      // 배경 이미지
        width: 256,     // 이미지의 폭
        height: 256,    // 이미지의 높이
        */

        // 모니터 화면 상단에 차례대로 나열하는 값
        listPorts: {
            // 팀 상태 보여주기
            state_modeVehicle: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_state_mode_vehicle,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            state_modeDrive: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_state_mode_drive,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            state_battery: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_state_battery,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_angleRoll: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_attitude_roll,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_anglePitch: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_attitude_pitch,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_angleYaw: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_attitude_yaw,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_accX: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_accel_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_accY: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_accel_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_accZ: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_accel_z,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_gyroRoll: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_gyro_roll,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_gyroPitch: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_gyro_pitch,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_gyroYaw: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_gyro_yaw,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            pressure_temperature: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_pressure_temperature,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            pressure_pressure: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_pressure_pressure,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imageflow_positionX: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionX,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imageflow_positionY: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionY,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            range_bottom: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_range_bottom,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            irmessage_direction: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_irmessage_direction,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            irmessage_irdata: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_irmessage,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_x: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_y: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_direction: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_direction,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_event: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_x: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_y: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_direction: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_direction,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_event: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            button_button: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_button_button,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            button_event: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_button_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            entryhw_countTransferReserved: {
                name: Lang.Blocks.byrobot_petrone_v2_entryhw_count_transfer_reserved,
                type: 'output',
                pos: { x: 0, y: 0 }
            }
        },

        // 모니터 화면 지정 위치와 선으로 연결하여 표시하는 값
        ports: {},

        mode: 'both' // 표시 모드
    },

    // functions

    // 시간 지연
    checkFinish: function checkFinish(script, ms) {
        if (!script.isStart) {
            script.isStart = true;
            script.timeFlag = 1;

            var fps = Entry.FPS || 60;
            var timeValue = 60 / fps * ms;

            setTimeout(function () {
                script.timeFlag = 0;
            }, timeValue);

            return 'Start';
        } else if (script.timeFlag == 1) {
            return 'Running';
        } else {
            delete script.timeFlag;
            delete script.isStart;
            Entry.engine.isContinue = false;
            return 'Finish';
        }
    },

    transferBufferClear: function transferBufferClear() {
        Entry.hw.setDigitalPortValue('buffer_clear', 0);

        Entry.hw.update();

        delete Entry.hw.sendQueue['buffer_clear'];
    },

    // 데이터 전송
    transferLightManual: function transferLightManual(target, flags, brightness) {
        // 범위 조정
        target = Math.max(target, 0);
        target = Math.min(target, 255);
        flags = Math.max(flags, 0);
        flags = Math.min(flags, 255);
        brightness = Math.max(brightness, 0);
        brightness = Math.min(brightness, 255);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('light_manual_flags', flags);
        Entry.hw.setDigitalPortValue('light_manual_brightness', brightness);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['light_manual_flags'];
        delete Entry.hw.sendQueue['light_manual_brightness'];
    },

    transferLightMode: function transferLightMode(target, mode, interval) {
        // 범위 조정
        target = Math.max(target, 0);
        target = Math.min(target, 255);
        mode = Math.max(mode, 0);
        mode = Math.min(mode, 255);
        interval = Math.max(interval, 0);
        interval = Math.min(interval, 65535);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('light_mode_mode', mode);
        Entry.hw.setDigitalPortValue('light_mode_interval', interval);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['light_mode_mode'];
        delete Entry.hw.sendQueue['light_mode_interval'];
    },

    transferLightColorRgb: function transferLightColorRgb(target, mode, red, green, blue) {
        // 범위 조정
        target = Math.max(target, 0);
        target = Math.min(target, 255);
        mode = Math.max(mode, 0);
        mode = Math.min(mode, 255);
        red = Math.max(red, 0);
        red = Math.min(red, 255);
        green = Math.max(green, 0);
        green = Math.min(green, 255);
        blue = Math.max(blue, 0);
        blue = Math.min(blue, 255);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('light_mode_mode', mode);
        Entry.hw.setDigitalPortValue('light_color_r', red);
        Entry.hw.setDigitalPortValue('light_color_g', green);
        Entry.hw.setDigitalPortValue('light_color_b', blue);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['light_mode_mode'];
        delete Entry.hw.sendQueue['light_color_r'];
        delete Entry.hw.sendQueue['light_color_g'];
        delete Entry.hw.sendQueue['light_color_b'];
    },

    transferDisplayClear: function transferDisplayClear(target, pixel, clearAll, x, y, width, height) {
        if (clearAll) {
            // 전송
            Entry.hw.setDigitalPortValue('target', target);
            Entry.hw.setDigitalPortValue('display_clearall_pixel', pixel);

            Entry.hw.update();

            delete Entry.hw.sendQueue['target'];
            delete Entry.hw.sendQueue['display_clearall_pixel'];
        } else {
            // 범위 조정
            x = Math.max(x, 0);
            x = Math.min(x, 128);
            y = Math.max(y, 0);
            y = Math.min(y, 64);
            width = Math.max(width, 0);
            width = Math.min(width, 128);
            height = Math.max(height, 0);
            height = Math.min(height, 64);

            // 전송
            Entry.hw.setDigitalPortValue('target', target);
            Entry.hw.setDigitalPortValue('display_clear_x', x);
            Entry.hw.setDigitalPortValue('display_clear_y', y);
            Entry.hw.setDigitalPortValue('display_clear_width', width);
            Entry.hw.setDigitalPortValue('display_clear_height', height);
            Entry.hw.setDigitalPortValue('display_clear_pixel', pixel);

            Entry.hw.update();

            delete Entry.hw.sendQueue['target'];
            delete Entry.hw.sendQueue['display_clear_x'];
            delete Entry.hw.sendQueue['display_clear_y'];
            delete Entry.hw.sendQueue['display_clear_width'];
            delete Entry.hw.sendQueue['display_clear_height'];
            delete Entry.hw.sendQueue['display_clear_pixel'];
        }
    },

    transferDisplayInvert: function transferDisplayInvert(target, x, y, width, height) {
        // 범위 조정
        x = Math.max(x, 0);
        x = Math.min(x, 128);
        y = Math.max(y, 0);
        y = Math.min(y, 64);
        width = Math.max(width, 0);
        width = Math.min(width, 128);
        height = Math.max(height, 0);
        height = Math.min(height, 64);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_invert_x', x);
        Entry.hw.setDigitalPortValue('display_invert_y', y);
        Entry.hw.setDigitalPortValue('display_invert_width', width);
        Entry.hw.setDigitalPortValue('display_invert_height', height);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_invert_x'];
        delete Entry.hw.sendQueue['display_invert_y'];
        delete Entry.hw.sendQueue['display_invert_width'];
        delete Entry.hw.sendQueue['display_invert_height'];
    },

    transferDisplayDrawPoint: function transferDisplayDrawPoint(target, x, y, pixel) {
        // 범위 조정
        x = Math.max(x, 0);
        x = Math.min(x, 128);
        y = Math.max(y, 0);
        y = Math.min(y, 64);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_point_x', x);
        Entry.hw.setDigitalPortValue('display_draw_point_y', y);
        Entry.hw.setDigitalPortValue('display_draw_point_pixel', pixel);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_point_x'];
        delete Entry.hw.sendQueue['display_draw_point_y'];
        delete Entry.hw.sendQueue['display_draw_point_pixel'];
    },

    transferDisplayDrawLine: function transferDisplayDrawLine(target, x1, y1, x2, y2, pixel, line) {
        // 범위 조정
        x1 = Math.max(x1, 0);
        x1 = Math.min(x1, 128);
        y1 = Math.max(y1, 0);
        y1 = Math.min(y1, 64);
        x2 = Math.max(x2, 0);
        x2 = Math.min(x2, 128);
        y2 = Math.max(y2, 0);
        y2 = Math.min(y2, 64);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_line_x1', x1);
        Entry.hw.setDigitalPortValue('display_draw_line_y1', y1);
        Entry.hw.setDigitalPortValue('display_draw_line_x2', x2);
        Entry.hw.setDigitalPortValue('display_draw_line_y2', y2);
        Entry.hw.setDigitalPortValue('display_draw_line_pixel', pixel);
        Entry.hw.setDigitalPortValue('display_draw_line_line', line);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_line_x1'];
        delete Entry.hw.sendQueue['display_draw_line_y1'];
        delete Entry.hw.sendQueue['display_draw_line_x2'];
        delete Entry.hw.sendQueue['display_draw_line_y2'];
        delete Entry.hw.sendQueue['display_draw_line_pixel'];
        delete Entry.hw.sendQueue['display_draw_line_line'];
    },

    transferDisplayDrawRect: function transferDisplayDrawRect(target, x, y, width, height, pixel, flagFill, line) {
        // 범위 조정
        x = Math.max(x, 0);
        x = Math.min(x, 128);
        y = Math.max(y, 0);
        y = Math.min(y, 64);
        width = Math.max(width, 0);
        width = Math.min(width, 128);
        height = Math.max(height, 0);
        height = Math.min(height, 64);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_rect_x', x);
        Entry.hw.setDigitalPortValue('display_draw_rect_y', y);
        Entry.hw.setDigitalPortValue('display_draw_rect_width', width);
        Entry.hw.setDigitalPortValue('display_draw_rect_height', height);
        Entry.hw.setDigitalPortValue('display_draw_rect_pixel', pixel);
        Entry.hw.setDigitalPortValue('display_draw_rect_flagfill', flagFill);
        Entry.hw.setDigitalPortValue('display_draw_rect_line', line);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_rect_x'];
        delete Entry.hw.sendQueue['display_draw_rect_y'];
        delete Entry.hw.sendQueue['display_draw_rect_width'];
        delete Entry.hw.sendQueue['display_draw_rect_height'];
        delete Entry.hw.sendQueue['display_draw_rect_pixel'];
        delete Entry.hw.sendQueue['display_draw_rect_flagfill'];
        delete Entry.hw.sendQueue['display_draw_rect_line'];
    },

    transferDisplayDrawCircle: function transferDisplayDrawCircle(target, x, y, radius, pixel, flagFill) {
        // 범위 조정
        x = Math.max(x, -50);
        x = Math.min(x, 178);
        y = Math.max(y, -50);
        y = Math.min(y, 114);
        radius = Math.max(radius, 1);
        radius = Math.min(radius, 200);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_circle_x', x);
        Entry.hw.setDigitalPortValue('display_draw_circle_y', y);
        Entry.hw.setDigitalPortValue('display_draw_circle_radius', radius);
        Entry.hw.setDigitalPortValue('display_draw_circle_pixel', pixel);
        Entry.hw.setDigitalPortValue('display_draw_circle_flagfill', flagFill);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_circle_x'];
        delete Entry.hw.sendQueue['display_draw_circle_y'];
        delete Entry.hw.sendQueue['display_draw_circle_radius'];
        delete Entry.hw.sendQueue['display_draw_circle_pixel'];
        delete Entry.hw.sendQueue['display_draw_circle_flagfill'];
    },

    transferDisplayDrawString: function transferDisplayDrawString(target, x, y, font, pixel, string) {
        // 범위 조정
        x = Math.max(x, 0);
        x = Math.min(x, 120);
        y = Math.max(y, 0);
        y = Math.min(y, 60);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_string_x', x);
        Entry.hw.setDigitalPortValue('display_draw_string_y', y);
        Entry.hw.setDigitalPortValue('display_draw_string_font', font);
        Entry.hw.setDigitalPortValue('display_draw_string_pixel', pixel);
        Entry.hw.setDigitalPortValue('display_draw_string_string', string);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_string_x'];
        delete Entry.hw.sendQueue['display_draw_string_y'];
        delete Entry.hw.sendQueue['display_draw_string_font'];
        delete Entry.hw.sendQueue['display_draw_string_pixel'];
        delete Entry.hw.sendQueue['display_draw_string_string'];
    },

    transferDisplayDrawStringAlign: function transferDisplayDrawStringAlign(target, xStart, xEnd, y, align, font, pixel, string) {
        // 범위 조정
        xStart = Math.max(xStart, 0);
        xStart = Math.min(xStart, 124);
        xEnd = Math.max(xEnd, 4);
        xEnd = Math.min(xEnd, 128);
        y = Math.max(y, 0);
        y = Math.min(y, 60);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_string_align_x_start', xStart);
        Entry.hw.setDigitalPortValue('display_draw_string_align_x_end', xEnd);
        Entry.hw.setDigitalPortValue('display_draw_string_align_y', y);
        Entry.hw.setDigitalPortValue('display_draw_string_align_align', align);
        Entry.hw.setDigitalPortValue('display_draw_string_align_font', font);
        Entry.hw.setDigitalPortValue('display_draw_string_align_pixel', pixel);
        Entry.hw.setDigitalPortValue('display_draw_string_align_string', string);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_string_align_x_start'];
        delete Entry.hw.sendQueue['display_draw_string_align_x_end'];
        delete Entry.hw.sendQueue['display_draw_string_align_y'];
        delete Entry.hw.sendQueue['display_draw_string_align_align'];
        delete Entry.hw.sendQueue['display_draw_string_align_font'];
        delete Entry.hw.sendQueue['display_draw_string_align_pixel'];
        delete Entry.hw.sendQueue['display_draw_string_align_string'];
    },

    transferbuzzer: function transferbuzzer(mode, value, time) {
        // 전송
        Entry.hw.setDigitalPortValue('target', 0x31);
        Entry.hw.setDigitalPortValue('buzzer_mode', mode);
        Entry.hw.setDigitalPortValue('buzzer_value', value);
        Entry.hw.setDigitalPortValue('buzzer_time', time);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['buzzer_mode'];
        delete Entry.hw.sendQueue['buzzer_value'];
        delete Entry.hw.sendQueue['buzzer_time'];
    },

    transferVibrator: function transferVibrator(mode, timeOn, timeOff, timeRun) {
        // 범위 조정
        timeOn = Math.max(timeOn, 1);
        timeOn = Math.min(timeOn, 60000);
        timeOff = Math.max(timeOff, 1);
        timeOff = Math.min(timeOff, 60000);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x31);
        Entry.hw.setDigitalPortValue('vibrator_mode', mode);
        Entry.hw.setDigitalPortValue('vibrator_on', timeOn);
        Entry.hw.setDigitalPortValue('vibrator_off', timeOff);
        Entry.hw.setDigitalPortValue('vibrator_total', timeRun);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['vibrator_mode'];
        delete Entry.hw.sendQueue['vibrator_on'];
        delete Entry.hw.sendQueue['vibrator_off'];
        delete Entry.hw.sendQueue['vibrator_total'];
    },

    transferIrMessage: function transferIrMessage(irdirection, irmessage) {
        // 범위 조정
        irmessage = Math.max(irmessage, -2147483647);
        irmessage = Math.min(irmessage, 2147483647);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x30);
        Entry.hw.setDigitalPortValue('irmessage_direction', irdirection);
        Entry.hw.setDigitalPortValue('irmessage_irdata', irmessage);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['irmessage_direction'];
        delete Entry.hw.sendQueue['irmessage_irdata'];
    },

    transferMotorSingle: function transferMotorSingle(motorIndex, motorRotation, motorSpeed) {
        // 범위 조정
        motorSpeed = Math.max(motorSpeed, 0);
        motorSpeed = Math.min(motorSpeed, 4096);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x30);
        Entry.hw.setDigitalPortValue('motorsingle_target', motorIndex);
        Entry.hw.setDigitalPortValue('motorsingle_rotation', motorRotation);
        Entry.hw.setDigitalPortValue('motorsingle_value', motorSpeed);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['motorsingle_target'];
        delete Entry.hw.sendQueue['motorsingle_rotation'];
        delete Entry.hw.sendQueue['motorsingle_value'];
    },

    transferCommand: function transferCommand(target, command, option) {
        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('command_command', command);
        Entry.hw.setDigitalPortValue('command_option', option);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['command_command'];
        delete Entry.hw.sendQueue['command_option'];
    },

    transferControlDouble: function transferControlDouble(wheel, accel) {
        // 범위 조정
        wheel = Math.max(wheel, -100);
        wheel = Math.min(wheel, 100);
        accel = Math.max(accel, -100);
        accel = Math.min(accel, 100);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x30);
        Entry.hw.setDigitalPortValue('control_wheel', wheel);
        Entry.hw.setDigitalPortValue('control_accel', accel);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['control_wheel'];
        delete Entry.hw.sendQueue['control_accel'];
    },

    transferControlQuad: function transferControlQuad(roll, pitch, yaw, throttle) {
        // 범위 조정
        roll = Math.max(roll, -100);
        roll = Math.min(roll, 100);
        pitch = Math.max(pitch, -100);
        pitch = Math.min(pitch, 100);
        yaw = Math.max(yaw, -100);
        yaw = Math.min(yaw, 100);
        throttle = Math.max(throttle, -100);
        throttle = Math.min(throttle, 100);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x30);
        Entry.hw.setDigitalPortValue('control_roll', roll);
        Entry.hw.setDigitalPortValue('control_pitch', pitch);
        Entry.hw.setDigitalPortValue('control_yaw', yaw);
        Entry.hw.setDigitalPortValue('control_throttle', throttle);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['control_roll'];
        delete Entry.hw.sendQueue['control_pitch'];
        delete Entry.hw.sendQueue['control_yaw'];
        delete Entry.hw.sendQueue['control_throttle'];
    },

    // functions for block

    // 데이터 읽기
    getData: function getData(script, device) {
        return Entry.hw.portData[device];
    },

    // LED 수동 설정
    setLightManual: function setLightManual(script, target, flags, brightness) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferLightManual(target, flags, brightness);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // LED 수동 설정 - RGB 값 직접 지정
    setLightColorRgb: function setLightColorRgb(script, target, mode, red, green, blue) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferLightColorRgb(target, mode, red, green, blue);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면 전체 지우기, 선택 영역 지우기
    setDisplayClear: function setDisplayClear(script, target, pixel, clearAll, x, y, width, height) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayClear(target, pixel, clearAll, x, y, width, height);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 선택 영역 반전
    setDisplayInvert: function setDisplayInvert(script, target, x, y, width, height) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayInvert(target, x, y, width, height);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 점 찍기
    setDisplayDrawPoint: function setDisplayDrawPoint(script, target, x, y, pixel) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawPoint(target, x, y, pixel);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 선 그리기
    setDisplayDrawLine: function setDisplayDrawLine(script, target, x1, y1, x2, y2, pixel, line) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawLine(target, x1, y1, x2, y2, pixel, line);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 사각형 그리기
    setDisplayDrawRect: function setDisplayDrawRect(script, target, x, y, width, height, pixel, flagFill, line) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawRect(target, x, y, width, height, pixel, flagFill, line);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 원 그리기
    setDisplayDrawCircle: function setDisplayDrawCircle(script, target, x, y, radius, pixel, flagFill) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawCircle(target, x, y, radius, pixel, flagFill);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 문자열 쓰기
    setDisplayDrawString: function setDisplayDrawString(script, target, x, y, font, pixel, string) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawString(target, x, y, font, pixel, string);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 문자열 정렬하여 그리기
    setDisplayDrawStringAlign: function setDisplayDrawStringAlign(script, target, xStart, xEnd, y, align, font, pixel, string) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawStringAlign(target, xStart, xEnd, y, align, font, pixel, string);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 버저 설정(함수 호출 시 시간은 모두 ms 단위 사용)
    /*  
        MuteInstantally     = 1,    // 묵음 즉시 적용
        MuteContinually     = 2,    // 묵음 예약
        
        ScaleInstantally    = 3,    // 음계 즉시 적용
        ScaleContinually    = 4,    // 음계 예약
        
        HzInstantally       = 5,    // 주파수 즉시 적용
        HzContinually       = 6,    // 주파수 예약
     */
    // 정지
    setBuzzerStop: function setBuzzerStop(script) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferbuzzer(0, 0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 묵음
    setBuzzerMute: function setBuzzerMute(script, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 2; // 묵음 연속
                    if (flagInstantly) mode = 1; // 묵음 즉시

                    this.transferbuzzer(mode, 0xee, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setBuzzerScale: function setBuzzerScale(script, octave, scale, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 4; // Scale 연속
                    if (flagInstantly) mode = 3; // Scale 즉시

                    var scalecalc = octave * 12 + scale;

                    this.transferbuzzer(mode, scalecalc, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setBuzzerHz: function setBuzzerHz(script, hz, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 6; // Hz 연속
                    if (flagInstantly) mode = 5; // Hz 즉시

                    // 범위 조정
                    hz = Math.max(hz, 1);
                    hz = Math.min(hz, 63999);

                    this.transferbuzzer(mode, hz, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 진동 제어
    /*
        Stop            = 0,    // 정지
        Instantally     = 1,    // 즉시 적용
        Continually     = 2,    // 예약
     */
    setVibratorStop: function setVibratorStop(script) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferVibrator(0, 0, 0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setVibrator: function setVibrator(script, timeOn, timeOff, timeRun, flagDelay, flagInstantly) {
        timeRun = Math.max(timeRun, 0);
        timeRun = Math.min(timeRun, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = timeRun;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 2; // 예약
                    if (flagInstantly) mode = 1; // 즉시

                    this.transferVibrator(mode, timeOn, timeOff, timeRun);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendIrMessage: function sendIrMessage(script, irdirection, irmessage) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferIrMessage(irdirection, irmessage);
                    // Light Event (transferLightEvent 만들어야 할 듯)
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendStop: function sendStop(script) {
        return this.sendCommand(script, 0x30, 0x24, 0);
    },

    sendCommand: function sendCommand(script, target, command, option) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferCommand(target, command, option);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setMotorSingle: function setMotorSingle(script, motorIndex, motorRotation, motorSpeed) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferMotorSingle(motorIndex, motorRotation, motorSpeed);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },
    /*
        None = 0,           ///< 없음
        
        Flight = 0x10,      ///< 비행(가드 포함)
        FlightNoGuard,      ///< 비행(가드 없음)
        FlightFPV,          ///< 비행(FPV)
        
        Drive = 0x20,       ///< 주행
        DriveFPV,           ///< 주행(FPV)
        
        Test = 0x30,        ///< 테스트
     */
    setModeVehicle: function setModeVehicle(script, modeVehicle) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferCommand(0x30, 0x10, modeVehicle);

                    this.transferControlDouble(0, 0);
                    this.transferControlQuad(0, 0, 0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendControlDoubleSingle: function sendControlDoubleSingle(script, controlTarget, value, time, flagDelay) {
        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    switch (controlTarget) {
                        case 'control_wheel':
                            {
                                // 범위 조정
                                value = Math.max(value, -100);
                                value = Math.min(value, 100);
                            }
                            break;

                        case 'control_accel':
                            {
                                // 범위 조정
                                value = Math.max(value, -100);
                                value = Math.min(value, 100);
                            }
                            break;
                    }

                    // 전송
                    Entry.hw.setDigitalPortValue('target', 0x30);
                    Entry.hw.setDigitalPortValue(controlTarget, value);

                    Entry.hw.update();

                    delete Entry.hw.sendQueue['target'];
                    delete Entry.hw.sendQueue[controlTarget];
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                if (flagDelay) {
                    // 블럭을 빠져나갈 때 변경했던 값을 초기화

                    // 전송
                    Entry.hw.setDigitalPortValue('target', 0x30);
                    Entry.hw.setDigitalPortValue(controlTarget, 0);

                    Entry.hw.update();

                    delete Entry.hw.sendQueue['target'];
                    delete Entry.hw.sendQueue[controlTarget];
                }
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendControlDouble: function sendControlDouble(script, wheel, accel, time, flagDelay) {
        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    this.transferControlDouble(wheel, accel);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                if (flagDelay) {
                    this.transferControlDouble(0, 0);
                }
                return script.callReturn();

            default:
                return script.callReturn();
        }
    }
};

Entry.byrobot_petrone_v2_drive.getBlocks = function () {
    return {
        //region byrobot 바이로봇
        /* BYROBOT PetroneV2 Drive Start */
        byrobot_petrone_v2_drive_drone_value_attitude: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_attitude_roll, 'imu_angleRoll'], [Lang.Blocks.byrobot_petrone_v2_drone_attitude_pitch, 'imu_anglePitch'], [Lang.Blocks.byrobot_petrone_v2_drone_attitude_yaw, 'imu_angleYaw']],
                value: 'imu_angleRoll', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_drive_drone_value_attitude' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_petrone_v2_drive_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_petrone_v2_drive_drone_value_imu: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_accel_x, 'imu_accX'], [Lang.Blocks.byrobot_petrone_v2_drone_accel_y, 'imu_accY'], [Lang.Blocks.byrobot_petrone_v2_drone_accel_z, 'imu_accZ'], [Lang.Blocks.byrobot_petrone_v2_drone_gyro_roll, 'imu_gyroRoll'], [Lang.Blocks.byrobot_petrone_v2_drone_gyro_pitch, 'imu_gyroPitch'], [Lang.Blocks.byrobot_petrone_v2_drone_gyro_yaw, 'imu_gyroYaw']],
                value: 'imu_accX', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_drive_drone_value_imu' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_petrone_v2_drive_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_petrone_v2_drive_drone_value_sensor: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_pressure_temperature, 'pressure_temperature'], [Lang.Blocks.byrobot_petrone_v2_drone_pressure_pressure, 'pressure_pressure'], [Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionX, 'imageflow_positionX'], [Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionY, 'imageflow_positionY'], [Lang.Blocks.byrobot_petrone_v2_drone_range_bottom, 'range_bottom']],
                value: 'pressure_temperature', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_drive_drone_value_sensor' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_petrone_v2_drive_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_petrone_v2_drive_drone_value_etc: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_state_mode_vehicle, 'state_modeVehicle'], [Lang.Blocks.byrobot_petrone_v2_drone_state_mode_drive, 'state_modeDrive'], [Lang.Blocks.byrobot_petrone_v2_drone_state_battery, 'state_battery'], [Lang.Blocks.byrobot_petrone_v2_drone_irmessage, 'irmessage_irdata']],
                value: 'irmessage_irdata', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_drive_drone_value_etc' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_petrone_v2_drive_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_petrone_v2_drive_controller_value_button: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_button_button, 'button_button'], [Lang.Blocks.byrobot_petrone_v2_controller_button_event, 'button_event']],
                value: 'button_button', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_drive_controller_value_button' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_petrone_v2_drive_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_petrone_v2_drive_controller_value_joystick: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_x, 'joystick_left_x'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_y, 'joystick_left_y'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_direction, 'joystick_left_direction'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_event, 'joystick_left_event'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_x, 'joystick_right_x'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_y, 'joystick_right_y'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_direction, 'joystick_right_direction'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_event, 'joystick_right_event']],
                value: 'joystick_left_x', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_drive_controller_value_joystick' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_petrone_v2_drive_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_petrone_v2_drive_controller_if_button_press: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_button_front_left, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_button_front_right, '2'], [Lang.Blocks.byrobot_petrone_v2_controller_button_front_left_right, '3'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up_left, '4'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up_right, '8'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up, '16'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_left, '32'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_right, '64'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_down, '128'], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_left, '256'], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_right, '512'], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_left_right, '768']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_drive_controller_if_button_press'
            },
            paramsKeyMap: {
                BUTTON: 0
            },
            class: 'byrobot_petrone_v2_drive_boolean_input',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;
                var button = 'button_button'; // paramsKeyMap에 정의된 이름 사용
                var buttonevent = 'button_event'; // paramsKeyMap에 정의된 이름 사용

                if (read[button] == script.getField('BUTTON') && read[buttonevent] == 2) return true;else return false;
            },
            syntax: { js: [], py: [] }
        },
        byrobot_petrone_v2_drive_controller_if_joystick_direction: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_left, 'joystick_left_direction'], [Lang.Blocks.byrobot_petrone_v2_common_right, 'joystick_right_direction']],
                value: 'joystick_left_direction',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left_up, '17'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_up, '18'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right_up, '20'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left, '33'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_center, '34'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right, '36'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left_down, '65'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_down, '66'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right_down, '68']],
                value: '34',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'byrobot_petrone_v2_drive_controller_if_joystick_direction'
            },
            paramsKeyMap: {
                DEVICE: 0,
                DIRECTION: 1
            },
            class: 'byrobot_petrone_v2_drive_boolean_input',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;

                var device = script.getField('DEVICE'); // paramsKeyMap에 정의된 이름 사용

                if (read[device] == script.getField('DIRECTION')) return true;else return false;
            }
        },
        byrobot_petrone_v2_drive_controller_light_manual_single_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_drive_controller_light_manual_single_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_drive_controller_light',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_drive.setLightManual(script, 0x31, 0xff, 0);
            }
        },
        byrobot_petrone_v2_drive_controller_light_manual_single: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_red, '128'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_green, '64'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_blue, '32'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_yellow, '192'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_magenta, '160'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_cyan, '96'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_white, '255']],
                value: '128',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_on, '220'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_off, '0'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b25, '75'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b50, '125'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b75, '200'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b100, '255']],
                value: '220',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_petrone_v2_drive_controller_light_manual_single'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_petrone_v2_drive_controller_light',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var flags = parseInt(script.getField('FLAGS'));
                var brightness = parseInt(script.getField('BRIGHTNESS'));
                return Entry.byrobot_petrone_v2_drive.setLightManual(script, 0x31, flags, brightness);
            }
        },
        byrobot_petrone_v2_drive_controller_light_manual_single_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0b11100000']
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'byrobot_petrone_v2_drive_controller_light_manual_single_input'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_petrone_v2_drive_controller_light',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var flags = script.getNumberValue('FLAGS');
                var brightness = script.getNumberValue('BRIGHTNESS');
                return Entry.byrobot_petrone_v2_drive.setLightManual(script, 0x31, flags, brightness);
            }
        },
        byrobot_petrone_v2_drive_controller_light_color_rgb_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, '0'], // TeamHold = 0x12
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, '1'], // TeamFlicker = 0x13
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, '2'], // TeamFlickerDouble = 0x14
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, null, null],
                type: 'byrobot_petrone_v2_drive_controller_light_color_rgb_input'
            },
            paramsKeyMap: {
                RED: 0,
                GREEN: 1,
                BLUE: 2,
                ADDITION: 3
            },
            class: 'byrobot_petrone_v2_drive_controller_light',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var mode = 0x12 + parseInt(script.getField('ADDITION'));
                var red = script.getNumberValue('RED');
                var green = script.getNumberValue('GREEN');
                var blue = script.getNumberValue('BLUE');
                return Entry.byrobot_petrone_v2_drive.setLightColorRgb(script, 0x31, mode, red, green, blue);
            }
        },
        byrobot_petrone_v2_drive_controller_light_color_rgb_select: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_color_sunset, 'sunset'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_cottoncandy, 'cottonCandy'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_muscat, 'muscat'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_strawberrymilk, 'strawberryMilk'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_emerald, 'emerald'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_lavender, 'lavender']],
                value: 'sunset',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, '0'], // TeamHold = 0x12
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, '1'], // TeamFlicker = 0x13
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, '2'], // TeamFlickerDouble = 0x14
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_petrone_v2_drive_controller_light_color_rgb_select'
            },
            paramsKeyMap: {
                SELECT: 0,
                ADDITION: 1
            },
            class: 'byrobot_petrone_v2_drive_controller_light',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var mode = 0x12 + parseInt(script.getField('ADDITION'));
                var select = script.getField('SELECT');
                var red = 0;
                var green = 0;
                var blue = 0;

                switch (select) {
                    case 'sunset':
                        red = 255;
                        green = 100;
                        blue = 0;
                        break;
                    case 'cottonCandy':
                        red = 20;
                        green = 250;
                        blue = 150;
                        break;
                    case 'muscat':
                        red = 70;
                        green = 255;
                        blue = 0;
                        break;
                    case 'strawberryMilk':
                        red = 150;
                        green = 60;
                        blue = 20;
                        break;
                    case 'emerald':
                        red = 0;
                        green = 255;
                        blue = 30;
                        break;
                    case 'lavender':
                        red = 80;
                        green = 0;
                        blue = 200;
                        break;
                }

                return Entry.byrobot_petrone_v2_drive.setLightColorRgb(script, 0x31, mode, red, green, blue);
            }
        },
        byrobot_petrone_v2_drive_drone_light_manual_single_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_drive_drone_light_manual_single_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_drive_drone_light',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_drive.setLightManual(script, 0x30, 0xff, 0);
            }
        },
        byrobot_petrone_v2_drive_drone_light_manual_single: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_light_manual_eye_red, '128'], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_eye_green, '64'], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_eye_blue, '32'], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_arm_red, '16'], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_arm_green, '8'], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_arm_blue, '4']],
                value: '128',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_on, '220'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_off, '0'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b25, '75'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b50, '125'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b75, '200'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b100, '255']],
                value: '220',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_petrone_v2_drive_drone_light_manual_single'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_petrone_v2_drive_drone_light',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var flags = parseInt(script.getField('FLAGS'));
                var brightness = parseInt(script.getField('BRIGHTNESS'));
                return Entry.byrobot_petrone_v2_drive.setLightManual(script, 0x30, flags, brightness);
            }
        },
        byrobot_petrone_v2_drive_drone_light_manual_single_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0b11111100']
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'byrobot_petrone_v2_drive_drone_light_manual_single_input'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_petrone_v2_drive_drone_light',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var flags = script.getNumberValue('FLAGS');
                var brightness = script.getNumberValue('BRIGHTNESS');
                return Entry.byrobot_petrone_v2_drive.setLightManual(script, 0x30, flags, brightness);
            }
        },
        byrobot_petrone_v2_drive_drone_light_color_rgb_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_light_color_eye, '18'], // EyeHold = 0x12
                [Lang.Blocks.byrobot_petrone_v2_drone_light_color_arm, '66']],
                value: '18',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, '0'], // EyeHold = 0x12,          // ArmHold = 0x42
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, '1'], // EyeFlicker = 0x13,       // ArmFlicker = 0x43
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, '2'], // EyeFlickerDouble = 0x14, // ArmFlickerDouble = 0x44
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, null, null],
                type: 'byrobot_petrone_v2_drive_drone_light_color_rgb_input'
            },
            paramsKeyMap: {
                MODE: 0,
                RED: 1,
                GREEN: 2,
                BLUE: 3,
                ADDITION: 4
            },
            class: 'byrobot_petrone_v2_drive_drone_light',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var mode = parseInt(script.getField('MODE')) + parseInt(script.getField('ADDITION'));
                var red = script.getNumberValue('RED');
                var green = script.getNumberValue('GREEN');
                var blue = script.getNumberValue('BLUE');
                return Entry.byrobot_petrone_v2_drive.setLightColorRgb(script, 0x30, mode, red, green, blue);
            }
        },
        byrobot_petrone_v2_drive_drone_light_color_rgb_select: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_light_color_eye, '18'], // EyeHold = 0x12
                [Lang.Blocks.byrobot_petrone_v2_drone_light_color_arm, '66']],
                value: '18',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_color_sunset, 'sunset'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_cottoncandy, 'cottonCandy'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_muscat, 'muscat'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_strawberrymilk, 'strawberryMilk'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_emerald, 'emerald'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_lavender, 'lavender']],
                value: 'sunset',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, '0'], // EyeHold = 0x12,          // ArmHold = 0x42
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, '1'], // EyeFlicker = 0x13,       // ArmFlicker = 0x43
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, '2'], // EyeFlickerDouble = 0x14, // ArmFlickerDouble = 0x44
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null, null],
                type: 'byrobot_petrone_v2_drive_drone_light_color_rgb_select'
            },
            paramsKeyMap: {
                MODE: 0,
                SELECT: 1,
                ADDITION: 2
            },
            class: 'byrobot_petrone_v2_drive_drone_light',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var mode = parseInt(script.getField('MODE')) + parseInt(script.getField('ADDITION'));
                var select = script.getField('SELECT');
                var red = 0;
                var green = 0;
                var blue = 0;

                switch (select) {
                    case 'sunset':
                        red = 255;
                        green = 50;
                        blue = 0;
                        break;
                    case 'cottonCandy':
                        red = 20;
                        green = 250;
                        blue = 150;
                        break;
                    case 'muscat':
                        red = 70;
                        green = 255;
                        blue = 0;
                        break;
                    case 'strawberryMilk':
                        red = 150;
                        green = 60;
                        blue = 20;
                        break;
                    case 'emerald':
                        red = 0;
                        green = 255;
                        blue = 30;
                        break;
                    case 'lavender':
                        red = 80;
                        green = 0;
                        blue = 200;
                        break;
                }

                return Entry.byrobot_petrone_v2_drive.setLightColorRgb(script, 0x30, mode, red, green, blue);
            }
        },
        byrobot_petrone_v2_drive_controller_display_clear_all: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'byrobot_petrone_v2_drive_controller_display_clear_all'
            },
            paramsKeyMap: {
                PIXEL: 0
            },
            class: 'byrobot_petrone_v2_drive_controller_display',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var pixel = parseInt(script.getField('PIXEL'));
                return Entry.byrobot_petrone_v2_drive.setDisplayClear(script, 0x31, pixel, true, 0, 0, 0, 0);
            }
        },
        byrobot_petrone_v2_drive_controller_display_clear: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['64']
                }, {
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['16']
                }, null, null],
                type: 'byrobot_petrone_v2_drive_controller_display_clear'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                WIDTH: 2,
                HEIGHT: 3,
                PIXEL: 4
            },
            class: 'byrobot_petrone_v2_drive_controller_display',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var width = script.getNumberValue('WIDTH');
                var height = script.getNumberValue('HEIGHT');
                var pixel = parseInt(script.getField('PIXEL'));
                return Entry.byrobot_petrone_v2_drive.setDisplayClear(script, 0x31, pixel, false, x, y, width, height);
            }
        },
        byrobot_petrone_v2_drive_controller_display_invert: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['16']
                }, {
                    type: 'text',
                    params: ['64']
                }, {
                    type: 'text',
                    params: ['32']
                }, null, null],
                type: 'byrobot_petrone_v2_drive_controller_display_invert'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                WIDTH: 2,
                HEIGHT: 3
            },
            class: 'byrobot_petrone_v2_drive_controller_display',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var width = script.getNumberValue('WIDTH');
                var height = script.getNumberValue('HEIGHT');
                return Entry.byrobot_petrone_v2_drive.setDisplayInvert(script, 0x31, x, y, width, height);
            }
        },
        byrobot_petrone_v2_drive_controller_display_draw_point: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['64']
                }, {
                    type: 'text',
                    params: ['32']
                }, null, null],
                type: 'byrobot_petrone_v2_drive_controller_display_draw_point'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                PIXEL: 2
            },
            class: 'byrobot_petrone_v2_drive_controller_display',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var pixel = parseInt(script.getField('PIXEL'));
                return Entry.byrobot_petrone_v2_drive.setDisplayDrawPoint(script, 0x31, x, y, pixel);
            }
        },
        byrobot_petrone_v2_drive_controller_display_draw_line: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_line_solid, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dotted, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dashed, '2']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['16']
                }, {
                    type: 'text',
                    params: ['96']
                }, {
                    type: 'text',
                    params: ['48']
                }, null, null, null],
                type: 'byrobot_petrone_v2_drive_controller_display_draw_line'
            },
            paramsKeyMap: {
                X1: 0,
                Y1: 1,
                X2: 2,
                Y2: 3,
                PIXEL: 4,
                LINE: 5
            },
            class: 'byrobot_petrone_v2_drive_controller_display',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var x1 = script.getNumberValue('X1');
                var y1 = script.getNumberValue('Y1');
                var x2 = script.getNumberValue('X2');
                var y2 = script.getNumberValue('Y2');
                var pixel = parseInt(script.getField('PIXEL'));
                var line = parseInt(script.getField('LINE'));
                return Entry.byrobot_petrone_v2_drive.setDisplayDrawLine(script, 0x31, x1, y1, x2, y2, pixel, line);
            }
        },
        byrobot_petrone_v2_drive_controller_display_draw_rect: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_off, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_on, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_line_solid, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dotted, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dashed, '2']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['64']
                }, {
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['16']
                }, null, null, null, null],
                type: 'byrobot_petrone_v2_drive_controller_display_draw_rect'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                WIDTH: 2,
                HEIGHT: 3,
                PIXEL: 4,
                FLAGFILL: 5,
                LINE: 6
            },
            class: 'byrobot_petrone_v2_drive_controller_display',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var width = script.getNumberValue('WIDTH');
                var height = script.getNumberValue('HEIGHT');
                var pixel = parseInt(script.getField('PIXEL'));
                var flagFill = parseInt(script.getField('FLAGFILL'));
                var line = parseInt(script.getField('LINE'));
                return Entry.byrobot_petrone_v2_drive.setDisplayDrawRect(script, 0x31, x, y, width, height, pixel, flagFill, line);
            }
        },
        byrobot_petrone_v2_drive_controller_display_draw_circle: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_off, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_on, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['64']
                }, {
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['24']
                }, null, null, null],
                type: 'byrobot_petrone_v2_drive_controller_display_draw_circle'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                RADIUS: 2,
                PIXEL: 3,
                FLAGFILL: 4
            },
            class: 'byrobot_petrone_v2_drive_controller_display',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var radius = script.getNumberValue('RADIUS');
                var pixel = parseInt(script.getField('PIXEL'));
                var flagFill = parseInt(script.getField('FLAGFILL'));
                return Entry.byrobot_petrone_v2_drive.setDisplayDrawCircle(script, 0x31, x, y, radius, pixel, flagFill);
            }
        },
        byrobot_petrone_v2_drive_controller_display_draw_string: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_font_5x8, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_font_10x16, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['4']
                }, {
                    type: 'text',
                    params: ['24']
                }, null, null, {
                    type: 'text',
                    params: ['{Petrone V2}']
                }, null],
                type: 'byrobot_petrone_v2_drive_controller_display_draw_string'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                FONT: 2,
                PIXEL: 3,
                STRING: 4
            },
            class: 'byrobot_petrone_v2_drive_controller_display',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var font = parseInt(script.getField('FONT'));
                var pixel = parseInt(script.getField('PIXEL'));
                var string = script.getStringValue('STRING');
                return Entry.byrobot_petrone_v2_drive.setDisplayDrawString(script, 0x31, x, y, font, pixel, string);
            }
        },
        byrobot_petrone_v2_drive_controller_display_draw_string_align: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_align_left, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_align_center, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_display_align_right, '2']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_font_5x8, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_font_10x16, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['128']
                }, {
                    type: 'text',
                    params: ['24']
                }, null, null, null, {
                    type: 'text',
                    params: ['BYROBOT & U']
                }, null],
                type: 'byrobot_petrone_v2_drive_controller_display_draw_string_align'
            },
            paramsKeyMap: {
                XSTART: 0,
                XEND: 1,
                Y: 2,
                ALIGN: 3,
                FONT: 4,
                PIXEL: 5,
                STRING: 6
            },
            class: 'byrobot_petrone_v2_drive_controller_display',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var xStart = script.getNumberValue('XSTART');
                var xEnd = script.getNumberValue('XEND');
                var y = script.getNumberValue('Y');
                var align = parseInt(script.getField('ALIGN'));
                var font = parseInt(script.getField('FONT'));
                var pixel = parseInt(script.getField('PIXEL'));
                var string = script.getStringValue('STRING');
                return Entry.byrobot_petrone_v2_drive.setDisplayDrawStringAlign(script, 0x31, xStart, xEnd, y, align, font, pixel, string);
            }
        },
        byrobot_petrone_v2_drive_controller_buzzer_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_drive_controller_buzzer_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_drive_buzzer',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_drive.setBuzzerStop(script);
            }
        },
        byrobot_petrone_v2_drive_controller_buzzer_scale: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_petrone_v2_drive_controller_buzzer_scale'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1
            },
            class: 'byrobot_petrone_v2_drive_buzzer',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));

                if (scale == -1) return Entry.byrobot_petrone_v2_drive.setBuzzerMute(script, 60000, false, true);else return Entry.byrobot_petrone_v2_drive.setBuzzerScale(script, octave, scale, 60000, false, true);
            }
        },
        byrobot_petrone_v2_drive_controller_buzzer_scale_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_drive_controller_buzzer_scale_delay'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1,
                TIME: 2
            },
            class: 'byrobot_petrone_v2_drive_buzzer',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));
                var time = parseInt(script.getNumberValue('TIME') * 1000);

                if (scale == -1) return Entry.byrobot_petrone_v2_drive.setBuzzerMute(script, time, true, true);else return Entry.byrobot_petrone_v2_drive.setBuzzerScale(script, octave, scale, time, true, true);
            }
        },
        byrobot_petrone_v2_drive_controller_buzzer_scale_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_drive_controller_buzzer_scale_reserve'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1,
                TIME: 2
            },
            class: 'byrobot_petrone_v2_drive_buzzer',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));
                var time = parseInt(script.getNumberValue('TIME') * 1000);

                if (scale == -1) return Entry.byrobot_petrone_v2_drive.setBuzzerMute(script, time, false, false);else return Entry.byrobot_petrone_v2_drive.setBuzzerScale(script, octave, scale, time, false, false);
            }
        },
        byrobot_petrone_v2_drive_controller_buzzer_hz: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'byrobot_petrone_v2_drive_controller_buzzer_hz'
            },
            paramsKeyMap: {
                HZ: 0
            },
            class: 'byrobot_petrone_v2_drive_buzzer',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                return Entry.byrobot_petrone_v2_drive.setBuzzerHz(script, hz, 60000, false, true);
            }
        },
        byrobot_petrone_v2_drive_controller_buzzer_hz_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_drive_controller_buzzer_hz_delay'
            },
            paramsKeyMap: {
                HZ: 0,
                TIME: 1
            },
            class: 'byrobot_petrone_v2_drive_buzzer',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                var time = parseInt(script.getNumberValue('TIME') * 1000);
                return Entry.byrobot_petrone_v2_drive.setBuzzerHz(script, hz, time, true, true);
            }
        },
        byrobot_petrone_v2_drive_controller_buzzer_hz_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_drive_controller_buzzer_hz_reserve'
            },
            paramsKeyMap: {
                HZ: 0,
                TIME: 1
            },
            class: 'byrobot_petrone_v2_drive_buzzer',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                var time = parseInt(script.getNumberValue('TIME') * 1000);
                return Entry.byrobot_petrone_v2_drive.setBuzzerHz(script, hz, time, false, false);
            }
        },
        byrobot_petrone_v2_drive_controller_vibrator_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_drive_controller_vibrator_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_drive_vibrator',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_drive.setVibratorStop(script);
            }
        },
        byrobot_petrone_v2_drive_controller_vibrator_on_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_drive_controller_vibrator_on_delay'
            },
            paramsKeyMap: {
                TIMEON: 0
            },
            class: 'byrobot_petrone_v2_drive_vibrator',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                return Entry.byrobot_petrone_v2_drive.setVibrator(script, timeOn, 0, timeOn, true, true);
            }
        },
        byrobot_petrone_v2_drive_controller_vibrator_on_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_drive_controller_vibrator_on_reserve'
            },
            paramsKeyMap: {
                TIMEON: 0
            },
            class: 'byrobot_petrone_v2_drive_vibrator',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                return Entry.byrobot_petrone_v2_drive.setVibrator(script, timeOn, 0, timeOn, false, false);
            }
        },
        byrobot_petrone_v2_drive_controller_vibrator_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.02']
                }, {
                    type: 'text',
                    params: ['0.2']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_drive_controller_vibrator_delay'
            },
            paramsKeyMap: {
                TIMEON: 0,
                TIMEOFF: 1,
                TIMERUN: 2
            },
            class: 'byrobot_petrone_v2_drive_vibrator',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                var timeOff = parseInt(script.getNumberValue('TIMEOFF') * 1000);
                var timeRun = parseInt(script.getNumberValue('TIMERUN') * 1000);
                return Entry.byrobot_petrone_v2_drive.setVibrator(script, timeOn, timeOff, timeRun, true, true);
            }
        },
        byrobot_petrone_v2_drive_controller_vibrator_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.02']
                }, {
                    type: 'text',
                    params: ['0.2']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_drive_controller_vibrator_reserve'
            },
            paramsKeyMap: {
                TIMEON: 0,
                TIMEOFF: 1,
                TIMERUN: 2
            },
            class: 'byrobot_petrone_v2_drive_vibrator',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                var timeOff = parseInt(script.getNumberValue('TIMEOFF') * 1000);
                var timeRun = parseInt(script.getNumberValue('TIMERUN') * 1000);
                return Entry.byrobot_petrone_v2_drive.setVibrator(script, timeOn, timeOff, timeRun, false, false);
            }
        },
        byrobot_petrone_v2_drive_drone_irmessage: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'byrobot_petrone_v2_drive_drone_irmessage'
            },
            paramsKeyMap: {
                IRMESSAGE: 0
            },
            class: 'byrobot_petrone_v2_drive_irmessage',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var irdirection = 0;
                var irmessage = script.getNumberValue('IRMESSAGE', script);
                return Entry.byrobot_petrone_v2_drive.sendIrMessage(script, irdirection, irmessage);
            }
        },
        byrobot_petrone_v2_drive_drone_motor_stop: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_drive_drone_motor_stop'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_drive_motor',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_drive.sendStop(script);
            }
        },
        byrobot_petrone_v2_drive_drone_motorsingle: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['1', '0'], ['2', '1'], ['3', '2'], ['4', '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['3000']
                }, null],
                type: 'byrobot_petrone_v2_drive_drone_motorsingle'
            },
            paramsKeyMap: {
                MOTORINDEX: 0,
                MOTORSPEED: 1
            },
            class: 'byrobot_petrone_v2_drive_motor',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var motorIndex = parseInt(script.getField('MOTORINDEX'));
                var motorRotation = motorIndex % 2 + 1;
                var motorSpeed = parseInt(script.getNumberValue('MOTORSPEED', script));

                return Entry.byrobot_petrone_v2_drive.setMotorSingle(script, motorIndex, motorRotation, motorSpeed);
            }
        },
        byrobot_petrone_v2_drive_drone_motorsingle_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, {
                    type: 'text',
                    params: ['3000']
                }, null],
                type: 'byrobot_petrone_v2_drive_drone_motorsingle_input'
            },
            paramsKeyMap: {
                MOTORINDEX: 0,
                MOTORSPEED: 1
            },
            class: 'byrobot_petrone_v2_drive_motor',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var motorIndex = parseInt(script.getNumberValue('MOTORINDEX', script)) - 1;
                var motorRotation = motorIndex % 2 + 1;
                var motorSpeed = parseInt(script.getNumberValue('MOTORSPEED', script));

                return Entry.byrobot_petrone_v2_drive.setMotorSingle(script, motorIndex, motorRotation, motorSpeed);
            }
        },
        byrobot_petrone_v2_drive_drone_motorsingle_rotation: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['1', '0'], ['2', '1']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_motor_rotation_clockwise, '1'], [Lang.Blocks.byrobot_petrone_v2_drone_motor_rotation_counterclockwise, '2']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['3000']
                }, null],
                type: 'byrobot_petrone_v2_drive_drone_motorsingle_rotation'
            },
            paramsKeyMap: {
                MOTORINDEX: 0,
                MOTORROTATION: 1,
                MOTORSPEED: 2
            },
            class: 'byrobot_petrone_v2_drive_motor',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var motorIndex = parseInt(script.getField('MOTORINDEX'));
                var motorRotation = parseInt(script.getField('MOTORROTATION'));
                var motorSpeed = parseInt(script.getNumberValue('MOTORSPEED', script));

                return Entry.byrobot_petrone_v2_drive.setMotorSingle(script, motorIndex, motorRotation, motorSpeed);
            }
        },
        byrobot_petrone_v2_drive_drone_command_mode_vehicle_car: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_vehicle_drive, '32'], [Lang.Blocks.byrobot_petrone_v2_drone_vehicle_drive_fpv, '33']],
                value: '32',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'byrobot_petrone_v2_drive_drone_command_mode_vehicle_car'
            },
            paramsKeyMap: {
                VEHICLE: 0
            },
            class: 'byrobot_petrone_v2_drive_control_drive',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var vehicle = script.getField('VEHICLE');
                return Entry.byrobot_petrone_v2_drive.setModeVehicle(script, vehicle);
            }
        },
        byrobot_petrone_v2_drive_drone_control_car_stop: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_drive_drone_control_car_stop'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_drive_control_drive',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_drive.sendStop(script);
            }
        },
        byrobot_petrone_v2_drive_drone_control_double_one: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_control_double_wheel, 'control_wheel'], [Lang.Blocks.byrobot_petrone_v2_drone_control_double_accel_forward, 'control_accel']],
                value: 'control_accel',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'byrobot_petrone_v2_drive_drone_control_double_one'
            },
            paramsKeyMap: {
                CONTROLTARGET: 0,
                VALUE: 1
            },
            class: 'byrobot_petrone_v2_drive_control_drive',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var controlTarget = script.getField('CONTROLTARGET');
                var value = parseInt(script.getNumberValue('VALUE', script));

                return Entry.byrobot_petrone_v2_drive.sendControlDoubleSingle(script, controlTarget, value, 0, false);
            }
        },
        byrobot_petrone_v2_drive_drone_control_double_one_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_control_double_wheel, 'control_wheel'], [Lang.Blocks.byrobot_petrone_v2_drone_control_double_accel_forward, 'control_accel']],
                value: 'control_accel',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['100']
                }, {
                    type: 'number',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_drive_drone_control_double_one_delay'
            },
            paramsKeyMap: {
                CONTROLTARGET: 0,
                VALUE: 1,
                TIME: 2
            },
            class: 'byrobot_petrone_v2_drive_control_drive',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var controlTarget = script.getField('CONTROLTARGET');
                var value = parseInt(script.getNumberValue('VALUE', script));
                var time = parseInt(script.getNumberValue('TIME', script) * 1000);

                return Entry.byrobot_petrone_v2_drive.sendControlDoubleSingle(script, controlTarget, value, time, true);
            }
        },
        byrobot_petrone_v2_drive_drone_control_double: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'byrobot_petrone_v2_drive_drone_control_double'
            },
            paramsKeyMap: {
                WHEEL: 0,
                ACCEL: 1
            },
            class: 'byrobot_petrone_v2_drive_control_drive',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var wheel = parseInt(script.getNumberValue('WHEEL', script));
                var accel = parseInt(script.getNumberValue('ACCEL', script));

                return Entry.byrobot_petrone_v2_drive.sendControlDouble(script, wheel, accel, 0, false);
            }
        },
        byrobot_petrone_v2_drive_drone_control_double_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_drive_drone_control_double_delay'
            },
            paramsKeyMap: {
                WHEEL: 0,
                ACCEL: 1,
                TIME: 2
            },
            class: 'byrobot_petrone_v2_drive_control_drive',
            isNotFor: ['byrobot_petrone_v2_drive'],
            func: function func(sprite, script) {
                var wheel = parseInt(script.getNumberValue('WHEEL', script));
                var accel = parseInt(script.getNumberValue('ACCEL', script));
                var time = parseInt(script.getNumberValue('TIME', script) * 1000);

                return Entry.byrobot_petrone_v2_drive.sendControlDouble(script, wheel, accel, time, true);
            }
        }
        /* BYROBOT PetroneV2 Drive End */
        //endregion byrobot 바이로봇
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_byrobot_petrone_v2_flight.js":
/*!******************************************************************!*\
  !*** ./src/playground/blocks/block_byrobot_petrone_v2_flight.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/***************************************************************************************
 *
 *  이름 붙이기 규칙(2017.1.16)
 *
 *  1. 변수에 해당하는 이름들은 모두 소문자
 *  2. 이어지는 추가 이름은 '_'를 붙여서 연결
 *
 ***************************************************************************************/

/***************************************************************************************
 *  장치와 연관된 변수 및 함수 정의
 ***************************************************************************************/

Entry.byrobot_petrone_v2_flight = {
    name: 'byrobot_petrone_v2_flight',
    url: 'http://www.byrobot.co.kr/',
    imageName: 'byrobot_petrone_v2_flight.png',
    title: {
        "en": "BYROBOT Petrone V2 flight",
        "ko": "바이로봇 페트론V2 드론"
    },

    // 초기화
    setZero: function setZero() {
        // 초기화
        this.transferBufferClear();

        // 한 번에 명령을 전송하면 hw까지 제대로 전달되지 않는 경우가 있어
        // 명령을 각각 분리하여 전송하게 함(2017.01.03)
        for (var i = 0; i < 1; i++) {
            this.transferCommand(0x30, 0x24, 0); // 드론, command = 0x24 (Stop)
            this.transferVibrator(0, 0, 0, 0);
            this.transferbuzzer(0, 0, 0);
            this.transferLightManual(0x30, 0xff, 0); // LED 초기화(모두 꺼짐)
            this.transferLightManual(0x31, 0xff, 0); // LED 초기화(모두 꺼짐)
            this.transferLightManual(0x30, 0x80, 200); // LED 초기화(눈 빨강)
            this.transferLightManual(0x30, 0x10, 200); // LED 초기화(팔 빨강)
            this.transferMotorSingle(0, 1, 0); // 1번 모터방향 초기화(시계방향)
            this.transferMotorSingle(1, 2, 0); // 2번 모터방향 초기화(반시계방향)
        }
    },

    // Entry 좌측 하단 하드웨어 모니터 화면에 표시하는 속성
    // listPorts와 ports 두 곳 동시에 동일한 속성을 표시할 수는 없음
    monitorTemplate: {
        /* 센서창 가림 현상을 해결하기 위해서 주석 처리함(2017.11.06)
        imgPath: "hw/byrobot_petrone_v2_flight.png",      // 배경 이미지
        width: 256,     // 이미지의 폭
        height: 256,    // 이미지의 높이
        */

        // 모니터 화면 상단에 차례대로 나열하는 값
        listPorts: {
            // 팀 상태 보여주기
            state_modeVehicle: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_state_mode_vehicle,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            state_modeFlight: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_state_mode_flight,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            state_coordinate: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_state_mode_coordinate,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            state_battery: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_state_battery,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_angleRoll: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_attitude_roll,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_anglePitch: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_attitude_pitch,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_angleYaw: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_attitude_yaw,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_accX: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_accel_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_accY: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_accel_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_accZ: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_accel_z,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_gyroRoll: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_gyro_roll,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_gyroPitch: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_gyro_pitch,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imu_gyroYaw: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_gyro_yaw,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            pressure_temperature: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_pressure_temperature,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            pressure_pressure: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_pressure_pressure,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imageflow_positionX: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionX,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            imageflow_positionY: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionY,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            range_bottom: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_range_bottom,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            irmessage_direction: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_irmessage_direction,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            irmessage_irdata: {
                name: Lang.Blocks.byrobot_petrone_v2_drone_irmessage,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_x: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_y: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_direction: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_direction,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_left_event: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_x: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_y: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_direction: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_direction,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            joystick_right_event: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            button_button: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_button_button,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            button_event: {
                name: Lang.Blocks.byrobot_petrone_v2_controller_button_event,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            entryhw_countTransferReserved: {
                name: Lang.Blocks.byrobot_petrone_v2_entryhw_count_transfer_reserved,
                type: 'output',
                pos: { x: 0, y: 0 }
            }
        },

        // 모니터 화면 지정 위치와 선으로 연결하여 표시하는 값
        ports: {},

        mode: 'both' // 표시 모드
    },

    // functions

    // 시간 지연
    checkFinish: function checkFinish(script, ms) {
        if (!script.isStart) {
            script.isStart = true;
            script.timeFlag = 1;

            var fps = Entry.FPS || 60;
            var timeValue = 60 / fps * ms;

            setTimeout(function () {
                script.timeFlag = 0;
            }, timeValue);

            return 'Start';
        } else if (script.timeFlag == 1) {
            return 'Running';
        } else {
            delete script.timeFlag;
            delete script.isStart;
            Entry.engine.isContinue = false;
            return 'Finish';
        }
    },

    transferBufferClear: function transferBufferClear() {
        Entry.hw.setDigitalPortValue('buffer_clear', 0);

        Entry.hw.update();

        delete Entry.hw.sendQueue['buffer_clear'];
    },

    // 데이터 전송
    transferLightManual: function transferLightManual(target, flags, brightness) {
        // 범위 조정
        target = Math.max(target, 0);
        target = Math.min(target, 255);
        flags = Math.max(flags, 0);
        flags = Math.min(flags, 255);
        brightness = Math.max(brightness, 0);
        brightness = Math.min(brightness, 255);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('light_manual_flags', flags);
        Entry.hw.setDigitalPortValue('light_manual_brightness', brightness);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['light_manual_flags'];
        delete Entry.hw.sendQueue['light_manual_brightness'];
    },

    transferLightMode: function transferLightMode(target, mode, interval) {
        // 범위 조정
        target = Math.max(target, 0);
        target = Math.min(target, 255);
        mode = Math.max(mode, 0);
        mode = Math.min(mode, 255);
        interval = Math.max(interval, 0);
        interval = Math.min(interval, 65535);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('light_mode_mode', mode);
        Entry.hw.setDigitalPortValue('light_mode_interval', interval);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['light_mode_mode'];
        delete Entry.hw.sendQueue['light_mode_interval'];
    },

    transferLightColorRgb: function transferLightColorRgb(target, mode, red, green, blue) {
        // 범위 조정
        target = Math.max(target, 0);
        target = Math.min(target, 255);
        mode = Math.max(mode, 0);
        mode = Math.min(mode, 255);
        red = Math.max(red, 0);
        red = Math.min(red, 255);
        green = Math.max(green, 0);
        green = Math.min(green, 255);
        blue = Math.max(blue, 0);
        blue = Math.min(blue, 255);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('light_mode_mode', mode);
        Entry.hw.setDigitalPortValue('light_color_r', red);
        Entry.hw.setDigitalPortValue('light_color_g', green);
        Entry.hw.setDigitalPortValue('light_color_b', blue);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['light_mode_mode'];
        delete Entry.hw.sendQueue['light_color_r'];
        delete Entry.hw.sendQueue['light_color_g'];
        delete Entry.hw.sendQueue['light_color_b'];
    },

    transferDisplayClear: function transferDisplayClear(target, pixel, clearAll, x, y, width, height) {
        if (clearAll) {
            // 전송
            Entry.hw.setDigitalPortValue('target', target);
            Entry.hw.setDigitalPortValue('display_clearall_pixel', pixel);

            Entry.hw.update();

            delete Entry.hw.sendQueue['target'];
            delete Entry.hw.sendQueue['display_clearall_pixel'];
        } else {
            // 범위 조정
            x = Math.max(x, 0);
            x = Math.min(x, 128);
            y = Math.max(y, 0);
            y = Math.min(y, 64);
            width = Math.max(width, 0);
            width = Math.min(width, 128);
            height = Math.max(height, 0);
            height = Math.min(height, 64);

            // 전송
            Entry.hw.setDigitalPortValue('target', target);
            Entry.hw.setDigitalPortValue('display_clear_x', x);
            Entry.hw.setDigitalPortValue('display_clear_y', y);
            Entry.hw.setDigitalPortValue('display_clear_width', width);
            Entry.hw.setDigitalPortValue('display_clear_height', height);
            Entry.hw.setDigitalPortValue('display_clear_pixel', pixel);

            Entry.hw.update();

            delete Entry.hw.sendQueue['target'];
            delete Entry.hw.sendQueue['display_clear_x'];
            delete Entry.hw.sendQueue['display_clear_y'];
            delete Entry.hw.sendQueue['display_clear_width'];
            delete Entry.hw.sendQueue['display_clear_height'];
            delete Entry.hw.sendQueue['display_clear_pixel'];
        }
    },

    transferDisplayInvert: function transferDisplayInvert(target, x, y, width, height) {
        // 범위 조정
        x = Math.max(x, 0);
        x = Math.min(x, 128);
        y = Math.max(y, 0);
        y = Math.min(y, 64);
        width = Math.max(width, 0);
        width = Math.min(width, 128);
        height = Math.max(height, 0);
        height = Math.min(height, 64);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_invert_x', x);
        Entry.hw.setDigitalPortValue('display_invert_y', y);
        Entry.hw.setDigitalPortValue('display_invert_width', width);
        Entry.hw.setDigitalPortValue('display_invert_height', height);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_invert_x'];
        delete Entry.hw.sendQueue['display_invert_y'];
        delete Entry.hw.sendQueue['display_invert_width'];
        delete Entry.hw.sendQueue['display_invert_height'];
    },

    transferDisplayDrawPoint: function transferDisplayDrawPoint(target, x, y, pixel) {
        // 범위 조정
        x = Math.max(x, 0);
        x = Math.min(x, 128);
        y = Math.max(y, 0);
        y = Math.min(y, 64);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_point_x', x);
        Entry.hw.setDigitalPortValue('display_draw_point_y', y);
        Entry.hw.setDigitalPortValue('display_draw_point_pixel', pixel);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_point_x'];
        delete Entry.hw.sendQueue['display_draw_point_y'];
        delete Entry.hw.sendQueue['display_draw_point_pixel'];
    },

    transferDisplayDrawLine: function transferDisplayDrawLine(target, x1, y1, x2, y2, pixel, line) {
        // 범위 조정
        x1 = Math.max(x1, 0);
        x1 = Math.min(x1, 128);
        y1 = Math.max(y1, 0);
        y1 = Math.min(y1, 64);
        x2 = Math.max(x2, 0);
        x2 = Math.min(x2, 128);
        y2 = Math.max(y2, 0);
        y2 = Math.min(y2, 64);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_line_x1', x1);
        Entry.hw.setDigitalPortValue('display_draw_line_y1', y1);
        Entry.hw.setDigitalPortValue('display_draw_line_x2', x2);
        Entry.hw.setDigitalPortValue('display_draw_line_y2', y2);
        Entry.hw.setDigitalPortValue('display_draw_line_pixel', pixel);
        Entry.hw.setDigitalPortValue('display_draw_line_line', line);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_line_x1'];
        delete Entry.hw.sendQueue['display_draw_line_y1'];
        delete Entry.hw.sendQueue['display_draw_line_x2'];
        delete Entry.hw.sendQueue['display_draw_line_y2'];
        delete Entry.hw.sendQueue['display_draw_line_pixel'];
        delete Entry.hw.sendQueue['display_draw_line_line'];
    },

    transferDisplayDrawRect: function transferDisplayDrawRect(target, x, y, width, height, pixel, flagFill, line) {
        // 범위 조정
        x = Math.max(x, 0);
        x = Math.min(x, 128);
        y = Math.max(y, 0);
        y = Math.min(y, 64);
        width = Math.max(width, 0);
        width = Math.min(width, 128);
        height = Math.max(height, 0);
        height = Math.min(height, 64);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_rect_x', x);
        Entry.hw.setDigitalPortValue('display_draw_rect_y', y);
        Entry.hw.setDigitalPortValue('display_draw_rect_width', width);
        Entry.hw.setDigitalPortValue('display_draw_rect_height', height);
        Entry.hw.setDigitalPortValue('display_draw_rect_pixel', pixel);
        Entry.hw.setDigitalPortValue('display_draw_rect_flagfill', flagFill);
        Entry.hw.setDigitalPortValue('display_draw_rect_line', line);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_rect_x'];
        delete Entry.hw.sendQueue['display_draw_rect_y'];
        delete Entry.hw.sendQueue['display_draw_rect_width'];
        delete Entry.hw.sendQueue['display_draw_rect_height'];
        delete Entry.hw.sendQueue['display_draw_rect_pixel'];
        delete Entry.hw.sendQueue['display_draw_rect_flagfill'];
        delete Entry.hw.sendQueue['display_draw_rect_line'];
    },

    transferDisplayDrawCircle: function transferDisplayDrawCircle(target, x, y, radius, pixel, flagFill) {
        // 범위 조정
        x = Math.max(x, -50);
        x = Math.min(x, 178);
        y = Math.max(y, -50);
        y = Math.min(y, 114);
        radius = Math.max(radius, 1);
        radius = Math.min(radius, 200);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_circle_x', x);
        Entry.hw.setDigitalPortValue('display_draw_circle_y', y);
        Entry.hw.setDigitalPortValue('display_draw_circle_radius', radius);
        Entry.hw.setDigitalPortValue('display_draw_circle_pixel', pixel);
        Entry.hw.setDigitalPortValue('display_draw_circle_flagfill', flagFill);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_circle_x'];
        delete Entry.hw.sendQueue['display_draw_circle_y'];
        delete Entry.hw.sendQueue['display_draw_circle_radius'];
        delete Entry.hw.sendQueue['display_draw_circle_pixel'];
        delete Entry.hw.sendQueue['display_draw_circle_flagfill'];
    },

    transferDisplayDrawString: function transferDisplayDrawString(target, x, y, font, pixel, string) {
        // 범위 조정
        x = Math.max(x, 0);
        x = Math.min(x, 120);
        y = Math.max(y, 0);
        y = Math.min(y, 60);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_string_x', x);
        Entry.hw.setDigitalPortValue('display_draw_string_y', y);
        Entry.hw.setDigitalPortValue('display_draw_string_font', font);
        Entry.hw.setDigitalPortValue('display_draw_string_pixel', pixel);
        Entry.hw.setDigitalPortValue('display_draw_string_string', string);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_string_x'];
        delete Entry.hw.sendQueue['display_draw_string_y'];
        delete Entry.hw.sendQueue['display_draw_string_font'];
        delete Entry.hw.sendQueue['display_draw_string_pixel'];
        delete Entry.hw.sendQueue['display_draw_string_string'];
    },

    transferDisplayDrawStringAlign: function transferDisplayDrawStringAlign(target, xStart, xEnd, y, align, font, pixel, string) {
        // 범위 조정
        xStart = Math.max(xStart, 0);
        xStart = Math.min(xStart, 124);
        xEnd = Math.max(xEnd, 4);
        xEnd = Math.min(xEnd, 128);
        y = Math.max(y, 0);
        y = Math.min(y, 60);

        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('display_draw_string_align_x_start', xStart);
        Entry.hw.setDigitalPortValue('display_draw_string_align_x_end', xEnd);
        Entry.hw.setDigitalPortValue('display_draw_string_align_y', y);
        Entry.hw.setDigitalPortValue('display_draw_string_align_align', align);
        Entry.hw.setDigitalPortValue('display_draw_string_align_font', font);
        Entry.hw.setDigitalPortValue('display_draw_string_align_pixel', pixel);
        Entry.hw.setDigitalPortValue('display_draw_string_align_string', string);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['display_draw_string_align_x_start'];
        delete Entry.hw.sendQueue['display_draw_string_align_x_end'];
        delete Entry.hw.sendQueue['display_draw_string_align_y'];
        delete Entry.hw.sendQueue['display_draw_string_align_align'];
        delete Entry.hw.sendQueue['display_draw_string_align_font'];
        delete Entry.hw.sendQueue['display_draw_string_align_pixel'];
        delete Entry.hw.sendQueue['display_draw_string_align_string'];
    },

    transferbuzzer: function transferbuzzer(mode, value, time) {
        // 전송
        Entry.hw.setDigitalPortValue('target', 0x31);
        Entry.hw.setDigitalPortValue('buzzer_mode', mode);
        Entry.hw.setDigitalPortValue('buzzer_value', value);
        Entry.hw.setDigitalPortValue('buzzer_time', time);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['buzzer_mode'];
        delete Entry.hw.sendQueue['buzzer_value'];
        delete Entry.hw.sendQueue['buzzer_time'];
    },

    transferVibrator: function transferVibrator(mode, timeOn, timeOff, timeRun) {
        // 범위 조정
        timeOn = Math.max(timeOn, 1);
        timeOn = Math.min(timeOn, 60000);
        timeOff = Math.max(timeOff, 1);
        timeOff = Math.min(timeOff, 60000);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x31);
        Entry.hw.setDigitalPortValue('vibrator_mode', mode);
        Entry.hw.setDigitalPortValue('vibrator_on', timeOn);
        Entry.hw.setDigitalPortValue('vibrator_off', timeOff);
        Entry.hw.setDigitalPortValue('vibrator_total', timeRun);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['vibrator_mode'];
        delete Entry.hw.sendQueue['vibrator_on'];
        delete Entry.hw.sendQueue['vibrator_off'];
        delete Entry.hw.sendQueue['vibrator_total'];
    },

    transferIrMessage: function transferIrMessage(irdirection, irmessage) {
        // 범위 조정
        irmessage = Math.max(irmessage, -2147483647);
        irmessage = Math.min(irmessage, 2147483647);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x30);
        Entry.hw.setDigitalPortValue('irmessage_direction', irdirection);
        Entry.hw.setDigitalPortValue('irmessage_irdata', irmessage);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['irmessage_direction'];
        delete Entry.hw.sendQueue['irmessage_irdata'];
    },

    transferMotorSingle: function transferMotorSingle(motorIndex, motorRotation, motorSpeed) {
        // 범위 조정
        motorSpeed = Math.max(motorSpeed, 0);
        motorSpeed = Math.min(motorSpeed, 4096);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x30);
        Entry.hw.setDigitalPortValue('motorsingle_target', motorIndex);
        Entry.hw.setDigitalPortValue('motorsingle_rotation', motorRotation);
        Entry.hw.setDigitalPortValue('motorsingle_value', motorSpeed);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['motorsingle_target'];
        delete Entry.hw.sendQueue['motorsingle_rotation'];
        delete Entry.hw.sendQueue['motorsingle_value'];
    },

    transferCommand: function transferCommand(target, command, option) {
        // 전송
        Entry.hw.setDigitalPortValue('target', target);
        Entry.hw.setDigitalPortValue('command_command', command);
        Entry.hw.setDigitalPortValue('command_option', option);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['command_command'];
        delete Entry.hw.sendQueue['command_option'];
    },

    transferControlDouble: function transferControlDouble(wheel, accel) {
        // 범위 조정
        wheel = Math.max(wheel, -100);
        wheel = Math.min(wheel, 100);
        accel = Math.max(accel, 0); // -100 아닌가?
        accel = Math.min(accel, 100);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x30);
        Entry.hw.setDigitalPortValue('control_wheel', wheel);
        Entry.hw.setDigitalPortValue('control_accel', accel);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['control_wheel'];
        delete Entry.hw.sendQueue['control_accel'];
    },

    transferControlQuad: function transferControlQuad(roll, pitch, yaw, throttle) {
        // 범위 조정
        roll = Math.max(roll, -100);
        roll = Math.min(roll, 100);
        pitch = Math.max(pitch, -100);
        pitch = Math.min(pitch, 100);
        yaw = Math.max(yaw, -100);
        yaw = Math.min(yaw, 100);
        throttle = Math.max(throttle, -100);
        throttle = Math.min(throttle, 100);

        // 전송
        Entry.hw.setDigitalPortValue('target', 0x30);
        Entry.hw.setDigitalPortValue('control_roll', roll);
        Entry.hw.setDigitalPortValue('control_pitch', pitch);
        Entry.hw.setDigitalPortValue('control_yaw', yaw);
        Entry.hw.setDigitalPortValue('control_throttle', throttle);

        Entry.hw.update();

        delete Entry.hw.sendQueue['target'];
        delete Entry.hw.sendQueue['control_roll'];
        delete Entry.hw.sendQueue['control_pitch'];
        delete Entry.hw.sendQueue['control_yaw'];
        delete Entry.hw.sendQueue['control_throttle'];
    },

    // functions for block

    // 데이터 읽기
    getData: function getData(script, device) {
        return Entry.hw.portData[device];
    },

    // LED 수동 설정
    setLightManual: function setLightManual(script, target, flags, brightness) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferLightManual(target, flags, brightness);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // LED 수동 설정 - RGB 값 직접 지정
    setLightColorRgb: function setLightColorRgb(script, target, mode, red, green, blue) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferLightColorRgb(target, mode, red, green, blue);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면 전체 지우기, 선택 영역 지우기
    setDisplayClear: function setDisplayClear(script, target, pixel, clearAll, x, y, width, height) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayClear(target, pixel, clearAll, x, y, width, height);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 선택 영역 반전
    setDisplayInvert: function setDisplayInvert(script, target, x, y, width, height) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayInvert(target, x, y, width, height);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 점 찍기
    setDisplayDrawPoint: function setDisplayDrawPoint(script, target, x, y, pixel) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawPoint(target, x, y, pixel);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 선 그리기
    setDisplayDrawLine: function setDisplayDrawLine(script, target, x1, y1, x2, y2, pixel, line) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawLine(target, x1, y1, x2, y2, pixel, line);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 사각형 그리기
    setDisplayDrawRect: function setDisplayDrawRect(script, target, x, y, width, height, pixel, flagFill, line) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawRect(target, x, y, width, height, pixel, flagFill, line);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 원 그리기
    setDisplayDrawCircle: function setDisplayDrawCircle(script, target, x, y, radius, pixel, flagFill) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawCircle(target, x, y, radius, pixel, flagFill);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 문자열 쓰기
    setDisplayDrawString: function setDisplayDrawString(script, target, x, y, font, pixel, string) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawString(target, x, y, font, pixel, string);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // OLED - 화면에 문자열 정렬하여 그리기
    setDisplayDrawStringAlign: function setDisplayDrawStringAlign(script, target, xStart, xEnd, y, align, font, pixel, string) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferDisplayDrawStringAlign(target, xStart, xEnd, y, align, font, pixel, string);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 버저 설정(함수 호출 시 시간은 모두 ms 단위 사용)
    /*  
        MuteInstantally     = 1,    // 묵음 즉시 적용
        MuteContinually     = 2,    // 묵음 예약
        
        ScaleInstantally    = 3,    // 음계 즉시 적용
        ScaleContinually    = 4,    // 음계 예약
        
        HzInstantally       = 5,    // 주파수 즉시 적용
        HzContinually       = 6,    // 주파수 예약
     */
    // 정지
    setBuzzerStop: function setBuzzerStop(script) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferbuzzer(0, 0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 묵음
    setBuzzerMute: function setBuzzerMute(script, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 2; // 묵음 연속
                    if (flagInstantly) mode = 1; // 묵음 즉시

                    this.transferbuzzer(mode, 0xee, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setBuzzerScale: function setBuzzerScale(script, octave, scale, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 4; // Scale 연속
                    if (flagInstantly) mode = 3; // Scale 즉시

                    var scalecalc = octave * 12 + scale;

                    this.transferbuzzer(mode, scalecalc, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setBuzzerHz: function setBuzzerHz(script, hz, time, flagDelay, flagInstantly) {
        time = Math.max(time, 0);
        time = Math.min(time, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 6; // Hz 연속
                    if (flagInstantly) mode = 5; // Hz 즉시

                    // 범위 조정
                    hz = Math.max(hz, 1);
                    hz = Math.min(hz, 63999);

                    this.transferbuzzer(mode, hz, time);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    // 진동 제어
    /*
        Stop            = 0,    // 정지
        Instantally     = 1,    // 즉시 적용
        Continually     = 2,    // 예약
     */
    setVibratorStop: function setVibratorStop(script) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferVibrator(0, 0, 0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setVibrator: function setVibrator(script, timeOn, timeOff, timeRun, flagDelay, flagInstantly) {
        timeRun = Math.max(timeRun, 0);
        timeRun = Math.min(timeRun, 60000);

        var timeDelay = 40;
        if (flagDelay) timeDelay = timeRun;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    var mode = 2; // 예약
                    if (flagInstantly) mode = 1; // 즉시

                    this.transferVibrator(mode, timeOn, timeOff, timeRun);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendIrMessage: function sendIrMessage(script, irdirection, irmessage) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferIrMessage(irdirection, irmessage);
                    // Light Event (transferLightEvent 만들어야 할 듯)
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendStop: function sendStop(script) {
        return this.sendCommand(script, 0x30, 0x24, 0);
    },

    sendCommand: function sendCommand(script, target, command, option) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferCommand(target, command, option);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setMotorSingle: function setMotorSingle(script, motorIndex, motorRotation, motorSpeed) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferMotorSingle(motorIndex, motorRotation, motorSpeed);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },
    /*
        None = 0,           ///< 없음
        
        Flight = 0x10,      ///< 비행(가드 포함)
        FlightNoGuard,      ///< 비행(가드 없음)
        FlightFPV,          ///< 비행(FPV)
        
        Drive = 0x20,       ///< 주행
        DriveFPV,           ///< 주행(FPV)
        
        Test = 0x30,        ///< 테스트
     */
    setModeVehicle: function setModeVehicle(script, modeVehicle) {
        switch (this.checkFinish(script, 40)) {
            case 'Start':
                {
                    this.transferCommand(0x30, 0x10, modeVehicle);

                    this.transferControlQuad(0, 0, 0, 0);
                    this.transferControlDouble(0, 0);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    setEventFlight: function setEventFlight(script, eventFlight, time) {
        switch (this.checkFinish(script, time)) {
            case 'Start':
                {
                    this.transferControlQuad(0, 0, 0, 0); // 기존 입력되었던 조종기 방향 초기화 (수직으로 이륙, 착륙 하도록)
                    this.transferCommand(0x30, 0x22, eventFlight); // 0x22 : CommandType::FlightEvent
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendControlQuadSingle: function sendControlQuadSingle(script, controlTarget, value, time, flagDelay) {
        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    // 범위 조정
                    value = Math.max(value, -100);
                    value = Math.min(value, 100);

                    // 전송
                    Entry.hw.setDigitalPortValue('target', 0x30);
                    Entry.hw.setDigitalPortValue(controlTarget, value);

                    Entry.hw.update();

                    delete Entry.hw.sendQueue['target'];
                    delete Entry.hw.sendQueue[controlTarget];
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                if (flagDelay) {
                    // 전송
                    Entry.hw.setDigitalPortValue('target', 0x30);
                    Entry.hw.setDigitalPortValue(controlTarget, 0);

                    Entry.hw.update();

                    delete Entry.hw.sendQueue['target'];
                    delete Entry.hw.sendQueue[controlTarget];
                }
                return script.callReturn();

            default:
                return script.callReturn();
        }
    },

    sendControlQuad: function sendControlQuad(script, roll, pitch, yaw, throttle, time, flagDelay) {
        var timeDelay = 40;
        if (flagDelay) timeDelay = time;

        switch (this.checkFinish(script, timeDelay)) {
            case 'Start':
                {
                    this.transferControlQuad(roll, pitch, yaw, throttle);
                }
                return script;

            case 'Running':
                return script;

            case 'Finish':
                if (flagDelay) {
                    this.transferControlQuad(0, 0, 0, 0);
                }
                return script.callReturn();

            default:
                return script.callReturn();
        }
    }
};

Entry.byrobot_petrone_v2_flight.getBlocks = function () {
    return {
        //region byrobot 바이로봇
        /* BYROBOT PetroneV2 Flight Start */
        byrobot_petrone_v2_flight_drone_value_attitude: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_attitude_roll, 'imu_angleRoll'], [Lang.Blocks.byrobot_petrone_v2_drone_attitude_pitch, 'imu_anglePitch'], [Lang.Blocks.byrobot_petrone_v2_drone_attitude_yaw, 'imu_angleYaw']],
                value: 'imu_angleRoll', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_drone_value_attitude' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_petrone_v2_flight_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_petrone_v2_flight_drone_value_imu: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_accel_x, 'imu_accX'], [Lang.Blocks.byrobot_petrone_v2_drone_accel_y, 'imu_accY'], [Lang.Blocks.byrobot_petrone_v2_drone_accel_z, 'imu_accZ'], [Lang.Blocks.byrobot_petrone_v2_drone_gyro_roll, 'imu_gyroRoll'], [Lang.Blocks.byrobot_petrone_v2_drone_gyro_pitch, 'imu_gyroPitch'], [Lang.Blocks.byrobot_petrone_v2_drone_gyro_yaw, 'imu_gyroYaw']],
                value: 'imu_accX', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_drone_value_imu' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_petrone_v2_flight_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_petrone_v2_flight_drone_value_sensor: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_pressure_temperature, 'pressure_temperature'], [Lang.Blocks.byrobot_petrone_v2_drone_pressure_pressure, 'pressure_pressure'], [Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionX, 'imageflow_positionX'], [Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionY, 'imageflow_positionY'], [Lang.Blocks.byrobot_petrone_v2_drone_range_bottom, 'range_bottom']],
                value: 'pressure_temperature', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_drone_value_sensor' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_petrone_v2_flight_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_petrone_v2_flight_drone_value_etc: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_state_mode_vehicle, 'state_modeVehicle'], [Lang.Blocks.byrobot_petrone_v2_drone_state_mode_flight, 'state_modeFlight'], [Lang.Blocks.byrobot_petrone_v2_drone_state_mode_coordinate, 'state_coordinate'], [Lang.Blocks.byrobot_petrone_v2_drone_state_battery, 'state_battery'], [Lang.Blocks.byrobot_petrone_v2_drone_irmessage, 'irmessage_irdata']],
                value: 'irmessage_irdata', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_drone_value_etc' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_petrone_v2_flight_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_petrone_v2_flight_controller_value_button: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_button_button, 'button_button'], [Lang.Blocks.byrobot_petrone_v2_controller_button_event, 'button_event']],
                value: 'button_button', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_controller_value_button' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_petrone_v2_flight_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_petrone_v2_flight_controller_value_joystick: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_x, 'joystick_left_x'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_y, 'joystick_left_y'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_direction, 'joystick_left_direction'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_event, 'joystick_left_event'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_x, 'joystick_right_x'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_y, 'joystick_right_y'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_direction, 'joystick_right_direction'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_event, 'joystick_right_event']],
                value: 'joystick_left_x', // 초기 선택항목 지정
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_controller_value_joystick' // 언어 파일에서 읽어들일 템플릿. 객체 이름과 동일하게
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'byrobot_petrone_v2_flight_monitor', // 같은 이름인 객체들이 그룹으로 형성됨
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                return Entry.hw.portData[script.getField('DEVICE')];
            }
        },
        byrobot_petrone_v2_flight_controller_if_button_press: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_button_front_left, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_button_front_right, '2'], [Lang.Blocks.byrobot_petrone_v2_controller_button_front_left_right, '3'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up_left, '4'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up_right, '8'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up, '16'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_left, '32'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_right, '64'], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_down, '128'], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_left, '256'], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_right, '512'], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_left_right, '768']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_controller_if_button_press'
            },
            paramsKeyMap: {
                BUTTON: 0
            },
            class: 'byrobot_petrone_v2_flight_boolean_input',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;
                var button = 'button_button'; // paramsKeyMap에 정의된 이름 사용
                var buttonevent = 'button_event'; // paramsKeyMap에 정의된 이름 사용

                if (read[button] == script.getField('BUTTON') && read[buttonevent] == 2) return true;else return false;
            },
            syntax: { js: [], py: [] }
        },
        byrobot_petrone_v2_flight_controller_if_joystick_direction: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_left, 'joystick_left_direction'], [Lang.Blocks.byrobot_petrone_v2_common_right, 'joystick_right_direction']],
                value: 'joystick_left_direction',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left_up, '17'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_up, '18'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right_up, '20'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left, '33'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_center, '34'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right, '36'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left_down, '65'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_down, '66'], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right_down, '68']],
                value: '34',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'byrobot_petrone_v2_flight_controller_if_joystick_direction'
            },
            paramsKeyMap: {
                DEVICE: 0,
                DIRECTION: 1
            },
            class: 'byrobot_petrone_v2_flight_boolean_input',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var read = Entry.hw.portData;

                var device = script.getField('DEVICE'); // paramsKeyMap에 정의된 이름 사용

                if (read[device] == script.getField('DIRECTION')) return true;else return false;
            }
        },
        byrobot_petrone_v2_flight_controller_light_manual_single_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_controller_light_manual_single_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_flight_controller_light',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_flight.setLightManual(script, 0x31, 0xff, 0);
            }
        },
        byrobot_petrone_v2_flight_controller_light_manual_single: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_red, '128'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_green, '64'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_blue, '32'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_yellow, '192'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_magenta, '160'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_cyan, '96'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_white, '255']],
                value: '128',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_on, '220'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_off, '0'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b25, '75'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b50, '125'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b75, '200'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b100, '255']],
                value: '220',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_petrone_v2_flight_controller_light_manual_single'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_petrone_v2_flight_controller_light',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var flags = parseInt(script.getField('FLAGS'));
                var brightness = parseInt(script.getField('BRIGHTNESS'));
                return Entry.byrobot_petrone_v2_flight.setLightManual(script, 0x31, flags, brightness);
            }
        },
        byrobot_petrone_v2_flight_controller_light_manual_single_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0b11100000']
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'byrobot_petrone_v2_flight_controller_light_manual_single_input'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_petrone_v2_flight_controller_light',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var flags = script.getNumberValue('FLAGS');
                var brightness = script.getNumberValue('BRIGHTNESS');
                return Entry.byrobot_petrone_v2_flight.setLightManual(script, 0x31, flags, brightness);
            }
        },
        byrobot_petrone_v2_flight_controller_light_color_rgb_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, '0'], // TeamHold = 0x12
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, '1'], // TeamFlicker = 0x13
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, '2'], // TeamFlickerDouble = 0x14
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, null, null],
                type: 'byrobot_petrone_v2_flight_controller_light_color_rgb_input'
            },
            paramsKeyMap: {
                RED: 0,
                GREEN: 1,
                BLUE: 2,
                ADDITION: 3
            },
            class: 'byrobot_petrone_v2_flight_controller_light',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var mode = 0x12 + parseInt(script.getField('ADDITION'));
                var red = script.getNumberValue('RED');
                var green = script.getNumberValue('GREEN');
                var blue = script.getNumberValue('BLUE');
                return Entry.byrobot_petrone_v2_flight.setLightColorRgb(script, 0x31, mode, red, green, blue);
            }
        },
        byrobot_petrone_v2_flight_controller_light_color_rgb_select: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_color_sunset, 'sunset'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_cottoncandy, 'cottonCandy'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_muscat, 'muscat'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_strawberrymilk, 'strawberryMilk'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_emerald, 'emerald'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_lavender, 'lavender']],
                value: 'sunset',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, '0'], // TeamHold = 0x12
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, '1'], // TeamFlicker = 0x13
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, '2'], // TeamFlickerDouble = 0x14
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_petrone_v2_flight_controller_light_color_rgb_select'
            },
            paramsKeyMap: {
                SELECT: 0,
                ADDITION: 1
            },
            class: 'byrobot_petrone_v2_flight_controller_light',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var mode = 0x12 + parseInt(script.getField('ADDITION'));
                var select = script.getField('SELECT');
                var red = 0;
                var green = 0;
                var blue = 0;

                switch (select) {
                    case 'sunset':
                        red = 255;
                        green = 100;
                        blue = 0;
                        break;
                    case 'cottonCandy':
                        red = 20;
                        green = 250;
                        blue = 150;
                        break;
                    case 'muscat':
                        red = 70;
                        green = 255;
                        blue = 0;
                        break;
                    case 'strawberryMilk':
                        red = 150;
                        green = 60;
                        blue = 20;
                        break;
                    case 'emerald':
                        red = 0;
                        green = 255;
                        blue = 30;
                        break;
                    case 'lavender':
                        red = 80;
                        green = 0;
                        blue = 200;
                        break;
                }

                return Entry.byrobot_petrone_v2_flight.setLightColorRgb(script, 0x31, mode, red, green, blue);
            }
        },
        byrobot_petrone_v2_flight_drone_light_manual_single_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_drone_light_manual_single_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_flight_drone_light',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_flight.setLightManual(script, 0x30, 0xff, 0);
            }
        },
        byrobot_petrone_v2_flight_drone_light_manual_single: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_light_manual_eye_red, '128'], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_eye_green, '64'], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_eye_blue, '32'], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_arm_red, '16'], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_arm_green, '8'], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_arm_blue, '4']],
                value: '128',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_on, '220'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_off, '0'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b25, '75'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b50, '125'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b75, '200'], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b100, '255']],
                value: '220',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_petrone_v2_flight_drone_light_manual_single'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_petrone_v2_flight_drone_light',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var flags = parseInt(script.getField('FLAGS'));
                var brightness = parseInt(script.getField('BRIGHTNESS'));
                return Entry.byrobot_petrone_v2_flight.setLightManual(script, 0x30, flags, brightness);
            }
        },
        byrobot_petrone_v2_flight_drone_light_manual_single_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0b11111100']
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'byrobot_petrone_v2_flight_drone_light_manual_single_input'
            },
            paramsKeyMap: {
                FLAGS: 0,
                BRIGHTNESS: 1
            },
            class: 'byrobot_petrone_v2_flight_drone_light',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var flags = script.getNumberValue('FLAGS');
                var brightness = script.getNumberValue('BRIGHTNESS');
                return Entry.byrobot_petrone_v2_flight.setLightManual(script, 0x30, flags, brightness);
            }
        },
        byrobot_petrone_v2_flight_drone_light_color_rgb_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_light_color_eye, '18'], // EyeHold = 0x12
                [Lang.Blocks.byrobot_petrone_v2_drone_light_color_arm, '66']],
                value: '18',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, '0'], // EyeHold = 0x12,          // ArmHold = 0x42
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, '1'], // EyeFlicker = 0x13,       // ArmFlicker = 0x43
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, '2'], // EyeFlickerDouble = 0x14, // ArmFlickerDouble = 0x44
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, null, null],
                type: 'byrobot_petrone_v2_flight_drone_light_color_rgb_input'
            },
            paramsKeyMap: {
                MODE: 0,
                RED: 1,
                GREEN: 2,
                BLUE: 3,
                ADDITION: 4
            },
            class: 'byrobot_petrone_v2_flight_drone_light',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var mode = parseInt(script.getField('MODE')) + parseInt(script.getField('ADDITION'));
                var red = script.getNumberValue('RED');
                var green = script.getNumberValue('GREEN');
                var blue = script.getNumberValue('BLUE');
                return Entry.byrobot_petrone_v2_flight.setLightColorRgb(script, 0x30, mode, red, green, blue);
            }
        },
        byrobot_petrone_v2_flight_drone_light_color_rgb_select: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_light_color_eye, '18'], // EyeHold = 0x12
                [Lang.Blocks.byrobot_petrone_v2_drone_light_color_arm, '66']],
                value: '18',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_color_sunset, 'sunset'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_cottoncandy, 'cottonCandy'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_muscat, 'muscat'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_strawberrymilk, 'strawberryMilk'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_emerald, 'emerald'], [Lang.Blocks.byrobot_petrone_v2_common_light_color_lavender, 'lavender']],
                value: 'sunset',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, '0'], // EyeHold = 0x12,          // ArmHold = 0x42
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, '1'], // EyeFlicker = 0x13,       // ArmFlicker = 0x43
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, '2'], // EyeFlickerDouble = 0x14, // ArmFlickerDouble = 0x44
                [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null, null],
                type: 'byrobot_petrone_v2_flight_drone_light_color_rgb_select'
            },
            paramsKeyMap: {
                MODE: 0,
                SELECT: 1,
                ADDITION: 2
            },
            class: 'byrobot_petrone_v2_flight_drone_light',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var mode = parseInt(script.getField('MODE')) + parseInt(script.getField('ADDITION'));
                var select = script.getField('SELECT');
                var red = 0;
                var green = 0;
                var blue = 0;

                switch (select) {
                    case 'sunset':
                        red = 255;
                        green = 50;
                        blue = 0;
                        break;
                    case 'cottonCandy':
                        red = 20;
                        green = 250;
                        blue = 150;
                        break;
                    case 'muscat':
                        red = 70;
                        green = 255;
                        blue = 0;
                        break;
                    case 'strawberryMilk':
                        red = 150;
                        green = 60;
                        blue = 20;
                        break;
                    case 'emerald':
                        red = 0;
                        green = 255;
                        blue = 30;
                        break;
                    case 'lavender':
                        red = 80;
                        green = 0;
                        blue = 200;
                        break;
                }

                return Entry.byrobot_petrone_v2_flight.setLightColorRgb(script, 0x30, mode, red, green, blue);
            }
        },
        byrobot_petrone_v2_flight_controller_display_clear_all: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'byrobot_petrone_v2_flight_controller_display_clear_all'
            },
            paramsKeyMap: {
                PIXEL: 0
            },
            class: 'byrobot_petrone_v2_flight_controller_display',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var pixel = parseInt(script.getField('PIXEL'));
                return Entry.byrobot_petrone_v2_flight.setDisplayClear(script, 0x31, pixel, true, 0, 0, 0, 0);
            }
        },
        byrobot_petrone_v2_flight_controller_display_clear: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['64']
                }, {
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['16']
                }, null, null],
                type: 'byrobot_petrone_v2_flight_controller_display_clear'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                WIDTH: 2,
                HEIGHT: 3,
                PIXEL: 4
            },
            class: 'byrobot_petrone_v2_flight_controller_display',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var width = script.getNumberValue('WIDTH');
                var height = script.getNumberValue('HEIGHT');
                var pixel = parseInt(script.getField('PIXEL'));
                return Entry.byrobot_petrone_v2_flight.setDisplayClear(script, 0x31, pixel, false, x, y, width, height);
            }
        },
        byrobot_petrone_v2_flight_controller_display_invert: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['16']
                }, {
                    type: 'text',
                    params: ['64']
                }, {
                    type: 'text',
                    params: ['32']
                }, null, null],
                type: 'byrobot_petrone_v2_flight_controller_display_invert'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                WIDTH: 2,
                HEIGHT: 3
            },
            class: 'byrobot_petrone_v2_flight_controller_display',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var width = script.getNumberValue('WIDTH');
                var height = script.getNumberValue('HEIGHT');
                return Entry.byrobot_petrone_v2_flight.setDisplayInvert(script, 0x31, x, y, width, height);
            }
        },
        byrobot_petrone_v2_flight_controller_display_draw_point: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['64']
                }, {
                    type: 'text',
                    params: ['32']
                }, null, null],
                type: 'byrobot_petrone_v2_flight_controller_display_draw_point'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                PIXEL: 2
            },
            class: 'byrobot_petrone_v2_flight_controller_display',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var pixel = parseInt(script.getField('PIXEL'));
                return Entry.byrobot_petrone_v2_flight.setDisplayDrawPoint(script, 0x31, x, y, pixel);
            }
        },
        byrobot_petrone_v2_flight_controller_display_draw_line: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_line_solid, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dotted, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dashed, '2']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['16']
                }, {
                    type: 'text',
                    params: ['96']
                }, {
                    type: 'text',
                    params: ['48']
                }, null, null, null],
                type: 'byrobot_petrone_v2_flight_controller_display_draw_line'
            },
            paramsKeyMap: {
                X1: 0,
                Y1: 1,
                X2: 2,
                Y2: 3,
                PIXEL: 4,
                LINE: 5
            },
            class: 'byrobot_petrone_v2_flight_controller_display',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var x1 = script.getNumberValue('X1');
                var y1 = script.getNumberValue('Y1');
                var x2 = script.getNumberValue('X2');
                var y2 = script.getNumberValue('Y2');
                var pixel = parseInt(script.getField('PIXEL'));
                var line = parseInt(script.getField('LINE'));
                return Entry.byrobot_petrone_v2_flight.setDisplayDrawLine(script, 0x31, x1, y1, x2, y2, pixel, line);
            }
        },
        byrobot_petrone_v2_flight_controller_display_draw_rect: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_off, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_on, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_line_solid, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dotted, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dashed, '2']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['64']
                }, {
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['16']
                }, null, null, null, null],
                type: 'byrobot_petrone_v2_flight_controller_display_draw_rect'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                WIDTH: 2,
                HEIGHT: 3,
                PIXEL: 4,
                FLAGFILL: 5,
                LINE: 6
            },
            class: 'byrobot_petrone_v2_flight_controller_display',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var width = script.getNumberValue('WIDTH');
                var height = script.getNumberValue('HEIGHT');
                var pixel = parseInt(script.getField('PIXEL'));
                var flagFill = parseInt(script.getField('FLAGFILL'));
                var line = parseInt(script.getField('LINE'));
                return Entry.byrobot_petrone_v2_flight.setDisplayDrawRect(script, 0x31, x, y, width, height, pixel, flagFill, line);
            }
        },
        byrobot_petrone_v2_flight_controller_display_draw_circle: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_off, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_on, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['64']
                }, {
                    type: 'text',
                    params: ['32']
                }, {
                    type: 'text',
                    params: ['24']
                }, null, null, null],
                type: 'byrobot_petrone_v2_flight_controller_display_draw_circle'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                RADIUS: 2,
                PIXEL: 3,
                FLAGFILL: 4
            },
            class: 'byrobot_petrone_v2_flight_controller_display',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var radius = script.getNumberValue('RADIUS');
                var pixel = parseInt(script.getField('PIXEL'));
                var flagFill = parseInt(script.getField('FLAGFILL'));
                return Entry.byrobot_petrone_v2_flight.setDisplayDrawCircle(script, 0x31, x, y, radius, pixel, flagFill);
            }
        },
        byrobot_petrone_v2_flight_controller_display_draw_string: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_font_5x8, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_font_10x16, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['4']
                }, {
                    type: 'text',
                    params: ['24']
                }, null, null, {
                    type: 'text',
                    params: ['{Petrone V2}']
                }, null],
                type: 'byrobot_petrone_v2_flight_controller_display_draw_string'
            },
            paramsKeyMap: {
                X: 0,
                Y: 1,
                FONT: 2,
                PIXEL: 3,
                STRING: 4
            },
            class: 'byrobot_petrone_v2_flight_controller_display',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var x = script.getNumberValue('X');
                var y = script.getNumberValue('Y');
                var font = parseInt(script.getField('FONT'));
                var pixel = parseInt(script.getField('PIXEL'));
                var string = script.getStringValue('STRING');
                return Entry.byrobot_petrone_v2_flight.setDisplayDrawString(script, 0x31, x, y, font, pixel, string);
            }
        },
        byrobot_petrone_v2_flight_controller_display_draw_string_align: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_align_left, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_align_center, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_display_align_right, '2']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_font_5x8, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_font_10x16, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, '1']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['128']
                }, {
                    type: 'text',
                    params: ['24']
                }, null, null, null, {
                    type: 'text',
                    params: ['BYROBOT & U']
                }, null],
                type: 'byrobot_petrone_v2_flight_controller_display_draw_string_align'
            },
            paramsKeyMap: {
                XSTART: 0,
                XEND: 1,
                Y: 2,
                ALIGN: 3,
                FONT: 4,
                PIXEL: 5,
                STRING: 6
            },
            class: 'byrobot_petrone_v2_flight_controller_display',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var xStart = script.getNumberValue('XSTART');
                var xEnd = script.getNumberValue('XEND');
                var y = script.getNumberValue('Y');
                var align = parseInt(script.getField('ALIGN'));
                var font = parseInt(script.getField('FONT'));
                var pixel = parseInt(script.getField('PIXEL'));
                var string = script.getStringValue('STRING');
                return Entry.byrobot_petrone_v2_flight.setDisplayDrawStringAlign(script, 0x31, xStart, xEnd, y, align, font, pixel, string);
            }
        },
        byrobot_petrone_v2_flight_controller_buzzer_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_controller_buzzer_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_flight_buzzer',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_flight.setBuzzerStop(script);
            }
        },
        byrobot_petrone_v2_flight_controller_buzzer_scale: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'byrobot_petrone_v2_flight_controller_buzzer_scale'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1
            },
            class: 'byrobot_petrone_v2_flight_buzzer',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));

                if (scale == -1) return Entry.byrobot_petrone_v2_flight.setBuzzerMute(script, 60000, false, true);else return Entry.byrobot_petrone_v2_flight.setBuzzerScale(script, octave, scale, 60000, false, true);
            }
        },
        byrobot_petrone_v2_flight_controller_buzzer_scale_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_flight_controller_buzzer_scale_delay'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1,
                TIME: 2
            },
            class: 'byrobot_petrone_v2_flight_buzzer',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));
                var time = parseInt(script.getNumberValue('TIME') * 1000);

                if (scale == -1) return Entry.byrobot_petrone_v2_flight.setBuzzerMute(script, time, true, true);else return Entry.byrobot_petrone_v2_flight.setBuzzerScale(script, octave, scale, time, true, true);
            }
        },
        byrobot_petrone_v2_flight_controller_buzzer_scale_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['4', '3'], ['5', '4'], ['6', '5'], ['7', '6'], ['8', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, '-1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, '0'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, '1'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, '2'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, '3'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, '4'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, '5'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, '6'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, '7'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, '8'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, '9'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, '10'], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, '11']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_flight_controller_buzzer_scale_reserve'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                SCALE: 1,
                TIME: 2
            },
            class: 'byrobot_petrone_v2_flight_buzzer',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var octave = parseInt(script.getField('OCTAVE'));
                var scale = parseInt(script.getField('SCALE'));
                var time = parseInt(script.getNumberValue('TIME') * 1000);

                if (scale == -1) return Entry.byrobot_petrone_v2_flight.setBuzzerMute(script, time, false, false);else return Entry.byrobot_petrone_v2_flight.setBuzzerScale(script, octave, scale, time, false, false);
            }
        },
        byrobot_petrone_v2_flight_controller_buzzer_hz: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'byrobot_petrone_v2_flight_controller_buzzer_hz'
            },
            paramsKeyMap: {
                HZ: 0
            },
            class: 'byrobot_petrone_v2_flight_buzzer',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                return Entry.byrobot_petrone_v2_flight.setBuzzerHz(script, hz, 60000, false, true);
            }
        },
        byrobot_petrone_v2_flight_controller_buzzer_hz_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_flight_controller_buzzer_hz_delay'
            },
            paramsKeyMap: {
                HZ: 0,
                TIME: 1
            },
            class: 'byrobot_petrone_v2_flight_buzzer',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                var time = parseInt(script.getNumberValue('TIME') * 1000);
                return Entry.byrobot_petrone_v2_flight.setBuzzerHz(script, hz, time, true, true);
            }
        },
        byrobot_petrone_v2_flight_controller_buzzer_hz_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_flight_controller_buzzer_hz_reserve'
            },
            paramsKeyMap: {
                HZ: 0,
                TIME: 1
            },
            class: 'byrobot_petrone_v2_flight_buzzer',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var hz = parseInt(script.getNumberValue('HZ', script));
                var time = parseInt(script.getNumberValue('TIME') * 1000);
                return Entry.byrobot_petrone_v2_flight.setBuzzerHz(script, hz, time, false, false);
            }
        },
        byrobot_petrone_v2_flight_controller_vibrator_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_controller_vibrator_off'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_flight_vibrator',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_flight.setVibratorStop(script);
            }
        },
        byrobot_petrone_v2_flight_controller_vibrator_on_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_flight_controller_vibrator_on_delay'
            },
            paramsKeyMap: {
                TIMEON: 0
            },
            class: 'byrobot_petrone_v2_flight_vibrator',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                return Entry.byrobot_petrone_v2_flight.setVibrator(script, timeOn, 0, timeOn, true, true);
            }
        },
        byrobot_petrone_v2_flight_controller_vibrator_on_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_flight_controller_vibrator_on_reserve'
            },
            paramsKeyMap: {
                TIMEON: 0
            },
            class: 'byrobot_petrone_v2_flight_vibrator',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                return Entry.byrobot_petrone_v2_flight.setVibrator(script, timeOn, 0, timeOn, false, false);
            }
        },
        byrobot_petrone_v2_flight_controller_vibrator_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.02']
                }, {
                    type: 'text',
                    params: ['0.2']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_flight_controller_vibrator_delay'
            },
            paramsKeyMap: {
                TIMEON: 0,
                TIMEOFF: 1,
                TIMERUN: 2
            },
            class: 'byrobot_petrone_v2_flight_vibrator',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                var timeOff = parseInt(script.getNumberValue('TIMEOFF') * 1000);
                var timeRun = parseInt(script.getNumberValue('TIMERUN') * 1000);
                return Entry.byrobot_petrone_v2_flight.setVibrator(script, timeOn, timeOff, timeRun, true, true);
            }
        },
        byrobot_petrone_v2_flight_controller_vibrator_reserve: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.02']
                }, {
                    type: 'text',
                    params: ['0.2']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_flight_controller_vibrator_reserve'
            },
            paramsKeyMap: {
                TIMEON: 0,
                TIMEOFF: 1,
                TIMERUN: 2
            },
            class: 'byrobot_petrone_v2_flight_vibrator',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var timeOn = parseInt(script.getNumberValue('TIMEON') * 1000);
                var timeOff = parseInt(script.getNumberValue('TIMEOFF') * 1000);
                var timeRun = parseInt(script.getNumberValue('TIMERUN') * 1000);
                return Entry.byrobot_petrone_v2_flight.setVibrator(script, timeOn, timeOff, timeRun, false, false);
            }
        },
        byrobot_petrone_v2_flight_drone_irmessage: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'byrobot_petrone_v2_flight_drone_irmessage'
            },
            paramsKeyMap: {
                IRMESSAGE: 0
            },
            class: 'byrobot_petrone_v2_flight_irmessage',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var irdirection = 0;
                var irmessage = script.getNumberValue('IRMESSAGE', script);
                return Entry.byrobot_petrone_v2_flight.sendIrMessage(script, irdirection, irmessage);
            }
        },
        byrobot_petrone_v2_flight_drone_motor_stop: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_drone_motor_stop'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_flight_motor',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_flight.sendStop(script);
            }
        },
        byrobot_petrone_v2_flight_drone_motorsingle: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['1', '0'], ['2', '1'], ['3', '2'], ['4', '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'byrobot_petrone_v2_flight_drone_motorsingle'
            },
            paramsKeyMap: {
                MOTORINDEX: 0,
                MOTORSPEED: 1
            },
            class: 'byrobot_petrone_v2_flight_motor',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var motorIndex = parseInt(script.getField('MOTORINDEX'));
                var motorRotation = motorIndex % 2 + 1;
                var motorSpeed = parseInt(script.getNumberValue('MOTORSPEED', script));

                return Entry.byrobot_petrone_v2_flight.setMotorSingle(script, motorIndex, motorRotation, motorSpeed);
            }
        },
        byrobot_petrone_v2_flight_drone_motorsingle_input: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, {
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'byrobot_petrone_v2_flight_drone_motorsingle_input'
            },
            paramsKeyMap: {
                MOTORINDEX: 0,
                MOTORSPEED: 1
            },
            class: 'byrobot_petrone_v2_flight_motor',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var motorIndex = parseInt(script.getNumberValue('MOTORINDEX', script)) - 1;
                var motorRotation = motorIndex % 2 + 1;
                var motorSpeed = parseInt(script.getNumberValue('MOTORSPEED', script));

                return Entry.byrobot_petrone_v2_flight.setMotorSingle(script, motorIndex, motorRotation, motorSpeed);
            }
        },
        byrobot_petrone_v2_flight_drone_motorsingle_rotation: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['1', '0'], ['2', '1']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_motor_rotation_clockwise, '1'], [Lang.Blocks.byrobot_petrone_v2_drone_motor_rotation_counterclockwise, '2']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'byrobot_petrone_v2_flight_drone_motorsingle_rotation'
            },
            paramsKeyMap: {
                MOTORINDEX: 0,
                MOTORROTATION: 1,
                MOTORSPEED: 2
            },
            class: 'byrobot_petrone_v2_flight_motor',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var motorIndex = parseInt(script.getField('MOTORINDEX'));
                var motorRotation = parseInt(script.getField('MOTORROTATION'));
                var motorSpeed = parseInt(script.getNumberValue('MOTORSPEED', script));

                return Entry.byrobot_petrone_v2_flight.setMotorSingle(script, motorIndex, motorRotation, motorSpeed);
            }
        },
        byrobot_petrone_v2_flight_drone_command_mode_vehicle_drone: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_vehicle_flight, '16'], [Lang.Blocks.byrobot_petrone_v2_drone_vehicle_flight_noguard, '17'], [Lang.Blocks.byrobot_petrone_v2_drone_vehicle_flight_fpv, '18']],
                value: '16',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'byrobot_petrone_v2_flight_drone_command_mode_vehicle_drone'
            },
            paramsKeyMap: {
                VEHICLE: 0
            },
            class: 'byrobot_petrone_v2_flight_control_flight',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var vehicle = script.getField('VEHICLE');
                return Entry.byrobot_petrone_v2_flight.setModeVehicle(script, vehicle);
            }
        },
        byrobot_petrone_v2_flight_drone_control_drone_takeoff: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_drone_control_drone_takeoff'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_flight_control_flight',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_flight.setEventFlight(script, 0x11, 200); // 0x11 : FlightEvent::TakeOff
            }
        },
        byrobot_petrone_v2_flight_drone_control_drone_landing: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_drone_control_drone_landing'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_flight_control_flight',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_flight.setEventFlight(script, 0x12, 200); // 0x12 : FlightEvent::Landing
            }
        },
        byrobot_petrone_v2_flight_drone_control_drone_stop: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_drone_control_drone_stop'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_flight_control_flight',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_flight.sendStop(script);
            }
        },
        byrobot_petrone_v2_flight_drone_control_coordinate: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_coordinate_world, '1'], [Lang.Blocks.byrobot_petrone_v2_drone_coordinate_local, '2']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'byrobot_petrone_v2_flight_drone_control_coordinate'
            },
            paramsKeyMap: {
                COORDINATE: 0
            },
            class: 'byrobot_petrone_v2_flight_control_flight',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var coordinate = script.getField('COORDINATE');
                return Entry.byrobot_petrone_v2_flight.sendCommand(script, 0x30, 0x20, coordinate);
            }
        },
        byrobot_petrone_v2_flight_drone_control_drone_reset_heading: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'byrobot_petrone_v2_flight_drone_control_drone_reset_heading'
            },
            paramsKeyMap: {},
            class: 'byrobot_petrone_v2_flight_control_flight',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                return Entry.byrobot_petrone_v2_flight.sendCommand(script, 0x30, 0x22, 0xa0); // 0x22 : CommandType::FlightEvent  // 0xA0 : FlightEvent::ResetHeading
            }
        },
        byrobot_petrone_v2_flight_drone_control_quad_one: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_control_quad_roll, 'control_roll'], [Lang.Blocks.byrobot_petrone_v2_drone_control_quad_pitch, 'control_pitch'], [Lang.Blocks.byrobot_petrone_v2_drone_control_quad_yaw, 'control_yaw'], [Lang.Blocks.byrobot_petrone_v2_drone_control_quad_throttle, 'control_throttle']],
                value: 'control_throttle',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'byrobot_petrone_v2_flight_drone_control_quad_one'
            },
            paramsKeyMap: {
                CONTROLTARGET: 0,
                VALUE: 1
            },
            class: 'byrobot_petrone_v2_flight_control_flight',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var controlTarget = script.getField('CONTROLTARGET');
                var value = parseInt(script.getNumberValue('VALUE', script));

                return Entry.byrobot_petrone_v2_flight.sendControlQuadSingle(script, controlTarget, value, 0, false);
            }
        },
        byrobot_petrone_v2_flight_drone_control_quad_one_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.byrobot_petrone_v2_drone_control_quad_roll, 'control_roll'], [Lang.Blocks.byrobot_petrone_v2_drone_control_quad_pitch, 'control_pitch'], [Lang.Blocks.byrobot_petrone_v2_drone_control_quad_yaw, 'control_yaw'], [Lang.Blocks.byrobot_petrone_v2_drone_control_quad_throttle, 'control_throttle']],
                value: 'control_throttle',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['100']
                }, {
                    type: 'number',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_flight_drone_control_quad_one_delay'
            },
            paramsKeyMap: {
                CONTROLTARGET: 0,
                VALUE: 1,
                TIME: 2
            },
            class: 'byrobot_petrone_v2_flight_control_flight',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var controlTarget = script.getField('CONTROLTARGET');
                var value = parseInt(script.getNumberValue('VALUE', script));
                var time = parseInt(script.getNumberValue('TIME', script) * 1000);

                return Entry.byrobot_petrone_v2_flight.sendControlQuadSingle(script, controlTarget, value, time, true);
            }
        },
        byrobot_petrone_v2_flight_drone_control_quad: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'byrobot_petrone_v2_flight_drone_control_quad'
            },
            paramsKeyMap: {
                ROLL: 0,
                PITCH: 1,
                YAW: 2,
                THROTTLE: 3
            },
            class: 'byrobot_petrone_v2_flight_control_flight',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var roll = parseInt(script.getNumberValue('ROLL', script));
                var pitch = parseInt(script.getNumberValue('PITCH', script));
                var yaw = parseInt(script.getNumberValue('YAW', script));
                var throttle = parseInt(script.getNumberValue('THROTTLE', script));

                return Entry.byrobot_petrone_v2_flight.sendControlQuad(script, roll, pitch, yaw, throttle, 0, false);
            }
        },
        byrobot_petrone_v2_flight_drone_control_quad_delay: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1']
                }, null],
                type: 'byrobot_petrone_v2_flight_drone_control_quad_delay'
            },
            paramsKeyMap: {
                ROLL: 0,
                PITCH: 1,
                YAW: 2,
                THROTTLE: 3,
                TIME: 4
            },
            class: 'byrobot_petrone_v2_flight_control_flight',
            isNotFor: ['byrobot_petrone_v2_flight'],
            func: function func(sprite, script) {
                var roll = parseInt(script.getNumberValue('ROLL', script));
                var pitch = parseInt(script.getNumberValue('PITCH', script));
                var yaw = parseInt(script.getNumberValue('YAW', script));
                var throttle = parseInt(script.getNumberValue('THROTTLE', script));
                var time = parseInt(script.getNumberValue('TIME', script) * 1000);

                return Entry.byrobot_petrone_v2_flight.sendControlQuad(script, roll, pitch, yaw, throttle, time, true);
            }
        }
        /* BYROBOT PetroneV2 Flight End */
        //endregion byrobot 바이로봇
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_chocopi.js":
/*!************************************************!*\
  !*** ./src/playground/blocks/block_chocopi.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Chocopi = {
    name: 'chocopi',
    url: 'http://chocopi.org/entry/',
    imageName: 'chocopi.png',
    title: {
        "ko": "초코파이보드",
        "en": "ChocoPi"
    },
    p: {},
    ev: {},
    blocks: [],
    setZero: function setZero() {},
    getport: function getport(id, port) {
        if (!this.blocks) return -1;
        if (this.blocks[port].id == id) return port;
        for (var p in this.blocks) {
            if (this.blocks[p].id == id) return p;
        }return -1;
    },
    connected: false,
    portlist: [[Lang.Blocks.chocopi_port + '1', 0], [Lang.Blocks.chocopi_port + '2', 1], [Lang.Blocks.chocopi_port + '3', 2], [Lang.Blocks.chocopi_port + '4', 3], [Lang.Blocks.chocopi_port + '5', 4], [Lang.Blocks.chocopi_port + '6', 5], [Lang.Blocks.chocopi_port + '7', 6], [Lang.Blocks.chocopi_port + '8', 7], ['BLE1', 8], ['BLE2', 9], ['BLE3', 10], ['BLE4', 11], ['BLE5', 12], ['BLE6', 13], ['BLE7', 14], ['BLE8', 15]],
    dataHandler: function dataHandler(data) {
        if (!this.connected) {
            this.connected = true;
            Entry.hw.sendQueue.init = true;
            Entry.hw.update();
            delete Entry.hw.sendQueue.init;
            Entry.hw.sendQueue.data = {};
        }
        if (data['d']) {
            for (var i in data['d']) {
                this.p[i] = data['d'][i];
            }
        }
        if (data['ev']) {
            for (var i in data['ev']) {
                this.ev[i] = data['ev'][i];
                Entry.engine.fireEvent(this.blocks[i].name + '14');
            }
        }
        if (data['bl']) {
            this.blocks = data['bl'];
        }
    }
};

Entry.Chocopi.getBlocks = function () {
    return {
        //region chocopi 초코파이
        chocopi_sensor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_port + '1', 0], [Lang.Blocks.chocopi_port + '2', 1], [Lang.Blocks.chocopi_port + '3', 2], [Lang.Blocks.chocopi_port + '4', 3], [Lang.Blocks.chocopi_port + '5', 4], [Lang.Blocks.chocopi_port + '6', 5], [Lang.Blocks.chocopi_port + '7', 6], [Lang.Blocks.chocopi_port + '8', 7], ['BLE1', 8], ['BLE2', 9], ['BLE3', 10], ['BLE4', 11], ['BLE5', 12], ['BLE6', 13], ['BLE7', 14], ['BLE8', 15]],
                value: 0
            }, {
                type: 'Dropdown',
                options: [[Lang.Hw.temp, 'temp'], [Lang.Hw.humidity, 'humi'], [Lang.Hw.light, 'light'], [Lang.Hw.analog + '1', '0'], [Lang.Hw.analog + '2', '1'], [Lang.Hw.analog + '3', '2']],
                value: 'temp',
                fontSize: 11
            }],
            def: { params: [], type: 'chocopi_sensor' },
            paramsKeyMap: { port: 0, sensor: 1 },
            class: 'chocopi_sensor',
            isNotFor: ['chocopi'],
            func: function func(sprite, script) {
                var port = Entry.Chocopi.getport(8, script.getField('port'));
                var name = script.getField('sensor');
                if (port == -1) return 0;
                return Entry.Chocopi.p[port][name];
            },
            syntax: { js: [], py: ['Chocopi.sensor(%1, %2)'] }
        },
        chocopi_touch_event: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_event',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/start_icon_hardware.png',
                size: 17,
                position: { x: 0, y: -2 }
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_port + '1', 0], [Lang.Blocks.chocopi_port + '2', 1], [Lang.Blocks.chocopi_port + '3', 2], [Lang.Blocks.chocopi_port + '4', 3], [Lang.Blocks.chocopi_port + '5', 4], [Lang.Blocks.chocopi_port + '6', 5], [Lang.Blocks.chocopi_port + '7', 6], [Lang.Blocks.chocopi_port + '8', 7], ['BLE1', 8], ['BLE2', 9], ['BLE3', 10], ['BLE4', 11], ['BLE5', 12], ['BLE6', 13], ['BLE7', 14], ['BLE8', 15]],
                value: 0
            }, {
                type: 'Dropdown',
                options: [[1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [8, 7], [9, 8], [10, 9], [11, 10], [12, 11]],
                value: 0,
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_touch_event_touch, 1], [Lang.Blocks.chocopi_touch_event_untouch, 0]],
                value: 1,
                fontSize: 11
            }],
            def: { params: [], type: 'chocopi_touch_event' },
            paramsKeyMap: { port: 1, id: 2, status: 3 },
            class: 'chocopi_touch',
            isNotFor: ['chocopi'],
            event: 'touch14',
            func: function func(sprite, script) {
                var port = Entry.Chocopi.getport(9, script.getField('port'));
                if (port == -1) return this.die();
                var id = script.getField('id');
                var status = script.getField('status');
                var ev = Entry.Chocopi.ev[port];
                if ((ev.id >> id & 1) != 1 || (Entry.Chocopi.p[port].ts >> id & 1) != status) {
                    return this.die();
                }
                return script.callReturn();
            },
            syntax: { js: [], py: ['def on_chocopi_touch(%2, %3, %4 ):'] }
        },
        chocopi_touch_status: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_port + '1', 0], [Lang.Blocks.chocopi_port + '2', 1], [Lang.Blocks.chocopi_port + '3', 2], [Lang.Blocks.chocopi_port + '4', 3], [Lang.Blocks.chocopi_port + '5', 4], [Lang.Blocks.chocopi_port + '6', 5], [Lang.Blocks.chocopi_port + '7', 6], [Lang.Blocks.chocopi_port + '8', 7], ['BLE1', 8], ['BLE2', 9], ['BLE3', 10], ['BLE4', 11], ['BLE5', 12], ['BLE6', 13], ['BLE7', 14], ['BLE8', 15]],
                value: 0
            }, {
                type: 'Dropdown',
                options: [[1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [8, 7], [9, 8], [10, 9], [11, 10], [12, 11]],
                value: 0,
                fontSize: 11
            }],
            def: { params: [], type: 'chocopi_touch_status' },
            paramsKeyMap: { port: 0, sensor: 1 },
            class: 'chocopi_touch',
            isNotFor: ['chocopi'],
            func: function func(sprite, script) {
                var port = Entry.Chocopi.getport(9, script.getField('port'));
                var sensor = script.getField('sensor');
                if (port == -1) return false;
                return (Entry.Chocopi.p[port].ts & 1 << sensor) > 0;
            },
            syntax: { js: [], py: ['Chocopi.touchStatus(%1, %2)'] }
        },
        chocopi_touch_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_port + '1', 0], [Lang.Blocks.chocopi_port + '2', 1], [Lang.Blocks.chocopi_port + '3', 2], [Lang.Blocks.chocopi_port + '4', 3], [Lang.Blocks.chocopi_port + '5', 4], [Lang.Blocks.chocopi_port + '6', 5], [Lang.Blocks.chocopi_port + '7', 6], [Lang.Blocks.chocopi_port + '8', 7], ['BLE1', 8], ['BLE2', 9], ['BLE3', 10], ['BLE4', 11], ['BLE5', 12], ['BLE6', 13], ['BLE7', 14], ['BLE8', 15]],
                value: 0
            }, {
                type: 'Dropdown',
                options: [[1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [8, 7], [9, 8], [10, 9], [11, 10], [12, 11]],
                value: 0,
                fontSize: 11
            }],
            def: { params: [], type: 'chocopi_touch_value' },
            paramsKeyMap: { port: 0, sensor: 1 },
            class: 'chocopi_touch',
            isNotFor: ['chocopi'],
            func: function func(sprite, script) {
                var port = Entry.Chocopi.getport(9, script.getField('port'));
                if (port == -1) return false;
                var sensor = script.getField('sensor');
                return Entry.Chocopi.p[port].tv[sensor];
            },
            syntax: { js: [], py: ['Chocopi.touchValue(%1, %2)'] }
        },
        chocopi_control_event: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_event',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/start_icon_hardware.png',
                size: 17,
                position: { x: 0, y: -2 }
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_port + '1', 0], [Lang.Blocks.chocopi_port + '2', 1], [Lang.Blocks.chocopi_port + '3', 2], [Lang.Blocks.chocopi_port + '4', 3], [Lang.Blocks.chocopi_port + '5', 4], [Lang.Blocks.chocopi_port + '6', 5], [Lang.Blocks.chocopi_port + '7', 6], [Lang.Blocks.chocopi_port + '8', 7], ['BLE1', 8], ['BLE2', 9], ['BLE3', 10], ['BLE4', 11], ['BLE5', 12], ['BLE6', 13], ['BLE7', 14], ['BLE8', 15]],
                value: 0
            }, {
                type: 'Dropdown',
                options: [[Lang.Hw.button + '1', 0], [Lang.Hw.button + '2', 1], [Lang.Hw.button + '3', 2], [Lang.Hw.button + '4', 3]],
                value: '0',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_control_event_pressed, 1], [Lang.Blocks.chocopi_control_event_released, 0]],
                value: 1,
                fontSize: 11
            }],
            def: { params: [], type: 'chocopi_control_event' },
            paramsKeyMap: { port: 1, id: 2, status: 3 },
            class: 'chocopi_control',
            isNotFor: ['chocopi'],
            event: 'control14',
            func: function func(sprite, script) {
                var port = Entry.Chocopi.getport(10, script.getField('port'));
                if (port == -1) return this.die();
                var id = script.getField('id');
                var status = script.getField('status');
                var ev = Entry.Chocopi.ev[port];
                if ((ev.id >> 4 - id & 1) != 1 || ev.btn[id] != status) {
                    return this.die();
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: ['def on_chocopi_control_button(%2, %3, %4 ):']
            }
        },
        chocopi_control_joystick: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_port + '1', 0], [Lang.Blocks.chocopi_port + '2', 1], [Lang.Blocks.chocopi_port + '3', 2], [Lang.Blocks.chocopi_port + '4', 3], [Lang.Blocks.chocopi_port + '5', 4], [Lang.Blocks.chocopi_port + '6', 5], [Lang.Blocks.chocopi_port + '7', 6], [Lang.Blocks.chocopi_port + '8', 7], ['BLE1', 8], ['BLE2', 9], ['BLE3', 10], ['BLE4', 11], ['BLE5', 12], ['BLE6', 13], ['BLE7', 14], ['BLE8', 15]],
                value: 0
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_joystick_X, 0], [Lang.Blocks.chocopi_joystick_Y, 1], [Lang.Blocks.chocopi_pot, 2]],
                value: 0,
                fontSize: 11
            }],
            def: { params: [null], type: 'chocopi_control_joystick' },
            paramsKeyMap: { port: 0, sensor: 1 },
            class: 'chocopi_control',
            isNotFor: ['chocopi'],
            func: function func(sprite, script) {
                var port = Entry.Chocopi.getport(10, script.getField('port'));
                if (port == -1) return false;
                var sensor = script.getField('sensor');
                return Entry.Chocopi.p[port].xyp[sensor];
            },
            syntax: { js: [], py: ['Chocopi.joystick(%1, %2)'] }
        },
        chocopi_control_button: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_port + '1', 0], [Lang.Blocks.chocopi_port + '2', 1], [Lang.Blocks.chocopi_port + '3', 2], [Lang.Blocks.chocopi_port + '4', 3], [Lang.Blocks.chocopi_port + '5', 4], [Lang.Blocks.chocopi_port + '6', 5], [Lang.Blocks.chocopi_port + '7', 6], [Lang.Blocks.chocopi_port + '8', 7], ['BLE1', 8], ['BLE2', 9], ['BLE3', 10], ['BLE4', 11], ['BLE5', 12], ['BLE6', 13], ['BLE7', 14], ['BLE8', 15]],
                value: 0
            }, {
                type: 'Dropdown',
                options: [[Lang.Hw.button + '1', 0], [Lang.Hw.button + '2', 1], [Lang.Hw.button + '3', 2], [Lang.Hw.button + '4', 3]],
                value: '0',
                fontSize: 11
            }],
            def: { params: [null], type: 'chocopi_control_button' },
            paramsKeyMap: { port: 0, sensor: 1 },
            class: 'chocopi_control',
            isNotFor: ['chocopi'],
            func: function func(sprite, script) {
                var port = Entry.Chocopi.getport(10, script.getField('port'));
                if (port == -1) return false;
                var sensor = script.getField('sensor');
                if (!Entry.Chocopi.ev[port]) return 0;
                return Entry.Chocopi.ev[port].btn[sensor];
            },
            syntax: { js: [], py: ['Chocopi.button(%1, %2)'] }
        },
        chocopi_motion_photogate_time: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_port + '1', 0], [Lang.Blocks.chocopi_port + '2', 1], [Lang.Blocks.chocopi_port + '3', 2], [Lang.Blocks.chocopi_port + '4', 3], [Lang.Blocks.chocopi_port + '5', 4], [Lang.Blocks.chocopi_port + '6', 5], [Lang.Blocks.chocopi_port + '7', 6], [Lang.Blocks.chocopi_port + '8', 7], ['BLE1', 8], ['BLE2', 9], ['BLE3', 10], ['BLE4', 11], ['BLE5', 12], ['BLE6', 13], ['BLE7', 14], ['BLE8', 15]],
                value: 0
            }, {
                type: 'Dropdown',
                options: [[1, 0], [2, 1]],
                value: '0',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_motion_photogate_time_unblocked, 0], [Lang.Blocks.chocopi_motion_photogate_time_blocked, 1]],
                value: 1,
                fontSize: 11
            }],
            def: { params: [null], type: 'chocopi_motion_photogate_time' },
            paramsKeyMap: { port: 0, sensor: 1, action: 2 },
            class: 'chocopi_motion',
            isNotFor: ['chocopi'],
            func: function func(sprite, script) {
                var port = Entry.Chocopi.getport(11, script.getField('port'));
                if (port == -1) return 0;
                var sensor = script.getField('sensor');
                var action = script.getField('action');
                if (!Entry.Chocopi.ev[port]) return 0;
                return Entry.Chocopi.ev[port].time[sensor][action];
            },
            syntax: { js: [], py: ['Chocopi.photogateTime(%1, %2, %3)'] }
        },
        chocopi_motion_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_port + '1', 0], [Lang.Blocks.chocopi_port + '2', 1], [Lang.Blocks.chocopi_port + '3', 2], [Lang.Blocks.chocopi_port + '4', 3], [Lang.Blocks.chocopi_port + '5', 4], [Lang.Blocks.chocopi_port + '6', 5], [Lang.Blocks.chocopi_port + '7', 6], [Lang.Blocks.chocopi_port + '8', 7], ['BLE1', 8], ['BLE2', 9], ['BLE3', 10], ['BLE4', 11], ['BLE5', 12], ['BLE6', 13], ['BLE7', 14], ['BLE8', 15]],
                value: 0
            }, {
                type: 'Dropdown',
                options: [[Lang.Hw.IR + ' 1', 0], [Lang.Hw.IR + ' 2', 1], [Lang.Hw.IR + ' 3', 2], [Lang.Hw.acceleration + 'X', 3], [Lang.Hw.acceleration + 'Y', 4], [Lang.Hw.acceleration + 'Z', 5], [Lang.Hw.angular_acceleration + 'U', 6], [Lang.Hw.angular_acceleration + 'V', 7], [Lang.Hw.angular_acceleration + 'W', 8]],
                value: '0',
                fontSize: 11
            }],
            def: { params: [null], type: 'chocopi_motion_value' },
            paramsKeyMap: { port: 0, sensor: 1 },
            class: 'chocopi_motion',
            isNotFor: ['chocopi'],
            func: function func(sprite, script) {
                var port = Entry.Chocopi.getport(11, script.getField('port'));
                if (port == -1) return 0;
                var sensor = script.getField('sensor');
                return Entry.Chocopi.p[port].s[sensor];
            },
            syntax: { js: [], py: ['Chocopi.motionValue(%1, %2)'] }
        },
        chocopi_motion_photogate_status: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_port + '1', 0], [Lang.Blocks.chocopi_port + '2', 1], [Lang.Blocks.chocopi_port + '3', 2], [Lang.Blocks.chocopi_port + '4', 3], [Lang.Blocks.chocopi_port + '5', 4], [Lang.Blocks.chocopi_port + '6', 5], [Lang.Blocks.chocopi_port + '7', 6], [Lang.Blocks.chocopi_port + '8', 7], ['BLE1', 8], ['BLE2', 9], ['BLE3', 10], ['BLE4', 11], ['BLE5', 12], ['BLE6', 13], ['BLE7', 14], ['BLE8', 15]],
                value: 0
            }, {
                type: 'Dropdown',
                options: [['1', 0], ['2', 1]],
                value: 0,
                fontSize: 11
            }],
            def: { params: [null], type: 'chocopi_motion_photogate_status' },
            paramsKeyMap: { port: 0, sensor: 1 },
            class: 'chocopi_motion',
            isNotFor: ['chocopi'],
            func: function func(sprite, script) {
                var port = Entry.Chocopi.getport(11, script.getField('port'));
                if (port == -1) return 0;
                var sensor = script.getField('sensor');
                if (!Entry.Chocopi.ev[port]) return 0;
                return Entry.Chocopi.ev[port].pg[sensor];
            },
            syntax: { js: [], py: ['Chocopi.motionPhotogateStatus(%1, %2)'] }
        },
        chocopi_motion_photogate_event: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_event',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/start_icon_hardware.png',
                size: 17,
                position: { x: 0, y: -2 }
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_port + '1', 0], [Lang.Blocks.chocopi_port + '2', 1], [Lang.Blocks.chocopi_port + '3', 2], [Lang.Blocks.chocopi_port + '4', 3], [Lang.Blocks.chocopi_port + '5', 4], [Lang.Blocks.chocopi_port + '6', 5], [Lang.Blocks.chocopi_port + '7', 6], [Lang.Blocks.chocopi_port + '8', 7], ['BLE1', 8], ['BLE2', 9], ['BLE3', 10], ['BLE4', 11], ['BLE5', 12], ['BLE6', 13], ['BLE7', 14], ['BLE8', 15]],
                value: 0
            }, {
                type: 'Dropdown',
                options: [[1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [8, 7], [9, 8], [10, 9], [11, 10], [12, 11]],
                value: 0,
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_motion_photogate_event_unblocked, 0], [Lang.Blocks.chocopi_motion_photogate_event_blocked, 1]],
                value: 1,
                fontSize: 11
            }],
            def: { params: [], type: 'chocopi_motion_photogate_event' },
            paramsKeyMap: { port: 1, id: 2, status: 3 },
            class: 'chocopi_motion',
            isNotFor: ['chocopi'],
            event: 'motion14',
            func: function func(sprite, script) {
                var port = Entry.Chocopi.getport(11, script.getField('port'));
                if (port == -1) return this.die();
                var id = script.getField('id');
                var status = script.getField('status');
                if (Entry.Chocopi.ev[port].pg[id] != status) {
                    return this.die();
                }

                return script.callReturn();
            },
            syntax: { js: [], py: ['def on_chocopi_photogate(%2, %3, %4 ):'] }
        },
        chocopi_led: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_port + '1', 0], [Lang.Blocks.chocopi_port + '2', 1], [Lang.Blocks.chocopi_port + '3', 2], [Lang.Blocks.chocopi_port + '4', 3], [Lang.Blocks.chocopi_port + '5', 4], [Lang.Blocks.chocopi_port + '6', 5], [Lang.Blocks.chocopi_port + '7', 6], [Lang.Blocks.chocopi_port + '8', 7], ['BLE1', 8], ['BLE2', 9], ['BLE3', 10], ['BLE4', 11], ['BLE5', 12], ['BLE6', 13], ['BLE7', 14], ['BLE8', 15]],
                value: 0
            }, { type: 'Block', accept: 'string' }, { type: 'Block', accept: 'string' }, { type: 'Block', accept: 'string' }, { type: 'Block', accept: 'string' }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: [null, { type: 'number', params: [1] }, { type: 'number', params: [2] }, { type: 'number', params: [1] }, { type: 'number', params: [1] }],
                type: 'chocopi_led'
            },
            paramsKeyMap: { port: 0, l: 1, r: 2, g: 3, b: 4 },
            class: 'chocopi_output',
            isNotFor: ['chocopi'],
            func: function func(sprite, script) {
                var port = Entry.Chocopi.getport(12, script.getField('port'));
                if (port == -1) return script.callReturn();
                var l = script.getNumberValue('l');
                var r = script.getNumberValue('r');
                var g = script.getNumberValue('g');
                var b = script.getNumberValue('b');
                console.log([l, r, g, b]);
                Entry.hw.sendQueue.data[port] = [l, r, g, b];
                Entry.hw.update();
                delete Entry.hw.sendQueue.data[port];
                return script.callReturn();
            },
            syntax: { js: [], py: ['Chocopi.LED(%1, %2, %3, %4, %5)'] }
        },
        chocopi_dc_motor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_port + '1', 0], [Lang.Blocks.chocopi_port + '2', 1], [Lang.Blocks.chocopi_port + '3', 2], [Lang.Blocks.chocopi_port + '4', 3], [Lang.Blocks.chocopi_port + '5', 4], [Lang.Blocks.chocopi_port + '6', 5], [Lang.Blocks.chocopi_port + '7', 6], [Lang.Blocks.chocopi_port + '8', 7], ['BLE1', 8], ['BLE2', 9], ['BLE3', 10], ['BLE4', 11], ['BLE5', 12], ['BLE6', 13], ['BLE7', 14], ['BLE8', 15]],
                value: 0
            }, {
                type: 'Dropdown',
                options: [['1', 0], ['2', 1]],
                value: 0,
                fontSize: 11
            }, { type: 'Block', accept: 'string' }, {
                type: 'Dropdown',
                options: [[Lang.General.clock, 0], [Lang.General.counter_clock, 1]],
                value: 0,
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: [null, null, { type: 'number', params: [31] }],
                type: 'chocopi_dc_motor'
            },
            paramsKeyMap: { port: 0, id: 1, power: 2, direction: 3 },
            class: 'chocopi_output',
            isNotFor: ['chocopi'],
            func: function func(sprite, script) {
                var port = Entry.Chocopi.getport(14, script.getField('port'));
                if (port == -1) return script.callReturn();
                var id = script.getField('id');
                var s = script.getNumberValue('power');
                var d = script.getField('direction');
                Entry.hw.sendQueue.data[port] = [id, s, d];
                Entry.hw.update();
                delete Entry.hw.sendQueue.data[port];
                return script.callReturn();
            },
            syntax: { js: [], py: ['Chocopi.DCmotor(%1, %2, %3, %4)'] }
        },
        chocopi_servo_motor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.chocopi_port + '1', 0], [Lang.Blocks.chocopi_port + '2', 1], [Lang.Blocks.chocopi_port + '3', 2], [Lang.Blocks.chocopi_port + '4', 3], [Lang.Blocks.chocopi_port + '5', 4], [Lang.Blocks.chocopi_port + '6', 5], [Lang.Blocks.chocopi_port + '7', 6], [Lang.Blocks.chocopi_port + '8', 7], ['BLE1', 8], ['BLE2', 9], ['BLE3', 10], ['BLE4', 11], ['BLE5', 12], ['BLE6', 13], ['BLE7', 14], ['BLE8', 15]],
                value: 0
            }, {
                type: 'Dropdown',
                options: [['1', 0], ['2', 1], ['3', 2], ['4', 3]],
                value: 0,
                fontSize: 11
            }, { type: 'Block', accept: 'string' }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: [null, null, { type: 'number', params: [90] }],
                type: 'chocopi_servo_motor'
            },
            paramsKeyMap: { port: 0, id: 1, angle: 2 },
            class: 'chocopi_output',
            isNotFor: ['chocopi'],
            func: function func(sprite, script) {
                var port = Entry.Chocopi.getport(15, script.getField('port'));
                if (port == -1) return script.callReturn();
                var id = script.getField('id');
                var a = script.getNumberValue('angle');
                Entry.hw.sendQueue.data[port] = [id, a];
                Entry.hw.update();
                delete Entry.hw.sendQueue.data[port];
                return script.callReturn();
            },
            syntax: { js: [], py: ['Chocopi.servo(%1, %2, %3)'] }
        }
        //endregion coconut 코코넛
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_cobl.js":
/*!*********************************************!*\
  !*** ./src/playground/blocks/block_cobl.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Cobl = {
    name: 'cobl',
    url: 'http://www.cobl.co.kr/',
    imageName: 'cobl.png',
    title: {
        "ko": "코블",
        "en": "Cobl"
    },
    setZero: function setZero() {
        for (var port = 0; port < 14; port++) {
            Entry.hw.sendQueue[port] = 0;
        }
        Entry.hw.update();
    }
};

Entry.Cobl.getBlocks = function () {
    return {
        //region cobl 코블
        cobl_read_ultrason: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '1. 초음파거리(0~400)',
            def: {
                type: 'cobl_read_ultrason'
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                return Entry.hw.getAnalogPortValue('ultrason');
            }
        },
        cobl_read_potenmeter: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '2.가변저항(0~1023)',
            def: {
                type: 'cobl_read_potenmeter'
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                return Entry.hw.getAnalogPortValue('potenmeter');
            }
        },
        cobl_read_irread1: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '3.적외선센서1(0~1023)',
            def: {
                type: 'cobl_read_irread1'
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                return Entry.hw.getAnalogPortValue('irread1');
            }
        },
        cobl_read_irread2: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '4.적외선센서2(0~1023)',
            def: {
                type: 'cobl_read_irread2'
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                return Entry.hw.getAnalogPortValue('irread2');
            }
        },
        cobl_read_joyx: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '5.조이스틱X축(1, 0, -1)',
            def: {
                type: 'cobl_read_joyx'
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                return Entry.hw.getAnalogPortValue('joyx');
            }
        },
        cobl_read_joyy: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '6.조이스틱Y축(1, 0, -1)',
            def: {
                type: 'cobl_read_joyy'
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                return Entry.hw.getAnalogPortValue('joyy');
            }
        },
        cobl_read_tilt: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '7.기울기센서(0~4)',
            def: {
                type: 'cobl_read_tilt'
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                return Entry.hw.getAnalogPortValue('tilt');
            }
        },
        cobl_read_color: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '8.색상센서',
            def: {
                type: 'cobl_read_color'
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                var colorval = Entry.hw.getAnalogPortValue('color');

                if (colorval == 1) return '빨강';else if (colorval == 2) return '녹색';else if (colorval == 3) return '파랑';else return '알수없음';
            }
        },
        cobl_read_humid: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '9.습도센서',
            def: {
                type: 'cobl_read_humid'
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                return Entry.hw.getAnalogPortValue('humid');
            }
        },
        cobl_read_temps: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '10.온도센서@포트%1',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2']],
                fontSize: 11
            }],
            def: {
                params: ['1'],
                type: 'cobl_read_temps'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                //    console.log("-----temptest------")
                var signal = script.getField('VALUE', script);
                if (signal == 1) {
                    //    console.log("-----temp1 selected ");
                    return Entry.hw.getAnalogPortValue('temps1');
                }

                if (signal == 2) {
                    //     console.log("-----temp2 selected ");
                    return Entry.hw.getAnalogPortValue('temps2');
                }
            }
        },
        cobl_read_light: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '11.빛센서@포트%1',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2']],
                fontSize: 11
            }],
            def: {
                params: ['1'],
                type: 'cobl_read_light'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                var signal = script.getField('VALUE', script);
                if (signal == 1) {
                    return Entry.hw.getAnalogPortValue('light1');
                }

                if (signal == 2) {
                    return Entry.hw.getAnalogPortValue('light2');
                }
            }
        },
        cobl_read_btn: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            template: '12.버튼스위치@포트%1',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2']],
                fontSize: 11
            }],
            def: {
                params: ['1'],
                type: 'cobl_read_btn'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                var signal = script.getField('VALUE', script);
                if (signal == 1) {
                    return Entry.hw.getDigitalPortValue('btn1');
                }

                if (signal == 2) {
                    return Entry.hw.getDigitalPortValue('btn2');
                }
            }
        },
        cobl_led_control: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            template: '13-1.무지개LED%1%2 %3',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3']],
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['OFF', 'OFF'], ['빨강', 'Red'], ['주황', 'Orange'], ['노랑', 'Yellow'], ['초록', 'Green'], ['파랑', 'Blue'], ['남색', 'Dark Blue'], ['보라', 'Purple'], ['흰색', 'White']],
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: ['1', 'OFF'],
                type: 'cobl_led_control'
            },
            paramsKeyMap: {
                PORT: 0,
                OPERATOR: 1
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                var value = script.getStringField('OPERATOR');
                Entry.hw.setDigitalPortValue('RainBowLED_' + port, value);
                Entry.hw.update();
                delete Entry.hw.sendQueue['RainBowLED_' + port];
                return script.callReturn();
            }
        },
        cobl_rgb_boardled: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            template: '13-2.무지개LED%1R%2G%3B%4 %5',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3']],
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8'], ['9', '9'], ['10', '10']],
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8'], ['9', '9'], ['10', '10']],
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8'], ['9', '9'], ['10', '10']],
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: ['1', '1', '1', '1'],
                type: 'cobl_rgb_boardled'
            },
            paramsKeyMap: {
                LED: 0,
                RED: 1,
                GREEN: 2,
                BLUE: 3
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                var led = script.getNumberField('LED');
                var r = script.getStringField('RED');
                var g = script.getStringField('GREEN');
                var b = script.getStringField('BLUE');

                Entry.hw.setDigitalPortValue('BLED_IDX', led);
                Entry.hw.setDigitalPortValue('BLED_R', r);
                Entry.hw.setDigitalPortValue('BLED_G', g);
                Entry.hw.setDigitalPortValue('BLED_B', b);
                Entry.hw.update();

                delete Entry.hw.sendQueue['BLED_IDX'];
                delete Entry.hw.sendQueue['BLED_R'];
                delete Entry.hw.sendQueue['BLED_G'];
                delete Entry.hw.sendQueue['BLED_B'];

                return script.callReturn();
            }
        },
        cobl_servo_angle_control: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            template: '14.각도모터 각도%1(15~165) %2',
            params: [{
                type: 'TextInput',
                value: 0
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                type: 'cobl_servo_angle_control'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                var value = script.getNumberField('VALUE');
                value = Math.round(value);
                value = Math.max(value, 15);
                value = Math.min(value, 165);

                Entry.hw.setDigitalPortValue('Servo1', value);
                Entry.hw.update();
                delete Entry.hw.sendQueue['Servo1'];

                return script.callReturn();
            }
        },
        cobl_melody: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            template: '15.멜로디%1 시간%2(초) %3',
            params: [{
                type: 'Dropdown',
                options: [['(낮은)솔', 'L_So'], ['(낮은)솔#', 'L_So#'], ['(낮은)라', 'L_La'], ['(낮은)라#', 'L_La#'], ['(낮은)시', 'L_Ti'], ['도', 'Do'], ['도#', 'Do#'], ['레', 'Re'], ['레#', 'Re#'], ['미', 'Mi'], ['파', 'Fa'], ['파#', 'Fa#'], ['솔', 'So'], ['솔#', 'So#'], ['라', 'La'], ['라#', 'La#'], ['시', 'Ti'], ['(높은)도', 'H_Do'], ['(높은)도#', 'H_Do#'], ['(높은)레', 'H_Re'], ['(높은)레#', 'H_Re#'], ['(높은)미', 'H_Mi'], ['(높은)파', 'H_Fa']],
                fontSize: 11
            }, {
                type: 'TextInput',
                value: 1
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: ['Do', '1'],
                type: 'cobl_melody'
            },
            paramsKeyMap: {
                MELODY: 0,
                DURATION: 1
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                var melody = script.getStringField('MELODY');
                var duration = script.getStringField('DURATION');

                Entry.hw.setDigitalPortValue('Melody', melody);
                Entry.hw.setDigitalPortValue('Melody_DUR', duration);

                Entry.hw.update();
                delete Entry.hw.sendQueue['Melody'];
                delete Entry.hw.sendQueue['Melody_DUR'];

                return script.callReturn();
            }
        },
        cobl_dcmotor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            template: '16.회전모터%1%2속도%3 %4',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2']],
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['1.시계방향', '1'], ['2.반시계방향', '2'], ['3.정지', '3']],
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5']],
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: ['1', '1', '1'],
                type: 'cobl_dcmotor'
            },
            paramsKeyMap: {
                MOTOR: 0,
                DIRECTION: 1,
                SPEED: 2
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                var motor = script.getStringField('MOTOR');
                var direction = script.getStringField('DIRECTION');
                var speed = script.getStringField('SPEED');

                if (motor == 1) {
                    Entry.hw.setDigitalPortValue('DC1_DIR', direction);
                    Entry.hw.setDigitalPortValue('DC1_SPEED', speed);
                    Entry.hw.update();
                    delete Entry.hw.sendQueue['DC1_DIR'];
                    delete Entry.hw.sendQueue['DC1_SPEED'];
                }

                if (motor == 2) {
                    Entry.hw.setDigitalPortValue('DC2_DIR', direction);
                    Entry.hw.setDigitalPortValue('DC2_SPEED', speed);
                    Entry.hw.update();
                    delete Entry.hw.sendQueue['DC2_DIR'];
                    delete Entry.hw.sendQueue['DC2_SPEED'];
                }

                return script.callReturn();
            }
        },
        cobl_extention_port: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            template: '17.USB포트%1단계%2 %3',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2']],
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5']],
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: ['1', '0'],
                type: 'cobl_extention_port'
            },
            paramsKeyMap: {
                PORT: 0,
                LEVEL: 1
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                var level = script.getStringField('LEVEL');

                if (port == 1) {
                    Entry.hw.setDigitalPortValue('EXUSB1', level);
                    Entry.hw.update();
                    delete Entry.hw.sendQueue['EXUSB1'];
                }

                if (port == 2) {
                    Entry.hw.setDigitalPortValue('EXUSB2', level);
                    Entry.hw.update();
                    delete Entry.hw.sendQueue['EXUSB2'];
                }
                return script.callReturn();
            }
        },
        cobl_external_RainBowled: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            template: '18-1.외부LED%1 (1~64)%2 %3',
            params: [{
                type: 'TextInput',
                value: 0,
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['OFF', 'OFF'], ['빨강', 'Red'], ['주황', 'Orange'], ['노랑', 'Yellow'], ['초록', 'Green'], ['파랑', 'Blue'], ['남색', 'Dark Blue'], ['보라', 'Purple'], ['흰색', 'White']],
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: ['1', 'OFF'],
                type: 'cobl_external_RainBowled'
            },
            paramsKeyMap: {
                PORT: 0,
                OPERATOR: 1
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                var led = script.getStringField('PORT');
                var value = script.getStringField('OPERATOR');

                Entry.hw.setDigitalPortValue('ELED_IDX', led);

                if (value == 'OFF') {
                    Entry.hw.setDigitalPortValue('ELED_R', 0);
                    Entry.hw.setDigitalPortValue('ELED_G', 0);
                    Entry.hw.setDigitalPortValue('ELED_B', 0);
                } else if (value == 'Red') {
                    Entry.hw.setDigitalPortValue('ELED_R', 10);
                    Entry.hw.setDigitalPortValue('ELED_G', 0);
                    Entry.hw.setDigitalPortValue('ELED_B', 0);
                } else if (value == 'Orange') {
                    Entry.hw.setDigitalPortValue('ELED_R', 10);
                    Entry.hw.setDigitalPortValue('ELED_G', 3);
                    Entry.hw.setDigitalPortValue('ELED_B', 0);
                } else if (value == 'Yellow') {
                    Entry.hw.setDigitalPortValue('ELED_R', 10);
                    Entry.hw.setDigitalPortValue('ELED_G', 10);
                    Entry.hw.setDigitalPortValue('ELED_B', 0);
                } else if (value == 'Green') {
                    Entry.hw.setDigitalPortValue('ELED_R', 0);
                    Entry.hw.setDigitalPortValue('ELED_G', 10);
                    Entry.hw.setDigitalPortValue('ELED_B', 0);
                } else if (value == 'Blue') {
                    Entry.hw.setDigitalPortValue('ELED_R', 0);
                    Entry.hw.setDigitalPortValue('ELED_G', 0);
                    Entry.hw.setDigitalPortValue('ELED_B', 10);
                } else if (value == 'Dark Blue') {
                    Entry.hw.setDigitalPortValue('ELED_R', 0);
                    Entry.hw.setDigitalPortValue('ELED_G', 7);
                    Entry.hw.setDigitalPortValue('ELED_B', 10);
                } else if (value == 'Purple') {
                    Entry.hw.setDigitalPortValue('ELED_R', 10);
                    Entry.hw.setDigitalPortValue('ELED_G', 0);
                    Entry.hw.setDigitalPortValue('ELED_B', 10);
                } else if (value == 'White') {
                    Entry.hw.setDigitalPortValue('ELED_R', 10);
                    Entry.hw.setDigitalPortValue('ELED_G', 10);
                    Entry.hw.setDigitalPortValue('ELED_B', 10);
                }
                Entry.hw.update();

                delete Entry.hw.sendQueue['ELED_IDX'];
                delete Entry.hw.sendQueue['ELED_R'];
                delete Entry.hw.sendQueue['ELED_G'];
                delete Entry.hw.sendQueue['ELED_B'];
            }
        },
        cobl_external_led: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            template: '18-2.외부LED%1(1~64)R%2G%3B%4 %5',
            params: [{
                type: 'TextInput',
                value: 0,
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8'], ['9', '9'], ['10', '10']],
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8'], ['9', '9'], ['10', '10']],
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8'], ['9', '9'], ['10', '10']],
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: ['1', '1', '1', '1'],
                type: 'cobl_external_led'
            },
            paramsKeyMap: {
                LED: 0,
                RED: 1,
                GREEN: 2,
                BLUE: 3
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                var led = script.getNumberField('LED');
                var r = script.getStringField('RED');
                var g = script.getStringField('GREEN');
                var b = script.getStringField('BLUE');

                Entry.hw.setDigitalPortValue('ELED_IDX', led);
                Entry.hw.setDigitalPortValue('ELED_R', r);
                Entry.hw.setDigitalPortValue('ELED_G', g);
                Entry.hw.setDigitalPortValue('ELED_B', b);
                Entry.hw.update();

                delete Entry.hw.sendQueue['ELED_IDX'];
                delete Entry.hw.sendQueue['ELED_R'];
                delete Entry.hw.sendQueue['ELED_G'];
                delete Entry.hw.sendQueue['ELED_B'];

                return script.callReturn();
            }
        },
        cobl_7_segment: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            template: '19.숫자전광판%1(0~9999) %2',
            params: [{
                type: 'TextInput',
                value: 0
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                type: 'cobl_7_segment'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'cobl',
            isNotFor: ['cobl'],
            func: function func(sprite, script) {
                var value = script.getNumberField('VALUE');
                var value_s = value.toString();
                var value_c = value_s.substring(0, 4);
                Entry.hw.setDigitalPortValue('7SEG', value_c);
                Entry.hw.update();
                delete Entry.hw.sendQueue['7SEG'];
                return script.callReturn();
            }
        }
        //endregion cobl 코블
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_coconut.js":
/*!************************************************!*\
  !*** ./src/playground/blocks/block_coconut.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.coconut = {
    PORT_MAP: {
        leftFloorValue: 0,
        rightFloorValue: 0,
        BothFloorDetection: 0,
        leftProximityValue: 0,
        rightProximityValue: 0,
        BothProximityDetection: 0,
        obstacleDetection: 0,
        light: 0,
        temp: 0,
        extA2: 0,
        extA3: 0
    },
    setZero: function setZero() {
        var sq = Entry.hw.sendQueue;
        sq.msgValue = [0xff, 0x55, 0x02, 0x00, 0x04];
        Entry.hw.update();
    },
    lineTracerModeId: 0,
    lineTracerStateId: -1,
    tempo: 60,
    timeouts: [],
    removeTimeout: function removeTimeout(a) {
        clearTimeout(a);
        var b = this.timeouts;
        a = b.indexOf(a);
        0 <= a && b.splice(a, 1);
    },
    removeAllTimeouts: function removeAllTimeouts() {
        var a = this.timeouts,
            b;
        for (b in a) {
            clearTimeout(a[b]);
        }
        this.timeouts = [];
    },
    setLineTracerMode: function setLineTracerMode(a, b) {
        this.lineTracerModeId = this.lineTracerModeId + 1 & 255;
        a.lineTracerMode = b;
        a.lineTracerModeId = this.lineTracerModeId;
    },
    //START : 2017.02.22 : LTW
    msgValue: 0,
    insertQueue: function insertQueue(msg, sq) {
        sq.msgValue = msg;
    },
    clearQueue: function clearQueue(sq) {
        sq.msgValue = '';
    },

    move: function move(direction) {
        if (typeof direction == 'string') direction = this.directions[direction];
        // seq, direction, speed, degree, time
        return this.runPackage(this.devices['Motor'], 0, direction, this.speed);
    },
    /* Scratch coconut Extension import */
    speed: 60,
    directions: { Both: 0, Left: 1, Right: 2, Forward: 3, Backward: 4 },
    devices: {
        LightSensor: 14,
        Accelerometer: 18,
        Temperature: 21,
        Buzzer: 3,
        IRdistance: 5,
        Linetracer: 7,
        IR: 9,
        RGBled: 25,
        Motor: 26,
        LedMatrix: 27,
        Digital: 30,
        Analog: 31,
        PWM: 32,
        External: 40,
        Speaker: 41,
        ExtIR: 42,
        ServoMotor: 43,
        ExLed: 44,
        ExtCds: 45
    },
    sharps: { '-': 0, '#': 1, b: 2 },
    beats: {
        Half: 500,
        Quater: 250,
        Eighth: 125,
        Sixteenth: 63,
        'Thirty-second': 32,
        Whole: 1000,
        'Dotted half': 750,
        'Dotted quarter': 375,
        'Dotted eighth': 188,
        'Dotted sixteenth': 95,
        'Dotted thirty-second': 48,
        Double: 2000,
        Zero: 0
    },
    melodys: {
        'Twinkle Twinkle little star': 1,
        'Three bears': 2,
        "Mozart's Lullaby": 3,
        'Do-Re-Mi': 4,
        Butterfly: 5
    },
    colors: {
        Black: 0,
        White: 1,
        Red: 2,
        Green: 3,
        Blue: 4,
        Yellow: 5,
        Cyan: 6,
        Magenta: 7
    },
    // IR distance 감지조건
    detectConds: { Yes: 1, No: 0 },
    /// 도트매트릭스 문자
    // 소문자
    sLetters: {
        a: 0,
        b: 1,
        c: 2,
        d: 3,
        e: 4,
        f: 5,
        g: 6,
        h: 7,
        i: 8,
        j: 9,
        k: 10,
        l: 11,
        m: 12,
        n: 13,
        o: 14,
        p: 15,
        q: 16,
        r: 17,
        s: 18,
        t: 19,
        u: 20,
        v: 21,
        w: 22,
        x: 23,
        y: 24,
        z: 25
    },
    // 대문자
    cLetters: {
        A: 0,
        B: 1,
        C: 2,
        D: 3,
        E: 4,
        F: 5,
        G: 6,
        H: 7,
        I: 8,
        J: 9,
        K: 10,
        L: 11,
        M: 12,
        N: 13,
        O: 14,
        P: 15,
        Q: 16,
        R: 17,
        S: 18,
        T: 19,
        U: 20,
        V: 21,
        W: 22,
        X: 23,
        Y: 24,
        Z: 25
    },
    // 한글
    kLetters: {
        ga: 0,
        na: 1,
        da: 2,
        la: 3,
        ma: 4,
        ba: 5,
        sa: 6,
        aa: 7,
        ja: 8,
        cha: 9,
        ka: 10,
        ta: 11,
        pa: 12,
        ha: 13
    },
    onOffs: { On: 1, Off: 0 },
    axiss: { 'X-Axis': 1, 'Y-Axis': 2, 'Z-Axis': 3 },
    // external
    pins: { D4: 4, D10: 10, D11: 11, D12: 12, A2: 16, A3: 17 },
    outputValues: { HIGH: 1, LOW: 0 },

    /**
     * @brief   모터 움직이기 - 전진/후진/좌회전/우회전
     * @details 기본 속도 적용, 시간제한 없음
     * @date    2016.04.27
     *
     * @param   direction     방향 (1: Left, 2: Right, 3: Forward, 4: Backward), default: Go
     */
    moveMotor: function moveMotor(direction) {
        if (typeof direction == 'string') direction = this.directions[direction];
        // seq, direction, speed, degree, time
        return this.runPackage(this.devices['Motor'], 0, direction, this.speed);
    },

    moveMotorSpeed: function moveMotorSpeed(direction, speed) {
        if (typeof direction == 'string') direction = this.directions[direction];
        // seq, direction, speed, degree, time
        return this.runPackage(this.devices['Motor'], 0, direction, this.speed);
    },

    /**
     * @brief   모터 움직이기 - 좌회전/우회전
     * @details 기본 속도 적용, 시간제한 없음
     *
     * @param   direction     방향 (1: Left, 2: Right, 3: Forward, 4: Backward), default: Go
     */
    turnMotor: function turnMotor(direction) {
        if (typeof direction == 'string') direction = this.directions[direction];
        // seq, direction, speed, degree, time
        return this.runPackage(this.devices['Motor'], 0, direction, this.speed);
    },

    /**
     * @brief   모터 정지
     * @date    2016.06.23
     */
    stopMotor: function stopMotor() {
        return this.runPackage(this.devices['Motor'], 1);
    },

    /**
     * @brief   좌측/우측으로 각도 만큼 돌기
     * @details 기본속도 적용, 정해진 각도만큼 회전후 정지
     * @todo    degree<0 반대방향 적용 여부 결정
     * @date    2016.04.27
     * @param   direction   방향 (1: Left, 2: Right), default: Left
     * @param   degree      회전각도 (0~360도), default: 90도
     */
    moveTurnAngle: function moveTurnAngle(direction, degree) {
        var sec = 0; // 제한없음

        if (typeof direction == 'string') direction = this.directions[direction];

        // 각도가 360 이상일 경우 360으로 고정
        if (degree > 360 || degree < -360) degree = 360;
        // seq, direction, speed, degree, time
        //motorControl(2, direction, speed, degree, sec);
    },

    /**
     * @brief 움직이기 - 전/후진, 좌/우회전 - 시간
     * @details 기본속도 적용
     * @date2016.04.27
     *
     * @param direction 방향 (1: Left, 2: Right, 3: Forward, 4: Backward), default: Go
     * @param sec 시간 (초), default: 1초
     */
    moveGoTime: function moveGoTime(direction, sec) {
        // 시간이 0보다 작으면 양수로 변환
        if (sec < 0) sec = -sec;
        sec = 1000 * sec; // ms 변환

        if (typeof direction == 'string') direction = this.directions[direction];

        // seq, direction, speed, degree, time
        return this.runPackage(this.devices['Motor'], 3, direction, this.speed, this.short2array(sec));
    },

    /**
     * @brief 좌/우회전 - 시간
     * @details 기본속도 적용
     *
     * @param direction 방향 (1: Left, 2: Right), default: Go
     * @param sec 시간 (초), default: 1초
     */
    turnMotorTime: function turnMotorTime(direction, sec) {
        // 시간이 0보다 작으면 양수로 변환
        if (sec < 0) sec = -sec;
        sec = 1000 * sec; // ms 변환

        if (typeof direction == 'string') direction = this.directions[direction];

        return this.runPackage(this.devices['Motor'], 3, direction, this.speed, this.short2array(sec));
    },

    /**
     * @brief 좌/우측 무한 회전하는 동안 RGB LED 켜기
     *
     * @paramdirection 방향 (1: Left, 2: Right), default: Left
     * @paramcolor RGB LED 색상 (1: Red, 2: Green, 3: Blue), default: Red
     */
    moveMotorColor: function moveMotorColor(direction, color) {
        var deviceID = this.devices['Motor'];

        if (typeof direction == 'string') direction = this.directions[direction];
        if (typeof color == 'string') color = this.colors[color];

        // deviceid, seq, direction, speed, color
        return this.runPackage(deviceID, 5, direction, this.speed, color);
    },

    /**
     * @brief 좌/우측 각도에 따라 회전하는 동안 RGB LED 켜기
     * @todo각도 설정 불가, 추후 삭제
     *
     * @param direction 방향 (1: Left, 2: Right), default: Left
     * @param angle 회전각도 (0~360도)
     * @param color RGB LED 색상 (1: Red, 2: Green, 3: Blue), default: Red
     */
    moveMotorAngleColor: function moveMotorAngleColor(direction, angle, color) {
        var deviceID = this.devices['Motor'];

        if (typeof direction == 'string') direction = this.directions[direction];
        if (typeof color == 'string') color = this.colors[color];
        if (typeof angle != 'number') angle = 90;

        // deviceid, seq, direction, speed, angle, time, color
        return this.runPackage(deviceID, 6, direction, this.short2array(0), this.short2array(angle), this.short2array(0), color);
    },

    /**
     * @brief control external motor
     *
     * @param direction 방향 (1: Left, 2: Right, 3: Forward, 4: Backward), default: Go
     * @param speed 속도 (0-255)
     */
    moveExtMotor: function moveExtMotor(direction, speed) {
        if (typeof direction == 'string') direction = this.directions[direction];

        // deviceid, seq, direction, speed
        return this.runPackage(this.devices['Motor'], 7, direction, speed);
    },

    /**
     * @brief RGB LED 켜기 - 방향, 색상 선택
     * @details 시간제한 없음, seq=0
     *
     * @date2016.04.28
     * @param direction 방향 (0: both, 1: Left, 2: Right), default: Left
     * @param color 색상 (1: Red, 2: Green, 3: Blue), default: Red
     */
    rgbOn: function rgbOn(direction, color) {
        if (typeof direction == 'string') direction = this.directions[direction];
        if (typeof color == 'string') color = this.colors[color];

        return this.runPackage(this.devices['RGBled'], 0, direction, color);
    },

    /**
     * @brief RGB LED 끄기 - 방향
     * @details 시간제한 없음, seq=1
     *
     * @param direction방향 (0: all, 1: Left, 2: Right), default: Left
     */
    rgbOff: function rgbOff(direction) {
        if (typeof direction == 'string') direction = this.directions[direction];

        return this.runPackage(this.devices['RGBled'], 1, direction, 0);
    },

    /**
     * @brief RGB LED 끄기 - 방향, 색상
     * @details seq=2
     * @date2016.05.30
     *
     * @param direction 방향 (0: all, 1: Left, 2: Right), default: Left
     * @param color 색상 (1: Red, 2: Green, 3: Blue), default: Red
     */
    rgbOffColor: function rgbOffColor(direction, color) {
        if (typeof direction == 'string') direction = this.directions[direction];
        if (typeof color == 'string') color = this.colors[color];

        return this.runPackage(this.devices['RGBled'], 1, direction, color);
    },

    /**
     * @brief RGB LED 켜기 - 방향, 색상, 시간
     * @details seq=2
     * @date2016.04.28
     *
     * @param direction 방향 (0: all, 1: Left, 2: Right), default: Left
     * @param color 색상 (1: Red, 2: Green, 3: Blue), default: Red
     * @param sec 시간, 초
     */
    ledOnTime: function ledOnTime(direction, color, sec) {
        if (typeof direction == 'string') direction = this.directions[direction];
        if (typeof color == 'string') color = this.colors[color];

        // 시간이 정수가 아니거나 0보다 작을 경우 0으로 변경
        if (typeof sec != 'number') sec = 0;else if (sec < 0) sec = 0;else sec *= 1000; // ms 변환

        return this.runPackage(this.devices['RGBled'], 3, direction, color, this.short2array(sec));
    },

    /// buzzer
    /**
     * @brief 스피커 켜기
     * @details 버저음을 기본 주파수 c4 로 짧게 소리낸다.
     */
    beep: function beep() {
        return this.buzzerControl(0, 262, 50);
        //
    },

    /**
     * @brief 버저음을 seconds 동안 소리내기 (기본주파수)
     * @details 기본주파수 : c4 (도)
     * @date2015.04.26
     * @param sec 연주시간 (seconds, 초)
     */
    playBuzzerTime: function playBuzzerTime(sec) {
        // 시간이 숫자가 아니거나 0보다 작을 경우 0.5초로 고정
        if (typeof sec != 'number') sec = 0.5;
        if (sec < 0) sec = 0.5;

        sec = 1000 * sec; // milliseconds 변환

        return this.buzzerControl(0, 262, sec);
    },

    /**
     * @brief 버저음 freq hz를 seconds 초 동안 소리내기
     * @date2016.04.26
     * @param freq주파수 hz
     * @param sec 연주시간 (seconds, 초)
     */
    playBuzzerFreq: function playBuzzerFreq(freq, sec) {
        // 시간이 숫자가 아니거나 0보다 작을 경우 0.5초로 고정
        if (typeof sec != 'number') sec = 0.5;
        if (sec < 0) sec = 0.5;

        sec = 1000 * sec; // milliseconds 변환

        // 주파수가 숫자가 아니거나 0보다 작을 경우 300hz로 고정
        if (typeof freq != 'number') freq = 300;
        if (freq < 0) freq = 300;

        return this.buzzerControl(0, freq, sec);
    },

    /**
     * @brief 버저 끄기
     * @details tone = 0 일 경우 버저 끄기 실행
     */
    buzzerOff: function buzzerOff() {
        // tone=0, beat=0
        return this.buzzerControl(0, 0, 0);
    },

    /**
     * @brief 버저 tone 음을 beat 박자로 실행
     * @param note음계
     * @param octave옥타브
     * @param beat박자
     */
    playBuzzerNote: function playBuzzerNote(note, octave, beat) {
        // note 에서 `NOTE_` 다음 문자열만 추출
        //var arrNote = note.split("NOTE_",2);
        note = this.getNote(note);

        if (typeof beat == 'string') beat = this.beats[beat];

        // note ascii 코드로 변환하여 전송
        return this.runPackage(this.devices['Buzzer'], 2, note.charCodeAt(0), octave, this.short2array(beat));
    },

    /**
     * @brief 버저 tone 음을 beat 박자로 실행
     * @param note음계
     * @param octave옥타브
     * @param sharp 올림표/내림표 (-:0, #:1, b:2)
     * @param beat박자
     */
    playNote: function playNote(note, octave, sharp, beat) {
        // note 에서 `NOTE_` 다음 문자열만 추출
        note = this.getNote(note);
        if (typeof beat == 'string') beat = this.beats[beat];
        return this.runPackage(this.devices['Buzzer'], 4, note.charCodeAt(0), octave, sharp.charCodeAt(0), this.short2array(beat));
    },

    /**
     * @brief 음계 문자 추출
     * @param note음계 (eg. NOTE_C)
     */
    getNote: function getNote(note) {
        // note 에서 `NOTE_` 다음 문자열만 추출
        var arrNote = note.split('_');

        return arrNote[1];
    },

    /**
     * @brief 박자 쉬기
     * @param beat박자
     */
    restBeat: function restBeat(beat) {
        if (typeof beat == 'string') {
            // Half_rest 에서 `_` 앞 문자열만 추출하여 박자 설정
            var arrBeat = beat.split('_', 1);
            beat = this.beats[arrBeat];
        }

        return this.buzzerControl(1, 0, beat);
    },

    /**
     * @brief 버저 tone+octave 음을 beat 박자로 실행시 LED 켜기
     * @paramnote
     * @paramoctave
     * @parambeat
     * @paramcolor 색상 (1: Red, 2: Green, 3: Blue), default: Red
     */
    playBuzzerColor: function playBuzzerColor(note, octave, beat, color) {
        // note 에서 `NOTE_` 다음 문자열만 추출
        //var arrNote = note.split("NOTE_",2);
        note = this.getNote(note);

        if (typeof beat == 'string') beat = this.beats[beat];
        if (typeof color == 'string') color = this.colors[color];

        return this.runPackage(this.devices['Buzzer'], 3, note.charCodeAt(0), octave, this.short2array(beat), color);
    },
    /**
     * @brief 버저 tone+octave 음을 beat 박자로 실행시 LED 켜기
     * @param note
     * @param octave
     * @param sharp 올림표/내림표 (-:0, #:1, b:2)
     * @param beat
     * @param direction Left:1, Right:2, All: 0
     * @param color 1: Red, 2: Green, 3: Blue, default: Red
     */
    playNoteColor: function playNoteColor(note, octave, sharp, beat, direction, color) {
        // note 에서 `NOTE_` 다음 문자열만 추출
        note = this.getNote(note);

        if (typeof beat == 'string') beat = this.beats[beat];
        if (typeof direction == 'string') direction = this.directions[direction];
        if (typeof color == 'string') color = this.colors[color];

        return this.runPackage(this.devices['Buzzer'], 5, note.charCodeAt(0), octave, sharp.charCodeAt(0), this.short2array(beat), direction, color);
    },

    /**
     * @brief 멜로디 연주하기
     * @param melody멜로디 (1:작은별, 2:곰세마리, 3:자장가, 4:도레미송, 5:나비야)
     */
    playMelody: function playMelody(melody) {
        if (typeof melody == 'string') melody = this.melodys[melody];
        return this.runPackage(this.devices['Buzzer'], 6, melody);
    },

    /**
     * @brief 버저 제어
     * @details
     * @param seq 순번 (0: 연주, 1: 박자쉬기, 2: 음표 연주)
     * @param tone주파수
     * @param beat박자
     * @param note음표
     */
    buzzerControl: function buzzerControl(seq, tone, beat) {
        var deviceID = this.devices['Buzzer'];

        if (typeof beat == 'string') beat = this.beats[beat];

        return this.runPackage(deviceID, seq, this.short2array(tone), this.short2array(beat));
    },

    // led blink
    runBlink: function runBlink() {
        var pin = 13;
        return this.runPackage(30, pin);
    },

    /**
     * @brief 선 따라가기, level=5 (default)
     */
    followLine: function followLine() {
        return this.runPackage(this.devices['Linetracer'], 3, this.speed);
    },

    /**
     * @brief 선 따라가기, 속도 설정
     */
    followLineLevel: function followLineLevel(level, speed) {
        if (typeof speed != 'number') speed = 70;
        return this.runPackage(this.devices['Linetracer'], 3, level, speed);
    },

    /**
     * @brief 장애물 감지 기준 변경
     * @date2016.05.24
     *
     * @param direction 방향, default Left (1: Left, 2: Right)
     * @param standard감지 기준
     */
    setStandard: function setStandard(direction, standard) {
        if (typeof direction == 'string') direction = this.directions[direction];
        return this.runPackage(this.devices['IRdistance'], 0, direction, standard);
    },

    /**
     * @brief 어보이드 모드
     */
    avoidMode: function avoidMode() {
        return this.runPackage(this.devices['IRdistance'], 3);
    },

    /// LED Matrix
    /**
     * @brief Led Matrix 행열 켜기
     *
     * @param row 행 번호, 0-8 (Both=0)
     * @param col 열 번호, 0-8 (Both=0)
     * @param onOff on=1, off=0
     */
    ledMatrixOn: function ledMatrixOn(onOff, row, col) {
        if (typeof onOff == 'string') onOff = this.onOffs[onOff];
        if (typeof row == 'string' && row == 'Both') row = 0;
        if (typeof col == 'string' && col == 'Both') col = 0;

        return this.runPackage(this.devices['LedMatrix'], 0, row, col, onOff);
    },

    /**
     * @brief Led Matrix 행열 끄기
     *
     * @param row 행 번호
     * @param col 열 번호
     */
    ledMatrixOff: function ledMatrixOff(row, col) {
        return this.runPackage(this.devices['LedMatrix'], 0, row, col, 0);
    },

    /**
     * @brief Led Matrix 모두 끄기
     */
    ledMatrixClear: function ledMatrixClear() {
        return this.runPackage(this.devices['LedMatrix'], 5); // seq=5
    },

    /**
     * @brief Led Matrix 모두 켜기
     */
    ledMatrixOnAll: function ledMatrixOnAll() {
        return this.runPackage(this.devices['LedMatrix'], 6); // seq=6
    },

    /**
     * @brief Led Matrix 숫자 표시
     *
     * @param code 숫자 (0-9)
     */
    showLedMatrix: function showLedMatrix(code) {
        return this.runPackage(this.devices['LedMatrix'], 1, code);
    },

    /**
     * @brief Led Matrix 영문 소문자 표시
     *
     * @param code 소문자 (a-z)
     */
    showLedMatrixSmall: function showLedMatrixSmall(code) {
        if (typeof code == 'string') code = this.sLetters[code];
        return this.runPackage(this.devices['LedMatrix'], 2, code);
    },

    /**
     * @brief Led Matrix 영문 대문자 표시
     *
     * @param code 대문자(A-Z)
     */
    showLedMatrixLarge: function showLedMatrixLarge(code) {
        if (typeof code == 'string') code = this.cLetters[code];
        return this.runPackage(this.devices['LedMatrix'], 3, code);
    },

    /**
     * @brief Led Matrix 한글 표시
     *
     * @param code 한글 (가-하)
     */
    showLedMatrixKorean: function showLedMatrixKorean(code) {
        if (typeof code == 'string') code = this.kLetters[code];
        return this.runPackage(this.devices['LedMatrix'], 4, code);
    },

    /// IR
    /**
     * @brief IR 메시지 보내기
     *
     * @param message 전송할 문자열
     */
    sendMessage: function sendMessage(message) {
        return this.runPackage(this.devices['IR'], this.string2array(message));
    },

    /**
     * @brief 외부 LED on/off
     *
     * @param pin 디지털 핀번호
     * @param sec 시간 (ms)
     */
    extLedOn: function extLedOn(pin, sec) {
        if (typeof pin == 'string') pin = this.pins[pin];
        sec *= 1000;
        return this.runPackage(this.devices['ExLed'], pin, this.short2array(sec));
    },

    /**
     * @brief 외부 speaker 소리내기
     *
     * @param pin pwm 핀번호
     * @param freq주파수
     * @param duration시간 (ms)
     */
    playSpeaker: function playSpeaker(pin, freq, duration) {
        if (typeof pin == 'string') pin = this.pins[pin];
        duration *= 1000;
        return this.runPackage(this.devices['Speaker'], pin, this.short2array(freq), this.short2array(duration));
    },

    /**
     * @brief 외부 speaker 끄기
     *
     * @param pin pwm 핀번호
     */
    stopSpeaker: function stopSpeaker(pin) {
        if (typeof pin == 'string') pin = this.pins[pin];
        return this.runPackage(this.devices['Speaker'], pin, this.short2array(0), this.short2array(0));
    },

    /**
     * @brief run servo motor
     *
     * @param pin pwm pins (D10, D11)
     * @param angle 0~180
     */
    runExtServo: function runExtServo(pin, angle) {
        if (typeof pin == 'string') pin = this.pins[pin];
        return this.runPackage(this.devices['ServoMotor'], pin, angle);
    },

    /**
     * @brief 디지털 출력 설정
     * @date2016.05.19
     *
     * @param pin 디지털 핀번호
     * @param outputValue 출력값 (HIGH:1, LOW:0)
     */
    digitalWrite: function digitalWrite(pin, outputValue) {
        if (typeof outputValue == 'string') outputValue = this.outputValues[outputValue];
        return this.runPackage(this.devices['Digital'], pin, outputValue);
    },

    /**
     * @brief 아날로그 출력 설정
     * @date2016.05.19
     *
     * @param pin 아날로그 핀번호
     * @param duty듀티사이클 (0~255)
     */
    analogWrite: function analogWrite(pin, duty) {
        if (typeof duty != 'number') {
            duty = 0;
        } else if (duty > 255) {
            // 듀티사이클이 255를 넘길경우 255로 설정 (100%)
            duty = 255;
        } //if

        return this.runPackage(this.devices['Analog'], pin, duty);
    },

    readFloat: function readFloat(arr, position) {
        var f = [arr[position], arr[position + 1], arr[position + 2], arr[position + 3]];
        return parseFloat(f);
    }, //function

    readShort: function readShort(arr, position) {
        var s = [arr[position], arr[position + 1]];
        return parseFloat(s);
    }, //furnction

    readDouble: function readDouble(arr, position) {
        return this.readFloat(arr, position);
    }, //function

    readString: function readString(arr, position, len) {
        var value = '';
        for (var ii = 0; ii < len; ii++) {}
        // value += String.fromCharCode(_rxBuf[ii + position]);
        //for

        return value;
    }, //function

    short2array: function short2array(value) {
        var tempBytes = {};
        for (var i = 0; i < 2; i++) {
            var tempByte = value & 0xff;
            tempBytes[i] = tempByte;
            value = (value - tempByte) / 256;
        }
        return [tempBytes[0], tempBytes[1]];
    },

    runPackage: function runPackage() {
        var bytes = [0xff, 0x55, 0, 0, 2];
        for (var i = 0; i < arguments.length; i++) {
            if (arguments[i].constructor == '[class Array]') {
                bytes = bytes.concat(arguments[i]);
            } else if (arguments[i].length == 2) {
                //coconut 용 수
                bytes = bytes.concat(arguments[i]);
            } else {
                bytes.push(arguments[i]);
            }
        } //for

        bytes[2] = bytes.length - 3; // data length

        // 장치에 ArrayBuffer data 전송
        //device.send(bytes);
        return bytes;
    },
    /* Scratch coconut Extension import */

    name: 'coconut',
    url: 'http://coco-nut.kr',
    imageName: 'coconut.png',
    title: {
        "ko": "코코넛",
        "en": "coconut"
    },
    monitorTemplate: {
        imgPath: 'hw/coconut.png',
        width: 256,
        height: 256,
        listPorts: {
            temperature: {
                name: Lang.Blocks.coconut_sensor_temperature,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            accelerationX: {
                name: Lang.Blocks.coconut_sensor_acceleration_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            accelerationY: {
                name: Lang.Blocks.coconut_sensor_acceleration_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            accelerationZ: {
                name: Lang.Blocks.coconut_sensor_acceleration_z,
                type: 'input',
                pos: { x: 0, y: 0 }
            }
        },
        ports: {
            leftProximityValue: {
                name: Lang.Blocks.coconut_sensor_left_proximity,
                type: 'input',
                pos: { x: 122, y: 156 }
            },
            rightProximityValue: {
                name: Lang.Blocks.coconut_sensor_right_proximity,
                type: 'input',
                pos: { x: 10, y: 108 }
            },
            leftFloorValue: {
                name: Lang.Blocks.coconut_sensor_left_floor,
                type: 'input',
                pos: { x: 100, y: 234 }
            },
            rightFloorValue: {
                name: Lang.Blocks.coconut_sensor_right_floor,
                type: 'input',
                pos: { x: 13, y: 180 }
            },
            light: {
                name: Lang.Blocks.coconut_sensor_light,
                type: 'input',
                pos: { x: 56, y: 189 }
            }
        },
        mode: 'both'
    }
};

Entry.coconut.getBlocks = function () {
    return {
        //region coconut 코코넛
        coconut_move_motor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_move_forward, '3'], [Lang.Blocks.coconut_move_backward, '4']],
                value: '3',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'coconut_move_motor'
            },
            paramsKeyMap: {
                DIST: 0
            },
            class: 'coconut_wheel',
            isNotFor: ['coconut'],

            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                //앞으로 가기
                var dist = script.getField('DIST', script);
                var move = parseInt(dist);
                var arrMsg = Entry.coconut.moveMotor(move);
                //var arrMsg = ["0xff","0x55","0x05","0x00","0x01","0x07","0x00","0x01"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        coconut_turn_motor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_turn_left, '1'], [Lang.Blocks.coconut_turn_right, '2']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'coconut_turn_motor'
            },
            paramsKeyMap: {
                DIST: 0
            },
            class: 'coconut_wheel',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var dist = script.getField('DIST');
                var move = parseInt(dist);
                var arrMsg = Entry.coconut.turnMotor(move); //왼쪽, 오른쪽으로 가기
                //var arrMsg = ["0xff","0x55","0x06","0x00","0x02","0x1a","0x00","0x02","0x3c"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        coconut_stop_motor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [],
                type: 'coconut_stop_motor'
            },
            class: 'coconut_wheel',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var arrMsg = Entry.coconut.stopMotor(); //모터정지
                //var arrMsg = ["0xff","0x55","0x04","0x00","0x02","0x1a","0x01"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_move_for_secs: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_move_forward, '3'], [Lang.Blocks.coconut_move_backward, '4']],
                value: '3',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['1']
                }],
                type: 'coconut_move_for_secs'
            },
            paramsKeyMap: {
                DIST: 0,
                VALUE: 1
            },
            class: 'coconut_wheel',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var dist = script.getField('DIST', script);
                var move = parseInt(dist);
                var time = script.getNumberValue('VALUE');
                var arrMsg = Entry.coconut.moveGoTime(move, time); //앞으로 1초동안 움직이기
                //var arrMsg = ["0xff","0x55","0x08","0x00","0x02","0x1a","0x03","0x03","0x3c","0xe8","0x03"];

                var now = Date();
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log(now + ' : rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log(now + ' : rev = continue' + pd.msg);
                    } else {
                        console.log(now + ' : rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log(now + ' : rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_turn_for_secs: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_turn_left, '1'], [Lang.Blocks.coconut_turn_right, '2']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['1']
                }],
                type: 'coconut_turn_for_secs'
            },
            paramsKeyMap: {
                DIST: 0,
                VALUE: 1
            },
            class: 'coconut_wheel',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var dist = script.getField('DIST', script);
                var move = parseInt(dist);
                var time = script.getNumberValue('VALUE');
                var arrMsg = Entry.coconut.moveGoTime(move, time); //왼쪽으로 1초동안 돌기
                //var arrMsg = ["0xff","0x55","0x08","0x00","0x02","0x1a","0x03","0x01","0x3c","0xe8","0x03"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        coconut_turn_to_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_turn_left, '1'], [Lang.Blocks.coconut_turn_right, '2']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_color_red, '2'], [Lang.Blocks.coconut_color_yellow, '5'], [Lang.Blocks.coconut_color_green, '3'], [Lang.Blocks.coconut_color_cyan, '6'], [Lang.Blocks.coconut_color_blue, '4'], [Lang.Blocks.coconut_color_magenta, '7'], [Lang.Blocks.coconut_color_white, '1']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'coconut_turn_to_led'
            },
            paramsKeyMap: {
                DIST: 0,
                COLOR: 1
            },
            class: 'coconut_wheel',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var dist1 = script.getField('DIST', script);
                var dist2 = script.getField('COLOR', script);
                var move = parseInt(dist1);
                var color = parseInt(dist2);
                var arrMsg = Entry.coconut.moveMotorColor(move, color); //왼쪽으로 회전하는 동안 빨간색 LED켜기

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_move_outmotor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_move_forward, '3'], [Lang.Blocks.coconut_move_backward, '4'], [Lang.Blocks.coconut_turn_left, '1'], [Lang.Blocks.coconut_turn_right, '2']],
                value: '3',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['60']
                }],
                type: 'coconut_move_outmotor'
            },
            paramsKeyMap: {
                DIST: 0,
                VALUE: 1
            },
            class: 'coconut_wheel',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var dist1 = script.getField('DIST', script);
                var move = parseInt(dist1);
                var speed = script.getNumberValue('VALUE');
                var arrMsg = Entry.coconut.moveExtMotor(move, speed); //외부모터 앞으로 움직이기
                //var arrMsg = ["0xff","0x55","0x06","0x00","0x02","0x1a","0x07","0x03","0x3c"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_set_led_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_left_led, '1'], [Lang.Blocks.coconut_right_led, '2'], [Lang.Blocks.coconut_both_leds, '0']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_color_red, '2'], [Lang.Blocks.coconut_color_yellow, '5'], [Lang.Blocks.coconut_color_green, '3'], [Lang.Blocks.coconut_color_cyan, '6'], [Lang.Blocks.coconut_color_blue, '4'], [Lang.Blocks.coconut_color_magenta, '7'], [Lang.Blocks.coconut_color_white, '1']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'coconut_set_led_to'
            },
            paramsKeyMap: {
                DIST: 0,
                COLOR: 1
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],

            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var now = new Date();
                var dist1 = script.getField('DIST', script);
                var dist2 = script.getField('COLOR', script);
                var dir = parseInt(dist1);
                var color = parseInt(dist2);
                var arrMsg = Entry.coconut.rgbOn(dir, color); //왼쪽 LED 빨간색으로 켜기
                //var arrMsg = ["0xff","0x55","0x06","0x00","0x02","0x19","0x00","0x01","0x02"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log(now + ' : rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log(now + ' : rev = continue' + pd.msg);
                    } else {
                        console.log(now + ' : rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },

            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_clear_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_left_led, '1'], [Lang.Blocks.coconut_right_led, '2'], [Lang.Blocks.coconut_both_leds, '0']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'coconut_clear_led'
            },
            paramsKeyMap: {
                DIST: 0
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var dist1 = script.getField('DIST', script);
                var dir = parseInt(dist1);
                var arrMsg = Entry.coconut.rgbOff(dir); //왼쪽LED 끄기
                //var arrMsg = ["0xff","0x55","0x06","0x00","0x02","0x19","0x01","0x01","0x00"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            }
        },
        coconut_set_led_clear: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_left_led, '1'], [Lang.Blocks.coconut_right_led, '2'], [Lang.Blocks.coconut_both_leds, '0']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_color_red, '2'], [Lang.Blocks.coconut_color_yellow, '5'], [Lang.Blocks.coconut_color_green, '3'], [Lang.Blocks.coconut_color_cyan, '6'], [Lang.Blocks.coconut_color_blue, '4'], [Lang.Blocks.coconut_color_magenta, '7'], [Lang.Blocks.coconut_color_white, '1']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'coconut_set_led_clear'
            },
            paramsKeyMap: {
                DIST: 0,
                COLOR: 1
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var dist1 = script.getField('DIST', script);
                var dist2 = script.getField('COLOR', script);
                var dir = parseInt(dist1);
                var color = parseInt(dist2);
                var arrMsg = Entry.coconut.rgbOffColor(dir, color); //왼쪽 LED 빨간색 끄기
                //var arrMsg = ["0xff","0x55","0x06","0x00","0x02","0x19","0x01","0x01","0x02"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_set_led_time: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_left_led, 'Left'], [Lang.Blocks.coconut_right_led, 'Right'], [Lang.Blocks.coconut_both_leds, 'Both']],
                value: 'Left',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_color_red, '2'], [Lang.Blocks.coconut_color_yellow, '5'], [Lang.Blocks.coconut_color_green, '3'], [Lang.Blocks.coconut_color_cyan, '6'], [Lang.Blocks.coconut_color_blue, '4'], [Lang.Blocks.coconut_color_magenta, '7'], [Lang.Blocks.coconut_color_white, '1']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['0.6']
                }],
                type: 'coconut_set_led_time'
            },
            paramsKeyMap: {
                DIST: 0,
                COLOR: 1,
                VALUE: 2
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var dist1 = script.getField('DIST', script);
                var dist2 = script.getField('COLOR', script);
                var time = script.getNumberValue('VALUE');
                var color = parseInt(dist2);
                var arrMsg = Entry.coconut.ledOnTime(dist1, color, time); //왼쪽 LED 빨간색으로 1초동안 켜기
                //var arrMsg = ["0xff","0x55","0x08","0x00","0x02","0x19","0x03","0x01","0x02","0xe8","0x03"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_beep: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [],
                type: 'coconut_beep'
            },
            class: 'coconut_buzzer',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var arrMsg = Entry.coconut.beep(); //버저 켜기
                //var arrMsg = ["0xff","0x55","0x08","0x00","0x02","0x03","0x00","0x06","0x01","0xf4","0x01"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_buzzer_time: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.6']
                }],
                type: 'coconut_buzzer_time'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'coconut_buzzer',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var time = script.getNumberValue('VALUE');
                var arrMsg = Entry.coconut.playBuzzerTime(time); //버저음을 1초동안 소리내기
                //var arrMsg = ["0xff","0x55","0x08","0x00","0x02","0x03","0x00","0x06","0x01","0xe8","0x03"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_buzzer_set_hz: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                acce기t: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['300']
                }, {
                    type: 'text',
                    params: ['0.6']
                }],
                type: 'coconut_buzzer_set_hz'
            },
            paramsKeyMap: {
                HZ: 0,
                TIME: 1
            },
            class: 'coconut_buzzer',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var hz = script.getNumberValue('HZ');
                var time = script.getNumberValue('TIME');
                var arrMsg = Entry.coconut.playBuzzerFreq(hz, time); //버저음 1000hz를 1초동안 소리내기
                //var arrMsg = ["0xff","0x55","0x08","0x00","0x02","0x03","0x00","0x2c","0x01","0xe8","0x03"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_clear_buzzer: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [],
                type: 'coconut_clear_buzzer'
            },
            class: 'coconut_buzzer',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var arrMsg = Entry.coconut.buzzerOff(); //버저 끄기
                //var arrMsg = ["0xff","0x55","0x08","0x00","0x02","0x03","0x00","0x00","0x00","0x00","0x00"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_play_buzzer: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_note_c, 'NOTE_C'], [Lang.Blocks.coconut_note_d, 'NOTE_D'], [Lang.Blocks.coconut_note_e, 'NOTE_E'], [Lang.Blocks.coconut_note_f, 'NOTE_F'], [Lang.Blocks.coconut_note_g, 'NOTE_G'], [Lang.Blocks.coconut_note_a, 'NOTE_A'], [Lang.Blocks.coconut_note_b, 'NOTE_B']],
                value: 'NOTE_C',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['3', '3'], ['4', '4'], ['5', '5'], ['6', '6']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['-', '-'], ['#', '#'], ['b', 'b']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_play_buzzer_hn, '500'], [Lang.Blocks.coconut_play_buzzer_qn, '250'], [Lang.Blocks.coconut_play_buzzer_en, '125'], [Lang.Blocks.coconut_play_buzzer_sn, '63'], [Lang.Blocks.coconut_play_buzzer_tn, '32'], [Lang.Blocks.coconut_play_buzzer_wn, '1000'], [Lang.Blocks.coconut_play_buzzer_dhn, '750'], [Lang.Blocks.coconut_play_buzzer_dqn, '375'], [Lang.Blocks.coconut_play_buzzer_den, '188'], [Lang.Blocks.coconut_play_buzzer_dsn, '95'], [Lang.Blocks.coconut_play_buzzer_dtn, '48']],
                value: '500',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, '4', '-', null],
                type: 'coconut_play_buzzer'
            },
            paramsKeyMap: {
                NOTE: 0,
                OCTAVE: 1,
                SEMI: 2,
                BEAT: 3
            },
            class: 'coconut_buzzer',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var dist1 = script.getField('NOTE', script);
                var dist2 = script.getField('OCTAVE', script);
                var dist3 = script.getField('SEMI', script);
                var dist4 = script.getField('BEAT', script);
                var note = dist1;
                var octave = parseInt(dist2);
                var semi = dist3;
                var beat = parseInt(dist4);
                var arrMsg = Entry.coconut.playNote(note, octave, semi, beat); //(도)(3)(-)음을 2분음표 박자로 연주하기
                //var arrMsg = ["0xff","0x55","0x09","0x00","0x02","0x03","0x04","0x43","0x03","0x2d","0xf4","0x01"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_rest_buzzer: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_rest_buzzer_hr, '500'], [Lang.Blocks.coconut_rest_buzzer_qr, '250'], [Lang.Blocks.coconut_rest_buzzer_er, '175'], [Lang.Blocks.coconut_rest_buzzer_sr, '63'], [Lang.Blocks.coconut_rest_buzzer_tr, '32'], [Lang.Blocks.coconut_rest_buzzer_wr, '1000']],
                value: '500',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'coconut_rest_buzzer'
            },
            paramsKeyMap: {
                BEAT: 0
            },
            class: 'coconut_buzzer',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var dist = script.getField('BEAT', script);
                var beat = parseInt(dist);
                var arrMsg = Entry.coconut.restBeat(dist); //2분 쉼표 동안 쉬기
                //var arrMsg = ["0xff","0x55","0x08","0x00","0x02","0x03","0x01","0x00","0x00","0xf4","0x01"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_play_buzzer_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_note_c, 'NOTE_C'], [Lang.Blocks.ALBERT_note_d, 'NOTE_D'], [Lang.Blocks.ALBERT_note_e, 'NOTE_E'], [Lang.Blocks.ALBERT_note_f, 'NOTE_F'], [Lang.Blocks.ALBERT_note_g, 'NOTE_G'], [Lang.Blocks.ALBERT_note_a, 'NOTE_A'], [Lang.Blocks.ALBERT_note_b, 'NOTE_B']],
                value: 'NOTE_C',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['3', '3'], ['4', '4'], ['5', '5'], ['6', '6']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['-', '-'], ['#', '#'], ['b', 'b']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_play_buzzer_hn, '500'], [Lang.Blocks.coconut_play_buzzer_qn, '250'], [Lang.Blocks.coconut_play_buzzer_en, '125'], [Lang.Blocks.coconut_play_buzzer_sn, '63'], [Lang.Blocks.coconut_play_buzzer_tn, '32'], [Lang.Blocks.coconut_play_buzzer_wn, '1000'], [Lang.Blocks.coconut_play_buzzer_dhn, '750'], [Lang.Blocks.coconut_play_buzzer_dqn, '375'], [Lang.Blocks.coconut_play_buzzer_den, '188'], [Lang.Blocks.coconut_play_buzzer_dsn, '95'], [Lang.Blocks.coconut_play_buzzer_dtn, '48']],
                value: '500',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_left_led, '1'], [Lang.Blocks.coconut_right_led, '2'], [Lang.Blocks.coconut_both_leds, '0']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_color_red, '2'], [Lang.Blocks.coconut_color_yellow, '5'], [Lang.Blocks.coconut_color_green, '3'], [Lang.Blocks.coconut_color_cyan, '6'], [Lang.Blocks.coconut_color_blue, '4'], [Lang.Blocks.coconut_color_magenta, '7'], [Lang.Blocks.coconut_color_white, '1']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, '4', '-', null, null, null],
                type: 'coconut_play_buzzer_led'
            },
            paramsKeyMap: {
                NOTE: 0,
                OCTAVE: 1,
                SEMI: 2,
                BEAT: 3,
                DIR: 4,
                COLOR: 5
            },
            class: 'coconut_buzzer',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var dist1 = script.getField('NOTE', script);
                var dist2 = script.getField('OCTAVE', script);
                var dist3 = script.getField('SEMI', script);
                var dist4 = script.getField('BEAT', script);
                var dist5 = script.getField('DIR', script);
                var dist6 = script.getField('COLOR', script);
                var note = dist1;
                var octave = parseInt(dist2);
                var semi = dist3;
                var beat = parseInt(dist4);
                var dir = parseInt(dist5);
                var color = parseInt(dist6);
                var arrMsg = Entry.coconut.playNoteColor(note, octave, semi, beat, dir, color);
                //도 4 - 음을 2분음표 박자로 연주하는 동안 왼쪽 LED 빨간색 켜기
                //var arrMsg = ["0xff","0x55","0x0b","0x00","0x02","0x03","0x05","0x43","0x04","0x2d","0xf4","0x01","0x01","0x02"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_play_midi: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_play_midi_1, '1'], [Lang.Blocks.coconut_play_midi_2, '2'], [Lang.Blocks.coconut_play_midi_3, '3'], [Lang.Blocks.coconut_play_midi_4, '4'], [Lang.Blocks.coconut_play_midi_5, '5']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'coconut_play_midi'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'coconut_buzzer',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                //반짝반짝 작은별 연주하기
                var value = script.getField('VALUE');
                var num = parseInt(value);
                var arrMsg = Entry.coconut.playMelody(num);
                //var arrMsg = ["0xff","0x55","0x05","0x00","0x01","0x07","0x00","0x01"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    sq.msgValue = '';
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_floor_sensor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_sensor_left_floor, '1'], [Lang.Blocks.coconut_sensor_right_floor, '2']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'coconut_floor_sensor'
            },
            paramsKeyMap: {
                DIR: 0
            },
            class: 'coconut_sensor',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var dir = script.getField('DIR');
                if (dir == '1') {
                    return pd.leftFloorValue;
                } else {
                    return pd.rightFloorValue;
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_floor_sensing: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_sensor_left_floor, '1'], [Lang.Blocks.coconut_sensor_right_floor, '2'], [Lang.Blocks.coconut_sensor_both_floor, '0']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_floor_sensing_on, '1'], [Lang.Blocks.coconut_floor_sensing_off, '0']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'coconut_floor_sensing'
            },
            paramsKeyMap: {
                DIR: 0,
                DET: 1
            },
            class: 'coconut_sensor',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var dir = script.getField('DIR');
                var det = script.getField('DET');
                if (dir == '0') {
                    if (det == '1') {
                        if (pd.BothFloorDetection == 3)
                            //모든 바닥센서가 감지됐나
                            return true;else return false;
                    } else {
                        if (pd.BothFloorDetection == 0)
                            //모든 바닥센서가 미감지됐나
                            return true;else return false;
                    }
                } else if (dir == '1') {
                    if (det == '1') {
                        if (pd.BothFloorDetection == 2)
                            // 왼쪽 바닥센서가 감지
                            return true;else return false;
                    } else {
                        if (pd.BothFloorDetection == 0)
                            // 왼쪽 바닥센서가 감지
                            return true;else return false;
                    }
                } else if (dir == '2') {
                    if (det == '1') {
                        if (pd.BothFloorDetection == 1)
                            // 오른쪽 바닥센서가 감지
                            return true;else return false;
                    } else {
                        if (pd.BothFloorDetection == 0)
                            // 오른쪽 바닥센서가 감지
                            return true;else return false;
                    }
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_following_line: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [],
                type: 'coconut_following_line'
            },
            paramsKeyMap: {},
            class: 'coconut_wheel',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                //선 따라가기

                var arrMsg = Entry.coconut.followLine();
                //var arrMsg = ["0xff","0x55","0x05","0x00","0x02","0x07","0x03","0x3c"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_front_sensor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_sensor_left_proximity, '1'], [Lang.Blocks.coconut_sensor_right_proximity, '2']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'coconut_front_sensor'
            },
            paramsKeyMap: {
                DIR: 0
            },
            class: 'coconut_sensor',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var dir = script.getField('DIR');
                if (dir == '1') {
                    return pd.leftProximityValue;
                } else {
                    return pd.rightProximityValue;
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_front_sensing: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_sensor_left_proximity, '1'], [Lang.Blocks.coconut_sensor_right_proximity, '2'], [Lang.Blocks.coconut_sensor_both_proximity, '0']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_floor_sensing_on, '1'], [Lang.Blocks.coconut_floor_sensing_off, '0']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'coconut_front_sensing'
            },
            paramsKeyMap: {
                DIR: 0,
                DET: 1
            },
            class: 'coconut_sensor',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var dir = script.getField('DIR');
                var det = script.getField('DET');
                if (dir == '0') {
                    if (det == '1') {
                        if (pd.BothProximityDetection == 3)
                            //모든 바닥센서가 감지됐나
                            return true;else return false;
                    } else {
                        if (pd.BothProximityDetection == 0)
                            //모든 바닥센서가 미감지됐나
                            return true;else return false;
                    }
                } else if (dir == '1') {
                    if (det == '1') {
                        if (pd.BothProximityDetection == 2 || pd.BothProximityDetection == 3)
                            // 왼쪽 바닥센서가 감지
                            return true;else return false;
                    } else {
                        if (pd.BothProximityDetection == 0 || pd.BothProximityDetection == 1)
                            // 왼쪽 바닥센서가 감지
                            return true;else return false;
                    }
                } else if (dir == '2') {
                    if (det == '1') {
                        if (pd.BothProximityDetection == 1 || pd.BothProximityDetection == 3)
                            // 오른쪽 바닥센서가 감지
                            return true;else return false;
                    } else {
                        if (pd.BothProximityDetection == 0 || pd.BothProximityDetection == 2)
                            // 오른쪽 바닥센서가 감지
                            return true;else return false;
                    }
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_obstruct_sensing: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [],
            events: {},
            def: {
                params: [],
                type: 'coconut_obstruct_sensing'
            },
            paramsKeyMap: {},
            class: 'coconut_sensor',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                if (pd.BothProximityDetection > 0) {
                    return true;
                }
                return false;
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_avoid_mode: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [],
                type: 'coconut_avoid_mode'
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'coconut_sensor',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var arrMsg = Entry.coconut.avoidMode(); //어보이드 모드
                //var arrMsg = ["0xff","0x55","0x04","0x00","0x02","0x05","0x03"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_dotmatrix_set: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_dotmatrix_set_on, '1'], [Lang.Blocks.coconut_dotmatrix_set_off, '0']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_dotmatrix_row_0, '0'], [Lang.Blocks.coconut_dotmatrix_row_1, '1'], [Lang.Blocks.coconut_dotmatrix_row_2, '2'], [Lang.Blocks.coconut_dotmatrix_row_3, '3'], [Lang.Blocks.coconut_dotmatrix_row_4, '4'], [Lang.Blocks.coconut_dotmatrix_row_5, '5'], [Lang.Blocks.coconut_dotmatrix_row_6, '6'], [Lang.Blocks.coconut_dotmatrix_row_7, '7'], [Lang.Blocks.coconut_dotmatrix_row_8, '8']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_dotmatrix_col_0, '0'], [Lang.Blocks.coconut_dotmatrix_col_1, '1'], [Lang.Blocks.coconut_dotmatrix_col_2, '2'], [Lang.Blocks.coconut_dotmatrix_col_3, '3'], [Lang.Blocks.coconut_dotmatrix_col_4, '4'], [Lang.Blocks.coconut_dotmatrix_col_5, '5'], [Lang.Blocks.coconut_dotmatrix_col_6, '6'], [Lang.Blocks.coconut_dotmatrix_col_7, '7'], [Lang.Blocks.coconut_dotmatrix_col_8, '8']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'coconut_dotmatrix_set'
            },
            paramsKeyMap: {
                BUTTON: 0,
                ROW: 1,
                COL: 2
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var row = script.getField('ROW');
                var col = script.getField('COL');
                var button = script.getField('BUTTON');
                var row = parseInt(row);
                var col = parseInt(col);
                var button = parseInt(button);
                var arrMsg = Entry.coconut.ledMatrixOn(button, row, col); //도트매트릭스 켜짐 1줄 1칸
                //var arrMsg = ["0xff","0x55","0x07","0x00","0x02","0x1b","0x00","0x01","0x01","0x01"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_dotmatrix_on: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [],
                type: 'coconut_dotmatrix_on'
            },
            paramsKeyMap: {},
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var arrMsg = Entry.coconut.ledMatrixOnAll(); //도트매트릭스 모두 켜기
                //var arrMsg = ["0xff","0x55","0x05","0x00","0x01","0x07","0x00","0x01"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_dotmatrix_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [],
                type: 'coconut_dotmatrix_off'
            },
            paramsKeyMap: {},
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var arrMsg = Entry.coconut.ledMatrixClear(); //도트매트릭스 모두 끄기
                //var arrMsg = ["0xff","0x55","0x04","0x00","0x02","0x1b","0x05"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_dotmatrix_num: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8'], ['9', '9']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['1']
                }],
                type: 'coconut_dotmatrix_num'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var value = script.getField('VALUE');
                var num = parseInt(value);
                var arrMsg = Entry.coconut.showLedMatrix(num); //도트매트릭스 숫자 1표시
                //var arrMsg = ["0xff","0x55","0x05","0x00","0x02","0x1b","0x01","0x01"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_dotmatrix_small_eng: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['a', '0'], ['b', '1'], ['c', '2'], ['d', '3'], ['e', '4'], ['f', '5'], ['g', '6'], ['h', '7'], ['i', '8'], ['j', '9'], ['k', '10'], ['l', '11'], ['m', '12'], ['n', '13'], ['o', '14'], ['p', '15'], ['q', '16'], ['r', '17'], ['s', '18'], ['t', '19'], ['u', '20'], ['v', '21'], ['w', '22'], ['x', '23'], ['y', '24'], ['z', '25']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'coconut_dotmatrix_small_eng'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var value = script.getField('VALUE');
                var num = parseInt(value);
                var arrMsg = Entry.coconut.showLedMatrixSmall(num); //도트매트릭스 소문자 a표시
                //var arrMsg = ["0xff","0x55","0x05","0x00","0x02","0x1b","0x02","0x00"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_dotmatrix_big_eng: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['A', '0'], ['B', '1'], ['C', '2'], ['D', '3'], ['E', '4'], ['F', '5'], ['G', '6'], ['H', '7'], ['I', '8'], ['J', '9'], ['K', '10'], ['L', '11'], ['M', '12'], ['N', '13'], ['O', '14'], ['P', '15'], ['Q', '16'], ['R', '17'], ['S', '18'], ['T', '19'], ['U', '20'], ['V', '21'], ['W', '22'], ['X', '23'], ['Y', '24'], ['Z', '25']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'coconut_dotmatrix_big_eng'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var value = script.getField('VALUE');
                var num = parseInt(value);
                var arrMsg = Entry.coconut.showLedMatrixLarge(num); //도트매트릭스 대문자 A표시
                //var arrMsg = ["0xff","0x55","0x05","0x00","0x02","0x1b","0x03","0x00"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_dotmatrix_kor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['가', '0'], ['나', '1'], ['다', '2'], ['라', '3'], ['마', '4'], ['바', '5'], ['사', '6'], ['아', '7'], ['자', '8'], ['차', '9'], ['카', '10'], ['타', '11'], ['파', '12'], ['하', '13']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'coconut_dotmatrix_kor'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var value = script.getField('VALUE');
                var num = parseInt(value);
                var arrMsg = Entry.coconut.showLedMatrixKorean(num); //도트매트릭스 한글 가 표시
                //var arrMsg = ["0xff","0x55","0x05","0x00","0x02","0x1b","0x04","0x00"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_light_sensor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [],
            events: {},
            def: {
                params: [],
                type: 'coconut_light_sensor'
            },
            paramsKeyMap: {},
            class: 'coconut_sensor',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                return pd.light;
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_tmp_senser: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [],
            events: {},
            def: {
                params: [],
                type: 'coconut_light_tmp'
            },
            paramsKeyMap: {},
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                return pd.temp;
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_ac_sensor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.coconut_x_axis, '1'], [Lang.Blocks.coconut_y_axis, '2'], [Lang.Blocks.coconut_z_axis, '3']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'coconut_ac_sensor'
            },
            paramsKeyMap: {
                XYZ: 0
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var xyz = script.getField('XYZ');

                if (xyz == '1') {
                    return pd.accelerationX;
                } else if (xyz == '2') {
                    return pd.accelerationY;
                } else {
                    return pd.accelerationZ;
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_outled_sensor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['D4', 4], ['D10', 10], ['D11', 11], ['D12', 12], ['A2', 16], ['A3', 17]],
                value: '4',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['1']
                }],
                type: 'coconut_outled_sensor'
            },
            paramsKeyMap: {
                PIN: 0,
                TIME: 1
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var pin = script.getNumberField('PIN');
                var time = script.getNumberValue('TIME');
                var arrMsg = Entry.coconut.extLedOn(pin, time); //외부 LED 설정 D4 0.5초동안 켜기
                //var arrMsg = ["0xff","0x55","0x06","0x00","0x02","0x2c","0x04","0xf4","0x01"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_outspk_sensor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['D10', '10'], ['D11', '11']],
                value: '10',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['100']
                }, {
                    type: 'number',
                    params: ['0.5']
                }],
                type: 'coconut_outspk_sensor'
            },
            paramsKeyMap: {
                PIN: 0,
                HZ: 1,
                TIME: 2
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var pin = script.getNumberField('PIN');
                var hz = script.getNumberValue('HZ');
                var time = script.getNumberValue('TIME');
                var arrMsg = Entry.coconut.playSpeaker(pin, hz, time); //외부 스피커 설정 D10 100hz로 0.5초 동안 소리내기
                //var arrMsg = ["0xff","0x55","0x08","0x00","0x02","0x29","0x10","0x64","0x00","0xf4","0x01"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_outspk_sensor_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['D10', '10'], ['D11', '11']],
                value: '10',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'coconut_outspk_sensor_off'
            },
            paramsKeyMap: {
                PIN: 0
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var pin = script.getNumberField('PIN');
                var arrMsg = Entry.coconut.stopSpeaker(pin); //외부스피커 D10 끄기
                //var arrMsg = ["0xff","0x55","0x08","0x00","0x02","0x29","0x10","0x00","0x00","0x00","0x00"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_outinfrared_sensor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['A2', '16'], ['A3', '17']],
                value: '16',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'coconut_outinfrared_sensor'
            },
            paramsKeyMap: {
                PIN: 0
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var pin = script.getNumberField('PIN');

                if (pin == '16') {
                    return pd.extA2;
                } else {
                    return pd.extA3;
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_outcds_sensor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['A2', '16'], ['A3', '17']],
                value: '16',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'coconut_outcds_sensor'
            },
            paramsKeyMap: {
                PIN: 0
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var pin = script.getNumberField('PIN');
                if (pin == '16') {
                    return pd.extA2;
                } else {
                    return pd.extA3;
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        },
        coconut_servomotor_angle: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['D4', '4'], ['D10', '10'], ['D11', '11'], ['D12', '12'], ['A2', '16'], ['A3', '17']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'String'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['0']
                }],
                type: 'coconut_servomotor_angle'
            },
            paramsKeyMap: {
                PIN: 0,
                ANGLE: 1
            },
            class: 'coconut_led',
            isNotFor: ['coconut'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;

                var pin = script.getNumberField('PIN');
                var angle = script.getNumberValue('ANGLE');
                var arrMsg = Entry.coconut.runExtServo(pin, angle); //서보모터 연결 D4 각도 90
                //var arrMsg = ["0xff","0x55","0x05","0x00","0x02","0x43","0x04","0x5a"];

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    pd.msgStatus = 'start';
                    Entry.coconut.insertQueue(arrMsg, sq);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (pd.msgStatus == 'end') {
                        console.log('rev = end');
                        script.timeFlag = 0;
                    } else if (pd.msgStatus == 'continue') {
                        console.log('rev = continue' + pd.msg);
                    } else {
                        console.log('rev = waiting');
                    }
                    Entry.coconut.clearQueue(sq);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    console.log('rev = ok');
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['coconut.turn_for_secs(%1, %2)'] }
        }
        //endregion coconut 코코넛
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_codeino.js":
/*!************************************************!*\
  !*** ./src/playground/blocks/block_codeino.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.CODEino = {
    name: 'CODEino',
    url: 'http://www.kcsi.co.kr/ko/bbs/content.php?co_id=CODEino1',
    imageName: 'codeino.png',
    title: {
        "ko": "코드이노",
        "en": "CODEino"
    },
    getSensorKey: function getSensorKey() {
        return 'xxxxxxxx'.replace(/[xy]/g, function (f) {
            var e = Math.random() * 16 | 0,
                d = f == 'x' ? e : e & 0 * 3 | 0 * 8;
            return d.toString(16);
        }).toUpperCase();
    },
    getSensorTime: function getSensorTime(type) {
        return new Date().getTime() + type;
    },
    setZero: function setZero() {
        if (!Entry.hw.sendQueue.SET) {
            Entry.hw.sendQueue = {
                GET: {},
                SET: {}
            };
        } else {
            var keySet = Object.keys(Entry.hw.sendQueue.SET);
            keySet.forEach(function (key) {
                Entry.hw.sendQueue.SET[key].data = 0;
                Entry.hw.sendQueue.SET[key].time = new Date().getTime();
            });
        }
        Entry.hw.update();
    },
    monitorTemplate: {
        imgPath: 'hw/codeino.png',
        width: 431,
        height: 354,
        listPorts: {
            '2': {
                name: Lang.Hw.port_en + ' 2 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '3': {
                name: Lang.Hw.port_en + ' 3 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '4': {
                name: Lang.Hw.port_en + ' 4 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '5': {
                name: Lang.Hw.port_en + ' 5 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '6': {
                name: Lang.Hw.port_en + ' 6 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '7': {
                name: Lang.Hw.port_en + ' 7 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '8': {
                name: Lang.Hw.port_en + ' 8 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '9': {
                name: Lang.Hw.port_en + ' 9 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '10': {
                name: Lang.Hw.port_en + ' 10 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '11': {
                name: Lang.Hw.port_en + ' 11 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '12': {
                name: Lang.Hw.port_en + ' 12 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '13': {
                name: Lang.Hw.port_en + ' 13 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a0: {
                name: Lang.Hw.port_en + ' A0 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a1: {
                name: Lang.Hw.port_en + ' A1 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a2: {
                name: Lang.Hw.port_en + ' A2 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a3: {
                name: Lang.Hw.port_en + ' A3 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a4: {
                name: Lang.Hw.port_en + ' A4 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a5: {
                name: Lang.Hw.port_en + ' A5 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a6: {
                name: Lang.Hw.port_en + ' A6 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            }
        },
        mode: 'both'
    },
    sensorTypes: {
        ALIVE: 0,
        DIGITAL: 1,
        ANALOG: 2,
        PWM: 3,
        RGBLED_PIN: 4,
        TONE: 5,
        PULSEIN: 6,
        ULTRASONIC: 7,
        TIMER: 8,
        ADDCOLOR: 9
    },
    BlockState: {},

    LED_RED_VALUE: 0,
    LED_GREEN_VALUE: 0,
    LED_BLUE_VALUE: 0
};

Entry.CODEino.getBlocks = function () {
    return {
        //region codeino 코드이노
        CODEino_get_sensor_number: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['0', 'A0'], ['1', 'A1'], ['2', 'A2'], ['3', 'A3'], ['4', 'A4'], ['5', 'A5'], ['6', 'A6']],
                value: 'A0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            }
        },
        CODEino_get_named_sensor_value: {
            // Block UI : <아날로그센서> 센서값
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.CODEino_sensor_name_0, '0'], [Lang.Blocks.CODEino_sensor_name_1, '1'], [Lang.Blocks.CODEino_sensor_name_2, '2'], [Lang.Blocks.CODEino_sensor_name_3, '3'], [Lang.Blocks.CODEino_sensor_name_4, '4'], [Lang.Blocks.CODEino_sensor_name_5, '5'], [Lang.Blocks.CODEino_sensor_name_6, '6']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'CODEino_get_named_sensor_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'CODEino_sensor',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var port = script.getField('PORT', script);
                var nowTime = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG);
                var hardwareTime = Entry.hw.portData['TIME'] || 0;
                var scope = script.executor.scope;
                var ANALOG = Entry.hw.portData.ANALOG;
                if (!scope.isStart) {
                    scope.isStart = true;
                    scope.stamp = nowTime;
                    if (!Entry.hw.sendQueue['GET']) {
                        Entry.hw.sendQueue['GET'] = {};
                    }
                    Entry.hw.sendQueue['GET'][Entry.CODEino.sensorTypes.ANALOG] = {
                        port: port,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG)
                    };
                    throw new Entry.Utils.AsyncError();
                    return;
                } else if (hardwareTime && hardwareTime === scope.stamp) {
                    delete scope.isStart;
                    delete scope.stamp;
                    return ANALOG ? ANALOG[port] || 0 : 0;
                } else if (nowTime - scope.stamp > 64) {
                    delete scope.isStart;
                    delete scope.stamp;
                    return ANALOG ? ANALOG[port] || 0 : 0;
                } else {
                    throw new Entry.Utils.AsyncError();
                    return;
                }
            }
        },
        CODEino_get_sound_status: {
            // Block UI : 소리센서 <음량>
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.CODEino_string_11, 'GREAT'], [Lang.Blocks.CODEino_string_12, 'SMALL']],
                value: 'GREAT',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'CODEino_get_sound_status'
            },
            paramsKeyMap: {
                STATUS: 0
            },
            class: 'CODEino_sensor',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var value1 = script.getField('STATUS', script);
                var value2 = 1;
                var nowTime = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG);
                var hardwareTime = Entry.hw.portData['TIME'] || 0;
                var scope = script.executor.scope;
                var ANALOG = Entry.hw.portData.ANALOG;
                if (!scope.isStart) {
                    scope.isStart = true;
                    scope.stamp = nowTime;
                    if (!Entry.hw.sendQueue['GET']) {
                        Entry.hw.sendQueue['GET'] = {};
                    }
                    Entry.hw.sendQueue['GET'][Entry.CODEino.sensorTypes.ANALOG] = {
                        port: 0,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG)
                    };
                    throw new Entry.Utils.AsyncError();
                    return;
                } else if (hardwareTime && hardwareTime === scope.stamp) {
                    delete scope.isStart;
                    delete scope.stamp;
                    if (value1 == 'GREAT') return ANALOG[0] > 600 ? 1 : 0;else return ANALOG[0] <= 600 ? 1 : 0;
                } else if (nowTime - scope.stamp > 64) {
                    delete scope.isStart;
                    delete scope.stamp;
                    if (value1 == 'GREAT') return ANALOG[0] > 600 ? 1 : 0;else return ANALOG[0] <= 600 ? 1 : 0;
                } else {
                    throw new Entry.Utils.AsyncError();
                    return;
                }
            }
        },
        CODEino_get_light_status: {
            // Block UI : 빛센서 <밝기>
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.CODEino_string_14, 'BRIGHT'], [Lang.Blocks.CODEino_string_15, 'DARK']],
                value: 'BRIGHT',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'CODEino_get_light_status'
            },
            paramsKeyMap: {
                STATUS: 0
            },
            class: 'CODEino_sensor',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var value1 = script.getField('STATUS', script);
                var value2 = 1;
                var nowTime = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG);
                var hardwareTime = Entry.hw.portData['TIME'] || 0;
                var scope = script.executor.scope;
                var ANALOG = Entry.hw.portData.ANALOG;
                if (!scope.isStart) {
                    scope.isStart = true;
                    scope.stamp = nowTime;
                    if (!Entry.hw.sendQueue['GET']) {
                        Entry.hw.sendQueue['GET'] = {};
                    }
                    Entry.hw.sendQueue['GET'][Entry.CODEino.sensorTypes.ANALOG] = {
                        port: 1,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG)
                    };
                    throw new Entry.Utils.AsyncError();
                    return;
                } else if (hardwareTime && hardwareTime === scope.stamp) {
                    delete scope.isStart;
                    delete scope.stamp;
                    if (value1 == 'GREAT') return ANALOG[value2] < 800 ? 1 : 0;else return ANALOG[value2] <= 800 ? 1 : 0;
                } else if (nowTime - scope.stamp > 64) {
                    delete scope.isStart;
                    delete scope.stamp;
                    if (value1 == 'GREAT') return ANALOG[value2] < 800 ? 1 : 0;else return ANALOG[value2] <= 800 ? 1 : 0;
                } else {
                    throw new Entry.Utils.AsyncError();
                    return;
                }
            }
        },
        CODEino_is_button_pressed: {
            // Block UI : 보드의 <버튼누름/저항연결>
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.CODEino_string_3, '4'], [Lang.Blocks.CODEino_string_4, '17'], [Lang.Blocks.CODEino_string_5, '18'], [Lang.Blocks.CODEino_string_6, '19'], [Lang.Blocks.CODEino_string_7, '20']],
                value: '4',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'CODEino_is_button_pressed'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'CODEino_sensor',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT', script);
                if (port < 10) {
                    var nowTime = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.DIGITAL);
                    var hardwareTime = Entry.hw.portData['TIME'] || 0;
                    var scope = script.executor.scope;
                    var DIGITAL = Entry.hw.portData.DIGITAL;
                    if (!scope.isStart) {
                        scope.isStart = true;
                        scope.stamp = nowTime;
                        if (!Entry.hw.sendQueue['GET']) {
                            Entry.hw.sendQueue['GET'] = {};
                        }
                        Entry.hw.sendQueue['GET'][Entry.CODEino.sensorTypes.DIGITAL] = {
                            port: 4,
                            time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.DIGITAL)
                        };
                        throw new Entry.Utils.AsyncError();
                        return;
                    } else if (hardwareTime && hardwareTime === scope.stamp) {
                        delete scope.isStart;
                        delete scope.stamp;
                        return DIGITAL ? !(DIGITAL[port] || 0) : 0;
                    } else if (nowTime - scope.stamp > 64) {
                        delete scope.isStart;
                        delete scope.stamp;
                        return DIGITAL ? !(DIGITAL[port] || 0) : 0;
                    } else {
                        throw new Entry.Utils.AsyncError();
                        return;
                    }
                } else {
                    var nowTime = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG);
                    var hardwareTime = Entry.hw.portData['TIME'] || 0;
                    var scope = script.executor.scope;
                    var ANALOG = Entry.hw.portData.ANALOG;
                    if (!scope.isStart) {
                        scope.isStart = true;
                        scope.stamp = nowTime;
                        if (!Entry.hw.sendQueue['GET']) {
                            Entry.hw.sendQueue['GET'] = {};
                        }
                        Entry.hw.sendQueue['GET'][Entry.CODEino.sensorTypes.ANALOG] = {
                            port: port - 14,
                            time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG)
                        };
                        throw new Entry.Utils.AsyncError();
                        return;
                    } else if (hardwareTime && hardwareTime === scope.stamp) {
                        delete scope.isStart;
                        delete scope.stamp;
                        return ANALOG[port - 14] < 1000 ? 1 : 0;
                    } else if (nowTime - scope.stamp > 64) {
                        delete scope.isStart;
                        delete scope.stamp;
                        return ANALOG[port - 14] < 1000 ? 1 : 0;
                    } else {
                        throw new Entry.Utils.AsyncError();
                        return;
                    }
                }
            }
        },
        CODEino_get_accelerometer_direction: {
            // Block UI : 3축 가속도센서 <기울기>
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.CODEino_string_16, 'LEFT'], [Lang.Blocks.CODEino_string_17, 'RIGHT'], [Lang.Blocks.CODEino_string_18, 'FRONT'], [Lang.Blocks.CODEino_string_19, 'REAR'], [Lang.Blocks.CODEino_string_20, 'REVERSE']],
                value: 'LEFT',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'CODEino_get_accelerometer_direction'
            },
            paramsKeyMap: {
                DIRECTION: 0
            },
            class: 'CODEino_sensor',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var value1 = script.getField('DIRECTION', script);
                var port = 0;
                var nowTime = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG);
                var hardwareTime = Entry.hw.portData['TIME'] || 0;
                var scope = script.executor.scope;
                var ANALOG = Entry.hw.portData.ANALOG;
                var value4 = 265;
                var value5 = 402;
                var value6 = -90;
                var value7 = 90;
                var result;
                if (value1 == 'LEFT' || value1 == 'RIGHT') port = 3;else if (value1 == 'FRONT' || value1 == 'REAR') port = 4;else if (value1 == 'REVERSE') port = 5;

                if (!scope.isStart) {
                    scope.isStart = true;
                    scope.stamp = nowTime;
                    if (!Entry.hw.sendQueue['GET']) {
                        Entry.hw.sendQueue['GET'] = {};
                    }
                    Entry.hw.sendQueue['GET'][Entry.CODEino.sensorTypes.ANALOG] = {
                        port: port,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG)
                    };
                    throw new Entry.Utils.AsyncError();
                    return;
                } else if (hardwareTime && hardwareTime === scope.stamp) {
                    delete scope.isStart;
                    delete scope.stamp;
                    result = ANALOG[port];
                    result -= value4;
                    result = result * ((value7 - value6) / (value5 - value4));
                    result += value6;
                    result = Math.min(value7, result);
                    result = Math.max(value6, result);
                    result = Math.round(result);
                    if (value1 == 'LEFT' || value1 == 'REAR') return result < -30 ? 1 : 0;else if (value1 == 'RIGHT' || value1 == 'FRONT') return result > 30 ? 1 : 0;else if (value1 == 'REVERSE') return result < -50 ? 1 : 0;
                } else if (nowTime - scope.stamp > 64) {
                    delete scope.isStart;
                    delete scope.stamp;
                    result = ANALOG[port];
                    result -= value4;
                    result = result * ((value7 - value6) / (value5 - value4));
                    result += value6;
                    result = Math.min(value7, result);
                    result = Math.max(value6, result);
                    result = Math.round(result);
                    if (value1 == 'LEFT' || value1 == 'REAR') return result < -30 ? 1 : 0;else if (value1 == 'RIGHT' || value1 == 'FRONT') return result > 30 ? 1 : 0;else if (value1 == 'REVERSE') return result < -50 ? 1 : 0;
                } else {
                    throw new Entry.Utils.AsyncError();
                    return;
                }
            }
        },
        CODEino_get_accelerometer_value: {
            // Block UI : 3축 가속도센서 <방향> 축의 센서값
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['X', '3'], ['Y', '4'], ['Z', '5']],
                value: '3',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'CODEino_get_accelerometer_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'CODEino_sensor',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT', script);
                var nowTime = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG);
                var hardwareTime = Entry.hw.portData['TIME'] || 0;
                var scope = script.executor.scope;
                var ANALOG = Entry.hw.portData.ANALOG;
                var result = 0;
                if (!scope.isStart) {
                    scope.isStart = true;
                    scope.stamp = nowTime;
                    if (!Entry.hw.sendQueue['GET']) {
                        Entry.hw.sendQueue['GET'] = {};
                    }
                    Entry.hw.sendQueue['GET'][Entry.CODEino.sensorTypes.ANALOG] = {
                        port: port,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG)
                    };
                    throw new Entry.Utils.AsyncError();
                    return;
                } else if (hardwareTime && hardwareTime === scope.stamp) {
                    delete scope.isStart;
                    delete scope.stamp;
                    result = ANALOG[port];
                    result = (result - 333) * 1.46;
                    result = Math.min(90, result);
                    result = Math.max(-90, result);
                    return Math.round(result);
                } else if (nowTime - scope.stamp > 64) {
                    delete scope.isStart;
                    delete scope.stamp;
                    result = ANALOG[port];
                    result = (result - 333) * 1.46;
                    result = Math.min(90, result);
                    result = Math.max(-90, result);
                    return Math.round(result);
                } else {
                    throw new Entry.Utils.AsyncError();
                    return;
                }
            }
        },
        CODEino_get_analog_value: {
            // Block UI : 아날로그 <핀번호> 센서의 값
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'CODEino_get_analog_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'CODEino_Adumode',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var port = script.getField('PORT', script);
                var nowTime = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG);
                var hardwareTime = Entry.hw.portData['TIME'] || 0;
                var scope = script.executor.scope;
                var ANALOG = Entry.hw.portData.ANALOG;
                if (!scope.isStart) {
                    scope.isStart = true;
                    scope.stamp = nowTime;
                    if (!Entry.hw.sendQueue['GET']) {
                        Entry.hw.sendQueue['GET'] = {};
                    }
                    Entry.hw.sendQueue['GET'][Entry.CODEino.sensorTypes.ANALOG] = {
                        port: port,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG)
                    };
                    throw new Entry.Utils.AsyncError();
                    return;
                } else if (hardwareTime && hardwareTime === scope.stamp) {
                    delete scope.isStart;
                    delete scope.stamp;
                    return ANALOG ? ANALOG[port] || 0 : 0;
                } else if (nowTime - scope.stamp > 64) {
                    delete scope.isStart;
                    delete scope.stamp;
                    return ANALOG ? ANALOG[port] || 0 : 0;
                } else {
                    throw new Entry.Utils.AsyncError();
                    return;
                }
            }
        },
        CODEino_get_digital_value: {
            // Block UI : 디지털 <핀번호> 핀의 값
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }],
                type: 'CODEino_get_digital_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'CODEino_Adumode',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT', script);
                var nowTime = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.DIGITAL);
                var hardwareTime = Entry.hw.portData['TIME'] || 0;
                var scope = script.executor.scope;
                var DIGITAL = Entry.hw.portData.DIGITAL;
                if (!scope.isStart) {
                    scope.isStart = true;
                    scope.stamp = nowTime;
                    if (!Entry.hw.sendQueue['GET']) {
                        Entry.hw.sendQueue['GET'] = {};
                    }
                    Entry.hw.sendQueue['GET'][Entry.CODEino.sensorTypes.DIGITAL] = {
                        port: port,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.DIGITAL)
                    };
                    throw new Entry.Utils.AsyncError();
                    return;
                } else if (hardwareTime && hardwareTime === scope.stamp) {
                    delete scope.isStart;
                    delete scope.stamp;
                    return DIGITAL ? DIGITAL[port] || 0 : 0;
                } else if (nowTime - scope.stamp > 64) {
                    delete scope.isStart;
                    delete scope.stamp;
                    return DIGITAL ? DIGITAL[port] || 0 : 0;
                } else {
                    throw new Entry.Utils.AsyncError();
                    return;
                }
            }
        },
        CODEino_set_digital_value: {
            // Block UI : 디지털 <핀번호> 핀의 <켜기/끄기>
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ARDUINO_on, '255'], [Lang.Blocks.ARDUINO_off, '0']],
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }, '255', null],
                type: 'CODEino_set_digital_value'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'CODEino_Setmode',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getNumberField('VALUE');

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.CODEino.sensorTypes.DIGITAL,
                    data: value,
                    time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.DIGITAL)
                };
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.digitalWrite(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        CODEino_set_pwm_value: {
            // Block UI : 디지털 <핀번호> 번 핀을 <숫자> (으)로 정하기
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_pwm_port_number'
                }, {
                    type: 'arduino_text',
                    params: ['255']
                }, null],
                type: 'CODEino_set_pwm_value'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'CODEino_Setmode',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 0);
                value = Math.min(value, 255);
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.CODEino.sensorTypes.PWM,
                    data: value,
                    time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.PWM)
                };
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.analogWrite(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        CODEino_convert_scale: {
            // Block UI : 아날로그 <핀번호> 센서의 값 값의 범위를 0~1023에서 0~100 (으)로 바꾼 값
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'CODEino_get_analog_value',
                    value: '0'
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'CODEino_convert_scale'
            },
            paramsKeyMap: {
                VALUE1: 0,
                VALUE2: 1,
                VALUE3: 2,
                VALUE4: 3,
                VALUE5: 4
            },
            class: 'CODEino_extmode',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var value1 = script.getNumberValue('VALUE1', script);
                var value2 = script.getNumberValue('VALUE2', script);
                var value3 = script.getNumberValue('VALUE3', script);
                var value4 = script.getNumberValue('VALUE4', script);
                var value5 = script.getNumberValue('VALUE5', script);
                var result = value1;
                if (value2 > value3) {
                    var swap = value2;
                    value2 = value3;
                    value3 = swap;
                }
                if (value4 > value5) {
                    var swap = value4;
                    value4 = value5;
                    value5 = swap;
                }
                result -= value2;
                result = result * ((value5 - value4) / (value3 - value2));
                result += value4;
                result = Math.min(value5, result);
                result = Math.max(value4, result);
                return Math.round(result);
            }
        },
        CODEino_set_rgb_value: {
            // Block UI : 컬러 LED의 <색> 색상을 <숫자> (으)로 정하기
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.CODEino_led_red, '17'], [Lang.Blocks.CODEino_led_green, '18'], [Lang.Blocks.CODEino_led_blue, '19']],
                value: '17',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'CODEino_set_rgb_value'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'CODEino_RGBLED_mode',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT', script);
                var value = script.getNumberValue('VALUE', script);
                value = Math.min(255, value);
                value = Math.max(0, value);

                if (port == 17) {
                    Entry.CODEino.LED_RED_VALUE = value;
                } else if (port == 18) {
                    Entry.CODEino.LED_GREEN_VALUE = value;
                } else if (port == 19) {
                    Entry.CODEino.LED_BLUE_VALUE = value;
                } else {
                    port = 0;
                }

                if (port > 0) {
                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }
                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                        data: value,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                    };
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.analogWrite(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        CODEino_set_rgb_add_value: {
            // Block UI : 컬러 LED의 <색> 색상에 <숫자> 만큼 더하기
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.CODEino_led_red, '17'], [Lang.Blocks.CODEino_led_green, '18'], [Lang.Blocks.CODEino_led_blue, '19']],
                value: '17',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                type: 'CODEino_set_rgb_add_value'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'CODEino_RGBLED_mode',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var port = script.getNumberField('PORT', script);
                var value = script.getNumberValue('VALUE', script);
                value = Math.min(255, value);
                value = Math.max(0, value);

                if (port == 17) {
                    Entry.CODEino.LED_RED_VALUE = Entry.CODEino.LED_RED_VALUE + value;
                    Entry.CODEino.LED_RED_VALUE = Math.min(255, Entry.CODEino.LED_RED_VALUE);
                    Entry.CODEino.LED_RED_VALUE = Math.max(0, Entry.CODEino.LED_RED_VALUE);
                    value = Entry.CODEino.LED_RED_VALUE;
                }
                if (port == 18) {
                    Entry.CODEino.LED_GREEN_VALUE = Entry.CODEino.LED_GREEN_VALUE + value;
                    Entry.CODEino.LED_GREEN_VALUE = Math.min(255, Entry.CODEino.LED_GREEN_VALUE);
                    Entry.CODEino.LED_GREEN_VALUE = Math.max(0, Entry.CODEino.LED_GREEN_VALUE);
                    value = Entry.CODEino.LED_GREEN_VALUE;
                }
                if (port == 19) {
                    Entry.CODEino.LED_BLUE_VALUE = Entry.CODEino.LED_BLUE_VALUE + value;
                    Entry.CODEino.LED_BLUE_VALUE = Math.min(255, Entry.CODEino.LED_BLUE_VALUE);
                    Entry.CODEino.LED_BLUE_VALUE = Math.max(0, Entry.CODEino.LED_BLUE_VALUE);
                    value = Entry.CODEino.LED_BLUE_VALUE;
                }

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                    data: value,
                    time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                };
                return script.callReturn();
            }
        },
        CODEino_rgb_set_color: {
            // Block UI : 컬러 LED의 색상을 <색상표> (으)로 정하기
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Color'
            }, {
                type: 'Indicator',
                img: 'block_icon/brush_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'CODEino_rgb_set_color'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'CODEino_RGBLED_mode',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var value = script.getStringField('VALUE');
                var sq = Entry.hw.sendQueue;

                Entry.CODEino.LED_RED_VALUE = parseInt(value.substr(1, 2), 16);
                Entry.CODEino.LED_GREEN_VALUE = parseInt(value.substr(3, 2), 16);
                Entry.CODEino.LED_BLUE_VALUE = parseInt(value.substr(5, 2), 16);

                var port = 17;
                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                    data: Entry.CODEino.LED_RED_VALUE,
                    time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                };

                port = 18;
                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                    data: Entry.CODEino.LED_GREEN_VALUE,
                    time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                };

                port = 19;
                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                    data: Entry.CODEino.LED_BLUE_VALUE,
                    time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                };
                return script.callReturn();
            }
        },
        CODEino_set_rgb_off: {
            // Block UI : 컬러 LED 끄기
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'CODEino_set_rgb_off'
            },
            class: 'CODEino_RGBLED_mode',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;

                var port = 17;
                Entry.CODEino.LED_RED_VALUE = 0;
                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                    data: Entry.CODEino.LED_RED_VALUE,
                    time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                };

                port = 18;
                Entry.CODEino.LED_GREEN_VALUE = 0;
                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                    data: Entry.CODEino.LED_GREEN_VALUE,
                    time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                };

                port = 19;
                Entry.CODEino.LED_BLUE_VALUE = 0;
                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                    data: Entry.CODEino.LED_BLUE_VALUE,
                    time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                };
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.analogWrite(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        CODEino_set__led_by_rgb: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'CODEino_set__led_by_rgb'
            },
            paramsKeyMap: {
                rValue: 0,
                gValue: 1,
                bValue: 2
            },
            class: 'CODEino_RGBLED_mode',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;

                Entry.CODEino.LED_RED_VALUE = script.getNumberValue('rValue');
                Entry.CODEino.LED_GREEN_VALUE = script.getNumberValue('gValue');
                Entry.CODEino.LED_BLUE_VALUE = script.getNumberValue('bValue');

                var port = 17;
                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                    data: Entry.CODEino.LED_RED_VALUE,
                    time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                };

                port = 18;
                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                    data: Entry.CODEino.LED_GREEN_VALUE,
                    time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                };

                port = 19;
                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                    data: Entry.CODEino.LED_BLUE_VALUE,
                    time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                };
                return script.callReturn();
            }
        },
        CODEino_led_by_value: {
            // Block UI : 컬러 LED 켜기
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'CODEino_led_by_value'
            },
            class: 'CODEino_RGBLED_mode',
            isNotFor: ['CODEino'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;

                var port = 17;
                Entry.CODEino.LED_RED_VALUE = 100;
                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                    data: Entry.CODEino.LED_RED_VALUE,
                    time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                };

                port = 18;
                Entry.CODEino.LED_GREEN_VALUE = 100;
                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                    data: Entry.CODEino.LED_GREEN_VALUE,
                    time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                };

                port = 19;
                Entry.CODEino.LED_BLUE_VALUE = 100;
                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                    data: Entry.CODEino.LED_BLUE_VALUE,
                    time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                };
                return script.callReturn();
            }
        },
        CODEino_get_number_sensor_value: {
            parent: 'arduino_get_number_sensor_value',
            isNotFor: ['CODEino'],
            def: {
                params: [{
                    type: 'arduino_get_sensor_number'
                }],
                type: 'CODEino_get_number_sensor_value'
            },
            class: 'arduino_value',
            syntax: { js: [], py: ['CODEino.get_number_sensor_value(%1)'] }
        },
        CODEino_toggle_led: {
            parent: 'arduino_toggle_led',
            isNotFor: ['CODEino'],
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }, null, null],
                type: 'CODEino_toggle_led'
            },
            class: 'arduino_set',
            syntax: { js: [], py: ['CODEino.toggle_led(%1)'] }
        },
        CODEino_toggle_pwm: {
            parent: 'arduino_toggle_pwm',
            isNotFor: ['CODEino'],
            def: {
                params: [{
                    type: 'arduino_get_pwm_port_number'
                }, {
                    type: 'arduino_text',
                    params: ['255']
                }, null],
                type: 'CODEino_toggle_pwm'
            },
            class: 'arduino_set',
            syntax: { js: [], py: ['CODEino.toggle_pwm(%1, %2)'] }
        }
        //endregion codeino 코드이노
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_codestar.js":
/*!*************************************************!*\
  !*** ./src/playground/blocks/block_codestar.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Codestar = {
    name: 'codestar',
    url: 'http://codestar.co.kr',
    imageName: 'codestar.png',
    title: {
        "ko": "코드스타",
        "en": "Codestar"
    },
    setZero: function setZero() {
        Entry.hw.sendQueue.readablePorts = [];
        for (var port = 0; port < 20; port++) {
            Entry.hw.sendQueue[port] = 0;
            Entry.hw.sendQueue.readablePorts.push(port);
        }
        Entry.hw.update();
    },
    monitorTemplate: {
        imgPath: 'hw/codestar.png',
        width: 333,
        height: 409,
        listPorts: {
            '13': { name: '진동모터', type: 'output', pos: { x: 0, y: 0 } },
            tilt: { name: '기울기센서', type: 'input', pos: { x: 0, y: 0 } }
        },
        ports: {
            '7': { name: '빨간색', type: 'output', pos: { x: 238, y: 108 } },
            '8': { name: '파란색', type: 'output', pos: { x: 265, y: 126 } },
            '9': { name: '3색 빨간색', type: 'output', pos: { x: 292, y: 34 } },
            '10': { name: '3색 녹색', type: 'output', pos: { x: 292, y: 34 } },
            '11': {
                name: '3색 파란색',
                type: 'output',
                pos: { x: 292, y: 34 }
            },
            '12': { name: '버튼', type: 'input', pos: { x: 248, y: 142 } },
            a0: { name: '왼쪽 벽감지', type: 'input', pos: { x: 24, y: 231 } },
            a2: { name: '마이크', type: 'input', pos: { x: 225, y: 67 } },
            a3: { name: '부저', type: 'output', pos: { x: 283, y: 105 } },
            a4: {
                name: '왼쪽 라인감지',
                type: 'input',
                pos: { x: 37, y: 353 }
            },
            a5: {
                name: '오른쪽 라인감지',
                type: 'input',
                pos: { x: 50, y: 368 }
            },
            a6: { name: '조도센서', type: 'input', pos: { x: 273, y: 22 } },
            a7: {
                name: '오른쪽 벽감지',
                type: 'input',
                pos: { x: 103, y: 381 }
            },
            temperature: {
                name: '온도센서',
                type: 'input',
                pos: { x: 311, y: 238 }
            },
            sonar: { name: '초음파센서', type: 'input', pos: { x: 7, y: 277 } },
            leftwheel: {
                name: '왼쪽 바퀴',
                type: 'output',
                pos: { x: 177, y: 370 }
            },
            rightwheel: {
                name: '오른쪽 바퀴',
                type: 'output',
                pos: { x: 83, y: 218 }
            }
        },
        mode: 'both'
    }
};

Entry.Codestar.getBlocks = function () {
    return {
        //region codestar 코드스타
        codestar_color_single: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '%1 LED %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['빨간색', 7], ['파란색', 8]]
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ARDUINO_on, 'on'], [Lang.Blocks.ARDUINO_off, 'off']]
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [7, 'on', null],
                type: 'codestar_color_single'
            },
            paramsKeyMap: {
                PORT: 0,
                ONOFF: 1
            },
            class: 'codestar_output_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                var port = script.getField('PORT');
                var onoff = script.getField('ONOFF');
                var value = onoff == 'on' ? 255 : 0;
                Entry.hw.setDigitalPortValue(port, value);
                return script.callReturn();
            }
        },
        codestar_3color: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '3색 LED %1 밝기 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['빨간색', 9], ['초록색', 10], ['파란색', 11]]
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [9, { type: 'number', params: [120] }, null],
                type: 'codestar_3color'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'codestar_output_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                var port = script.getField('PORT');
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 0);
                value = Math.min(value, 255);
                Entry.hw.setDigitalPortValue(port, value);
                return script.callReturn();
            }
        },
        codestar_vibration: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '진동모터 %1 %2',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ARDUINO_on, 'on'], [Lang.Blocks.ARDUINO_off, 'off']]
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: ['on', null],
                type: 'codestar_vibration'
            },
            paramsKeyMap: {
                ONOFF: 0
            },
            class: 'codestar_output_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                var port = 13;
                var onoff = script.getField('ONOFF');
                var value = onoff == 'on' ? 255 : 0;
                Entry.hw.setDigitalPortValue(port, value);
                return script.callReturn();
            }
        },
        codestar_buzzer: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '부저 톤%1 %2',
            params: [{
                type: 'Dropdown',
                options: [['G3', 1], ['A3', 2], ['B3', 3], ['C4', 4], ['D4', 5], ['E4', 6], ['F4', 7], ['G4', 8], ['A4', 9], ['B4', 10], ['C5', 11], ['D5', 12], ['E5', 13], ['F5', 14]]
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [4, null],
                type: 'codestar_buzzer'
            },
            paramsKeyMap: {
                TONE: 0
            },
            class: 'codestar_output_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                var tone = script.getField('TONE');
                Entry.hw.setDigitalPortValue(15, tone);
                return script.callReturn();
            }
        },
        codestar_buzzer_stop: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '부저 중지 %1',
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'codestar_buzzer_stop'
            },
            paramsKeyMap: {},
            class: 'codestar_output_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                Entry.hw.setDigitalPortValue(15, 24);
                return script.callReturn();
            }
        },
        codestar_servo: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '서보모터 %1 모터값 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['D3', 'D3'], ['D5', 'D5'], ['D6', 'D6'], ['D9', 'D9'], ['D10', 'D10'], ['D11', 'D11']]
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: ['D3', { type: 'number', params: [90] }, null],
                type: 'codestar_servo'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'codestar_motor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                var value = script.getNumberValue('VALUE');
                var sq = Entry.hw.sendQueue;
                sq.outport = script.getField('PORT');
                sq.value = 0;
                if (!isNaN(value)) {
                    var tmp = value;
                    if (value < 0) tmp = 0;
                    if (value > 255) tmp = 255;
                    sq.value = tmp;
                }
                return script.callReturn();
            }
        },
        codestar_drive: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '방향 %1 속도 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['앞으로', '0'], ['뒤로', '1'], ['왼쪽', '2'], ['오른쪽', '3']]
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: ['0', { type: 'number', params: [100] }, null],
                type: 'codestar_drive'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1
            },
            class: 'codestar_motor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                var value = script.getNumberValue('VALUE');
                var dir = Number(script.getField('DIRECTION'));
                var id = 0;
                //if(value == 0) value = 1;
                value = Math.round(value);
                value = Math.max(value, 0);
                value = Math.min(value, 255);

                value = Math.round(value / 30);
                //if(value == 0) value = 1;
                var query = (id << 7) + (dir << 5) + value;
                Entry.hw.setDigitalPortValue(14, query);
                return script.callReturn();
            }
        },
        codestar_wheel: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '방향 %1 바퀴속도 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['왼쪽', '0'], ['오른쪽', '1']]
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: ['0', { type: 'number', params: [100] }, null],
                type: 'codestar_wheel'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1
            },
            class: 'codestar_motor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                var value = script.getNumberValue('VALUE');
                var dir = Number(script.getField('DIRECTION'));
                var id = 1;
                //if(value == 0)value = 1;
                value = Math.round(value);
                value = Math.max(value, -255);
                value = Math.min(value, 255);
                if (value < 0) {
                    dir = 2 + dir;
                    value *= -1;
                }
                value = Math.round(value / 30);
                //if(value == 0) value = 1;
                var query = (id << 7) + (dir << 5) + value;
                Entry.hw.setDigitalPortValue(14, query);
                return script.callReturn();
            }
        },
        codestar_light: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '조도센서',
            params: [],
            events: {},
            def: {
                params: [],
                type: 'codestar_light'
            },
            paramsKeyMap: {},
            class: 'codestar_input_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                return Entry.hw.getAnalogPortValue('6');
            }
        },
        codestar_button: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '버튼',
            params: [],
            events: {},
            def: {
                params: [],
                type: 'codestar_button'
            },
            paramsKeyMap: {},
            class: 'codestar_input_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                return Entry.hw.getDigitalPortValue('12');
            }
        },
        codestar_ir: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: 'IR %1',
            params: [{
                type: 'Dropdown',
                options: [['A0', '0'], ['A4', '4'], ['A5', '5'], ['A7', '7']]
            }],
            events: {},
            def: {
                params: ['0'],
                type: 'codestar_ir'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'codestar_input_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                var port = script.getField('PORT');
                return Entry.hw.getAnalogPortValue(port);
            }
        },
        codestar_sonar: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '초음파센서',
            params: [],
            events: {},
            def: {
                params: [],
                type: 'codestar_sonar'
            },
            paramsKeyMap: {},
            class: 'codestar_input_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                return Entry.hw.portData.sonar;
            }
        },
        codestar_variable_R: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '가변저항 %1',
            params: [{
                type: 'Dropdown',
                options: [['A0', '0'], ['A1', '1'], ['A4', '4'], ['A5', '5']]
            }],
            events: {},
            def: {
                params: ['1'],
                type: 'codestar_variable_R'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'codestar_input_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                var port = script.getField('PORT');
                return Entry.hw.getAnalogPortValue(port);
            }
        },
        codestar_mic: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '마이크',
            params: [],
            events: {},
            def: {
                params: [],
                type: 'codestar_mic'
            },
            paramsKeyMap: {},
            class: 'codestar_input_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                return Entry.hw.getAnalogPortValue('2');
            }
        },
        codestar_temperature: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '온도센서',
            params: [],
            events: {},
            def: {
                params: [],
                type: 'codestar_temperature'
            },
            paramsKeyMap: {},
            class: 'codestar_input_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                return Entry.hw.portData.temperature;
            }
        },
        codestar_gyroscope: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '3축 자이로 %1 축 %2',
            params: [{
                type: 'Dropdown',
                options: [['x', 'x'], ['y', 'y'], ['z', 'z']]
            }, {
                type: 'Indicator',
                size: 11
            }],
            events: {},
            def: {
                params: ['x', null],
                type: 'codestar_gyroscope'
            },
            paramsKeyMap: {
                AXIS: 0
            },
            class: 'codestar_input_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                var axis = script.getField('AXIS');
                return Entry.hw.getAnalogPortValue('gyro_' + axis);
            }
        },
        codestar_geomagnetic: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '3축 지자기 %1 축 %2',
            params: [{
                type: 'Dropdown',
                options: [['x', 'x'], ['y', 'y'], ['z', 'z']]
            }, {
                type: 'Indicator',
                size: 11
            }],
            events: {},
            def: {
                params: ['x', null],
                type: 'codestar_geomagnetic'
            },
            paramsKeyMap: {
                AXIS: 0
            },
            class: 'codestar_input_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                var axis = script.getField('AXIS');
                return Entry.hw.getAnalogPortValue('geo_' + axis);
            }
        },
        codestar_irR: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: 'IR 리모콘',
            params: [],
            events: {},
            def: {
                params: [],
                type: 'codestar_irR'
            },
            paramsKeyMap: {},
            class: 'codestar_input_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                return Entry.hw.getDigitalPortValue('3');
            }
        },
        codestar_tilt: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '기울기센서',
            params: [],
            events: {},
            def: {
                params: [],
                type: 'codestar_tilt'
            },
            paramsKeyMap: {},
            class: 'codestar_input_sensor',
            isNotFor: ['codestar'],
            func: function func(sprite, script) {
                return Entry.hw.portData.tilt;
            }
        }
        //endregion codestar 코드스타
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_creamo.js":
/*!***********************************************!*\
  !*** ./src/playground/blocks/block_creamo.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

'use static';

Entry.Creamo = {
    name: 'creamo',
    url: 'http://www.creamo.co.kr',
    imageName: 'creamo.png',
    title: {
        "en": "creamo",
        "ko": "크리모"
    },
    setZero: function setZero() {
        Entry.hw.sendQueue.readablePorts = [];
        for (var port = 0; port < 20; port++) {
            Entry.hw.sendQueue[port] = 0;
            Entry.hw.sendQueue.readablePorts.push(port);
        }
        Entry.hw.update();
    },
    //수정
    sensorTypes: {
        ALIVE: 0,
        DIGITAL: 1,
        ANALOG: 2,
        PWM: 3,
        SERVO_PIN: 4,
        TONE: 5,
        PULSEIN: 6,
        ULTRASONIC: 7,
        TIMER: 8,
        DC_MOTOR_LEFT: 9,
        DC_MOTOR_RIGHT: 10
    },
    monitorTemplate: {
        imgPath: 'hw/arduino.png',
        width: 200,
        height: 200,
        listPorts: {
            '1': {
                name: Lang.Hw.port_en + ' LED1 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '2': {
                name: Lang.Hw.port_en + ' LED2 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '3': {
                name: Lang.Hw.port_en + ' 4 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '4': {
                name: Lang.Hw.port_en + ' 5 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '6': {
                name: Lang.Hw.port_en + ' 6 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '7': {
                name: Lang.Hw.port_en + ' 7 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '8': {
                name: Lang.Hw.port_en + ' 8 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '9': {
                name: Lang.Hw.port_en + ' 9 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '10': {
                name: Lang.Hw.port_en + ' 10 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '11': {
                name: Lang.Hw.port_en + ' 11 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '12': {
                name: Lang.Hw.port_en + ' 12 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '13': {
                name: Lang.Hw.port_en + ' 13 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a0: {
                name: Lang.Hw.port_en + ' A0 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a1: {
                name: Lang.Hw.port_en + ' A1 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a2: {
                name: Lang.Hw.port_en + ' A2 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a3: {
                name: Lang.Hw.port_en + ' A3 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a4: {
                name: Lang.Hw.port_en + ' A4 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a5: {
                name: Lang.Hw.port_en + ' A5 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            }
        },
        mode: 'both'
    }
};

Entry.Creamo.getBlocks = function () {
    return {
        //region creamo
        creamo_get_number_sensor_value: {
            parent: 'arduino_get_number_sensor_value',
            isNotFor: ['creamo'],
            def: {
                params: [{
                    type: 'arduino_get_sensor_number'
                }],
                type: 'creamo_get_number_sensor_value'
            },
            class: 'arduino_value',
            syntax: { js: [], py: ['creamo.get_number_sensor_value(%1)'] }
        },
        creamo_get_port_number: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['7', '7'], ['8', '8'], ['12', '12']],
                value: '7',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    textParams: [{
                        type: 'Dropdown',
                        options: [['7', '7'], ['8', '8'], ['12', '12']],
                        value: '7',
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_HW
                    }],
                    keyOption: 'arduino_get_port_number'
                }]
            }
        },
        //LED
        creamo_toggle_led: {
            parent: 'arduino_toggle_led',
            isNotFor: ['creamo'],
            def: {
                params: [{
                    type: 'creamo_get_port_number'
                }, null, null],
                type: 'creamo_toggle_led'
            },
            class: 'arduino_set',
            syntax: { js: [], py: ['creamo.toggle_led(%1)'] }
        },
        //모터
        creamo_toggle_motor: {
            parent: 'arduino_toggle_led',
            isNotFor: ['creamo'],
            def: {
                params: [{
                    type: 'creamo_motor_port_number'
                }, null, null],
                type: 'creamo_toggle_motor'
            },
            class: 'arduino_set',
            syntax: { js: [], py: ['creamo.toggle_led(%1)'] }
        },
        creamo_motor_port_number: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['6', '6'], ['9', '9']],
                value: '6',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    textParams: [{
                        type: 'Dropdown',
                        options: [['6', '6'], ['9', '9']],
                        value: '6',
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_HW
                    }],
                    keyOption: 'arduino_get_port_number'
                }]
            }
        },
        creamo_toggle_pwm: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'creamo_get_pwm_port_number'
                }, {
                    type: 'arduino_text',
                    params: ['255']
                }, null],
                type: 'creamo_toggle_pwm'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'arduino_set',
            isNotFor: ['creamo'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 0);
                value = Math.min(value, 255);
                Entry.hw.setDigitalPortValue(port, value);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'creamo.set_pin_digital(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        creamo_get_pwm_port_number: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['5', '5'], ['6', '6'], ['9', '9']],
                value: '5',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    textParams: [{
                        type: 'Dropdown',
                        options: [['5', '5'], ['6', '6'], ['9', '9']],
                        value: '3',
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_HW,
                        converter: Entry.block.converters.returnStringOrNumberByValue
                    }],
                    keyOption: 'arduino_get_pwm_port_number'
                }]
            }
        }
        //endregion creamo
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_dadublock.js":
/*!**************************************************!*\
  !*** ./src/playground/blocks/block_dadublock.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.DaduBlock = {
    name: 'dadublock',
    url: 'http://www.dadublock.com/',
    imageName: 'dadublock.png',
    title: {
        "ko": "다두블럭",
        "en": "DaduBlock"
    },
    setZero: function setZero() {
        if (!Entry.hw.sendQueue.SET) {
            Entry.hw.sendQueue = {
                GET: {},
                SET: {}
            };
        } else {
            var keySet = Object.keys(Entry.hw.sendQueue.SET);
            keySet.forEach(function (key) {
                Entry.hw.sendQueue.SET[key].data = 0;
                Entry.hw.sendQueue.SET[key].time = new Date().getTime();
            });
        }
        Entry.hw.update();
    },
    sensorTypes: {
        ALIVE: 0,
        DIGITAL: 1,
        ANALOG: 2,
        PWM: 3,
        SERVO_PIN: 4,
        TONE: 5,
        PULSEIN: 6,
        ULTRASONIC: 7,
        TIMER: 8
    },
    toneMap: {
        '1': [33, 65, 131, 262, 523, 1046, 2093, 4186],
        '2': [35, 69, 139, 277, 554, 1109, 2217, 4435],
        '3': [37, 73, 147, 294, 587, 1175, 2349, 4699],
        '4': [39, 78, 156, 311, 622, 1245, 2849, 4978],
        '5': [41, 82, 165, 330, 659, 1319, 2637, 5274],
        '6': [44, 87, 175, 349, 698, 1397, 2794, 5588],
        '7': [46, 92, 185, 370, 740, 1480, 2960, 5920],
        '8': [49, 98, 196, 392, 784, 1568, 3136, 6272],
        '9': [52, 104, 208, 415, 831, 1661, 3322, 6645],
        '10': [55, 110, 220, 440, 880, 1760, 3520, 7040],
        '11': [58, 117, 233, 466, 932, 1865, 3729, 7459],
        '12': [62, 123, 247, 494, 988, 1976, 3951, 7902]
    },
    BlockState: {}
};

Entry.DaduBlock_Car = {
    name: 'dadublock_car',
    url: 'http://www.dadublock.com/',
    imageName: 'dadublock_car.png',
    title: {
        "ko": "다두블럭 자동차",
        "en": "DaduBlock Car"
    },
    setZero: function setZero() {
        if (!Entry.hw.sendQueue.SET) {
            Entry.hw.sendQueue = {
                GET: {},
                SET: {}
            };
        } else {
            var keySet = Object.keys(Entry.hw.sendQueue.SET);
            keySet.forEach(function (key) {
                Entry.hw.sendQueue.SET[key].data = 0;
                Entry.hw.sendQueue.SET[key].time = new Date().getTime();
            });
        }
        Entry.hw.update();
    },
    sensorTypes: {
        ALIVE: 0,
        DIGITAL: 1,
        ANALOG: 2,
        PWM: 3,
        SERVO_PIN: 4,
        TONE: 5,
        PULSEIN: 6,
        ULTRASONIC: 7,
        TIMER: 8
    },
    toneMap: {
        '1': [33, 65, 131, 262, 523, 1046, 2093, 4186],
        '2': [35, 69, 139, 277, 554, 1109, 2217, 4435],
        '3': [37, 73, 147, 294, 587, 1175, 2349, 4699],
        '4': [39, 78, 156, 311, 622, 1245, 2849, 4978],
        '5': [41, 82, 165, 330, 659, 1319, 2637, 5274],
        '6': [44, 87, 175, 349, 698, 1397, 2794, 5588],
        '7': [46, 92, 185, 370, 740, 1480, 2960, 5920],
        '8': [49, 98, 196, 392, 784, 1568, 3136, 6272],
        '9': [52, 104, 208, 415, 831, 1661, 3322, 6645],
        '10': [55, 110, 220, 440, 880, 1760, 3520, 7040],
        '11': [58, 117, 233, 466, 932, 1865, 3729, 7459],
        '12': [62, 123, 247, 494, 988, 1976, 3951, 7902]
    },
    BlockState: {}
};

Entry.DaduBlock.getBlocks = function () {
    return {
        //region dadublock 다두블록
        dadublock_get_analog_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['A0', '0'], ['A1', '1'], ['A2', '2'], ['A3', '3']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'dadublock_get_analog_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'dadublockget',
            isNotFor: ['dadublock'],
            func: function func(sprite, script) {
                var port = script.getField('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                return ANALOG ? ANALOG[port] || 0 : 0;
            }
        },
        dadublock_get_analog_value_map: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['A0', '0'], ['A1', '1'], ['A2', '2'], ['A3', '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'dadublock_get_analog_value_map'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE2: 1,
                VALUE3: 2,
                VALUE4: 3,
                VALUE5: 4
            },
            class: 'dadublockget',
            isNotFor: ['dadublock'],
            func: function func(sprite, script) {
                var port = script.getField('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                var value2 = script.getNumberValue('VALUE2', script);
                var value3 = script.getNumberValue('VALUE3', script);
                var value4 = script.getNumberValue('VALUE4', script);
                var value5 = script.getNumberValue('VALUE5', script);

                var result = ANALOG[port] || 0;
                if (value2 > value3) {
                    var swap = value2;
                    value2 = value3;
                    value3 = swap;
                }
                if (value4 > value5) {
                    var swap = value4;
                    value4 = value5;
                    value5 = swap;
                }
                result -= value2;
                result = result * ((value5 - value4) / (value3 - value2));
                result += value4;
                result = Math.min(value5, result);
                result = Math.max(value4, result);

                return result;
            }
        },
        dadublock_get_ultrasonic_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['7', '7'], ['8', '8'], ['14', '14'], ['15', '15'], ['16', '16'], ['~5', '5'], ['~6', '6'], ['~9', '9'], ['~10', '10']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['7', '7'], ['8', '8'], ['14', '14'], ['15', '15'], ['16', '16'], ['~5', '5'], ['~6', '6'], ['~9', '9'], ['~10', '10']],
                value: '3',
                fontSize: 11
            }],
            events: {},
            def: {
                params: ['2', '3'],
                type: 'dadublock_get_ultrasonic_value'
            },
            paramsKeyMap: {
                PORT1: 0,
                PORT2: 1
            },
            class: 'dadublockget',
            isNotFor: ['dadublock'],
            func: function func(sprite, script) {
                var port1 = script.getField('PORT1', script);
                var port2 = script.getField('PORT2', script);
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                delete Entry.hw.sendQueue['SET'][port1];
                delete Entry.hw.sendQueue['SET'][port2];

                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.DaduBlock.sensorTypes.ULTRASONIC] = {
                    port: [port1, port2],
                    time: new Date().getTime()
                };
                return Entry.hw.portData.ULTRASONIC || 0;
            }
        },
        dadublock_get_digital: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            params: [{
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['7', '7'], ['8', '8'], ['14', '14'], ['15', '15'], ['16', '16'], ['~5', '5'], ['~6', '6'], ['~9', '9'], ['~10', '10']],
                value: '2',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'dadublock_get_digital'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'dadublockget',
            isNotFor: ['dadublock'],
            func: function func(sprite, script) {
                //var port = script.getNumberValue("PORT", script);
                var port = script.getField('PORT', script);
                var DIGITAL = Entry.hw.portData.DIGITAL;
                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.DaduBlock.sensorTypes.DIGITAL] = {
                    port: port,
                    time: new Date().getTime()
                };
                return DIGITAL ? DIGITAL[port] || 0 : 0;
            }
        },
        dadublock_toggle_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['7', '7'], ['8', '8'], ['14', '14'], ['15', '15'], ['16', '16'], ['~5', '5'], ['~6', '6'], ['~9', '9'], ['~10', '10']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['켜기', 'on'], ['끄기', 'off']],
                value: 'on',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'dadublock_toggle_led'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'dadublockset',
            isNotFor: ['dadublock'],
            func: function func(sprite, script) {
                //var port = script.getNumberValue("PORT");
                var port = script.getField('PORT');
                var value = script.getField('VALUE');
                if (value == 'on') {
                    value = 255;
                } else {
                    value = 0;
                }
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.DaduBlock.sensorTypes.DIGITAL,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            }
        },
        dadublock_digital_pwm: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['~5', '5'], ['~6', '6'], ['~9', '9'], ['~10', '10']],
                value: '5',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'dadublock_digital_pwm'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'dadublockset',
            isNotFor: ['dadublock'],
            func: function func(sprite, script) {
                //var port = script.getNumberValue("PORT");
                var port = script.getField('PORT');
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 0);
                value = Math.min(value, 255);
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.DaduBlock.sensorTypes.PWM,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            },
            syntax: { js: [], py: ['Arduino.analogWrite(%1, %2)'] }
        },
        dadublock_set_servo: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['7', '7'], ['8', '8'], ['14', '14'], ['15', '15'], ['16', '16'], ['~5', '5'], ['~6', '6'], ['~9', '9'], ['~10', '10']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'dadublock_set_servo'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'dadublockset',
            isNotFor: ['dadublock'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                //var port = script.getNumberValue("PORT", script);
                var port = script.getField('PORT', script);
                var value = script.getNumberValue('VALUE', script);
                value = Math.min(180, value);
                value = Math.max(0, value);

                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.DaduBlock.sensorTypes.SERVO_PIN,
                    data: value,
                    time: new Date().getTime()
                };

                return script.callReturn();
            },
            syntax: { js: [], py: ['Arduino.servomotorWrite(%1, %2)'] }
        },
        dadublock_set_tone: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['7', '7'], ['8', '8'], ['14', '14'], ['15', '15'], ['16', '16'], ['~5', '5'], ['~6', '6'], ['~9', '9'], ['~10', '10']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['무음', '0'], ['도', '1'], ['도#(레♭)', '2'], ['레', '3'], ['레#(미♭)', '4'], ['미', '5'], ['파', '6'], ['파#(솔♭)', '7'], ['솔', '8'], ['솔#(라♭)', '9'], ['라', '10'], ['라#(시♭)', '11'], ['시', '12']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['1', '0'], ['2', '1'], ['3', '2'], ['4', '3'], ['5', '4'], ['6', '5']],
                value: '3',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'dadublock_set_tone'
            },
            paramsKeyMap: {
                PORT: 0,
                NOTE: 1,
                OCTAVE: 2,
                DURATION: 3
            },
            class: 'dadublockset',
            isNotFor: ['dadublock'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                //var port = script.getNumberValue("PORT", script);
                var port = script.getField('PORT', script);

                if (!script.isStart) {
                    var note = script.getNumberField('NOTE', script);
                    var duration = script.getNumberValue('DURATION', script);

                    if (duration < 0) {
                        duration = 0;
                    }

                    if (note === 0 || duration === 0) {
                        sq['SET'][port] = {
                            type: Entry.DaduBlock.sensorTypes.TONE,
                            data: 0,
                            time: new Date().getTime()
                        };
                        return script.callReturn();
                    }

                    var octave = script.getNumberField('OCTAVE', script);
                    var value = Entry.DaduBlock.toneMap[note][octave];

                    duration = duration * 1000;
                    script.isStart = true;
                    script.timeFlag = 1;

                    if (!sq['SET']) {
                        sq['SET'] = {};
                    }

                    sq['SET'][port] = {
                        type: Entry.DaduBlock.sensorTypes.TONE,
                        data: {
                            value: value,
                            duration: duration
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, duration + 32);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    sq['SET'][port] = {
                        type: Entry.DaduBlock.sensorTypes.TONE,
                        data: 0,
                        time: new Date().getTime()
                    };
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            }
        },
        dadublock_car_get_analog_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['A0', '0'], ['A1', '1'], ['A2', '2'], ['A3', '3']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'dadublock_car_get_analog_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'dadublock_car_get',
            isNotFor: ['dadublock_car'],
            func: function func(sprite, script) {
                var port = script.getField('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                return ANALOG ? ANALOG[port] || 0 : 0;
            }
        },
        dadublock_car_get_analog_value_map: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['A0', '0'], ['A1', '1'], ['A2', '2'], ['A3', '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'dadublock_car_get_analog_value_map'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE2: 1,
                VALUE3: 2,
                VALUE4: 3,
                VALUE5: 4
            },
            class: 'dadublock_car_get',
            isNotFor: ['dadublock_car'],
            func: function func(sprite, script) {
                var port = script.getField('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                var value2 = script.getNumberValue('VALUE2', script);
                var value3 = script.getNumberValue('VALUE3', script);
                var value4 = script.getNumberValue('VALUE4', script);
                var value5 = script.getNumberValue('VALUE5', script);

                var result = ANALOG[port] || 0;
                if (value2 > value3) {
                    var swap = value2;
                    value2 = value3;
                    value3 = swap;
                }
                if (value4 > value5) {
                    var swap = value4;
                    value4 = value5;
                    value5 = swap;
                }
                result -= value2;
                result = result * ((value5 - value4) / (value3 - value2));
                result += value4;
                result = Math.min(value5, result);
                result = Math.max(value4, result);

                return result;
            }
        },
        dadublock_car_get_ultrasonic_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['7', '7'], ['8', '8'], ['14', '14'], ['15', '15'], ['16', '16'], ['~5', '5'], ['~6', '6'], ['~9', '9'], ['~10', '10']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['7', '7'], ['8', '8'], ['14', '14'], ['15', '15'], ['16', '16'], ['~5', '5'], ['~6', '6'], ['~9', '9'], ['~10', '10']],
                value: '3',
                fontSize: 11
            }],
            events: {},
            def: {
                params: ['2', '3'],
                type: 'dadublock_car_get_ultrasonic_value'
            },
            paramsKeyMap: {
                PORT1: 0,
                PORT2: 1
            },
            class: 'dadublock_car_get',
            isNotFor: ['dadublock_car'],
            func: function func(sprite, script) {
                var port1 = script.getField('PORT1', script);
                var port2 = script.getField('PORT2', script);
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                delete Entry.hw.sendQueue['SET'][port1];
                delete Entry.hw.sendQueue['SET'][port2];

                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.DaduBlock.sensorTypes.ULTRASONIC] = {
                    port: [port1, port2],
                    time: new Date().getTime()
                };
                return Entry.hw.portData.ULTRASONIC || 0;
            }
        },
        dadublock_car_get_digital: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            params: [{
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['7', '7'], ['8', '8'], ['14', '14'], ['15', '15'], ['16', '16'], ['~5', '5'], ['~6', '6'], ['~9', '9'], ['~10', '10']],
                value: '2',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'dadublock_car_get_digital'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'dadublock_car_get',
            isNotFor: ['dadublock_car'],
            func: function func(sprite, script) {
                //var port = script.getNumberValue("PORT", script);
                var port = script.getField('PORT', script);
                var DIGITAL = Entry.hw.portData.DIGITAL;
                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.DaduBlock.sensorTypes.DIGITAL] = {
                    port: port,
                    time: new Date().getTime()
                };
                return DIGITAL ? DIGITAL[port] || 0 : 0;
            }
        },
        dadublock_car_toggle_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['7', '7'], ['8', '8'], ['14', '14'], ['15', '15'], ['16', '16'], ['~5', '5'], ['~6', '6'], ['~9', '9'], ['~10', '10']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['켜기', 'on'], ['끄기', 'off']],
                value: 'on',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'dadublock_car_toggle_led'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'dadublock_car_set',
            isNotFor: ['dadublock_car'],
            func: function func(sprite, script) {
                //var port = script.getNumberValue("PORT");
                var port = script.getField('PORT');
                var value = script.getField('VALUE');
                if (value == 'on') {
                    value = 255;
                } else {
                    value = 0;
                }
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.DaduBlock.sensorTypes.DIGITAL,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            }
        },
        dadublock_car_digital_pwm: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['~5', '5'], ['~6', '6'], ['~9', '9'], ['~10', '10']],
                value: '5',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'dadublock_car_digital_pwm'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'dadublock_car_set',
            isNotFor: ['dadublock_car'],
            func: function func(sprite, script) {
                //var port = script.getNumberValue("PORT");
                var port = script.getField('PORT');
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 0);
                value = Math.min(value, 255);
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.DaduBlock.sensorTypes.PWM,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            },
            syntax: { js: [], py: ['Arduino.analogWrite(%1, %2)'] }
        },
        dadublock_car_set_servo: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['7', '7'], ['8', '8'], ['14', '14'], ['15', '15'], ['16', '16'], ['~5', '5'], ['~6', '6'], ['~9', '9'], ['~10', '10']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'dadublock_car_set_servo'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'dadublock_car_set',
            isNotFor: ['dadublock_car'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                //var port = script.getNumberValue("PORT", script);
                var port = script.getField('PORT', script);
                var value = script.getNumberValue('VALUE', script);
                value = Math.min(180, value);
                value = Math.max(0, value);

                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.DaduBlock.sensorTypes.SERVO_PIN,
                    data: value,
                    time: new Date().getTime()
                };

                return script.callReturn();
            },
            syntax: { js: [], py: ['Arduino.servomotorWrite(%1, %2)'] }
        },
        dadublock_car_set_tone: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['7', '7'], ['8', '8'], ['14', '14'], ['15', '15'], ['16', '16'], ['~5', '5'], ['~6', '6'], ['~9', '9'], ['~10', '10']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['무음', '0'], ['도', '1'], ['도#(레♭)', '2'], ['레', '3'], ['레#(미♭)', '4'], ['미', '5'], ['파', '6'], ['파#(솔♭)', '7'], ['솔', '8'], ['솔#(라♭)', '9'], ['라', '10'], ['라#(시♭)', '11'], ['시', '12']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['1', '0'], ['2', '1'], ['3', '2'], ['4', '3'], ['5', '4'], ['6', '5']],
                value: '3',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'dadublock_car_set_tone'
            },
            paramsKeyMap: {
                PORT: 0,
                NOTE: 1,
                OCTAVE: 2,
                DURATION: 3
            },
            class: 'dadublock_car_set',
            isNotFor: ['dadublock_car'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                //var port = script.getNumberValue("PORT", script);
                var port = script.getField('PORT', script);

                if (!script.isStart) {
                    var note = script.getNumberField('NOTE', script);
                    var duration = script.getNumberValue('DURATION', script);

                    if (duration < 0) {
                        duration = 0;
                    }

                    if (note === 0 || duration === 0) {
                        sq['SET'][port] = {
                            type: Entry.DaduBlock.sensorTypes.TONE,
                            data: 0,
                            time: new Date().getTime()
                        };
                        return script.callReturn();
                    }

                    var octave = script.getNumberField('OCTAVE', script);
                    var value = Entry.DaduBlock.toneMap[note][octave];

                    duration = duration * 1000;
                    script.isStart = true;
                    script.timeFlag = 1;

                    if (!sq['SET']) {
                        sq['SET'] = {};
                    }

                    sq['SET'][port] = {
                        type: Entry.DaduBlock.sensorTypes.TONE,
                        data: {
                            value: value,
                            duration: duration
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, duration + 32);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    sq['SET'][port] = {
                        type: Entry.DaduBlock.sensorTypes.TONE,
                        data: 0,
                        time: new Date().getTime()
                    };
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            }
        },
        dadublock_car_motor_stop: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['~5,~6', '1'], ['~9,~10', '2']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'dadublock_car_motor_stop'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'dadublock_car_motor',
            isNotFor: ['dadublock_car'],
            func: function func(sprite, script) {
                var port = script.getField('PORT');
                if (port == 1) {
                    //~5,~6번을 선택했을때
                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }
                    Entry.hw.sendQueue['SET'][5] = {
                        type: Entry.DaduBlock.sensorTypes.PWM,
                        data: 0,
                        time: new Date().getTime()
                    };

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }
                    Entry.hw.sendQueue['SET'][6] = {
                        type: Entry.DaduBlock.sensorTypes.PWM,
                        data: 0,
                        time: new Date().getTime()
                    };
                    return script.callReturn();
                } else if (port == 2) {
                    //~9,~10번을 선택했을때
                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }
                    Entry.hw.sendQueue['SET'][9] = {
                        type: Entry.DaduBlock.sensorTypes.PWM,
                        data: 0,
                        time: new Date().getTime()
                    };

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }
                    Entry.hw.sendQueue['SET'][10] = {
                        type: Entry.DaduBlock.sensorTypes.PWM,
                        data: 0,
                        time: new Date().getTime()
                    };
                    return script.callReturn();
                }
            }
        },
        dadublock_car_motor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['~5,~6', '1'], ['~9,~10', '2']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['정방향', '1'], ['역방향', '2']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'text',
                    params: ['50'] // %로 바꿈 0~100% 모터 속도
                }, null],
                type: 'dadublock_car_motor'
            },
            paramsKeyMap: {
                PORT: 0,
                DIRECTION: 1,
                VALUE: 2
            },
            class: 'dadublock_car_motor',
            isNotFor: ['dadublock_car'],
            func: function func(sprite, script) {
                var port = script.getField('PORT');
                var direction = script.getField('DIRECTION');
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 0);
                value = Math.min(value, 100);
                value = value * 1.5; //최대값을 150으로 제한
                if (port == 1) {
                    //~5,~6번을 선택했을때
                    if (direction == 1) {
                        if (!Entry.hw.sendQueue['SET']) {
                            Entry.hw.sendQueue['SET'] = {};
                        }
                        Entry.hw.sendQueue['SET'][5] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: value,
                            time: new Date().getTime()
                        };

                        if (!Entry.hw.sendQueue['SET']) {
                            Entry.hw.sendQueue['SET'] = {};
                        }
                        Entry.hw.sendQueue['SET'][6] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: 0,
                            time: new Date().getTime()
                        };
                        return script.callReturn();
                    } else if (direction == 2) {
                        if (!Entry.hw.sendQueue['SET']) {
                            Entry.hw.sendQueue['SET'] = {};
                        }
                        Entry.hw.sendQueue['SET'][5] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: 0,
                            time: new Date().getTime()
                        };

                        if (!Entry.hw.sendQueue['SET']) {
                            Entry.hw.sendQueue['SET'] = {};
                        }
                        Entry.hw.sendQueue['SET'][6] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: value,
                            time: new Date().getTime()
                        };
                        return script.callReturn();
                    }
                } else if (port == 2) {
                    //~9,~10번을 선택했을때
                    if (direction == 1) {
                        if (!Entry.hw.sendQueue['SET']) {
                            Entry.hw.sendQueue['SET'] = {};
                        }
                        Entry.hw.sendQueue['SET'][9] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: value,
                            time: new Date().getTime()
                        };

                        if (!Entry.hw.sendQueue['SET']) {
                            Entry.hw.sendQueue['SET'] = {};
                        }
                        Entry.hw.sendQueue['SET'][10] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: 0,
                            time: new Date().getTime()
                        };
                        return script.callReturn();
                    } else if (direction == 2) {
                        if (!Entry.hw.sendQueue['SET']) {
                            Entry.hw.sendQueue['SET'] = {};
                        }
                        Entry.hw.sendQueue['SET'][9] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: 0,
                            time: new Date().getTime()
                        };

                        if (!Entry.hw.sendQueue['SET']) {
                            Entry.hw.sendQueue['SET'] = {};
                        }
                        Entry.hw.sendQueue['SET'][10] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: value,
                            time: new Date().getTime()
                        };
                        return script.callReturn();
                    }
                }
            }
        },
        dadublock_car_get_irsensor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            params: [{
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['7', '7'], ['8', '8'], ['14', '14'], ['15', '15'], ['16', '16'], ['~5', '5'], ['~6', '6'], ['~9', '9'], ['~10', '10']],
                value: '2',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'dadublock_car_get_irsensor'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'dadublock_car_motor',
            isNotFor: ['dadublock_car'],
            func: function func(sprite, script) {
                //var port = script.getNumberValue("PORT", script);
                var port = script.getField('PORT', script);
                var DIGITAL = Entry.hw.portData.DIGITAL;
                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.DaduBlock.sensorTypes.DIGITAL] = {
                    port: port,
                    time: new Date().getTime()
                };
                return DIGITAL ? DIGITAL[port] || 0 : 0;
            }
        }
        //endregion dadublock 다두블록
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_dplay.js":
/*!**********************************************!*\
  !*** ./src/playground/blocks/block_dplay.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.dplay = {
    name: 'dplay',
    url: 'http://dplay.cc',
    imageName: 'dplay.png',
    title: {
        "ko": "디플레이",
        "en": "DPLAY"
    },
    vel_value: 255,
    Left_value: 255,
    Right_value: 255,
    setZero: Entry.Arduino.setZero,
    timeouts: [],
    removeTimeout: function removeTimeout(id) {
        clearTimeout(id);
        var timeouts = this.timeouts;
        var index = timeouts.indexOf(id);
        if (index >= 0) {
            timeouts.splice(index, 1);
        }
    },
    removeAllTimeouts: function removeAllTimeouts() {
        var timeouts = this.timeouts;
        for (var i in timeouts) {
            clearTimeout(timeouts[i]);
        }
        this.timeouts = [];
    },
    monitorTemplate: {
        imgPath: 'hw/dplay.png',
        width: 500,
        height: 600,
        listPorts: {
            '2': {
                name: Lang.Hw.port_en + ' 2 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '3': {
                name: Lang.Hw.port_en + ' 3 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '4': {
                name: Lang.Hw.port_en + ' 4 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '5': {
                name: Lang.Hw.port_en + ' 5 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '6': {
                name: Lang.Hw.port_en + ' 6 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '7': {
                name: Lang.Hw.port_en + ' 7 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '8': {
                name: Lang.Hw.port_en + ' 8 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '9': {
                name: Lang.Hw.port_en + ' 9 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '10': {
                name: Lang.Hw.port_en + ' 10 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '11': {
                name: Lang.Hw.port_en + ' 11 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '12': {
                name: Lang.Hw.port_en + ' 12 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '13': {
                name: Lang.Hw.port_en + ' 13 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a0: {
                name: Lang.Hw.port_en + ' A0 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a1: {
                name: Lang.Hw.port_en + ' A1 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a2: {
                name: Lang.Hw.port_en + ' A2 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a3: {
                name: Lang.Hw.port_en + ' A3 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a4: {
                name: Lang.Hw.port_en + ' A4 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a5: {
                name: Lang.Hw.port_en + ' A5 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            }
        },
        mode: 'both'
    }
};

Entry.dplay.getBlocks = function () {
    return {
        //region dplay 디플레이
        dplay_get_number_sensor_value: {
            parent: 'arduino_get_number_sensor_value',
            isNotFor: ['dplay'],
            def: {
                params: [{
                    type: 'arduino_get_sensor_number'
                }],
                type: 'dplay_get_number_sensor_value'
            },
            class: 'dplay_get',
            syntax: { js: [], py: ['Dplay.sensor_value(%1)'] }
        },
        dplay_get_dust_sensor_value: {
            parent: 'arduino_get_number_sensor_value',
            template: '아날로그 %1 번  먼지 센서값',
            isNotFor: ['dplay'],
            def: {
                params: [{
                    type: 'arduino_get_sensor_number'
                }],
                type: 'dplay_get_dust_sensor_value'
            },
            class: 'dplay_get',
            syntax: { js: [], py: ['Dplay.dust_sensor_value(%1)'] }
        },
        dplay_get_CO2_sensor_value: {
            parent: 'arduino_get_number_sensor_value',
            template: '아날로그 %1 번  이산화탄소 센서값',
            isNotFor: ['dplay'],
            def: {
                params: [{
                    type: 'arduino_get_sensor_number'
                }],
                type: 'dplay_get_CO2_sensor_value'
            },
            class: 'dplay_get',
            syntax: { js: [], py: ['Dplay.co2_sensor_value(%1)'] }
        },
        dplay_get_gas_sensor_value: {
            parent: 'arduino_get_number_sensor_value',
            isNotFor: ['dplay'],
            template: '아날로그 %1 번 가스 센서값',
            def: {
                params: [{
                    type: 'arduino_get_sensor_number'
                }],
                type: 'dplay_get_gas_sensor_value',
                id: 'hh5b'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'dplay_get',
            func: function func(sprite, script) {
                var signal = script.getValue('VALUE', script);
                return Entry.hw.getAnalogPortValue(signal[1]);
            },
            syntax: { js: [], py: ['Dplay.gas_sensor_value(%1)'] }
        },
        dplay_convert_scale: {
            parent: 'arduino_convert_scale',
            isNotFor: ['dplay'],
            def: {
                params: [{
                    type: 'arduino_get_number_sensor_value',
                    params: [{
                        type: 'arduino_get_sensor_number',
                        id: 'bl5e'
                    }]
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'dplay_convert_scale'
            },
            class: 'dplay_get',
            syntax: { js: [], py: ['Dplay.convert_scale(%1, %2, %3, %4, %5)'] }
        },
        dplay_get_value: {
            color: '#00979D',
            fontColor: '#FFF',
            skeleton: 'basic_string_field',
            statements: [],
            template: '아날로그 %1 번  %2 센서값',
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [['적외선', 'INFR'], ['가변저항', 'ADJU'], ['빛센서', 'LIGHT'], ['온도센서', 'TEMP'], ['조이스틱 X', 'JOYSX'], ['조이스틱 Y', 'JOYSY']],
                value: 'INFR',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_sensor_number'
                }, null],
                type: 'dplay_get_value',
                id: 'hh5b'
            },
            paramsKeyMap: {
                VALUE: 0,
                OPERATOR: 1
            },
            class: 'dplay_get',
            isNotFor: ['dplay'],
            func: function func(sprite, script) {
                var signal = script.getValue('VALUE', script);
                return Entry.hw.getAnalogPortValue(signal[1]);
            },
            syntax: { js: [], py: ['Dplay.value(%1, %2)'] }
        },
        dplay_get_digital_value: {
            parent: 'arduino_get_digital_value',
            isNotFor: ['dplay'],
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }],
                type: 'dplay_get_digital_value'
            },
            class: 'dplay_get',
            syntax: { js: [], py: ['Dplay.digital_value(%1)'] }
        },
        dplay_get_switch_status: {
            color: '#00979D',
            fontColor: '#FFF',
            skeleton: 'basic_boolean_field',
            statements: [],
            template: '디지털 %1 번 스위치가 %2  ',
            params: [{
                type: 'Dropdown',
                options: [['2', '2'], ['4', '4']],
                value: '2',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Dropdown',
                options: [['눌림', 'ON'], ['열림', 'OFF']],
                value: 'ON',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'dplay_get_switch_status'
            },
            paramsKeyMap: {
                PORT: 0,
                STATUS: 1
            },
            class: 'dplay_get',
            isNotFor: ['dplay'],
            func: function func(sprite, script) {
                var port1 = script.getField('PORT');
                var port = 2;
                if (port1 == '2') port = 2;else if (port1 == '4') port = 4;
                var value1 = script.getField('STATUS');
                if (value1 == 'ON') return Entry.hw.getDigitalPortValue(port) == 1 ? 1 : 0;else return Entry.hw.getDigitalPortValue(port) == 0 ? 1 : 0;
            },
            syntax: { js: [], py: ['Dplay.switch_status(%1, %2)'] }
        },
        dplay_get_tilt: {
            color: '#00979D',
            fontColor: '#FFF',
            skeleton: 'basic_boolean_field',
            statements: [],
            template: '디지털  %1 번 기울기센서가 %2  ',
            params: [{
                type: 'Dropdown',
                options: [['2', '2'], ['4', '4']],
                value: '2',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Dropdown',
                options: [['왼쪽', 'LEFT'], ['오른쪽', 'LIGHT']],
                value: 'LEFT',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'dplay_get_tilt'
            },
            paramsKeyMap: {
                PORT: 0,
                STATUS: 1
            },
            class: 'dplay_get',
            isNotFor: ['dplay'],
            func: function func(sprite, script) {
                var port1 = script.getField('PORT');
                var port = 2;
                if (port1 == '2') port = 2;else if (port1 == '4') port = 4;
                var value1 = script.getField('STATUS');
                if (value1 == 'LIGHT') return Entry.hw.getDigitalPortValue(port) == 1 ? 1 : 0;else return Entry.hw.getDigitalPortValue(port) == 0 ? 1 : 0;
            },
            syntax: { js: [], py: ['Dplay.tilt(%1, %2)'] }
        },
        dplay_toggle_led: {
            parent: 'arduino_toggle_led',
            isNotFor: ['dplay'],
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }, null, null],
                type: 'dplay_toggle_led'
            },
            class: 'dplay_set',
            syntax: { js: [], py: ['Dplay.toggle_led(%1)'] }
        },
        dplay_toggle_pwm: {
            parent: 'arduino_toggle_pwm',
            isNotFor: ['dplay'],
            def: {
                params: [{
                    type: 'arduino_get_pwm_port_number'
                }, {
                    type: 'arduino_text',
                    params: ['255']
                }, null],
                type: 'dplay_toggle_pwm'
            },
            class: 'dplay_set',
            syntax: { js: [], py: ['Dplay.toggle_pwm(%1, %2)'] }
        },
        dplay_select_led: {
            color: '#00979D',
            fontColor: '#FFF',
            skeleton: 'basic',
            statements: [],
            template: '디지털 %1 LED 상태를 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['7', '7'], ['8', '8'], ['12', '12'], ['13', '13']],
                value: '7',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Dropdown',
                options: [['켜기', 'ON'], ['끄기', 'OFF']],
                value: 'ON',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'dplay_select_led'
            },
            paramsKeyMap: {
                PORT: 0,
                OPERATOR: 1
            },
            class: 'dplay_set',
            isNotFor: ['dplay'],
            func: function func(sprite, script) {
                var port1 = script.getField('PORT');
                var port = 7;
                if (port1 == '7') port = 7;else if (port1 == '8') port = 8;else if (port1 == '12') port = 12;else if (port1 == '13') port = 13;
                var operator = script.getField('OPERATOR');
                var value = operator == 'ON' ? 255 : 0;
                Entry.hw.setDigitalPortValue(port, value);
                return script.callReturn();
            },
            syntax: { js: [], py: ['Dplay.select_led(%1, %2)'] }
        },
        dplay_DCmotor: {
            color: '#00979D',
            fontColor: '#FFF',
            skeleton: 'basic',
            statements: [],
            template: '%1  DC모터 상태를 %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['왼쪽', '1'], ['오른쪽', '2'], ['양쪽', '3']],
                value: '1',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Dropdown',
                options: [['정방향', 'FRONT'], ['역방향', 'REAR'], ['정지', 'OFF']],
                value: 'FRONT',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'dplay_DCmotor'
            },
            paramsKeyMap: {
                PORT: 0,
                OPERATOR: 1
            },
            class: 'dplay_set',
            isNotFor: ['dplay'],
            func: function func(sprite, script) {
                var port = script.getField('PORT');
                var port1 = 0;
                var port2 = 0;
                var port3 = 0;
                var port4 = 0;
                if (port == '1') {
                    port1 = 3;
                    port2 = 5;
                } else if (port == '2') {
                    port1 = 6;
                    port2 = 11;
                } else if (port == '3') {
                    port1 = 3;
                    port2 = 5;
                    port3 = 11;
                    port4 = 6;
                }
                var temp = Entry.dplay.vel_value;
                var operator = script.getField('OPERATOR');
                var value1 = 0;
                var value2 = 0;
                var value3 = 0;
                var value4 = 0;
                if (operator == 'FRONT') {
                    value1 = temp;
                    value2 = 0;
                } else if (operator == 'REAR') {
                    value1 = 0;
                    value2 = temp;
                } else if (operator == 'OFF') {
                    value1 = 0;
                    value2 = 0;
                }
                Entry.hw.setDigitalPortValue(port1, value2);
                Entry.hw.setDigitalPortValue(port2, value1);
                Entry.hw.setDigitalPortValue(port3, value2);
                Entry.hw.setDigitalPortValue(port4, value1);
                return script.callReturn();
            },
            syntax: { js: [], py: ['Dplay.dc_motor(%1, %2)'] }
        },
        dplay_DCmotor_speed: {
            color: '#00979D',
            fontColor: '#FFF',
            skeleton: 'basic',
            statements: [],
            template: '%1 DC모터 속도를 %2(으)로 정하기 %3',
            params: [{
                type: 'Dropdown',
                options: [['왼쪽', '1'], ['오른쪽', '2'], ['양쪽', '3']],
                value: '1',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['100']
                }, null],
                type: 'dplay_DCmotor_speed'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'dplay_set',
            isNotFor: ['dplay'],
            func: function func(sprite, script) {
                var port1 = 0;
                var port2 = 0;
                var port3 = 0;
                var port4 = 0;
                var value1 = 0;
                var value2 = 0;
                var result = 0;
                var port = script.getField('PORT');
                if (port == '1') {
                    port1 = 3;
                    port2 = 5;
                } else if (port == '2') {
                    port1 = 11;
                    port2 = 6;
                } else if (port == '3') {
                    port1 = 3;
                    port2 = 5;
                    port3 = 11;
                    port4 = 6;
                }
                var operator = script.getNumberValue('VALUE', script);
                operator = Math.max(operator, -100);
                operator = Math.min(operator, 100);
                if (operator == 0) {
                    value1 = 0;
                    value2 = 0;
                    Entry.dplay.vel_value = value2;
                } else if (operator > 0) {
                    result = operator + 155;
                    result = Math.round(result);
                    value1 = 0;
                    value2 = result;
                    Entry.dplay.vel_value = value2;
                } else if (operator < 0) {
                    result = operator - 155;
                    result = Math.round(result);
                    value1 = -result;
                    value2 = 0;
                    Entry.dplay.vel_value = value1;
                }
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    var timeValue = 50;
                    var timer = setTimeout(function () {
                        script.timeFlag = 2;
                        Entry.dplay.removeTimeout(timer);
                    }, timeValue);
                    Entry.dplay.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    Entry.hw.setDigitalPortValue(3, 0);
                    Entry.hw.setDigitalPortValue(5, 0);
                    Entry.hw.setDigitalPortValue(6, 0);
                    Entry.hw.setDigitalPortValue(11, 0);
                    return script;
                } else if (script.timeFlag == 2) {
                    Entry.hw.setDigitalPortValue(port1, value1);
                    Entry.hw.setDigitalPortValue(port2, value2);
                    Entry.hw.setDigitalPortValue(port3, value1);
                    Entry.hw.setDigitalPortValue(port4, value2);
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Dplay.dc_motor_speed(%1, %2)'] }
        },
        dplay_buzzer: {
            color: '#00979D',
            fontColor: '#FFF',
            skeleton: 'basic',
            statements: [],
            template: '디지털 10번 부저를 %1 %2 %3 박자로 연주하기',
            params: [{
                type: 'Dropdown',
                options: [['도', '1'], ['도#', '2'], ['레', '3'], ['미b', '4'], ['미', '5'], ['파', '6'], ['파#', '7'], ['솔', '8'], ['솔#', '9'], ['라', '10'], ['시b', '11'], ['시', '12'], ['무음', '100']],
                value: '1',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3']],
                value: '1',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: ['1', '1', {
                    type: 'text',
                    params: ['0.5']
                }, null],
                type: 'dplay_buzzer'
            },
            paramsKeyMap: {
                NOTE: 0,
                OCTAVE: 1,
                VALUE: 2
            },
            class: 'dplay_set',
            isNotFor: ['dplay'],
            func: function func(sprite, script) {
                if (!script.isStart) {
                    var note = script.getNumberField('NOTE', script);
                    var octave = script.getNumberField('OCTAVE', script);
                    var beat = script.getNumberValue('VALUE');
                    var tempo = 60;
                    var note_go = note + (octave - 1) * 12;
                    var timeValue = beat * 60 * 1000 / tempo;
                    script.isStart = true;
                    script.timeFlag = 1;
                    if (note == 100) Entry.hw.setDigitalPortValue(10, 100);else Entry.hw.setDigitalPortValue(10, note_go);
                    if (timeValue > 100) {
                        var timer1 = setTimeout(function () {
                            Entry.hw.setDigitalPortValue(10, 100);
                            Entry.dplay.removeTimeout(timer1);
                        }, timeValue - 100);
                        Entry.dplay.timeouts.push(timer1);
                    }
                    var timer2 = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.dplay.removeTimeout(timer2);
                    }, timeValue);
                    Entry.dplay.timeouts.push(timer2);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    Entry.hw.setDigitalPortValue(10, 100);
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Dplay.buzzer(%1, %2, %3)'] }
        },
        dplay_servo: {
            color: '#00979D',
            fontColor: '#FFF',
            skeleton: 'basic',
            statements: [],
            template: '디지털 9번 서보모터 각도를 %1 (도)로 이동',
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['180']
                }, null],
                type: 'dplay_servo'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'dplay_set',
            isNotFor: ['dplay'],
            func: function func(sprite, script) {
                var port = 9;
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 1);
                value = Math.min(value, 179);
                Entry.hw.setDigitalPortValue(9, value);
                return script.callReturn();
            },
            syntax: { js: [], py: ['Dplay.servo(%1)'] }
        },
        dplay_Robot_run: {
            color: '#00979D',
            fontColor: '#FFF',
            skeleton: 'basic',
            statements: [],
            template: '로봇을 %1 하기 %2',
            params: [{
                type: 'Dropdown',
                options: [['전진', '1'], ['후진', '2'], ['우회전', '3'], ['좌회전', '4']],
                value: '1',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'dplay_Robot_run'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'dplay_robot',
            isNotFor: ['dplay'],
            func: function func(sprite, script) {
                var port = script.getField('PORT');
                var port1 = 3;
                var port2 = 5;
                var port3 = 6;
                var port4 = 11;
                var value1 = 0;
                var value2 = 0;
                var value3 = 0;
                var value4 = 0;
                var temp_Left = Entry.dplay.Left_value;
                var temp_Right = Entry.dplay.Right_value;
                if (port == '1') {
                    value1 = 0;
                    value2 = temp_Left;
                    value3 = temp_Right;
                    value4 = 0;
                } else if (port == '2') {
                    value1 = temp_Left;
                    value2 = 0;
                    value3 = 0;
                    value4 = temp_Right;
                } else if (port == '3') {
                    value1 = 0;
                    value2 = temp_Left;
                    value3 = 0;
                    value4 = 0;
                } else if (port == '4') {
                    value1 = 0;
                    value2 = 0;
                    value3 = temp_Right;
                    value4 = 0;
                }
                Entry.hw.setDigitalPortValue(port1, value1);
                Entry.hw.setDigitalPortValue(port2, value2);
                Entry.hw.setDigitalPortValue(port3, value3);
                Entry.hw.setDigitalPortValue(port4, value4);
                return script.callReturn();
            },
            syntax: { js: [], py: ['Dplay.robot_run(%1)'] }
        },
        dplay_Robot_run_sec: {
            color: '#00979D',
            fontColor: '#FFF',
            skeleton: 'basic',
            statements: [],
            template: '로봇을 %1 초 동안 %2 하기 %3',
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [['전진', '1'], ['후진', '2'], ['우회전', '3'], ['좌회전', '4']],
                value: '1',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null, null],
                type: 'dplay_Robot_run_sec'
            },
            paramsKeyMap: {
                VALUE: 0,
                PORT: 1
            },
            class: 'dplay_robot',
            isNotFor: ['dplay'],
            func: function func(sprite, script) {
                var port1 = 3;
                var port2 = 5;
                var port3 = 6;
                var port4 = 11;
                var value1 = 0;
                var value2 = 0;
                var value3 = 0;
                var value4 = 0;
                var temp_Left = Entry.dplay.Left_value;
                var temp_Right = Entry.dplay.Right_value;
                var port = script.getField('PORT');
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    var timeValue = script.getNumberValue('VALUE') * 1000;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.dplay.removeTimeout(timer);
                    }, timeValue);
                    Entry.dplay.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    if (port == '1') {
                        value1 = 0;
                        value2 = temp_Left;
                        value3 = temp_Right;
                        value4 = 0;
                    } else if (port == '2') {
                        value1 = temp_Left;
                        value2 = 0;
                        value3 = 0;
                        value4 = temp_Right;
                    } else if (port == '3') {
                        value1 = 0;
                        value2 = temp_Left;
                        value3 = 0;
                        value4 = 0;
                    } else if (port == '4') {
                        value1 = 0;
                        value2 = 0;
                        value3 = temp_Right;
                        value4 = 0;
                    }
                    Entry.hw.setDigitalPortValue(port1, value1);
                    Entry.hw.setDigitalPortValue(port2, value2);
                    Entry.hw.setDigitalPortValue(port3, value3);
                    Entry.hw.setDigitalPortValue(port4, value4);
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    value1 = 0;
                    value2 = 0;
                    value3 = 0;
                    value4 = 0;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Dplay.robot_run_sec(%1, %2)'] }
        },
        dplay_robot_speed_sel: {
            color: '#00979D',
            fontColor: '#FFF',
            skeleton: 'basic',
            statements: [],
            template: '%1 바퀴 속도를 %2(으)로 정하기 %3',
            params: [{
                type: 'Dropdown',
                options: [['왼쪽', '1'], ['오른쪽', '2'], ['양쪽', '3']],
                value: '1',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['100']
                }, null],
                type: 'dplay_robot_speed_sel'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'dplay_robot',
            isNotFor: ['dplay'],
            func: function func(sprite, script) {
                var port1 = 0;
                var port2 = 0;
                var port3 = 0;
                var port4 = 0;
                var value1 = 0;
                var value2 = 0;
                var value3 = 0;
                var value4 = 0;
                var result = 0;
                var port = script.getField('PORT');
                var operator = script.getNumberValue('VALUE', script);
                operator = Math.max(operator, -100);
                operator = Math.min(operator, 100);
                if (port == '1') {
                    port1 = 3;
                    port2 = 5;
                    if (operator > 0) {
                        result = operator + 155;
                        result = Math.round(result);
                        value1 = 0;
                        value2 = result;
                        Entry.dplay.Left_value = value2;
                    } else if (operator < 0) {
                        result = operator - 155;
                        result = Math.round(result);
                        value1 = -result;
                        value2 = 0;
                        Entry.dplay.Left_value = value1;
                    } else if (operator == 0) {
                        value1 = 0;
                        value2 = 0;
                        Entry.dplay.Left_value = 0;
                    }
                }
                if (port == '2') {
                    port3 = 6;
                    port4 = 11;
                    if (operator > 0) {
                        result = operator + 155;
                        result = Math.round(result);
                        value3 = 0;
                        value4 = result;
                        Entry.dplay.Right_value = value4;
                    } else if (operator < 0) {
                        result = operator - 155;
                        result = Math.round(result);
                        value3 = -result;
                        value4 = 0;
                        Entry.dplay.Right_value = value3;
                    } else if (operator == 0) {
                        value3 = 0;
                        value4 = 0;
                        Entry.dplay.Right_value = value3;
                    }
                }
                if (port == '3') {
                    port1 = 3;
                    port2 = 5;
                    port3 = 6;
                    port4 = 11;
                    if (operator > 0) {
                        result = operator + 155;
                        result = Math.round(result);
                        value1 = 0;
                        value2 = result;
                        value3 = 0;
                        value4 = result;
                        Entry.dplay.Left_value = value2;
                        Entry.dplay.Right_value = value4;
                    } else if (operator < 0) {
                        result = operator - 155;
                        result = Math.round(result);
                        value1 = -result;
                        value2 = 0;
                        value3 = -result;
                        value4 = 0;
                        Entry.dplay.Left_value = value1;
                        Entry.dplay.Right_value = value3;
                    } else if (operator == 0) {
                        value1 = 0;
                        value2 = 0;
                        value3 = 0;
                        value4 = 0;
                        Entry.dplay.Left_value = 0;
                        Entry.dplay.Right_value = 0;
                    }
                }
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    var timeValue = 50;
                    var timer = setTimeout(function () {
                        script.timeFlag = 2;
                        Entry.dplay.removeTimeout(timer);
                    }, timeValue);
                    Entry.dplay.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    Entry.hw.setDigitalPortValue(3, 0);
                    Entry.hw.setDigitalPortValue(5, 0);
                    Entry.hw.setDigitalPortValue(6, 0);
                    Entry.hw.setDigitalPortValue(11, 0);
                    return script;
                } else if (script.timeFlag == 2) {
                    Entry.hw.setDigitalPortValue(port1, value1);
                    Entry.hw.setDigitalPortValue(port2, value2);
                    Entry.hw.setDigitalPortValue(port3, value4);
                    Entry.hw.setDigitalPortValue(port4, value3);
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            }
        },
        dplay_robot_speed_set: {
            color: '#00979D',
            fontColor: '#FFF',
            skeleton: 'basic',
            statements: [],
            template: '오른쪽 바퀴 %1 왼쪽 바퀴 %2(으)로 정하기 %3',
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['100']
                }, {
                    type: 'text',
                    params: ['100']
                }, null],
                type: 'dplay_robot_speed_set'
            },
            paramsKeyMap: {
                R_VALUE: 0,
                L_VALUE: 1
            },
            class: 'dplay_robot',
            isNotFor: ['dplay'],
            func: function func(sprite, script) {
                var port1 = 3;
                var port2 = 5;
                var port3 = 6;
                var port4 = 11;
                var value1 = 0;
                var value2 = 0;
                var value3 = 0;
                var value4 = 0;
                var result_R = 0;
                var result_L = 0;
                var value_L = script.getNumberValue('L_VALUE', script);
                value_L = Math.max(value_L, -100);
                value_L = Math.min(value_L, 100);
                if (value_L > 0) {
                    result_L = value_L + 155;
                    result_L = Math.round(result_L);
                    value1 = 0;
                    value2 = result_L;
                    Entry.dplay.Left_value = value2;
                } else if (value_L < 0) {
                    result_L = value_L - 155;
                    result_L = Math.round(result_L);
                    value1 = -result_L;
                    value2 = 0;
                    Entry.dplay.Left_value = value1;
                } else if (value_L == 0) {
                    value1 = 0;
                    value2 = 0;
                    Entry.dplay.Left_value = 0;
                }
                var value_R = script.getNumberValue('R_VALUE', script);
                value_R = Math.max(value_R, -100);
                value_R = Math.min(value_R, 100);
                if (value_R > 0) {
                    result_R = value_R + 155;
                    result_R = Math.round(result_R);
                    value3 = 0;
                    value4 = result_R;
                    Entry.dplay.Right_value = value4;
                } else if (value_R < 0) {
                    result_R = value_R - 155;
                    result_R = Math.round(result_R);
                    value3 = -result_R;
                    value4 = 0;
                    Entry.dplay.Right_value = value3;
                } else if (value_R == 0) {
                    value3 = 0;
                    value4 = 0;
                    Entry.dplay.Right_value = 0;
                }
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    var timeValue = 50;
                    var timer = setTimeout(function () {
                        script.timeFlag = 2;
                        Entry.dplay.removeTimeout(timer);
                    }, timeValue);
                    Entry.dplay.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    Entry.hw.setDigitalPortValue(3, 0);
                    Entry.hw.setDigitalPortValue(5, 0);
                    Entry.hw.setDigitalPortValue(6, 0);
                    Entry.hw.setDigitalPortValue(11, 0);
                    return script;
                } else if (script.timeFlag == 2) {
                    Entry.hw.setDigitalPortValue(port1, value1);
                    Entry.hw.setDigitalPortValue(port2, value2);
                    Entry.hw.setDigitalPortValue(port3, value4);
                    Entry.hw.setDigitalPortValue(port4, value3);
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Dplay.robot_speed_sel(%1, %2)'] }
        },
        dplay_robot_stop: {
            color: '#00979D',
            fontColor: '#FFF',
            skeleton: 'basic',
            statements: [],
            template: '로봇을 정지하기 %1',
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'dplay_robot_stop'
            },
            paramsKeyMap: {},
            class: 'dplay_robot',
            isNotFor: ['dplay'],
            func: function func(sprite, script) {
                var port1 = 3;
                var port2 = 5;
                var port3 = 6;
                var port4 = 11;
                var value1 = 0;
                var value2 = 0;
                Entry.hw.setDigitalPortValue(port1, value1);
                Entry.hw.setDigitalPortValue(port2, value2);
                Entry.hw.setDigitalPortValue(port4, value1);
                Entry.hw.setDigitalPortValue(port3, value2);
                return script.callReturn();
            },
            syntax: { js: [], py: ['Dplay.robot_stop()'] }
        }
        //endregion dplay 디플레이
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_edumaker.js":
/*!*************************************************!*\
  !*** ./src/playground/blocks/block_edumaker.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.EduMaker = {
    name: 'EduMaker',
    imageName: 'edumaker.png',
    title: {
        "ko": "에듀메이커 보드",
        "en": "EduMaker Board"
    },
    setZero: function setZero() {
        if (!Entry.hw.sendQueue.SET) {
            Entry.hw.sendQueue = {
                GET: {},
                SET: {}
            };
        } else {
            var keySet = Object.keys(Entry.hw.sendQueue.SET);
            keySet.forEach(function (key) {
                Entry.hw.sendQueue.SET[key].data = 0;
                Entry.hw.sendQueue.SET[key].time = new Date().getTime();
            });
        }
        Entry.hw.update();
    },
    sensorTypes: {
        ALIVE: 0,
        DIGITAL: 1,
        ANALOG: 2,
        PWM: 3,
        SERVO_PIN: 4,
        TONE: 5,
        PULSEIN: 6,
        ULTRASONIC: 7,
        TIMER: 8
    },
    toneTable: {
        '0': 0,
        C: 1,
        CS: 2,
        D: 3,
        DS: 4,
        E: 5,
        F: 6,
        FS: 7,
        G: 8,
        GS: 9,
        A: 10,
        AS: 11,
        B: 12
    },
    toneMap: {
        '1': [33, 65, 131, 262, 523, 1046, 2093, 4186],
        '2': [35, 69, 139, 277, 554, 1109, 2217, 4435],
        '3': [37, 73, 147, 294, 587, 1175, 2349, 4699],
        '4': [39, 78, 156, 311, 622, 1245, 2849, 4978],
        '5': [41, 82, 165, 330, 659, 1319, 2637, 5274],
        '6': [44, 87, 175, 349, 698, 1397, 2794, 5588],
        '7': [46, 92, 185, 370, 740, 1480, 2960, 5920],
        '8': [49, 98, 196, 392, 784, 1568, 3136, 6272],
        '9': [52, 104, 208, 415, 831, 1661, 3322, 6645],
        '10': [55, 110, 220, 440, 880, 1760, 3520, 7040],
        '11': [58, 117, 233, 466, 932, 1865, 3729, 7459],
        '12': [62, 123, 247, 494, 988, 1976, 3951, 7902]
    },
    highList: ['high', '1', 'on'],
    lowList: ['low', '0', 'off'],
    BlockState: {}
};

Entry.EduMaker.getBlocks = function () {
    return {
        //region edumaker 에듀메이커
        edumaker_analog_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['A0', '0'], ['A1', '1'], ['A2', '2'], ['A3', '3'], ['A4', '4'], ['A5', '5']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getField('PORT');
            },
            syntax: { js: [], py: [] }
        },
        edumaker_get_analog_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'edumaker_analog_list'
                }],
                type: 'edumaker_get_analog_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'EduMakerGet',
            isNotFor: ['EduMaker'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                if (port[0] === 'A') port = port.substring(1);
                return ANALOG ? ANALOG[port] || 0 : 0;
            },
            syntax: { js: [], py: [] }
        },
        edumaker_get_analog_value_map: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'edumaker_get_analog_value',
                    params: [{
                        type: 'edumaker_analog_list'
                    }]
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'edumaker_get_analog_value_map'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE2: 1,
                VALUE3: 2,
                VALUE4: 3,
                VALUE5: 4
            },
            class: 'EduMakerGet',
            isNotFor: ['EduMaker'],
            func: function func(sprite, script) {
                var result = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                var value2 = script.getNumberValue('VALUE2', script);
                var value3 = script.getNumberValue('VALUE3', script);
                var value4 = script.getNumberValue('VALUE4', script);
                var value5 = script.getNumberValue('VALUE5', script);
                var stringValue4 = script.getValue('VALUE4', script);
                var stringValue5 = script.getValue('VALUE5', script);
                var isFloat = false;

                if (Entry.Utils.isNumber(stringValue4) && stringValue4.indexOf('.') > -1 || Entry.Utils.isNumber(stringValue5) && stringValue5.indexOf('.') > -1) {
                    isFloat = true;
                }

                if (value2 > value3) {
                    var swap = value2;
                    value2 = value3;
                    value3 = swap;
                }
                if (value4 > value5) {
                    var swap = value4;
                    value4 = value5;
                    value5 = swap;
                }
                result -= value2;
                result = result * ((value5 - value4) / (value3 - value2));
                result += value4;
                result = Math.min(value5, result);
                result = Math.max(value4, result);

                if (isFloat) {
                    result = Math.round(result * 100) / 100;
                } else {
                    result = Math.round(result);
                }

                return result;
            },
            syntax: { js: [], py: [] }
        },
        edumaker_get_ultrasonic_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: ['2']
                }, {
                    type: 'arduino_get_port_number',
                    params: ['4']
                }],
                type: 'edumaker_get_ultrasonic_value'
            },
            paramsKeyMap: {
                PORT1: 0,
                PORT2: 1
            },
            class: 'EduMakerGet',
            isNotFor: ['EduMaker'],
            func: function func(sprite, script) {
                var port1 = script.getNumberValue('PORT1', script);
                var port2 = script.getNumberValue('PORT2', script);

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                delete Entry.hw.sendQueue['SET'][port1];
                delete Entry.hw.sendQueue['SET'][port2];

                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.ArduinoExt.sensorTypes.ULTRASONIC] = {
                    port: [port1, port2],
                    time: new Date().getTime()
                };
                return Entry.hw.portData.ULTRASONIC || 0;
            },
            syntax: { js: [], py: [] }
        },
        edumaker_get_digital: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: [2]
                }],
                type: 'edumaker_get_digital'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'EduMakerGet',
            isNotFor: ['EduMaker'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT', script);
                var DIGITAL = Entry.hw.portData.DIGITAL;
                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.ArduinoExt.sensorTypes.DIGITAL] = {
                    port: port,
                    time: new Date().getTime()
                };
                return DIGITAL ? DIGITAL[port] || 0 : 0;
            },
            syntax: { js: [], py: [] }
        },
        edumaker_digital_toggle: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ARDUINO_on, 'on'], [Lang.Blocks.ARDUINO_off, 'off']],
                value: 'on',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                OPERATOR: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('OPERATOR');
            },
            syntax: { js: [], py: [] }
        },
        edumaker_toggle_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: [3]
                }, {
                    type: 'arduino_get_digital_toggle',
                    params: ['on']
                }, null],
                type: 'edumaker_toggle_led'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'EduMaker',
            isNotFor: ['EduMaker'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getValue('VALUE');

                if (typeof value === 'string') {
                    value = value.toLowerCase();
                }
                if (Entry.ArduinoExt.highList.indexOf(value) > -1) {
                    value = 255;
                } else if (Entry.ArduinoExt.lowList.indexOf(value) > -1) {
                    value = 0;
                } else {
                    throw new Error();
                }
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.ArduinoExt.sensorTypes.DIGITAL,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        edumaker_digital_pwm: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_pwm_port_number'
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'edumaker_digital_pwm'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'EduMaker',
            isNotFor: ['EduMaker'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 0);
                value = Math.min(value, 255);
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.ArduinoExt.sensorTypes.PWM,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        edumaker_tone_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.silent, '0'], [Lang.Blocks.do_name, 'C'], [Lang.Blocks.do_sharp_name, 'CS'], [Lang.Blocks.re_name, 'D'], [Lang.Blocks.re_sharp_name, 'DS'], [Lang.Blocks.mi_name, 'E'], [Lang.Blocks.fa_name, 'F'], [Lang.Blocks.fa_sharp_name, 'FS'], [Lang.Blocks.sol_name, 'G'], [Lang.Blocks.sol_sharp_name, 'GS'], [Lang.Blocks.la_name, 'A'], [Lang.Blocks.la_sharp_name, 'AS'], [Lang.Blocks.si_name, 'B']],
                value: 'C',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                NOTE: 0
            },
            func: function func(sprite, script) {
                return script.getField('NOTE');
            },
            syntax: { js: [], py: [] }
        },
        edumaker_tone_value: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'edumaker_tone_list'
                }],
                type: 'edumkaer_tone_value'
            },
            paramsKeyMap: {
                NOTE: 0
            },
            func: function func(sprite, script) {
                return script.getNumberValue('NOTE');
            },
            syntax: { js: [], py: [] }
        },
        edumaker_octave_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6']],
                value: '4',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                OCTAVE: 0
            },
            func: function func(sprite, script) {
                return script.getField('OCTAVE');
            },
            syntax: { js: [], py: [] }
        },
        edumaker_set_tone: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: [3]
                }, {
                    type: 'arduino_ext_tone_list'
                }, {
                    type: 'arduino_ext_octave_list'
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'edumaker_set_tone'
            },
            paramsKeyMap: {
                PORT: 0,
                NOTE: 1,
                OCTAVE: 2,
                DURATION: 3
            },
            class: 'EduMaker',
            isNotFor: ['EduMaker'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var port = script.getNumberValue('PORT', script);

                if (!script.isStart) {
                    var note = script.getValue('NOTE', script);
                    if (!Entry.Utils.isNumber(note)) note = Entry.ArduinoExt.toneTable[note];

                    if (note < 0) {
                        note = 0;
                    } else if (note > 12) {
                        note = 12;
                    }

                    var duration = script.getNumberValue('DURATION', script);

                    if (duration < 0) {
                        duration = 0;
                    }

                    if (!sq['SET']) {
                        sq['SET'] = {};
                    }

                    if (duration === 0) {
                        sq['SET'][port] = {
                            type: Entry.ArduinoExt.sensorTypes.TONE,
                            data: 0,
                            time: new Date().getTime()
                        };
                        return script.callReturn();
                    }

                    var octave = script.getNumberValue('OCTAVE', script) - 1;
                    if (octave < 0) {
                        octave = 0;
                    } else if (octave > 5) {
                        octave = 5;
                    }

                    var value = 0;

                    if (note != 0) {
                        value = Entry.ArduinoExt.toneMap[note][octave];
                    }

                    duration = duration * 1000;
                    script.isStart = true;
                    script.timeFlag = 1;

                    sq['SET'][port] = {
                        type: Entry.ArduinoExt.sensorTypes.TONE,
                        data: {
                            value: value,
                            duration: duration
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, duration + 32);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    sq['SET'][port] = {
                        type: Entry.ArduinoExt.sensorTypes.TONE,
                        data: 0,
                        time: new Date().getTime()
                    };
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        edumaker_set_servo: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: ['3']
                }, null],
                type: 'edumaker_set_servo'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'EduMaker',
            isNotFor: ['EduMaker'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var port = script.getNumberValue('PORT', script);
                var value = script.getNumberValue('VALUE', script);
                value = Math.min(180, value);
                value = Math.max(0, value);

                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.ArduinoExt.sensorTypes.SERVO_PIN,
                    data: value,
                    time: new Date().getTime()
                };

                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        }
        //endregion edumaker 에듀메이커
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_ev3.js":
/*!********************************************!*\
  !*** ./src/playground/blocks/block_ev3.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.EV3 = {
    PORT_MAP: {
        A: 0,
        B: 0,
        C: 0,
        D: 0,
        '1': undefined,
        '2': undefined,
        '3': undefined,
        '4': undefined
    },
    motorMovementTypes: {
        Degrees: 0,
        Power: 1
    },
    deviceTypes: {
        NxtTouch: 1,
        NxtLight: 2,
        NxtSound: 3,
        NxtColor: 4,
        NxtUltrasonic: 5,
        NxtTemperature: 6,
        LMotor: 7,
        MMotor: 8,
        Touch: 16,
        Color: 29,
        Ultrasonic: 30,
        Gyroscope: 32,
        Infrared: 33,
        Initializing: 0x7d,
        Empty: 0x7e,
        WrongPort: 0x7f,
        Unknown: 0xff
    },
    colorSensorValue: ['', '000000', '0000FF', '00FF00', 'FFFF00', 'FF0000', 'FFFFFF', 'A52A2A'],
    timeouts: [],
    removeTimeout: function removeTimeout(id) {
        clearTimeout(id);
        var timeouts = this.timeouts;
        var index = timeouts.indexOf(id);
        if (index >= 0) {
            timeouts.splice(index, 1);
        }
    },
    removeAllTimeouts: function removeAllTimeouts() {
        var timeouts = this.timeouts;
        for (var i in timeouts) {
            clearTimeout(timeouts[i]);
        }
        this.timeouts = [];
    },
    setZero: function setZero() {
        var portMap = this.PORT_MAP;
        Object.keys(portMap).forEach(function (port) {
            var regex = /[A-D]/i;
            if (regex.test(port)) {
                Entry.hw.sendQueue[port] = {
                    type: Entry.EV3.motorMovementTypes.Power,
                    power: 0
                };
            } else {
                Entry.hw.sendQueue[port] = portMap[port];
            }
        });
        Entry.hw.update();
    },
    name: 'EV3',
    url: 'http://www.lego.com/ko-kr/mindstorms/about-ev3',
    imageName: 'ev3.png',
    title: {
        "ko": "EV3",
        "en": "EV3"
    }
};

Entry.EV3.getBlocks = function () {
    return {
        //region ev3 이브이3
        ev3_color_sensor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['RGB', 'RGB'], ['R', 'R'], ['G', 'G'], ['B', 'B']],
                value: 'RGB',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'ev3_color_sensor'
            },
            paramsKeyMap: {
                PORT: 0,
                RGB: 1
            },
            class: 'ev3_sensor',
            isNotFor: ['EV3'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT', script);
                var rgb = script.getStringField('RGB', script);
                var portData = Entry.hw.getDigitalPortValue(script.getNumberField('PORT', script));
                var result = '';
                if (portData.type == Entry.EV3.deviceTypes.Color) {
                    if (portData.siValue == 0) {
                        result = '';
                    } else {
                        switch (rgb) {
                            case 'RGB':
                                result = Entry.EV3.colorSensorValue[portData.siValue];
                                break;
                            case 'R':
                                result = Entry.EV3.colorSensorValue[portData.siValue].substring(0, 2);
                                break;
                            case 'G':
                                result = Entry.EV3.colorSensorValue[portData.siValue].substring(2, 4);
                                break;
                            case 'B':
                                result = Entry.EV3.colorSensorValue[portData.siValue].substring(4, 6);
                                break;
                        }
                    }
                } else {
                    result = '컬러 센서 아님';
                }
                return result;
            }
        },
        ev3_get_sensor_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'ev3_get_sensor_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'ev3_sensor',
            isNotFor: ['EV3'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT', script);
                var portData = Entry.hw.getDigitalPortValue(script.getNumberField('PORT', script));
                var result;
                if ($.isPlainObject(portData)) {
                    result = portData.siValue || 0;
                }
                return result;
            }
        },
        ev3_motor_degrees: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['A', 'A'], ['B', 'B'], ['C', 'C'], ['D', 'D']],
                value: 'A',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ev3_cw, 'CW'], [Lang.Blocks.ev3_ccw, 'CCW']],
                value: 'CW',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'angle'
                }],
                type: 'ev3_motor_degrees'
            },
            paramsKeyMap: {
                PORT: 0,
                DIRECTION: 1,
                DEGREE: 2
            },
            class: 'ev3_output',
            isNotFor: ['EV3'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT', script);
                var degree = script.getValue('DEGREE', script);
                if (degree <= 0) {
                    degree = 0;
                } else if (degree >= 720) {
                    degree = 720;
                }
                var direction = script.getStringField('DIRECTION', script);
                Entry.hw.sendQueue[port] = {
                    id: Math.floor(Math.random() * 100000, 0),
                    type: Entry.EV3.motorMovementTypes.Degrees,
                    degree: degree,
                    power: direction == 'CW' ? 50 : -50
                };
                return script.callReturn();
            }
        },
        ev3_motor_power: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['A', 'A'], ['B', 'B'], ['C', 'C'], ['D', 'D']],
                value: 'A',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['50']
                }],
                type: 'ev3_motor_power'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'ev3_output',
            isNotFor: ['EV3'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT', script);
                var value = script.getValue('VALUE', script);
                Entry.hw.sendQueue[port] = {
                    id: Math.floor(Math.random() * 100000, 0),
                    type: Entry.EV3.motorMovementTypes.Power,
                    power: value
                };
                return script.callReturn();
            }
        },
        ev3_motor_power_on_time: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['A', 'A'], ['B', 'B'], ['C', 'C'], ['D', 'D']],
                value: 'A',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['2']
                }, {
                    type: 'number',
                    params: ['50']
                }],
                type: 'ev3_motor_power_on_time'
            },
            paramsKeyMap: {
                PORT: 0,
                TIME: 1,
                VALUE: 2
            },
            class: 'ev3_output',
            isNotFor: ['EV3'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var port = script.getStringField('PORT', script);
                if (!script.isStart) {
                    var time = script.getValue('TIME', script);
                    var value = script.getValue('VALUE', script);
                    script.isStart = true;
                    script.timeFlag = 1;
                    Entry.hw.sendQueue[port] = {
                        id: Math.floor(Math.random() * 100000, 0),
                        type: Entry.EV3.motorMovementTypes.Power,
                        power: value
                    };
                    var timeValue = time * 1000;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.EV3.removeTimeout(timer);
                    }, timeValue);
                    Entry.EV3.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    Entry.hw.sendQueue[port] = {
                        id: Math.floor(Math.random() * 100000, 0),
                        type: Entry.EV3.motorMovementTypes.Power,
                        power: 0
                    };
                    return script.callReturn();
                }
            }
        },
        ev3_touch_sensor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'ev3_touch_sensor'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'ev3_sensor',
            isNotFor: ['EV3'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT', script);
                var portData = Entry.hw.getDigitalPortValue(script.getNumberField('PORT', script));
                var result = false;
                if (portData.type == Entry.EV3.deviceTypes.Touch) {
                    if (Number(portData.siValue) >= 1) {
                        result = true;
                    }
                }

                return result;
            }
        }
        //endregion ev3 이브이3
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_funboard.js":
/*!*************************************************!*\
  !*** ./src/playground/blocks/block_funboard.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.FunBoard = {
    // isNotFor": [ "funboard" ] 값
    name: 'funboard',
    url: 'http://www.thinkfunedu.com',
    imageName: 'funboard.png',
    title: {
        "en": "funboard",
        "ko": "펀보드"
    },
    Static: {
        FUNBOARD_BLOCK_COLOR: '#00979D', // gray(#848484)
        FUNBOARD_ARROW_COLOR_HW: '#00979D',
        FUNBOARD_FONT_COLOR: '#000f0f', // cyan(#000f0f), lightgray(#000113), reddish-brown(#982600)
        FUNBOARD_LED_ON: 255,
        BUTTON_PRESS_VALUE: 0, // 버튼 눌림 값
        FUNBOARD_MATRIX_STRING_MAX: 5, //문자열 입력 허용 최대 문자수//실제 적용갯수는 (이 값 - 1)
        DELAY_SECOND: 0.1, //0.3//0.2
        ANALOG_STATE_PERCENT: 0.5, //30%(306.9) , 50%(511.5)
        MATRIX_REGISTED_SYMBOL_TOTAL: 10 //펌웨어에 등록되어 있는 symbol 갯수
    },

    //entry [중지]-버튼을 누르면 실행되므로...
    setZero: function setZero() {
        //-------------------------------------------------
        {
            if (!Entry.hw.sendQueue['SET']) {
                Entry.hw.sendQueue['SET'] = {};
            }
            //reset - [중지] 시
            var port = 13;
            Entry.hw.sendQueue['SET'][port] = {
                type: Entry.FunBoard.sensorTypes.ETC,
                data: Entry.FunBoard.EventTypes.RESET,
                time: new Date().getTime()
            };
            for (var i = 0; i < 50000; i++) {}
            Entry.hw.update();
            delete Entry.hw.sendQueue[port];
            for (var i = 0; i < 500000; i++) {}
        }
        //-------------------------------------------------
        if (!Entry.hw.sendQueue.SET) {
            Entry.hw.sendQueue = {
                GET: {},
                SET: {}
            };
        } else {
            var keySet = Object.keys(Entry.hw.sendQueue.SET);
            keySet.forEach(function (key) {
                Entry.hw.sendQueue.SET[key].type = Entry.FunBoard.sensorTypes.ETC;
                Entry.hw.sendQueue.SET[key].data = 0;
                Entry.hw.sendQueue.SET[key].time = new Date().getTime();
            });
        }
        Entry.hw.update();
    },
    toByte: function toByte(data) {
        var c = data;
        data = Entry.FunBoard._str2bin(c);
        return data;
    },
    EventTypes: {
        //ETC
        BUZZER_ON: 1,
        BUZZER_OFF: 2,
        MATRIX_OFF_ALL: 3,
        MATRIX_ON_ALL: 4,
        MATRIX_INTENSITY: 5,
        MATRIX_SCROLL_DIR: 6,
        MATRIX_SCROLL_RAPID: 7,
        MATRIX_SYMBOL_OUT: 8,
        RESET: 13,
        //MATRIX, MATRIX64
        SET_ROW_COL: 3,
        SET_ROW1: 4,
        SET_COL1: 5,
        STR_OUT_NO_SCROLL: 6,
        STR_OUT_LEFT: 7,
        STR_OUT_UP: 8,
        STR_OUT_RIGHT: 9,
        STR_OUT_DOWN: 10,
        STR_OUT_DEFAULT: 11,
        CHAR_OUT: 12,
        SET_64: 13
        //14 이상 안된다. (digital port memory 14개)
    },
    sensorTypes: {
        ALIVE: 0,
        DIGITAL: 1,
        ANALOG: 2,
        PWM: 3,
        ETC: 4,
        TONE: 5,
        PULSEIN: 6,
        ULTRASONIC: 7,
        TIMER: 8,
        rxBLUETOOTH: 9,
        MATRIX: 10,
        txBLUETOOTH: 11,
        MATRIX64: 12
    },
    toneTable: {
        '0': 0,
        C: 1,
        CS: 2,
        D: 3,
        DS: 4,
        E: 5,
        F: 6,
        FS: 7,
        G: 8,
        GS: 9,
        A: 10,
        AS: 11,
        B: 12
    },
    toneMap: {
        '1': [33, 65, 131, 262, 523, 1046, 2093, 4186],
        '2': [35, 69, 139, 277, 554, 1109, 2217, 4435],
        '3': [37, 73, 147, 294, 587, 1175, 2349, 4699],
        '4': [39, 78, 156, 311, 622, 1245, 2849, 4978],
        '5': [41, 82, 165, 330, 659, 1319, 2637, 5274],
        '6': [44, 87, 175, 349, 698, 1397, 2794, 5588],
        '7': [46, 92, 185, 370, 740, 1480, 2960, 5920],
        '8': [49, 98, 196, 392, 784, 1568, 3136, 6272],
        '9': [52, 104, 208, 415, 831, 1661, 3322, 6645],
        '10': [55, 110, 220, 440, 880, 1760, 3520, 7040],
        '11': [58, 117, 233, 466, 932, 1865, 3729, 7459],
        '12': [62, 123, 247, 494, 988, 1976, 3951, 7902]
    },

    PORT_MAP: {
        rx: 0, //D0
        tx: 1, //D1
        matrix_cs: 2, //D2
        matrix_data: 3, //D3(PWM)
        matrix_clk: 4, //D4
        up_bt: 5, //D5(PWM)
        down_bt: 6, //D6(PWM)
        left_bt: 7, //D7
        right_bt: 8, //D8
        buzzer: 9, //D9(PWM)
        led_red: 10, //D10(PWM)
        led_yellow: 11, //D11(PWM)
        led_green: 12, //D12
        led_blue: 13, //D13

        slide: 0, //A0
        cds: 1, //A1
        mic: 2, //A2
        space_touchbt: 3, //A3
        enter_touchbt: 4, //A4
        escape_touchbt: 5 //A5
    },

    //-------------------------------------------------------------//
    // (value2 ~ value3) 범위의 값을 (value4 ~ value5) 범위로 변환 //
    //-------------------------------------------------------------//
    get_analog_value_map: function get_analog_value_map(a, what, value2, value3, value4, value5) {
        var result = a;
        var value2 = value2;
        var value3 = value3;
        var value4 = value4;
        var value5 = value5;

        var stringValue4 = String(value4);
        var stringValue5 = String(value5);
        var isFloat = false;

        if (Entry.Utils.isNumber(stringValue4) && stringValue4.indexOf('.') > -1 || Entry.Utils.isNumber(stringValue5) && stringValue5.indexOf('.') > -1) {
            isFloat = true;
        }

        if (value2 > value3) {
            var swap = value2;
            value2 = value3;
            value3 = swap;
        }
        if (value4 > value5) {
            var swap = value4;
            value4 = value5;
            value5 = swap;
        }
        result -= value2;
        result = result * ((value5 - value4) / (value3 - value2));
        result += value4;
        result = Math.min(value5, result);
        result = Math.max(value4, result);

        if (isFloat) {
            result = Math.round(result * 100) / 100;
        } else {
            result = Math.round(result);
        }
        return result;
    },

    bt_pressed: function bt_pressed(bt_index, value) {
        var bt_pressed = 0;
        //Analog
        if (bt_index >= 5) {
            bt_pressed = value > 100 ? 0 : 1;
            //bt_pressed = value < 3 ? 1 : 0;
            //bt_pressed = value < 1 ? 1 : 0;
        } else {
            //Digital
            //bt_pressed = value > 0 ? 0 : 1;
            bt_pressed = value > 0 ? 1 : 0;
        }
        return bt_pressed;
    },
    sleep: function sleep(num) {
        var now = new Date();
        var stop = now.getTime() + num;
        while (true) {
            now = new Date();
            if (now.getTime() > stop) return;
        }
    },
    MinMax: function MinMax(v, vmin, vmax) {
        var value = v;
        value = Math.max(value, vmin);
        value = Math.min(value, vmax);
        return value;
    },
    get_char_index: function get_char_index(k, str) {
        //LedControl.h 의 displayCharSet[] 에서 symbol 제외한 문자들만 복사 사용 !!!
        //즉, 비교할 수 있는 문자들만(기호는 문자비교를 할 수 없으니...)...
        // \ 는 앞에 \ 를 붙인다.
        var displayCharSet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz !?#$%&*+-/~^_@<>=()[]{},.:;'`\\|";
        var not_found = 62; //62 == space 문자 위치
        if (k < 0 || k >= str.length) return not_found;
        var pos = displayCharSet.indexOf(str[k]);
        if (pos >= 0) {
            return pos;
        }
        return not_found;
    },
    strwith01: function strwith01(len, str) {
        var charset = '1#*';
        var pos = -1;
        var str3 = '';
        for (var i = 0; i < len; i++) {
            pos = -1;
            if (i < len) pos = charset.indexOf(str[i]);
            if (pos < 0) str3 = str3.concat('0');else str3 = str3.concat('1');
        }
        return str3;
    },
    str2byte: function str2byte(str) {
        var value = 0;
        for (var i = str.length - 1; i >= 0; i--) {
            value = value + str[i] * Math.pow(2, 8 - (i + 1));
        }
        return value;
    },
    // Convert a string to an array of little-endian words
    // If chrsz is ASCII, characters >255 have their hi-byte silently ignored.
    _str2bin: function _str2bin(str) {
        var chrsz = 8;
        var bin = Array();
        //var mask = 0xFF;
        var mask = (1 << chrsz) - 1;
        for (var i = 0; i < str.length * chrsz; i += chrsz) {
            bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << i % 32;
        }return bin;
    }
};

Entry.FunBoard.getBlocks = function () {
    return {
        //region FunBoard
        funboard_list_pushbutton_basic: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.FUNBOARD_bt_up, '1'], [Lang.Blocks.FUNBOARD_bt_down, '2'], [Lang.Blocks.FUNBOARD_bt_left, '3'], [Lang.Blocks.FUNBOARD_bt_right, '4']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getField('PORT');
            }
        },
        funboard_list_touchbutton_basic: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.FUNBOARD_touchbt_up, '1'], [Lang.Blocks.FUNBOARD_touchbt_down, '2'], [Lang.Blocks.FUNBOARD_touchbt_left, '3'], [Lang.Blocks.FUNBOARD_touchbt_right, '4'], [Lang.Blocks.FUNBOARD_touchbt_space, '5'], [Lang.Blocks.FUNBOARD_touchbt_enter, '6'], [Lang.Blocks.FUNBOARD_touchbt_escape, '7']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getField('PORT');
            }
        },
        funboard_list_analogsensor_basic: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.FUNBOARD_sensor_slide, '1'], [Lang.Blocks.FUNBOARD_sensor_cds, '2'], [Lang.Blocks.FUNBOARD_sensor_mic, '3']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getField('PORT');
            }
        },
        funboard_list_2_state_basic: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.FUNBOARD_sensor_state_1, '1'], [Lang.Blocks.FUNBOARD_sensor_state_2, '2']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getField('PORT');
            }
        },
        funboard_list_ledcolor_basic: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.FUNBOARD_led_color_red, '1'], [Lang.Blocks.FUNBOARD_led_color_yellow, '2'], [Lang.Blocks.FUNBOARD_led_color_green, '3'], [Lang.Blocks.FUNBOARD_led_color_blue, '4'], [Lang.Blocks.FUNBOARD_led_color_all, '5']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getField('PORT');
            }
        },
        funboard_list_ledcolor_pwm_basic: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.FUNBOARD_led_color_red, '1'], [Lang.Blocks.FUNBOARD_led_color_yellow, '2']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getField('PORT');
            }
        },
        funboard_list_onoff_basic: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.FUNBOARD_do_on, '1'], [Lang.Blocks.FUNBOARD_do_off, '0']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getField('PORT');
            }
        },
        funboard_list_digital_octave: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8']],
                value: '3',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                OCTAVE: 0
            },
            func: function func(sprite, script) {
                return script.getField('OCTAVE');
            }
        },
        funboard_list_digital_tone: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.silent, '0'], [Lang.Blocks.do_name, 'C'], [Lang.Blocks.do_sharp_name, 'CS'], [Lang.Blocks.re_name, 'D'], [Lang.Blocks.re_sharp_name, 'DS'], [Lang.Blocks.mi_name, 'E'], [Lang.Blocks.fa_name, 'F'], [Lang.Blocks.fa_sharp_name, 'FS'], [Lang.Blocks.sol_name, 'G'], [Lang.Blocks.sol_sharp_name, 'GS'], [Lang.Blocks.la_name, 'A'], [Lang.Blocks.la_sharp_name, 'AS'], [Lang.Blocks.si_name, 'B']],
                value: 'C',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                NOTE: 0
            },
            func: function func(sprite, script) {
                return script.getField('NOTE');
            }
        },
        funboard_list_matrix_rows: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                ROW: 0
            },
            func: function func(sprite, script) {
                return script.getField('ROW');
            }
        },
        funboard_list_matrix_row_or_column: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.FUNBOARD_row_tag, '1'], [Lang.Blocks.FUNBOARD_column_tag, '2']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                WHAT: 0
            },
            func: function func(sprite, script) {
                return script.getField('WHAT');
            }
        },
        funboard_list_matrix_scroll_option: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.FUNBOARD_scroll_no, '1'], [Lang.Blocks.FUNBOARD_scroll_left, '2'], [Lang.Blocks.FUNBOARD_scroll_right, '4'], [Lang.Blocks.FUNBOARD_scroll_up, '3'], [Lang.Blocks.FUNBOARD_scroll_down, '5']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                RET: 0
            },
            func: function func(sprite, script) {
                return script.getField('RET');
            }
        },
        funboard_list_matrix_char: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8'], ['9', '9'], ['A', 'A'], ['B', 'B'], ['C', 'C'], ['D', 'D'], ['E', 'E'], ['F', 'F'], ['G', 'G'], ['H', 'H'], ['I', 'I'], ['J', 'J'], ['K', 'K'], ['L', 'L'], ['M', 'M'], ['N', 'N'], ['O', 'O'], ['P', 'P'], ['Q', 'Q'], ['R', 'R'], ['S', 'S'], ['T', 'T'], ['U', 'U'], ['V', 'V'], ['W', 'W'], ['X', 'X'], ['Y', 'Y'], ['Z', 'Z'], ['a', 'a'], ['b', 'b'], ['c', 'c'], ['d', 'd'], ['e', 'e'], ['f', 'f'], ['g', 'g'], ['h', 'h'], ['i', 'i'], ['j', 'j'], ['k', 'k'], ['l', 'l'], ['m', 'm'], ['n', 'n'], ['o', 'o'], ['p', 'p'], ['q', 'q'], ['r', 'r'], ['s', 's'], ['t', 't'], ['u', 'u'], ['v', 'v'], ['w', 'w'], ['x', 'x'], ['y', 'y'], ['z', 'z'], [' ', ' '], ['!', '!'], ['?', '?'], ['#', '#'], ['$', '$'], ['%', '%'], ['&', '&'], ['*', '*'], ['+', '+'], ['-', '-'], ['/', '/'], ['~', '~'], ['^', '^'], ['_', '_'], ['@', '@'], ['<', '<'], ['>', '>'], ['=', '='], ['(', '('], [')', ')'], ['[', '['], [']', ']'], ['{', '{'], ['}', '}'], [',', ','], ['.', '.'], [':', ':'], [';', ';'], ["'", "'"], ['`', '`'], ['\\', '\\'], ['|', '|']],
                value: 'A',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                RET: 0
            },
            func: function func(sprite, script) {
                return script.getField('RET');
            }
        },
        funboard_what_button_pressed: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_pushbutton_basic'
                }],
                type: 'funboard_what_button_pressed'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'funboardget',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var port = 0;
                var bt_index = script.getNumberValue('PORT');
                if (bt_index == 1) port = Entry.FunBoard.PORT_MAP['up_bt'];else if (bt_index == 2) port = Entry.FunBoard.PORT_MAP['down_bt'];else if (bt_index == 3) port = Entry.FunBoard.PORT_MAP['left_bt'];else if (bt_index == 4) port = Entry.FunBoard.PORT_MAP['right_bt'];

                var DIGITAL = Entry.hw.portData.DIGITAL;
                var value = 0;
                var bt_pressed = 0;
                value = DIGITAL ? DIGITAL[port] || 0 : 0;

                if (Entry.FunBoard.Static.BUTTON_PRESS_VALUE == 0) {
                    bt_pressed = value > 0 ? 0 : 1;
                } else {
                    bt_pressed = value > 0 ? 1 : 0;
                }
                /*
                if(!Entry.hw.sendQueue['GET']) {
                Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.FunBoard.sensorTypes.DIGITAL] = {
                port: port,
                time: new Date().getTime()
                };
                */

                return bt_pressed;
            },
            syntax: { js: [], py: [] }
        },
        funboard_what_touch_button_pressed: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_touchbutton_basic'
                }],
                type: 'funboard_what_touch_button_pressed'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'funboardget',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var port = 0;
                var bt_index = script.getNumberValue('PORT');
                if (bt_index == 1) port = Entry.FunBoard.PORT_MAP['up_bt'];else if (bt_index == 2) port = Entry.FunBoard.PORT_MAP['down_bt'];else if (bt_index == 3) port = Entry.FunBoard.PORT_MAP['left_bt'];else if (bt_index == 4) port = Entry.FunBoard.PORT_MAP['right_bt'];else if (bt_index == 5) port = Entry.FunBoard.PORT_MAP['space_touchbt'];else if (bt_index == 6) port = Entry.FunBoard.PORT_MAP['enter_touchbt'];else if (bt_index == 7) port = Entry.FunBoard.PORT_MAP['escape_touchbt'];

                var value = 0;
                var bt_pressed = 0;

                if (bt_index >= 5) {
                    var ANALOG = Entry.hw.portData.ANALOG;
                    value = ANALOG ? ANALOG[port] || 0 : 0;
                } else {
                    var DIGITAL = Entry.hw.portData.DIGITAL;
                    value = DIGITAL ? DIGITAL[port] || 0 : 0;
                    /*                
                    if(!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                    }
                    Entry.hw.sendQueue['GET'][Entry.FunBoard.sensorTypes.DIGITAL] = {
                    port: port,
                    time: new Date().getTime()
                    };
                    */
                }
                if (Entry.FunBoard.Static.BUTTON_PRESS_VALUE == 0) {
                    bt_pressed = value > 0 ? 0 : 1;
                } else {
                    bt_pressed = value > 0 ? 1 : 0;
                }
                return bt_pressed;
            },
            syntax: { js: [], py: [] }
        },
        funboard_get_digital_button_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_pushbutton_basic'
                }],
                type: 'funboard_get_digital_button_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'funboardget',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var port = 0;
                var bt_index = script.getNumberValue('PORT');
                if (bt_index == 1) port = Entry.FunBoard.PORT_MAP['up_bt'];else if (bt_index == 2) port = Entry.FunBoard.PORT_MAP['down_bt'];else if (bt_index == 3) port = Entry.FunBoard.PORT_MAP['left_bt'];else if (bt_index == 4) port = Entry.FunBoard.PORT_MAP['right_bt'];

                var DIGITAL = Entry.hw.portData.DIGITAL;
                var value = 0;
                /*
                if(!Entry.hw.sendQueue['GET']) {
                Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.FunBoard.sensorTypes.DIGITAL] = {
                port: port,
                time: new Date().getTime()
                };
                */

                // 버튼 눌림 값 그대로...
                value = DIGITAL ? DIGITAL[port] || 0 : 0;
                //누른 경우 1, 아니면 0 으로 알려 준다.
                if (Entry.FunBoard.Static.BUTTON_PRESS_VALUE == 0) {
                    value = value ? 0 : 1;
                }
                return value;
            },
            syntax: { js: [], py: [] }
        },
        funboard_get_touch_button_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_touchbutton_basic'
                }],
                type: 'funboard_get_touch_button_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'funboardget',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var port = 0;
                var bt_index = script.getNumberValue('PORT');
                if (bt_index == 1) port = Entry.FunBoard.PORT_MAP['up_bt'];else if (bt_index == 2) port = Entry.FunBoard.PORT_MAP['down_bt'];else if (bt_index == 3) port = Entry.FunBoard.PORT_MAP['left_bt'];else if (bt_index == 4) port = Entry.FunBoard.PORT_MAP['right_bt'];else if (bt_index == 5) port = Entry.FunBoard.PORT_MAP['space_touchbt'];else if (bt_index == 6) port = Entry.FunBoard.PORT_MAP['enter_touchbt'];else if (bt_index == 7) port = Entry.FunBoard.PORT_MAP['escape_touchbt'];

                var value = 0;
                if (bt_index >= 5) {
                    var ANALOG = Entry.hw.portData.ANALOG;
                    value = ANALOG ? ANALOG[port] || 0 : 0;

                    // 버튼 눌림 값 그대로...
                    value = ANALOG ? ANALOG[port] || 0 : 0;
                    //누른 경우 1, 아니면 0 으로 알려 준다.
                    if (Entry.FunBoard.Static.BUTTON_PRESS_VALUE == 0) {
                        value = value ? 0 : 1;
                    }
                } else {
                    var DIGITAL = Entry.hw.portData.DIGITAL;
                    /*                
                    if(!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                    }
                    Entry.hw.sendQueue['GET'][Entry.FunBoard.sensorTypes.DIGITAL] = {
                    port: port,
                    time: new Date().getTime()
                    };
                    */

                    // 버튼 눌림 값 그대로...
                    value = DIGITAL ? DIGITAL[port] || 0 : 0;
                    //누른 경우 1, 아니면 0 으로 알려 준다.
                    if (Entry.FunBoard.Static.BUTTON_PRESS_VALUE == 0) {
                        value = value ? 0 : 1;
                    }
                }
                return value;
            },
            syntax: { js: [], py: [] }
        },
        funboard_get_number_sensor_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_analogsensor_basic'
                }],
                type: 'funboard_get_number_sensor_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'funboardget',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var port = 0;
                var index = script.getValue('PORT', script);
                if (index == 1) port = Entry.FunBoard.PORT_MAP['slide'];else if (index == 2) port = Entry.FunBoard.PORT_MAP['cds'];else if (index == 3) port = Entry.FunBoard.PORT_MAP['mic'];

                var ANALOG = Entry.hw.portData.ANALOG;
                var value = ANALOG ? ANALOG[port] || 0 : 0;
                return value;
            },
            syntax: { js: [], py: [] }
        },
        funboard_get_analog_sensor_2state: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_analogsensor_basic'
                }, {
                    type: 'funboard_list_2_state_basic'
                }],
                type: 'funboard_get_analog_sensor_2state'
            },
            paramsKeyMap: {
                PORT: 0,
                STATE: 1
            },
            class: 'funboardget',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var index = script.getValue('PORT', script);
                var state = script.getValue('STATE', script);
                var vmin = 0,
                    vmax = 1023,
                    vlimit;
                var port = 0;
                var mode = 1;
                if (index == 1) port = Entry.FunBoard.PORT_MAP['slide'];else if (index == 2) port = Entry.FunBoard.PORT_MAP['cds'];else if (index == 3) port = Entry.FunBoard.PORT_MAP['mic'];

                var ANALOG = Entry.hw.portData.ANALOG;
                var value = ANALOG ? ANALOG[port] || 0 : 0;

                vlimit = vmin + Math.max(0, Math.abs(vmax - vmin) * Entry.FunBoard.Static.ANALOG_STATE_PERCENT);

                var ret = 0;
                //작다
                if (state == 1) {
                    if (value < vlimit) ret = 1;
                } else {
                    //크다
                    //if(state == 2)
                    if (value > vlimit) ret = 1;
                }
                return ret;
            },
            syntax: { js: [], py: [] }
        },
        funboard_convert_scale: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_analogsensor_basic'
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'funboard_convert_scale'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE2: 1,
                VALUE3: 2,
                VALUE4: 3,
                VALUE5: 4
            },
            class: 'funboardget',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var index = script.getValue('PORT', script);
                var port = 0;
                if (index == 1) port = Entry.FunBoard.PORT_MAP['slide'];else if (index == 2) port = Entry.FunBoard.PORT_MAP['cds'];else if (index == 3) port = Entry.FunBoard.PORT_MAP['mic'];

                var value2 = script.getNumberValue('VALUE2', script);
                var value3 = script.getNumberValue('VALUE3', script);
                var value4 = script.getNumberValue('VALUE4', script);
                var value5 = script.getNumberValue('VALUE5', script);

                var stringValue4 = script.getValue('VALUE4', script);
                var stringValue5 = script.getValue('VALUE5', script);
                var isFloat = false;
                if (Entry.Utils.isNumber(stringValue4) && stringValue4.indexOf('.') > -1 || Entry.Utils.isNumber(stringValue5) && stringValue5.indexOf('.') > -1) {
                    isFloat = true;
                }

                var ANALOG = Entry.hw.portData.ANALOG;
                var value1 = ANALOG ? ANALOG[port] || 0 : 0;
                var result = value1;

                if (value2 > value3) {
                    var swap = value2;
                    value2 = value3;
                    value3 = swap;
                }
                if (value4 > value5) {
                    var swap = value4;
                    value4 = value5;
                    value5 = swap;
                }

                result -= value2;
                result = result * ((value5 - value4) / (value3 - value2));
                result += value4;
                result = Math.min(value5, result);
                result = Math.max(value4, result);
                //return Math.round(result);

                if (isFloat) {
                    result = Math.round(result * 100) / 100;
                } else {
                    result = Math.round(result);
                }
                return result;
            },
            syntax: { js: [], py: [] }
        },
        funboard_set_digital_buzzer: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_bzr.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_digital_octave'
                }, {
                    type: 'funboard_list_digital_tone'
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'funboard_set_digital_buzzer'
            },
            paramsKeyMap: {
                OCTAVE: 0,
                NOTE: 1,
                DURATION: 2
            },
            class: 'funboardset',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var port = Entry.FunBoard.PORT_MAP['buzzer'];
                var duration = script.getNumberValue('DURATION');
                var octave = script.getNumberValue('OCTAVE') - 1;
                var value = 0;

                if (!script.isStart) {
                    var note = script.getValue('NOTE');
                    if (!Entry.Utils.isNumber(note)) {
                        note = Entry.FunBoard.toneTable[note];
                    }
                    if (note < 0) {
                        note = 0;
                    } else if (note > 12) {
                        note = 12;
                    }
                    if (duration < 0) {
                        duration = 0;
                    }
                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }
                    if (duration === 0) {
                        Entry.hw.sendQueue['SET'][port] = {
                            type: Entry.FunBoard.sensorTypes.TONE,
                            data: 0,
                            time: new Date().getTime()
                        };
                        return script.callReturn();
                    }
                    if (octave < 0) {
                        octave = 0;
                    } else if (octave > 8) {
                        octave = 8;
                    }
                    if (note != 0) {
                        value = Entry.FunBoard.toneMap[note][octave];
                    }

                    duration = duration * 1000;
                    script.isStart = true;
                    script.timeFlag = 1;

                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.TONE,
                        data: {
                            value: value,
                            duration: duration
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, duration + 32);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.TONE,
                        data: 0,
                        time: new Date().getTime()
                    };
                    Entry.engine.isContinue = false;

                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_buzzer_second: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_bzr.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_onoff_basic'
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'funboard_buzzer_second'
            },
            paramsKeyMap: {
                ONOFF: 0,
                DURATION: 1
            },
            class: 'funboardset',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var onoff = script.getNumberValue('ONOFF');
                var duration = script.getNumberValue('DURATION');
                var li_duration = Math.ceil(duration);
                if (li_duration < 1) return script.callReturn();

                if (!script.isStart) {
                    {
                        var port = 0;
                        if (onoff == '1') port = Entry.FunBoard.EventTypes.BUZZER_ON;else port = Entry.FunBoard.EventTypes.BUZZER_OFF;

                        if (!Entry.hw.sendQueue['SET']) {
                            Entry.hw.sendQueue['SET'] = {};
                        }
                        Entry.hw.sendQueue['SET'][port] = {
                            type: Entry.FunBoard.sensorTypes.ETC,
                            data: li_duration,
                            time: new Date().getTime()
                        };
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var timeValue = li_duration; // * Entry.FunBoard.Static.DELAY_SECOND;
                    var fps = Entry.FPS || 60;
                    timeValue = 60 / fps * timeValue * 1000;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_buzzer_tone_simple: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.XBOT_c, 'C'], [Lang.Blocks.XBOT_d, 'D'], [Lang.Blocks.XBOT_e, 'E'], [Lang.Blocks.XBOT_f, 'F'], [Lang.Blocks.XBOT_g, 'G'], [Lang.Blocks.XBOT_a, 'A'], [Lang.Blocks.XBOT_b, 'B']],
                value: 'C',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_bzr.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, '4', {
                    type: 'text',
                    params: ['0.5']
                }, null],
                type: 'funboard_buzzer_tone_simple'
            },
            paramsKeyMap: {
                NOTE: 0,
                OCTAVE: 1,
                VALUE: 2
            },
            class: 'funboardset',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var note = script.getStringField('NOTE', script);
                var octave = script.getStringField('OCTAVE', script);
                var duration = script.getNumberValue('VALUE', script);

                var value = 255;
                if (note == 'C') value = 39;else if (note == 'D') value = 75;else if (note == 'E') value = 111;else if (note == 'F') value = 147;else if (note == 'G') value = 183;else if (note == 'A') value = 219;else if (note == 'B') value = 255;
                var port = Entry.FunBoard.PORT_MAP['buzzer'];
                Entry.hw.sendQueue[port] = value;

                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        funboard_buzzer_onoff: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_bzr.png',
                size: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_onoff_basic'
                }, null],
                type: 'funboard_buzzer_onoff'
            },
            paramsKeyMap: {
                ONOFF: 0
            },
            class: 'funboardset',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var onoff = script.getNumberValue('ONOFF');

                if (!script.isStart) {
                    {
                        //1 based value
                        var eff_value = Math.floor(Math.random() * (123 - 1)) + 1;

                        var port = 0;
                        if (onoff == '1') port = Entry.FunBoard.EventTypes.BUZZER_ON;else port = Entry.FunBoard.EventTypes.BUZZER_OFF;

                        if (!Entry.hw.sendQueue['SET']) {
                            Entry.hw.sendQueue['SET'] = {};
                        }
                        Entry.hw.sendQueue['SET'][port] = {
                            type: Entry.FunBoard.sensorTypes.ETC,
                            data: eff_value,
                            time: new Date().getTime()
                        };
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = Math.max(1, 3 * Entry.FunBoard.Static.DELAY_SECOND);
                    timeValue = Entry.FunBoard.Static.DELAY_SECOND;
                    timeValue = 60 / fps * timeValue * 1000;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_color_led_onoff: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_led.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_ledcolor_basic'
                }, {
                    type: 'funboard_list_onoff_basic'
                }, null],
                type: 'funboard_color_led_onoff'
            },
            paramsKeyMap: {
                VALUE: 0,
                ONOFF: 1
            },
            class: 'funboardset',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var color_index = script.getNumberValue('VALUE');
                var onoff = script.getValue('ONOFF');

                if (!script.isStart) {
                    {
                        var portR = 0;
                        var portY = 0;
                        var portG = 0;
                        var portB = 0;

                        //on
                        if (onoff == '1') {
                            portR = 0;
                            portY = 0;
                            portG = 0;
                            portB = 0;
                            if (color_index === 1) portR = 255;else if (color_index === 2) portY = 255;else if (color_index === 3) portG = 255;else if (color_index === 4) portB = 255;else if (color_index === 5) {
                                portR = 255;
                                portY = 255;
                                portG = 255;
                                portB = 255;
                            }

                            if (portR > 0) {
                                if (!Entry.hw.sendQueue['SET']) {
                                    Entry.hw.sendQueue['SET'] = {};
                                }
                                Entry.hw.sendQueue['SET'][Entry.FunBoard.PORT_MAP['led_red']] = {
                                    type: Entry.FunBoard.sensorTypes.DIGITAL,
                                    data: portR,
                                    time: new Date().getTime()
                                };
                            }
                            if (portY > 0) {
                                if (!Entry.hw.sendQueue['SET']) {
                                    Entry.hw.sendQueue['SET'] = {};
                                }
                                Entry.hw.sendQueue['SET'][Entry.FunBoard.PORT_MAP['led_yellow']] = {
                                    type: Entry.FunBoard.sensorTypes.DIGITAL,
                                    data: portY,
                                    time: new Date().getTime()
                                };
                            }
                            if (portG > 0) {
                                if (!Entry.hw.sendQueue['SET']) {
                                    Entry.hw.sendQueue['SET'] = {};
                                }
                                Entry.hw.sendQueue['SET'][Entry.FunBoard.PORT_MAP['led_green']] = {
                                    type: Entry.FunBoard.sensorTypes.DIGITAL,
                                    data: portG,
                                    time: new Date().getTime()
                                };
                            }
                            if (portB > 0) {
                                if (!Entry.hw.sendQueue['SET']) {
                                    Entry.hw.sendQueue['SET'] = {};
                                }
                                Entry.hw.sendQueue['SET'][Entry.FunBoard.PORT_MAP['led_blue']] = {
                                    type: Entry.FunBoard.sensorTypes.DIGITAL,
                                    data: portB,
                                    time: new Date().getTime()
                                };
                            }
                        } else {
                            //off
                            portR = 255;
                            portY = 255;
                            portG = 255;
                            portB = 255;

                            if (color_index === 1) portR = 0;else if (color_index === 2) portY = 0;else if (color_index === 3) portG = 0;else if (color_index === 4) portB = 0;else if (color_index === 5) {
                                portR = 0;
                                portY = 0;
                                portG = 0;
                                portB = 0;
                            }

                            if (portR < 1) {
                                if (!Entry.hw.sendQueue['SET']) {
                                    Entry.hw.sendQueue['SET'] = {};
                                }
                                Entry.hw.sendQueue['SET'][Entry.FunBoard.PORT_MAP['led_red']] = {
                                    type: Entry.FunBoard.sensorTypes.DIGITAL,
                                    data: portR,
                                    time: new Date().getTime()
                                };
                            }
                            if (portY < 1) {
                                if (!Entry.hw.sendQueue['SET']) {
                                    Entry.hw.sendQueue['SET'] = {};
                                }
                                Entry.hw.sendQueue['SET'][Entry.FunBoard.PORT_MAP['led_yellow']] = {
                                    type: Entry.FunBoard.sensorTypes.DIGITAL,
                                    data: portY,
                                    time: new Date().getTime()
                                };
                            }
                            if (portG < 1) {
                                if (!Entry.hw.sendQueue['SET']) {
                                    Entry.hw.sendQueue['SET'] = {};
                                }
                                Entry.hw.sendQueue['SET'][Entry.FunBoard.PORT_MAP['led_green']] = {
                                    type: Entry.FunBoard.sensorTypes.DIGITAL,
                                    data: portG,
                                    time: new Date().getTime()
                                };
                            }
                            if (portB < 1) {
                                if (!Entry.hw.sendQueue['SET']) {
                                    Entry.hw.sendQueue['SET'] = {};
                                }
                                Entry.hw.sendQueue['SET'][Entry.FunBoard.PORT_MAP['led_blue']] = {
                                    type: Entry.FunBoard.sensorTypes.DIGITAL,
                                    data: portB,
                                    time: new Date().getTime()
                                };
                            }
                        }
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = Entry.FunBoard.Static.DELAY_SECOND;
                    timeValue = 60 / fps * timeValue * 1000;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_color_led_on_pwm: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_led.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_ledcolor_pwm_basic'
                }, {
                    type: 'text',
                    params: ['100']
                }, null],
                type: 'funboard_color_led_on_pwm'
            },
            pyHelpDef: {
                params: [null, {
                    type: 'number',
                    params: ['A&value']
                }, null],
                type: 'funboard_color_led_on_pwm'
            },
            paramsKeyMap: {
                VALUE: 0,
                PERCENT: 1
            },
            class: 'funboardset',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var color_index = script.getNumberValue('VALUE');
                var li_percent = script.getNumberValue('PERCENT');
                li_percent = Entry.FunBoard.MinMax(li_percent, 0, 100);
                var pwm_value = Math.round(Entry.FunBoard.Static.FUNBOARD_LED_ON * (li_percent / 100));

                if (!script.isStart) {
                    {
                        var portR = 0;
                        var portY = 0;
                        if (color_index === 1) portR = pwm_value;else if (color_index === 2) portY = pwm_value;

                        if (portR > 0) {
                            if (!Entry.hw.sendQueue['SET']) {
                                Entry.hw.sendQueue['SET'] = {};
                            }
                            Entry.hw.sendQueue['SET'][Entry.FunBoard.PORT_MAP['led_red']] = {
                                type: Entry.FunBoard.sensorTypes.PWM,
                                data: portR,
                                time: new Date().getTime()
                            };
                        }
                        if (portY > 0) {
                            if (!Entry.hw.sendQueue['SET']) {
                                Entry.hw.sendQueue['SET'] = {};
                            }
                            Entry.hw.sendQueue['SET'][Entry.FunBoard.PORT_MAP['led_yellow']] = {
                                type: Entry.FunBoard.sensorTypes.PWM,
                                data: portY,
                                time: new Date().getTime()
                            };
                        }
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = Entry.FunBoard.Static.DELAY_SECOND;
                    timeValue = 60 / fps * timeValue * 1000;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_dotmatrix_intensity: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['100']
                }, null],
                type: 'funboard_dotmatrix_intensity'
            },
            pyHelpDef: {
                params: [{
                    type: 'number',
                    params: ['A&value']
                }, null],
                type: 'funboard_color_led_on_pwm'
            },
            paramsKeyMap: {
                PERCENT: 0
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var li_percent = script.getNumberValue('PERCENT');
                //1-based value (setZero와 구별)
                li_percent = Entry.FunBoard.MinMax(li_percent, 0, 100);
                li_percent = li_percent + 1;

                if (!script.isStart) {
                    {
                        var port = Entry.FunBoard.EventTypes.MATRIX_INTENSITY;

                        if (!Entry.hw.sendQueue['SET']) {
                            Entry.hw.sendQueue['SET'] = {};
                        }
                        Entry.hw.sendQueue['SET'][port] = {
                            type: Entry.FunBoard.sensorTypes.ETC,
                            data: li_percent,
                            time: new Date().getTime()
                        };
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = 1 * Entry.FunBoard.Static.DELAY_SECOND;
                    timeValue = 60 / fps * timeValue * 1000;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_dotmatrix_scroll_option: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_matrix_scroll_option'
                }, null],
                type: 'funboard_dotmatrix_scroll_option'
            },
            paramsKeyMap: {
                OPTION: 0
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var value = script.getValue('OPTION', script);
                if (value.length < 1) return script.callReturn();

                if (!script.isStart) {
                    var port = Entry.FunBoard.EventTypes.MATRIX_SCROLL_DIR;
                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }
                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = Entry.FunBoard.Static.DELAY_SECOND;
                    timeValue = 60 / fps * timeValue * 1000;
                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.ETC,
                        data: value,
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_dotmatrix_scroll_rapid: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['100']
                }, null],
                type: 'funboard_dotmatrix_scroll_rapid'
            },
            pyHelpDef: {
                params: [{
                    type: 'number',
                    params: ['A&value']
                }, null],
                type: 'funboard_color_led_on_pwm'
            },
            paramsKeyMap: {
                PERCENT: 0
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var li_percent = script.getNumberValue('PERCENT');
                //1-based value로 (setZero와 구별)
                li_percent = Entry.FunBoard.MinMax(li_percent, 0, 100);
                li_percent = li_percent + 1;

                if (!script.isStart) {
                    {
                        var port = Entry.FunBoard.EventTypes.MATRIX_SCROLL_RAPID;
                        if (!Entry.hw.sendQueue['SET']) {
                            Entry.hw.sendQueue['SET'] = {};
                        }
                        Entry.hw.sendQueue['SET'][port] = {
                            type: Entry.FunBoard.sensorTypes.ETC,
                            data: li_percent,
                            time: new Date().getTime()
                        };
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = Entry.FunBoard.Static.DELAY_SECOND;
                    timeValue = 60 / fps * timeValue * 1000;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_dotmatrix_onoff: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_onoff_basic'
                }, null],
                type: 'funboard_dotmatrix_onoff'
            },
            paramsKeyMap: {
                ONOFF: 0
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var onoff = script.getValue('ONOFF', script);
                var eff_value = Math.floor(Math.random() * (123 - 1)) + 1;

                if (!script.isStart) {
                    var port = Entry.FunBoard.EventTypes.MATRIX_OFF_ALL;
                    if (onoff == '1') port = Entry.FunBoard.EventTypes.MATRIX_ON_ALL;

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = 1 * Entry.FunBoard.Static.DELAY_SECOND;
                    timeValue = 60 / fps * timeValue * 1000;

                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.ETC,
                        data: eff_value,
                        time: new Date().getTime()
                    };
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_dotmatrix_char_display: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_matrix_char'
                }, null],
                type: 'funboard_dotmatrix_char_display'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var string = script.getValue('VALUE', script);
                if (string.length < 1) {
                    return script.callReturn();
                }

                //1개 문자만 허용
                var char_tot = 1;

                if (!script.isStart) {
                    var port = Entry.FunBoard.EventTypes.CHAR_OUT;

                    var text = [];
                    if (typeof string === 'string') {
                        for (var i = 0; i < char_tot; i++) {
                            text[i] = Entry.FunBoard.toByte(string[i]);
                        }
                    } else {
                        text[0] = string[0];
                    }

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = (char_tot + 0.5) * Entry.FunBoard.Static.DELAY_SECOND;
                    timeValue = 60 / fps * timeValue * 1000;

                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: text[0],
                            text1: text[1],
                            text2: text[2],
                            text3: text[3],
                            text4: text[4],
                            text5: text[5],
                            text6: text[6],
                            text7: text[7],
                            text8: text[8],
                            text9: text[9],
                            text10: text[10],
                            text11: text[11],
                            text12: text[12],
                            text13: text[13],
                            text14: text[14],
                            text15: text[15]
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_dotmatrix_string_display: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['A']
                }, null],
                type: 'funboard_dotmatrix_string_display'
            },
            pyHelpDef: {
                params: [{
                    type: 'text',
                    params: ['A&value']
                }, null],
                type: 'funboard_dotmatrix_string_display'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var string = script.getValue('VALUE', script);
                if (string.length < 1) {
                    return script.callReturn();
                }
                var char_tot = Math.min(string.length, Entry.FunBoard.Static.FUNBOARD_MATRIX_STRING_MAX);

                if (!script.isStart) {
                    var port = Entry.FunBoard.EventTypes.STR_OUT_DEFAULT;

                    var text = [];
                    if (typeof string === 'string') {
                        for (var i = 0; i < char_tot; i++) {
                            text[i] = Entry.FunBoard.toByte(string[i]);
                        }
                    } else {
                        text[0] = string[0];
                    }

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = char_tot * Entry.FunBoard.Static.DELAY_SECOND;
                    //scroll//var timeValue = (char_tot*3)*Entry.FunBoard.Static.DELAY_SECOND;
                    timeValue = 60 / fps * timeValue * 1000;

                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: text[0],
                            text1: text[1],
                            text2: text[2],
                            text3: text[3],
                            text4: text[4],
                            text5: text[5],
                            text6: text[6],
                            text7: text[7],
                            text8: text[8],
                            text9: text[9],
                            text10: text[10],
                            text11: text[11],
                            text12: text[12],
                            text13: text[13],
                            text14: text[14],
                            text15: text[15]
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_dotmatrix_string_display_scroll: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['A']
                }, {
                    type: 'funboard_list_matrix_scroll_option'
                }, null],
                type: 'funboard_dotmatrix_string_display_scroll'
            },
            pyHelpDef: {
                params: [{
                    type: 'text',
                    params: ['A&value']
                }, {
                    type: 'text',
                    params: ['A&value']
                }, null],
                type: 'funboard_dotmatrix_string_display_scroll'
            },
            paramsKeyMap: {
                VALUE: 0,
                SCROLL: 1
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var string = script.getValue('VALUE', script);
                var scroll_opt = script.getValue('SCROLL', script);
                if (string.length < 1) return script.callReturn();

                var char_tot = Math.min(string.length, Entry.FunBoard.Static.FUNBOARD_MATRIX_STRING_MAX);

                if (!script.isStart) {
                    var port = Entry.FunBoard.EventTypes.STR_OUT_NO_SCROLL;
                    if (scroll_opt == '1') port = Entry.FunBoard.EventTypes.STR_OUT_NO_SCROLL;else if (scroll_opt == '2') port = Entry.FunBoard.EventTypes.STR_OUT_LEFT;else if (scroll_opt == '3') port = Entry.FunBoard.EventTypes.STR_OUT_UP;else if (scroll_opt == '4') port = Entry.FunBoard.EventTypes.STR_OUT_RIGHT;else if (scroll_opt == '5') port = Entry.FunBoard.EventTypes.STR_OUT_DOWN;

                    var text = [];
                    if (typeof string === 'string') {
                        for (var i = 0; i < char_tot; i++) {
                            text[i] = Entry.FunBoard.toByte(string[i]);
                        }
                    } else {
                        text[0] = string[0];
                    }

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: text[0],
                            text1: text[1],
                            text2: text[2],
                            text3: text[3],
                            text4: text[4],
                            text5: text[5],
                            text6: text[6],
                            text7: text[7],
                            text8: text[8],
                            text9: text[9],
                            text10: text[10],
                            text11: text[11],
                            text12: text[12],
                            text13: text[13],
                            text14: text[14],
                            text15: text[15]
                        },
                        time: new Date().getTime()
                    };

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    //var timeValue = char_tot*Entry.FunBoard.Static.DELAY_SECOND;
                    var timeValue = char_tot;
                    //var timeValue = Math.ceil(char_tot*0.6);
                    //var timeValue = (char_tot*0.8);
                    timeValue = 60 / fps * timeValue * 1000;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: []
            }
        },
        funboard_dotmatrix_symbol: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['♥', '1'], ['♡', '2'], ['↑', '3'], ['↓', '4'], ['←', '5'], ['→', '6'], ['■', '7'], ['◆', '8'], ['●', '9'], ['※', '10']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'funboard_dotmatrix_symbol'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var string = script.getField('VALUE');
                //1 based value (setZero 구별)
                var value = parseInt(string);
                if (value < 1 || value > Entry.FunBoard.Static.MATRIX_REGISTED_SYMBOL_TOTAL) {
                    return script.callReturn();
                }

                if (!script.isStart) {
                    var port = Entry.FunBoard.EventTypes.MATRIX_SYMBOL_OUT;

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }
                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.ETC,
                        data: value,
                        time: new Date().getTime()
                    };

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = 1 * Entry.FunBoard.Static.DELAY_SECOND;
                    timeValue = 60 / fps * timeValue * 1000;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_dotmatrix_num: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8'], ['9', '9']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'funboard_dotmatrix_num'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var string = script.getField('VALUE');
                var char_index = parseInt(string);
                if (char_index < 0 || string.length < 1) {
                    return script.callReturn();
                }
                var char_tot = Math.min(string.length, Entry.FunBoard.Static.FUNBOARD_MATRIX_STRING_MAX);

                if (!script.isStart) {
                    var port = Entry.FunBoard.EventTypes.STR_OUT_NO_SCROLL;

                    var text = [];
                    if (typeof string === 'string') {
                        for (var i = 0; i < char_tot; i++) {
                            text[i] = Entry.FunBoard.toByte(string[i]);
                        }
                    } else {
                        text[0] = string[0];
                    }

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = char_tot * Entry.FunBoard.Static.DELAY_SECOND;
                    timeValue = 60 / fps * timeValue * 1000;

                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: text[0],
                            text1: text[1],
                            text2: text[2],
                            text3: text[3],
                            text4: text[4],
                            text5: text[5],
                            text6: text[6],
                            text7: text[7],
                            text8: text[8],
                            text9: text[9],
                            text10: text[10],
                            text11: text[11],
                            text12: text[12],
                            text13: text[13],
                            text14: text[14],
                            text15: text[15]
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_dotmatrix_big_eng: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['A', 'A'], ['B', 'B'], ['C', 'C'], ['D', 'D'], ['E', 'E'], ['F', 'F'], ['G', 'G'], ['H', 'H'], ['I', 'I'], ['J', 'J'], ['K', 'K'], ['L', 'L'], ['M', 'M'], ['N', 'N'], ['O', 'O'], ['P', 'P'], ['Q', 'Q'], ['R', 'R'], ['S', 'S'], ['T', 'T'], ['U', 'U'], ['V', 'V'], ['W', 'W'], ['X', 'X'], ['Y', 'Y'], ['Z', 'Z']],
                value: 'A',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'funboard_dotmatrix_big_eng'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var string = script.getField('VALUE');
                if (string.length < 1) {
                    return script.callReturn();
                }
                var char_tot = Math.min(string.length, Entry.FunBoard.Static.FUNBOARD_MATRIX_STRING_MAX);

                if (!script.isStart) {
                    var port = Entry.FunBoard.EventTypes.STR_OUT_NO_SCROLL;

                    var text = [];
                    if (typeof string === 'string') {
                        for (var i = 0; i < char_tot; i++) {
                            text[i] = Entry.FunBoard.toByte(string[i]);
                        }
                    } else {
                        text[0] = string;
                    }

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = char_tot * Entry.FunBoard.Static.DELAY_SECOND;
                    timeValue = 60 / fps * timeValue * 1000;

                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: text[0],
                            text1: text[1],
                            text2: text[2],
                            text3: text[3],
                            text4: text[4],
                            text5: text[5],
                            text6: text[6],
                            text7: text[7],
                            text8: text[8],
                            text9: text[9],
                            text10: text[10],
                            text11: text[11],
                            text12: text[12],
                            text13: text[13],
                            text14: text[14],
                            text15: text[15]
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_dotmatrix_small_eng: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['a', 'a'], ['b', 'b'], ['c', 'c'], ['d', 'd'], ['e', 'e'], ['f', 'f'], ['g', 'g'], ['h', 'h'], ['i', 'i'], ['j', 'j'], ['k', 'k'], ['l', 'l'], ['m', 'm'], ['n', 'n'], ['o', 'o'], ['p', 'p'], ['q', 'q'], ['r', 'r'], ['s', 's'], ['t', 't'], ['u', 'u'], ['v', 'v'], ['w', 'w'], ['x', 'x'], ['y', 'y'], ['z', 'z']],
                value: 'a',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'funboard_dotmatrix_small_eng'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var string = script.getField('VALUE');
                if (string.length < 1) {
                    return script.callReturn();
                }
                var char_tot = Math.min(string.length, Entry.FunBoard.Static.FUNBOARD_MATRIX_STRING_MAX);

                if (!script.isStart) {
                    var port = Entry.FunBoard.EventTypes.STR_OUT_NO_SCROLL;

                    var text = [];
                    if (typeof string === 'string') {
                        for (var i = 0; i < char_tot; i++) {
                            text[i] = Entry.FunBoard.toByte(string[i]);
                        }
                    } else {
                        text[0] = string[0];
                    }

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = char_tot * Entry.FunBoard.Static.DELAY_SECOND;
                    timeValue = 60 / fps * timeValue * 1000;

                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: text[0],
                            text1: text[1],
                            text2: text[2],
                            text3: text[3],
                            text4: text[4],
                            text5: text[5],
                            text6: text[6],
                            text7: text[7],
                            text8: text[8],
                            text9: text[9],
                            text10: text[10],
                            text11: text[11],
                            text12: text[12],
                            text13: text[13],
                            text14: text[14],
                            text15: text[15]
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_dotmatrix_extra_char: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['!', '!'], ['?', '?'], ['#', '#'], ['$', '$'], ['%', '%'], ['&', '&'], ['*', '*'], ['+', '+'], ['-', '-'], ['/', '/'], ['~', '~'], ['^', '^'], ['_', '_'], ['@', '@'], ['<', '<'], ['>', '>'], ['=', '='] /*,
                                                                                                                                                                                                                                     ["(","("],
                                                                                                                                                                                                                                     [")",")"],
                                                                                                                                                                                                                                     ["[","["],
                                                                                                                                                                                                                                     ["]","]"],
                                                                                                                                                                                                                                     ["{","{"],
                                                                                                                                                                                                                                     ["}","}"],
                                                                                                                                                                                                                                     [",",","],
                                                                                                                                                                                                                                     [".","."],
                                                                                                                                                                                                                                     [":",":"],
                                                                                                                                                                                                                                     [";",";"],
                                                                                                                                                                                                                                     ["'","'"],
                                                                                                                                                                                                                                     ["`","`"],
                                                                                                                                                                                                                                     ["\\","\\"],
                                                                                                                                                                                                                                     ["|","|"]
                                                                                                                                                                                                                                     */
                ],
                value: '!',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'funboard_dotmatrix_extra_char'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var string = script.getField('VALUE');
                if (string.length < 1) {
                    return script.callReturn();
                }
                var char_tot = Math.min(string.length, Entry.FunBoard.Static.FUNBOARD_MATRIX_STRING_MAX);

                if (!script.isStart) {
                    var port = Entry.FunBoard.EventTypes.STR_OUT_NO_SCROLL;

                    var text = [];
                    if (typeof string === 'string') {
                        for (var i = 0; i < char_tot; i++) {
                            text[i] = Entry.FunBoard.toByte(string[i]);
                        }
                    } else {
                        text[0] = string[0];
                    }
                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = char_tot * Entry.FunBoard.Static.DELAY_SECOND;
                    timeValue = 60 / fps * timeValue * 1000;

                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: text[0],
                            text1: text[1],
                            text2: text[2],
                            text3: text[3],
                            text4: text[4],
                            text5: text[5],
                            text6: text[6],
                            text7: text[7],
                            text8: text[8],
                            text9: text[9],
                            text10: text[10],
                            text11: text[11],
                            text12: text[12],
                            text13: text[13],
                            text14: text[14],
                            text15: text[15]
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_dotmatrix_1row: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_matrix_rows'
                }, {
                    type: 'text',
                    params: ['00000000']
                }, null],
                type: 'funboard_dotmatrix_1row'
            },
            paramsKeyMap: {
                WHAT: 0,
                BIT8: 1
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var str = script.getNumberValue('WHAT');
                var str_bit8 = script.getStringValue('BIT8', script);

                var charset = '1#*';
                var pos = -1;
                var str3 = '';
                //8개 column 값
                for (var i = 0; i < 8; i++) {
                    pos = -1;
                    if (i < str_bit8.length) pos = charset.indexOf(str_bit8[i]);
                    if (pos < 0) str3 = str3.concat('0');else str3 = str3.concat('1');
                }

                if (!script.isStart) {
                    var port = Entry.FunBoard.EventTypes.SET_ROW1;
                    var text = [];
                    text[0] = str;
                    text[1] = Entry.FunBoard.toByte(str3[0]);
                    text[2] = Entry.FunBoard.toByte(str3[1]);
                    text[3] = Entry.FunBoard.toByte(str3[2]);
                    text[4] = Entry.FunBoard.toByte(str3[3]);
                    text[5] = Entry.FunBoard.toByte(str3[4]);
                    text[6] = Entry.FunBoard.toByte(str3[5]);
                    text[7] = Entry.FunBoard.toByte(str3[6]);
                    text[8] = Entry.FunBoard.toByte(str3[7]);

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = Entry.FunBoard.Static.DELAY_SECOND;
                    //timeValue = 60/fps*timeValue*1000;
                    timeValue = 60 / fps * 50;

                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: text[0],
                            text1: text[1],
                            text2: text[2],
                            text3: text[3],
                            text4: text[4],
                            text5: text[5],
                            text6: text[6],
                            text7: text[7],
                            text8: text[8],
                            text9: text[9],
                            text10: text[10],
                            text11: text[11],
                            text12: text[12],
                            text13: text[13],
                            text14: text[14],
                            text15: text[15]
                        },
                        value: 0,
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_dotmatrix_1column: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_matrix_rows'
                }, {
                    type: 'text',
                    params: ['00000000']
                }, null],
                type: 'funboard_dotmatrix_1column'
            },
            paramsKeyMap: {
                WHAT: 0,
                BIT8: 1
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var str = script.getNumberValue('WHAT');
                var str_bit8 = script.getStringValue('BIT8', script);

                var charset = '1#*';
                var pos = -1;
                var str3 = '';
                //8개 row 값
                for (var i = 0; i < 8; i++) {
                    pos = -1;
                    if (i < str_bit8.length) pos = charset.indexOf(str_bit8[i]);
                    if (pos < 0) str3 = str3.concat('0');else str3 = str3.concat('1');
                }

                var port = Entry.FunBoard.EventTypes.SET_COL1;

                if (!script.isStart) {
                    var text = [];
                    text[0] = str;
                    text[1] = Entry.FunBoard.toByte(str3[0]);
                    text[2] = Entry.FunBoard.toByte(str3[1]);
                    text[3] = Entry.FunBoard.toByte(str3[2]);
                    text[4] = Entry.FunBoard.toByte(str3[3]);
                    text[5] = Entry.FunBoard.toByte(str3[4]);
                    text[6] = Entry.FunBoard.toByte(str3[5]);
                    text[7] = Entry.FunBoard.toByte(str3[6]);
                    text[8] = Entry.FunBoard.toByte(str3[7]);

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = Entry.FunBoard.Static.DELAY_SECOND;
                    //timeValue = 60/fps*timeValue*1000;
                    timeValue = 60 / fps * 50;

                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: text[0],
                            text1: text[1],
                            text2: text[2],
                            text3: text[3],
                            text4: text[4],
                            text5: text[5],
                            text6: text[6],
                            text7: text[7],
                            text8: text[8],
                            text9: text[9],
                            text10: text[10],
                            text11: text[11],
                            text12: text[12],
                            text13: text[13],
                            text14: text[14],
                            text15: text[15]
                        },
                        value: 0,
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        funboard_dotmatrix_1row_1column: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_matrix_rows'
                }, {
                    type: 'funboard_list_matrix_row_or_column'
                }, {
                    type: 'text',
                    params: ['00000000']
                }, null],
                type: 'funboard_dotmatrix_1row_1column'
            },
            paramsKeyMap: {
                WHAT: 0,
                HOW: 1,
                BIT8: 2
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var str = script.getNumberValue('WHAT');
                var how = script.getNumberValue('HOW');
                var str_bit8 = script.getStringValue('BIT8', script);

                var charset = '1#*';
                var pos = -1;
                var str3 = '';
                //8개 값
                for (var i = 0; i < 8; i++) {
                    pos = -1;
                    if (i < str_bit8.length) pos = charset.indexOf(str_bit8[i]);
                    if (pos < 0) str3 = str3.concat('0');else str3 = str3.concat('1');
                }

                var port = Entry.FunBoard.EventTypes.SET_ROW1;
                if (how == '2') port = Entry.FunBoard.EventTypes.SET_COL1;

                if (!script.isStart) {
                    var text = [];
                    text[0] = str;
                    text[1] = Entry.FunBoard.toByte(str3[0]);
                    text[2] = Entry.FunBoard.toByte(str3[1]);
                    text[3] = Entry.FunBoard.toByte(str3[2]);
                    text[4] = Entry.FunBoard.toByte(str3[3]);
                    text[5] = Entry.FunBoard.toByte(str3[4]);
                    text[6] = Entry.FunBoard.toByte(str3[5]);
                    text[7] = Entry.FunBoard.toByte(str3[6]);
                    text[8] = Entry.FunBoard.toByte(str3[7]);

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = Entry.FunBoard.Static.DELAY_SECOND;
                    //timeValue = 60/fps*timeValue*1000;
                    timeValue = 60 / fps * 50;

                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: text[0],
                            text1: text[1],
                            text2: text[2],
                            text3: text[3],
                            text4: text[4],
                            text5: text[5],
                            text6: text[6],
                            text7: text[7],
                            text8: text[8],
                            text9: text[9],
                            text10: text[10],
                            text11: text[11],
                            text12: text[12],
                            text13: text[13],
                            text14: text[14],
                            text15: text[15]
                        },
                        value: 0,
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: []
            }
        },
        funboard_dotmatrix_set: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_ledx.png',
                size: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'funboard_list_matrix_rows'
                }, {
                    type: 'funboard_list_matrix_rows'
                }, {
                    type: 'funboard_list_onoff_basic'
                }, null],
                type: 'funboard_dotmatrix_set'
            },
            paramsKeyMap: {
                ROW: 0,
                COL: 1,
                ONOFF: 2
            },
            class: 'funboardsetmatrix',
            isNotFor: ['funboard'],
            func: function func(sprite, script) {
                var str_row = script.getNumberValue('ROW');
                var str_col = script.getNumberValue('COL');
                var str_onoff = script.getValue('ONOFF');

                var port = Entry.FunBoard.EventTypes.SET_ROW_COL;

                if (!script.isStart) {
                    var text = [];
                    text[0] = str_row;
                    text[1] = str_col;
                    text[2] = str_onoff;

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = Entry.FunBoard.Static.DELAY_SECOND;
                    //timeValue = 60/fps*timeValue*1000;
                    timeValue = 60 / fps * 50;

                    Entry.hw.sendQueue['SET'][port] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: text[0],
                            text1: text[1],
                            text2: text[2],
                            text3: text[3],
                            text4: text[4],
                            text5: text[5],
                            text6: text[6],
                            text7: text[7],
                            text8: text[8],
                            text9: text[9],
                            text10: text[10],
                            text11: text[11],
                            text12: text[12],
                            text13: text[13],
                            text14: text[14],
                            text15: text[15]
                        },
                        value: 0,
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        }
        //endregion FunBoard
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_hamster.js":
/*!************************************************!*\
  !*** ./src/playground/blocks/block_hamster.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Hamster = {
    PORT_MAP: {
        motion: 0,
        leftWheel: 0,
        rightWheel: 0,
        buzzer: 0,
        outputA: 0,
        outputB: 0,
        leftLed: 0,
        rightLed: 0,
        note: 0,
        lineTracerMode: 0,
        lineTracerModeId: 0,
        lineTracerSpeed: 5,
        ioModeA: 0,
        ioModeB: 0
    },
    setZero: function setZero() {
        var portMap = Entry.Hamster.PORT_MAP;
        var sq = Entry.hw.sendQueue;
        for (var port in portMap) {
            sq[port] = portMap[port];
        }
        Entry.hw.update();
        var hamster = Entry.Hamster;
        hamster.lineTracerModeId = 0;
        hamster.lineTracerStateId = -1;
        hamster.tempo = 60;
        hamster.boardCommand = 0;
        hamster.removeAllTimeouts();
    },
    lineTracerModeId: 0,
    lineTracerStateId: -1,
    tempo: 60,
    boardCommand: 60,
    timeouts: [],
    removeTimeout: function removeTimeout(id) {
        clearTimeout(id);
        var timeouts = this.timeouts;
        var index = timeouts.indexOf(id);
        if (index >= 0) {
            timeouts.splice(index, 1);
        }
    },
    removeAllTimeouts: function removeAllTimeouts() {
        var timeouts = this.timeouts;
        for (var i in timeouts) {
            clearTimeout(timeouts[i]);
        }
        this.timeouts = [];
    },
    setModule: function setModule(sq) {
        sq.module = 'hamster';
    },
    setLineTracerMode: function setLineTracerMode(sq, mode) {
        this.lineTracerModeId = this.lineTracerModeId % 255 + 1;
        sq.lineTracerMode = mode;
        sq.lineTracerModeId = this.lineTracerModeId;
    },
    name: 'hamster',
    url: 'http://www.robomation.net',
    imageName: 'hamster.png',
    title: {
        "ko": "햄스터",
        "en": "Hamster"
    },
    monitorTemplate: {
        imgPath: 'hw/hamster.png',
        width: 256,
        height: 256,
        listPorts: {
            temperature: {
                name: Lang.Blocks.HAMSTER_sensor_temperature,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            inputA: {
                name: Lang.Blocks.HAMSTER_sensor_input_a,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            inputB: {
                name: Lang.Blocks.HAMSTER_sensor_input_b,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            accelerationX: {
                name: Lang.Blocks.HAMSTER_sensor_acceleration_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            accelerationY: {
                name: Lang.Blocks.HAMSTER_sensor_acceleration_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            accelerationZ: {
                name: Lang.Blocks.HAMSTER_sensor_acceleration_z,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            buzzer: {
                name: Lang.Hw.buzzer,
                type: 'output',
                pos: { x: 0, y: 0 }
            },
            note: { name: Lang.Hw.note, type: 'output', pos: { x: 0, y: 0 } },
            outputA: {
                name: Lang.Hw.output + 'A',
                type: 'output',
                pos: { x: 0, y: 0 }
            },
            outputB: {
                name: Lang.Hw.output + 'B',
                type: 'output',
                pos: { x: 0, y: 0 }
            }
        },
        ports: {
            leftProximity: {
                name: Lang.Blocks.HAMSTER_sensor_left_proximity,
                type: 'input',
                pos: { x: 122, y: 156 }
            },
            rightProximity: {
                name: Lang.Blocks.HAMSTER_sensor_right_proximity,
                type: 'input',
                pos: { x: 10, y: 108 }
            },
            leftFloor: {
                name: Lang.Blocks.HAMSTER_sensor_left_floor,
                type: 'input',
                pos: { x: 100, y: 234 }
            },
            rightFloor: {
                name: Lang.Blocks.HAMSTER_sensor_right_floor,
                type: 'input',
                pos: { x: 13, y: 180 }
            },
            light: {
                name: Lang.Blocks.HAMSTER_sensor_light,
                type: 'input',
                pos: { x: 56, y: 189 }
            },
            leftWheel: {
                name: Lang.Hw.leftWheel,
                type: 'output',
                pos: { x: 209, y: 115 }
            },
            rightWheel: {
                name: Lang.Hw.rightWheel,
                type: 'output',
                pos: { x: 98, y: 30 }
            },
            leftLed: {
                name: Lang.Hw.left + ' ' + Lang.Hw.led_en,
                type: 'output',
                pos: { x: 87, y: 210 }
            },
            rightLed: {
                name: Lang.Hw.right + ' ' + Lang.Hw.led_en,
                type: 'output',
                pos: { x: 24, y: 168 }
            }
        },
        mode: 'both'
    }
};

Entry.Hamster.getBlocks = function () {
    return {
        //region hamster 햄스터
        hamster_hand_found: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [],
            events: {},
            def: {
                params: [],
                type: 'hamster_hand_found'
            },
            class: 'hamster_sensor',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                return pd.leftProximity > 50 || pd.rightProximity > 50;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.hand_found()',
                    blockType: 'param'
                }]
            }
        },
        hamster_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                value: 'leftProximity',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'hamster_value'
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'hamster_sensor',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('DEVICE');
                return pd[dev];
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.left_proximity()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['leftProximity']
                }, {
                    syntax: 'Hamster.right_proximity()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['rightProximity']
                }, {
                    syntax: 'Hamster.left_floor()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['leftFloor']
                }, {
                    syntax: 'Hamster.right_floor()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['rightFloor']
                }, {
                    syntax: 'Hamster.acceleration_x()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['accelerationX']
                }, {
                    syntax: 'Hamster.acceleration_y()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['accelerationY']
                }, {
                    syntax: 'Hamster.acceleration_z()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['accelerationZ']
                }, {
                    syntax: 'Hamster.light()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['light']
                }, {
                    syntax: 'Hamster.temperature()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['temperature']
                }, {
                    syntax: 'Hamster.signal_strength()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['signalStrength']
                }, {
                    syntax: 'Hamster.input_a()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['inputA']
                }, {
                    syntax: 'Hamster.input_b()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['inputB']
                }]
            }
        },
        hamster_move_forward_once: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'hamster_move_forward_once'
            },
            class: 'hamster_board',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                Entry.Hamster.setModule(sq); // akaii: add
                if (!script.isStart) {
                    script.isStart = true;
                    script.isMoving = true;
                    script.count = 0;
                    script.boardState = 1;
                    sq.motion = 0; // akaii: add
                    sq.leftWheel = 45;
                    sq.rightWheel = 45;
                    Entry.Hamster.boardCommand = 1; // akaii: add
                    Entry.Hamster.setLineTracerMode(sq, 0);
                    return script;
                } else if (script.isMoving) {
                    if (Entry.Hamster.boardCommand != 1) return script; // akaii: add
                    switch (script.boardState) {
                        case 1:
                            {
                                if (script.count < 2) {
                                    if (pd.leftFloor < 50 && pd.rightFloor < 50) script.count++;else script.count = 0;
                                    var diff = pd.leftFloor - pd.rightFloor;
                                    sq.leftWheel = 45 + diff * 0.25;
                                    sq.rightWheel = 45 - diff * 0.25;
                                } else {
                                    script.count = 0;
                                    script.boardState = 2;
                                }
                                break;
                            }
                        case 2:
                            {
                                var diff = pd.leftFloor - pd.rightFloor;
                                sq.leftWheel = 45 + diff * 0.25;
                                sq.rightWheel = 45 - diff * 0.25;
                                script.boardState = 3;
                                var timer = setTimeout(function () {
                                    script.boardState = 4;
                                    Entry.Hamster.removeTimeout(timer);
                                }, 250);
                                Entry.Hamster.timeouts.push(timer);
                                break;
                            }
                        case 3:
                            {
                                var diff = pd.leftFloor - pd.rightFloor;
                                sq.leftWheel = 45 + diff * 0.25;
                                sq.rightWheel = 45 - diff * 0.25;
                                break;
                            }
                        case 4:
                            {
                                sq.leftWheel = 0;
                                sq.rightWheel = 0;
                                script.boardState = 0;
                                script.isMoving = false;
                                break;
                            }
                    }
                    return script;
                } else {
                    delete script.isStart;
                    delete script.isMoving;
                    delete script.count;
                    delete script.boardState;
                    Entry.engine.isContinue = false;
                    Entry.Hamster.boardCommand = 0; // akaii: add
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.board_forward()'
                }]
            }
        },
        hamster_turn_once: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_turn_once_left, 'LEFT'], [Lang.Blocks.HAMSTER_turn_right, 'RIGHT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'hamster_turn_once'
            },
            paramsKeyMap: {
                DIRECTION: 0
            },
            class: 'hamster_board',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                Entry.Hamster.setModule(sq); // akaii: add
                if (!script.isStart) {
                    script.isStart = true;
                    script.isMoving = true;
                    script.count = 0;
                    script.boardState = 1;
                    sq.motion = 0; // akaii: add
                    var direction = script.getField('DIRECTION', script);
                    if (direction == 'LEFT') {
                        script.isLeft = true;
                        sq.leftWheel = -45;
                        sq.rightWheel = 45;
                    } else {
                        script.isLeft = false;
                        sq.leftWheel = 45;
                        sq.rightWheel = -45;
                    }
                    Entry.Hamster.boardCommand = 2; // akaii: add
                    Entry.Hamster.setLineTracerMode(sq, 0);
                    return script;
                } else if (script.isMoving) {
                    if (Entry.Hamster.boardCommand != 2) return script; // akaii: add
                    if (script.isLeft) {
                        switch (script.boardState) {
                            case 1:
                                {
                                    if (script.count < 2) {
                                        if (pd.leftFloor > 50) script.count++;
                                    } else {
                                        script.count = 0;
                                        script.boardState = 2;
                                    }
                                    break;
                                }
                            case 2:
                                {
                                    if (pd.leftFloor < 20) {
                                        script.boardState = 3;
                                    }
                                    break;
                                }
                            case 3:
                                {
                                    if (script.count < 2) {
                                        if (pd.leftFloor < 20) script.count++;
                                    } else {
                                        script.count = 0;
                                        script.boardState = 4;
                                    }
                                    break;
                                }
                            case 4:
                                {
                                    if (pd.leftFloor > 50) {
                                        script.boardState = 5;
                                    }
                                    break;
                                }
                            case 5:
                                {
                                    var diff = pd.leftFloor - pd.rightFloor;
                                    if (diff > -15) {
                                        sq.leftWheel = 0;
                                        sq.rightWheel = 0;
                                        script.boardState = 0;
                                        script.isMoving = false;
                                    } else {
                                        sq.leftWheel = diff * 0.5;
                                        sq.rightWheel = -diff * 0.5;
                                    }
                                    break;
                                }
                        }
                    } else {
                        switch (script.boardState) {
                            case 1:
                                {
                                    if (script.count < 2) {
                                        if (pd.rightFloor > 50) script.count++;
                                    } else {
                                        script.count = 0;
                                        script.boardState = 2;
                                    }
                                    break;
                                }
                            case 2:
                                {
                                    if (pd.rightFloor < 20) {
                                        script.boardState = 3;
                                    }
                                    break;
                                }
                            case 3:
                                {
                                    if (script.count < 2) {
                                        if (pd.rightFloor < 20) script.count++;
                                    } else {
                                        script.count = 0;
                                        script.boardState = 4;
                                    }
                                    break;
                                }
                            case 4:
                                {
                                    if (pd.rightFloor > 50) {
                                        script.boardState = 5;
                                    }
                                    break;
                                }
                            case 5:
                                {
                                    var diff = pd.rightFloor - pd.leftFloor;
                                    if (diff > -15) {
                                        sq.leftWheel = 0;
                                        sq.rightWheel = 0;
                                        script.boardState = 0;
                                        script.isMoving = false;
                                    } else {
                                        sq.leftWheel = -diff * 0.5;
                                        sq.rightWheel = diff * 0.5;
                                    }
                                    break;
                                }
                        }
                    }
                    return script;
                } else {
                    delete script.isStart;
                    delete script.isMoving;
                    delete script.count;
                    delete script.boardState;
                    delete script.isLeft;
                    Entry.engine.isContinue = false;
                    Entry.Hamster.boardCommand = 0; // akaii: add
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.board_left()',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_turn_once_left, 'LEFT'], [Lang.Blocks.HAMSTER_turn_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['LEFT']
                }, {
                    syntax: 'Hamster.board_right()',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_turn_once_left, 'LEFT'], [Lang.Blocks.HAMSTER_turn_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['RIGHT']
                }]
            }
        },
        hamster_move_forward_for_secs: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'hamster_move_forward_for_secs'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'hamster_wheel',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    sq.motion = 1; // akaii: add
                    sq.leftWheel = 30;
                    sq.rightWheel = 30;
                    Entry.Hamster.boardCommand = 0; // akaii: add
                    Entry.Hamster.setLineTracerMode(sq, 0);
                    var timeValue = script.getNumberValue('VALUE') * 1000;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Hamster.removeTimeout(timer);
                    }, timeValue);
                    Entry.Hamster.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    sq.motion = 0; // akaii: add
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.move_forward(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        hamster_move_backward_for_secs: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'hamster_move_backward_for_secs'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'hamster_wheel',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    sq.motion = 2; // akaii: add
                    sq.leftWheel = -30;
                    sq.rightWheel = -30;
                    Entry.Hamster.boardCommand = 0; // akaii: add
                    Entry.Hamster.setLineTracerMode(sq, 0);
                    var timeValue = script.getNumberValue('VALUE') * 1000;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Hamster.removeTimeout(timer);
                    }, timeValue);
                    Entry.Hamster.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    sq.motion = 0; // akaii: add
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.move_backward(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        hamster_turn_for_secs: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_turn_once_left, 'LEFT'], [Lang.Blocks.HAMSTER_turn_right, 'RIGHT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'hamster_turn_for_secs'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1
            },
            class: 'hamster_wheel',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    var direction = script.getField('DIRECTION', script);
                    if (direction == 'LEFT') {
                        sq.motion = 3; // akaii: add
                        sq.leftWheel = -30;
                        sq.rightWheel = 30;
                    } else {
                        sq.motion = 4; // akaii: add
                        sq.leftWheel = 30;
                        sq.rightWheel = -30;
                    }
                    Entry.Hamster.boardCommand = 0; // akaii: add
                    Entry.Hamster.setLineTracerMode(sq, 0);
                    var timeValue = script.getNumberValue('VALUE') * 1000;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Hamster.removeTimeout(timer);
                    }, timeValue);
                    Entry.Hamster.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    sq.motion = 0; // akaii: add
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.turn_left(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_turn_once_left, 'LEFT'], [Lang.Blocks.HAMSTER_turn_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['LEFT']
                }, {
                    syntax: 'Hamster.turn_right(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_turn_once_left, 'LEFT'], [Lang.Blocks.HAMSTER_turn_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['RIGHT']
                }]
            }
        },
        hamster_change_both_wheels_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['10']
                }, {
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'hamster_change_both_wheels_by'
            },
            paramsKeyMap: {
                LEFT: 0,
                RIGHT: 1
            },
            class: 'hamster_wheel',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                var left = script.getNumberValue('LEFT');
                var right = script.getNumberValue('RIGHT');
                sq.motion = 0; // akaii: add
                sq.leftWheel = sq.leftWheel != undefined ? sq.leftWheel + left : left;
                sq.rightWheel = sq.rightWheel != undefined ? sq.rightWheel + right : right;
                Entry.Hamster.boardCommand = 0; // akaii: add
                Entry.Hamster.setLineTracerMode(sq, 0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.wheels_by(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        hamster_set_both_wheels_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['30']
                }, {
                    type: 'text',
                    params: ['30']
                }, null],
                type: 'hamster_set_both_wheels_to'
            },
            paramsKeyMap: {
                LEFT: 0,
                RIGHT: 1
            },
            class: 'hamster_wheel',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                sq.motion = 0; // akaii: add
                sq.leftWheel = script.getNumberValue('LEFT');
                sq.rightWheel = script.getNumberValue('RIGHT');
                Entry.Hamster.boardCommand = 0; // akaii: add
                Entry.Hamster.setLineTracerMode(sq, 0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.wheels(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        hamster_change_wheel_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'hamster_change_wheel_by'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1
            },
            class: 'hamster_wheel',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                var direction = script.getField('DIRECTION');
                var value = script.getNumberValue('VALUE');
                sq.motion = 0; // akaii: add
                if (direction == 'LEFT') {
                    sq.leftWheel = sq.leftWheel != undefined ? sq.leftWheel + value : value;
                } else if (direction == 'RIGHT') {
                    sq.rightWheel = sq.rightWheel != undefined ? sq.rightWheel + value : value;
                } else {
                    sq.leftWheel = sq.leftWheel != undefined ? sq.leftWheel + value : value;
                    sq.rightWheel = sq.rightWheel != undefined ? sq.rightWheel + value : value;
                }
                Entry.Hamster.boardCommand = 0; // akaii: add
                Entry.Hamster.setLineTracerMode(sq, 0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.left_wheel_by(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['LEFT']
                }, {
                    syntax: 'Hamster.right_wheel_by(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['RIGHT']
                }, {
                    syntax: 'Hamster.wheels_by(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['BOTH'],
                    keyOption: 'SAME'
                }]
            }
        },
        hamster_set_wheel_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['30']
                }, null],
                type: 'hamster_set_wheel_to'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1
            },
            class: 'hamster_wheel',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                var direction = script.getField('DIRECTION');
                var value = script.getNumberValue('VALUE');
                sq.motion = 0; // akaii: add
                if (direction == 'LEFT') {
                    sq.leftWheel = value;
                } else if (direction == 'RIGHT') {
                    sq.rightWheel = value;
                } else {
                    sq.leftWheel = value;
                    sq.rightWheel = value;
                }
                Entry.Hamster.boardCommand = 0; // akaii: add
                Entry.Hamster.setLineTracerMode(sq, 0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.left_wheel(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['LEFT']
                }, {
                    syntax: 'Hamster.right_wheel(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['RIGHT']
                }, {
                    syntax: 'Hamster.wheels(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['BOTH'],
                    keyOption: 'SAME'
                }]
            }
        },
        hamster_follow_line_using: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                value: 'BLACK',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_both_floor_sensors, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'hamster_follow_line_using'
            },
            paramsKeyMap: {
                COLOR: 0,
                DIRECTION: 1
            },
            class: 'hamster_wheel',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                var color = script.getField('COLOR');
                var direction = script.getField('DIRECTION');

                var mode = 1;
                if (direction == 'RIGHT') mode = 2;else if (direction == 'BOTH') mode = 3;
                if (color == 'WHITE') mode += 7;

                sq.motion = 0; // akaii: add
                sq.leftWheel = 0;
                sq.rightWheel = 0;
                Entry.Hamster.boardCommand = 0; // akaii: add
                Entry.Hamster.setLineTracerMode(sq, mode);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_BLACK_LEFT_SENSOR)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_both_floor_sensors, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BLACK', 'LEFT']
                }, {
                    syntax: 'Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_WHITE_LEFT_SENSOR)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_both_floor_sensors, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['WHITE', 'LEFT']
                }, {
                    syntax: 'Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_BLACK_RIGHT_SENSOR)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_both_floor_sensors, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BLACK', 'RIGHT']
                }, {
                    syntax: 'Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_BLACK_BOTH_SENSORS)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_both_floor_sensors, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BLACK', 'BOTH']
                }, {
                    syntax: 'Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_WHITE_RIGHT_SENSOR)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_both_floor_sensors, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['WHITE', 'RIGHT']
                }, {
                    syntax: 'Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_WHITE_BOTH_SENSORS)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_both_floor_sensors, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['WHITE', 'BOTH']
                }]
            }
        },
        hamster_follow_line_until: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                value: 'BLACK',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_front, 'FRONT'], [Lang.Blocks.HAMSTER_rear, 'REAR']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'hamster_follow_line_until'
            },
            paramsKeyMap: {
                COLOR: 0,
                DIRECTION: 1
            },
            class: 'hamster_wheel',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                var pd = Entry.hw.portData;
                var color = script.getField('COLOR');
                var direction = script.getField('DIRECTION');

                var mode = 4;
                if (direction == 'RIGHT') mode = 5;else if (direction == 'FRONT') mode = 6;else if (direction == 'REAR') mode = 7;
                if (color == 'WHITE') mode += 7;

                if (!script.isStart) {
                    script.isStart = true;
                    sq.motion = 0; // akaii: add
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    Entry.Hamster.boardCommand = 0; // akaii: add
                    Entry.Hamster.setLineTracerMode(sq, mode);
                    return script;
                } else {
                    var hamster = Entry.Hamster;
                    if (pd.lineTracerStateId != hamster.lineTracerStateId) {
                        hamster.lineTracerStateId = pd.lineTracerStateId;
                        if (pd.lineTracerState == 0x40) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            hamster.setLineTracerMode(sq, 0);
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_BLACK_TURN_LEFT)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_front, 'FRONT'], [Lang.Blocks.HAMSTER_rear, 'REAR']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BLACK', 'LEFT']
                }, {
                    syntax: 'Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_WHITE_TURN_LEFT)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_front, 'FRONT'], [Lang.Blocks.HAMSTER_rear, 'REAR']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['WHITE', 'LEFT']
                }, {
                    syntax: 'Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_BLACK_TURN_RIGHT)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_front, 'FRONT'], [Lang.Blocks.HAMSTER_rear, 'REAR']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BLACK', 'RIGHT']
                }, {
                    syntax: 'Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_BLACK_MOVE_FORWARD)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_front, 'FRONT'], [Lang.Blocks.HAMSTER_rear, 'REAR']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BLACK', 'FRONT']
                }, {
                    syntax: 'Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_BLACK_UTURN)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_front, 'FRONT'], [Lang.Blocks.HAMSTER_rear, 'REAR']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BLACK', 'REAR']
                }, {
                    syntax: 'Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_WHITE_TURN_RIGHT)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_front, 'FRONT'], [Lang.Blocks.HAMSTER_rear, 'REAR']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['WHITE', 'RIGHT']
                }, {
                    syntax: 'Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_WHITE_MOVE_FORWARD)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_front, 'FRONT'], [Lang.Blocks.HAMSTER_rear, 'REAR']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['WHITE', 'FRONT']
                }, {
                    syntax: 'Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_WHITE_UTURN)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_front, 'FRONT'], [Lang.Blocks.HAMSTER_rear, 'REAR']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['WHITE', 'REAR']
                }]
            }
        },
        hamster_set_following_speed_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: ['5', null],
                type: 'hamster_set_following_speed_to'
            },
            paramsKeyMap: {
                SPEED: 0
            },
            class: 'hamster_wheel',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                sq.lineTracerSpeed = Number(script.getField('SPEED', script));
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.line_tracer_speed(%1)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringOrNumberByValue
                    }]
                }]
            }
        },
        hamster_stop: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'hamster_stop'
            },
            class: 'hamster_wheel',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                sq.motion = 0; // akaii: add
                sq.leftWheel = 0;
                sq.rightWheel = 0;
                Entry.Hamster.boardCommand = 0; // akaii: add
                Entry.Hamster.setLineTracerMode(sq, 0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.stop()'
                }]
            }
        },
        hamster_set_led_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'hamster_set_led_to'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                COLOR: 1
            },
            class: 'hamster_led',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                var direction = script.getField('DIRECTION', script);
                var color = Number(script.getField('COLOR', script));
                if (direction == 'LEFT') {
                    sq.leftLed = color;
                } else if (direction == 'RIGHT') {
                    sq.rightLed = color;
                } else {
                    sq.leftLed = color;
                    sq.rightLed = color;
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.left_led(Hamster.LED_RED)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['LEFT', '4']
                }, {
                    syntax: 'Hamster.left_led(Hamster.LED_YELLOW)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['LEFT', '6']
                }, {
                    syntax: 'Hamster.left_led(Hamster.LED_GREEN)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['LEFT', '2']
                }, {
                    syntax: 'Hamster.left_led(Hamster.LED_CYAN)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['LEFT', '3']
                }, {
                    syntax: 'Hamster.left_led(Hamster.LED_BLUE)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['LEFT', '1']
                }, {
                    syntax: 'Hamster.left_led(Hamster.LED_MAGENTA)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['LEFT', '5']
                }, {
                    syntax: 'Hamster.left_led(Hamster.LED_WHITE)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['LEFT', '7']
                }, {
                    syntax: 'Hamster.right_led(Hamster.LED_RED)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['RIGHT', '4']
                }, {
                    syntax: 'Hamster.right_led(Hamster.LED_YELLOW)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['RIGHT', '6']
                }, {
                    syntax: 'Hamster.right_led(Hamster.LED_GREEN)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['RIGHT', '2']
                }, {
                    syntax: 'Hamster.right_led(Hamster.LED_CYAN)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['RIGHT', '3']
                }, {
                    syntax: 'Hamster.right_led(Hamster.LED_BLUE)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['RIGHT', '1']
                }, {
                    syntax: 'Hamster.right_led(Hamster.LED_MAGENTA)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['RIGHT', '5']
                }, {
                    syntax: 'Hamster.right_led(Hamster.LED_WHITE)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['RIGHT', '7']
                }, {
                    syntax: 'Hamster.leds(Hamster.LED_RED)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BOTH', '4']
                }, {
                    syntax: 'Hamster.leds(Hamster.LED_YELLOW)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BOTH', '6']
                }, {
                    syntax: 'Hamster.leds(Hamster.LED_GREEN)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BOTH', '2']
                }, {
                    syntax: 'Hamster.leds(Hamster.LED_CYAN)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BOTH', '3']
                }, {
                    syntax: 'Hamster.leds(Hamster.LED_BLUE)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BOTH', '1']
                }, {
                    syntax: 'Hamster.leds(Hamster.LED_MAGENTA)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BOTH', '5']
                }, {
                    syntax: 'Hamster.leds(Hamster.LED_WHITE)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BOTH', '7']
                }]
            }
        },
        hamster_clear_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'hamster_clear_led'
            },
            paramsKeyMap: {
                DIRECTION: 0
            },
            class: 'hamster_led',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                var direction = script.getField('DIRECTION', script);
                if (direction == 'LEFT') {
                    sq.leftLed = 0;
                } else if (direction == 'RIGHT') {
                    sq.rightLed = 0;
                } else {
                    sq.leftLed = 0;
                    sq.rightLed = 0;
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.left_led(0)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['LEFT']
                }, {
                    syntax: 'Hamster.left_led(Hamster.LED_OFF)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['LEFT']
                }, {
                    syntax: 'Hamster.left_led(Hamster.LED_OFF, Hamster.LED_OFF)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['LEFT']
                }, {
                    syntax: 'Hamster.right_led(0)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['RIGHT']
                }, {
                    syntax: 'Hamster.right_led(Hamster.LED_OFF)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['RIGHT']
                }, {
                    syntax: 'Hamster.right_led(Hamster.LED_OFF, Hamster.LED_OFF)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['RIGHT']
                }, {
                    syntax: 'Hamster.leds(0)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BOTH']
                }, {
                    syntax: 'Hamster.leds(Hamster.LED_OFF)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BOTH']
                }, {
                    syntax: 'Hamster.leds(Hamster.LED_OFF, Hamster.LED_OFF)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['BOTH']
                }]
            }
        },
        hamster_beep: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'hamster_beep'
            },
            class: 'hamster_buzzer',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    sq.buzzer = 440;
                    sq.note = 0;
                    var timeValue = 0.2 * 1000;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Hamster.removeTimeout(timer);
                    }, timeValue);
                    Entry.Hamster.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    sq.buzzer = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.beep()'
                }]
            }
        },
        hamster_change_buzzer_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'hamster_change_buzzer_by'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'hamster_buzzer',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                var value = script.getNumberValue('VALUE');
                sq.buzzer = sq.buzzer != undefined ? sq.buzzer + value : value;
                sq.note = 0;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.buzzer_by(%1)' // akaii: modify
                }]
            }
        },
        hamster_set_buzzer_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'hamster_set_buzzer_to'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'hamster_buzzer',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                sq.buzzer = script.getNumberValue('VALUE');
                sq.note = 0;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.buzzer(%1)'
                }]
            }
        },
        hamster_clear_buzzer: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'hamster_clear_buzzer'
            },
            class: 'hamster_buzzer',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                sq.buzzer = 0;
                sq.note = 0;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.buzzer(0)',
                    params: [null]
                }]
            }
        },
        hamster_play_note_for: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.do_name, '4'], [Lang.Blocks.do_sharp_name, '5'], [Lang.Blocks.re_name, '6'], [Lang.Blocks.re_sharp_name, '7'], [Lang.Blocks.mi_name, '8'], [Lang.Blocks.fa_name, '9'], [Lang.Blocks.fa_sharp_name, '10'], [Lang.Blocks.sol_name, '11'], [Lang.Blocks.sol_sharp_name, '12'], [Lang.Blocks.la_name, '13'], [Lang.Blocks.la_sharp_name, '14'], [Lang.Blocks.si_name, '15']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, '4', {
                    type: 'text',
                    params: ['0.5']
                }, null],
                type: 'hamster_play_note_for'
            },
            paramsKeyMap: {
                NOTE: 0,
                OCTAVE: 1,
                VALUE: 2
            },
            class: 'hamster_buzzer',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                if (!script.isStart) {
                    var note = script.getNumberField('NOTE', script);
                    var octave = script.getNumberField('OCTAVE', script);
                    var beat = script.getNumberValue('VALUE', script);
                    var tempo = Entry.Hamster.tempo;
                    note += (octave - 1) * 12;
                    var timeValue = beat * 60 * 1000 / tempo;
                    script.isStart = true;
                    script.timeFlag = 1;
                    sq.buzzer = 0;
                    sq.note = note;
                    if (timeValue > 100) {
                        var timer1 = setTimeout(function () {
                            sq.note = 0;
                            Entry.Hamster.removeTimeout(timer1);
                        }, timeValue - 100);
                        Entry.Hamster.timeouts.push(timer1);
                    }
                    var timer2 = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Hamster.removeTimeout(timer2);
                    }, timeValue);
                    Entry.Hamster.timeouts.push(timer2);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    sq.note = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.note(%1, %2, %3)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ALBERT_note_c + '', '4'], [Lang.Blocks.ALBERT_note_c + '#', '5'], [Lang.Blocks.ALBERT_note_d + '', '6'], [Lang.Blocks.ALBERT_note_e + 'b', '7'], [Lang.Blocks.ALBERT_note_e + '', '8'], [Lang.Blocks.ALBERT_note_f + '', '9'], [Lang.Blocks.ALBERT_note_f + '#', '10'], [Lang.Blocks.ALBERT_note_g + '', '11'], [Lang.Blocks.ALBERT_note_g + '#', '12'], [Lang.Blocks.ALBERT_note_a + '', '13'], [Lang.Blocks.ALBERT_note_b + 'b', '14'], [Lang.Blocks.ALBERT_note_b + '', '15']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase, // akaii: modify
                        codeMap: 'Entry.CodeMap.Hamster.hamster_play_note_for[0]'
                    }, {
                        type: 'Dropdown',
                        options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringOrNumberByValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        hamster_rest_for: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.25']
                }, null],
                type: 'hamster_rest_for'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'hamster_buzzer',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    var timeValue = script.getNumberValue('VALUE');
                    timeValue = timeValue * 60 * 1000 / Entry.Hamster.tempo;
                    sq.buzzer = 0;
                    sq.note = 0;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Hamster.removeTimeout(timer);
                    }, timeValue);
                    Entry.Hamster.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.note(0, %1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }],
                    keyOption: '0'
                }, {
                    syntax: 'Hamster.note(Hamster.NOTE_OFF, %1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }],
                    keyOption: 'Hamster.NOTE_OFF'
                }]
            }
        },
        hamster_change_tempo_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['20']
                }, null],
                type: 'hamster_change_tempo_by'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'hamster_buzzer',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                Entry.Hamster.setModule(Entry.hw.sendQueue); // akaii: add
                Entry.Hamster.tempo += script.getNumberValue('VALUE');
                if (Entry.Hamster.tempo < 1) Entry.Hamster.tempo = 1;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.tempo_by(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        hamster_set_tempo_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['60']
                }, null],
                type: 'hamster_set_tempo_to'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'hamster_buzzer',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                Entry.Hamster.setModule(Entry.hw.sendQueue); // akaii: add
                Entry.Hamster.tempo = script.getNumberValue('VALUE');
                if (Entry.Hamster.tempo < 1) Entry.Hamster.tempo = 1;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.tempo(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        hamster_set_port_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                value: 'A',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_analog_input, '0'], [Lang.Blocks.HAMSTER_digital_input, '1'], [Lang.Blocks.HAMSTER_servo_output, '8'], [Lang.Blocks.HAMSTER_pwm_output, '9'], [Lang.Blocks.HAMSTER_digital_output, '10']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'hamster_set_port_to'
            },
            paramsKeyMap: {
                PORT: 0,
                MODE: 1
            },
            class: 'hamster_port',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                var port = script.getField('PORT', script);
                var mode = Number(script.getField('MODE', script));
                if (port == 'A') {
                    sq.ioModeA = mode;
                } else if (port == 'B') {
                    sq.ioModeB = mode;
                } else {
                    sq.ioModeA = mode;
                    sq.ioModeB = mode;
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.io_mode_a(Hamster.IO_MODE_ANALOG_INPUT)',
                    textParams: [{
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['A', '0']
                }, {
                    syntax: 'Hamster.io_mode_a(Hamster.IO_MODE_DIGITAL_INPUT)',
                    textParams: [{
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['A', '1']
                }, {
                    syntax: 'Hamster.io_mode_a(Hamster.IO_MODE_SERVO_OUTPUT)',
                    textParams: [{
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['A', '8']
                }, {
                    syntax: 'Hamster.io_mode_a(Hamster.IO_MODE_PWM_OUTPUT)',
                    textParams: [{
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['A', '9']
                }, {
                    syntax: 'Hamster.io_mode_a(Hamster.IO_MODE_DIGITAL_OUTPUT)',
                    textParams: [{
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['A', '10']
                }, {
                    syntax: 'Hamster.io_mode_b(Hamster.IO_MODE_ANALOG_INPUT)',
                    textParams: [{
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['B', '0']
                }, {
                    syntax: 'Hamster.io_mode_b(Hamster.IO_MODE_DIGITAL_INPUT)',
                    textParams: [{
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['B', '1']
                }, {
                    syntax: 'Hamster.io_mode_b(Hamster.IO_MODE_SERVO_OUTPUT)',
                    textParams: [{
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['B', '8']
                }, {
                    syntax: 'Hamster.io_mode_b(Hamster.IO_MODE_PWM_OUTPUT)',
                    textParams: [{
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['B', '9']
                }, {
                    syntax: 'Hamster.io_mode_b(Hamster.IO_MODE_DIGITAL_OUTPUT)',
                    textParams: [{
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['B', '10']
                }, {
                    syntax: 'Hamster.io_modes(Hamster.IO_MODE_ANALOG_INPUT)',
                    textParams: [{
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['AB', '0']
                }, {
                    syntax: 'Hamster.io_modes(Hamster.IO_MODE_DIGITAL_INPUT)',
                    textParams: [{
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['AB', '1']
                }, {
                    syntax: 'Hamster.io_modes(Hamster.IO_MODE_SERVO_OUTPUT)',
                    textParams: [{
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['AB', '8']
                }, {
                    syntax: 'Hamster.io_modes(Hamster.IO_MODE_PWM_OUTPUT)',
                    textParams: [{
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['AB', '9']
                }, {
                    syntax: 'Hamster.io_modes(Hamster.IO_MODE_DIGITAL_OUTPUT)',
                    textParams: [{
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['AB', '10']
                }]
            }
        },
        hamster_change_output_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                value: 'A',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'hamster_change_output_by'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'hamster_port',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                var port = script.getField('PORT');
                var value = script.getNumberValue('VALUE');
                if (port == 'A') {
                    sq.outputA = sq.outputA != undefined ? sq.outputA + value : value;
                } else if (port == 'B') {
                    sq.outputB = sq.outputB != undefined ? sq.outputB + value : value;
                } else {
                    sq.outputA = sq.outputA != undefined ? sq.outputA + value : value;
                    sq.outputB = sq.outputB != undefined ? sq.outputB + value : value;
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.output_a_by(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                        value: 'A',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['A']
                }, {
                    syntax: 'Hamster.output_b_by(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                        value: 'A',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['B']
                }, {
                    syntax: 'Hamster.outputs_by(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                        value: 'A',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['AB']
                }]
            }
        },
        hamster_set_output_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                value: 'A',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['100']
                }, null],
                type: 'hamster_set_output_to'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'hamster_port',
            isNotFor: ['hamster'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Hamster.setModule(sq); // akaii: add
                var port = script.getField('PORT');
                var value = script.getNumberValue('VALUE');
                if (port == 'A') {
                    sq.outputA = value;
                } else if (port == 'B') {
                    sq.outputB = value;
                } else {
                    sq.outputA = value;
                    sq.outputB = value;
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Hamster.output_a(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                        value: 'A',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['A']
                }, {
                    syntax: 'Hamster.output_b(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                        value: 'A',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['B']
                }, {
                    syntax: 'Hamster.outputs(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                        value: 'A',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['AB']
                }]
            }
        }
        //endregion hamster 햄스터
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_hummingbird.js":
/*!****************************************************!*\
  !*** ./src/playground/blocks/block_hummingbird.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.hummingbird = {
    PORT_MAP: {
        triLEDR1: 256, //D7
        triLEDG1: 256, //D4
        triLEDB1: 256, //D12
        triLEDR2: 256, //D11
        triLEDG2: 256, //D6
        triLEDB2: 256, //D5
        led1: 256, //D3
        led2: 256, //D2
        led3: 256, //HWB
        led4: 256, //A0
        vibrat1: 256, //D9
        vibrat2: 256, //D10
        dcMotor1: 256, //spi
        dcMotor2: 256 //spi
        //servo1: 256,  //spi
        //servo2: 256,  //spi
        //servo3: 256, //spi
        //servo4: 256  //spi
    },
    setZero: function setZero() {
        var portMap = Entry.hummingbird.PORT_MAP;
        var sq = Entry.hw.sendQueue;
        for (var port in portMap) {
            sq[port] = portMap[port];
        }
        Entry.hw.update();
        var hummingbird = Entry.hummingbird;
        hummingbird.removeAllTimeouts();
    },
    timeouts: [],
    removeTimeout: function removeTimeout(id) {
        clearTimeout(id);
        var timeouts = this.timeouts;
        var index = timeouts.indexOf(id);
        if (index >= 0) {
            timeouts.splice(index, 1);
        }
    },
    removeAllTimeouts: function removeAllTimeouts() {
        var timeouts = this.timeouts;
        for (var i in timeouts) {
            clearTimeout(timeouts[i]);
        }
        this.timeouts = [];
    },

    //장치이름, 부사장님과 상의가 필요 일단 허밍버드로
    name: 'hummingbird',
    url: 'http://www.creartbot.com/hummingbird',
    imageName: 'hummingbirdduo.png',
    title: {
        "en": "Hummingbird Duo",
        "ko": "허밍버드 듀오"
    }
};

Entry.hummingbird.getBlocks = function () {
    return {
        //region hummingbird 허밍버드
        //Hummingbird parts
        //범용 센서
        hummingbird_sensorValue: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '아날로그센서 %1번 값',
            params: [{
                type: 'Dropdown',
                options: [['1', 'adc1'], ['2', 'adc2'], ['3', 'adc3'], ['4', 'adc4']],
                value: 'adc1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'hummingbird_sensorValue'
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'hummingbird_sensor',
            isNotFor: ['hummingbird'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('DEVICE');
                return pd[dev];
            },
            syntax: { js: [], py: [] }
        },

        //온도센서
        hummingbird_temperatureValue: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: 'HB 온도센서 %1번 값',
            params: [{
                type: 'Dropdown',
                options: [['1', 'adc1'], ['2', 'adc2'], ['3', 'adc3'], ['4', 'adc4']],
                value: 'adc1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'hummingbird_temperatureValue'
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'hummingbird_sensor',
            isNotFor: ['hummingbird'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('DEVICE');
                var temperature_value = Math.round(pd[dev] * 100 / 2048);
                return temperature_value;
            },
            syntax: { js: [], py: [] }
        },
        // 빛 블럭
        hummingbird_lightValue: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: 'HB 빛센서 %1번 값',
            params: [{
                type: 'Dropdown',
                options: [['1', 'adc1'], ['2', 'adc2'], ['3', 'adc3'], ['4', 'adc4']],
                value: 'adc1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'hummingbird_lightValue'
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'hummingbird_sensor',
            isNotFor: ['hummingbird'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('DEVICE');
                var light_value = Math.round(pd[dev] * 100 / 1024);
                return light_value;
            },
            syntax: { js: [], py: [] }
        },

        // 거리센서 블럭
        hummingbird_distanceValue: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: 'HB 거리센서 %1번 값',
            params: [{
                type: 'Dropdown',
                options: [['1', 'adc1'], ['2', 'adc2'], ['3', 'adc3'], ['4', 'adc4']],
                value: 'adc1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'hummingbird_distanceValue'
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'hummingbird_sensor',
            isNotFor: ['hummingbird'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('DEVICE');

                var distance_value = 0;
                var flipped = 1000 - pd[dev];
                if (flipped < 180) distance_value = 0;else if (flipped >= 180 && flipped < 280) distance_value = (flipped - 180) * 4 / 100 + 5;else if (flipped >= 280 && flipped < 400) distance_value = (flipped - 280) * 3 / 120 + 9;else if (flipped >= 400 && flipped < 500) distance_value = (flipped - 400) * 3 / 100 + 11;else if (flipped >= 500 && flipped < 580) distance_value = (flipped - 500) * 3 / 80 + 14;else if (flipped >= 580 && flipped < 620) distance_value = (flipped - 580) * 2 / 40 + 17;else if (flipped >= 620 && flipped < 660) distance_value = (flipped - 620) * 4 / 40 + 19;else if (flipped >= 660 && flipped < 700) distance_value = (flipped - 660) * 4 / 40 + 23;else if (flipped >= 700 && flipped < 740) distance_value = (flipped - 700) * 6 / 40 + 27;else if (flipped >= 740 && flipped < 780) distance_value = (flipped - 740) * 7 / 40 + 33;else if (flipped >= 780 && flipped < 820) distance_value = (flipped - 780) * 15 / 40 + 41;else if (flipped >= 820 && flipped < 860) distance_value = (flipped - 820) * 11 / 40 + 56;else distance_value = 100;
                return distance_value.toFixed(0);
            },
            syntax: { js: [], py: [] }
        },

        // 소음 센서 블럭
        hummingbird_soundValue: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: 'HB 소리센서 %1번 값',
            params: [{
                type: 'Dropdown',
                options: [['1', 'adc1'], ['2', 'adc2'], ['3', 'adc3'], ['4', 'adc4']],
                value: 'adc1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'hummingbird_soundValue'
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'hummingbird_sensor',
            isNotFor: ['hummingbird'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('DEVICE');
                var sound_value = pd[dev];
                if (sound_value <= 35) sound_value = 1;
                sound_value = Math.round(sound_value * 100 / 330);
                if (sound_value > 100) sound_value = 100;
                return sound_value;
            },
            syntax: { js: [], py: [] }
        },

        // 회전센서
        hummingbird_rotaryValue: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: 'HB 로터리센서 %1번 값',
            params: [{
                type: 'Dropdown',
                options: [['1', 'adc1'], ['2', 'adc2'], ['3', 'adc3'], ['4', 'adc4']],
                value: 'adc1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'hummingbird_rotaryValue'
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'hummingbird_sensor',
            isNotFor: ['hummingbird'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('DEVICE');
                var rotary_value = Math.round(pd[dev] * 100 / 1024);
                //if (rotary_value == 0) rotary_value = 1;
                return rotary_value;
            },
            syntax: { js: [], py: [] }
        },

        //진동모터
        hummingbird_vibeMotor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: 'HB 진동모터 %1번 세기: %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['1', 'vibeMotor1'], ['2', 'vibeMotor2']],
                value: 'vibeMotor1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'hummingbird_vibeMotor'
            },
            paramsKeyMap: {
                DEVICE: 0,
                VALUE: 1
            },
            class: 'hummingbird_motor',
            isNotFor: ['hummingbird'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var dev = script.getStringField('DEVICE', script);
                var value = script.getNumberValue('VALUE', script);

                if (value > 100) value = 127;else if (value < 0) value = 0;else value = Math.floor(value * 1.27); // 0 ~ 127

                if (dev == 'vibeMotor1') sq.vibrat1 = value;else if (dev == 'vibeMotor2') sq.vibrat2 = value;
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },

        //서보모터
        hummingbird_servo: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: 'HB 서보모터 %1번 각도: %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['1', 'servo1'], ['2', 'servo2'], ['3', 'servo3'], ['4', 'servo4']],
                value: 'servo1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'hummingbird_servo'
            },
            paramsKeyMap: {
                DEVICE: 0,
                VALUE: 1
            },
            class: 'hummingbird_motor',
            isNotFor: ['hummingbird'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var mtype = script.getStringField('DEVICE', script);
                var angle = script.getNumberValue('VALUE', script);

                if (angle < 0) angle = 0;else if (angle > 180) angle = 180;

                if (mtype == 'servo1') sq.servo1 = angle;else if (mtype == 'servo2') sq.servo2 = angle;else if (mtype == 'servo3') sq.servo3 = angle;else if (mtype == 'servo4') sq.servo4 = angle;
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },

        //기어모터
        hummingbird_dcMotor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: 'HB 기어모터 %1번 속도: %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['1', 'dcMotor1'], ['2', 'dcMotor2']],
                value: 'dcMotor1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'hummingbird_dcMotor'
            },
            paramsKeyMap: {
                DEVICE: 0,
                VALUE: 1
            },
            class: 'hummingbird_motor',
            isNotFor: ['hummingbird'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var dir = script.getStringField('DEVICE', script);
                var speed = script.getNumberValue('VALUE', script);

                if (speed == 0) speed = 256;else if (speed > 100) speed = 127;else if (speed < -100) speed = -127;else speed = Math.floor(speed * 1.27); // range : -127~127

                if (dir == 'dcMotor1') sq.dcMotor1 = speed;else if (dir == 'dcMotor2') sq.dcMotor2 = speed;
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },

        // 단색LED
        hummingbird_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: 'HB 단색LED %1번 밝기: %2 %3',
            params: [{
                type: 'Dropdown',
                options: [['1', 'led1'], ['2', 'led2'], ['3', 'led3'], ['4', 'led4']],
                value: 'led1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'hummingbird_led'
            },
            paramsKeyMap: {
                DEVICE: 0,
                VALUE: 1
            },
            class: 'hummingbird_led',
            isNotFor: ['hummingbird'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var ledtype = script.getStringField('DEVICE', script);
                var value = script.getNumberValue('VALUE', script);
                if (value > 100) value = 100;
                if (value < 0) value = 0;
                value = Math.floor(value * 2.55);

                if (ledtype == 'led1') sq.led1 = value;else if (ledtype == 'led2') sq.led2 = value;else if (ledtype == 'led3') sq.led3 = value;else if (ledtype == 'led4') sq.led4 = value;
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },

        // 삼색LED
        hummingbird_triLED: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: 'HB 삼색LED %1번 빨강%2 초록%3 파랑%4 %5',
            params: [{
                type: 'Dropdown',
                options: [['1', 'triLED1'], ['2', 'triLED2']],
                value: 'triLED1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'hummingbird_triLED'
            },
            paramsKeyMap: {
                DEVICE: 0,
                cRED: 1,
                cGREEN: 2,
                cBLUE: 3
            },
            class: 'hummingbird_led',
            isNotFor: ['hummingbird'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var ledtype = script.getStringField('DEVICE', script);
                var colorRed = script.getNumberValue('cRED', script);
                var colorGreen = script.getNumberValue('cGREEN', script);
                var colorBlue = script.getNumberValue('cBLUE', script);

                if (colorRed > 100) colorRed = 100;
                if (colorGreen > 100) colorGreen = 100;
                if (colorBlue > 100) colorBlue = 100;
                if (colorRed < 0) colorRed = 0;
                if (colorGreen < 0) colorGreen = 0;
                if (colorBlue < 0) colorBlue = 0;

                colorRed = Math.floor(colorRed * 2.55);
                colorGreen = Math.floor(colorGreen * 2.55);
                colorBlue = Math.floor(colorBlue * 2.55);

                if (ledtype == 'triLED1') {
                    sq.triLEDR1 = colorRed;
                    sq.triLEDG1 = colorGreen;
                    sq.triLEDB1 = colorBlue;
                } else if (ledtype == 'triLED2') {
                    sq.triLEDR2 = colorRed;
                    sq.triLEDG2 = colorGreen;
                    sq.triLEDB2 = colorBlue;
                }
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        }
        //endregion hummingbird 허밍버드
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_iboard.js":
/*!***********************************************!*\
  !*** ./src/playground/blocks/block_iboard.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.iboard = {
    name: 'iboard',
    url: 'http://www.io-tech.co.kr',
    imageName: 'iboard.png',
    title: {
        "en": "iboard",
        "ko": "아이보드"
    },
    setZero: function setZero() {
        if (!Entry.hw.sendQueue.SET) {
            Entry.hw.sendQueue = {
                GET: {},
                SET: {}
            };
        } else {
            var keySet = Object.keys(Entry.hw.sendQueue.SET);
            keySet.forEach(function (key) {
                Entry.hw.sendQueue.SET[key].data = 0;
                Entry.hw.sendQueue.SET[key].time = new Date().getTime();
            });
        }
        Entry.hw.update();
    },
    sensorTypes: {
        ALIVE: 0,
        DIGITAL: 1,
        ANALOG: 2,
        PWM: 3,
        SERVO_PIN: 4,
        TONE: 5,
        PULSEIN: 6,
        ULTRASONIC: 7,
        TIMER: 8
    },
    toneTable: {
        '0': 0,
        C: 1,
        CS: 2,
        D: 3,
        DS: 4,
        E: 5,
        F: 6,
        FS: 7,
        G: 8,
        GS: 9,
        A: 10,
        AS: 11,
        B: 12
    },
    toneMap: {
        '1': [33, 65, 131, 262, 523, 1046, 2093, 4186],
        '2': [35, 69, 139, 277, 554, 1109, 2217, 4435],
        '3': [37, 73, 147, 294, 587, 1175, 2349, 4699],
        '4': [39, 78, 156, 311, 622, 1245, 2849, 4978],
        '5': [41, 82, 165, 330, 659, 1319, 2637, 5274],
        '6': [44, 87, 175, 349, 698, 1397, 2794, 5588],
        '7': [46, 92, 185, 370, 740, 1480, 2960, 5920],
        '8': [49, 98, 196, 392, 784, 1568, 3136, 6272],
        '9': [52, 104, 208, 415, 831, 1661, 3322, 6645],
        '10': [55, 110, 220, 440, 880, 1760, 3520, 7040],
        '11': [58, 117, 233, 466, 932, 1865, 3729, 7459],
        '12': [62, 123, 247, 494, 988, 1976, 3951, 7902]
    },
    highList: ['high', '1', 'on'],
    lowList: ['low', '0', 'off'],
    BlockState: {}
};

Entry.iboard.getBlocks = function () {
    return {
        //region iboard 아이보드
        iboard_analog_list: {
            parent: 'arduino_ext_analog_list',
            params: [{
                type: 'Dropdown',
                options: [['A0', '0'], ['A1', '1'], ['A2', '2'], ['A3', '3'], ['A4', '4'], ['A5', '5'], ['A6', '6'], ['A7', '7']],
                value: '0',
                fontSize: 11
            }],
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [['A0', '0'], ['A1', '1'], ['A2', '2'], ['A3', '3'], ['A4', '4'], ['A5', '5'], ['A6', '6'], ['A7', '7']],
                        value: '0',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringKey,
                        codeMap: 'Entry.CodeMap.Arduino.iboard_analog_list[0]'
                    }],
                    keyOption: 'iboard_analog_list'
                }]
            }
        },
        iboard_temp_sensor_get_value: {
            parent: 'arduino_ext_analog_list',
            params: [{
                type: 'Dropdown',
                options: [['A0', '0'], ['A1', '1']],
                value: '1',
                fontSize: 11
            }],
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [['A0', '0'], ['A1', '1']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringKey,
                        codeMap: 'Entry.CodeMap.Arduino.iboard_temp_sensor_get_value[0]'
                    }],
                    keyOption: 'iboard_temp_sensor_get_value'
                }]
            }
        },
        iboard_cds_sensor_get_value: {
            parent: 'arduino_ext_analog_list',
            params: [{
                type: 'Dropdown',
                options: [['A2', '2'], ['A3', '3']],
                value: '2',
                fontSize: 11
            }],
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [['A2', '2'], ['A3', '3']],
                        value: '2',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringKey,
                        codeMap: 'Entry.CodeMap.Arduino.iboard_cds_sensor_get_value[0]'
                    }],
                    keyOption: 'iboard_cds_sensor_get_value'
                }]
            }
        },
        iboard_mic_get_value: {
            parent: 'arduino_ext_analog_list',
            params: [{
                type: 'Dropdown',
                options: [['A3', '3'], ['A4', '4']],
                value: '3',
                fontSize: 11
            }],
            syntax: {
                js: [],
                py: [{
                    syntax: '%1',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [['A3', '3'], ['A4', '4']],
                        value: '3',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringKey,
                        codeMap: 'Entry.CodeMap.Arduino.iboard_mic_get_value[0]'
                    }],
                    keyOption: 'iboard_mic_get_value'
                }]
            }
        },
        iboard_button_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['D2', '2'], ['D3', '3'], ['D4', '4']],
                value: '2',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            }
        },
        iboard_pwm_led_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['D5', '5'], ['D6', '6']],
                value: '5',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            }
        },
        iboard_led_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['D10', '10'], ['D11', '11']],
                value: '10',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            }
        },
        iboard_rgb_led_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['빨간', '5'], ['초록', '6'], ['파란', '9']],
                value: '5',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            }
        },
        iboard_motor_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'TextInput',
                value: '6',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            }
        },
        iboard_motor_list2: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['정지', '0'], ['미풍', '100'], ['약풍', '170'], ['강풍', '255']],
                value: '0',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                VALUE: 0
            },
            func: function func(sprite, script) {
                return script.getField('VALUE', script);
            }
        },
        iboard_tmp: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '현재 섭씨온도',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'iboard_temp_sensor_get_value'
                }],
                type: 'iboard_tmp'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'iboard_sensor',
            isNotFor: ['iboard'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                if (port[0] === 'A') port = port.substring(1);
                var value1 = ANALOG ? ANALOG[port] || 0 : 0;
                var value2 = 5;
                var value3 = 1024;
                var value4 = 100;
                var value5 = 50;
                var result = value1 * value2 / value3 * value4 - value5;
                return result;
            }
        },
        iboard_mic: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '소리센서 값',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'iboard_mic_get_value'
                }],
                type: 'iboard_mic'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'iboard_sensor',
            isNotFor: ['iboard'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                if (port[0] === 'A') port = port.substring(1);
                var value = ANALOG ? ANALOG[port] || 0 : 0;
                var value2 = 100;
                var value3 = value - value2;
                var result = Math.abs(value3);
                return result;
            }
        },
        iboard_var_res: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '가변저항 값',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'iboard_analog_list'
                }],
                type: 'iboard_var_res'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'iboard_sensor',
            isNotFor: ['iboard'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                if (port[0] === 'A') port = port.substring(1);
                return ANALOG ? ANALOG[port] || 0 : 0;
            }
        },
        iboard_cds: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '현재밝기',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'iboard_cds_sensor_get_value'
                }],
                type: 'iboard_cds'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'iboard_sensor',
            isNotFor: ['iboard'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                if (port[0] === 'A') port = port.substring(1);
                return ANALOG ? ANALOG[port] || 0 : 0;
            }
        },
        iboard_motor: {
            template: '모터를 %2 으로 동작하기 %3',
            parent: 'arduino_ext_digital_pwm',
            def: {
                params: [{
                    type: 'iboard_motor_list'
                }, {
                    type: 'iboard_motor_list2'
                }, null],
                type: 'iboard_motor'
            },
            class: 'iboard',
            isNotFor: ['iboard']
        },
        iboard_button: {
            template: '%1 버튼을 눌렀는가?',
            parent: 'arduino_ext_get_digital',
            def: {
                params: [{
                    type: 'iboard_button_list'
                }],
                type: 'iboard_button'
            },
            class: 'iboard_sensor',
            isNotFor: ['iboard']
        },
        iboard_led: {
            template: 'LED %1 번을 %2 %3',
            parent: 'arduino_ext_toggle_led',
            def: {
                params: [{
                    type: 'iboard_led_list'
                }, {
                    type: 'arduino_get_digital_toggle',
                    params: ['on']
                }, null],
                type: 'iboard_led'
            },
            class: 'iboard',
            isNotFor: ['iboard']
        },
        iboard_rgb_led: {
            template: 'RGB LED의 %1 LED %2 %3',
            parent: 'arduino_ext_toggle_led',
            def: {
                params: [{
                    type: 'iboard_rgb_led_list'
                }, {
                    type: 'arduino_get_digital_toggle',
                    params: ['on']
                }, null],
                type: 'iboard_rgb_led'
            },
            class: 'iboard',
            isNotFor: ['iboard']
        },
        iboard_pwm_led: {
            template: 'LED %1 번의 밝기를 %2 (으)로 정하기 %3',
            parent: 'arduino_ext_digital_pwm',
            def: {
                params: [{
                    type: 'iboard_pwm_led_list'
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'iboard_pwm_led'
            },
            class: 'iboard',
            isNotFor: ['iboard']
        },
        iboard_set_tone: {
            template: '버저를 %2 %3 음으로 %4 초 연주하기 %5',
            parent: 'arduino_ext_set_tone',
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: ['5']
                }, {
                    type: 'arduino_ext_tone_list'
                }, {
                    type: 'arduino_ext_octave_list'
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'iboard_set_tone'
            },
            class: 'iboard',
            isNotFor: ['iboard']
        },
        iboard_get_digital: {
            template: '디지털 %1 번 센서값  ',
            parent: 'arduino_ext_get_digital',
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }],
                type: 'iboard_get_digital'
            },
            class: 'arduino_ori',
            isNotFor: ['iboard']
        },
        iboard_get_analog_value: {
            parent: 'arduino_ext_get_analog_value',
            template: '아날로그 %1 번 센서값  ',
            def: {
                params: [{
                    type: 'iboard_analog_list'
                }],
                type: 'iboard_get_analog_value'
            },
            class: 'arduino_ori',
            isNotFor: ['iboard']
        },
        iboard_get_analog_value_map: {
            parent: 'arduino_ext_get_analog_value_map',
            template: '%1 값의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 바꾼값  ',
            def: {
                params: [{
                    type: 'iboard_get_analog_value',
                    params: [{
                        type: 'iboard_analog_list'
                    }]
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['255']
                }],
                type: 'iboard_get_analog_value_map'
            },
            class: 'arduino_ori',
            isNotFor: ['iboard']
        },
        iboard_toggle_led: {
            template: '디지털 %1 번 핀 %2 %3',
            parent: 'arduino_ext_toggle_led',
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }, {
                    type: 'arduino_get_digital_toggle',
                    params: ['on']
                }, null],
                type: 'iboard_toggle_led'
            },
            class: 'arduino_ori',
            isNotFor: ['iboard']
        },
        iboard_digital_pwm: {
            template: '디지털 %1 번 핀을 %2 (으)로 정하기 %3',
            parent: 'arduino_ext_digital_pwm',
            def: {
                params: [{
                    type: 'arduino_get_pwm_port_number'
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'iboard_digital_pwm'
            },
            class: 'arduino_ori',
            isNotFor: ['iboard']
        }
        //endregion iboard 아이보드
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_jdkit.js":
/*!**********************************************!*\
  !*** ./src/playground/blocks/block_jdkit.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.JDKit = {
    Cmd: {
        LED: 1,
        TUNE: 2,
        TUNEDUR: 3,
        ROLL: 4,
        PITCH: 5,
        YAW: 6,
        THROTTLE: 7,
        OPTION: 8,
        MOTOR0: 9,
        MOTOR1: 10,
        MOTOR2: 11,
        MOTOR3: 12
    },
    Sensor: {
        JOYSTICK_LLR: 1,
        JOYSTICK_LTB: 2,
        JOYSTICK_RLR: 3,
        JOYSTICK_RTB: 4,
        BUTTON: 5,
        DRONECONNECT: 6,
        ULTRASONIC: 7,
        GYRO_X: 8,
        GYRO_Y: 9,
        DRONEREADY: 10
    },
    setZero: function setZero() {
        Entry.hw.sendQueue.CMD = [0xf0, 0x00, 0x00, 0x00, 0x64, 0x64, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        Entry.hw.update();
    },
    name: 'JDKit',
    url: 'http://www.junilab.co.kr',
    imageName: 'jdkit.png',
    title: {
        "en": "JDKit",
        "ko": "제이디키트"
    },
    monitorTemplate: {
        imgPath: 'hw/coconut.png',
        width: 256,
        height: 256,
        listPorts: {
            'CMD[1]': {
                name: Lang.Blocks.coconut_sensor_temperature,
                type: 'input',
                pos: {
                    x: 0,
                    y: 0
                }
            },
            accelerationX: {
                name: Lang.Blocks.coconut_sensor_acceleration_x,
                type: 'input',
                pos: {
                    x: 0,
                    y: 0
                }
            },
            accelerationY: {
                name: Lang.Blocks.coconut_sensor_acceleration_y,
                type: 'input',
                pos: {
                    x: 0,
                    y: 0
                }
            },
            accelerationZ: {
                name: Lang.Blocks.coconut_sensor_acceleration_z,
                type: 'input',
                pos: {
                    x: 0,
                    y: 0
                }
            }
        },
        ports: {
            leftProximityValue: {
                name: Lang.Blocks.coconut_sensor_left_proximity,
                type: 'input',
                pos: {
                    x: 122,
                    y: 156
                }
            },
            rightProximityValue: {
                name: Lang.Blocks.coconut_sensor_right_proximity,
                type: 'input',
                pos: {
                    x: 10,
                    y: 108
                }
            },
            leftFloorValue: {
                name: Lang.Blocks.coconut_sensor_left_floor,
                type: 'input',
                pos: {
                    x: 100,
                    y: 234
                }
            },
            rightFloorValue: {
                name: Lang.Blocks.coconut_sensor_right_floor,
                type: 'input',
                pos: {
                    x: 13,
                    y: 180
                }
            },
            light: {
                name: Lang.Blocks.coconut_sensor_light,
                type: 'input',
                pos: {
                    x: 56,
                    y: 189
                }
            }
        },
        mode: 'both'
    }
};

Entry.JDKit.getBlocks = function () {
    return {
        //region JDKit
        jdkit_joystick: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.jdkit_joystick_lefttopbottom, 1], [Lang.Blocks.jdkit_joystick_leftleftright, 2], [Lang.Blocks.jdkit_joystick_righttopbottom, 3], [Lang.Blocks.jdkit_joystick_rightleftright, 4]],
                value: 1,
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'jdkit_joystick'
            },
            paramsKeyMap: {
                JOYSTICK: 0
            },
            class: 'JDKit_Sensor',
            isNotFor: ['JDKit'],
            func: function func(sprite, script) {
                var sensorData = Entry.hw.portData.CMD;
                var joystick = script.getField('JOYSTICK');

                if (joystick == 1) return sensorData[Entry.JDKit.Sensor.JOYSTICK_LTB];else if (joystick == 2) return 100 - sensorData[Entry.JDKit.Sensor.JOYSTICK_LLR];else if (joystick == 3) return sensorData[Entry.JDKit.Sensor.JOYSTICK_RTB] - 100;else return 100 - sensorData[Entry.JDKit.Sensor.JOYSTICK_RLR];
            },
            syntax: { js: [], py: [] }
        },
        jdkit_button: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['1', 0], ['2', 1], ['3', 2], ['4', 3], ['5', 4], ['6', 5], ['7', 6], ['8', 7]],
                value: 0,
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'jdkit_button'
            },
            paramsKeyMap: {
                BUTTON: 0
            },
            class: 'JDKit_Sensor',
            isNotFor: ['JDKit'],
            func: function func(sprite, script) {
                var sensorData = Entry.hw.portData.CMD;
                var button = script.getField('BUTTON');
                return sensorData[Entry.JDKit.Sensor.BUTTON] & 0x01 << button ? 0 : 1;
            },
            syntax: { js: [], py: [] }
        },
        jdkit_gyro: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.jdkit_gyro_frontrear, 1], [Lang.Blocks.jdkit_gyro_leftright, 2]],
                value: 1,
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'jdkit_gyro'
            },
            paramsKeyMap: {
                GYRO: 0
            },
            class: 'JDKit_Sensor',
            isNotFor: ['JDKit'],
            func: function func(sprite, script) {
                var sensorData = Entry.hw.portData.CMD;
                var gyro = script.getField('GYRO');
                var gyro_x = sensorData[Entry.JDKit.Sensor.GYRO_X];
                var gyro_y = sensorData[Entry.JDKit.Sensor.GYRO_Y];
                if (gyro == 1) return gyro_y > 127 ? (gyro_y ^ 0xff) + 1 : -1 * gyro_y;else return gyro_x > 127 ? (gyro_x ^ 0xff) + 1 : -1 * gyro_x;
            },
            syntax: { js: [], py: [] }
        },
        jdkit_ultrasonic: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [],
            events: {},
            def: {
                params: [null],
                type: 'jdkit_ultrasonic'
            },
            class: 'JDKit_Sensor',
            isNotFor: ['JDKit'],
            func: function func(sprite, script) {
                var sensorData = Entry.hw.portData.CMD;
                return sensorData[Entry.JDKit.Sensor.ULTRASONIC];
            },
            syntax: { js: [], py: [] }
        },
        jdkit_connect: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [],
            events: {},
            def: {
                params: [null],
                type: 'jdkit_connect'
            },
            class: 'JDKit_Sensor',
            isNotFor: ['JDKit'],
            func: function func(sprite, script) {
                var sensorData = Entry.hw.portData.CMD;
                return sensorData[Entry.JDKit.Sensor.DRONECONNECT];
            },
            syntax: { js: [], py: [] }
        },
        jdkit_ready: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [],
            events: {},
            def: {
                params: [null],
                type: 'jdkit_ready'
            },
            class: 'JDKit_Sensor',
            isNotFor: ['JDKit'],
            func: function func(sprite, script) {
                var sensorData = Entry.hw.portData.CMD;
                return sensorData[Entry.JDKit.Sensor.DRONEREADY];
            },
            syntax: { js: [], py: [] }
        },

        jdkit_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.jdkit_led_color_green, 1], [Lang.Blocks.jdkit_led_color_orange, 2]],
                value: 1,
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.jdkit_led_turnon, 3], [Lang.Blocks.jdkit_led_turnoff, 4]],
                value: 3,
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'jdkit_led'
            },
            paramsKeyMap: {
                COLOR: 0,
                ACTION: 1
            },
            class: 'JDKit_Command',
            isNotFor: ['JDKit'],

            func: function func(sprite, script) {
                if (typeof Entry.hw.sendQueue.CMD == 'undefined') Entry.hw.sendQueue.CMD = [0xf0, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0];
                var cmd = Entry.hw.sendQueue.CMD;
                var color = script.getField('COLOR', script);
                var act = script.getField('ACTION', script);
                if (color == 1) cmd[Entry.JDKit.Cmd.LED] = act == 3 ? cmd[1] | 0x01 : cmd[1] & 0x02;else cmd[Entry.JDKit.Cmd.LED] = act == 3 ? cmd[1] | 0x02 : cmd[1] & 0x01;
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        jdkit_tune: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.jdkit_tune_do, 1], [Lang.Blocks.jdkit_tune_re, 2], [Lang.Blocks.jdkit_tune_mi, 3], [Lang.Blocks.jdkit_tune_fa, 4], [Lang.Blocks.jdkit_tune_sol, 5], [Lang.Blocks.jdkit_tune_la, 6], [Lang.Blocks.jdkit_tune_si, 7]],
                value: 1,
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['0.2', 2], ['0.4', 4], ['0.6', 6], ['0.8', 8], ['1', 10], ['2', 20], ['3', 30], ['4', 40], ['5', 50]],
                value: 10,
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'jdkit_tune'
            },
            paramsKeyMap: {
                NOTE: 0,
                DURATION: 1
            },
            class: 'JDKit_Command',
            isNotFor: ['JDKit'],

            func: function func(sprite, script) {
                if (typeof Entry.hw.sendQueue.CMD == 'undefined') Entry.hw.sendQueue.CMD = [0xf0, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0];
                var cmd = Entry.hw.sendQueue.CMD;

                var note = script.getField('NOTE', script);
                var duration = script.getField('DURATION', script);
                var noteCount = Entry.hw.sendQueue.noteCount;
                Entry.hw.sendQueue.noteCount = typeof noteCount == 'undefined' ? 1 : noteCount + 1;
                cmd[Entry.JDKit.Cmd.TUNE] = note;
                cmd[Entry.JDKit.Cmd.TUNEDUR] = duration;
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },

        jdkit_motor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.jdkit_motor_lefttop, 1], [Lang.Blocks.jdkit_motor_leftbottom, 0], [Lang.Blocks.jdkit_motor_righttop, 2], [Lang.Blocks.jdkit_motor_rightbottom, 3]],
                value: 1,
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string',
                value: '15',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'jdkit_motor'
            },
            paramsKeyMap: {
                MOTOR: 0,
                POWER: 1
            },
            class: 'JDKit_Command',
            isNotFor: ['JDKit'],

            func: function func(sprite, script) {
                if (typeof Entry.hw.sendQueue.CMD == 'undefined') Entry.hw.sendQueue.CMD = [0xf0, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0];
                var cmd = Entry.hw.sendQueue.CMD;
                var motor = script.getField('MOTOR', script);
                var power = script.getNumberValue('POWER', script);

                cmd[Entry.JDKit.Cmd.MOTOR0 + motor] = power > 100 ? 100 : power < 0 ? 0 : power;
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },

        jdkit_throttle: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string',
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'jdkit_throttle'
            },
            paramsKeyMap: {
                THROTTLE: 0
            },
            class: 'JDKit_Command',
            isNotFor: ['JDKit'],

            func: function func(sprite, script) {
                if (typeof Entry.hw.sendQueue.CMD == 'undefined') Entry.hw.sendQueue.CMD = [0xf0, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0];
                var cmd = Entry.hw.sendQueue.CMD;
                var throttle = script.getNumberValue('THROTTLE', script);

                cmd[Entry.JDKit.Cmd.THROTTLE] = throttle > 200 ? 200 : throttle < 0 ? 0 : throttle;
                cmd[Entry.JDKit.Cmd.OPTION] = 0x01;
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        jdkit_altitude: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string',
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'jdkit_altitude'
            },
            paramsKeyMap: {
                ALTITUDE: 0
            },
            class: 'JDKit_Command',
            isNotFor: ['JDKit'],

            func: function func(sprite, script) {
                if (typeof Entry.hw.sendQueue.CMD == 'undefined') Entry.hw.sendQueue.CMD = [0xf0, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0];
                var cmd = Entry.hw.sendQueue.CMD;
                var alt = script.getNumberValue('ALTITUDE', script);

                cmd[Entry.JDKit.Cmd.THROTTLE] = alt > 200 ? 200 : alt < 0 ? 0 : alt;
                cmd[Entry.JDKit.Cmd.OPTION] = 0x05;
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        jdkit_rollpitch: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.jdkit_gyro_frontrear, 1], [Lang.Blocks.jdkit_gyro_leftright, 2]],
                value: 1,
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string',
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'jdkit_rollpitch'
            },
            paramsKeyMap: {
                DIR: 0,
                POWER: 1
            },
            class: 'JDKit_Command',
            isNotFor: ['JDKit'],

            func: function func(sprite, script) {
                if (typeof Entry.hw.sendQueue.CMD == 'undefined') Entry.hw.sendQueue.CMD = [0xf0, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0];
                var cmd = Entry.hw.sendQueue.CMD;
                var dir = script.getField('DIR', script);
                var power = script.getNumberValue('POWER', script);
                if (dir == 1) cmd[Entry.JDKit.Cmd.PITCH] = power > 100 ? 200 : power < -100 ? 0 : power + 100;else cmd[Entry.JDKit.Cmd.ROLL] = power > 100 ? 200 : power < -100 ? 0 : power + 100;
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        jdkit_yaw: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string',
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'jdkit_yaw'
            },
            paramsKeyMap: {
                YAW: 0
            },
            class: 'JDKit_Command',
            isNotFor: ['JDKit'],

            func: function func(sprite, script) {
                if (typeof Entry.hw.sendQueue.CMD == 'undefined') Entry.hw.sendQueue.CMD = [0xf0, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0];
                var cmd = Entry.hw.sendQueue.CMD;
                var yaw = script.getNumberValue('YAW', script);

                cmd[Entry.JDKit.Cmd.YAW] = yaw > 25 ? 101 : yaw < -25 ? 99 : 100;
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        jdkit_emergency: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'jdkit_emergency'
            },
            paramsKeyMap: {},
            class: 'JDKit_Command',
            isNotFor: ['JDKit'],

            func: function func(sprite, script) {
                if (typeof Entry.hw.sendQueue.CMD == 'undefined') Entry.hw.sendQueue.CMD = [0xf0, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0];
                var cmd = Entry.hw.sendQueue.CMD;

                cmd[Entry.JDKit.Cmd.OPTION] = 0x81;
                Entry.hw.update();
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        }
        //endregion JDKit
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_joystick.js":
/*!*************************************************!*\
  !*** ./src/playground/blocks/block_joystick.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.joystick = {
    name: 'joystick',
    url: 'http://www.kocoafab.cc/',
    imageName: 'joystick.png',
    title: {
        "ko": "조이스틱 센서 쉴드",
        "en": "Joystick Sensor Shield"
    },
    setZero: function setZero() {
        Entry.hw.sendQueue.readablePorts = [];
        for (var port = 0; port < 20; port++) {
            Entry.hw.sendQueue[port] = 0;
            Entry.hw.sendQueue.readablePorts.push(port);
        }
        Entry.hw.update();
    }
};

Entry.joystick.getBlocks = function () {
    return {
        //region joystick 조이스틱
        joystick_get_number_sensor_value: {
            parent: 'arduino_get_number_sensor_value',
            isNotFor: ['joystick'],
            def: {
                params: [{
                    type: 'arduino_get_sensor_number'
                }],
                type: 'joystick_get_number_sensor_value'
            },
            class: 'arduino_value'
        },
        joystick_get_digital_value: {
            parent: 'arduino_get_digital_value',
            isNotFor: ['joystick'],
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }],
                type: 'joystick_get_digital_value'
            },
            class: 'arduino_value',
            syntax: { js: [], py: [] }
        },
        joystick_toggle_led: {
            parent: 'arduino_toggle_led',
            isNotFor: ['joystick'],
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }, null, null],
                type: 'joystick_toggle_led'
            },
            class: 'arduino_set'
        },
        joystick_toggle_pwm: {
            parent: 'arduino_toggle_pwm',
            isNotFor: ['joystick'],
            def: {
                params: [{
                    type: 'arduino_get_pwm_port_number'
                }, {
                    type: 'arduino_text',
                    params: ['255']
                }, null],
                type: 'joystick_toggle_pwm'
            },
            class: 'arduino_set'
        },
        joystick_convert_scale: {
            parent: 'arduino_convert_scale',
            isNotFor: ['joystick'],
            def: {
                params: [{
                    type: 'arduino_get_number_sensor_value',
                    params: [{
                        type: 'arduino_get_sensor_number'
                    }]
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'joystick_convert_scale'
            },
            class: 'arduino'
        }
        //endregion joystick 조이스틱
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_mechatro.js":
/*!*************************************************!*\
  !*** ./src/playground/blocks/block_mechatro.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*******************************************************
 * 명명 규칙
 *
 * 함수명, 변수명 : 첫 글자 소문자, 다음 단어 첫 글자 대문자, 두단어 이상 조합     예) nameRull
 * 키  값 : 모두 대문자, 단어사이 '_' 사용함                                    예) NAME_RULL
 *
 *********************************************************/

Entry.mechatro = {
    name: 'mechatro',
    url: 'http://cafe.naver.com/easybread',
    imageName: 'mechatronics_4d.png',
    title: {
        "en": "4D Mechatronics",
        "ko": "4D 메카트로닉스"
    },
    setZero: function setZero() {
        Entry.hw.sendQueue = {};
        Entry.hw.sendQueue['entryStop'] = 0;
        Entry.hw.update();

        //Entry.mechatro.entryState.VALUE        =  [0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0];
        //Entry.mechatro.entryState.VALUE_U_FLAG =  [0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0];
        //Entry.mechatro.entryState.MODE         =  [0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0];
        //Entry.mechatro.entryState.MODE_U_FLAG  =  [0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0];
        Entry.hw.update();
        Entry.hw.sendQueue = {};
    },
    monitorTemplate: {
        imgPath: 'hw/transparent.png',
        width: 605,
        height: 434,
        listPorts: {
            '2': {
                name: Lang.Hw.port_en + ' 2 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '4': {
                name: Lang.Hw.port_en + ' 4 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '5': {
                name: Lang.Hw.port_en + ' 5 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '6': {
                name: Lang.Hw.port_en + ' 6 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '7': {
                name: Lang.Hw.port_en + ' 7 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '10': {
                name: Lang.Hw.port_en + ' 10 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '14': {
                name: Lang.Hw.port_en + ' a0 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '15': {
                name: Lang.Hw.port_en + ' a1 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '16': {
                name: Lang.Hw.port_en + ' a2 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '17': {
                name: Lang.Hw.port_en + ' a3 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '18': {
                name: Lang.Hw.port_en + ' a4 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '19': {
                name: Lang.Hw.port_en + ' a5 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '20': {
                name: Lang.Hw.port_en + ' a6 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '21': {
                name: Lang.Hw.port_en + ' a7 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            //"m2":{name: Lang.Hw.port_en + " m2 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
            //"m4":{name: Lang.Hw.port_en + " m4 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
            //"m5":{name: Lang.Hw.port_en + " m5 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
            //"m6":{name: Lang.Hw.port_en + " m6 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
            //"m7":{name: Lang.Hw.port_en + " m7 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
            //"m10":{name: Lang.Hw.port_en + " m10 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
            M3: {
                name: Lang.Hw.port_en + ' MA ' + '모터 속도',
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            M11: {
                name: Lang.Hw.port_en + ' MB ' + '모터 속도',
                type: 'input',
                pos: { x: 0, y: 0 }
            }
        },
        mode: 'both'
    },
    state: {
        //"VALUE"        : [0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0],
        //"MODE"         : [0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0],
        //"VALUE_U_FLAG" : [0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0],
        //"MODE_U_FLAG"  : [0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0],
        THRESHOLD: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]
    },
    portMode: {
        SET_G_DEVICE: 0x80,
        COM_ALIVE: 0x80,
        COM_INIT_DEVICE: 0x81,
        COM_STANDBY_DEVICE: 0x82,
        COM_NO_TONE: 0x83,
        COM_SET_BLUE_PW: 0x84,
        SET_DIGITAL_OUT: 0x90,

        SET_G_MOTOR: 0xa0,
        SET_MOTOR_SPEED: 0xa0,
        SET_MOTOR_CURRENT: 0xb0,

        SET_G_SERVO_PWM_TON: 0xc0,
        SET_SERVO_POSITION: 0xc0,
        SET_SERVO_SPEED: 0xc8,
        SET_PWM: 0xd0,
        SET_TONE: 0xd8,

        SET_G_INPUT: 0xe0,
        SET_ANALOG_IN: 0xe0,
        SET_DIGITAL_IN: 0xe8,
        SET_ULTRASONIC: 0xf0
    },
    transferModeValue: function transferModeValue(portNo, mode, value) {
        var mPortNo = 'm' + portNo;
        if (Entry.hw.portData[mPortNo] !== mode) {
            Entry.hw.sendQueue[mPortNo] = mode;
            Entry.hw.sendQueue[portNo] = value;
            Entry.hw.update();
            delete Entry.hw.sendQueue[mPortNo];
            delete Entry.hw.sendQueue[portNo]; // 큐에서 지우면 하드웨어 모니터에서 값 표시가 안됨. 값을 HW 프로그램에서 전송하여 표시
        } else {
            Entry.hw.sendQueue[portNo] = value;
            Entry.hw.update();
            delete Entry.hw.sendQueue[portNo];
        }
    },
    transferValue: function transferValue(portNo, value) {
        Entry.hw.sendQueue[portNo] = value;
        Entry.hw.update();
        delete Entry.hw.sendQueue[portNo];
    },
    transferMode: function transferMode(portNo, mode) {
        var mPortNo = 'm' + portNo;
        if (Entry.hw.portData[mPortNo] !== mode) {
            Entry.hw.sendQueue[mPortNo] = mode;
            Entry.hw.update();
            delete Entry.hw.sendQueue[mPortNo];
        }
    }
};

Entry.mechatro.getBlocks = function () {
    return {
        //region mechatro
        mechatro_get_digital: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['D2', '2'], ['D4', '4'], ['D5', '5'], ['D6', '6'], ['D7', '7'], ['D10', '10'], ['A2', '16'], ['A3', '17'], ['A4', '18'], ['A5', '19'], ['A6', '20'], ['A7', '21']],
                value: '2',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'mechatro_get_digital'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'MechatroGet',
            isNotFor: ['mechatro'],
            func: function func(sprite, script) {
                if (!Entry.hw.connected) {
                    return 0;
                }

                var portNo = script.getNumberField('PORT', script);
                var mPortNo = 'm' + portNo;
                var mode;
                var value;

                if (portNo > 14) {
                    mode = Entry.mechatro.portMode.SET_ANALOG_IN;
                } else {
                    mode = Entry.mechatro.portMode.SET_DIGITAL_IN;
                }

                if (Entry.hw.portData[mPortNo] !== mode) {
                    Entry.hw.sendQueue[mPortNo] = mode;
                    Entry.hw.update();
                    delete Entry.hw.sendQueue[mPortNo];
                }

                if (Entry.hw.portData[portNo] !== undefined) {
                    value = Entry.hw.portData[portNo];
                    if (portNo > 14) {
                        value = value > Entry.mechatro.state.THRESHOLD[portNo] ? 1 : 0;
                    }
                    return value;
                } else {
                    return 0;
                }
            },
            syntax: { js: [], py: ['mechatro.get_digital(%1)'] }
        },
        mechatro_get_sensor_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['A2', '16'], ['A3', '17'], ['A4', '18'], ['A5', '19'], ['A6', '20'], ['A7', '21']],
                value: '16',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'mechatro_get_sensor_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'MechatroGet',
            isNotFor: ['mechatro'],
            func: function func(sprite, script) {
                var portNo = script.getNumberField('PORT', script);
                var mPortNo = 'm' + portNo;
                var mode = Entry.mechatro.portMode.SET_ANALOG_IN;

                if (Entry.hw.portData[mPortNo] !== mode) {
                    Entry.hw.sendQueue[mPortNo] = mode;
                    Entry.hw.update();
                    delete Entry.hw.sendQueue[mPortNo];
                }
                if (Entry.hw.portData[portNo] !== undefined) {
                    return Entry.hw.portData[portNo];
                } else {
                    return 0;
                }
            },
            syntax: { js: [], py: ['mechatro.sensor_value(%1)'] }
        },
        mechatro_set_threshold: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['A2', '16'], ['A3', '17'], ['A4', '18'], ['A5', '19'], ['A6', '20'], ['A7', '21']],
                value: '16',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['10~90']
                }, null],
                type: 'mechatro_set_threshold'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'MechatroGet',
            isNotFor: ['mechatro'],
            func: function func(sprite, script) {
                var portNo = script.getNumberField('PORT', script);
                var value = script.getValue('VALUE');

                if (!Entry.Utils.isNumber(value)) value = 0;
                value = Math.max(value, 10);
                value = Math.min(value, 90);

                Entry.mechatro.state.THRESHOLD[portNo] = value;

                return script.callReturn();
            },
            syntax: { js: [], py: ['mechatro.set_threshold(%1, %2)'] }
        },
        mechatro_get_ultrasonic_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['D2', '2'], ['D4', '4'], ['D5', '5'], ['D6', '6'], ['D7', '7'], ['D10', '10']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['D2', '2'], ['D4', '4'], ['D5', '5'], ['D6', '6'], ['D7', '7'], ['D10', '10']],
                value: '4',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'mechatro_get_ultrasonic_value'
            },
            paramsKeyMap: {
                TIRG: 0,
                ECHO: 1
            },
            class: 'MechatroGet',
            isNotFor: ['mechatro'],
            func: function func(sprite, script) {
                if (!Entry.hw.connected) {
                    return 0;
                }

                var trig = script.getNumberField('TIRG', script);
                var echo = script.getNumberField('ECHO', script);
                var mode = Entry.mechatro.portMode.SET_ULTRASONIC;
                Entry.mechatro.transferModeValue(trig, mode, echo);

                if (Entry.hw.portData[trig] !== undefined) {
                    return Entry.hw.portData[trig];
                } else {
                    return 0;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Arduino.ultrasonicRead(%1, %2)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        mechatro_set_digital: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['D2', '2'], ['D4', '4'], ['D5', '5'], ['D6', '6'], ['D7', '7'], ['D10', '10']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['켜기', '1'], ['끄기', '0']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'mechatro_set_digital'
            },
            paramsKeyMap: {
                PORT: 0,
                OPERATOR: 1
            },
            class: 'Mechatro_d_out',
            isNotFor: ['mechatro'],
            func: function func(sprite, script) {
                var portNo = script.getNumberField('PORT', script);
                var mode = Entry.mechatro.portMode.SET_DIGITAL_OUT;
                var value = script.getNumberField('OPERATOR');

                Entry.mechatro.transferModeValue(portNo, mode, value);

                return script.callReturn();
            },
            syntax: { js: [], py: ['mechatro.set_digital(%1, %2)'] }
        },
        mechatro_set_pwm: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['D5', '5'], ['D6', '6']],
                value: '5',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['0~100']
                }, null],
                type: 'mechatro_set_pwm'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'Mechatro_d_out',
            isNotFor: ['mechatro'],
            func: function func(sprite, script) {
                var portNo = script.getNumberField('PORT', script);
                var mode = Entry.mechatro.portMode.SET_PWM;
                var value = script.getValue('VALUE');

                if (!Entry.Utils.isNumber(value)) value = 0;
                value = Math.max(value, 0);
                value = Math.min(value, 100);

                Entry.mechatro.transferModeValue(portNo, mode, value);

                return script.callReturn();
            },
            syntax: { js: [], py: ['mechatro.mechatro_set_pwm(%1, %2)'] }
        },
        mechatro_set_tone_time: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['D2', '2'], ['D4', '4'], ['D5', '5'], ['D6', '6'], ['D7', '7'], ['D10', '10']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['무음', '0'], ['도', '1'], ['도#(레♭)', '2'], ['레', '3'], ['레#(미♭)', '4'], ['미', '5'], ['파', '6'], ['파#(솔♭)', '7'], ['솔', '8'], ['솔#(라♭)', '9'], ['라', '10'], ['라#(시♭)', '11'], ['시', '12']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['1', '0'], ['2', '1'], ['3', '2'], ['4', '3'], ['5', '4'], ['6', '5']],
                value: '3',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'mechatro_set_tone_time'
            },
            paramsKeyMap: {
                PORT: 0,
                NOTE: 1,
                OCTAVE: 2,
                DURATION: 3
            },
            class: 'Mechatro_d_out',
            isNotFor: ['mechatro'],
            func: function func(sprite, script) {
                var portNo = script.getNumberField('PORT', script);
                var mPortNo = 'm' + portNo;

                if (!script.isStart) {
                    var duration = script.getNumberValue('DURATION', script);
                    if (duration < 0) {
                        duration = 0;
                    }

                    var note = script.getNumberField('NOTE', script);

                    if (duration === 0 || note === 0) {
                        Entry.hw.sendQueue[mPortNo] = Entry.mechatro.portMode.COM_NO_TONE;
                        Entry.hw.update();
                        delete Entry.hw.sendQueue[mPortNo];
                        return script.callReturn();
                    }

                    var octave = script.getNumberField('OCTAVE', script);
                    var note = script.getNumberField('NOTE', script);
                    duration = duration * 1000;
                    script.isStart = true;
                    script.timeFlag = 1;

                    Entry.hw.sendQueue[mPortNo] = Entry.mechatro.portMode.SET_TONE;
                    Entry.hw.sendQueue[portNo] = octave << 4 | note - 1;
                    Entry.hw.update();
                    delete Entry.hw.sendQueue[mPortNo];
                    delete Entry.hw.sendQueue[portNo];

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, duration + 32);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    Entry.hw.sendQueue[mPortNo] = Entry.mechatro.portMode.COM_NO_TONE;
                    delete Entry.hw.sendQueue[portNo];
                    Entry.hw.update();
                    delete Entry.hw.sendQueue[mPortNo];

                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;

                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'mechatro.tone_time(%1, %2, %3, %4)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        mechatro_set_tone: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['D2', '2'], ['D4', '4'], ['D5', '5'], ['D6', '6'], ['D7', '7'], ['D10', '10']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['무음', '0'], ['도', '1'], ['도#(레♭)', '2'], ['레', '3'], ['레#(미♭)', '4'], ['미', '5'], ['파', '6'], ['파#(솔♭)', '7'], ['솔', '8'], ['솔#(라♭)', '9'], ['라', '10'], ['라#(시♭)', '11'], ['시', '12']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['1', '0'], ['2', '1'], ['3', '2'], ['4', '3'], ['5', '4'], ['6', '5']],
                value: '3',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null, null],
                type: 'mechatro_set_tone'
            },
            paramsKeyMap: {
                PORT: 0,
                NOTE: 1,
                OCTAVE: 2
            },
            class: 'Mechatro_d_out',
            isNotFor: ['mechatro'],
            func: function func(sprite, script) {
                var portNo = script.getNumberField('PORT', script);
                var note = script.getNumberField('NOTE', script);
                var octave = script.getNumberField('OCTAVE', script);
                var note = script.getNumberField('NOTE', script);
                var mode;
                var value = octave << 4 | note - 1;

                if (note === 0) {
                    mode = Entry.mechatro.portMode.COM_NO_TONE;
                    Entry.mechatro.transferMode(portNo, mode);
                } else {
                    mode = Entry.mechatro.portMode.SET_TONE;
                    Entry.mechatro.transferModeValue(portNo, mode, value);
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'mechatro.tone(%1, %2, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        mechatro_set_dc_motor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['MA', '3'], ['MB', '11']],
                value: '3',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['-100 ~ 100 사이값']
                }, null],
                type: 'mechatro_set_dc_motor'
            },
            paramsKeyMap: {
                PORT: 0,
                SPEED: 1
            },
            class: 'set_motor',
            isNotFor: ['mechatro'],
            func: function func(sprite, script) {
                var portNo = script.getField('PORT', script);
                var value = script.getValue('SPEED');

                if (!Entry.Utils.isNumber(value)) value = 0;

                value = Math.round(value);
                value = value + 100;
                value = Math.max(value, 0);
                value = Math.min(value, 200);

                Entry.mechatro.transferValue(portNo, value);
                return script.callReturn();
            }
        },
        mechatro_get_dc_motor_current: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['MA', '14'], ['MB', '15']],
                value: '14',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'mechatro_get_dc_motor_current'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'MechatroGet',
            isNotFor: ['mechatro'],
            func: function func(sprite, script) {
                var portNo = script.getNumberField('PORT', script);
                var mPortNo = 'm' + portNo;
                var mode = Entry.mechatro.portMode.SET_MOTOR_CURRENT;

                if (Entry.hw.portData[mPortNo] !== mode) {
                    Entry.hw.sendQueue[mPortNo] = mode;
                    Entry.hw.update();
                    delete Entry.hw.sendQueue[mPortNo];
                }
                if (Entry.hw.portData[portNo] !== undefined) {
                    return Entry.hw.portData[portNo];
                } else {
                    return 0;
                }
            },
            syntax: {
                js: [],
                py: ['mechatro.mechatro_get_dc_motor_current(%1)']
            }
        },
        mechatro_set_servo_position: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['D2', '2'], ['D5', '5'], ['D6', '6'], ['D10', '10']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['0~180']
                }, null],
                type: 'mechatro_set_servo_position'
            },
            paramsKeyMap: {
                PORT: 0,
                DEGREE: 1
            },
            class: 'set_motor',
            isNotFor: ['mechatro'],
            func: function func(sprite, script) {
                var portNo = script.getNumberField('PORT', script);
                var mode = Entry.mechatro.portMode.SET_SERVO_POSITION;
                var value = script.getValue('DEGREE');

                if (!Entry.Utils.isNumber(value)) value = 90;
                value = Math.max(value, 0);
                value = Math.min(value, 180);

                Entry.mechatro.transferModeValue(portNo, mode, value);

                return script.callReturn();
            },
            syntax: {
                js: [],
                py: ['mechatro.mechatro_set_servo_position(%1, %2)']
            }
        },
        mechatro_set_servo_speed: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['D2', '22'], ['D5', '23'], ['D6', '24'], ['D10', '25']],
                value: '22',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['1~255']
                }, null],
                type: 'mechatro_set_servo_speed'
            },
            paramsKeyMap: {
                PORT: 0,
                SPEED: 1
            },
            class: 'set_motor',
            isNotFor: ['mechatro'],
            func: function func(sprite, script) {
                var portNo = script.getNumberField('PORT', script);
                var mode = Entry.mechatro.portMode.SET_SERVO_SPEED;
                var value = script.getValue('SPEED');

                if (!Entry.Utils.isNumber(value)) value = 255;
                value = Math.max(value, 0);
                value = Math.min(value, 255);

                Entry.mechatro.transferModeValue(portNo, mode, value);

                return script.callReturn();
            },
            syntax: {
                js: [],
                py: ['mechatro.mechatro_set_servo_speed(%1, %2)']
            }
        },
        mechatro_set_blue_pw: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['1']
                }, {
                    type: 'number',
                    params: ['2']
                }, {
                    type: 'number',
                    params: ['3']
                }, {
                    type: 'number',
                    params: ['4']
                }, {
                    type: 'Indicator',
                    img: 'block_icon/hardware_03.png',
                    size: 12
                }],
                type: 'mechatro_set_blue_pw'
            },
            paramsKeyMap: {
                PW1: 0,
                PW2: 1,
                PW3: 2,
                PW4: 3
            },
            class: 'Mechatro_blue',
            isNotFor: ['mechatro'],
            func: function func(sprite, script) {
                var mode = Entry.mechatro.portMode.COM_SET_BLUE_PW;

                var value = script.getNumberValue('PW1') * 1000 + script.getNumberValue('PW2') * 100 + script.getNumberValue('PW3') * 10 + script.getNumberValue('PW4');

                Entry.mechatro.transferModeValue(2, mode, value);

                return script.callReturn();
            },
            syntax: { js: [], py: ['mechatro.mechatro_set_pwm(%1, %2)'] }
        }
        //endregion mechatro
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_mechatronics_4d.js":
/*!********************************************************!*\
  !*** ./src/playground/blocks/block_mechatronics_4d.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Mechatronics_4D = {
    name: 'mechatronics_4d',
    url: 'http://4dblock.com/',
    imageName: 'mechatronics_4d.png',
    title: {
        "en": "4D Mechatronics",
        "ko": "4D 메카트로닉스"
    },
    setZero: function setZero() {
        if (!Entry.hw.sendQueue.SET) {
            Entry.hw.sendQueue = {
                GET: {},
                SET: {}
            };
        } else {
            var keySet = Object.keys(Entry.hw.sendQueue.SET);
            keySet.forEach(function (key) {
                Entry.hw.sendQueue.SET[key].data = 0;
                Entry.hw.sendQueue.SET[key].time = new Date().getTime();
            });
        }
        Entry.hw.update();
    },
    sensorTypes: {
        ALIVE: 0,
        DIGITAL: 1,
        ANALOG: 2,
        PWM: 3,
        SERVO_PIN: 4,
        TONE: 5,
        PULSEIN: 6,
        ULTRASONIC: 7,
        TIMER: 8
    },
    toneTable: {
        "0": 0,
        "C": 1,
        "CS": 2,
        "D": 3,
        "DS": 4,
        "E": 5,
        "F": 6,
        "FS": 7,
        "G": 8,
        "GS": 9,
        "A": 10,
        "AS": 11,
        "B": 12
    },
    toneMap: {
        "1": [33, 65, 131, 262, 523, 1046, 2093, 4186],
        "2": [35, 69, 139, 277, 554, 1109, 2217, 4435],
        "3": [37, 73, 147, 294, 587, 1175, 2349, 4699],
        "4": [39, 78, 156, 311, 622, 1245, 2849, 4978],
        "5": [41, 82, 165, 330, 659, 1319, 2637, 5274],
        "6": [44, 87, 175, 349, 698, 1397, 2794, 5588],
        "7": [46, 92, 185, 370, 740, 1480, 2960, 5920],
        "8": [49, 98, 196, 392, 784, 1568, 3136, 6272],
        "9": [52, 104, 208, 415, 831, 1661, 3322, 6645],
        "10": [55, 110, 220, 440, 880, 1760, 3520, 7040],
        "11": [58, 117, 233, 466, 932, 1865, 3729, 7459],
        "12": [62, 123, 247, 494, 988, 1976, 3951, 7902]
    },
    highList: ['high', '1', 'on'],
    lowList: ['low', '0', 'off'],
    BlockState: {}
};

/***/ }),

/***/ "./src/playground/blocks/block_memaker.js":
/*!************************************************!*\
  !*** ./src/playground/blocks/block_memaker.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.memaker = {
    name: 'memaker',
    url: 'http://www.jkelec.co.kr/',
    imageName: 'memaker.png',
    title: {
        "ko": "미메이커",
        "en": "memaker"
    },
    setZero: function setZero() {
        if (!Entry.hw.sendQueue.SET) {
            Entry.hw.sendQueue = {
                GET: {},
                SET: {}
            };
        } else {
            var keySet = Object.keys(Entry.hw.sendQueue.SET);
            keySet.forEach(function (key) {
                Entry.hw.sendQueue.SET[key].data = 0;
                Entry.hw.sendQueue.SET[key].time = new Date().getTime();
            });
        }
        Entry.hw.update();
    },
    toByte: function toByte(data) {
        switch (data) {
            case ' ':
                data = 32;
                break;
            case '!':
                data = 33;
                break;
            case '"':
                data = 34;
                break;
            case '#':
                data = 35;
                break;
            case '$':
                data = 36;
                break;
            case '%':
                data = 37;
                break;
            case '&':
                data = 38;
                break;
            case "'":
                data = 39;
                break;
            case '(':
                data = 40;
                break;
            case ')':
                data = 41;
                break;
            case '*':
                data = 42;
                break;
            case '+':
                data = 43;
                break;
            case ',':
                data = 44;
                break;
            case '-':
                data = 45;
                break;
            case '.':
                data = 46;
                break;
            case '/':
                data = 47;
                break;
            case '0':
                data = 48;
                break;
            case '1':
                data = 49;
                break;
            case '2':
                data = 50;
                break;
            case '3':
                data = 51;
                break;
            case '4':
                data = 52;
                break;
            case '5':
                data = 53;
                break;
            case '6':
                data = 54;
                break;
            case '7':
                data = 55;
                break;
            case '8':
                data = 56;
                break;
            case '9':
                data = 57;
                break;
            case ':':
                data = 58;
                break;
            case ';':
                data = 59;
                break;
            case '<':
                data = 60;
                break;
            case '=':
                data = 61;
                break;
            case '>':
                data = 62;
                break;
            case '?':
                data = 63;
                break;
            case '@':
                data = 64;
                break;
            case 'A':
                data = 65;
                break;
            case 'B':
                data = 66;
                break;
            case 'C':
                data = 67;
                break;
            case 'D':
                data = 68;
                break;
            case 'E':
                data = 69;
                break;
            case 'F':
                data = 70;
                break;
            case 'G':
                data = 71;
                break;
            case 'H':
                data = 72;
                break;
            case 'I':
                data = 73;
                break;
            case 'J':
                data = 74;
                break;
            case 'K':
                data = 75;
                break;
            case 'L':
                data = 76;
                break;
            case 'M':
                data = 77;
                break;
            case 'N':
                data = 78;
                break;
            case 'O':
                data = 79;
                break;
            case 'P':
                data = 80;
                break;
            case 'Q':
                data = 81;
                break;
            case 'R':
                data = 82;
                break;
            case 'S':
                data = 83;
                break;
            case 'T':
                data = 84;
                break;
            case 'U':
                data = 85;
                break;
            case 'V':
                data = 86;
                break;
            case 'W':
                data = 87;
                break;
            case 'X':
                data = 88;
                break;
            case 'Y':
                data = 89;
                break;
            case 'Z':
                data = 90;
                break;
            case '[':
                data = 91;
                break;
            case '\\':
                data = 92;
                break;
            case ']':
                data = 93;
                break;
            case '^':
                data = 94;
                break;
            case '_':
                data = 95;
                break;
            case '`':
                data = 96;
                break;
            case 'a':
                data = 97;
                break;
            case 'b':
                data = 98;
                break;
            case 'c':
                data = 99;
                break;
            case 'd':
                data = 100;
                break;
            case 'e':
                data = 101;
                break;
            case 'f':
                data = 102;
                break;
            case 'g':
                data = 103;
                break;
            case 'h':
                data = 104;
                break;
            case 'i':
                data = 105;
                break;
            case 'j':
                data = 106;
                break;
            case 'k':
                data = 107;
                break;
            case 'l':
                data = 108;
                break;
            case 'm':
                data = 109;
                break;
            case 'n':
                data = 110;
                break;
            case 'o':
                data = 111;
                break;
            case 'p':
                data = 112;
                break;
            case 'q':
                data = 113;
                break;
            case 'r':
                data = 114;
                break;
            case 's':
                data = 115;
                break;
            case 't':
                data = 116;
                break;
            case 'u':
                data = 117;
                break;
            case 'v':
                data = 118;
                break;
            case 'w':
                data = 119;
                break;
            case 'x':
                data = 120;
                break;
            case 'y':
                data = 121;
                break;
            case 'z':
                data = 122;
                break;
            case '{':
                data = 123;
                break;
            case '|':
                data = 124;
                break;
            case '}':
                data = 125;
                break;
            case '~':
                data = 126;
                break;
        }

        return data;
    },
    sensorTypes: {
        ALIVE: 0,
        DIGITAL: 1,
        ANALOG: 2,
        PWM: 3,
        SERVO_PIN: 4,
        TONE: 5,
        PULSEIN: 6,
        ULTRASONIC: 7,
        TIMER: 8,
        LCD: 9,
        LCD_COMMAND: 10
    },
    toneTable: {
        '0': 0,
        C: 1,
        CS: 2,
        D: 3,
        DS: 4,
        E: 5,
        F: 6,
        FS: 7,
        G: 8,
        GS: 9,
        A: 10,
        AS: 11,
        B: 12
    },
    toneMap: {
        '1': [33, 65, 131, 262, 523, 1046, 2093, 4186],
        '2': [35, 69, 139, 277, 554, 1109, 2217, 4435],
        '3': [37, 73, 147, 294, 587, 1175, 2349, 4699],
        '4': [39, 78, 156, 311, 622, 1245, 2849, 4978],
        '5': [41, 82, 165, 330, 659, 1319, 2637, 5274],
        '6': [44, 87, 175, 349, 698, 1397, 2794, 5588],
        '7': [46, 92, 185, 370, 740, 1480, 2960, 5920],
        '8': [49, 98, 196, 392, 784, 1568, 3136, 6272],
        '9': [52, 104, 208, 415, 831, 1661, 3322, 6645],
        '10': [55, 110, 220, 440, 880, 1760, 3520, 7040],
        '11': [58, 117, 233, 466, 932, 1865, 3729, 7459],
        '12': [62, 123, 247, 494, 988, 1976, 3951, 7902]
    },
    directionTable: {
        Forward: 0,
        Backward: 1
    },
    highList: ['high', '1', 'on'],
    lowList: ['low', '0', 'off'],
    BlockState: {}
};

Entry.memaker.getBlocks = function () {
    return {
        //region memaker 미메이커
        memaker_analog_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['A0', '0'], ['A1', '1'], ['A2', '2'], ['A3', '3'], ['A4', '4'], ['A5', '5'], ['A6', '6'], ['A7', '7']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getField('PORT');
            },
            syntax: { js: [], py: [] }
        },
        memaker_get_analog_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'memaker_analog_list'
                }],
                type: 'memaker_get_analog_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'memakerGet',
            isNotFor: ['memaker'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                if (port[0] === 'A') port = port.substring(1);
                return ANALOG ? ANALOG[port] || 0 : 0;
            },
            syntax: { js: [], py: [] }
        },
        memaker_get_analog_value_map: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'memaker_get_analog_value',
                    params: [{
                        type: 'memaker_analog_list'
                    }]
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'memaker_get_analog_value_map'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE2: 1,
                VALUE3: 2,
                VALUE4: 3,
                VALUE5: 4
            },
            class: 'memakerGet',
            isNotFor: ['memaker'],
            func: function func(sprite, script) {
                var result = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                var value2 = script.getNumberValue('VALUE2', script);
                var value3 = script.getNumberValue('VALUE3', script);
                var value4 = script.getNumberValue('VALUE4', script);
                var value5 = script.getNumberValue('VALUE5', script);

                if (value2 > value3) {
                    var swap = value2;
                    value2 = value3;
                    value3 = swap;
                }
                if (value4 > value5) {
                    var swap = value4;
                    value4 = value5;
                    value5 = swap;
                }
                result -= value2;
                result = result * ((value5 - value4) / (value3 - value2));
                result += value4;
                result = Math.min(value5, result);
                result = Math.max(value4, result);

                return result;
            },
            syntax: { js: [], py: [] }
        },
        memaker_get_ultrasonic_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: ['7']
                }, {
                    type: 'arduino_get_port_number',
                    params: ['8']
                }],
                type: 'memaker_get_ultrasonic_value'
            },
            paramsKeyMap: {
                PORT1: 0,
                PORT2: 1
            },
            class: 'memakerGet',
            isNotFor: ['memaker'],
            func: function func(sprite, script) {
                var port1 = script.getNumberValue('PORT1', script);
                var port2 = script.getNumberValue('PORT2', script);

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                delete Entry.hw.sendQueue['SET'][port1];
                delete Entry.hw.sendQueue['SET'][port2];

                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.memaker.sensorTypes.ULTRASONIC] = {
                    port: [port1, port2],
                    time: new Date().getTime()
                };
                return Entry.hw.portData.ULTRASONIC || 0;
            },
            syntax: { js: [], py: [] }
        },
        memaker_get_digital: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }],
                type: 'memaker_get_digital'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'memakerGet',
            isNotFor: ['memaker'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT', script);
                var DIGITAL = Entry.hw.portData.DIGITAL;
                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.memaker.sensorTypes.DIGITAL] = {
                    port: port,
                    time: new Date().getTime()
                };
                return DIGITAL ? DIGITAL[port] || 0 : 0;
            },
            syntax: { js: [], py: [] }
        },
        memaker_toggle_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }, {
                    type: 'arduino_get_digital_toggle',
                    params: ['on']
                }, null],
                type: 'memaker_toggle_led'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'memaker',
            isNotFor: ['memaker'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getValue('VALUE');

                if (typeof value === 'string') {
                    value = value.toLowerCase();
                }
                if (Entry.memaker.highList.indexOf(value) > -1) {
                    value = 255;
                } else if (Entry.memaker.lowList.indexOf(value) > -1) {
                    value = 0;
                } else {
                    throw new Error();
                }
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.memaker.sensorTypes.DIGITAL,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        memaker_digital_pwm: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_pwm_port_number'
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'memaker_digital_pwm'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'memaker',
            isNotFor: ['memaker'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 0);
                value = Math.min(value, 255);
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.memaker.sensorTypes.PWM,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        memaker_set_servo: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: ['10']
                }, null],
                type: 'memaker_set_servo'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'memaker',
            isNotFor: ['memaker'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var port = script.getNumberValue('PORT', script);
                var value = script.getNumberValue('VALUE', script);
                value = Math.min(180, value);
                value = Math.max(0, value);

                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.memaker.sensorTypes.SERVO_PIN,
                    data: value,
                    time: new Date().getTime()
                };

                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        memaker_list_digital_lcd_line: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['LINE1', '0'], ['LINE2', '1']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                LINE: 0
            },
            func: function func(sprite, script) {
                return script.getField('LINE');
            }
        },
        memaker_list_digital_lcd_column: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['COL1', '0'], ['COL2', '1'], ['COL3', '2'], ['COL4', '3'], ['COL5', '4'], ['COL6', '5'], ['COL7', '6'], ['COL8', '7'], ['COL9', '8'], ['COL10', '9'], ['COL11', '10'], ['COL12', '11'], ['COL13', '12'], ['COL14', '13'], ['COL15', '14'], ['COL16', '15']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                COLUMN: 0
            },
            func: function func(sprite, script) {
                return script.getField('COLUMN');
            }
        },
        memaker_set_lcd: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            template: Lang.template.memaker_set_lcd,
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'memaker_list_digital_lcd_line'
                }, {
                    type: 'memaker_list_digital_lcd_column'
                }, {
                    type: 'text',
                    params: ['Type text !!']
                }, null],
                type: 'memaker_set_lcd'
            },
            paramsKeyMap: {
                LINE: 0,
                COLUMN: 1,
                STRING: 2
            },
            class: 'memakerLcd',
            isNotFor: ['memaker'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var line = script.getValue('LINE', script);
                var column = script.getValue('COLUMN', script);
                var string = script.getValue('STRING', script);
                var text = [];

                if (!script.isStart) {
                    if (typeof string === 'string') {
                        for (var i = 0; i < string.length; i++) {
                            text[i] = Entry.memaker.toByte(string[i]);
                        }
                    } else if (typeof string === 'number') {
                        var num_to_string = string.toString();
                        for (var i = 0; i < num_to_string.length; i++) {
                            text[i] = Entry.memaker.toByte(num_to_string[i]);
                        }
                    } else {
                        text[0] = string;
                    }

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = 60 / fps * 50;

                    Entry.hw.sendQueue['SET'][line] = {
                        type: Entry.memaker.sensorTypes.LCD,
                        data: {
                            line: line,
                            column: column,
                            text0: text[0],
                            text1: text[1],
                            text2: text[2],
                            text3: text[3],
                            text4: text[4],
                            text5: text[5],
                            text6: text[6],
                            text7: text[7],
                            text8: text[8],
                            text9: text[9],
                            text10: text[10],
                            text11: text[11],
                            text12: text[12],
                            text13: text[13],
                            text14: text[14],
                            text15: text[15]
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = true;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['memaker.memaker_set_lcd(%1, %2, %3)'] }
        },
        memaker_list_lcd_command: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['LCD_BLUE', '0'], ['LCD_GREEN', '1'], ['LCD_CLEAR', '2']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                COMMAND: 0
            },
            func: function func(sprite, script) {
                return script.getField('COMMAND');
            }
        },

        memaker_lcd_command: {
            color: '#00979D',
            skeleton: 'basic',
            template: Lang.template.memaker_lcd_command,
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'memaker_list_lcd_command'
                }, null],
                type: 'memaker_lcd_command'
            },
            paramsKeyMap: {
                COMMAND: 0
            },
            class: 'memakerLcd',
            isNotFor: ['memaker'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var value = script.getNumberValue('COMMAND', script);
                var command = script.getNumberValue('COMMAND', script);

                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][0] = {
                    type: Entry.memaker.sensorTypes.LCD_COMMAND,
                    data: {
                        value: value,
                        command: command
                    },
                    time: new Date().getTime()
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        }
        //endregion memaker 미메이커
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_mkboard.js":
/*!************************************************!*\
  !*** ./src/playground/blocks/block_mkboard.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.mkboard = {
    name: 'mkboard',
    url: 'http://www.jkelec.co.kr',
    imageName: 'mkboard.png',
    title: {
        "en": "digital monkeyboard",
        "ko": "디지털 몽키보드"
    },
    setZero: function setZero() {
        if (!Entry.hw.sendQueue.SET) {
            Entry.hw.sendQueue = {
                GET: {},
                SET: {}
            };
        } else {
            var keySet = Object.keys(Entry.hw.sendQueue.SET);
            keySet.forEach(function (key) {
                Entry.hw.sendQueue.SET[key].data = 0;
                Entry.hw.sendQueue.SET[key].time = new Date().getTime();
            });
        }
        Entry.hw.update();
    },
    toByte: function toByte(data) {
        switch (data) {
            case ' ':
                data = 32;
                break;
            case '!':
                data = 33;
                break;
            case '"':
                data = 34;
                break;
            case '#':
                data = 35;
                break;
            case '$':
                data = 36;
                break;
            case '%':
                data = 37;
                break;
            case '&':
                data = 38;
                break;
            case "'":
                data = 39;
                break;
            case '(':
                data = 40;
                break;
            case ')':
                data = 41;
                break;
            case '*':
                data = 42;
                break;
            case '+':
                data = 43;
                break;
            case ',':
                data = 44;
                break;
            case '-':
                data = 45;
                break;
            case '.':
                data = 46;
                break;
            case '/':
                data = 47;
                break;
            case '0':
                data = 48;
                break;
            case '1':
                data = 49;
                break;
            case '2':
                data = 50;
                break;
            case '3':
                data = 51;
                break;
            case '4':
                data = 52;
                break;
            case '5':
                data = 53;
                break;
            case '6':
                data = 54;
                break;
            case '7':
                data = 55;
                break;
            case '8':
                data = 56;
                break;
            case '9':
                data = 57;
                break;
            case ':':
                data = 58;
                break;
            case ';':
                data = 59;
                break;
            case '<':
                data = 60;
                break;
            case '=':
                data = 61;
                break;
            case '>':
                data = 62;
                break;
            case '?':
                data = 63;
                break;
            case '@':
                data = 64;
                break;
            case 'A':
                data = 65;
                break;
            case 'B':
                data = 66;
                break;
            case 'C':
                data = 67;
                break;
            case 'D':
                data = 68;
                break;
            case 'E':
                data = 69;
                break;
            case 'F':
                data = 70;
                break;
            case 'G':
                data = 71;
                break;
            case 'H':
                data = 72;
                break;
            case 'I':
                data = 73;
                break;
            case 'J':
                data = 74;
                break;
            case 'K':
                data = 75;
                break;
            case 'L':
                data = 76;
                break;
            case 'M':
                data = 77;
                break;
            case 'N':
                data = 78;
                break;
            case 'O':
                data = 79;
                break;
            case 'P':
                data = 80;
                break;
            case 'Q':
                data = 81;
                break;
            case 'R':
                data = 82;
                break;
            case 'S':
                data = 83;
                break;
            case 'T':
                data = 84;
                break;
            case 'U':
                data = 85;
                break;
            case 'V':
                data = 86;
                break;
            case 'W':
                data = 87;
                break;
            case 'X':
                data = 88;
                break;
            case 'Y':
                data = 89;
                break;
            case 'Z':
                data = 90;
                break;
            case '[':
                data = 91;
                break;
            case '\\':
                data = 92;
                break;
            case ']':
                data = 93;
                break;
            case '^':
                data = 94;
                break;
            case '_':
                data = 95;
                break;
            case '`':
                data = 96;
                break;
            case 'a':
                data = 97;
                break;
            case 'b':
                data = 98;
                break;
            case 'c':
                data = 99;
                break;
            case 'd':
                data = 100;
                break;
            case 'e':
                data = 101;
                break;
            case 'f':
                data = 102;
                break;
            case 'g':
                data = 103;
                break;
            case 'h':
                data = 104;
                break;
            case 'i':
                data = 105;
                break;
            case 'j':
                data = 106;
                break;
            case 'k':
                data = 107;
                break;
            case 'l':
                data = 108;
                break;
            case 'm':
                data = 109;
                break;
            case 'n':
                data = 110;
                break;
            case 'o':
                data = 111;
                break;
            case 'p':
                data = 112;
                break;
            case 'q':
                data = 113;
                break;
            case 'r':
                data = 114;
                break;
            case 's':
                data = 115;
                break;
            case 't':
                data = 116;
                break;
            case 'u':
                data = 117;
                break;
            case 'v':
                data = 118;
                break;
            case 'w':
                data = 119;
                break;
            case 'x':
                data = 120;
                break;
            case 'y':
                data = 121;
                break;
            case 'z':
                data = 122;
                break;
            case '{':
                data = 123;
                break;
            case '|':
                data = 124;
                break;
            case '}':
                data = 125;
                break;
            case '~':
                data = 126;
                break;
        }

        return data;
    },
    sensorTypes: {
        ALIVE: 0,
        DIGITAL: 1,
        ANALOG: 2,
        PWM: 3,
        SERVO_PIN: 4,
        TONE: 5,
        PULSEIN: 6,
        ULTRASONIC: 7,
        TIMER: 8,
        LCD: 9,
        LCD_COMMAND: 10
    },
    toneTable: {
        '0': 0,
        C: 1,
        CS: 2,
        D: 3,
        DS: 4,
        E: 5,
        F: 6,
        FS: 7,
        G: 8,
        GS: 9,
        A: 10,
        AS: 11,
        B: 12
    },
    toneMap: {
        '1': [33, 65, 131, 262, 523, 1046, 2093, 4186],
        '2': [35, 69, 139, 277, 554, 1109, 2217, 4435],
        '3': [37, 73, 147, 294, 587, 1175, 2349, 4699],
        '4': [39, 78, 156, 311, 622, 1245, 2849, 4978],
        '5': [41, 82, 165, 330, 659, 1319, 2637, 5274],
        '6': [44, 87, 175, 349, 698, 1397, 2794, 5588],
        '7': [46, 92, 185, 370, 740, 1480, 2960, 5920],
        '8': [49, 98, 196, 392, 784, 1568, 3136, 6272],
        '9': [52, 104, 208, 415, 831, 1661, 3322, 6645],
        '10': [55, 110, 220, 440, 880, 1760, 3520, 7040],
        '11': [58, 117, 233, 466, 932, 1865, 3729, 7459],
        '12': [62, 123, 247, 494, 988, 1976, 3951, 7902]
    },
    directionTable: {
        Forward: 0,
        Backward: 1
    },
    highList: ['high', '1', 'on'],
    lowList: ['low', '0', 'off'],
    BlockState: {}
};

Entry.mkboard.getBlocks = function () {
    return {
        //region mkboard 몽키보드
        mkboard_analog_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['A0', '0'], ['A1', '1'], ['A2', '2'], ['A3', '3'], ['A4', '4'], ['A5', '5'], ['A6', '6'], ['A7', '7']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getField('PORT');
            },
            syntax: { js: [], py: [] }
        },
        mkboard_get_analog_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'mkboard_analog_list'
                }],
                type: 'mkboard_get_analog_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'mkboardGet',
            isNotFor: ['mkboard'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                if (port[0] === 'A') port = port.substring(1);
                return ANALOG ? ANALOG[port] || 0 : 0;
            },
            syntax: { js: [], py: [] }
        },
        mkboard_get_analog_value_map: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'mkboard_get_analog_value',
                    params: [{
                        type: 'mkboard_analog_list'
                    }]
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'mkboard_get_analog_value_map'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE2: 1,
                VALUE3: 2,
                VALUE4: 3,
                VALUE5: 4
            },
            class: 'mkboardGet',
            isNotFor: ['mkboard'],
            func: function func(sprite, script) {
                var result = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                var value2 = script.getNumberValue('VALUE2', script);
                var value3 = script.getNumberValue('VALUE3', script);
                var value4 = script.getNumberValue('VALUE4', script);
                var value5 = script.getNumberValue('VALUE5', script);

                if (value2 > value3) {
                    var swap = value2;
                    value2 = value3;
                    value3 = swap;
                }
                if (value4 > value5) {
                    var swap = value4;
                    value4 = value5;
                    value5 = swap;
                }
                result -= value2;
                result = result * ((value5 - value4) / (value3 - value2));
                result += value4;
                result = Math.min(value5, result);
                result = Math.max(value4, result);

                return result;
            },
            syntax: { js: [], py: [] }
        },
        mkboard_get_ultrasonic_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: ['13']
                }, {
                    type: 'arduino_get_port_number',
                    params: ['12']
                }],
                type: 'mkboard_get_ultrasonic_value'
            },
            paramsKeyMap: {
                PORT1: 0,
                PORT2: 1
            },
            class: 'mkboardGet',
            isNotFor: ['mkboard'],
            func: function func(sprite, script) {
                var port1 = script.getNumberValue('PORT1', script);
                var port2 = script.getNumberValue('PORT2', script);

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                delete Entry.hw.sendQueue['SET'][port1];
                delete Entry.hw.sendQueue['SET'][port2];

                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.mkboard.sensorTypes.ULTRASONIC] = {
                    port: [port1, port2],
                    time: new Date().getTime()
                };
                return Entry.hw.portData.ULTRASONIC || 0;
            },
            syntax: { js: [], py: [] }
        },
        mkboard_get_digital: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }],
                type: 'mkboard_get_digital'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'mkboardGet',
            isNotFor: ['mkboard'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT', script);
                var DIGITAL = Entry.hw.portData.DIGITAL;
                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }
                Entry.hw.sendQueue['GET'][Entry.mkboard.sensorTypes.DIGITAL] = {
                    port: port,
                    time: new Date().getTime()
                };
                return DIGITAL ? DIGITAL[port] || 0 : 0;
            },
            syntax: { js: [], py: [] }
        },
        mkboard_toggle_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }, {
                    type: 'arduino_get_digital_toggle',
                    params: ['on']
                }, null],
                type: 'mkboard_toggle_led'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'mkboard',
            isNotFor: ['mkboard'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getValue('VALUE');

                if (typeof value === 'string') {
                    value = value.toLowerCase();
                }
                if (Entry.mkboard.highList.indexOf(value) > -1) {
                    value = 255;
                } else if (Entry.mkboard.lowList.indexOf(value) > -1) {
                    value = 0;
                } else {
                    throw new Error();
                }
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.mkboard.sensorTypes.DIGITAL,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        mkboard_digital_pwm: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_pwm_port_number'
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'mkboard_digital_pwm'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'mkboard',
            isNotFor: ['mkboard'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 0);
                value = Math.min(value, 255);
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.mkboard.sensorTypes.PWM,
                    data: value,
                    time: new Date().getTime()
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        mkboard_tone_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.silent, '0'], [Lang.Blocks.do_name, 'C'], [Lang.Blocks.do_sharp_name, 'CS'], [Lang.Blocks.re_name, 'D'], [Lang.Blocks.re_sharp_name, 'DS'], [Lang.Blocks.mi_name, 'E'], [Lang.Blocks.fa_name, 'F'], [Lang.Blocks.fa_sharp_name, 'FS'], [Lang.Blocks.sol_name, 'G'], [Lang.Blocks.sol_sharp_name, 'GS'], [Lang.Blocks.la_name, 'A'], [Lang.Blocks.la_sharp_name, 'AS'], [Lang.Blocks.si_name, 'B']],
                value: 'C',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                NOTE: 0
            },
            func: function func(sprite, script) {
                return script.getField('NOTE');
            },
            syntax: { js: [], py: [] }
        },
        mkboard_tone_value: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'mkboard_tone_list'
                }],
                type: 'mkboard_tone_value'
            },
            paramsKeyMap: {
                NOTE: 0
            },
            func: function func(sprite, script) {
                return script.getNumberValue('NOTE');
            },
            syntax: { js: [], py: [] }
        },
        mkboard_octave_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6']],
                value: '3',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                OCTAVE: 0
            },
            func: function func(sprite, script) {
                return script.getField('OCTAVE');
            },
            syntax: { js: [], py: [] }
        },
        mkboard_set_tone: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    value: 4,
                    params: ['11']
                }, {
                    type: 'mkboard_tone_list'
                }, {
                    type: 'mkboard_octave_list'
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'mkboard_set_tone'
            },
            paramsKeyMap: {
                PORT: 0,
                NOTE: 1,
                OCTAVE: 2,
                DURATION: 3
            },
            class: 'mkboard',
            isNotFor: ['mkboard'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var port = script.getNumberValue('PORT', script);

                if (!script.isStart) {
                    var note = script.getValue('NOTE', script);
                    if (!Entry.Utils.isNumber(note)) note = Entry.mkboard.toneTable[note];

                    if (note < 0) {
                        note = 0;
                    } else if (note > 12) {
                        note = 12;
                    }

                    var duration = script.getNumberValue('DURATION', script);

                    if (duration < 0) {
                        duration = 0;
                    }

                    if (!sq['SET']) {
                        sq['SET'] = {};
                    }

                    if (duration === 0) {
                        sq['SET'][port] = {
                            type: Entry.mkboard.sensorTypes.TONE,
                            data: 0,
                            time: new Date().getTime()
                        };
                        return script.callReturn();
                    }

                    var octave = script.getNumberValue('OCTAVE', script) - 1;
                    if (octave < 0) {
                        octave = 0;
                    } else if (octave > 5) {
                        octave = 5;
                    }

                    var value = 0;

                    if (note != 0) {
                        value = Entry.mkboard.toneMap[note][octave];
                    }

                    duration = duration * 1000;
                    script.isStart = true;
                    script.timeFlag = 1;

                    sq['SET'][port] = {
                        type: Entry.mkboard.sensorTypes.TONE,
                        data: {
                            value: value,
                            duration: duration
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, duration + 32);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    sq['SET'][port] = {
                        type: Entry.mkboard.sensorTypes.TONE,
                        data: 0,
                        time: new Date().getTime()
                    };
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        mkboard_set_servo: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_get_port_number',
                    params: ['10']
                }, null],
                type: 'mkboard_set_servo'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'mkboard',
            isNotFor: ['mkboard'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var port = script.getNumberValue('PORT', script);
                var value = script.getNumberValue('VALUE', script);
                value = Math.min(180, value);
                value = Math.max(0, value);

                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.mkboard.sensorTypes.SERVO_PIN,
                    data: value,
                    time: new Date().getTime()
                };

                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        mkboard_list_digital_lcd_line: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['LINE1', '0'], ['LINE2', '1']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                LINE: 0
            },
            func: function func(sprite, script) {
                return script.getField('LINE');
            }
        },
        mkboard_list_digital_lcd_column: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['COL1', '0'], ['COL2', '1'], ['COL3', '2'], ['COL4', '3'], ['COL5', '4'], ['COL6', '5'], ['COL7', '6'], ['COL8', '7'], ['COL9', '8'], ['COL10', '9'], ['COL11', '10'], ['COL12', '11'], ['COL13', '12'], ['COL14', '13'], ['COL15', '14'], ['COL16', '15']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                COLUMN: 0
            },
            func: function func(sprite, script) {
                return script.getField('COLUMN');
            }
        },
        mkboard_set_lcd: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            template: Lang.template.mkboard_set_lcd,
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'mkboard_list_digital_lcd_line'
                }, {
                    type: 'mkboard_list_digital_lcd_column'
                }, {
                    type: 'text',
                    params: ['Type text !!']
                }, null],
                type: 'mkboard_set_lcd'
            },
            paramsKeyMap: {
                LINE: 0,
                COLUMN: 1,
                STRING: 2
            },
            class: 'mkboardLcd',
            isNotFor: ['mkboard'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;

                var line = script.getValue('LINE', script);
                var column = script.getValue('COLUMN', script);
                var string = script.getValue('STRING', script);
                var text = [];

                if (!script.isStart) {
                    if (typeof string === 'string') {
                        for (var i = 0; i < string.length; i++) {
                            text[i] = Entry.mkboard.toByte(string[i]);
                        }
                    } else if (typeof string === 'number') {
                        //console.log("string");
                        //console.log(string);
                        var num_to_string = string.toString();
                        for (var i = 0; i < num_to_string.length; i++) {
                            text[i] = Entry.mkboard.toByte(num_to_string[i]);
                        }
                        //console.log("num_to_string");
                        //console.log(num_to_string);
                        //text[0] = 1;
                        //text[1] = string / 1;
                    } else {
                        text[0] = string;
                    }

                    if (!Entry.hw.sendQueue['SET']) {
                        Entry.hw.sendQueue['SET'] = {};
                    }

                    script.isStart = true;
                    script.timeFlag = 1;
                    var fps = Entry.FPS || 60;
                    var timeValue = 60 / fps * 50;

                    Entry.hw.sendQueue['SET'][line] = {
                        type: Entry.mkboard.sensorTypes.LCD,
                        data: {
                            line: line,
                            column: column,
                            text0: text[0],
                            text1: text[1],
                            text2: text[2],
                            text3: text[3],
                            text4: text[4],
                            text5: text[5],
                            text6: text[6],
                            text7: text[7],
                            text8: text[8],
                            text9: text[9],
                            text10: text[10],
                            text11: text[11],
                            text12: text[12],
                            text13: text[13],
                            text14: text[14],
                            text15: text[15]
                        },
                        time: new Date().getTime()
                    };

                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = true;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['mkboard.mkboard_set_lcd(%1, %2, %3)'] }
        },
        mkboard_list_lcd_command: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['LCD_BLUE', '0'], ['LCD_GREEN', '1'], ['LCD_CLEAR', '2']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                COMMAND: 0
            },
            func: function func(sprite, script) {
                return script.getField('COMMAND');
            }
        },
        mkboard_lcd_command: {
            color: '#00979D',
            skeleton: 'basic',
            template: Lang.template.mkboard_lcd_command,
            //"template": "%1 %2",
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'mkboard_list_lcd_command'
                }, null],
                type: 'mkboard_lcd_command'
            },
            paramsKeyMap: {
                COMMAND: 0
            },
            class: 'mkboardLcd',
            isNotFor: ['mkboard'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var value = script.getNumberValue('COMMAND', script);
                var command = script.getNumberValue('COMMAND', script);

                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][0] = {
                    type: Entry.mkboard.sensorTypes.LCD_COMMAND,
                    data: {
                        value: value,
                        command: command
                    },
                    time: new Date().getTime()
                };

                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        }
        //endregion mkboard 몽키보드
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_modi.js":
/*!*********************************************!*\
  !*** ./src/playground/blocks/block_modi.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.MODI = {
    name: 'modi',
    url: 'http://www.luxrobo.com/',
    imageName: 'modi.png',
    title: {
        "ko": "모디",
        "en": "MODI"
    },
    setZero: function setZero() {
        Entry.hw.sendQueue.moduleValue = {
            led: [],
            motor: [],
            speaker: [],
            display: []
        };
        Entry.hw.sendQueue['getProperty'] = {};
        Entry.hw.getModule = {
            id: 0,
            property: 0
        };
        Entry.hw.update();
    },
    initSend: function initSend() {
        Entry.hw.sendQueue.moduleValue = {
            led: [],
            motor: [],
            speaker: [],
            display: []
        };
        Entry.hw.sendQueue['getProperty'] = {};
        Entry.hw.getModule = {
            id: 0,
            property: 0
        };
        Entry.hw.update();
    },
    getModule: {
        id: 0,
        property: 0
    },
    microphoneList: function microphoneList() {
        var list;
        var moduleData = Entry.hw.portData['module'] || {};

        if (moduleData['mic'] === undefined) {
            return [[Lang.Blocks.no_target, 'null']];
        }

        list = [];
        for (var i = 0; i < moduleData['mic'].length; i++) {
            if (moduleData['mic'][i]) list.push([i.toString(), i.toString()]);
        }
        return list;
    },
    environmentList: function environmentList() {
        var list;
        var moduleData = Entry.hw.portData['module'] || {};

        if (moduleData['environment'] === undefined) {
            return [[Lang.Blocks.no_target, 'null']];
        }

        list = [];
        for (var i = 0; i < moduleData['environment'].length; i++) {
            if (moduleData['environment'][i]) list.push([i.toString(), i.toString()]);
        }
        return list;
    },
    dialList: function dialList() {
        var list;
        var moduleData = Entry.hw.portData['module'] || {};

        if (moduleData['dial'] === undefined) {
            return [[Lang.Blocks.no_target, 'null']];
        }

        list = [];
        for (var i = 0; i < moduleData['dial'].length; i++) {
            if (moduleData['dial'][i]) list.push([i.toString(), i.toString()]);
        }
        return list;
    },
    gyroscopeList: function gyroscopeList() {
        var list;
        var moduleData = Entry.hw.portData['module'] || {};

        if (moduleData['gyro'] === undefined) {
            return [[Lang.Blocks.no_target, 'null']];
        }

        list = [];
        for (var i = 0; i < moduleData['gyro'].length; i++) {
            if (moduleData['gyro'][i]) list.push([i.toString(), i.toString()]);
        }
        return list;
    },
    buttonList: function buttonList() {
        var list;
        var moduleData = Entry.hw.portData['module'] || {};

        if (moduleData['button'] === undefined) {
            return [[Lang.Blocks.no_target, 'null']];
        }

        list = [];
        for (var i = 0; i < moduleData['button'].length; i++) {
            if (moduleData['button'][i]) list.push([i.toString(), i.toString()]);
        }
        return list;
    },
    infraredList: function infraredList() {
        var list;
        var moduleData = Entry.hw.portData['module'] || {};

        if (moduleData['ir'] === undefined) {
            return [[Lang.Blocks.no_target, 'null']];
        }

        list = [];
        for (var i = 0; i < moduleData['ir'].length; i++) {
            if (moduleData['ir'][i]) list.push([i.toString(), i.toString()]);
        }
        return list;
    },
    ultrasonicList: function ultrasonicList() {
        var list;
        var moduleData = Entry.hw.portData['module'] || {};

        if (moduleData['ultrasonic'] === undefined) {
            return [[Lang.Blocks.no_target, 'null']];
        }

        list = [];
        for (var i = 0; i < moduleData['ultrasonic'].length; i++) {
            if (moduleData['ultrasonic'][i]) list.push([i.toString(), i.toString()]);
        }
        return list;
    },
    motorList: function motorList() {
        var list;
        var moduleData = Entry.hw.portData['module'] || {};

        if (moduleData['motor'] === undefined) {
            return [[Lang.Blocks.no_target, 'null']];
        }
        list = [];
        for (var i = 0; i < moduleData['motor'].length; i++) {
            if (moduleData['motor'][i]) list.push([i.toString(), i.toString()]);
        }
        return list;
    },
    ledList: function ledList() {
        var list;
        var moduleData = Entry.hw.portData['module'] || {};

        if (moduleData['led'] === undefined) {
            return [[Lang.Blocks.no_target, 'null']];
        }

        list = [];
        for (var i = 0; i < moduleData['led'].length; i++) {
            if (moduleData['led'][i]) list.push([i, i]);
        }
        return list;
    },
    speakerList: function speakerList() {
        var list;
        var moduleData = Entry.hw.portData['module'] || {};

        if (moduleData['speaker'] === undefined) {
            return [[Lang.Blocks.no_target, 'null']];
        }

        list = [];
        for (var i = 0; i < moduleData['speaker'].length; i++) {
            if (moduleData['speaker'][i]) list.push([i.toString(), i.toString()]);
        }
        return list;
    },
    displayList: function displayList() {
        var list;
        var moduleData = Entry.hw.portData['module'] || {};

        if (moduleData['display'] === undefined) {
            return [[Lang.Blocks.no_target, 'null']];
        }

        list = [];
        for (var i = 0; i < moduleData['display'].length; i++) {
            if (moduleData['display'][i]) list.push([i.toString(), i.toString()]);
        }
        return list;
    }
};

//region modi 모디
Entry.MODI.getBlocks = function () {
    return {
        modi_microphone_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '마이크 %1번의 볼륨',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.microphoneList
            }],
            def: {
                params: [null],
                type: 'modi_microphone_value'
            },
            paramsKeyMap: {
                name: 0
            },
            class: 'microphone',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                var key = script.getStringField('name');

                var pd = JSON.parse(Entry.hw.portData.module['mic'][key]);
                var moduleID = pd.id;

                if (!Entry.hw.sendQueue['getProperty']) {
                    Entry.MODI.initSend();
                }

                if (!pd.value[2]) {
                    pd.value[2] = 0;

                    // send GETPROPERTY
                    /*if(Entry.MODI.getModule.id != moduleID || Object.keys(Entry.hw.sendQueue["getProperty"]).length == 0){
                    Entry.hw.sendQueue["getProperty"][moduleID] = JSON.stringify({module: 2, id: moduleID});
                    Entry.MODI.getModule.id = moduleID;
                    }*/
                }

                return pd.value[2];
            }
        },
        modi_environment_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '환경센서 %1번의 %2',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.environmentList
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.modi_enviroment_temperature, 6], [Lang.Blocks.modi_enviroment_humidity, 7], [Lang.Blocks.modi_enviroment_illuminance, 2], [Lang.Blocks.modi_enviroment_red, 3], [Lang.Blocks.modi_enviroment_bule, 5], [Lang.Blocks.modi_enviroment_green, 4]],
                fontSize: 11
            }],
            def: {
                params: [null, 6],
                type: 'modi_environment_value'
            },
            paramsKeyMap: {
                name: 0,
                property: 1
            },
            class: 'environment',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                var key = script.getStringField('name');
                var property = script.getNumberField('property');

                var pd = JSON.parse(Entry.hw.portData.module['environment'][key]);
                var moduleID = pd.id;

                if (!Entry.hw.sendQueue['getProperty']) {
                    Entry.MODI.initSend();
                }

                if (!pd.value[property]) {
                    pd.value[property] = 0;

                    // send GETPROPERTY
                    /*if(Entry.MODI.getModule.id != moduleID || Entry.MODI.getModule.property != property || Object.keys(Entry.hw.sendQueue["getProperty"]).length == 0){
                    Entry.hw.sendQueue["getProperty"][moduleID] = JSON.stringify({module: property, id: moduleID});
                    Entry.MODI.getModule.id = moduleID;
                    Entry.MODI.getModule.property = property;
                    }*/
                }

                return pd.value[property];
            }
        },
        modi_dial_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '다이얼 %1번의 각도',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.dialList
            }],
            def: {
                params: [null],
                type: 'modi_dial_value'
            },
            paramsKeyMap: {
                name: 0
            },
            class: 'dial',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                var key = script.getStringField('name');

                var pd = JSON.parse(Entry.hw.portData.module['dial'][key]);
                var moduleID = pd.id;

                if (!Entry.hw.sendQueue['getProperty']) {
                    Entry.MODI.initSend();
                }

                if (!pd.value[2]) {
                    pd.value[2] = 0;

                    // send GETPROPERTY
                    /*if(Entry.MODI.getModule.id != moduleID || Object.keys(Entry.hw.sendQueue["getProperty"]).length == 0){
                    Entry.hw.sendQueue["getProperty"][moduleID] = JSON.stringify({module: 2, id: moduleID});
                    Entry.MODI.getModule.id = moduleID;
                    }*/
                }

                var moduleID = JSON.parse(Entry.hw.portData.module['dial'][key]).id;

                return pd.value[2];
            }
        },
        modi_gyroscope_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '자이로센서 %1번의 %2',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.gyroscopeList
            }, {
                type: 'Dropdown',
                options: [['Roll', 2], ['Pitch', 3], ['Yaw', 4], [Lang.Blocks.modi_gyroscope_xAcceleratior, 8], [Lang.Blocks.modi_gyroscope_yAcceleratior, 9], [Lang.Blocks.modi_gyroscope_zAcceleratior, 10]],
                fontSize: 11
            }],
            def: {
                params: [null, 2],
                type: 'modi_gyroscope_value'
            },
            paramsKeyMap: {
                name: 0,
                property: 1
            },
            class: 'gyroscope',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                var key = script.getStringField('name');
                var property = script.getNumberField('property');

                var pd = JSON.parse(Entry.hw.portData.module['gyro'][key]);
                var moduleID = pd.id;

                if (!Entry.hw.sendQueue['getProperty']) {
                    Entry.MODI.initSend();
                }
                if (!pd.value[property]) {
                    pd.value[property] = 0;

                    // send GETPROPERTY
                    /*if(Entry.MODI.getModule.id != moduleID || Entry.MODI.getModule.property != property || Object.keys(Entry.hw.sendQueue["getProperty"]).length == 0){
                    Entry.hw.sendQueue["getProperty"][moduleID] = JSON.stringify({module: property, id: moduleID});
                    Entry.MODI.getModule.id = moduleID;
                    Entry.MODI.getModule.property = property;
                    }*/
                }

                return pd.value[property];
            }
        },
        modi_button_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '버튼 %1번의 %2',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.buttonList
            }, {
                type: 'Dropdown',
                options: [['Click', 2], ['Double Click', 3], ['Toggle', 5], ['Press', 4]],
                fontSize: 11
            }],
            def: {
                params: [null, 2],
                type: 'modi_button_value'
            },
            paramsKeyMap: {
                name: 0,
                property: 1
            },
            class: 'button',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                if (!Entry.hw.sendQueue.moduleValue || !Entry.hw.sendQueue['getProperty']) {
                    Entry.MODI.initSend();
                }

                var key = script.getStringField('name');
                var property = script.getNumberField('property');
                var moduleID = JSON.parse(Entry.hw.portData.module['button'][key]).id;
                var pd = JSON.parse(Entry.hw.portData.module['button'][key]);

                if (!Entry.hw.sendQueue['getProperty']) {
                    Entry.MODI.initSend();
                }

                if (!pd.value[property]) {
                    pd.value[property] = 0;

                    // send GETPROPERTY
                    /*if(Entry.MODI.getModule.id != moduleID || Entry.MODI.getModule.property != property || Object.keys(Entry.hw.sendQueue["getProperty"]).length == 0){
                    Entry.hw.sendQueue["getProperty"][moduleID] = JSON.stringify({module: property, id: moduleID});
                    Entry.MODI.getModule.id = moduleID;
                    Entry.MODI.getModule.property = property;
                    }*/
                    return 0;
                }

                return pd.value[property];
            }
        },
        modi_is_button_touch: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            template: '버튼 %1번의 %2 했는가?',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.buttonList
            }, {
                type: 'Dropdown',
                options: [['Click', 2], ['Double Click', 3], ['Toggle', 5], ['Press', 4]],
                fontSize: 11
            }],
            def: {
                params: [null, 2],
                type: 'modi_is_button_touch'
            },
            paramsKeyMap: {
                name: 0,
                property: 1
            },
            class: 'button',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                var key = script.getStringField('name');
                var property = script.getNumberField('property');

                var pd = JSON.parse(Entry.hw.portData.module['button'][key]);
                var moduleID = pd.id;

                if (!Entry.hw.sendQueue['getProperty']) {
                    Entry.MODI.initSend();
                }
                if (!pd.value[property]) {
                    pd.value[property] = 0;

                    // send GETPROPERTY
                    /*if(Entry.MODI.getModule.id != moduleID || Entry.MODI.getModule.property != property || Object.keys(Entry.hw.sendQueue["getProperty"]).length == 0){
                    Entry.hw.sendQueue["getProperty"][moduleID] = JSON.stringify({module: property, id: moduleID});
                    Entry.MODI.getModule.id = moduleID;
                    Entry.MODI.getModule.property = property;
                    }*/
                }

                var doButton = false;

                if (pd.value[property] == 100) {
                    doButton = true;
                } else {
                    doButton = false;
                }
                return doButton;
            }
        },
        modi_button_true: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '눌림',
            def: {
                params: [null],
                type: 'modi_button_true'
            },
            class: 'button',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                return 100;
            }
        },
        modi_button_false: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '안눌림',
            def: {
                params: [null],
                type: 'modi_button_false'
            },
            class: 'button',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                return 0;
            }
        },
        modi_infrared_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '적외선 %1번 센서의 거리(%)',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.infraredList
            }],
            def: {
                params: [null],
                type: 'modi_infrared_value'
            },
            paramsKeyMap: {
                name: 0
            },
            class: 'infrared',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                var key = script.getStringField('name');

                var pd = JSON.parse(Entry.hw.portData.module['ir'][key]);
                var moduleID = pd.id;

                if (!Entry.hw.sendQueue['getProperty']) {
                    Entry.MODI.initSend();
                }

                if (!pd.value[2]) {
                    pd.value[2] = 0;

                    // send GETPROPERTY
                    /*if(Entry.MODI.getModule.id != moduleID || Object.keys(Entry.hw.sendQueue["getProperty"]).length == 0){
                    Entry.hw.sendQueue["getProperty"][moduleID] = JSON.stringify({module: 2, id: moduleID});
                    Entry.MODI.getModule.id = moduleID;
                    }*/
                }

                return pd.value[2];
            }
        },
        modi_ultrasonic_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '초음파 %1번 센서의 거리(%)',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.ultrasonicList
            }],
            def: {
                params: [null],
                type: 'modi_ultrasonic_value'
            },
            paramsKeyMap: {
                name: 0
            },
            class: 'ultrasonic',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                var key = script.getStringField('name');

                var pd = JSON.parse(Entry.hw.portData.module['ultrasonic'][key]);
                var moduleID = pd.id;

                if (!Entry.hw.sendQueue['getProperty']) {
                    Entry.MODI.initSend();
                }

                if (!pd.value[2]) {
                    pd.value[2] = 0;

                    // send GETPROPERTY
                    /*if(Entry.MODI.getModule.id != moduleID || Object.keys(Entry.hw.sendQueue["getProperty"]).length == 0){
                    Entry.hw.sendQueue["getProperty"][moduleID] = JSON.stringify({module: 2, id: moduleID});
                    Entry.MODI.getModule.id = moduleID;
                    }*/
                }

                return pd.value[2];
            }
        },
        modi_set_motor_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            template: '모터 %1번 %2의 상단값은 %3 하단값은 %4 (으)로 정하기 %5',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.motorList
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.modi_motor_angle, 'MOTOR_ANGLE'], [Lang.Blocks.modi_motor_speed, 'MOTOR_SPEED'], [Lang.Blocks.modi_motor_torque, 'MOTOR_TORQUE']],
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: [null, 'MOTOR_ANGLE', {
                    type: 'number',
                    params: ['100']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'modi_set_motor_value'
            },
            paramsKeyMap: {
                name: 0,
                property: 1,
                upper: 2,
                bottom: 3
            },
            class: 'motor',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                if (!Entry.hw.sendQueue.moduleValue) {
                    Entry.MODI.initSend();
                }
                var key = script.getStringField('name'),
                    property = script.getStringField('property'),
                    upper = script.getNumberValue('upper') * 10,
                    bottom = script.getNumberValue('bottom') * 10;
                var moduleID = JSON.parse(Entry.hw.portData.module['motor'][key]).id;

                var sq = Entry.hw.sendQueue.moduleValue;
                sq['motor'][key] = JSON.stringify({
                    module: property,
                    id: moduleID,
                    value1: upper,
                    value2: bottom
                });

                return script.callReturn();
            }
        },
        modi_change_motor_upper_value: {
            color: '#00979D',
            skeleton: 'basic',
            template: '모터 %1번 %2의 상단값을 %3만큼 바꾸기 %4',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.motorList
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.modi_motor_angle, 'MOTOR_ANGLE'], [Lang.Blocks.modi_motor_speed, 'MOTOR_SPEED'], [Lang.Blocks.modi_motor_torque, 'MOTOR_TORQUE']],
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: [null, 'MOTOR_ANGLE', {
                    type: 'number',
                    params: ['100']
                }],
                type: 'modi_change_motor_upper_value'
            },
            paramsKeyMap: {
                name: 0,
                property: 1,
                value: 2
            },
            class: 'motor',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                if (!Entry.hw.sendQueue.moduleValue) {
                    Entry.MODI.initSend();
                }

                var key = script.getStringField('name'),
                    value = script.getNumberValue('value'),
                    property = script.getStringField('property');

                var pd = JSON.parse(Entry.hw.portData.module['motor'][key]);
                var uValue = 0,
                    bValue = 0;
                var moduleID = pd.id;

                switch (property) {
                    case 'MOTOR_ANGLE':
                        uValue = 4;
                        bValue = 12;
                        break;
                    case 'MOTOR_SPEED':
                        uValue = 3;
                        bValue = 11;
                        break;
                    case 'MOTOR_TORQUE':
                        uValue = 2;
                        bValue = 10;
                        break;
                }

                if (!pd.value[uValue]) {
                    pd.value[uValue] = 0;

                    // send GETPROPERTY
                    /*if(Entry.MODI.getModule.id != moduleID || Object.keys(Entry.hw.sendQueue["getProperty"]).length == 0){
                    Entry.hw.sendQueue["getProperty"][moduleID] = JSON.stringify({module: property, id: moduleID});
                    Entry.MODI.getModule.id = moduleID;
                    }*/
                }
                if (!pd.value[bValue]) {
                    pd.value[bValue] = 0;
                }

                var sq = Entry.hw.sendQueue.moduleValue;
                var upper = value * 10 + pd.value[uValue] * 10,
                    bottom = pd.value[bValue] * 10;

                if (upper > 1000 || upper < 0 && property == 'MOTOR_ANGLE') upper = 1000;

                sq['motor'][key] = JSON.stringify({
                    module: property,
                    id: moduleID,
                    value1: upper,
                    value2: bottom
                });

                return script.callReturn();
            }
        },
        modi_change_motor_bottom_value: {
            color: '#00979D',
            skeleton: 'basic',
            template: '모터 %1번 %2의 하단값을 %3만큼 바꾸기 %4',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.motorList
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.modi_motor_angle, 'MOTOR_ANGLE'], [Lang.Blocks.modi_motor_speed, 'MOTOR_SPEED'], [Lang.Blocks.modi_motor_torque, 'MOTOR_TORQUE']],
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, 'MOTOR_ANGLE', {
                    type: 'text',
                    params: ['100']
                }],
                type: 'modi_change_motor_bottom_value'
            },
            class: 'motor',
            isNotFor: ['modi'],
            paramsKeyMap: {
                name: 0,
                property: 1,
                value: 2
            },
            func: function func(sprite, script) {
                if (!Entry.hw.sendQueue.moduleValue) {
                    Entry.MODI.initSend();
                }

                var key = script.getStringField('name'),
                    value = script.getNumberValue('value'),
                    property = script.getStringField('property');

                var pd = JSON.parse(Entry.hw.portData.module['motor'][key]);
                var uValue = 0,
                    bValue = 0;
                var moduleID = pd.id;

                if (!pd.value[uValue]) {
                    pd.value[uValue] = 0;

                    // send GETPROPERTY
                    /*if(Entry.MODI.getModule.id != moduleID || Object.keys(Entry.hw.sendQueue["getProperty"]).length == 0){
                    Entry.hw.sendQueue["getProperty"][moduleID] = JSON.stringify({module: property, id: moduleID});
                    Entry.MODI.getModule.id = moduleID;
                    }*/
                }
                if (!pd.value[bValue]) {
                    pd.value[bValue] = 0;
                }

                switch (property) {
                    case 'MOTOR_ANGLE':
                        uValue = 4;
                        bValue = 12;
                        break;
                    case 'MOTOR_SPEED':
                        uValue = 3;
                        bValue = 11;
                        break;
                    case 'MOTOR_TORQUE':
                        uValue = 2;
                        bValue = 10;
                        break;
                }

                var sq = Entry.hw.sendQueue.moduleValue;
                var upper = pd.value[uValue] * 10,
                    bottom = value * 10 + pd.value[bValue] * 10;

                if (bottom > 1000 || bottom < 0 && property == 'MOTOR_ANGLE') bottom = 1000;

                sq['motor'][key] = JSON.stringify({
                    module: property,
                    id: moduleID,
                    value1: upper,
                    value2: bottom
                });

                return script.callReturn();
            }
        },
        modi_clear_led: {
            color: '#00979D',
            skeleton: 'basic',
            template: 'LED %1번의 색 끄기 %2',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.ledList
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: [null],
                type: 'modi_clear_led'
            },
            paramsKeyMap: {
                name: 0
            },
            class: 'led',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                if (!Entry.hw.sendQueue.moduleValue) {
                    Entry.MODI.initSend();
                }

                var key = script.getStringField('name');
                var moduleID = JSON.parse(Entry.hw.portData.module['led'][key]).id;

                var sq = Entry.hw.sendQueue.moduleValue;
                sq['led'][key] = JSON.stringify({
                    module: 'LED_RGB',
                    id: moduleID,
                    value1: 0,
                    value2: 0,
                    value3: 0
                });

                return script.callReturn();
            }
        },
        modi_set_led_rgb: {
            color: '#00979D',
            skeleton: 'basic',
            template: 'LED %1번 R %2 G %3 B %4  %5',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.ledList
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: [null, {
                    type: 'number',
                    params: ['255']
                }, {
                    type: 'number',
                    params: ['255']
                }, {
                    type: 'number',
                    params: ['255']
                }],
                type: 'modi_set_led_rgb'
            },
            paramsKeyMap: {
                name: 0,
                rValue: 1,
                gValue: 2,
                bValue: 3
            },
            class: 'led',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                if (!Entry.hw.sendQueue.moduleValue) {
                    Entry.MODI.initSend();
                }
                var key = script.getStringField('name');
                var red, green, blue;
                red = script.getNumberValue('rValue'), green = script.getNumberValue('gValue'), blue = script.getNumberValue('bValue');
                var moduleID = JSON.parse(Entry.hw.portData.module['led'][key]).id;

                var sq = Entry.hw.sendQueue.moduleValue;
                sq['led'][key] = JSON.stringify({
                    module: 'LED_RGB',
                    id: moduleID,
                    value1: red,
                    value2: green,
                    value3: blue
                });

                return script.callReturn();
            }
        },
        modi_set_led_color: {
            color: '#00979D',
            skeleton: 'basic',
            template: 'LED %1번 색 %2로 정하기 %3',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.ledList
            }, {
                type: 'Color'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: [null],
                type: 'modi_set_led_color'
            },
            paramsKeyMap: {
                name: 0,
                color: 1
            },
            class: 'led',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                if (!Entry.hw.sendQueue.moduleValue) {
                    Entry.MODI.initSend();
                }
                var key = script.getStringField('name');
                var color = script.getStringField('color');

                color = color.substring(1, 7);
                var bigint = parseInt(color, 16);
                var red = bigint >> 16 & 255,
                    green = bigint >> 8 & 255,
                    blue = bigint & 255;
                var moduleID = JSON.parse(Entry.hw.portData.module['led'][key]).id;

                var sq = Entry.hw.sendQueue.moduleValue;
                sq['led'][key] = JSON.stringify({
                    module: 'LED_RGB',
                    id: moduleID,
                    value1: red,
                    value2: green,
                    value3: blue
                });

                return script.callReturn();
            }
        },
        modi_set_basic_speaker: {
            color: '#00979D',
            skeleton: 'basic',
            template: '스피커 %1번을 %2음으로 크기는 %3(으)로 정하기 %4',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.speakerList
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.modi_speaker_F_DO_5, 'F_DO_5'], [Lang.Blocks.modi_speaker_F_RE_5, 'F_RE_5'], [Lang.Blocks.modi_speaker_F_MI_5, 'F_MI_5'], [Lang.Blocks.modi_speaker_F_PA_5, 'F_PA_5'], [Lang.Blocks.modi_speaker_F_SOL_5, 'F_SOL_5'], [Lang.Blocks.modi_speaker_F_RA_5, 'F_RA_5'], [Lang.Blocks.modi_speaker_F_SO_5, 'F_SO_5'], [Lang.Blocks.modi_speaker_F_DO_S_5, 'F_DO_S_5'], [Lang.Blocks.modi_speaker_F_RE_S_5, 'F_RE_S_5'], [Lang.Blocks.modi_speaker_F_PA_S_5, 'F_PA_S_5'], [Lang.Blocks.modi_speaker_F_SOL_S_5, 'F_SOL_S_5'], [Lang.Blocks.modi_speaker_F_RA_S_5, 'F_RA_S_5'], [Lang.Blocks.modi_speaker_F_DO_6, 'F_DO_6'], [Lang.Blocks.modi_speaker_F_RE_6, 'F_RE_6'], [Lang.Blocks.modi_speaker_F_MI_6, 'F_MI_6'], [Lang.Blocks.modi_speaker_F_PA_6, 'F_PA_6'], [Lang.Blocks.modi_speaker_F_SOL_6, 'F_SOL_6'], [Lang.Blocks.modi_speaker_F_RA_6, 'F_RA_6'], [Lang.Blocks.modi_speaker_F_SO_6, 'F_SO_6'], [Lang.Blocks.modi_speaker_F_DO_S_6, 'F_DO_S_6'], [Lang.Blocks.modi_speaker_F_RE_S_6, 'F_RE_S_6'], [Lang.Blocks.modi_speaker_F_PA_S_6, 'F_PA_S_6'], [Lang.Blocks.modi_speaker_F_SOL_S_6, 'F_SOL_S_6'], [Lang.Blocks.modi_speaker_F_RA_S_6, 'F_RA_S_6'], [Lang.Blocks.modi_speaker_F_DO_7, 'F_DO_7'], [Lang.Blocks.modi_speaker_F_RE_7, 'F_RE_7'], [Lang.Blocks.modi_speaker_F_MI_7, 'F_MI_7'], [Lang.Blocks.modi_speaker_F_PA_7, 'F_PA_7'], [Lang.Blocks.modi_speaker_F_SOL_7, 'F_SOL_7'], [Lang.Blocks.modi_speaker_F_RA_7, 'F_RA_7'], [Lang.Blocks.modi_speaker_F_SO_7, 'F_SO_7'], [Lang.Blocks.modi_speaker_F_DO_S_7, 'F_DO_S_7'], [Lang.Blocks.modi_speaker_F_RE_S_7, 'F_RE_S_7'], [Lang.Blocks.modi_speaker_F_PA_S_7, 'F_PA_S_7'], [Lang.Blocks.modi_speaker_F_SOL_S_7, 'F_SOL_S_7'], [Lang.Blocks.modi_speaker_F_RA_S_7, 'F_RA_S_7']],
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, 'F_DO_5', {
                    type: 'number',
                    params: ['100']
                }],
                type: 'modi_set_basic_speaker'
            },
            paramsKeyMap: {
                name: 0,
                frequence: 1,
                volume: 2
            },
            class: 'speaker',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                if (!Entry.hw.sendQueue.moduleValue) {
                    Entry.MODI.initSend();
                }
                var key = script.getStringField('name'),
                    frequence = script.getStringField('frequence'),
                    volume = script.getNumberValue('volume', script) * 10;
                var moduleID = JSON.parse(Entry.hw.portData.module['speaker'][key]).id;

                var sq = Entry.hw.sendQueue.moduleValue;
                sq['speaker'][key] = JSON.stringify({
                    module: 'SPEAKER_BUZZER',
                    id: moduleID,
                    value1: frequence,
                    value2: volume
                });

                return script.callReturn();
            }
        },
        modi_set_custom_speaker: {
            color: '#00979D',
            skeleton: 'basic',
            template: '스피커 %1번의 진동수는 %2 크기는 %3(으)로 정하기 %4',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.speakerList
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: [null, {
                    type: 'number',
                    params: ['100']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'modi_set_custom_speaker'
            },
            paramsKeyMap: {
                name: 0,
                frequence: 1,
                volume: 2
            },
            class: 'speaker',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                if (!Entry.hw.sendQueue.moduleValue) {
                    Entry.MODI.initSend();
                }
                var key = script.getStringField('name'),
                    frequence = script.getNumberValue('frequence') * 10,
                    volume = script.getNumberValue('volume', script) * 10;
                var moduleID = JSON.parse(Entry.hw.portData.module['speaker'][key]).id;

                var sq = Entry.hw.sendQueue.moduleValue;
                sq['speaker'][key] = JSON.stringify({
                    module: 'SPEAKER_BUZZER',
                    id: moduleID,
                    value1: frequence,
                    value2: volume
                });

                return script.callReturn();
            }
        },
        modi_change_speaker_frequence: {
            color: '#00979D',
            skeleton: 'basic',
            template: '스피커 %1번의 진동수를 %2만큼 바꾸기 %3',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.speakerList
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: [null, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'modi_change_speaker_frequence'
            },
            paramsKeyMap: {
                name: 0,
                value: 1
            },
            class: 'speaker',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                if (!Entry.hw.sendQueue.moduleValue) {
                    Entry.MODI.initSend();
                }

                var key = script.getStringField('name'),
                    value = script.getNumberValue('value');

                var pd = JSON.parse(Entry.hw.portData.module['speaker'][key]);
                var moduleID = pd.id;

                if (!pd.value[2]) {
                    pd.value[2] = 0;
                }
                if (!pd.value[3]) {
                    pd.value[3] = 0;
                }

                var frequence = value * 10 + pd.value[3] * 10,
                    volume = pd.value[2] * 10;
                if (frequence > 1000 || frequence < 0) frequence = 1000;

                var sq = Entry.hw.sendQueue.moduleValue;
                sq['speaker'][key] = JSON.stringify({
                    module: 'SPEAKER_BUZZER',
                    id: moduleID,
                    value1: frequence,
                    value2: volume
                });

                return script.callReturn();
            }
        },
        modi_change_speaker_volume: {
            color: '#00979D',
            skeleton: 'basic',
            template: '스피커 %1번의 크기를 %2만큼 바꾸기 %3',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.speakerList
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            def: {
                params: [null, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'modi_change_speaker_volume'
            },
            paramsKeyMap: {
                name: 0,
                value: 1
            },
            class: 'speaker',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                if (!Entry.hw.sendQueue.moduleValue) {
                    Entry.MODI.initSend();
                }

                var key = script.getStringField('name'),
                    value = script.getNumberValue('value');

                var pd = JSON.parse(Entry.hw.portData.module['speaker'][key]);
                var moduleID = pd.id;

                if (!pd.value[2]) {
                    pd.value[2] = 0;
                }
                if (!pd.value[3]) {
                    pd.value[3] = 0;
                }

                var frequence = pd.value[3] * 10,
                    volume = value * 10 + pd.value[2] * 10;
                if (volume > 1000 || volume < 0) frequence = 1000;

                var sq = Entry.hw.sendQueue.moduleValue;
                sq['speaker'][key] = JSON.stringify({
                    module: 'SPEAKER_BUZZER',
                    id: moduleID,
                    value1: frequence,
                    value2: volume
                });

                return script.callReturn();
            }
        },
        modi_print_display_by_value: {
            color: '#00979D',
            skeleton: 'basic',
            template: '디스플레이 %1번의 화면에 %2 보이기 %3',
            params: [{
                type: 'DropdownDynamic',
                value: null,
                fontSize: 11,
                menuName: Entry.MODI.displayList
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['100']
                }],
                type: 'modi_print_display_by_value'
            },
            paramsKeyMap: {
                name: 0,
                text: 1
            },
            class: 'display',
            isNotFor: ['modi'],
            func: function func(sprite, script) {
                if (!Entry.hw.sendQueue.moduleValue) {
                    Entry.MODI.initSend();
                }

                var key = script.getStringField('name'),
                    text = script.getStringValue('text');

                if (text.length > 8) {
                    return script.callReturn();
                }

                var moduleID = JSON.parse(Entry.hw.portData.module['display'][key]).id;

                var sq = Entry.hw.sendQueue.moduleValue;
                sq['display'][key] = JSON.stringify({
                    module: 'DISPLAY_TEXT',
                    id: moduleID,
                    value1: text
                });
                return script.callReturn();
            }
        }
    };
};
//endregion modi 모디

/***/ }),

/***/ "./src/playground/blocks/block_nemoino.js":
/*!************************************************!*\
  !*** ./src/playground/blocks/block_nemoino.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.nemoino = {
    name: 'nemoino',
    imageName: 'nemoino.png',
    title: {
        "ko": "네모이노",
        "en": "NEMOino"
    },
    setZero: function setZero() {
        Entry.hw.sendQueue.readablePorts = [];
        for (var port = 0; port < 20; port++) {
            Entry.hw.sendQueue[port] = 0;
            Entry.hw.sendQueue.readablePorts.push(port);
        }
        Entry.hw.update();
    }
};

Entry.nemoino.getBlocks = function () {
    return {
        //region nemoino 네모이노
        nemoino_get_named_sensor_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1 센서값',
            params: [{
                type: 'Dropdown',
                options: [['소리', '0'], ['빛', '1'], ['슬라이더', '2'], ['저항-A', '3'], ['저항-B', '4'], ['저항-C', '5'], ['저항-D', '6']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'nemoino_get_named_sensor_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'nemoino',
            isNotFor: ['nemoino'],
            func: function func(sprite, script) {
                return Entry.hw.getAnalogPortValue(script.getField('PORT', script));
            }
        },
        nemoino_get_sound_status: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            template: '소리센서 %1',
            params: [{
                type: 'Dropdown',
                options: [['소리큼', 'GREAT'], ['소리작음', 'SMALL']],
                value: 'GREAT',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'nemoino_get_sound_status'
            },
            paramsKeyMap: {
                STATUS: 0
            },
            class: 'nemoino',
            isNotFor: ['nemoino'],
            func: function func(sprite, script) {
                var value1 = script.getField('STATUS', script);
                var value2 = 0;
                if (value1 == 'GREAT') return Entry.hw.getAnalogPortValue(value2) > 600 ? 1 : 0;else return Entry.hw.getAnalogPortValue(value2) < 600 ? 1 : 0;
            }
        },
        nemoino_is_button_pressed: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            template: '보드의 %1',
            params: [{
                type: 'Dropdown',
                options: [['버튼누름', '4'], ['A연결됨', '17'], ['B연결됨', '18'], ['C연결됨', '19'], ['D연결됨', '20']],
                value: '4',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'nemoino_is_button_pressed'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'nemoino',
            isNotFor: ['nemoino'],
            func: function func(sprite, script) {
                var value = script.getNumberField('PORT', script);
                if (value > 14) {
                    value = value - 14;
                    return !Entry.hw.getAnalogPortValue(value);
                } else return !Entry.hw.getDigitalPortValue(value);
            }
        },
        nemoino_get_accelerometer_direction: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            template: '3축 가속도센서 %1',
            params: [{
                type: 'Dropdown',
                options: [['왼쪽 기울임', 'LEFT'], ['오른쪽 기울임', 'RIGHT'], ['위쪽 기울임', 'FRONT'], ['아래쪽 기울임', 'REAR'], ['뒤집힘', 'REVERSE']],
                value: 'LEFT',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'nemoino_get_accelerometer_direction'
            },
            paramsKeyMap: {
                DIRECTION: 0
            },
            class: 'nemoino',
            isNotFor: ['nemoino'],
            func: function func(sprite, script) {
                var value1 = script.getField('DIRECTION', script);
                var value2 = 0;
                if (value1 == 'LEFT' || value1 == 'RIGHT') value2 = 3;else if (value1 == 'FRONT' || value1 == 'REAR') value2 = 4;else if (value1 == 'REVERSE') value2 = 5;
                var value3 = Entry.hw.getAnalogPortValue(value2);
                var value4 = 265;
                var value5 = 402;
                var value6 = -90;
                var value7 = 90;
                var result = value3;
                result -= value4;
                result = result * ((value7 - value6) / (value5 - value4));
                result += value6;
                result = Math.min(value7, result);
                result = Math.max(value6, result);
                result = Math.round(result);
                if (value1 == 'LEFT' || value1 == 'REAR') return result < -30 ? 1 : 0;else if (value1 == 'RIGHT' || value1 == 'FRONT') return result > 30 ? 1 : 0;else if (value1 == 'REVERSE') return result < -50 ? 1 : 0;
            }
        },
        nemoino_get_accelerometer_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            template: '3축 가속도센서 %1 축의 센서값',
            params: [{
                type: 'Dropdown',
                options: [['X', '3'], ['Y', '4'], ['Z', '5']],
                value: '3',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'nemoino_get_accelerometer_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'nemoino',
            isNotFor: ['nemoino'],
            func: function func(sprite, script) {
                var value1 = Entry.hw.getAnalogPortValue(script.getField('PORT', script));
                var value2 = 265;
                var value3 = 402;
                var value4 = -90;
                var value5 = 90;
                var result = value1;
                if (value2 > value3) {
                    var swap = value2;
                    value2 = value3;
                    value3 = swap;
                }
                if (value4 > value5) {
                    var swap = value4;
                    value4 = value5;
                    value5 = swap;
                }
                result -= value2;
                result = result * ((value5 - value4) / (value3 - value2));
                result += value4;
                result = Math.min(value5, result);
                result = Math.max(value4, result);
                return Math.round(result);
            }
        },
        //endregion nemoino 네모이노
        //region nemoino 네모이노
        nemoino_get_number_sensor_value: {
            parent: 'arduino_get_number_sensor_value',
            isNotFor: ['nemoino'],
            def: {
                params: [{
                    type: 'arduino_get_sensor_number'
                }],
                type: 'nemoino_get_number_sensor_value'
            },
            class: 'arduino_value',
            syntax: { js: [], py: ['Nemoino.sensor_value(%1)'] }
        },
        nemoino_get_digital_value: {
            parent: 'arduino_get_digital_value',
            isNotFor: ['nemoino'],
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }],
                type: 'nemoino_get_digital_value'
            },
            class: 'arduino_value',
            syntax: { js: [], py: ['Nemoino.digital_value(%1)'] }
        },
        nemoino_toggle_led: {
            parent: 'arduino_toggle_led',
            isNotFor: ['nemoino'],
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }, null, null],
                type: 'nemoino_toggle_led'
            },
            class: 'arduino_set',
            syntax: { js: [], py: ['Nemoino.toggle_led(%1)'] }
        },
        nemoino_toggle_pwm: {
            parent: 'arduino_toggle_pwm',
            isNotFor: ['nemoino'],
            def: {
                params: [{
                    type: 'arduino_get_pwm_port_number'
                }, {
                    type: 'arduino_text',
                    params: ['255']
                }, null],
                type: 'nemoino_toggle_pwm'
            },
            class: 'arduino_set',
            syntax: { js: [], py: ['Nemoino.toggle_pwm(%1, %2)'] }
        },
        nemoino_convert_scale: {
            parent: 'arduino_convert_scale',
            isNotFor: ['nemoino'],
            def: {
                params: [{
                    type: 'arduino_get_number_sensor_value',
                    params: [{
                        type: 'arduino_get_sensor_number'
                    }]
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'nemoino_convert_scale'
            },
            class: 'arduino',
            syntax: {
                js: [],
                py: ['Nemoino.convert_scale(%1, %2, %3, %4, %5)']
            }
        }
        //endregion nemoino 네모이노
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_neobot.js":
/*!***********************************************!*\
  !*** ./src/playground/blocks/block_neobot.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Neobot = {
    name: 'neobot',
    url: 'http://www.neobot.co.kr',
    imageName: 'neobot.png',
    title: {
        "ko": "네오봇",
        "en": "Neo Bot"
    },
    LOCAL_MAP: ['IN1', 'IN2', 'IN3', 'IR', 'BAT'],
    REMOTE_MAP: ['OUT1', 'OUT2', 'OUT3', 'DCR', 'DCL', 'SND', 'FND', 'OPT'],
    setZero: function setZero() {
        for (var port in Entry.Neobot.REMOTE_MAP) {
            Entry.hw.sendQueue[Entry.Neobot.REMOTE_MAP[port]] = 0;
        }
        Entry.hw.update();
    },
    monitorTemplate: {
        imgPath: 'hw/neobot.png',
        width: 700,
        height: 700,
        listPorts: {
            IR: { name: '리모컨', type: 'input', pos: { x: 0, y: 0 } },
            BAT: { name: '배터리', type: 'input', pos: { x: 0, y: 0 } },
            SND: { name: Lang.Hw.buzzer, type: 'output', pos: { x: 0, y: 0 } },
            FND: { name: 'FND', type: 'output', pos: { x: 0, y: 0 } }
        },
        ports: {
            IN1: { name: 'IN1', type: 'input', pos: { x: 270, y: 200 } },
            IN2: { name: 'IN2', type: 'input', pos: { x: 325, y: 200 } },
            IN3: { name: 'IN3', type: 'input', pos: { x: 325, y: 500 } },
            DCL: { name: 'L-Motor', type: 'output', pos: { x: 270, y: 500 } },
            DCR: { name: 'R-Motor', type: 'output', pos: { x: 435, y: 500 } },
            OUT1: { name: 'OUT1', type: 'output', pos: { x: 380, y: 200 } },
            OUT2: { name: 'OUT2', type: 'output', pos: { x: 435, y: 200 } },
            OUT3: { name: 'OUT3', type: 'output', pos: { x: 380, y: 500 } }
        },
        mode: 'both'
    }
};

Entry.Neobot.getBlocks = function () {
    return {
        //region neobot 네오봇
        neobot_sensor_value: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            template: '%1  값',
            params: [{
                type: 'Dropdown',
                options: [['1번 포트', 'IN1'], ['2번 포트', 'IN2'], ['3번 포트', 'IN3'], ['4번 포트', 'BAT'], ['리모컨', 'IR'], ['배터리', 'BAT']],
                value: 'IN1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'neobot_sensor_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'neobot_value',
            isNotFor: ['neobot', 'neobot_sensor_theme'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                return Entry.hw.portData[port];
            },
            syntax: { js: [], py: ['Neobot.sensor_value(%1)'] }
        },
        neobot_sensor_convert_scale: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            template: '%1 값의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 변환',
            params: [{
                type: 'Dropdown',
                options: [['1번 포트', 'IN1'], ['2번 포트', 'IN2'], ['3번 포트', 'IN3'], ['4번 포트', 'BAT'], ['리모컨', 'IR'], ['배터리', 'BAT']],
                value: 'IN1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['255']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'neobot_sensor_convert_scale'
            },
            paramsKeyMap: {
                PORT: 0,
                OMIN: 1,
                OMAX: 2,
                MIN: 3,
                MAX: 4
            },
            class: 'neobot_value',
            isNotFor: ['neobot', 'neobot_sensor_theme'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT');
                var value = Entry.hw.portData[port];
                var omin = script.getNumberValue('OMIN', script);
                var omax = script.getNumberValue('OMAX', script);
                var min = script.getNumberValue('MIN', script);
                var max = script.getNumberValue('MAX', script);

                if (omin > omax) {
                    var temp = omin;
                    omin = omax;
                    omax = temp;
                }

                if (min > max) {
                    var temp = min;
                    min = max;
                    max = temp;
                }

                value -= omin;
                value = value * ((max - min) / (omax - omin));
                value += min;
                value = Math.min(max, value);
                value = Math.max(min, value);

                return Math.round(value);
            }
        },
        neobot_sensor_color: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            fontColor: '#fff',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['흰색', 0], ['빨간색', 1], ['노란색', 2], ['녹색(연두)', 3], ['파란색', 4]],
                value: 'WHITE',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'neobot_sensor_color'
            },
            paramsKeyMap: {
                COLOR: 0
            },
            class: 'neobot_value',
            isNotFor: ['neobot', 'neobot_sensor_theme'],
            func: function func(sprite, script) {
                var value = script.getNumberField('COLOR');
                return value;
            },
            syntax: { js: [], py: ['Neobot.sensor_color(%1)'] }
        },
        neobot_equal_with_sensor: {
            //MinjuneL
            color: '#00979D',
            fontColor: '#ffffff',
            skeleton: 'basic_boolean_field',
            template: '%1 의 센서값이 %2',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['1번 포트', 'IN1'], ['2번 포트', 'IN2'], ['3번 포트', 'IN3'], ['4번 포트', 'BAT'], ['리모컨', 'IR'], ['배터리', 'BAT']],
                value: 'IN1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['흰색', 0], ['빨간색', 1], ['노란색', 2], ['녹색(연두)', 3], ['파란색', 4]],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'neobot_equal_with_sensor'
            },
            paramsKeyMap: {
                SENSOR: 0,
                COLOR: 1
            },
            class: 'neobot_value',
            isNotFor: ['neobot', 'neobot_sensor_theme'],
            func: function func(sprite, script) {
                var sensorTemp = script.getStringField('SENSOR');
                var sensor = Entry.hw.portData[sensorTemp];
                var color = script.getNumberField('COLOR');

                if (sensor >= 10 && sensor <= 50) {
                    if (color == 0) return true;else return false;
                } else if (sensor >= 51 && sensor <= 90) {
                    if (color == 1) return true;else return false;
                } else if (sensor >= 91 && sensor <= 130) {
                    if (color == 2) return true;else return false;
                } else if (sensor >= 131 && sensor <= 170) {
                    if (color == 3) return true;else return false;
                } else if (sensor >= 171 && sensor <= 210) {
                    if (color == 4) return true;else return false;
                }
                return false;
            },
            syntax: { js: [], py: ['Entry.neobot_equal_check()'] }
        },
        get_motor_speed: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8'], ['9', '9'], ['10', '10'], ['11', '11'], ['12', '12'], ['13', '13'], ['14', '14'], ['15', '15']],
                value: '15',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                VALUE: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('VALUE');
            },
            syntax: { js: [], py: ['%1get_motor_speed#'] }
        },
        neobot_left_motor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '왼쪽 모터를 %1 %2 의 속도로 회전 %3',
            params: [{
                type: 'Dropdown',
                options: [['앞으로', '16'], ['뒤로', '32']],
                value: '16',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'get_motor_speed',
                    id: 'm111'
                }, null],
                type: 'neobot_left_motor'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                SPEED: 1
            },
            class: 'neobot_motor',
            isNotFor: ['neobot'],
            func: function func(sprite, script) {
                var speed = Entry.parseNumber(script.getStringValue('SPEED'));
                var direction = script.getNumberField('DIRECTION');
                Entry.hw.sendQueue['DCL'] = speed + direction;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Neobot.turn_left(%1, %2)'] }
        },
        neobot_stop_left_motor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '왼쪽 모터를 정지 %1',
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'neobot_stop_left_motor'
            },
            class: 'neobot_motor',
            isNotFor: ['neobot'],
            func: function func(sprite, script) {
                Entry.hw.sendQueue['DCL'] = 0;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Neobot.stop_left()'] }
        },
        neobot_right_motor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '오른쪽 모터를 %1 %2 의 속도로 회전 %3',
            params: [{
                type: 'Dropdown',
                options: [['앞으로', '16'], ['뒤로', '32']],
                value: '16',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'get_motor_speed',
                    id: 'm112'
                }, null],
                type: 'neobot_right_motor'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                SPEED: 1
            },
            class: 'neobot_motor',
            isNotFor: ['neobot'],
            func: function func(sprite, script) {
                var speed = Entry.parseNumber(script.getStringValue('SPEED'));
                var direction = script.getNumberField('DIRECTION');
                Entry.hw.sendQueue['DCR'] = speed + direction;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Neobot.turn_right(%1, %2)'] }
        },
        neobot_stop_right_motor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '오른쪽 모터를 정지 %1',
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'neobot_stop_right_motor'
            },
            class: 'neobot_motor',
            isNotFor: ['neobot'],
            func: function func(sprite, script) {
                Entry.hw.sendQueue['DCR'] = 0;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Neobot.stop_right()'] }
        },
        neobot_all_motor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '양쪽 모터를 %1 %2의 속도로 %3초 동안 회전 %4',
            params: [{
                type: 'Dropdown',
                options: [['앞으로', '1'], ['뒤로', '2'], ['제자리에서 왼쪽 돌기', '3'], ['제자리에서 오른쪽 돌기', '4'], ['왼쪽으로 돌기', '5'], ['오른쪽으로 돌기', '6']],
                value: '1',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: ['1', {
                    type: 'get_motor_speed',
                    id: 'm113'
                }, {
                    type: 'number',
                    params: ['0']
                }],
                type: 'neobot_all_motor'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                SPEED: 1,
                DURATION: 2
            },
            class: 'neobot_motor',
            isNotFor: ['neobot'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;

                if (!script.isStart) {
                    var speed = Entry.parseNumber(script.getStringValue('SPEED'));
                    var direction = script.getNumberField('DIRECTION');
                    var duration = script.getNumberValue('DURATION');

                    if (duration < 0) {
                        duration = 0;
                    }

                    switch (direction) {
                        case 1:
                            Entry.hw.sendQueue['DCL'] = 0x10 + speed;
                            Entry.hw.sendQueue['DCR'] = 0x10 + speed;
                            break;
                        case 2:
                            Entry.hw.sendQueue['DCL'] = 0x20 + speed;
                            Entry.hw.sendQueue['DCR'] = 0x20 + speed;
                            break;
                        case 3:
                            Entry.hw.sendQueue['DCL'] = 0x20 + speed;
                            Entry.hw.sendQueue['DCR'] = 0x10 + speed;
                            break;
                        case 4:
                            Entry.hw.sendQueue['DCL'] = 0x10 + speed;
                            Entry.hw.sendQueue['DCR'] = 0x20 + speed;
                            break;
                        case 5:
                            Entry.hw.sendQueue['DCL'] = 0;
                            Entry.hw.sendQueue['DCR'] = 0x10 + speed;
                            break;
                        case 6:
                            Entry.hw.sendQueue['DCL'] = 0x10 + speed;
                            Entry.hw.sendQueue['DCR'] = 0;
                            break;
                    }

                    if (duration === 0) {
                        return script.callReturn();
                    } else {
                        script.isStart = true;
                        script.timeFlag = 1;
                        setTimeout(function () {
                            script.timeFlag = 0;
                        }, duration * 1000);
                        return script;
                    }
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.hw.sendQueue['DCL'] = 0;
                    Entry.hw.sendQueue['DCR'] = 0;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            }
        },
        neobot_stop_all_motor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '양쪽 모터를 정지 %1',
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'neobot_stop_all_motor'
            },
            class: 'neobot_motor',
            isNotFor: ['neobot'],
            func: function func(sprite, script) {
                Entry.hw.sendQueue['DCL'] = 0;
                Entry.hw.sendQueue['DCR'] = 0;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Neobot.run_motor(%1, %2, %3, %4)'] }
        },
        neobot_set_servo: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '%1 포트의 서보모터를 %2 도 이동 %3',
            params: [{
                type: 'Dropdown',
                options: [['OUT1', 'OUT1'], ['OUT2', 'OUT2'], ['OUT3', 'OUT3']],
                value: 'OUT1',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'neobot_set_servo'
            },
            paramsKeyMap: {
                PORT: 0,
                DEGREE: 1
            },
            class: 'neobot_output',
            isNotFor: ['neobot'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT', script);
                var degree = script.getNumberValue('DEGREE');
                if (degree < 0) {
                    degree = 0;
                } else if (degree > 180) {
                    degree = 180;
                }
                Entry.hw.sendQueue[port] = degree;
                var option = port;
                if (option === 3) {
                    option = 4;
                }
                Entry.hw.sendQueue['OPT'] = Entry.hw.sendQueue['OPT'] | option;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Neobot.servo_1(%1, %2)'] }
        },
        neobot_set_output: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '%1 번 포트의 값을 %2 만큼 출력 %3',
            params: [{
                type: 'Dropdown',
                options: [['OUT1', 'OUT1'], ['OUT2', 'OUT2'], ['OUT3', 'OUT3'], ['OUT4', 'FND']],
                value: 'OUT1',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['255']
                }, null],
                type: 'neobot_set_output'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'neobot_output',
            isNotFor: ['neobot', 'neobot_sensor_theme'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT', script);
                var value = script.getNumberValue('VALUE', script);
                var option = port;
                if (value < 0) {
                    value = 0;
                } else if (value > 255) {
                    value = 255;
                }
                if (option === 3) {
                    option = 4;
                }
                Entry.hw.sendQueue[port] = value;
                Entry.hw.sendQueue['OPT'] = Entry.hw.sendQueue['OPT'] & ~option;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Neobot.servo_2(%1, %2)'] }
        },
        neobot_set_fnd: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: 'FND에 %1 출력 %2',
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'neobot_set_fnd'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'neobot_output',
            isNotFor: ['neobot'],
            func: function func(sprite, script) {
                var value = script.getNumberValue('VALUE', script);
                if (value > 99) {
                    value = 99;
                }
                Entry.hw.sendQueue['FND'] = parseInt('0x' + value);
                Entry.hw.sendQueue['OPT'] = Entry.hw.sendQueue['OPT'] | 8;
                return script.callReturn();
            }
        },
        neobot_set_fnd_off: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: 'FND 출력 끄기 %1',
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'neobot_set_fnd_off'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'neobot_output',
            isNotFor: ['neobot'],
            func: function func(sprite, script) {
                Entry.hw.sendQueue['FND'] = parseInt('0x00');
                Entry.hw.sendQueue['OPT'] = Entry.hw.sendQueue['OPT'] & ~8;
                return script.callReturn();
            }
        },
        neobot_play_note_for: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '멜로디 %1 을(를) %2 옥타브로 %3 길이만큼 소리내기 %4',
            params: [{
                type: 'Dropdown',
                options: [['무음', '0'], ['도', '1'], ['도#', '2'], ['레', '3'], ['레#', '4'], ['미', '5'], ['파', '6'], ['파#', '7'], ['솔', '8'], ['솔#', '9'], ['라', '10'], ['라#', '11'], ['시', '12']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['1', '0'], ['2', '1'], ['3', '2'], ['4', '3'], ['5', '4'], ['6', '5']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['2분음표', '2'], ['4분음표', '4'], ['8분음표', '8'], ['16분음표', '16']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: ['1', '2', '4', null],
                type: 'neobot_play_note_for'
            },
            paramsKeyMap: {
                NOTE: 0,
                OCTAVE: 1,
                DURATION: 2
            },
            class: 'neobot_note',
            isNotFor: ['neobot'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;

                if (!script.isStart) {
                    var note = script.getNumberField('NOTE', script);
                    var octave = script.getNumberField('OCTAVE', script);
                    var duration = script.getNumberField('DURATION', script);
                    var value = note > 0 ? note + 12 * octave : 0;

                    script.isStart = true;
                    script.timeFlag = 1;
                    if (value > 65) {
                        value = 65; //이게 원래 코드 이민준
                    }
                    sq.SND = value;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, 1 / duration * 2000);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.hw.sendQueue['SND'] = 0;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Neobot.play_note(%1, %2, %3)'] }
        },
        neobot_play_note_with_sensor: {
            //MinjuneL
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '컨트롤러에서 %1 센서의 %2 ~ %3 값으로 멜로디 연주하기 %4',
            params: [{
                type: 'Dropdown',
                options: [['1번 포트', 'IN1'], ['2번 포트', 'IN2'], ['3번 포트', 'IN3'], ['리모컨', 'IR'], ['배터리', 'BAT']],
                value: 'IN1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['255']
                }, null],
                type: 'neobot_play_note_with_sensor'
            },
            paramsKeyMap: {
                PORT: 0,
                MIN_VALUE: 1,
                MAX_VALUE: 2,
                VALUE: 3
            },
            class: 'neobot_note',
            isNotFor: ['neobot'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;

                //Value Translate
                var port = script.getStringField('PORT', script);
                var value = Entry.hw.portData[port];
                var omin = script.getNumberValue('MIN_VALUE', script);
                var omax = script.getNumberValue('MAX_VALUE', script);
                var min = 0;
                var max = 72; //밑에가 65면 얘도 65로

                if (omin > omax) {
                    var temp = omin;
                    omin = omax;
                    omax = temp;
                }

                if (min > max) {
                    var temp = min;
                    min = max;
                    max = temp;
                }

                value -= omin;
                value = value * ((max - min) / (omax - omin));
                value += min;
                value = Math.min(max, value);
                value = Math.max(min, value);

                value = Math.round(value);

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    if (value > 72) {
                        value = 72; //72 이민준 새거
                    }
                    sq.SND = value;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, 1 / 4 * 2000);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.hw.sendQueue['SND'] = 0;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: ['Neobot.play_note_with_sensor(%1, %2, %3)']
            }
        },
        neobot_change_color_with_color_picker: {
            //MinjuneL
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '%1 LED의 색깔을 %2(으)로 정하기 %3',
            params: [{
                type: 'Dropdown',
                options: [['OUT1', 'OUT1'], ['OUT2', 'OUT2'], ['OUT3', 'OUT3'], ['OUT4', 'FND']],
                value: 'OUT1',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Color'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'neobot_change_color_with_color_picker'
            },
            paramsKeyMap: {
                PORT: 0,
                COLOR: 1,
                VALUE: 2
            },
            class: 'neobot_output',
            isNotFor: ['neobot', 'neobot_sensor_theme'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT', script);
                var colour = script.getField('COLOR', script);

                Entry.hw.sendQueue[port] = colour;
                return script.callReturn();
            }
        },
        neobot_change_color_with_sensor_value: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '%1 LED의 색깔을 %2 센서 값으로 바꾸기 %3',
            params: [{
                type: 'Dropdown',
                options: [['OUT1', 'OUT1'], ['OUT2', 'OUT2'], ['OUT3', 'OUT3'], ['OUT4', 'FND']],
                value: 'OUT1',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Dropdown',
                options: [['1번 포트', 'IN1'], ['2번 포트', 'IN2'], ['3번 포트', 'IN3'], ['4번 포트', 'BAT'], ['리모컨', 'IR'], ['배터리', 'BAT']],
                value: 'IN1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'neobot_change_color_with_sensor_value'
            },
            paramsKeyMap: {
                PORT_OUT: 0,
                PORT_IN: 1,
                VALUE: 2
            },
            class: 'neobot_output',
            isNotFor: ['neobot', 'neobot_sensor_theme'],
            func: function func(sprite, script) {
                var port = script.getStringField('PORT_IN');
                var inputPortValue = Entry.hw.portData[port];

                var portOut = script.getStringField('PORT_OUT', script);
                Entry.hw.sendQueue[portOut] = inputPortValue;

                return script.callReturn();
            }
        }
        //endregion neobot 네오봇
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_neobot_sensor_theme.js":
/*!************************************************************!*\
  !*** ./src/playground/blocks/block_neobot_sensor_theme.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.NeobotSensorTheme = {
    name: 'neobot_sensor_theme',
    url: 'http://www.neobot.co.kr',
    imageName: 'neobot_sensor_theme.png',
    title: {
        "en": "NEOBOT Senosor Theme",
        "ko": "네오봇 센서 테마"
    },
    LOCAL_MAP: ['IN1', 'IN2', 'IN3', 'IR', 'BAT'],
    REMOTE_MAP: ['OUT1', 'OUT2', 'OUT3', 'DCR', 'DCL', 'SND', 'FND', 'OPT'],
    setZero: function setZero() {
        for (var port in Entry.Neobot.REMOTE_MAP) {
            Entry.hw.sendQueue[Entry.Neobot.REMOTE_MAP[port]] = 0;
        }
        Entry.hw.update();
    },
    monitorTemplate: {
        imgPath: 'hw/neobot_sensor_theme.png',
        width: 800,
        height: 800,
        listPorts: {},
        ports: {
            'IN1': { name: 'PORT1', type: 'input', pos: { x: 145, y: 429 } },
            'IN2': { name: 'PORT2', type: 'input', pos: { x: 314, y: 429 } },
            'IN3': { name: 'PORT3', type: 'input', pos: { x: 484, y: 429 } },
            'BAT': { name: 'PORT4', type: 'input', pos: { x: 653, y: 429 } }
        },
        mode: 'both'
    }
};

/***/ }),

/***/ "./src/playground/blocks/block_playcode.js":
/*!*************************************************!*\
  !*** ./src/playground/blocks/block_playcode.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.playcode = {
    name: 'playcode',
    url: 'http://www.playcode.kr/product',
    imageName: 'playcode.png',
    title: {
        "en": "playcode",
        "ko": "플레이코드"
    },
    setZero: function setZero() {
        if (!Entry.hw.sendQueue.SET) {
            Entry.hw.sendQueue = {
                GET: {},
                SET: {}
            };
        } else {
            var keySet = Object.keys(Entry.hw.sendQueue.SET);
            keySet.forEach(function (key) {
                Entry.hw.sendQueue.SET[key].data = 0;
                Entry.hw.sendQueue.SET[key].time = new Date().getTime();
            });
        }
        Entry.hw.update();
    },
    toByte: function toByte(data) {
        switch (data) {
            case ' ':
                data = 32;
                break;
            case '!':
                data = 33;
                break;
            case '"':
                data = 34;
                break;
            case '#':
                data = 35;
                break;
            case '$':
                data = 36;
                break;
            case '%':
                data = 37;
                break;
            case '&':
                data = 38;
                break;
            case "'":
                data = 39;
                break;
            case '(':
                data = 40;
                break;
            case ')':
                data = 41;
                break;
            case '*':
                data = 42;
                break;
            case '+':
                data = 43;
                break;
            case ',':
                data = 44;
                break;
            case '-':
                data = 45;
                break;
            case '.':
                data = 46;
                break;
            case '/':
                data = 47;
                break;
            case '0':
                data = 48;
                break;
            case '1':
                data = 49;
                break;
            case '2':
                data = 50;
                break;
            case '3':
                data = 51;
                break;
            case '4':
                data = 52;
                break;
            case '5':
                data = 53;
                break;
            case '6':
                data = 54;
                break;
            case '7':
                data = 55;
                break;
            case '8':
                data = 56;
                break;
            case '9':
                data = 57;
                break;
            case ':':
                data = 58;
                break;
            case ';':
                data = 59;
                break;
            case '<':
                data = 60;
                break;
            case '=':
                data = 61;
                break;
            case '>':
                data = 62;
                break;
            case '?':
                data = 63;
                break;
            case '@':
                data = 64;
                break;
            case 'A':
                data = 65;
                break;
            case 'B':
                data = 66;
                break;
            case 'C':
                data = 67;
                break;
            case 'D':
                data = 68;
                break;
            case 'E':
                data = 69;
                break;
            case 'F':
                data = 70;
                break;
            case 'G':
                data = 71;
                break;
            case 'H':
                data = 72;
                break;
            case 'I':
                data = 73;
                break;
            case 'J':
                data = 74;
                break;
            case 'K':
                data = 75;
                break;
            case 'L':
                data = 76;
                break;
            case 'M':
                data = 77;
                break;
            case 'N':
                data = 78;
                break;
            case 'O':
                data = 79;
                break;
            case 'P':
                data = 80;
                break;
            case 'Q':
                data = 81;
                break;
            case 'R':
                data = 82;
                break;
            case 'S':
                data = 83;
                break;
            case 'T':
                data = 84;
                break;
            case 'U':
                data = 85;
                break;
            case 'V':
                data = 86;
                break;
            case 'W':
                data = 87;
                break;
            case 'X':
                data = 88;
                break;
            case 'Y':
                data = 89;
                break;
            case 'Z':
                data = 90;
                break;
            case '[':
                data = 91;
                break;
            case '\\':
                data = 92;
                break;
            case ']':
                data = 93;
                break;
            case '^':
                data = 94;
                break;
            case '_':
                data = 95;
                break;
            case '`':
                data = 96;
                break;
            case 'a':
                data = 97;
                break;
            case 'b':
                data = 98;
                break;
            case 'c':
                data = 99;
                break;
            case 'd':
                data = 100;
                break;
            case 'e':
                data = 101;
                break;
            case 'f':
                data = 102;
                break;
            case 'g':
                data = 103;
                break;
            case 'h':
                data = 104;
                break;
            case 'i':
                data = 105;
                break;
            case 'j':
                data = 106;
                break;
            case 'k':
                data = 107;
                break;
            case 'l':
                data = 108;
                break;
            case 'm':
                data = 109;
                break;
            case 'n':
                data = 110;
                break;
            case 'o':
                data = 111;
                break;
            case 'p':
                data = 112;
                break;
            case 'q':
                data = 113;
                break;
            case 'r':
                data = 114;
                break;
            case 's':
                data = 115;
                break;
            case 't':
                data = 116;
                break;
            case 'u':
                data = 117;
                break;
            case 'v':
                data = 118;
                break;
            case 'w':
                data = 119;
                break;
            case 'x':
                data = 120;
                break;
            case 'y':
                data = 121;
                break;
            case 'z':
                data = 122;
                break;
            case '{':
                data = 123;
                break;
            case '|':
                data = 124;
                break;
            case '}':
                data = 125;
                break;
            case '~':
                data = 126;
                break;
        }

        return data;
    },
    sensorTypes: {
        ALIVE: 0,
        DIGITAL: 1,
        ANALOG: 2,
        PWM: 3,
        SERVO_PIN: 4,
        TONE: 5,
        PULSEIN: 6,
        ULTRASONIC: 7,
        TIMER: 8,
        LIGHT: 9,
        MICROPHONE: 10
    },
    toneTable: {
        '0': 0,
        C: 1,
        CS: 2,
        D: 3,
        DS: 4,
        E: 5,
        F: 6,
        FS: 7,
        G: 8,
        GS: 9,
        A: 10,
        AS: 11,
        B: 12
    },
    toneMap: {
        '1': [33, 65, 131, 262, 523, 1046, 2093, 4186],
        '2': [35, 69, 139, 277, 554, 1109, 2217, 4435],
        '3': [37, 73, 147, 294, 587, 1175, 2349, 4699],
        '4': [39, 78, 156, 311, 622, 1245, 2849, 4978],
        '5': [41, 82, 165, 330, 659, 1319, 2637, 5274],
        '6': [44, 87, 175, 349, 698, 1397, 2794, 5588],
        '7': [46, 92, 185, 370, 740, 1480, 2960, 5920],
        '8': [49, 98, 196, 392, 784, 1568, 3136, 6272],
        '9': [52, 104, 208, 415, 831, 1661, 3322, 6645],
        '10': [55, 110, 220, 440, 880, 1760, 3520, 7040],
        '11': [58, 117, 233, 466, 932, 1865, 3729, 7459],
        '12': [62, 123, 247, 494, 988, 1976, 3951, 7902]
    },
    directionTable: {
        Forward: 0,
        Backward: 1
    },
    highList: ['high', '1', 'on'],
    lowList: ['low', '0', 'off'],
    BlockState: {}
};

Entry.playcode.getBlocks = function () {
    return {
        //region playcode
        playcode_port_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getField('PORT');
            }
        },
        playcode_first_port_list: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getField('PORT');
            }
        },
        playcode_get_light_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '빛센서 : %1 포트 값',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'playcode_first_port_list'
                }],
                type: 'playcode_get_light_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'playcode_get',
            isNotFor: ['playcode'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.LIGHT;

                if (port[0] === 'A') port = port.substring(1);

                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }

                Entry.hw.sendQueue['GET'][Entry.playcode.sensorTypes.LIGHT] = {
                    port: [port],
                    data: 1,
                    time: new Date().getTime()
                };

                return ANALOG;
            },
            syntax: { js: [], py: ['playcode.get_analog_value(%1)'] }
        },
        playcode_get_mic_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            template: '마이크센서 : %1 포트 값',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'playcode_first_port_list'
                }],
                type: 'playcode_get_mic_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'playcode_get',
            isNotFor: ['playcode'],
            func: function func(sprite, script) {
                var port = script.getValue('PORT', script);
                var ANALOG = Entry.hw.portData.MIC;

                if (port[0] === 'A') port = port.substring(1);

                if (!Entry.hw.sendQueue['GET']) {
                    Entry.hw.sendQueue['GET'] = {};
                }

                Entry.hw.sendQueue['GET'][Entry.playcode.sensorTypes.MICROPHONE] = {
                    port: [port],
                    data: 1,
                    time: new Date().getTime()
                };

                return ANALOG;
            },
            syntax: { js: [], py: ['playcode.get_analog_value(%1)'] }
        },
        playcode_gpio: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic',
            template: 'GPIO : %1포트에 %2 보내기 %3',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ARDUINO_on, 'on'], [Lang.Blocks.ARDUINO_off, 'off']],
                value: 'on',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'playcode_port_list'
                }, null, null],
                type: 'playcode_gpio'
            },
            paramsKeyMap: {
                PORT: 0,
                OPERATOR: 1
            },
            class: 'playcode_set',
            isNotFor: ['playcode'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var operator = script.getField('OPERATOR');
                var value = operator == 'on' ? 1 : 0;

                var sq = Entry.hw.sendQueue;

                if (!sq['SET']) {
                    sq['SET'] = {};
                }
                sq['SET'][port] = {
                    type: Entry.playcode.sensorTypes.DIGITAL,
                    data: value,
                    time: new Date().getTime()
                };

                Entry.hw.setDigitalPortValue(port, value);
                return script.callReturn();
            },
            syntax: { js: [], py: ['playcode.playcode_gpio(%1)'] }
        },
        playcode_servo: {
            color: '#00979D',
            skeleton: 'basic',
            template: 'Servo : %1포트에 %2 보내기 %3',
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'playcode_first_port_list',
                    params: [1]
                }, {
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'playcode_servo'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'playcode_set',
            isNotFor: ['playcode'],

            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getNumberValue('VALUE');

                value = Math.round(value);
                value = Math.min(value, 180);
                value = Math.max(value, 0);

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }

                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.playcode.sensorTypes.SERVO_PIN,
                    data: value,
                    time: new Date().getTime()
                };

                return script.callReturn();
            }
        },
        playcode_speed: {
            color: '#00979D',
            skeleton: 'basic',
            template: 'Speed : %1포트에 %2 보내기 %3',
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'playcode_first_port_list',
                    params: [1]
                }, {
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'playcode_speed'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'playcode_set',
            isNotFor: ['playcode'],
            func: function func(sprite, script) {
                var port = script.getNumberValue('PORT');
                var value = script.getNumberValue('VALUE');

                value = Math.round(value);
                value = Math.min(value, 255);
                value = Math.max(value, 0);

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }

                Entry.hw.sendQueue['SET'][port] = {
                    type: Entry.playcode.sensorTypes.PWM,
                    data: value,
                    time: new Date().getTime()
                };

                return script.callReturn();
            }
        }
        //endregion playcode
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_roboid.js":
/*!***********************************************!*\
  !*** ./src/playground/blocks/block_roboid.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Roboid = {
    TURTLE_SENSOR: {
        floor: 0,
        accelerationX: 0,
        accelerationY: 0,
        accelerationZ: 0,
        button: 0,
        colorNumber: -1,
        colorPattern: -1
    },
    robots: {},
    setZero: function setZero() {
        var robots = Entry.Roboid.robots;
        for (var i in robots) {
            robots[i].setZero();
        }
        Entry.hw.update();
        Entry.Roboid.removeAllTimeouts();
    },
    createHamster: function createHamster(index) {
        var hamster = {
            packet: {
                module: 'hamster',
                index: index
            },
            lineTracerModeId: 0,
            lineTracerStateId: -1,
            tempo: 60,
            boardCommand: 0,
            setZero: function setZero() {
                var portMap = Entry.Hamster.PORT_MAP;
                var packet = this.packet;
                for (var p in portMap) {
                    packet[p] = portMap[p];
                }
                this.lineTracerModeId = 0;
                this.lineTracerStateId = -1;
                this.tempo = 60;
                this.boardCommand = 0;
            },
            setLineTracerMode: function setLineTracerMode(mode) {
                this.lineTracerModeId = this.lineTracerModeId % 255 + 1;
                this.packet.lineTracerMode = mode;
                this.packet.lineTracerModeId = this.lineTracerModeId;
            }
        };
        return hamster;
    },
    createTurtle: function createTurtle(index) {
        var turtle = {
            packet: {
                module: 'turtle',
                index: index
            },
            pulseId: 0,
            soundId: 0,
            lineTracerModeId: 0,
            motionId: 0,
            clickedId: -1,
            doubleClickedId: -1,
            longPressedId: -1,
            colorPatternId: -1,
            wheelStateId: -1,
            soundStateId: -1,
            lineTracerStateId: -1,
            tempo: 60,
            setZero: function setZero() {
                var portMap = Entry.Turtle.PORT_MAP;
                var packet = this.packet;
                for (var p in portMap) {
                    packet[p] = portMap[p];
                }
                this.pulseId = 0;
                this.soundId = 0;
                this.lineTracerModeId = 0;
                this.motionId = 0;
                this.clickedId = -1;
                this.doubleClickedId = -1;
                this.longPressedId = -1;
                this.colorPatternId = -1;
                this.wheelStateId = -1;
                this.soundStateId = -1;
                this.lineTracerStateId = -1;
                this.tempo = 60;
            },
            setPulse: function setPulse(pulse) {
                this.pulseId = this.pulseId % 255 + 1;
                var packet = this.packet;
                packet.pulse = pulse;
                packet.pulseId = this.pulseId;
            },
            setSound: function setSound(sound, count) {
                if (typeof count != 'number') count = 1;
                if (count < 0) count = -1;
                if (count) {
                    this.soundId = this.soundId % 255 + 1;
                    var packet = this.packet;
                    packet.sound = sound;
                    packet.soundRepeat = count;
                    packet.soundId = this.soundId;
                }
            },
            setLineTracerMode: function setLineTracerMode(mode) {
                this.lineTracerModeId = this.lineTracerModeId % 255 + 1;
                var packet = this.packet;
                packet.lineTracerMode = mode;
                packet.lineTracerModeId = this.lineTracerModeId;
            },
            setMotion: function setMotion(type, unit, speed, value, radius) {
                this.motionId = this.motionId % 255 + 1;
                var packet = this.packet;
                packet.motionType = type;
                packet.motionUnit = unit;
                packet.motionSpeed = speed;
                packet.motionValue = value;
                packet.motionRadius = radius;
                packet.motionId = this.motionId;
            },
            setLedColor: function setLedColor(color) {
                var packet = this.packet;
                if (color == 'RED') {
                    packet.ledRed = 255;
                    packet.ledGreen = 0;
                    packet.ledBlue = 0;
                } else if (color == 'ORANGE') {
                    packet.ledRed = 255;
                    packet.ledGreen = 63;
                    packet.ledBlue = 0;
                } else if (color == 'YELLOW') {
                    packet.ledRed = 255;
                    packet.ledGreen = 255;
                    packet.ledBlue = 0;
                } else if (color == 'GREEN') {
                    packet.ledRed = 0;
                    packet.ledGreen = 255;
                    packet.ledBlue = 0;
                } else if (color == 'CYAN') {
                    packet.ledRed = 0;
                    packet.ledGreen = 255;
                    packet.ledBlue = 255;
                } else if (color == 'BLUE') {
                    packet.ledRed = 0;
                    packet.ledGreen = 0;
                    packet.ledBlue = 255;
                } else if (color == 'VIOLET') {
                    packet.ledRed = 63;
                    packet.ledGreen = 0;
                    packet.ledBlue = 255;
                } else if (color == 'MAGENTA') {
                    packet.ledRed = 255;
                    packet.ledGreen = 0;
                    packet.ledBlue = 255;
                } else if (color == 'WHITE') {
                    packet.ledRed = 255;
                    packet.ledGreen = 255;
                    packet.ledBlue = 255;
                }
            }
        };
        return turtle;
    },
    getHamster: function getHamster(index) {
        var key = 'hamster' + index;
        var robot = this.robots[key];
        if (!robot) {
            robot = this.createHamster(index);
            this.robots[key] = robot;
            Entry.hw.sendQueue[key] = robot.packet;
        }
        return robot;
    },
    getTurtle: function getTurtle(index) {
        var key = 'turtle' + index;
        var robot = this.robots[key];
        if (!robot) {
            robot = this.createTurtle(index);
            this.robots[key] = robot;
            Entry.hw.sendQueue[key] = robot.packet;
        }
        return robot;
    },
    timeouts: [],
    removeTimeout: function removeTimeout(id) {
        clearTimeout(id);
        var timeouts = this.timeouts;
        var index = timeouts.indexOf(id);
        if (index >= 0) {
            timeouts.splice(index, 1);
        }
    },
    removeAllTimeouts: function removeAllTimeouts() {
        var timeouts = this.timeouts;
        for (var i in timeouts) {
            clearTimeout(timeouts[i]);
        }
        this.timeouts = [];
    },
    name: 'roboid',
    url: 'http://robomation.net/',
    imageName: 'block_roboid.png',
    title: {
        "en": "Roboid",
        "ko": "로보이드"
    },
    monitorTemplate: {
        imgPath: 'hw/transparent.png',
        width: 2,
        height: 2,
        listPorts: {
            hamster0leftProximity: {
                name: Lang.Menus.hamster + ' 0: ' + Lang.Blocks.HAMSTER_sensor_left_proximity,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster0rightProximity: {
                name: Lang.Menus.hamster + ' 0: ' + Lang.Blocks.HAMSTER_sensor_right_proximity,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster0leftFloor: {
                name: Lang.Menus.hamster + ' 0: ' + Lang.Blocks.HAMSTER_sensor_left_floor,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster0rightFloor: {
                name: Lang.Menus.hamster + ' 0: ' + Lang.Blocks.HAMSTER_sensor_right_floor,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster0accelerationX: {
                name: Lang.Menus.hamster + ' 0: ' + Lang.Blocks.HAMSTER_sensor_acceleration_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster0accelerationY: {
                name: Lang.Menus.hamster + ' 0: ' + Lang.Blocks.HAMSTER_sensor_acceleration_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster0accelerationZ: {
                name: Lang.Menus.hamster + ' 0: ' + Lang.Blocks.HAMSTER_sensor_acceleration_z,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster0light: {
                name: Lang.Menus.hamster + ' 0: ' + Lang.Blocks.HAMSTER_sensor_light,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster0temperature: {
                name: Lang.Menus.hamster + ' 0: ' + Lang.Blocks.HAMSTER_sensor_temperature,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster0inputA: {
                name: Lang.Menus.hamster + ' 0: ' + Lang.Blocks.HAMSTER_sensor_input_a,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster0inputB: {
                name: Lang.Menus.hamster + ' 0: ' + Lang.Blocks.HAMSTER_sensor_input_b,
                type: 'input',
                pos: { x: 0, y: 0 }
            },

            turtle0colorNumber: {
                name: Lang.Menus.turtle + ' 0: ' + Lang.Blocks.ROBOID_color_number,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            turtle0floor: {
                name: Lang.Menus.turtle + ' 0: ' + Lang.Blocks.ROBOID_floor,
                type: 'input',
                pos: { x: 193, y: 342 }
            },
            turtle0button: {
                name: Lang.Menus.turtle + ' 0: ' + Lang.Blocks.ROBOID_button,
                type: 'input',
                pos: { x: 290, y: 30 }
            },
            turtle0accelerationX: {
                name: Lang.Menus.turtle + ' 0: ' + Lang.Blocks.ROBOID_acceleration_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            turtle0accelerationY: {
                name: Lang.Menus.turtle + ' 0: ' + Lang.Blocks.ROBOID_acceleration_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            turtle0accelerationZ: {
                name: Lang.Menus.turtle + ' 0: ' + Lang.Blocks.ROBOID_acceleration_z,
                type: 'input',
                pos: { x: 0, y: 0 }
            },

            hamster1leftProximity: {
                name: Lang.Menus.hamster + ' 1: ' + Lang.Blocks.HAMSTER_sensor_left_proximity,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster1rightProximity: {
                name: Lang.Menus.hamster + ' 1: ' + Lang.Blocks.HAMSTER_sensor_right_proximity,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster1leftFloor: {
                name: Lang.Menus.hamster + ' 1: ' + Lang.Blocks.HAMSTER_sensor_left_floor,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster1rightFloor: {
                name: Lang.Menus.hamster + ' 1: ' + Lang.Blocks.HAMSTER_sensor_right_floor,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster1accelerationX: {
                name: Lang.Menus.hamster + ' 1: ' + Lang.Blocks.HAMSTER_sensor_acceleration_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster1accelerationY: {
                name: Lang.Menus.hamster + ' 1: ' + Lang.Blocks.HAMSTER_sensor_acceleration_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster1accelerationZ: {
                name: Lang.Menus.hamster + ' 1: ' + Lang.Blocks.HAMSTER_sensor_acceleration_z,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster1light: {
                name: Lang.Menus.hamster + ' 1: ' + Lang.Blocks.HAMSTER_sensor_light,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster1temperature: {
                name: Lang.Menus.hamster + ' 1: ' + Lang.Blocks.HAMSTER_sensor_temperature,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster1inputA: {
                name: Lang.Menus.hamster + ' 1: ' + Lang.Blocks.HAMSTER_sensor_input_a,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster1inputB: {
                name: Lang.Menus.hamster + ' 1: ' + Lang.Blocks.HAMSTER_sensor_input_b,
                type: 'input',
                pos: { x: 0, y: 0 }
            },

            turtle1colorNumber: {
                name: Lang.Menus.turtle + ' 1: ' + Lang.Blocks.ROBOID_color_number,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            turtle1floor: {
                name: Lang.Menus.turtle + ' 1: ' + Lang.Blocks.ROBOID_floor,
                type: 'input',
                pos: { x: 193, y: 342 }
            },
            turtle1button: {
                name: Lang.Menus.turtle + ' 1: ' + Lang.Blocks.ROBOID_button,
                type: 'input',
                pos: { x: 290, y: 30 }
            },
            turtle1accelerationX: {
                name: Lang.Menus.turtle + ' 1: ' + Lang.Blocks.ROBOID_acceleration_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            turtle1accelerationY: {
                name: Lang.Menus.turtle + ' 1: ' + Lang.Blocks.ROBOID_acceleration_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            turtle1accelerationZ: {
                name: Lang.Menus.turtle + ' 1: ' + Lang.Blocks.ROBOID_acceleration_z,
                type: 'input',
                pos: { x: 0, y: 0 }
            },

            hamster2leftProximity: {
                name: Lang.Menus.hamster + ' 2: ' + Lang.Blocks.HAMSTER_sensor_left_proximity,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster2rightProximity: {
                name: Lang.Menus.hamster + ' 2: ' + Lang.Blocks.HAMSTER_sensor_right_proximity,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster2leftFloor: {
                name: Lang.Menus.hamster + ' 2: ' + Lang.Blocks.HAMSTER_sensor_left_floor,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster2rightFloor: {
                name: Lang.Menus.hamster + ' 2: ' + Lang.Blocks.HAMSTER_sensor_right_floor,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster2accelerationX: {
                name: Lang.Menus.hamster + ' 2: ' + Lang.Blocks.HAMSTER_sensor_acceleration_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster2accelerationY: {
                name: Lang.Menus.hamster + ' 2: ' + Lang.Blocks.HAMSTER_sensor_acceleration_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster2accelerationZ: {
                name: Lang.Menus.hamster + ' 2: ' + Lang.Blocks.HAMSTER_sensor_acceleration_z,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster2light: {
                name: Lang.Menus.hamster + ' 2: ' + Lang.Blocks.HAMSTER_sensor_light,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster2temperature: {
                name: Lang.Menus.hamster + ' 2: ' + Lang.Blocks.HAMSTER_sensor_temperature,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster2inputA: {
                name: Lang.Menus.hamster + ' 2: ' + Lang.Blocks.HAMSTER_sensor_input_a,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            hamster2inputB: {
                name: Lang.Menus.hamster + ' 2: ' + Lang.Blocks.HAMSTER_sensor_input_b,
                type: 'input',
                pos: { x: 0, y: 0 }
            },

            turtle2colorNumber: {
                name: Lang.Menus.turtle + ' 2: ' + Lang.Blocks.ROBOID_color_number,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            turtle2floor: {
                name: Lang.Menus.turtle + ' 2: ' + Lang.Blocks.ROBOID_floor,
                type: 'input',
                pos: { x: 193, y: 342 }
            },
            turtle2button: {
                name: Lang.Menus.turtle + ' 2: ' + Lang.Blocks.ROBOID_button,
                type: 'input',
                pos: { x: 290, y: 30 }
            },
            turtle2accelerationX: {
                name: Lang.Menus.turtle + ' 2: ' + Lang.Blocks.ROBOID_acceleration_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            turtle2accelerationY: {
                name: Lang.Menus.turtle + ' 2: ' + Lang.Blocks.ROBOID_acceleration_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            turtle2accelerationZ: {
                name: Lang.Menus.turtle + ' 2: ' + Lang.Blocks.ROBOID_acceleration_z,
                type: 'input',
                pos: { x: 0, y: 0 }
            }
        },
        mode: 'both'
    }
};

Entry.Roboid.getBlocks = function () {
    return {
        //region roboid 로보이드
        roboid_hamster_hand_found: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }],
                type: 'roboid_hamster_hand_found'
            },
            paramsKeyMap: {
                INDEX: 0
            },
            class: 'hamster_sensor',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var key = 'hamster' + index;
                var leftProximity = pd[key + 'leftProximity'];
                var rightProximity = pd[key + 'rightProximity'];
                if (!leftProximity) leftProximity = 0;
                if (!rightProximity) rightProximity = 0;
                return leftProximity > 50 || rightProximity > 50;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_hand_found(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }],
                    blockType: 'param'
                }]
            }
        },
        roboid_hamster_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                value: 'leftProximity',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'roboid_hamster_value'
            },
            paramsKeyMap: {
                INDEX: 0,
                DEVICE: 1
            },
            class: 'hamster_sensor',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var dev = script.getField('DEVICE');
                var value = pd['hamster' + index + dev];
                if (typeof value !== 'number') value = 0;
                return value;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_left_proximity(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'leftProximity']
                }, {
                    syntax: 'Roboid.hamster_right_proximity(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'rightProximity']
                }, {
                    syntax: 'Roboid.hamster_left_floor(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'leftFloor']
                }, {
                    syntax: 'Roboid.hamster_right_floor(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'rightFloor']
                }, {
                    syntax: 'Roboid.hamster_acceleration_x(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'accelerationX']
                }, {
                    syntax: 'Roboid.hamster_acceleration_y(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'accelerationY']
                }, {
                    syntax: 'Roboid.hamster_acceleration_z(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'accelerationZ']
                }, {
                    syntax: 'Roboid.hamster_light(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'light']
                }, {
                    syntax: 'Roboid.hamster_temperature(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'temperature']
                }, {
                    syntax: 'Roboid.hamster_signal_strength(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'signalStrength']
                }, {
                    syntax: 'Roboid.hamster_input_a(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'inputA']
                }, {
                    syntax: 'Roboid.hamster_input_b(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, 'leftProximity'], [Lang.Blocks.HAMSTER_sensor_right_proximity, 'rightProximity'], [Lang.Blocks.HAMSTER_sensor_left_floor, 'leftFloor'], [Lang.Blocks.HAMSTER_sensor_right_floor, 'rightFloor'], [Lang.Blocks.HAMSTER_sensor_acceleration_x, 'accelerationX'], [Lang.Blocks.HAMSTER_sensor_acceleration_y, 'accelerationY'], [Lang.Blocks.HAMSTER_sensor_acceleration_z, 'accelerationZ'], [Lang.Blocks.HAMSTER_sensor_light, 'light'], [Lang.Blocks.HAMSTER_sensor_temperature, 'temperature'], [Lang.Blocks.HAMSTER_sensor_signal_strength, 'signalStrength'], [Lang.Blocks.HAMSTER_sensor_input_a, 'inputA'], [Lang.Blocks.HAMSTER_sensor_input_b, 'inputB']],
                        value: 'leftProximity',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'inputB']
                }]
            }
        },
        roboid_hamster_move_forward_once: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'roboid_hamster_move_forward_once'
            },
            paramsKeyMap: {
                INDEX: 0
            },
            class: 'hamster_board',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    script.isMoving = true;
                    script.count = 0;
                    script.boardState = 1;
                    packet.motion = 0;
                    packet.leftWheel = 45;
                    packet.rightWheel = 45;
                    robot.boardCommand = 1;
                    robot.setLineTracerMode(0);
                    return script;
                } else if (script.isMoving) {
                    if (robot.boardCommand != 1) return script;
                    var leftFloor = pd['hamster' + index + 'leftFloor'];
                    var rightFloor = pd['hamster' + index + 'rightFloor'];
                    switch (script.boardState) {
                        case 1:
                            {
                                if (script.count < 2) {
                                    if (leftFloor < 50 && rightFloor < 50) script.count++;else script.count = 0;
                                    var diff = leftFloor - rightFloor;
                                    packet.leftWheel = 45 + diff * 0.25;
                                    packet.rightWheel = 45 - diff * 0.25;
                                } else {
                                    script.count = 0;
                                    script.boardState = 2;
                                }
                                break;
                            }
                        case 2:
                            {
                                var diff = leftFloor - rightFloor;
                                packet.leftWheel = 45 + diff * 0.25;
                                packet.rightWheel = 45 - diff * 0.25;
                                script.boardState = 3;
                                var timer = setTimeout(function () {
                                    script.boardState = 4;
                                    Entry.Roboid.removeTimeout(timer);
                                }, 250);
                                Entry.Roboid.timeouts.push(timer);
                                break;
                            }
                        case 3:
                            {
                                var diff = leftFloor - rightFloor;
                                packet.leftWheel = 45 + diff * 0.25;
                                packet.rightWheel = 45 - diff * 0.25;
                                break;
                            }
                        case 4:
                            {
                                packet.leftWheel = 0;
                                packet.rightWheel = 0;
                                script.boardState = 0;
                                script.isMoving = false;
                                break;
                            }
                    }
                    return script;
                } else {
                    delete script.isStart;
                    delete script.isMoving;
                    delete script.count;
                    delete script.boardState;
                    Entry.engine.isContinue = false;
                    robot.boardCommand = 0;
                    packet.leftWheel = 0;
                    packet.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_board_forward(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_hamster_turn_once: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_turn_once_left, 'LEFT'], [Lang.Blocks.HAMSTER_turn_right, 'RIGHT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, null],
                type: 'roboid_hamster_turn_once'
            },
            paramsKeyMap: {
                INDEX: 0,
                DIRECTION: 1
            },
            class: 'hamster_board',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    script.isMoving = true;
                    script.count = 0;
                    script.boardState = 1;
                    packet.motion = 0;
                    var direction = script.getField('DIRECTION', script);
                    if (direction == 'LEFT') {
                        script.isLeft = true;
                        packet.leftWheel = -45;
                        packet.rightWheel = 45;
                    } else {
                        script.isLeft = false;
                        packet.leftWheel = 45;
                        packet.rightWheel = -45;
                    }
                    robot.boardCommand = 2;
                    robot.setLineTracerMode(0);
                    return script;
                } else if (script.isMoving) {
                    if (robot.boardCommand != 2) return script;
                    var leftFloor = pd['hamster' + index + 'leftFloor'];
                    var rightFloor = pd['hamster' + index + 'rightFloor'];
                    if (script.isLeft) {
                        switch (script.boardState) {
                            case 1:
                                {
                                    if (script.count < 2) {
                                        if (leftFloor > 50) script.count++;
                                    } else {
                                        script.count = 0;
                                        script.boardState = 2;
                                    }
                                    break;
                                }
                            case 2:
                                {
                                    if (leftFloor < 20) {
                                        script.boardState = 3;
                                    }
                                    break;
                                }
                            case 3:
                                {
                                    if (script.count < 2) {
                                        if (leftFloor < 20) script.count++;
                                    } else {
                                        script.count = 0;
                                        script.boardState = 4;
                                    }
                                    break;
                                }
                            case 4:
                                {
                                    if (leftFloor > 50) {
                                        script.boardState = 5;
                                    }
                                    break;
                                }
                            case 5:
                                {
                                    var diff = leftFloor - rightFloor;
                                    if (diff > -15) {
                                        packet.leftWheel = 0;
                                        packet.rightWheel = 0;
                                        script.boardState = 0;
                                        script.isMoving = false;
                                    } else {
                                        packet.leftWheel = diff * 0.5;
                                        packet.rightWheel = -diff * 0.5;
                                    }
                                    break;
                                }
                        }
                    } else {
                        switch (script.boardState) {
                            case 1:
                                {
                                    if (script.count < 2) {
                                        if (rightFloor > 50) script.count++;
                                    } else {
                                        script.count = 0;
                                        script.boardState = 2;
                                    }
                                    break;
                                }
                            case 2:
                                {
                                    if (rightFloor < 20) {
                                        script.boardState = 3;
                                    }
                                    break;
                                }
                            case 3:
                                {
                                    if (script.count < 2) {
                                        if (rightFloor < 20) script.count++;
                                    } else {
                                        script.count = 0;
                                        script.boardState = 4;
                                    }
                                    break;
                                }
                            case 4:
                                {
                                    if (rightFloor > 50) {
                                        script.boardState = 5;
                                    }
                                    break;
                                }
                            case 5:
                                {
                                    var diff = rightFloor - leftFloor;
                                    if (diff > -15) {
                                        packet.leftWheel = 0;
                                        packet.rightWheel = 0;
                                        script.boardState = 0;
                                        script.isMoving = false;
                                    } else {
                                        packet.leftWheel = -diff * 0.5;
                                        packet.rightWheel = diff * 0.5;
                                    }
                                    break;
                                }
                        }
                    }
                    return script;
                } else {
                    delete script.isStart;
                    delete script.isMoving;
                    delete script.count;
                    delete script.boardState;
                    delete script.isLeft;
                    Entry.engine.isContinue = false;
                    robot.boardCommand = 0;
                    packet.leftWheel = 0;
                    packet.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_board_left(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_turn_once_left, 'LEFT'], [Lang.Blocks.HAMSTER_turn_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'LEFT']
                }, {
                    syntax: 'Roboid.hamster_board_right(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_turn_once_left, 'LEFT'], [Lang.Blocks.HAMSTER_turn_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'RIGHT']
                }]
            }
        },
        roboid_hamster_move_forward_for_secs: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'roboid_hamster_move_forward_for_secs'
            },
            paramsKeyMap: {
                INDEX: 0,
                VALUE: 1
            },
            class: 'hamster_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    packet.motion = 1;
                    packet.leftWheel = 30;
                    packet.rightWheel = 30;
                    robot.boardCommand = 0;
                    robot.setLineTracerMode(0);
                    var timeValue = script.getNumberValue('VALUE') * 1000;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Roboid.removeTimeout(timer);
                    }, timeValue);
                    Entry.Roboid.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    packet.motion = 0;
                    packet.leftWheel = 0;
                    packet.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_move_forward(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_hamster_move_backward_for_secs: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'roboid_hamster_move_backward_for_secs'
            },
            paramsKeyMap: {
                INDEX: 0,
                VALUE: 1
            },
            class: 'hamster_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    packet.motion = 2;
                    packet.leftWheel = -30;
                    packet.rightWheel = -30;
                    robot.boardCommand = 0;
                    robot.setLineTracerMode(0);
                    var timeValue = script.getNumberValue('VALUE') * 1000;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Roboid.removeTimeout(timer);
                    }, timeValue);
                    Entry.Roboid.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    packet.motion = 0;
                    packet.leftWheel = 0;
                    packet.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_move_backward(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_hamster_turn_for_secs: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_turn_once_left, 'LEFT'], [Lang.Blocks.HAMSTER_turn_right, 'RIGHT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'roboid_hamster_turn_for_secs'
            },
            paramsKeyMap: {
                INDEX: 0,
                DIRECTION: 1,
                VALUE: 2
            },
            class: 'hamster_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    var direction = script.getField('DIRECTION', script);
                    if (direction == 'LEFT') {
                        packet.motion = 3;
                        packet.leftWheel = -30;
                        packet.rightWheel = 30;
                    } else {
                        packet.motion = 4;
                        packet.leftWheel = 30;
                        packet.rightWheel = -30;
                    }
                    robot.boardCommand = 0;
                    robot.setLineTracerMode(0);
                    var timeValue = script.getNumberValue('VALUE') * 1000;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Roboid.removeTimeout(timer);
                    }, timeValue);
                    Entry.Roboid.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    packet.motion = 0;
                    packet.leftWheel = 0;
                    packet.rightWheel = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_turn_left(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_turn_once_left, 'LEFT'], [Lang.Blocks.HAMSTER_turn_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'LEFT']
                }, {
                    syntax: 'Roboid.hamster_turn_right(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_turn_once_left, 'LEFT'], [Lang.Blocks.HAMSTER_turn_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'RIGHT']
                }]
            }
        },
        roboid_hamster_change_both_wheels_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['10']
                }, {
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'roboid_hamster_change_both_wheels_by'
            },
            paramsKeyMap: {
                INDEX: 0,
                LEFT: 1,
                RIGHT: 2
            },
            class: 'hamster_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                var left = script.getNumberValue('LEFT');
                var right = script.getNumberValue('RIGHT');
                packet.motion = 0;
                packet.leftWheel = packet.leftWheel != undefined ? packet.leftWheel + left : left;
                packet.rightWheel = packet.rightWheel != undefined ? packet.rightWheel + right : right;
                robot.boardCommand = 0;
                robot.setLineTracerMode(0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_wheels_by(%1, %2, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_hamster_set_both_wheels_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['30']
                }, {
                    type: 'text',
                    params: ['30']
                }, null],
                type: 'roboid_hamster_set_both_wheels_to'
            },
            paramsKeyMap: {
                INDEX: 0,
                LEFT: 1,
                RIGHT: 2
            },
            class: 'hamster_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                packet.motion = 0;
                packet.leftWheel = script.getNumberValue('LEFT');
                packet.rightWheel = script.getNumberValue('RIGHT');
                robot.boardCommand = 0;
                robot.setLineTracerMode(0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_wheels(%1, %2, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_hamster_change_wheel_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, {
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'roboid_hamster_change_wheel_by'
            },
            paramsKeyMap: {
                INDEX: 0,
                DIRECTION: 1,
                VALUE: 2
            },
            class: 'hamster_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                var direction = script.getField('DIRECTION');
                var value = script.getNumberValue('VALUE');
                packet.motion = 0;
                if (direction == 'LEFT') {
                    packet.leftWheel = packet.leftWheel != undefined ? packet.leftWheel + value : value;
                } else if (direction == 'RIGHT') {
                    packet.rightWheel = packet.rightWheel != undefined ? packet.rightWheel + value : value;
                } else {
                    packet.leftWheel = packet.leftWheel != undefined ? packet.leftWheel + value : value;
                    packet.rightWheel = packet.rightWheel != undefined ? packet.rightWheel + value : value;
                }
                robot.boardCommand = 0;
                robot.setLineTracerMode(0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_left_wheel_by(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'LEFT']
                }, {
                    syntax: 'Roboid.hamster_right_wheel_by(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'RIGHT']
                }, {
                    syntax: 'Roboid.hamster_both_wheels_by(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'BOTH']
                }]
            }
        },
        roboid_hamster_set_wheel_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, {
                    type: 'text',
                    params: ['30']
                }, null],
                type: 'roboid_hamster_set_wheel_to'
            },
            paramsKeyMap: {
                INDEX: 0,
                DIRECTION: 1,
                VALUE: 2
            },
            class: 'hamster_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                var direction = script.getField('DIRECTION');
                var value = script.getNumberValue('VALUE');
                packet.motion = 0;
                if (direction == 'LEFT') {
                    packet.leftWheel = value;
                } else if (direction == 'RIGHT') {
                    packet.rightWheel = value;
                } else {
                    packet.leftWheel = value;
                    packet.rightWheel = value;
                }
                robot.boardCommand = 0;
                robot.setLineTracerMode(0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_left_wheel(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'LEFT']
                }, {
                    syntax: 'Roboid.hamster_right_wheel(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'RIGHT']
                }, {
                    syntax: 'Roboid.hamster_both_wheels(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_wheel, 'LEFT'], [Lang.Blocks.HAMSTER_right_wheel, 'RIGHT'], [Lang.Blocks.HAMSTER_both_wheels, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'BOTH']
                }]
            }
        },
        roboid_hamster_follow_line_using: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                value: 'BLACK',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_both_floor_sensors, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, null, null],
                type: 'roboid_hamster_follow_line_using'
            },
            paramsKeyMap: {
                INDEX: 0,
                COLOR: 1,
                DIRECTION: 2
            },
            class: 'hamster_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                var color = script.getField('COLOR');
                var direction = script.getField('DIRECTION');

                var mode = 1;
                if (direction == 'RIGHT') mode = 2;else if (direction == 'BOTH') mode = 3;
                if (color == 'WHITE') mode += 7;

                packet.motion = 0;
                packet.leftWheel = 0;
                packet.rightWheel = 0;
                robot.boardCommand = 0;
                robot.setLineTracerMode(mode);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_follow_line(%1, %2, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_both_floor_sensors, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }]
                }]
            }
        },
        roboid_hamster_follow_line_until: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                value: 'BLACK',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_front, 'FRONT'], [Lang.Blocks.HAMSTER_rear, 'REAR']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, null, null],
                type: 'roboid_hamster_follow_line_until'
            },
            paramsKeyMap: {
                INDEX: 0,
                COLOR: 1,
                DIRECTION: 2
            },
            class: 'hamster_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                var pd = Entry.hw.portData;
                var color = script.getField('COLOR');
                var direction = script.getField('DIRECTION');

                var mode = 4;
                if (direction == 'RIGHT') mode = 5;else if (direction == 'FRONT') mode = 6;else if (direction == 'REAR') mode = 7;
                if (color == 'WHITE') mode += 7;

                if (!script.isStart) {
                    script.isStart = true;
                    packet.motion = 0;
                    packet.leftWheel = 0;
                    packet.rightWheel = 0;
                    robot.boardCommand = 0;
                    robot.setLineTracerMode(mode);
                    return script;
                } else {
                    var lineTracerStateId = pd['hamster' + index + 'lineTracerStateId'];
                    if (lineTracerStateId != robot.lineTracerStateId) {
                        robot.lineTracerStateId = lineTracerStateId;
                        var lineTracerState = pd['hamster' + index + 'lineTracerState'];
                        if (lineTracerState == 0x40) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            robot.setLineTracerMode(0);
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_follow_line_until(%1, %2, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_black, 'BLACK'], [Lang.Blocks.HAMSTER_color_white, 'WHITE']],
                        value: 'BLACK',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_floor_sensor, 'LEFT'], [Lang.Blocks.HAMSTER_right_floor_sensor, 'RIGHT'], [Lang.Blocks.HAMSTER_front, 'FRONT'], [Lang.Blocks.HAMSTER_rear, 'REAR']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }]
                }]
            }
        },
        roboid_hamster_set_following_speed_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, '5', null],
                type: 'roboid_hamster_set_following_speed_to'
            },
            paramsKeyMap: {
                INDEX: 0,
                SPEED: 1
            },
            class: 'hamster_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                packet.lineTracerSpeed = Number(script.getField('SPEED', script));
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_line_tracer_speed(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringOrNumberByValue
                    }]
                }]
            }
        },
        roboid_hamster_stop: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'roboid_hamster_stop'
            },
            paramsKeyMap: {
                INDEX: 0
            },
            class: 'hamster_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                packet.motion = 0;
                packet.leftWheel = 0;
                packet.rightWheel = 0;
                robot.boardCommand = 0;
                robot.setLineTracerMode(0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_stop(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_hamster_set_led_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, null, null],
                type: 'roboid_hamster_set_led_to'
            },
            paramsKeyMap: {
                INDEX: 0,
                DIRECTION: 1,
                COLOR: 2
            },
            class: 'hamster_led',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                var direction = script.getField('DIRECTION', script);
                var color = Number(script.getField('COLOR', script));
                if (direction == 'LEFT') {
                    packet.leftLed = color;
                } else if (direction == 'RIGHT') {
                    packet.rightLed = color;
                } else {
                    packet.leftLed = color;
                    packet.rightLed = color;
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_left_led(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Hamster.colors'
                    }],
                    params: [null, 'LEFT']
                }, {
                    syntax: 'Roboid.hamster_right_led(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Hamster.colors'
                    }],
                    params: [null, 'RIGHT']
                }, {
                    syntax: 'Roboid.hamster_both_leds(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_color_red, '4'], [Lang.Blocks.HAMSTER_color_yellow, '6'], [Lang.Blocks.HAMSTER_color_green, '2'], [Lang.Blocks.HAMSTER_color_cyan, '3'], [Lang.Blocks.HAMSTER_color_blue, '1'], [Lang.Blocks.HAMSTER_color_magenta, '5'], [Lang.Blocks.HAMSTER_color_white, '7']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Hamster.colors'
                    }],
                    params: [null, 'BOTH']
                }]
            }
        },
        roboid_hamster_clear_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, null],
                type: 'roboid_hamster_clear_led'
            },
            paramsKeyMap: {
                INDEX: 0,
                DIRECTION: 1
            },
            class: 'hamster_led',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                var direction = script.getField('DIRECTION', script);
                if (direction == 'LEFT') {
                    packet.leftLed = 0;
                } else if (direction == 'RIGHT') {
                    packet.rightLed = 0;
                } else {
                    packet.leftLed = 0;
                    packet.rightLed = 0;
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_left_led_off(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'LEFT']
                }, {
                    syntax: 'Roboid.hamster_right_led_off(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'RIGHT']
                }, {
                    syntax: 'Roboid.hamster_both_leds_off(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_left_led, 'LEFT'], [Lang.Blocks.HAMSTER_right_led, 'RIGHT'], [Lang.Blocks.HAMSTER_both_leds, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'BOTH']
                }]
            }
        },
        roboid_hamster_beep: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'roboid_hamster_beep'
            },
            paramsKeyMap: {
                INDEX: 0
            },
            class: 'hamster_buzzer',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    packet.buzzer = 440;
                    packet.note = 0;
                    var timeValue = 0.2 * 1000;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Roboid.removeTimeout(timer);
                    }, timeValue);
                    Entry.Roboid.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    packet.buzzer = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_beep(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_hamster_change_buzzer_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'roboid_hamster_change_buzzer_by'
            },
            paramsKeyMap: {
                INDEX: 0,
                VALUE: 1
            },
            class: 'hamster_buzzer',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                var value = script.getNumberValue('VALUE');
                packet.buzzer = packet.buzzer != undefined ? packet.buzzer + value : value;
                packet.note = 0;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_buzzer_by(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_hamster_set_buzzer_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'roboid_hamster_set_buzzer_to'
            },
            paramsKeyMap: {
                INDEX: 0,
                VALUE: 1
            },
            class: 'hamster_buzzer',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                packet.buzzer = script.getNumberValue('VALUE');
                packet.note = 0;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_buzzer(%1, %2)'
                }]
            }
        },
        roboid_hamster_clear_buzzer: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'roboid_hamster_clear_buzzer'
            },
            paramsKeyMap: {
                INDEX: 0
            },
            class: 'hamster_buzzer',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                packet.buzzer = 0;
                packet.note = 0;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_buzzer_off(%1)'
                }]
            }
        },
        roboid_hamster_play_note_for: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_note_c + '', '4'], [Lang.Blocks.ALBERT_note_c + '#', '5'], [Lang.Blocks.ALBERT_note_d + '', '6'], [Lang.Blocks.ALBERT_note_e + 'b', '7'], [Lang.Blocks.ALBERT_note_e + '', '8'], [Lang.Blocks.ALBERT_note_f + '', '9'], [Lang.Blocks.ALBERT_note_f + '#', '10'], [Lang.Blocks.ALBERT_note_g + '', '11'], [Lang.Blocks.ALBERT_note_g + '#', '12'], [Lang.Blocks.ALBERT_note_a + '', '13'], [Lang.Blocks.ALBERT_note_b + 'b', '14'], [Lang.Blocks.ALBERT_note_b + '', '15']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, '4', {
                    type: 'text',
                    params: ['0.5']
                }, null],
                type: 'roboid_hamster_play_note_for'
            },
            paramsKeyMap: {
                INDEX: 0,
                NOTE: 1,
                OCTAVE: 2,
                VALUE: 3
            },
            class: 'hamster_buzzer',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    var note = script.getNumberField('NOTE', script);
                    var octave = script.getNumberField('OCTAVE', script);
                    var beat = script.getNumberValue('VALUE', script);
                    note += (octave - 1) * 12;
                    var timeValue = beat * 60 * 1000 / robot.tempo;
                    script.isStart = true;
                    script.timeFlag = 1;
                    packet.buzzer = 0;
                    packet.note = note;
                    if (timeValue > 100) {
                        var timer1 = setTimeout(function () {
                            packet.note = 0;
                            Entry.Roboid.removeTimeout(timer1);
                        }, timeValue - 100);
                        Entry.Roboid.timeouts.push(timer1);
                    }
                    var timer2 = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Roboid.removeTimeout(timer2);
                    }, timeValue);
                    Entry.Roboid.timeouts.push(timer2);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    packet.note = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_note(%1, %2, %3, %4)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ALBERT_note_c + '', '4'], [Lang.Blocks.ALBERT_note_c + '#', '5'], [Lang.Blocks.ALBERT_note_d + '', '6'], [Lang.Blocks.ALBERT_note_e + 'b', '7'], [Lang.Blocks.ALBERT_note_e + '', '8'], [Lang.Blocks.ALBERT_note_f + '', '9'], [Lang.Blocks.ALBERT_note_f + '#', '10'], [Lang.Blocks.ALBERT_note_g + '', '11'], [Lang.Blocks.ALBERT_note_g + '#', '12'], [Lang.Blocks.ALBERT_note_a + '', '13'], [Lang.Blocks.ALBERT_note_b + 'b', '14'], [Lang.Blocks.ALBERT_note_b + '', '15']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Hamster.hamster_play_note_for[0]'
                    }, {
                        type: 'Dropdown',
                        options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringOrNumberByValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_hamster_rest_for: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['0.25']
                }, null],
                type: 'roboid_hamster_rest_for'
            },
            paramsKeyMap: {
                INDEX: 0,
                VALUE: 1
            },
            class: 'hamster_buzzer',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    var timeValue = script.getNumberValue('VALUE');
                    timeValue = timeValue * 60 * 1000 / robot.tempo;
                    packet.buzzer = 0;
                    packet.note = 0;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Roboid.removeTimeout(timer);
                    }, timeValue);
                    Entry.Roboid.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_note_off(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_hamster_change_tempo_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['20']
                }, null],
                type: 'roboid_hamster_change_tempo_by'
            },
            paramsKeyMap: {
                INDEX: 0,
                VALUE: 1
            },
            class: 'hamster_buzzer',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                robot.tempo += script.getNumberValue('VALUE');
                if (robot.tempo < 1) robot.tempo = 1;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_tempo_by(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_hamster_set_tempo_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['60']
                }, null],
                type: 'roboid_hamster_set_tempo_to'
            },
            paramsKeyMap: {
                INDEX: 0,
                VALUE: 1
            },
            class: 'hamster_buzzer',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                robot.tempo = script.getNumberValue('VALUE');
                if (robot.tempo < 1) robot.tempo = 1;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_tempo(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_hamster_set_port_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                value: 'A',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_analog_input, '1'], [Lang.Blocks.HAMSTER_digital_input, '2'], [Lang.Blocks.HAMSTER_servo_output, '9'], [Lang.Blocks.HAMSTER_pwm_output, '10'], [Lang.Blocks.HAMSTER_digital_output, '11']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, null, null],
                type: 'roboid_hamster_set_port_to'
            },
            paramsKeyMap: {
                INDEX: 0,
                PORT: 1,
                MODE: 2
            },
            class: 'hamster_port',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                var port = script.getField('PORT', script);
                var mode = Number(script.getField('MODE', script)) - 1;
                if (port == 'A') {
                    packet.ioModeA = mode;
                } else if (port == 'B') {
                    packet.ioModeB = mode;
                } else {
                    packet.ioModeA = mode;
                    packet.ioModeB = mode;
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_io_mode_a(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_analog_input, '1'], [Lang.Blocks.HAMSTER_digital_input, '2'], [Lang.Blocks.HAMSTER_servo_output, '9'], [Lang.Blocks.HAMSTER_pwm_output, '10'], [Lang.Blocks.HAMSTER_digital_output, '11']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Hamster.modes'
                    }],
                    params: [null, 'A']
                }, {
                    syntax: 'Roboid.hamster_io_mode_b(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_analog_input, '1'], [Lang.Blocks.HAMSTER_digital_input, '2'], [Lang.Blocks.HAMSTER_servo_output, '9'], [Lang.Blocks.HAMSTER_pwm_output, '10'], [Lang.Blocks.HAMSTER_digital_output, '11']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Hamster.modes'
                    }],
                    params: [null, 'B']
                }, {
                    syntax: 'Roboid.hamster_io_modes(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_analog_input, '1'], [Lang.Blocks.HAMSTER_digital_input, '2'], [Lang.Blocks.HAMSTER_servo_output, '9'], [Lang.Blocks.HAMSTER_pwm_output, '10'], [Lang.Blocks.HAMSTER_digital_output, '11']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Hamster.modes'
                    }],
                    params: [null, 'AB']
                }]
            }
        },
        roboid_hamster_change_output_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                value: 'A',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, {
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'roboid_hamster_change_output_by'
            },
            paramsKeyMap: {
                INDEX: 0,
                PORT: 1,
                VALUE: 2
            },
            class: 'hamster_port',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                var port = script.getField('PORT');
                var value = script.getNumberValue('VALUE');
                if (port == 'A') {
                    packet.outputA = packet.outputA != undefined ? packet.outputA + value : value;
                } else if (port == 'B') {
                    packet.outputB = packet.outputB != undefined ? packet.outputB + value : value;
                } else {
                    packet.outputA = packet.outputA != undefined ? packet.outputA + value : value;
                    packet.outputB = packet.outputB != undefined ? packet.outputB + value : value;
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_output_a_by(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                        value: 'A',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'A']
                }, {
                    syntax: 'Roboid.hamster_output_b_by(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                        value: 'A',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'B']
                }, {
                    syntax: 'Roboid.hamster_outputs_by(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                        value: 'A',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'AB']
                }]
            }
        },
        roboid_hamster_set_output_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                value: 'A',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, {
                    type: 'text',
                    params: ['100']
                }, null],
                type: 'roboid_hamster_set_output_to'
            },
            paramsKeyMap: {
                INDEX: 0,
                PORT: 1,
                VALUE: 2
            },
            class: 'hamster_port',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getHamster(index);
                var packet = robot.packet;
                var port = script.getField('PORT');
                var value = script.getNumberValue('VALUE');
                if (port == 'A') {
                    packet.outputA = value;
                } else if (port == 'B') {
                    packet.outputB = value;
                } else {
                    packet.outputA = value;
                    packet.outputB = value;
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.hamster_output_a(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                        value: 'A',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'A']
                }, {
                    syntax: 'Roboid.hamster_output_b(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                        value: 'A',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'B']
                }, {
                    syntax: 'Roboid.hamster_outputs(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.HAMSTER_port_a, 'A'], [Lang.Blocks.HAMSTER_port_b, 'B'], [Lang.Blocks.HAMSTER_port_ab, 'AB']],
                        value: 'A',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'AB']
                }]
            }
        },
        roboid_turtle_touching_color: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_red, '2'], [Lang.Blocks.ROBOID_color_orange, '3'], [Lang.Blocks.ROBOID_color_yellow, '4'], [Lang.Blocks.ROBOID_color_green, '5'], [Lang.Blocks.ROBOID_color_sky_blue, '6'], [Lang.Blocks.ROBOID_color_blue, '7'], [Lang.Blocks.ROBOID_color_purple, '8'], [Lang.Blocks.ROBOID_color_black, '1'], [Lang.Blocks.ROBOID_color_white, '9']],
                value: '2',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'roboid_turtle_touching_color'
            },
            paramsKeyMap: {
                INDEX: 0,
                COLOR: 1
            },
            class: 'turtle_sensor',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                return Number(script.getField('COLOR')) - 1 === pd['turtle' + index + 'colorNumber'];
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_touching(%1, %2)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_red, '2'], [Lang.Blocks.ROBOID_color_orange, '3'], [Lang.Blocks.ROBOID_color_yellow, '4'], [Lang.Blocks.ROBOID_color_green, '5'], [Lang.Blocks.ROBOID_color_sky_blue, '6'], [Lang.Blocks.ROBOID_color_blue, '7'], [Lang.Blocks.ROBOID_color_purple, '8'], [Lang.Blocks.ROBOID_color_black, '1'], [Lang.Blocks.ROBOID_color_white, '9']],
                        value: '2',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.touching_colors'
                    }]
                }]
            }
        },
        roboid_turtle_is_color_pattern: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_red, '1'], [Lang.Blocks.ROBOID_color_yellow, '3'], [Lang.Blocks.ROBOID_color_green, '4'], [Lang.Blocks.ROBOID_color_sky_blue, '5'], [Lang.Blocks.ROBOID_color_blue, '6'], [Lang.Blocks.ROBOID_color_purple, '7']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_red, '1'], [Lang.Blocks.ROBOID_color_yellow, '3'], [Lang.Blocks.ROBOID_color_green, '4'], [Lang.Blocks.ROBOID_color_sky_blue, '5'], [Lang.Blocks.ROBOID_color_blue, '6'], [Lang.Blocks.ROBOID_color_purple, '7']],
                value: '3',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, null],
                type: 'roboid_turtle_is_color_pattern'
            },
            paramsKeyMap: {
                INDEX: 0,
                COLOR1: 1,
                COLOR2: 2
            },
            class: 'turtle_sensor',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                return Number(script.getField('COLOR1')) * 10 + Number(script.getField('COLOR2')) === pd['turtle' + index + 'colorPattern'];
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_match_color_pattern(%1, %2, %3)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_red, '1'], [Lang.Blocks.ROBOID_color_yellow, '3'], [Lang.Blocks.ROBOID_color_green, '4'], [Lang.Blocks.ROBOID_color_sky_blue, '5'], [Lang.Blocks.ROBOID_color_blue, '6'], [Lang.Blocks.ROBOID_color_purple, '7']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.pattern_colors'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_red, '1'], [Lang.Blocks.ROBOID_color_yellow, '3'], [Lang.Blocks.ROBOID_color_green, '4'], [Lang.Blocks.ROBOID_color_sky_blue, '5'], [Lang.Blocks.ROBOID_color_blue, '6'], [Lang.Blocks.ROBOID_color_purple, '7']],
                        value: '3',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.pattern_colors'
                    }]
                }]
            }
        },
        roboid_turtle_button_state: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_clicked, 'clicked'], [Lang.Blocks.ROBOID_double_clicked, 'doubleClicked'], [Lang.Blocks.ROBOID_long_pressed, 'longPressed']],
                value: 'clicked',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'roboid_turtle_button_state'
            },
            paramsKeyMap: {
                INDEX: 0,
                EVENT: 1
            },
            class: 'turtle_sensor',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var event = script.getField('EVENT');
                return pd['turtle' + index + event] === 1;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_clicked(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_clicked, 'clicked'], [Lang.Blocks.ROBOID_double_clicked, 'doubleClicked'], [Lang.Blocks.ROBOID_long_pressed, 'longPressed']],
                        value: 'clicked',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'clicked']
                }, {
                    syntax: 'Roboid.turtle_double_clicked(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_clicked, 'clicked'], [Lang.Blocks.ROBOID_double_clicked, 'doubleClicked'], [Lang.Blocks.ROBOID_long_pressed, 'longPressed']],
                        value: 'clicked',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'doubleClicked']
                }, {
                    syntax: 'Roboid.turtle_long_pressed(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_clicked, 'clicked'], [Lang.Blocks.ROBOID_double_clicked, 'doubleClicked'], [Lang.Blocks.ROBOID_long_pressed, 'longPressed']],
                        value: 'clicked',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'longPressed']
                }]
            }
        },
        roboid_turtle_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                value: 'colorNumber',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'roboid_turtle_value'
            },
            paramsKeyMap: {
                INDEX: 0,
                DEVICE: 1
            },
            class: 'turtle_sensor',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var dev = script.getField('DEVICE');
                var value = pd['turtle' + index + dev];
                if (typeof value !== 'number') value = Entry.Roboid.TURTLE_SENSOR[dev];
                return value;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_color_number(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                        value: 'colorNumber',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'colorNumber']
                }, {
                    syntax: 'Roboid.turtle_color_pattern(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                        value: 'colorNumber',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'colorPattern']
                }, {
                    syntax: 'Roboid.turtle_floor(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                        value: 'colorNumber',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'floor']
                }, {
                    syntax: 'Roboid.turtle_button(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                        value: 'colorNumber',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'button']
                }, {
                    syntax: 'Roboid.turtle_acceleration_x(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                        value: 'colorNumber',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'accelerationX']
                }, {
                    syntax: 'Roboid.turtle_acceleration_y(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                        value: 'colorNumber',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'accelerationY']
                }, {
                    syntax: 'Roboid.turtle_acceleration_z(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                        value: 'colorNumber',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, 'accelerationZ']
                }]
            }
        },
        roboid_turtle_move_forward_unit: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_unit_cm, 'CM'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                value: 'CM',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['6']
                }, null, null],
                type: 'roboid_turtle_move_forward_unit'
            },
            paramsKeyMap: {
                INDEX: 0,
                VALUE: 1,
                UNIT: 2
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    packet.leftWheel = 0;
                    packet.rightWheel = 0;
                    robot.setPulse(0);
                    robot.setLineTracerMode(0);
                    var field = script.getField('UNIT');
                    var unit = 1;
                    if (field == 'SEC') unit = 2;else if (field == 'PULSE') unit = 3;
                    var value = script.getNumberValue('VALUE');
                    robot.setMotion(1, unit, 0, value, 0);
                    return script;
                } else {
                    var wheelStateId = pd['turtle' + index + 'wheelStateId'];
                    if (wheelStateId != robot.wheelStateId) {
                        robot.wheelStateId = wheelStateId;
                        var wheelState = pd['turtle' + index + 'wheelState'];
                        if (wheelState == 0) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            packet.leftWheel = 0;
                            packet.rightWheel = 0;
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_move_forward(%1, %2, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_cm, 'CM'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'CM',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }]
                }]
            }
        },
        roboid_turtle_move_backward_unit: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_unit_cm, 'CM'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                value: 'CM',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['6']
                }, null, null],
                type: 'roboid_turtle_move_backward_unit'
            },
            paramsKeyMap: {
                INDEX: 0,
                VALUE: 1,
                UNIT: 2
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    packet.leftWheel = 0;
                    packet.rightWheel = 0;
                    robot.setPulse(0);
                    robot.setLineTracerMode(0);
                    var field = script.getField('UNIT');
                    var unit = 1;
                    if (field == 'SEC') unit = 2;else if (field == 'PULSE') unit = 3;
                    var value = script.getNumberValue('VALUE');
                    robot.setMotion(2, unit, 0, value, 0);
                    return script;
                } else {
                    var wheelStateId = pd['turtle' + index + 'wheelStateId'];
                    if (wheelStateId != robot.wheelStateId) {
                        robot.wheelStateId = wheelStateId;
                        var wheelState = pd['turtle' + index + 'wheelState'];
                        if (wheelState == 0) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            packet.leftWheel = 0;
                            packet.rightWheel = 0;
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_move_backward(%1, %2, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_cm, 'CM'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'CM',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }]
                }]
            }
        },
        roboid_turtle_turn_unit_in_place: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                value: 'DEG',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, {
                    type: 'text',
                    params: ['90']
                }, null, null],
                type: 'roboid_turtle_turn_unit_in_place'
            },
            paramsKeyMap: {
                INDEX: 0,
                DIRECTION: 1,
                VALUE: 2,
                UNIT: 3
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    packet.leftWheel = 0;
                    packet.rightWheel = 0;
                    robot.setPulse(0);
                    robot.setLineTracerMode(0);
                    var direction = script.getField('DIRECTION');
                    var field = script.getField('UNIT');
                    var unit = 1;
                    if (field == 'SEC') unit = 2;else if (field == 'PULSE') unit = 3;
                    var value = script.getNumberValue('VALUE');
                    if (direction == 'LEFT') robot.setMotion(3, unit, 0, value, 0);else robot.setMotion(4, unit, 0, value, 0);
                    return script;
                } else {
                    var wheelStateId = pd['turtle' + index + 'wheelStateId'];
                    if (wheelStateId != robot.wheelStateId) {
                        robot.wheelStateId = wheelStateId;
                        var wheelState = pd['turtle' + index + 'wheelState'];
                        if (wheelState == 0) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            packet.leftWheel = 0;
                            packet.rightWheel = 0;
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_turn_left(%1, %3, %4)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'DEG',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }],
                    params: [null, 'LEFT']
                }, {
                    syntax: 'Roboid.turtle_turn_right(%1, %3, %4)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'DEG',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }],
                    params: [null, 'RIGHT']
                }]
            }
        },
        roboid_turtle_turn_unit_with_radius_in_direction: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                value: 'DEG',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_head, 'HEAD'], [Lang.Blocks.ROBOID_tail, 'TAIL']],
                value: 'HEAD',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, {
                    type: 'text',
                    params: ['90']
                }, null, {
                    type: 'text',
                    params: ['6']
                }, null, null],
                type: 'roboid_turtle_turn_unit_with_radius_in_direction'
            },
            paramsKeyMap: {
                INDEX: 0,
                DIRECTION: 1,
                VALUE: 2,
                UNIT: 3,
                RADIUS: 4,
                HEAD: 5
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    packet.leftWheel = 0;
                    packet.rightWheel = 0;
                    robot.setPulse(0);
                    robot.setLineTracerMode(0);
                    var direction = script.getField('DIRECTION');
                    var field = script.getField('UNIT');
                    var unit = 1;
                    if (field == 'SEC') unit = 2;else if (field == 'PULSE') unit = 3;
                    var value = script.getNumberValue('VALUE');
                    var head = script.getField('HEAD');
                    var radius = script.getNumberValue('RADIUS');
                    if (direction == 'LEFT') {
                        if (head == 'HEAD') robot.setMotion(9, unit, 0, value, radius);else robot.setMotion(10, unit, 0, value, radius);
                    } else {
                        if (head == 'HEAD') robot.setMotion(11, unit, 0, value, radius);else robot.setMotion(12, unit, 0, value, radius);
                    }
                    return script;
                } else {
                    var wheelStateId = pd['turtle' + index + 'wheelStateId'];
                    if (wheelStateId != robot.wheelStateId) {
                        robot.wheelStateId = wheelStateId;
                        var wheelState = pd['turtle' + index + 'wheelState'];
                        if (wheelState == 0) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            packet.leftWheel = 0;
                            packet.rightWheel = 0;
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_swing_left(%1, %3, %4, %5, %6)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'DEG',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_head, 'HEAD'], [Lang.Blocks.ROBOID_tail, 'TAIL']],
                        value: 'HEAD',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.head_tail'
                    }],
                    params: [null, 'LEFT']
                }, {
                    syntax: 'Roboid.turtle_swing_right(%1, %3, %4, %5, %6)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'DEG',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_head, 'HEAD'], [Lang.Blocks.ROBOID_tail, 'TAIL']],
                        value: 'HEAD',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.head_tail'
                    }],
                    params: [null, 'RIGHT']
                }]
            }
        },
        roboid_turtle_pivot_around_wheel_unit_in_direction: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                value: 'DEG',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_head, 'HEAD'], [Lang.Blocks.ROBOID_tail, 'TAIL']],
                value: 'HEAD',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, {
                    type: 'text',
                    params: ['90']
                }, null, null, null],
                type: 'roboid_turtle_pivot_around_wheel_unit_in_direction'
            },
            paramsKeyMap: {
                INDEX: 0,
                DIRECTION: 1,
                VALUE: 2,
                UNIT: 3,
                HEAD: 4
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    packet.leftWheel = 0;
                    packet.rightWheel = 0;
                    robot.setPulse(0);
                    robot.setLineTracerMode(0);
                    var direction = script.getField('DIRECTION');
                    var field = script.getField('UNIT');
                    var unit = 1;
                    if (field == 'SEC') unit = 2;else if (field == 'PULSE') unit = 3;
                    var value = script.getNumberValue('VALUE');
                    var head = script.getField('HEAD');
                    if (direction == 'LEFT') {
                        if (head == 'HEAD') robot.setMotion(5, unit, 0, value, 0);else robot.setMotion(6, unit, 0, value, 0);
                    } else {
                        if (head == 'HEAD') robot.setMotion(7, unit, 0, value, 0);else robot.setMotion(8, unit, 0, value, 0);
                    }
                    return script;
                } else {
                    var wheelStateId = pd['turtle' + index + 'wheelStateId'];
                    if (wheelStateId != robot.wheelStateId) {
                        robot.wheelStateId = wheelStateId;
                        var wheelState = pd['turtle' + index + 'wheelState'];
                        if (wheelState == 0) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            packet.leftWheel = 0;
                            packet.rightWheel = 0;
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_pivot_left(%1, %3, %4, %5)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'DEG',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_head, 'HEAD'], [Lang.Blocks.ROBOID_tail, 'TAIL']],
                        value: 'HEAD',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.head_tail'
                    }],
                    params: [null, 'LEFT']
                }, {
                    syntax: 'Roboid.turtle_pivot_right(%1, %3, %4, %5)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'DEG',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_head, 'HEAD'], [Lang.Blocks.ROBOID_tail, 'TAIL']],
                        value: 'HEAD',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.head_tail'
                    }],
                    params: [null, 'RIGHT']
                }]
            }
        },
        roboid_turtle_change_wheels_by_left_right: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['10']
                }, {
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'roboid_turtle_change_wheels_by_left_right'
            },
            paramsKeyMap: {
                INDEX: 0,
                LEFT: 1,
                RIGHT: 2
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                var left = script.getNumberValue('LEFT');
                var right = script.getNumberValue('RIGHT');
                robot.setPulse(0);
                robot.setLineTracerMode(0);
                robot.setMotion(0, 0, 0, 0, 0);
                packet.leftWheel = packet.leftWheel != undefined ? packet.leftWheel + left : left;
                packet.rightWheel = packet.rightWheel != undefined ? packet.rightWheel + right : right;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_wheels_by(%1, %2, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_turtle_set_wheels_to_left_right: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['50']
                }, {
                    type: 'text',
                    params: ['50']
                }, null],
                type: 'roboid_turtle_set_wheels_to_left_right'
            },
            paramsKeyMap: {
                INDEX: 0,
                LEFT: 1,
                RIGHT: 2
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                robot.setPulse(0);
                robot.setLineTracerMode(0);
                robot.setMotion(0, 0, 0, 0, 0);
                packet.leftWheel = script.getNumberValue('LEFT');
                packet.rightWheel = script.getNumberValue('RIGHT');
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_wheels(%1, %2, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_turtle_change_wheel_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, {
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'roboid_turtle_change_wheel_by'
            },
            paramsKeyMap: {
                INDEX: 0,
                DIRECTION: 1,
                VALUE: 2
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                var direction = script.getField('DIRECTION');
                var value = script.getNumberValue('VALUE');
                robot.setPulse(0);
                robot.setLineTracerMode(0);
                robot.setMotion(0, 0, 0, 0, 0);
                if (direction == 'LEFT') {
                    packet.leftWheel = packet.leftWheel != undefined ? packet.leftWheel + value : value;
                } else if (direction == 'RIGHT') {
                    packet.rightWheel = packet.rightWheel != undefined ? packet.rightWheel + value : value;
                } else {
                    packet.leftWheel = packet.leftWheel != undefined ? packet.leftWheel + value : value;
                    packet.rightWheel = packet.rightWheel != undefined ? packet.rightWheel + value : value;
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_left_wheel_by(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'LEFT']
                }, {
                    syntax: 'Roboid.turtle_right_wheel_by(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'RIGHT']
                }, {
                    syntax: 'Roboid.turtle_both_wheels_by(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'BOTH']
                }]
            }
        },
        roboid_turtle_set_wheel_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, {
                    type: 'text',
                    params: ['50']
                }, null],
                type: 'roboid_turtle_set_wheel_to'
            },
            paramsKeyMap: {
                INDEX: 0,
                DIRECTION: 1,
                VALUE: 2
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                var direction = script.getField('DIRECTION');
                var value = script.getNumberValue('VALUE');
                robot.setPulse(0);
                robot.setLineTracerMode(0);
                robot.setMotion(0, 0, 0, 0, 0);
                if (direction == 'LEFT') {
                    packet.leftWheel = value;
                } else if (direction == 'RIGHT') {
                    packet.rightWheel = value;
                } else {
                    packet.leftWheel = value;
                    packet.rightWheel = value;
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_left_wheel(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'LEFT']
                }, {
                    syntax: 'Roboid.turtle_right_wheel(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'RIGHT']
                }, {
                    syntax: 'Roboid.turtle_both_wheels(%1, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, 'BOTH']
                }]
            }
        },
        roboid_turtle_follow_line: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_black, '10'], [Lang.Blocks.ROBOID_color_red, '11'], [Lang.Blocks.ROBOID_color_green, '13'], [Lang.Blocks.ROBOID_color_blue, '15'], [Lang.Blocks.ROBOID_color_any, '17']],
                value: '10',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, null],
                type: 'roboid_turtle_follow_line'
            },
            paramsKeyMap: {
                INDEX: 0,
                COLOR: 1
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                packet.leftWheel = 0;
                packet.rightWheel = 0;
                robot.setPulse(0);
                robot.setMotion(0, 0, 0, 0, 0);
                var mode = Number(script.getField('COLOR'));
                robot.setLineTracerMode(mode);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_follow_line(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_black, '10'], [Lang.Blocks.ROBOID_color_red, '11'], [Lang.Blocks.ROBOID_color_green, '13'], [Lang.Blocks.ROBOID_color_blue, '15'], [Lang.Blocks.ROBOID_color_any, '17']],
                        value: '10',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.line_colors'
                    }]
                }]
            }
        },
        roboid_turtle_follow_line_until: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_red, '61'], [Lang.Blocks.ROBOID_color_yellow, '62'], [Lang.Blocks.ROBOID_color_green, '63'], [Lang.Blocks.ROBOID_color_sky_blue, '64'], [Lang.Blocks.ROBOID_color_blue, '65'], [Lang.Blocks.ROBOID_color_purple, '66'], [Lang.Blocks.ROBOID_color_any, '67']],
                value: '61',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, null],
                type: 'roboid_turtle_follow_line_until'
            },
            paramsKeyMap: {
                INDEX: 0,
                COLOR: 1
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    packet.leftWheel = 0;
                    packet.rightWheel = 0;
                    robot.setPulse(0);
                    robot.setMotion(0, 0, 0, 0, 0);
                    var mode = Number(script.getField('COLOR'));
                    robot.setLineTracerMode(mode);
                    return script;
                } else {
                    var lineTracerStateId = pd['turtle' + index + 'lineTracerStateId'];
                    if (lineTracerStateId != robot.lineTracerStateId) {
                        robot.lineTracerStateId = lineTracerStateId;
                        var lineTracerState = pd['turtle' + index + 'lineTracerState'];
                        if (lineTracerState == 0x02) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            robot.setLineTracerMode(0);
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_follow_black_line_until(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_red, '61'], [Lang.Blocks.ROBOID_color_yellow, '62'], [Lang.Blocks.ROBOID_color_green, '63'], [Lang.Blocks.ROBOID_color_sky_blue, '64'], [Lang.Blocks.ROBOID_color_blue, '65'], [Lang.Blocks.ROBOID_color_purple, '66'], [Lang.Blocks.ROBOID_color_any, '67']],
                        value: '61',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.target_colors'
                    }]
                }]
            }
        },
        roboid_turtle_follow_line_until_black: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_red, '71'], [Lang.Blocks.ROBOID_color_green, '73'], [Lang.Blocks.ROBOID_color_blue, '75'], [Lang.Blocks.ROBOID_color_any, '77']],
                value: '71',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, null],
                type: 'roboid_turtle_follow_line_until_black'
            },
            paramsKeyMap: {
                INDEX: 0,
                COLOR: 1
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    packet.leftWheel = 0;
                    packet.rightWheel = 0;
                    robot.setPulse(0);
                    robot.setMotion(0, 0, 0, 0, 0);
                    var mode = Number(script.getField('COLOR'));
                    robot.setLineTracerMode(mode);
                    return script;
                } else {
                    var lineTracerStateId = pd['turtle' + index + 'lineTracerStateId'];
                    if (lineTracerStateId != robot.lineTracerStateId) {
                        robot.lineTracerStateId = lineTracerStateId;
                        var lineTracerState = pd['turtle' + index + 'lineTracerState'];
                        if (lineTracerState == 0x02) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            robot.setLineTracerMode(0);
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_follow_line_until_black(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_red, '71'], [Lang.Blocks.ROBOID_color_green, '73'], [Lang.Blocks.ROBOID_color_blue, '75'], [Lang.Blocks.ROBOID_color_any, '77']],
                        value: '71',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.color_lines'
                    }]
                }]
            }
        },
        roboid_turtle_cross_intersection: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'roboid_turtle_cross_intersection'
            },
            paramsKeyMap: {
                INDEX: 0
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    packet.leftWheel = 0;
                    packet.rightWheel = 0;
                    robot.setPulse(0);
                    robot.setMotion(0, 0, 0, 0, 0);
                    robot.setLineTracerMode(40);
                    return script;
                } else {
                    var lineTracerStateId = pd['turtle' + index + 'lineTracerStateId'];
                    if (lineTracerStateId != robot.lineTracerStateId) {
                        robot.lineTracerStateId = lineTracerStateId;
                        var lineTracerState = pd['turtle' + index + 'lineTracerState'];
                        if (lineTracerState == 0x02) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            robot.setLineTracerMode(0);
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_intersection_forward(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_turtle_turn_at_intersection: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_left, '20'], [Lang.Blocks.ROBOID_right, '30'], [Lang.Blocks.ROBOID_back, '50']],
                value: '20',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, null],
                type: 'roboid_turtle_turn_at_intersection'
            },
            paramsKeyMap: {
                INDEX: 0,
                DIRECTION: 1
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    packet.leftWheel = 0;
                    packet.rightWheel = 0;
                    robot.setPulse(0);
                    robot.setMotion(0, 0, 0, 0, 0);
                    var mode = Number(script.getField('DIRECTION'));
                    robot.setLineTracerMode(mode);
                    return script;
                } else {
                    var lineTracerStateId = pd['turtle' + index + 'lineTracerStateId'];
                    if (lineTracerStateId != robot.lineTracerStateId) {
                        robot.lineTracerStateId = lineTracerStateId;
                        var lineTracerState = pd['turtle' + index + 'lineTracerState'];
                        if (lineTracerState == 0x02) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            robot.setLineTracerMode(0);
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_intersection_left(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, '20'], [Lang.Blocks.ROBOID_right, '30'], [Lang.Blocks.ROBOID_back, '50']],
                        value: '20',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, '20']
                }, {
                    syntax: 'Roboid.turtle_intersection_right(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, '20'], [Lang.Blocks.ROBOID_right, '30'], [Lang.Blocks.ROBOID_back, '50']],
                        value: '20',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, '30']
                }, {
                    syntax: 'Roboid.turtle_intersection_uturn(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, '20'], [Lang.Blocks.ROBOID_right, '30'], [Lang.Blocks.ROBOID_back, '50']],
                        value: '20',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: [null, '50']
                }]
            }
        },
        roboid_turtle_set_following_speed_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, '5', null],
                type: 'roboid_turtle_set_following_speed_to'
            },
            paramsKeyMap: {
                INDEX: 0,
                SPEED: 1
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                var speed = Number(script.getField('SPEED'));
                packet.lineTracerSpeed = speed;
                packet.lineTracerGain = speed;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_line_tracer_speed(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringOrNumberByValue
                    }]
                }]
            }
        },
        roboid_turtle_stop: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'roboid_turtle_stop'
            },
            paramsKeyMap: {
                INDEX: 0
            },
            class: 'turtle_wheel',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                packet.leftWheel = 0;
                packet.rightWheel = 0;
                robot.setPulse(0);
                robot.setLineTracerMode(0);
                robot.setMotion(0, 0, 0, 0, 0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_stop(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_turtle_set_head_led_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_red, 'RED'], [Lang.Blocks.ROBOID_color_orange, 'ORANGE'], [Lang.Blocks.ROBOID_color_yellow, 'YELLOW'], [Lang.Blocks.ROBOID_color_green, 'GREEN'], [Lang.Blocks.ROBOID_color_sky_blue, 'CYAN'], [Lang.Blocks.ROBOID_color_blue, 'BLUE'], [Lang.Blocks.ROBOID_color_violet, 'VIOLET'], [Lang.Blocks.ROBOID_color_purple, 'MAGENTA'], [Lang.Blocks.ROBOID_color_white, 'WHITE']],
                value: 'RED',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, null],
                type: 'roboid_turtle_set_head_led_to'
            },
            paramsKeyMap: {
                INDEX: 0,
                COLOR: 1
            },
            class: 'turtle_led',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                var color = script.getField('COLOR');
                robot.setLedColor(color);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_led_color(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_red, 'RED'], [Lang.Blocks.ROBOID_color_orange, 'ORANGE'], [Lang.Blocks.ROBOID_color_yellow, 'YELLOW'], [Lang.Blocks.ROBOID_color_green, 'GREEN'], [Lang.Blocks.ROBOID_color_sky_blue, 'CYAN'], [Lang.Blocks.ROBOID_color_blue, 'BLUE'], [Lang.Blocks.ROBOID_color_violet, 'VIOLET'], [Lang.Blocks.ROBOID_color_purple, 'MAGENTA'], [Lang.Blocks.ROBOID_color_white, 'WHITE']],
                        value: 'RED',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.led_colors'
                    }]
                }]
            }
        },
        roboid_turtle_change_head_led_by_rgb: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['10']
                }, {
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'roboid_turtle_change_head_led_by_rgb'
            },
            paramsKeyMap: {
                INDEX: 0,
                RED: 1,
                GREEN: 2,
                BLUE: 3
            },
            class: 'turtle_led',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                var red = script.getNumberValue('RED');
                var green = script.getNumberValue('GREEN');
                var blue = script.getNumberValue('BLUE');
                packet.ledRed = packet.ledRed != undefined ? packet.ledRed + red : red;
                packet.ledGreen = packet.ledGreen != undefined ? packet.ledGreen + green : green;
                packet.ledBlue = packet.ledBlue != undefined ? packet.ledBlue + blue : blue;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_led_by(%1, %2, %3, %4)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_turtle_set_head_led_to_rgb: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'roboid_turtle_set_head_led_to_rgb'
            },
            paramsKeyMap: {
                INDEX: 0,
                RED: 1,
                GREEN: 2,
                BLUE: 3
            },
            class: 'turtle_led',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                packet.ledRed = script.getNumberValue('RED');
                packet.ledGreen = script.getNumberValue('GREEN');
                packet.ledBlue = script.getNumberValue('BLUE');
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_led(%1, %2, %3, %4)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_turtle_clear_head_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'roboid_turtle_clear_head_led'
            },
            paramsKeyMap: {
                INDEX: 0
            },
            class: 'turtle_led',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                packet.ledRed = 0;
                packet.ledGreen = 0;
                packet.ledBlue = 0;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_led_off(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_turtle_play_sound_times: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_sound_beep, '1'], [Lang.Blocks.ROBOID_sound_random_beep, '2'], [Lang.Blocks.ROBOID_sound_siren, '3'], [Lang.Blocks.ROBOID_sound_engine, '4'], [Lang.Blocks.ROBOID_sound_robot, '5'], [Lang.Blocks.ROBOID_sound_march, '6'], [Lang.Blocks.ROBOID_sound_birthday, '7'], [Lang.Blocks.ROBOID_sound_dibidibidip, '8'], [Lang.Blocks.ROBOID_sound_good_job, '9']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'roboid_turtle_play_sound_times'
            },
            paramsKeyMap: {
                INDEX: 0,
                SOUND: 1,
                COUNT: 2
            },
            class: 'turtle_sound',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                packet.buzzer = 0;
                packet.note = 0;
                var sound = Number(script.getField('SOUND'));
                var count = script.getNumberValue('COUNT');
                if (count) robot.setSound(sound, count);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_sound(%1, %2, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_sound_beep, '1'], [Lang.Blocks.ROBOID_sound_random_beep, '2'], [Lang.Blocks.ROBOID_sound_siren, '3'], [Lang.Blocks.ROBOID_sound_engine, '4'], [Lang.Blocks.ROBOID_sound_robot, '5'], [Lang.Blocks.ROBOID_sound_march, '6'], [Lang.Blocks.ROBOID_sound_birthday, '7'], [Lang.Blocks.ROBOID_sound_dibidibidip, '8'], [Lang.Blocks.ROBOID_sound_good_job, '9']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.sounds'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_turtle_play_sound_times_until_done: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_sound_beep, '1'], [Lang.Blocks.ROBOID_sound_random_beep, '2'], [Lang.Blocks.ROBOID_sound_siren, '3'], [Lang.Blocks.ROBOID_sound_engine, '4'], [Lang.Blocks.ROBOID_sound_robot, '5'], [Lang.Blocks.ROBOID_sound_march, '6'], [Lang.Blocks.ROBOID_sound_birthday, '7'], [Lang.Blocks.ROBOID_sound_dibidibidip, '8'], [Lang.Blocks.ROBOID_sound_good_job, '9']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'roboid_turtle_play_sound_times_until_done'
            },
            paramsKeyMap: {
                INDEX: 0,
                SOUND: 1,
                COUNT: 2
            },
            class: 'turtle_sound',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    packet.buzzer = 0;
                    packet.note = 0;
                    var sound = Number(script.getField('SOUND'));
                    var count = script.getNumberValue('COUNT');
                    if (count) {
                        robot.setSound(sound, count);
                        return script;
                    } else {
                        robot.sound = 0;
                        robot.soundRepeat = 1;
                        delete script.isStart;
                        Entry.engine.isContinue = false;
                        return script.callReturn();
                    }
                } else {
                    var soundStateId = pd['turtle' + index + 'soundStateId'];
                    if (soundStateId != robot.soundStateId) {
                        robot.soundStateId = soundStateId;
                        var soundState = pd['turtle' + index + 'soundState'];
                        if (soundState == 0) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_sound_until_done(%1, %2, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_sound_beep, '1'], [Lang.Blocks.ROBOID_sound_random_beep, '2'], [Lang.Blocks.ROBOID_sound_siren, '3'], [Lang.Blocks.ROBOID_sound_engine, '4'], [Lang.Blocks.ROBOID_sound_robot, '5'], [Lang.Blocks.ROBOID_sound_march, '6'], [Lang.Blocks.ROBOID_sound_birthday, '7'], [Lang.Blocks.ROBOID_sound_dibidibidip, '8'], [Lang.Blocks.ROBOID_sound_good_job, '9']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.sounds'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_turtle_change_buzzer_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'roboid_turtle_change_buzzer_by'
            },
            paramsKeyMap: {
                INDEX: 0,
                VALUE: 1
            },
            class: 'turtle_sound',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                var value = script.getNumberValue('VALUE');
                packet.buzzer = packet.buzzer != undefined ? packet.buzzer + value : value;
                packet.note = 0;
                robot.setSound(0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_buzzer_by(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_turtle_set_buzzer_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'roboid_turtle_set_buzzer_to'
            },
            paramsKeyMap: {
                INDEX: 0,
                VALUE: 1
            },
            class: 'turtle_sound',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                packet.buzzer = script.getNumberValue('VALUE');
                packet.note = 0;
                robot.setSound(0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_buzzer(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_turtle_clear_sound: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'roboid_turtle_clear_sound'
            },
            paramsKeyMap: {
                INDEX: 0
            },
            class: 'turtle_sound',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                packet.buzzer = 0;
                packet.note = 0;
                robot.setSound(0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_sound_off(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: [null, null]
                }]
            }
        },
        roboid_turtle_play_note: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_note_c + '', '4'], [Lang.Blocks.ALBERT_note_c + '#', '5'], [Lang.Blocks.ALBERT_note_d + '', '6'], [Lang.Blocks.ALBERT_note_e + 'b', '7'], [Lang.Blocks.ALBERT_note_e + '', '8'], [Lang.Blocks.ALBERT_note_f + '', '9'], [Lang.Blocks.ALBERT_note_f + '#', '10'], [Lang.Blocks.ALBERT_note_g + '', '11'], [Lang.Blocks.ALBERT_note_g + '#', '12'], [Lang.Blocks.ALBERT_note_a + '', '13'], [Lang.Blocks.ALBERT_note_b + 'b', '14'], [Lang.Blocks.ALBERT_note_b + '', '15']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, '4', null],
                type: 'roboid_turtle_play_note'
            },
            paramsKeyMap: {
                INDEX: 0,
                NOTE: 1,
                OCTAVE: 2
            },
            class: 'turtle_sound',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                var note = script.getNumberField('NOTE', script);
                var octave = script.getNumberField('OCTAVE', script);
                packet.buzzer = 0;
                note += (octave - 1) * 12;
                packet.note = note;
                robot.setSound(0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_pitch(%1, %2, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ALBERT_note_c + '', '4'], [Lang.Blocks.ALBERT_note_c + '#', '5'], [Lang.Blocks.ALBERT_note_d + '', '6'], [Lang.Blocks.ALBERT_note_e + 'b', '7'], [Lang.Blocks.ALBERT_note_e + '', '8'], [Lang.Blocks.ALBERT_note_f + '', '9'], [Lang.Blocks.ALBERT_note_f + '#', '10'], [Lang.Blocks.ALBERT_note_g + '', '11'], [Lang.Blocks.ALBERT_note_g + '#', '12'], [Lang.Blocks.ALBERT_note_a + '', '13'], [Lang.Blocks.ALBERT_note_b + 'b', '14'], [Lang.Blocks.ALBERT_note_b + '', '15']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.notes'
                    }, {
                        type: 'Dropdown',
                        options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringOrNumberByValue
                    }]
                }]
            }
        },
        roboid_turtle_play_note_for_beats: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_note_c + '', '4'], [Lang.Blocks.ALBERT_note_c + '#', '5'], [Lang.Blocks.ALBERT_note_d + '', '6'], [Lang.Blocks.ALBERT_note_e + 'b', '7'], [Lang.Blocks.ALBERT_note_e + '', '8'], [Lang.Blocks.ALBERT_note_f + '', '9'], [Lang.Blocks.ALBERT_note_f + '#', '10'], [Lang.Blocks.ALBERT_note_g + '', '11'], [Lang.Blocks.ALBERT_note_g + '#', '12'], [Lang.Blocks.ALBERT_note_a + '', '13'], [Lang.Blocks.ALBERT_note_b + 'b', '14'], [Lang.Blocks.ALBERT_note_b + '', '15']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, null, '4', {
                    type: 'text',
                    params: ['0.5']
                }, null],
                type: 'roboid_turtle_play_note_for_beats'
            },
            paramsKeyMap: {
                INDEX: 0,
                NOTE: 1,
                OCTAVE: 2,
                VALUE: 3
            },
            class: 'turtle_sound',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    var note = script.getNumberField('NOTE', script);
                    var octave = script.getNumberField('OCTAVE', script);
                    var beat = script.getNumberValue('VALUE', script);
                    note += (octave - 1) * 12;
                    var timeValue = beat * 60 * 1000 / robot.tempo;
                    script.isStart = true;
                    script.timeFlag = 1;
                    packet.buzzer = 0;
                    packet.note = note;
                    robot.setSound(0);
                    if (timeValue > 100) {
                        var timer1 = setTimeout(function () {
                            packet.note = 0;
                            Entry.Roboid.removeTimeout(timer1);
                        }, timeValue - 100);
                        Entry.Roboid.timeouts.push(timer1);
                    }
                    var timer2 = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Roboid.removeTimeout(timer2);
                    }, timeValue);
                    Entry.Roboid.timeouts.push(timer2);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    packet.note = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_note(%1, %2, %3, %4)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ALBERT_note_c + '', '4'], [Lang.Blocks.ALBERT_note_c + '#', '5'], [Lang.Blocks.ALBERT_note_d + '', '6'], [Lang.Blocks.ALBERT_note_e + 'b', '7'], [Lang.Blocks.ALBERT_note_e + '', '8'], [Lang.Blocks.ALBERT_note_f + '', '9'], [Lang.Blocks.ALBERT_note_f + '#', '10'], [Lang.Blocks.ALBERT_note_g + '', '11'], [Lang.Blocks.ALBERT_note_g + '#', '12'], [Lang.Blocks.ALBERT_note_a + '', '13'], [Lang.Blocks.ALBERT_note_b + 'b', '14'], [Lang.Blocks.ALBERT_note_b + '', '15']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.notes'
                    }, {
                        type: 'Dropdown',
                        options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringOrNumberByValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_turtle_rest_for_beats: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['0.25']
                }, null],
                type: 'roboid_turtle_rest_for_beats'
            },
            paramsKeyMap: {
                INDEX: 0,
                VALUE: 1
            },
            class: 'turtle_sound',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                var packet = robot.packet;
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    var timeValue = script.getNumberValue('VALUE');
                    timeValue = timeValue * 60 * 1000 / robot.tempo;
                    packet.buzzer = 0;
                    packet.note = 0;
                    robot.setSound(0);
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Roboid.removeTimeout(timer);
                    }, timeValue);
                    Entry.Roboid.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_note_off(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_turtle_change_tempo_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['20']
                }, null],
                type: 'roboid_turtle_change_tempo_by'
            },
            paramsKeyMap: {
                INDEX: 0,
                VALUE: 1
            },
            class: 'turtle_sound',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                robot.tempo += script.getNumberValue('VALUE');
                if (robot.tempo < 1) robot.tempo = 1;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_tempo_by(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        roboid_turtle_set_tempo_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['60']
                }, null],
                type: 'roboid_turtle_set_tempo_to'
            },
            paramsKeyMap: {
                INDEX: 0,
                VALUE: 1
            },
            class: 'turtle_sound',
            isNotFor: ['roboid'],
            func: function func(sprite, script) {
                var index = script.getNumberValue('INDEX');
                var robot = Entry.Roboid.getTurtle(index);
                robot.tempo = script.getNumberValue('VALUE');
                if (robot.tempo < 1) robot.tempo = 1;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Roboid.turtle_tempo(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        // ----- akaii: add until here
        is_clicked: {
            color: '#AEB8FF',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Text',
                text: Lang.Blocks.JUDGEMENT_is_clicked,
                color: '#3D3D3D'
            }],
            events: {},
            def: {
                params: [null],
                type: 'is_clicked'
            },
            class: 'boolean_input',
            isNotFor: [],
            func: function func(sprite, script) {
                return Entry.stage.isClick;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Entry.is_mouse_clicked()',
                    blockType: 'param'
                }]
            }
        },
        is_press_some_key: {
            color: '#AEB8FF',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Keyboard',
                value: 81
            }, {
                type: 'Text',
                text: Lang.Blocks.JUDGEMENT_is_press_some_key_2,
                color: '#3D3D3D'
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'is_press_some_key'
            },
            pyHelpDef: {
                params: ['A&value', null],
                type: 'is_press_some_key'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'boolean_input',
            isNotFor: [],
            func: function func(sprite, script) {
                var keycode = Number(script.getField('VALUE', script));
                return Entry.pressedKeys.indexOf(keycode) >= 0;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Entry.is_key_pressed(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Keyboard',
                        value: '81',
                        converter: Entry.block.converters.keyboardCode
                    }]
                }]
            }
        },
        reach_something: {
            color: '#AEB8FF',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Text',
                text: Lang.Blocks.JUDGEMENT_reach_something_1,
                color: '#3D3D3D'
            }, {
                type: 'DropdownDynamic',
                value: null,
                menuName: 'collision',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_JUDGE
            }, {
                type: 'Text',
                text: Lang.Blocks.JUDGEMENT_reach_something_2,
                color: '#3D3D3D'
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'reach_something'
            },
            pyHelpDef: {
                params: [null, 'A&value', null],
                type: 'reach_something'
            },
            paramsKeyMap: {
                VALUE: 1
            },
            class: 'boolean_collision',
            isNotFor: [],
            func: function func(sprite, script) {
                if (!sprite.getVisible()) return false;
                var targetSpriteId = script.getField('VALUE', script);
                var reg = /wall/;
                var ath = 0.2;
                var object = sprite.object;
                var isWall = reg.test(targetSpriteId);
                var collision = ndgmr.checkPixelCollision;
                if (isWall) {
                    var wall = Entry.stage.wall;
                    switch (targetSpriteId) {
                        case 'wall':
                            return !!(collision(object, wall.up, ath, true) || collision(object, wall.down, ath, true) || collision(object, wall.left, ath, true) || collision(object, wall.right, ath, true));
                        case 'wall_up':
                            return !!collision(object, wall.up, ath, true);
                        case 'wall_down':
                            return !!collision(object, wall.down, ath, true);
                        case 'wall_right':
                            return !!collision(object, wall.right, ath, true);
                        case 'wall_left':
                            return !!collision(object, wall.left, ath, true);
                    }
                } else if (targetSpriteId == 'mouse') {
                    var stage = Entry.stage.canvas;
                    var pt = object.globalToLocal(stage.mouseX, stage.mouseY);
                    return object.hitTest(pt.x, pt.y);
                } else {
                    var targetSprite = Entry.container.getEntity(targetSpriteId);
                    if (targetSprite.type == 'textBox' || sprite.type == 'textBox') {
                        var targetBound = targetSprite.object.getTransformedBounds();
                        var bound = object.getTransformedBounds();
                        if (Entry.checkCollisionRect(bound, targetBound)) return true;
                        var clonedEntities = targetSprite.parent.clonedEntities;
                        for (var i = 0, len = clonedEntities.length; i < len; i++) {
                            var entity = clonedEntities[i];
                            if (entity.isStamp || !entity.getVisible()) continue;
                            if (Entry.checkCollisionRect(bound, entity.object.getTransformedBounds())) return true;
                        }
                    } else {
                        if (targetSprite.getVisible() && collision(object, targetSprite.object, ath, true)) return true;
                        var clonedEntities = targetSprite.parent.clonedEntities;
                        for (var i = 0, len = clonedEntities.length; i < len; i++) {
                            var entity = clonedEntities[i];
                            if (entity.isStamp || !entity.getVisible()) continue;
                            if (collision(object, entity.object, ath, true)) return true;
                        }
                    }
                }
                return false;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Entry.is_touched(%2)',
                    blockType: 'param',
                    textParams: [undefined, {
                        type: 'DropdownDynamic',
                        value: null,
                        menuName: 'collision',
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_JUDGE,
                        converter: Entry.block.converters.returnObjectOrStringValue,
                        codeMap: 'Entry.CodeMap.Entry.reach_something[1]'
                    }]
                }]
            }
        },
        boolean_comparison: {
            color: '#AEB8FF',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [['=', 'EQUAL'], ['<', 'SMALLER'], ['>', 'BIGGER']],
                value: 'EQUAL',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [null],
                type: 'boolean_comparison'
            },
            paramsKeyMap: {
                LEFTHAND: 0,
                OPERATOR: 1,
                RIGHTHAND: 2
            },
            func: function func(sprite, script) {
                var operator = script.getField('OPERATOR', script);
                var leftValue = script.getNumberValue('LEFTHAND', script);
                var rightValue = script.getNumberValue('RIGHTHAND', script);
                if (operator == 'EQUAL') return leftValue == rightValue;else if (operator == 'BIGGER') return leftValue > rightValue;else return leftValue < rightValue;
            },
            syntax: { js: [], py: [''] }
        },
        boolean_equal: {
            color: '#AEB8FF',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Text',
                text: '=',
                color: '#3D3D3D'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['10']
                }, null, {
                    type: 'number',
                    params: ['10']
                }],
                type: 'boolean_equal'
            },
            paramsKeyMap: {
                LEFTHAND: 0,
                RIGHTHAND: 2
            },
            class: 'boolean_compare',
            isNotFor: [],
            func: function func(sprite, script) {
                var leftValue = script.getStringValue('LEFTHAND', script);
                var rightValue = script.getStringValue('RIGHTHAND', script);
                return leftValue == rightValue;
            },
            syntax: { js: [], py: [''] }
        },
        boolean_bigger: {
            color: '#AEB8FF',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Text',
                text: '>',
                color: '#3D3D3D'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['10']
                }, null, {
                    type: 'number',
                    params: ['10']
                }],
                type: 'boolean_bigger'
            },
            paramsKeyMap: {
                LEFTHAND: 0,
                RIGHTHAND: 2
            },
            class: 'boolean_compare',
            isNotFor: [],
            func: function func(sprite, script) {
                var leftValue = script.getNumberValue('LEFTHAND', script);
                var rightValue = script.getNumberValue('RIGHTHAND', script);
                return leftValue > rightValue;
            },
            syntax: { js: [], py: [''] }
        },
        boolean_smaller: {
            color: '#AEB8FF',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Text',
                text: '<',
                color: '#3D3D3D'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['10']
                }, null, {
                    type: 'number',
                    params: ['10']
                }],
                type: 'boolean_smaller'
            },
            paramsKeyMap: {
                LEFTHAND: 0,
                RIGHTHAND: 2
            },
            class: 'boolean_compare',
            isNotFor: [],
            func: function func(sprite, script) {
                var leftValue = script.getNumberValue('LEFTHAND', script);
                var rightValue = script.getNumberValue('RIGHTHAND', script);
                return leftValue < rightValue;
            },
            syntax: { js: [], py: [''] }
        },
        boolean_and_or: {
            color: '#AEB8FF',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'boolean'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.JUDGEMENT_boolean_and, 'AND'], [Lang.Blocks.JUDGEMENT_boolean_or, 'OR']],
                value: 'AND',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'boolean'
            }],
            events: {},
            def: {
                params: [{ type: 'True' }, 'AND', { type: 'True' }],
                type: 'boolean_and_or'
            },
            defs: [{
                params: [{ type: 'True' }, 'AND', { type: 'True' }],
                type: 'boolean_and_or'
            }, {
                params: [{ type: 'True' }, 'OR', { type: 'False' }],
                type: 'boolean_and_or'
            }],
            pyHelpDef: {
                params: [{
                    type: 'boolean_shell',
                    params: ['A']
                }, 'AND', {
                    type: 'boolean_shell',
                    params: ['B']
                }],
                type: 'boolean_and_or'
            },
            paramsKeyMap: {
                LEFTHAND: 0,
                OPERATOR: 1,
                RIGHTHAND: 2
            },
            func: function func(sprite, script) {
                var operator = script.getField('OPERATOR', script);
                var leftValue = script.getBooleanValue('LEFTHAND', script);
                var rightValue = script.getBooleanValue('RIGHTHAND', script);
                if (operator == 'AND') return leftValue && rightValue;else return leftValue || rightValue;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '(%1 %2 %3)',
                    template: '%1 %2 %3',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'boolean'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.JUDGEMENT_boolean_and, 'AND'], [Lang.Blocks.JUDGEMENT_boolean_or, 'OR']],
                        converter: Entry.block.converters.returnOperator,
                        value: 'AND',
                        fontSize: 11
                    }, {
                        type: 'Block',
                        accept: 'boolean'
                    }]
                }]
            }
        },
        boolean_and: {
            color: '#AEB8FF',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'boolean'
            }, {
                type: 'Text',
                text: Lang.Blocks.JUDGEMENT_boolean_and,
                color: '#3D3D3D'
            }, {
                type: 'Block',
                accept: 'boolean'
            }],
            events: {},
            def: {
                params: [{
                    type: 'True'
                }, null, {
                    type: 'True'
                }],
                type: 'boolean_and'
            },
            pyHelpDef: {
                params: [{
                    type: 'boolean_shell',
                    params: ['A']
                }, null, {
                    type: 'boolean_shell',
                    params: ['B']
                }],
                type: 'boolean_and'
            },
            paramsKeyMap: {
                LEFTHAND: 0,
                RIGHTHAND: 2
            },
            class: 'boolean',
            isNotFor: [],
            func: function func(sprite, script) {
                var leftValue = script.getBooleanValue('LEFTHAND', script);
                var rightValue = script.getBooleanValue('RIGHTHAND', script);
                return leftValue && rightValue;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '(%1 and %3)',
                    template: '%1 and %3',
                    blockType: 'param',
                    dic: '&&'
                }]
            }
        },
        boolean_or: {
            color: '#AEB8FF',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'boolean'
            }, {
                type: 'Text',
                text: Lang.Blocks.JUDGEMENT_boolean_or,
                color: '#3D3D3D'
            }, {
                type: 'Block',
                accept: 'boolean'
            }],
            events: {},
            def: {
                params: [{ type: 'True' }, null, { type: 'False' }],
                type: 'boolean_or'
            },
            pyHelpDef: {
                params: [{
                    type: 'boolean_shell',
                    params: ['A']
                }, null, {
                    type: 'boolean_shell',
                    params: ['B']
                }],
                type: 'boolean_or'
            },
            paramsKeyMap: {
                LEFTHAND: 0,
                RIGHTHAND: 2
            },
            class: 'boolean',
            isNotFor: [],
            func: function func(sprite, script) {
                var leftValue = script.getBooleanValue('LEFTHAND', script);
                var rightValue = script.getBooleanValue('RIGHTHAND', script);
                return leftValue || rightValue;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '(%1 or %3)',
                    template: '%1 or %3',
                    blockType: 'param',
                    dic: '||'
                }]
            }
        },
        boolean_not: {
            color: '#AEB8FF',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Text',
                text: Lang.Blocks.JUDGEMENT_boolean_not_1,
                color: '#3D3D3D'
            }, {
                type: 'Block',
                accept: 'boolean'
            }, {
                type: 'Text',
                text: Lang.Blocks.JUDGEMENT_boolean_not_2,
                color: '#3D3D3D'
            }],
            events: {},
            def: {
                params: [null, { type: 'True' }, null],
                type: 'boolean_not'
            },
            pyHelpDef: {
                params: [null, { type: 'boolean_shell' }, null],
                type: 'boolean_not'
            },
            paramsKeyMap: {
                VALUE: 1
            },
            class: 'boolean',
            isNotFor: [],
            func: function func(sprite, script) {
                return !script.getBooleanValue('VALUE');
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'not (%2)',
                    template: 'not %2',
                    blockType: 'param',
                    textParams: [undefined, {
                        type: 'Block',
                        accept: 'Boolean'
                    }]
                }]
            }
        },
        true_or_false: {
            color: '#AEB8FF',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.JUDGEMENT_true, 'true'], [Lang.Blocks.JUDGEMENT_false, 'false']],
                value: 'true',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                VALUE: 0
            },
            func: function func(sprite, script) {
                var value = script.children[0].textContent;
                return value == 'true';
            },
            syntax: { js: [], py: [''] }
        },
        True: {
            color: '#AEB8FF',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Text',
                text: Lang.Blocks.JUDGEMENT_true,
                color: '#3D3D3D'
            }],
            events: {},
            def: {
                params: [null],
                type: 'True'
            },
            func: function func(sprite, script) {
                return true;
            },
            isPrimitive: true,
            syntax: { js: ['Scope', 'true'], py: ['True'] }
        },
        False: {
            color: '#AEB8FF',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Text',
                text: Lang.Blocks.JUDGEMENT_false,
                color: '#3D3D3D'
            }],
            events: {},
            def: {
                params: [null],
                type: 'False'
            },
            func: function func(sprite, script) {
                return false;
            },
            isPrimitive: true,
            syntax: { js: [], py: ['False'] }
        },
        boolean_basic_operator: {
            color: '#AEB8FF',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [['=', 'EQUAL'], ['>', 'GREATER'], ['<', 'LESS'], ['≥', 'GREATER_OR_EQUAL'], ['≤', 'LESS_OR_EQUAL']],
                value: 'EQUAL',
                fontSize: 11,
                noArrow: true
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['10']
                }, 'EQUAL', {
                    type: 'text',
                    params: ['10']
                }],
                type: 'boolean_basic_operator'
            },
            pyHelpDef: {
                params: [{
                    type: 'text',
                    params: ['A&value']
                }, 'EQUAL', {
                    type: 'text',
                    params: ['B&value']
                }],
                type: 'boolean_basic_operator'
            },
            defs: [{
                params: [{
                    type: 'text',
                    params: ['10']
                }, 'EQUAL', {
                    type: 'text',
                    params: ['10']
                }],
                type: 'boolean_basic_operator'
            }, {
                params: [{
                    type: 'text',
                    params: ['10']
                }, 'GREATER', {
                    type: 'text',
                    params: ['10']
                }],
                type: 'boolean_basic_operator'
            }, {
                params: [{
                    type: 'text',
                    params: ['10']
                }, 'LESS', {
                    type: 'text',
                    params: ['10']
                }],
                type: 'boolean_basic_operator'
            }, {
                params: [{
                    type: 'text',
                    params: ['10']
                }, 'GREATER_OR_EQUAL', {
                    type: 'text',
                    params: ['10']
                }],
                type: 'boolean_basic_operator'
            }, {
                params: [{
                    type: 'text',
                    params: ['10']
                }, 'LESS_OR_EQUAL', {
                    type: 'text',
                    params: ['10']
                }],
                type: 'boolean_basic_operator'
            }],
            paramsKeyMap: {
                LEFTHAND: 0,
                OPERATOR: 1,
                RIGHTHAND: 2
            },
            class: 'boolean_compare',
            isNotFor: [],
            func: function func(sprite, script) {
                var operator = script.getField('OPERATOR', script);
                var leftValue = script.getValue('LEFTHAND', script);
                var rightValue = script.getValue('RIGHTHAND', script);

                switch (operator) {
                    case 'EQUAL':
                        return leftValue == rightValue;
                    case 'GREATER':
                        return Number(leftValue) > Number(rightValue);
                    case 'LESS':
                        return Number(leftValue) < Number(rightValue);
                    case 'GREATER_OR_EQUAL':
                        return Number(leftValue) >= Number(rightValue);
                    case 'LESS_OR_EQUAL':
                        return Number(leftValue) <= Number(rightValue);
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: '(%1 %2 %3)',
                    template: '%1 %2 %3',
                    keyOption: 'boolean_basic_operator',
                    blockType: 'param',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [['=', 'EQUAL'], ['>', 'GREATER'], ['<', 'LESS'], ['≥', 'GREATER_OR_EQUAL'], ['≤', 'LESS_OR_EQUAL']],
                        value: 'EQUAL',
                        fontSize: 11,
                        noArrow: true,
                        converter: Entry.block.converters.returnOperator
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        }
        //endregion roboid 로두이노
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_roborobo.js":
/*!*************************************************!*\
  !*** ./src/playground/blocks/block_roborobo.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Roborobo_Roduino = {
    name: 'roborobo_roduino',
    url: 'http://www.roborobo.co.kr',
    imageName: 'roborobo_roduino.png',
    title: {
        "ko": "로두이노",
        "en": "Roduino"
    },
    INSTRUCTION: {
        DIGITAL_READ: 1,
        DIGITAL_SET_MODE: 2,
        DIGITAL_WRITE: 3,
        ANALOG_WRITE: 4,
        ANALOG_READ: 5,
        MOTOR: 6,
        COLOR: 7
    },
    setZero: function setZero() {
        Entry.hw.sendQueue.colorPin = 0;
        for (var port = 0; port < 14; port++) {
            Entry.hw.sendQueue[port] = 0;
        }
        this.ColorPin = [0, 0, 0];
        Entry.hw.update();
    },
    ColorPin: [0, 0, 0]
};

Entry.Roborobo_SchoolKit = {
    name: 'roborobo_schoolkit',
    url: 'http://www.roborobo.co.kr',
    imageName: 'roborobo_schoolkit.png',
    title: {
        "ko": "스쿨키트",
        "en": "School Kit"
    },
    pinMode: {
        INPUT: 0,
        OUTPUT: 1,
        ANALOG: 2,
        PWM: 3,
        SERVO: 4
    },
    inputPort: {
        ir: 7,
        sound: 8,
        contact: 9,
        cds: 10
    },
    setZero: function setZero() {
        Entry.hw.sendQueue.digitalPinMode = [];
        Entry.hw.sendQueue.servo = [false, false, false, false, false];
        for (var port = 0; port < 14; port++) {
            Entry.hw.sendQueue[port] = 0;
            Entry.hw.sendQueue.digitalPinMode[port] = 0;
        }
        Entry.hw.update();
    }
};

Entry.Roborobo_Roduino.getBlocks = function () {
    return {
        //region roduino 로두이노
        roduino_on_block: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [null],
                type: 'roduino_on_block'
            },
            paramsKeyMap: {},
            class: 'roduino_value',
            isNotFor: ['roborobo_roduino'],
            func: function func(sprite, script) {
                return '1';
            }
        },
        roduino_off_block: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [null],
                type: 'roduino_off_block'
            },
            paramsKeyMap: {},
            class: 'roduino_value',
            isNotFor: ['roborobo_roduino'],
            func: function func(sprite, script) {
                return '0';
            }
        },
        roduino_get_analog_number: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5']],
                value: '0',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            }
        },
        roduino_get_port_number: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8']],
                value: '2',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getStringField('PORT');
            }
        },
        roduino_get_analog_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'roduino_get_analog_number'
                }],
                type: 'roduino_get_analog_value'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'roduino_value',
            isNotFor: ['roborobo_roduino'],
            func: function func(sprite, script) {
                var signal = script.getValue('VALUE', script);
                return Entry.hw.getAnalogPortValue(signal);
            }
        },
        roduino_get_digital_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'roduino_get_port_number'
                }],
                type: 'roduino_get_digital_value'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'roduino_value',
            isNotFor: ['roborobo_roduino'],
            func: function func(sprite, script) {
                var signal = script.getNumberValue('VALUE', script);
                Entry.hw.sendQueue[0] = Entry.Roborobo_Roduino.INSTRUCTION.DIGITAL_READ;
                Entry.hw.sendQueue[1] = signal;
                Entry.hw.update();
                return Entry.hw.getDigitalPortValue(signal - 2);
            }
        },
        roduino_get_color: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.roborobo_color_red, 'red'], [Lang.Blocks.roborobo_color_green, 'green'], [Lang.Blocks.roborobo_color_blue, 'blue'], [Lang.Blocks.roborobo_color_yellow, 'yellow']],
                value: 'red',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null],
                type: 'roduino_get_color'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'roduino_value',
            isNotFor: ['roborobo_roduino'],
            func: function func(sprite, script) {
                var flag = 0;
                var signal = script.getField('VALUE', script);
                var value = [Entry.hw.portData[Entry.Roborobo_Roduino.ColorPin[0] - 2], Entry.hw.portData[Entry.Roborobo_Roduino.ColorPin[1] - 2], Entry.hw.portData[Entry.Roborobo_Roduino.ColorPin[2] - 2]];

                switch (signal) {
                    case 'red':
                        if (value[0] == 1 && value[1] == 0 && value[2] == 0) {
                            flag = 1;
                        }
                        break;
                    case 'green':
                        if (value[0] == 0 && value[1] == 1 && value[2] == 0) {
                            flag = 1;
                        }
                        break;
                    case 'blue':
                        if (value[0] == 0 && value[1] == 0 && value[2] == 1) {
                            flag = 1;
                        }
                        break;
                    case 'yellow':
                        if (value[0] == 1 && value[1] == 1 && value[2] == 1) {
                            flag = 1;
                        }
                        break;
                }
                return flag;
            }
        },
        roduino_set_digital: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.roborobo_on, 'on'], [Lang.Blocks.roborobo_off, 'off']],
                value: 'on',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'roduino_get_port_number'
                }, null, null],
                type: 'roduino_set_digital'
            },
            paramsKeyMap: {
                VALUE: 0,
                OPERATOR: 1
            },
            class: 'roduino_set',
            isNotFor: ['roborobo_roduino'],
            func: function func(sprite, script) {
                var pin = script.getNumberValue('VALUE', script);
                var operator = script.getField('OPERATOR');
                var value = operator == 'on' ? 1 : 0;

                // Entry.hw.sendQueue[0] = Entry.Roborobo_Roduino.INSTRUCTION.DIGITAL_WRITE;
                // Entry.hw.sendQueue[1] = pin;
                Entry.hw.setDigitalPortValue(pin, value);
                return script.callReturn();
            }
        },
        roduino_motor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.roborobo_motor1, 'motor1'], [Lang.Blocks.roborobo_motor2, 'motor2']],
                value: 'motor1',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.roborobo_motor_CW, 'cw'], [Lang.Blocks.roborobo_motor_CCW, 'ccw'], [Lang.Blocks.roborobo_motor_stop, 'stop']],
                value: 'cw',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'roduino_motor'
            },
            paramsKeyMap: {
                MODE: 0,
                OPERATOR: 1
            },
            class: 'roduino_set',
            isNotFor: ['roborobo_roduino'],
            func: function func(sprite, script) {
                var pin1 = 0;
                var pin2 = 0;
                var value1 = 0;
                var value2 = 0;
                var mode = script.getField('MODE');
                var operator = script.getField('OPERATOR');

                if (mode == 'motor1') {
                    pin1 = 9;
                    pin2 = 10;
                } else {
                    pin1 = 11;
                    pin2 = 12;
                }

                if (operator == 'cw') {
                    value1 = 1;
                    value2 = 0;
                } else if (operator == 'ccw') {
                    value1 = 0;
                    value2 = 1;
                } else {
                    value1 = 0;
                    value2 = 0;
                }
                Entry.hw.setDigitalPortValue(pin1, value1);
                Entry.hw.setDigitalPortValue(pin2, value2);
                return script.callReturn();
            }
        },
        roduino_set_color_pin: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['2']
                }, {
                    type: 'number',
                    params: ['3']
                }, {
                    type: 'number',
                    params: ['4']
                }, null],
                type: 'roduino_set_color_pin'
            },
            paramsKeyMap: {
                RED: 0,
                GREEN: 1,
                BLUE: 2
            },
            class: 'roduino_set',
            isNotFor: ['roborobo_roduino'],
            func: function func(sprite, script) {
                var redPin = script.getNumberValue('RED', script);
                var greenPin = script.getNumberValue('GREEN', script);
                var bluePin = script.getNumberValue('BLUE', script);

                Entry.Roborobo_Roduino.ColorPin = [redPin, greenPin, bluePin];
                Entry.hw.sendQueue[0] = Entry.Roborobo_Roduino.INSTRUCTION.COLOR;
                Entry.hw.sendQueue.colorPin = redPin;
                Entry.hw.update();
                return script.callReturn();
            }
        }
        //endregion roduino 로두이노
    };
};

Entry.Roborobo_SchoolKit.getBlocks = function () {
    return {
        //region schoolkit 스쿨키트
        schoolkit_on_block: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [null],
                type: 'schoolkit_on_block'
            },
            paramsKeyMap: {},
            class: 'schoolkit_value',
            isNotFor: ['roborobo_schoolkit'],
            func: function func(sprite, script) {
                return '1';
            }
        },
        schoolkit_off_block: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [null],
                type: 'schoolkit_off_block'
            },
            paramsKeyMap: {},
            class: 'schoolkit_value',
            isNotFor: ['roborobo_schoolkit'],
            func: function func(sprite, script) {
                return '0';
            }
        },
        schoolkit_get_out_port_number: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['OUT1', 2], ['OUT2', 3], ['OUT3', 4], ['OUT4', 5], ['OUT5', 6]],
                value: 2,
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getNumberField('PORT');
            }
        },
        schoolkit_get_servo_port_number: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['OUT1', 2], ['OUT2', 3], ['OUT3', 4]],
                value: 2,
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getNumberField('PORT');
            }
        },
        schoolkit_get_in_port_number: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['IN1', 7], ['IN2', 8], ['IN3', 9], ['IN4', 10], ['IN5', 11], ['IN6', 12], ['IN7', 13]],
                value: 7,
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null]
            },
            paramsKeyMap: {
                PORT: 0
            },
            func: function func(sprite, script) {
                return script.getNumberField('PORT');
            }
        },
        schoolkit_set_output: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.roborobo_on, 'on'], [Lang.Blocks.roborobo_off, 'off']],
                value: 'on',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'schoolkit_get_out_port_number'
                }, null, null],
                type: 'schoolkit_set_output'
            },
            paramsKeyMap: {
                VALUE: 0,
                OPERATOR: 1
            },
            class: 'schoolkit_set',
            isNotFor: ['roborobo_schoolkit'],
            func: function func(sprite, script) {
                var pin = script.getNumberValue('VALUE', script);
                var operator = script.getField('OPERATOR');
                var value = operator == 'on' ? 1 : 0;

                if (!Entry.hw.sendQueue.digitalPinMode) {
                    Entry.hw.sendQueue.digitalPinMode = {};
                }

                Entry.hw.sendQueue.digitalPinMode[pin] = Entry.Roborobo_SchoolKit.pinMode.OUTPUT;
                Entry.hw.sendQueue[pin] = value;
                return script.callReturn();
            }
        },
        schoolkit_get_input_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'schoolkit_get_in_port_number'
                }],
                type: 'schoolkit_get_input_value'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'schoolkit_value',
            isNotFor: ['roborobo_schoolkit'],
            func: function func(sprite, script) {
                var signal = script.getNumberValue('VALUE', script);
                return Entry.hw.portData[signal - 7];
            }
        },
        schoolkit_motor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.roborobo_motor1, 'motor1'], [Lang.Blocks.roborobo_motor2, 'motor2']],
                value: 'motor1',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.roborobo_motor_CW, 'cw'], [Lang.Blocks.roborobo_motor_CCW, 'ccw'], [Lang.Blocks.roborobo_motor_stop, 'stop']],
                value: 'cw',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['0']
                }, null, null],
                type: 'schoolkit_motor'
            },
            paramsKeyMap: {
                MODE: 0,
                VALUE: 1,
                OPERATOR: 2
            },
            class: 'schoolkit_set',
            isNotFor: ['roborobo_schoolkit'],
            func: function func(sprite, script) {
                var mode = script.getField('MODE');
                var pin = 0;
                var operator = script.getField('OPERATOR');
                var value = script.getNumberValue('VALUE');

                if (mode == 'motor1') {
                    pin = 0;
                } else {
                    pin = 1;
                }

                if (value > 255) {
                    value = 255;
                } else if (value < 0) {
                    value = 0;
                }

                if (!Entry.hw.sendQueue.digitalPinMode) {
                    Entry.hw.sendQueue.digitalPinMode = {};
                }

                Entry.hw.sendQueue.digitalPinMode[pin] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                Entry.hw.sendQueue.digitalPinMode[pin + 7] = Entry.Roborobo_SchoolKit.pinMode.PWM;
                if (operator == 'cw') {
                    Entry.hw.sendQueue[pin] = value;
                } else if (operator == 'ccw') {
                    Entry.hw.sendQueue[pin] = -value;
                } else if (operator == 'stop') {
                    Entry.hw.sendQueue[pin] = 0x00;
                }
                return script.callReturn();
            }
        },
        schoolkit_set_servo_value: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'schoolkit_get_servo_port_number'
                }, {
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'schoolkit_set_servo_value'
            },
            paramsKeyMap: {
                PIN: 0,
                VALUE: 1
            },
            class: 'schoolkit_set',
            isNotFor: ['roborobo_schoolkit'],
            func: function func(sprite, script) {
                var pin = script.getNumberValue('PIN', script);
                var value = script.getNumberValue('VALUE');

                if (!Entry.hw.sendQueue.digitalPinMode) {
                    Entry.hw.sendQueue.digitalPinMode = {};
                }

                if (!Entry.hw.sendQueue.servo) {
                    Entry.hw.sendQueue.servo = {};
                }

                Entry.hw.sendQueue.digitalPinMode[pin] = Entry.Roborobo_SchoolKit.pinMode.SERVO;

                if (value < 0) {
                    value = 0;
                } else if (value > 180) {
                    value = 180;
                }
                Entry.hw.sendQueue.servo[pin - 2] = true;
                Entry.hw.sendQueue[pin] = value;
                return script.callReturn();
            }
        }
        //endregion schoolkit 스쿨키트
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_robotis.js":
/*!************************************************!*\
  !*** ./src/playground/blocks/block_robotis.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Robotis_carCont = {
    INSTRUCTION: {
        NONE: 0,
        WRITE: 3,
        READ: 2
    },
    CONTROL_TABLE: {
        // [default address, default length, address (when reads together), length (when reads together)]
        CM_LED: [67, 1],
        CM_SPRING_RIGHT: [69, 1, 69, 2],
        CM_SPRING_LEFT: [70, 1, 69, 2],
        CM_SWITCH: [71, 1],
        CM_SOUND_DETECTED: [86, 1],
        CM_SOUND_DETECTING: [87, 1],
        CM_IR_LEFT: [91, 2, 91, 4],
        CM_IR_RIGHT: [93, 2, 91, 4],
        CM_CALIBRATION_LEFT: [95, 2],
        CM_CALIBRATION_RIGHT: [97, 2],

        AUX_MOTOR_SPEED_LEFT: [152, 2], // car_cont
        AUX_MOTOR_SPEED_RIGHT: [154, 2]
    },
    setZero: function setZero() {
        // instruction / address / length / value / default length
        Entry.hw.sendQueue['setZero'] = [1];
        this.update();
        this.setRobotisData(null);
        Entry.hw.sendQueue['setZero'] = null;
        this.update();
        this.setRobotisData([[Entry.Robotis_carCont.INSTRUCTION.WRITE, 152, 2, 0], [Entry.Robotis_carCont.INSTRUCTION.WRITE, 154, 2, 0]]);

        this.update();
    },
    name: 'robotis_carCont',
    url: 'http://www.robotis.com/index/product.php?cate_code=111310',
    imageName: 'robotis_carCont.png',
    title: {
        "ko": "로보티즈 로봇자동차",
        "en": "Robotis Robot car"
    },
    delay: 40,
    postCallReturn: function postCallReturn(script, data, ms) {
        if (ms <= 0) {
            this.setRobotisData(data);
            this.update();
            return script.callReturn();
        }

        if (!script.isStart) {
            script.isStart = true;
            script.timeFlag = 1;
            //data setting
            this.setRobotisData(data);
            this.update();

            //delay xx ms
            setTimeout(function () {
                script.timeFlag = 0;
            }, ms);

            return script;
        } else if (script.timeFlag == 1) {
            this.setRobotisData(null);
            this.update();
            return script;
        } else {
            delete script.timeFlag;
            delete script.isStart;
            Entry.engine.isContinue = false;
            this.update();
            return script.callReturn();
        }
    },
    wait: function wait(sq, ms) {
        Entry.hw.socket.send(JSON.stringify(sq));

        var start = new Date().getTime();
        var end = start;
        while (end < start + ms) {
            //wait XX ms
            end = new Date().getTime();
        }
    },
    update: function update() {
        Entry.hw.update();
        var ROBOTIS_DATA = Entry.hw.sendQueue['ROBOTIS_DATA'];
        if (ROBOTIS_DATA) {
            ROBOTIS_DATA.forEach(function (data) {
                data['send'] = true;
            });
        }
        this.setRobotisData(null);
    },
    filterSendData: function filterSendData() {
        var ROBOTIS_DATA = Entry.hw.sendQueue['ROBOTIS_DATA'];
        if (ROBOTIS_DATA) {
            return ROBOTIS_DATA.filter(function (data) {
                return data.send !== true;
            });
        } else {
            return null;
        }
    },
    setRobotisData: function setRobotisData(data) {
        var filterData = this.filterSendData();
        if (data == null) {
            Entry.hw.sendQueue['ROBOTIS_DATA'] = filterData;
        } else {
            Entry.hw.sendQueue['ROBOTIS_DATA'] = filterData ? filterData.concat(data) : data;
        }
    }
};

Entry.Robotis_openCM70 = {
    INSTRUCTION: {
        NONE: 0,
        WRITE: 3,
        READ: 2
    },
    CONTROL_TABLE: {
        // [default address, default length, address (when reads together), length (when reads together)]
        CM_LED_R: [79, 1],
        CM_LED_G: [80, 1],
        CM_LED_B: [81, 1],
        CM_BUZZER_INDEX: [84, 1],
        CM_BUZZER_TIME: [85, 1],
        CM_SOUND_DETECTED: [86, 1],
        CM_SOUND_DETECTING: [87, 1],
        CM_USER_BUTTON: [26, 1],
        CM_MOTION: [66, 1],

        AUX_SERVO_POSITION: [152, 2],
        AUX_IR: [168, 2],
        AUX_TOUCH: [202, 1],
        AUX_TEMPERATURE: [234, 1],
        AUX_ULTRASONIC: [242, 1],
        AUX_MAGNETIC: [250, 1],
        AUX_MOTION_DETECTION: [258, 1],
        AUX_COLOR: [266, 1],
        AUX_CUSTOM: [216, 2],
        AUX_BRIGHTNESS: [288, 2],
        AUX_HYDRO_THEMO_HUMIDITY: [274, 1],
        AUX_HYDRO_THEMO_TEMPER: [282, 1],

        AUX_SERVO_MODE: [126, 1],
        AUX_SERVO_SPEED: [136, 2],
        AUX_MOTOR_SPEED: [136, 2],
        AUX_LED_MODULE: [210, 1]
    },
    IRS_MODULEWRITE: {
        PORT3: false,
        PORT4: false,
        PORT5: false,
        PORT6: false
    },
    SERVO_MODULEWRITE: {
        PORT3: false,
        PORT4: false,
        PORT5: false,
        PORT6: false
    },
    setZero: function setZero() {
        // instruction / address / length / value / default length
        Entry.hw.sendQueue['setZero'] = [1];
        Entry.Robotis_carCont.update();
        Entry.Robotis_carCont.setRobotisData(null);
        Entry.hw.sendQueue['setZero'] = null;
        Entry.Robotis_carCont.update();
        Entry.Robotis_carCont.setRobotisData([
        /*[Entry.Robotis_openCM70.INSTRUCTION.WRITE, 136, 2, 0],
        [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 138, 2, 0],
        [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 140, 2, 0],
        [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 142, 2, 0],
        [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 144, 2, 0],
        [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 146, 2, 0],*/
        [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 136, 12, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 79, 3, 0],
        /*[Entry.Robotis_openCM70.INSTRUCTION.WRITE, 79, 1, 0],
        [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 80, 1, 0],
        [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 81, 1, 0],*/
        [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 86, 1, 0], // 최종 소리 // add by kjs start 170605
        [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 108, 4, 0]]
        /*[Entry.Robotis_openCM70.INSTRUCTION.WRITE, 108, 1, 0], // port 3
        [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 109, 1, 0], // port 4
        [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 110, 1, 0], // port 5
        [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 111, 1, 0] // port 6 // add by kjs end 170605*/
        );

        Entry.Robotis_carCont.update();

        Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT3 = false;
        Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT4 = false;
        Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT5 = false;
        Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT6 = false;

        Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT3 = false;
        Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT4 = false;
        Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT5 = false;
        Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT6 = false;
        /*
        Entry.hw.sendQueue['temp'] = [0];
        Entry.Robotis_carCont.update();
        Entry.hw.sendQueue['temp'] = null;*/
        //Entry.Robotis_carCont.update();
    },
    name: 'robotis_openCM70',
    url: 'http://www.robotis.com/index/product.php?cate_code=111310',
    imageName: 'robotis_openCM70.png',
    title: {
        "ko": "로보티즈 IoT",
        "en": "Robotis Open CM70"
    },
    delay: 15
};

Entry.Robotis_carCont.getBlocks = function () {
    return {
        //region robotis 로보티즈 carCont
        robotis_carCont_sensor_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_cm_spring_left, 'CM_SPRING_LEFT'], [Lang.Blocks.robotis_cm_spring_right, 'CM_SPRING_RIGHT'], [Lang.Blocks.robotis_cm_switch, 'CM_SWITCH'], [Lang.Blocks.robotis_cm_sound_detected, 'CM_SOUND_DETECTED'], [Lang.Blocks.robotis_cm_sound_detecting, 'CM_SOUND_DETECTING'], [Lang.Blocks.robotis_cm_ir_left, 'CM_IR_LEFT'], [Lang.Blocks.robotis_cm_ir_right, 'CM_IR_RIGHT'], [Lang.Blocks.robotis_cm_calibration_left, 'CM_CALIBRATION_LEFT'], [Lang.Blocks.robotis_cm_calibration_right, 'CM_CALIBRATION_RIGHT']],
                value: 'CM_SPRING_LEFT',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'robotis_carCont_sensor_value'
            },
            paramsKeyMap: {
                SENSOR: 0
            },
            class: 'robotis_carCont_cm',
            isNotFor: ['robotis_carCont'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var data_instruction = Entry.Robotis_carCont.INSTRUCTION.READ;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                var data_default_address = 0;
                var data_default_length = 0;

                var sensor = script.getStringField('SENSOR');

                if (sensor == 'CM_SPRING_LEFT') {
                    data_default_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[0];
                    data_default_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[1];
                    data_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[2];
                    data_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[3];
                } else if (sensor == 'CM_SPRING_RIGHT') {
                    data_default_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[0];
                    data_default_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[1];
                    data_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[2];
                    data_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[3];
                } else if (sensor == 'CM_SWITCH') {
                    data_default_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[0];
                    data_default_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[1];
                    data_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[0];
                    data_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[1];
                } else if (sensor == 'CM_SOUND_DETECTED') {
                    data_default_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[0];
                    data_default_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[1];
                    data_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[0];
                    data_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[1];
                } else if (sensor == 'CM_SOUND_DETECTING') {
                    data_default_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[0];
                    data_default_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[1];
                    data_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[0];
                    data_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[1];
                } else if (sensor == 'CM_IR_LEFT') {
                    data_default_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[0];
                    data_default_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[1];
                    data_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[2];
                    data_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[3];
                } else if (sensor == 'CM_IR_RIGHT') {
                    data_default_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[0];
                    data_default_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[1];
                    data_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[2];
                    data_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[3];
                } else if (sensor == 'CM_CALIBRATION_LEFT') {
                    data_default_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[0];
                    data_default_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[1];
                    data_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[0];
                    data_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[1];
                } else if (sensor == 'CM_CALIBRATION_RIGHT') {
                    data_default_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[0];
                    data_default_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[1];
                    data_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[0];
                    data_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[1];
                } else if (sensor == 'CM_BUTTON_STATUS') {
                    data_default_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[0];
                    data_default_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[1];
                    data_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[0];
                    data_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[1];
                }

                //Entry.Robotis_carCont.setRobotisData([[data_instruction, data_address, data_length, data_value, data_default_length]]);
                //// Entry.hw.socket.send(JSON.stringify(Entry.hw.sendQueue));
                //Entry.Robotis_carCont.update();
                //
                //return Entry.hw.portData[data_default_address];

                if (Entry.hw.sendQueue.prevAddress && Entry.hw.sendQueue.prevAddress == data_default_address) {
                    if (Entry.hw.sendQueue.prevTime && new Date() - Entry.hw.sendQueue.prevTime < 300) {
                        //throw new Entry.Utils.AsyncError();
                        return Entry.hw.sendQueue.prevResult;
                    }
                }

                Entry.Robotis_carCont.setRobotisData([[data_instruction, data_address, data_length, data_value, data_default_length]]);
                // Entry.hw.socket.send(JSON.stringify(Entry.hw.sendQueue));
                Entry.Robotis_carCont.update();

                var result = Entry.hw.portData[data_default_address];
                Entry.hw.sendQueue.prevAddress = data_default_address;
                Entry.hw.sendQueue.prevTime = new Date();
                Entry.hw.sendQueue.prevResult = result;

                return result;
            },
            syntax: { js: [], py: ['Robotis.carcont_sensor_value(%1)'] }
        },
        robotis_carCont_cm_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_on, '1'], [Lang.Blocks.robotis_common_off, '0']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_on, '1'], [Lang.Blocks.robotis_common_off, '0']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'robotis_carCont_cm_led'
            },
            paramsKeyMap: {
                VALUE_LEFT: 0,
                VALUE_RIGHT: 1
            },
            class: 'robotis_carCont_cm',
            isNotFor: ['robotis_carCont'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var value_left = script.getField('VALUE_LEFT', script);
                var value_right = script.getField('VALUE_RIGHT', script);

                var data_instruction = Entry.Robotis_carCont.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                data_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_LED[0];
                data_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_LED[1];

                if (value_left == 1 && value_right == 1) {
                    data_value = 9;
                } else if (value_left == 1 && value_right == 0) {
                    data_value = 8;
                }
                if (value_left == 0 && value_right == 1) {
                    data_value = 1;
                }

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_carCont.delay);
            },
            syntax: { js: [], py: ['Robotis.carcont_cm_led(%1, %2)'] }
        },
        robotis_carCont_cm_sound_detected_clear: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'robotis_carCont_cm_sound_detected_clear'
            },
            class: 'robotis_carCont_cm',
            isNotFor: ['robotis_carCont'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length

                var data_instruction = Entry.Robotis_carCont.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                data_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[0];
                data_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[1];
                data_value = 0;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_carCont.delay);
            },
            syntax: { js: [], py: ['Robotis.carcont_cm_sound_clear()'] }
        },
        robotis_carCont_aux_motor_speed: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.General.left, 'LEFT'], [Lang.General.right, 'RIGHT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_clockwhise, 'CW'], [Lang.Blocks.robotis_common_counter_clockwhise, 'CCW']],
                value: 'CW',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'number',
                    params: ['500']
                }, null],
                type: 'robotis_carCont_aux_motor_speed'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                DIRECTION_ANGLE: 1,
                VALUE: 2
            },
            class: 'robotis_carCont_cm',
            isNotFor: ['robotis_carCont'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var direction = script.getField('DIRECTION', script);
                var directionAngle = script.getField('DIRECTION_ANGLE', script);
                var value = script.getNumberValue('VALUE');

                var data_instruction = Entry.Robotis_carCont.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                if (direction == 'LEFT') {
                    data_address = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_LEFT[0];
                    data_length = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_LEFT[1];
                } else {
                    data_address = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_RIGHT[0];
                    data_length = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_RIGHT[1];
                }

                if (directionAngle == 'CW') {
                    value = value + 1024;
                    if (value > 2047) {
                        value = 2047;
                    }
                } else {
                    if (value > 1023) {
                        value = 1023;
                    }
                }

                data_value = value;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_carCont.delay);
            },
            syntax: {
                js: [],
                py: ['Robotis.carcont_aux_motor_speed(%1, %2, %3)']
            }
        },
        robotis_carCont_aux_motor_speed2: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            template: '왼쪽 감속모터 속도를 %1, 출력값을 %2 (으)로 오른쪽 감속모터 속도를 %3, 출력값을 %4 (으)로 정하기 %5',
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_clockwhise, 'CW'], [Lang.Blocks.robotis_common_counter_clockwhise, 'CCW']],
                value: 'CW',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_clockwhise, 'CW'], [Lang.Blocks.robotis_common_counter_clockwhise, 'CCW']],
                value: 'CW',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['500']
                }, null, {
                    type: 'number',
                    params: ['500']
                }, null],
                type: 'robotis_carCont_aux_motor_speed2'
            },
            paramsKeyMap: {
                LEFT_ANGLE: 0,
                LEFT_VALUE: 1,
                RIGHT_ANGLE: 2,
                RIGHT_VALUE: 3
            },
            class: 'robotis_carCont_cm',
            isNotFor: ['robotis_carCont'],
            func: function func(sprite, script) {
                var data_instruction = Entry.Robotis_carCont.INSTRUCTION.WRITE,
                    address = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_LEFT[0];

                var leftAngle = script.getField('LEFT_ANGLE', script);
                var leftValue = script.getNumberValue('LEFT_VALUE');
                var rightAngle = script.getField('RIGHT_ANGLE', script);
                var rightValue = script.getNumberValue('RIGHT_VALUE');

                leftValue = Math.min(leftValue, 1023);
                leftValue = Math.max(leftValue, 0);
                rightValue = Math.min(rightValue, 1023);
                rightValue = Math.max(rightValue, 0);

                if (leftAngle === 'CW') {
                    leftValue += 1024;
                }
                if (rightAngle === 'CW') {
                    rightValue += 1024;
                }

                var value = leftValue + (rightValue << 16);
                var data_sendqueue = [[data_instruction, address, 4, value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_carCont.delay);
            }
        },
        robotis_carCont_cm_calibration: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.General.left, 'LEFT'], [Lang.General.right, 'RIGHT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'robotis_carCont_cm_calibration'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1
            },
            class: 'robotis_carCont_cm',
            isNotFor: ['robotis_carCont'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var direction = script.getField('DIRECTION', script);
                var value = script.getNumberValue('VALUE');

                var data_instruction = Entry.Robotis_carCont.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                if (direction == 'LEFT') {
                    data_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[0];
                    data_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[1];
                } else {
                    data_address = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[0];
                    data_length = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[1];
                }

                data_value = value;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_carCont.delay);

                // Entry.hw.sendQueue['ROBOTIS_DATA'] = [[data_instruction, data_address, data_length, data_value]];
                // update();
                // return script.callReturn();
            },
            syntax: { js: [], py: ['Robotis.carcont_cm_calibration(%1, %2)'] }
        }
        //endregion robotis 로보티즈
    };
};

Entry.Robotis_openCM70.getBlocks = function () {
    return {
        //region robotis 로보티즈 openCM70
        robotis_openCM70_cm_custom_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [['BYTE', 'BYTE'], ['WORD', 'WORD'], ['DWORD', 'DWORD']],
                value: 'BYTE',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'robotis_openCM70_cm_custom_value'
            },
            paramsKeyMap: {
                VALUE: 0,
                SIZE: 1
            },
            class: 'robotis_openCM70_custom',
            isNotFor: ['robotis_openCM70'],
            func: function func(sprite, script) {
                var scope = script.executor.scope;

                // instruction / address / length / value / default length
                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.READ;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                var data_default_address = 0;
                var data_default_length = 0;

                var size = script.getStringField('SIZE');

                if (size == 'BYTE') {
                    data_length = 1;
                } else if (size == 'WORD') {
                    data_length = 2;
                } else if (size == 'DWORD') {
                    data_length = 4;
                }

                data_address = script.getNumberValue('VALUE');

                data_default_address = data_address;
                data_default_length = data_length;

                if (Entry.hw.sendQueue.prevAddress && Entry.hw.sendQueue.prevAddress == data_default_address) {
                    if (Entry.hw.sendQueue.prevTime && new Date() - Entry.hw.sendQueue.prevTime < 200) {
                        //throw new Entry.Utils.AsyncError();
                        return Entry.hw.sendQueue.prevResult;
                    }
                }

                Entry.Robotis_carCont.setRobotisData([[data_instruction, data_address, data_length, data_value, data_default_length]]);
                // Entry.hw.socket.send(JSON.stringify(Entry.hw.sendQueue));
                Entry.Robotis_carCont.update();

                var result = Entry.hw.portData[data_default_address];
                Entry.hw.sendQueue.prevAddress = data_default_address;
                Entry.hw.sendQueue.prevTime = new Date();
                Entry.hw.sendQueue.prevResult = result;

                return result;
            },
            syntax: {
                js: [],
                py: ['Robotis.opencm70_cm_custom_value(%1, %2)']
            }
        },
        robotis_openCM70_sensor_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_cm_sound_detected, 'CM_SOUND_DETECTED'], [Lang.Blocks.robotis_cm_sound_detecting, 'CM_SOUND_DETECTING'], [Lang.Blocks.robotis_cm_user_button, 'CM_USER_BUTTON']],
                value: 'CM_SOUND_DETECTED',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'robotis_openCM70_sensor_value'
            },
            paramsKeyMap: {
                SENSOR: 0
            },
            class: 'robotis_openCM70_cm',
            isNotFor: ['robotis_openCM70'],
            func: function func(sprite, script) {
                var scope = script.executor.scope;

                scope.isStart = true;
                scope.count = 0;
                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.READ;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                var data_default_address = 0;
                var data_default_length = 0;

                var sensor = script.getStringField('SENSOR');

                var increase = 0;

                if (sensor == 'CM_SOUND_DETECTED') {
                    data_default_address = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[0];
                    data_default_length = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[1];
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[1];
                } else if (sensor == 'CM_SOUND_DETECTING') {
                    data_default_address = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[0];
                    data_default_length = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[1];
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[1];
                } else if (sensor == 'CM_USER_BUTTON') {
                    data_default_address = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[0];
                    data_default_length = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[1];
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[1];
                }

                data_default_address = data_default_address + increase * data_default_length;

                if (Entry.hw.sendQueue.prevAddress && Entry.hw.sendQueue.prevAddress == data_default_address) {
                    if (Entry.hw.sendQueue.prevTime && new Date() - Entry.hw.sendQueue.prevTime < 200) {
                        //throw new Entry.Utils.AsyncError();
                        return Entry.hw.sendQueue.prevResult;
                    }
                }

                Entry.Robotis_carCont.setRobotisData([[data_instruction, data_address, data_length, data_value, data_default_length]]);
                // Entry.hw.socket.send(JSON.stringify(Entry.hw.sendQueue));
                Entry.Robotis_carCont.update();

                var result = Entry.hw.portData[data_default_address];
                Entry.hw.sendQueue.prevAddress = data_default_address;
                Entry.hw.sendQueue.prevTime = new Date();
                Entry.hw.sendQueue.prevResult = result;

                return result;
            },
            syntax: { js: [], py: ['Robotis.opencm70_sensor_value(%1)'] }
        },
        robotis_openCM70_aux_sensor_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['3', 'PORT_3'], ['4', 'PORT_4'], ['5', 'PORT_5'], ['6', 'PORT_6']],
                value: 'PORT_3',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_aux_servo_position, 'AUX_SERVO_POSITION'], [Lang.Blocks.robotis_aux_ir, 'AUX_IR'], [Lang.Blocks.robotis_aux_touch, 'AUX_TOUCH'], [Lang.Blocks.robotis_aux_brightness, 'AUX_BRIGHTNESS'], [Lang.Blocks.robotis_aux_hydro_themo_humidity, 'AUX_HYDRO_THEMO_HUMIDITY'], [Lang.Blocks.robotis_aux_hydro_themo_temper, 'AUX_HYDRO_THEMO_TEMPER'], [Lang.Blocks.robotis_aux_temperature, 'AUX_TEMPERATURE'], [Lang.Blocks.robotis_aux_ultrasonic, 'AUX_ULTRASONIC'], [Lang.Blocks.robotis_aux_magnetic, 'AUX_MAGNETIC'], [Lang.Blocks.robotis_aux_motion_detection, 'AUX_MOTION_DETECTION'], [Lang.Blocks.robotis_aux_color, 'AUX_COLOR'], [Lang.Blocks.robotis_aux_custom, 'AUX_CUSTOM']],
                value: 'AUX_SERVO_POSITION',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'robotis_openCM70_aux_sensor_value'
            },
            paramsKeyMap: {
                PORT: 0,
                SENSOR: 1
            },
            class: 'robotis_openCM70_cm',
            isNotFor: ['robotis_openCM70'],
            func: function func(sprite, script) {
                var scope = script.executor.scope;

                // instruction / address / length / value / default length
                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.READ;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                var data_default_address = 0;
                var data_default_length = 0;

                var port = script.getStringField('PORT');
                var sensor = script.getStringField('SENSOR');

                var increase = 0;
                if (port == 'PORT_3') {
                    increase = 2;
                } else if (port == 'PORT_4') {
                    increase = 3;
                } else if (port == 'PORT_5') {
                    increase = 4;
                } else if (port == 'PORT_6') {
                    increase = 5;
                }

                if (sensor == 'AUX_SERVO_POSITION') {
                    data_default_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0];
                    data_default_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1];
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1];
                } else if (sensor == 'AUX_IR') {
                    data_default_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[0];
                    data_default_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[1];
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[1];
                } else if (sensor == 'AUX_TOUCH') {
                    data_default_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[0];
                    data_default_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[1];
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[1];
                } else if (sensor == 'AUX_TEMPERATURE') {
                    data_default_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[0];
                    data_default_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[1];
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[1];
                } else if (sensor == 'AUX_BRIGHTNESS') {
                    data_default_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[0];
                    data_default_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[1];
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[1];
                } else if (sensor == 'AUX_HYDRO_THEMO_HUMIDITY') {
                    data_default_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[0];
                    data_default_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[1];
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[1];
                } else if (sensor == 'AUX_HYDRO_THEMO_TEMPER') {
                    data_default_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[0];
                    data_default_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[1];
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[1];
                } else if (sensor == 'AUX_ULTRASONIC') {
                    data_default_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[0];
                    data_default_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[1];
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[1];
                } else if (sensor == 'AUX_MAGNETIC') {
                    data_default_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[0];
                    data_default_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[1];
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[1];
                } else if (sensor == 'AUX_MOTION_DETECTION') {
                    data_default_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[0];
                    data_default_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[1];
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[1];
                } else if (sensor == 'AUX_COLOR') {
                    data_default_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[0];
                    data_default_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[1];
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[1];
                } else if (sensor == 'AUX_CUSTOM') {
                    data_default_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[0];
                    data_default_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[1];
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[1];
                }

                data_default_address = data_default_address + increase * data_default_length;
                data_address = data_default_address;
                // if (increase != 0) {
                // data_length = 6 * data_default_length;
                // }

                if (Entry.hw.sendQueue.prevAddress && Entry.hw.sendQueue.prevAddress == data_default_address) {
                    if (Entry.hw.sendQueue.prevTime && new Date() - Entry.hw.sendQueue.prevTime < 200) {
                        //throw new Entry.Utils.AsyncError();
                        return Entry.hw.sendQueue.prevResult;
                    }
                }

                Entry.Robotis_carCont.setRobotisData([[data_instruction, data_address, data_length, data_value, data_default_length]]);
                // Entry.hw.socket.send(JSON.stringify(Entry.hw.sendQueue));
                Entry.Robotis_carCont.update();

                var result = Entry.hw.portData[data_default_address];
                Entry.hw.sendQueue.prevAddress = data_default_address;
                Entry.hw.sendQueue.prevTime = new Date();
                Entry.hw.sendQueue.prevResult = result;

                return result;
            },
            syntax: {
                js: [],
                py: ['Robotis.opencm70_aux_sensor_value(%1, %2)']
            }
        },
        robotis_openCM70_cm_buzzer_index: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.General.note_a + '(0)', '0'], [Lang.General.note_a + '#(1)', '1'], [Lang.General.note_b + '(2)', '2'], [Lang.General.note_c + '(3)', '3'], [Lang.General.note_c + '#(4)', '4'], [Lang.General.note_d + '(5)', '5'], [Lang.General.note_d + '#(6)', '6'], [Lang.General.note_e + '(7)', '7'], [Lang.General.note_f + '(8)', '8'], [Lang.General.note_f + '#(9)', '9'], [Lang.General.note_g + '(10)', '10'], [Lang.General.note_g + '#(11)', '11'], [Lang.General.note_a + '(12)', '12'], [Lang.General.note_a + '#(13)', '13'], [Lang.General.note_b + '(14)', '14'], [Lang.General.note_c + '(15)', '15'], [Lang.General.note_c + '#(16)', '16'], [Lang.General.note_d + '(17)', '17'], [Lang.General.note_d + '#(18)', '18'], [Lang.General.note_e + '(19)', '19'], [Lang.General.note_f + '(20)', '20'], [Lang.General.note_f + '#(21)', '21'], [Lang.General.note_g + '(22)', '22'], [Lang.General.note_g + '#(23)', '23'], [Lang.General.note_a + '(24)', '24'], [Lang.General.note_a + '#(25)', '25'], [Lang.General.note_b + '(26)', '26'], [Lang.General.note_c + '(27)', '27'], [Lang.General.note_c + '#(28)', '28'], [Lang.General.note_d + '(29)', '29'], [Lang.General.note_d + '#(30)', '30'], [Lang.General.note_e + '(31)', '31'], [Lang.General.note_f + '(32)', '32'], [Lang.General.note_f + '#(33)', '33'], [Lang.General.note_g + '(34)', '34'], [Lang.General.note_g + '#(35)', '35'], [Lang.General.note_a + '(36)', '36'], [Lang.General.note_a + '#(37)', '37'], [Lang.General.note_b + '(38)', '38'], [Lang.General.note_c + '(39)', '39'], [Lang.General.note_c + '#(40)', '40'], [Lang.General.note_d + '(41)', '41'], [Lang.General.note_d + '#(42)', '42'], [Lang.General.note_e + '(43)', '43'], [Lang.General.note_f + '(44)', '44'], [Lang.General.note_f + '#(45)', '45'], [Lang.General.note_g + '(46)', '46'], [Lang.General.note_g + '#(47)', '47'], [Lang.General.note_a + '(48)', '48'], [Lang.General.note_a + '#(49)', '49'], [Lang.General.note_b + '(50)', '50'], [Lang.General.note_c + '(51)', '51']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['1']
                }, null],
                type: 'robotis_openCM70_cm_buzzer_index'
            },
            paramsKeyMap: {
                CM_BUZZER_INDEX: 0,
                CM_BUZZER_TIME: 1
            },
            class: 'robotis_openCM70_cm',
            isNotFor: ['robotis_openCM70'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var cmBuzzerIndex = script.getField('CM_BUZZER_INDEX', script);
                var cmBuzzerTime = script.getNumberValue('CM_BUZZER_TIME', script);

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address_1 = 0;
                var data_length_1 = 0;
                var data_value_1 = 0;
                var data_address_2 = 0;
                var data_length_2 = 0;
                var data_value_2 = 0;
                var interval = 100;

                data_address_1 = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[0];
                data_length_1 = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[1];
                // data_value_1 = cmBuzzerTime * 10;
                // TODO 텍스트 입력으로 바꾸고 최대는 5초 : 0.5 초 하려면 5를 입력  - console.log(parseInt(0.59 * 10)); max 는 5초
                data_value_1 = parseInt(cmBuzzerTime * 10);
                if (data_value_1 > 50) {
                    data_value_1 = 50;
                }

                data_address_2 = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[0];
                data_length_2 = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[1];
                data_value_2 = cmBuzzerIndex;

                var data_sendqueue = [[data_instruction, data_address_1, data_length_1, data_value_1], [data_instruction, data_address_2, data_length_2, data_value_2]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, cmBuzzerTime * 1000 + interval);
            },
            syntax: {
                js: [],
                py: ['Robotis.opencm70_cm_buzzer_index(%1, %2)']
            }
        },
        robotis_openCM70_cm_buzzer_melody: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8'], ['9', '9'], ['10', '10'], ['11', '11'], ['12', '12'], ['13', '13'], ['14', '14'], ['15', '15'], ['16', '16'], ['17', '17'], ['18', '18'], ['19', '19'], ['20', '20'], ['21', '21'], ['22', '22'], ['23', '23'], ['24', '24']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'robotis_openCM70_cm_buzzer_melody'
            },
            paramsKeyMap: {
                CM_BUZZER_MELODY: 0
            },
            class: 'robotis_openCM70_cm',
            isNotFor: ['robotis_openCM70'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var cmBuzzerMelody = script.getField('CM_BUZZER_MELODY', script);

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address_1 = 0;
                var data_length_1 = 0;
                var data_value_1 = 0;
                var data_address_2 = 0;
                var data_length_2 = 0;
                var data_value_2 = 0;
                var interval = 100;

                data_address_1 = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[0];
                data_length_1 = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[1];
                data_value_1 = 255;

                data_address_2 = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[0];
                data_length_2 = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[1];
                data_value_2 = cmBuzzerMelody;

                var data_sendqueue = [[data_instruction, data_address_1, data_length_1, data_value_1], [data_instruction, data_address_2, data_length_2, data_value_2]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, 1000 + interval);
            },
            syntax: { js: [], py: ['Robotis.opencm70_cm_buzzer_melody(%1)'] }
        },
        robotis_openCM70_cm_sound_detected_clear: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'robotis_openCM70_cm_sound_detected_clear'
            },
            class: 'robotis_openCM70_cm',
            isNotFor: ['robotis_openCM70'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                data_address = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[0];
                data_length = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[1];
                data_value = 0;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_openCM70.delay);
            },
            syntax: { js: [], py: ['Robotis.opencm70_cm_sound_clear()'] }
        },
        robotis_openCM70_cm_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_red_color, 'CM_LED_R'], [Lang.Blocks.robotis_common_green_color, 'CM_LED_G'], [Lang.Blocks.robotis_common_blue_color, 'CM_LED_B']],
                value: 'CM_LED_R',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_on, '1'], [Lang.Blocks.robotis_common_off, '0']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'robotis_openCM70_cm_led'
            },
            paramsKeyMap: {
                CM_LED: 0,
                VALUE: 1
            },
            class: 'robotis_openCM70_cm',
            isNotFor: ['robotis_openCM70'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var cmLed = script.getField('CM_LED', script);
                var value = script.getField('VALUE', script);

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                if (cmLed == 'CM_LED_R') {
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_R[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_R[1];
                } else if (cmLed == 'CM_LED_G') {
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_G[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_G[1];
                } else if (cmLed == 'CM_LED_B') {
                    data_address = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_B[0];
                    data_length = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_B[1];
                }

                data_value = value;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_openCM70.delay);
            },
            syntax: { js: [], py: ['Robotis.opencm70_cm_led(%1, %2)'] }
        },
        robotis_openCM70_cm_motion: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['1']
                }, null],
                type: 'robotis_openCM70_cm_motion'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'robotis_openCM70_cm',
            isNotFor: ['robotis_openCM70'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                data_address = Entry.Robotis_openCM70.CONTROL_TABLE.CM_MOTION[0];
                data_length = Entry.Robotis_openCM70.CONTROL_TABLE.CM_MOTION[1];
                data_value = script.getNumberValue('VALUE', script);

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_openCM70.delay);
            },
            syntax: { js: [], py: ['Robotis.opencm70_cm_motion(%1)'] }
        },
        robotis_openCM70_aux_motor_speed: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_port_1, '1'], [Lang.Blocks.robotis_common_port_2, '2']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_clockwhise, 'CW'], [Lang.Blocks.robotis_common_counter_clockwhise, 'CCW']],
                value: 'CW',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'number',
                    params: ['500']
                }, null],
                type: 'robotis_openCM70_aux_motor_speed'
            },
            paramsKeyMap: {
                PORT: 0,
                DIRECTION_ANGLE: 1,
                VALUE: 2
            },
            class: 'robotis_openCM70_cm',
            isNotFor: ['robotis_openCM70'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var port = script.getField('PORT', script);
                var directionAngle = script.getField('DIRECTION_ANGLE', script);
                var value = script.getNumberValue('VALUE');

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[0];
                data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[1];

                data_address = data_address + (port - 1) * data_length;

                if (directionAngle == 'CW') {
                    value = value + 1024;
                    if (value > 2047) {
                        value = 2047;
                    }
                } else {
                    if (value > 1023) {
                        value = 1023;
                    }
                }

                data_value = value;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_openCM70.delay);
            },
            syntax: {
                js: [],
                py: ['Robotis.opencm70_aux_motor_speed(%1, %2, %3)']
            }
        },
        robotis_openCM70_aux_servo_mode: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_port_3, '3'], [Lang.Blocks.robotis_common_port_4, '4'], [Lang.Blocks.robotis_common_port_5, '5'], [Lang.Blocks.robotis_common_port_6, '6']],
                value: '3',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_wheel_mode, '0'], [Lang.Blocks.robotis_common_joint_mode, '1']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'robotis_openCM70_aux_servo_mode'
            },
            paramsKeyMap: {
                PORT: 0,
                MODE: 1
            },
            class: 'robotis_openCM70_cm',
            isNotFor: ['robotis_openCM70'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var port = script.getField('PORT', script);
                var mode = script.getField('MODE', script);

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[0];
                data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[1];

                data_address = data_address + (port - 1) * data_length;
                data_value = mode;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_openCM70.delay);
            },
            syntax: { js: [], py: ['Robotis.opencm70_aux_servo_mode(%1, %2)'] }
        },
        robotis_openCM70_aux_servo_speed: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_port_3, '3'], [Lang.Blocks.robotis_common_port_4, '4'], [Lang.Blocks.robotis_common_port_5, '5'], [Lang.Blocks.robotis_common_port_6, '6']],
                value: '3',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_clockwhise, 'CW'], [Lang.Blocks.robotis_common_counter_clockwhise, 'CCW']],
                value: 'CW',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {
                    type: 'number',
                    params: ['500']
                }, null],
                type: 'robotis_openCM70_aux_servo_speed'
            },
            paramsKeyMap: {
                PORT: 0,
                DIRECTION_ANGLE: 1,
                VALUE: 2
            },
            class: 'robotis_openCM70_cm',
            isNotFor: ['robotis_openCM70'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var port = script.getField('PORT', script);
                var directionAngle = script.getField('DIRECTION_ANGLE', script);
                var value = script.getNumberValue('VALUE');

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[0];
                data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[1];

                data_address = data_address + (port - 1) * data_length;

                if (directionAngle == 'CW') {
                    value = value + 1024;
                    if (value > 2047) {
                        value = 2047;
                    }
                } else {
                    if (value > 1023) {
                        value = 1023;
                    }
                }

                data_value = value;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_openCM70.delay);
            },
            syntax: {
                js: [],
                py: ['Robotis.opencm70_aux_servo_speed(%1, %2, %3)']
            }
        },
        robotis_openCM70_aux_servo_position: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_port_3, '3'], [Lang.Blocks.robotis_common_port_4, '4'], [Lang.Blocks.robotis_common_port_5, '5'], [Lang.Blocks.robotis_common_port_6, '6']],
                value: '3',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['512']
                }, null],
                type: 'robotis_openCM70_aux_servo_position'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'robotis_openCM70_cm',
            isNotFor: ['robotis_openCM70'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var port = script.getField('PORT', script);
                var value = script.getNumberValue('VALUE');

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0];
                data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1];

                data_address = data_address + (port - 1) * data_length;

                if (value > 1023) {
                    value = 1023;
                } else if (value < 0) {
                    value = 0;
                }

                data_value = value;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_openCM70.delay);
            },
            syntax: {
                js: [],
                py: ['Robotis.opencm70_aux_servo_position(%1, %2)']
            }
        },
        robotis_openCM70_aux_led_module: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_port_3, '3'], [Lang.Blocks.robotis_common_port_4, '4'], [Lang.Blocks.robotis_common_port_5, '5'], [Lang.Blocks.robotis_common_port_6, '6']],
                value: '3',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_cm_led_both + Lang.Blocks.robotis_common_off, '0'], [Lang.Blocks.robotis_cm_led_right + Lang.Blocks.robotis_common_on, '1'], [Lang.Blocks.robotis_cm_led_left + Lang.Blocks.robotis_common_on, '2'], [Lang.Blocks.robotis_cm_led_both + Lang.Blocks.robotis_common_on, '3']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'robotis_openCM70_aux_led_module'
            },
            paramsKeyMap: {
                PORT: 0,
                LED_MODULE: 1
            },
            class: 'robotis_openCM70_cm',
            isNotFor: ['robotis_openCM70'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var port = script.getField('PORT', script);
                var ledModule = script.getField('LED_MODULE', script);

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_LED_MODULE[0];
                data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_LED_MODULE[1];

                data_address = data_address + (port - 1) * data_length;
                data_value = ledModule;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_openCM70.delay);
            },
            syntax: { js: [], py: ['Robotis.opencm70_aux_led_module(%1, %2)'] }
        },
        robotis_openCM70_aux_custom: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotis_common_port_3, '3'], [Lang.Blocks.robotis_common_port_4, '4'], [Lang.Blocks.robotis_common_port_5, '5'], [Lang.Blocks.robotis_common_port_6, '6']],
                value: '3',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'robotis_openCM70_aux_custom'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'robotis_openCM70_cm',
            isNotFor: ['robotis_openCM70'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var port = script.getField('PORT', script);
                var value = script.getNumberValue('VALUE');

                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                data_address = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[0];
                data_length = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[1];

                data_address = data_address + (port - 1) * data_length;
                data_value = value;

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_openCM70.delay);
            },
            syntax: { js: [], py: ['Robotis.opencm70_aux_custom(%1, %2)'] }
        },
        robotis_openCM70_cm_custom: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['0']
                }, null],
                type: 'robotis_openCM70_cm_custom'
            },
            paramsKeyMap: {
                ADDRESS: 0,
                VALUE: 1
            },
            class: 'robotis_openCM70_custom',
            isNotFor: ['robotis_openCM70'],
            func: function func(sprite, script) {
                // instruction / address / length / value / default length
                var data_instruction = Entry.Robotis_openCM70.INSTRUCTION.WRITE;
                var data_address = 0;
                var data_length = 0;
                var data_value = 0;

                data_address = script.getNumberValue('ADDRESS');
                data_value = script.getNumberValue('VALUE');
                if (data_value > 65535) {
                    data_length = 4;
                } else if (data_value > 255) {
                    data_length = 2;
                } else {
                    data_length = 1;
                }

                var data_sendqueue = [[data_instruction, data_address, data_length, data_value]];
                return Entry.Robotis_carCont.postCallReturn(script, data_sendqueue, Entry.Robotis_openCM70.delay);
            },
            syntax: { js: [], py: ['Robotis.opencm70_cm_custom(%1, %2)'] }
        }
        //endregion robotis 로보티즈
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_robotori.js":
/*!*************************************************!*\
  !*** ./src/playground/blocks/block_robotori.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.robotori = {
    PORT_MAP: {
        A0: 0,
        A1: 0,
        A2: 0,
        A3: 0,
        A4: 0,
        A5: 0,
        D2: 0,
        D3: 0,
        D10: 0,
        D11: 0,
        D12: 0,
        D13: 0,
        AOUT5: 0,
        AOUT6: 0,
        AOUT9: 0,
        SERVO: 90,
        rightMotor: 0,
        leftMotor: 0
    },
    setZero: function setZero() {
        //Entry.hw.sendQueue.readablePorts = [];

        var portMap = Entry.robotori.PORT_MAP;
        var sq = Entry.hw.sendQueue;
        for (var port in portMap) {
            sq[port] = portMap[port];
            //sq[portMap[port] = 0;

            //Entry.hw.sendQueue.readablePorts.push(port);
        }
        Entry.hw.update();
        var Robotori = Entry.robotori;
    },
    name: 'robotori',
    url: 'http://www.robotori.com/',
    imageName: 'robotori.png',
    title: {
        "ko": "로보토리",
        "en": "robotori"
    },
    monitorTemplate: {
        imgPath: 'hw/robotori.png',
        width: 395,
        height: 372,
        listPorts: {
            A0: { name: 'A0', type: 'input', pos: { x: 0, y: 0 } },
            A1: { name: 'A1', type: 'input', pos: { x: 0, y: 0 } },
            A2: { name: 'A2', type: 'input', pos: { x: 0, y: 0 } },
            A3: { name: 'A3', type: 'input', pos: { x: 0, y: 0 } },
            A4: { name: 'A4', type: 'input', pos: { x: 0, y: 0 } },
            A5: { name: 'A5', type: 'input', pos: { x: 0, y: 0 } },
            D2: { name: 'D2', type: 'input', pos: { x: 0, y: 0 } },
            D3: { name: 'D3', type: 'input', pos: { x: 0, y: 0 } }
        },
        mode: 'both'
    }
};

Entry.robotori.getBlocks = function () {
    return {
        //region robotori 로보토리
        robotori_digitalInput: {
            color: '#00979D',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotori_D2_Input, 'D2'], [Lang.Blocks.robotori_D3_Input, 'D3']],
                value: 'D2',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null],
                type: 'robotori_digitalInput'
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'robotori_sensor',
            isNotFor: ['robotori'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('DEVICE');
                return pd[dev];
            }
        },
        robotori_analogInput: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotori_A0_Input, 'A0'], [Lang.Blocks.robotori_A1_Input, 'A1'], [Lang.Blocks.robotori_A2_Input, 'A2'], [Lang.Blocks.robotori_A3_Input, 'A3'], [Lang.Blocks.robotori_A4_Input, 'A4'], [Lang.Blocks.robotori_A5_Input, 'A5']],
                value: 'A0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'robotori_analogInput'
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'robotori_sensor',
            isNotFor: ['robotori'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('DEVICE');
                return pd[dev];
            }
        },
        robotori_digitalOutput: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotori_D10_Output, 'D10'], [Lang.Blocks.robotori_D11_Output, 'D11'], [Lang.Blocks.robotori_D12_Output, 'D12'], [Lang.Blocks.robotori_D13_Output, 'D13']],
                value: 'D10',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.robotori_On, 'ON'], [Lang.Blocks.robotori_Off, 'OFF']],
                value: 'ON',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'robotori_digitalOutput'
            },
            paramsKeyMap: {
                DEVICE: 0,
                VALUE: 1
            },
            class: 'robotori_sensor',
            isNotFor: ['robotori'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var dev = script.getStringField('DEVICE', script);
                var value = script.getStringField('VALUE', script);

                if (dev == 'D10' && value == 'ON') {
                    sq.D10 = 1;
                } else {
                    sq.D10 = 0;
                }

                if (dev == 'D11' && value == 'ON') {
                    sq.D11 = 1;
                } else {
                    sq.D11 = 0;
                }

                if (dev == 'D12' && value == 'ON') {
                    sq.D12 = 1;
                } else {
                    sq.D12 = 0;
                }

                if (dev == 'D13' && value == 'ON') {
                    sq.D13 = 1;
                } else {
                    sq.D13 = 0;
                }
                //sq.D13 = 1;
                return script.callReturn();
            }
        },
        robotori_analogOutput: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotori_analog5, 'AOUT5'], [Lang.Blocks.robotori_analog6, 'AOUT6'], [Lang.Blocks.robotori_analog9, 'AOUT9']],
                value: 'AOUT5',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'robotori_analogOutput'
            },
            paramsKeyMap: {
                DEVICE: 0,
                VALUE: 1
            },
            class: 'robotori_sensor',
            isNotFor: ['robotori'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var dev = script.getStringField('DEVICE', script);
                var value = script.getNumberValue('VALUE', script);

                if (dev == 'AOUT5') {
                    sq.AOUT5 = value;
                } else if (dev == 'AOUT6') {
                    sq.AOUT6 = value;
                } else if (dev == 'AOUT9') {
                    sq.AOUT9 = value;
                }

                return script.callReturn();
            }
        },
        robotori_servo: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['90']
                }, null],
                type: 'robotori_servo'
            },
            paramsKeyMap: {
                SERVO: 0
            },
            class: 'robotori_motor',
            isNotFor: ['robotori'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                sq.SERVO = script.getNumberValue('SERVO');

                return script.callReturn();
            }
        },
        robotori_dc_direction: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.robotori_DC_rightmotor, 'RIGHT_MOTOR'], [Lang.Blocks.robotori_DC_leftmotor, 'LEFT_MOTOR']],
                value: 'RIGHT_MOTOR',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.robotori_DC_STOP, 'STOP'], [Lang.Blocks.robotori_DC_CW, 'CW'], [Lang.Blocks.robotori_DC_CCW, 'CCW']],
                value: 'STOP',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'robotori_dc_direction'
            },
            paramsKeyMap: {
                DEVICE: 0,
                VALUE: 1
            },
            class: 'robotori_motor',
            isNotFor: ['robotori'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var dev = script.getStringField('DEVICE', script);
                var value = script.getStringField('VALUE', script);
                if (dev == 'RIGHT_MOTOR') {
                    if (value == 'STOP') {
                        sq.RIGHT_MOTOR = 0xff;
                    } else if (value == 'CW') {
                        sq.RIGHT_MOTOR = 0x00;
                    } else if (value == 'CCW') {
                        sq.RIGHT_MOTOR = 0xb4;
                    }
                }
                if (dev == 'LEFT_MOTOR') {
                    if (value == 'STOP') {
                        sq.LEFT_MOTOR = 0xff;
                    } else if (value == 'CW') {
                        sq.LEFT_MOTOR = 0x00;
                    } else if (value == 'CCW') {
                        sq.LEFT_MOTOR = 0xb4;
                    }
                }
                return script.callReturn();
            }
        }
        //endregion robotori 로보토리
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_rokoboard.js":
/*!**************************************************!*\
  !*** ./src/playground/blocks/block_rokoboard.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.rokoboard = {
    name: 'rokoboard',
    url: 'http://www.r-steam.com/',
    imageName: 'rokoboard.png',
    title: {
        "ko": "로코보드",
        "en": "rokoboard"
    },
    setZero: function setZero() {
        Entry.hw.sendQueue.readablePorts = [];
        for (var port = 0; port < 20; port++) {
            Entry.hw.sendQueue[port] = 0;
            Entry.hw.sendQueue.readablePorts.push(port);
        }
        Entry.hw.update();
    },
    monitorTemplate: {
        imgPath: 'hw/arduino.png',
        width: 605,
        height: 434,
        listPorts: {
            '2': {
                name: Lang.Hw.port_en + ' 2 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '3': {
                name: Lang.Hw.port_en + ' 3 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '4': {
                name: Lang.Hw.port_en + ' 4 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '5': {
                name: Lang.Hw.port_en + ' 5 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '6': {
                name: Lang.Hw.port_en + ' 6 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '7': {
                name: Lang.Hw.port_en + ' 7 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '8': {
                name: Lang.Hw.port_en + ' 8 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '9': {
                name: Lang.Hw.port_en + ' 9 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '10': {
                name: Lang.Hw.port_en + ' 10 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '11': {
                name: Lang.Hw.port_en + ' 11 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '12': {
                name: Lang.Hw.port_en + ' 12 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '13': {
                name: Lang.Hw.port_en + ' 13 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a0: {
                name: Lang.Hw.port_en + ' A0 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a1: {
                name: Lang.Hw.port_en + ' A1 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a2: {
                name: Lang.Hw.port_en + ' A2 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a3: {
                name: Lang.Hw.port_en + ' A3 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a4: {
                name: Lang.Hw.port_en + ' A4 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a5: {
                name: Lang.Hw.port_en + ' A5 ' + Lang.Hw.port_ko,
                type: 'input',
                pos: { x: 0, y: 0 }
            }
        },
        mode: 'both'
    }
};

Entry.rokoboard.getBlocks = function () {
    return {
        //region rokoboard 로코보드
        // rokoboard Implementation
        rokoboard_get_sensor_value_by_name: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.rokoboard_sensor_name_1, '1'], [Lang.Blocks.rokoboard_sensor_name_0, '0'], [Lang.Blocks.rokoboard_sensor_name_2, '2'], [Lang.Blocks.rokoboard_sensor_name_3, '3'], [Lang.Blocks.rokoboard_sensor_name_4, '4'], [Lang.Blocks.rokoboard_sensor_name_5, '5'], [Lang.Blocks.rokoboard_sensor_name_6, '6']],
                value: '1',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'rokoboard_get_sensor_value_by_name'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'rokoboard_sensor',
            isNotFor: ['rokoboard'],
            func: function func(sprite, script) {
                var port = script.getField('PORT', script);
                var ANALOG = Entry.hw.portData.ANALOG;
                return ANALOG ? ANALOG[port] || 0 : 0;
            }
        },
        rokoboard_is_button_pressed: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            template: '%1',
            params: [{
                type: 'Text',
                text: Lang.Blocks.rokoboard_string_1,
                color: '#fff'
            }],
            events: {},
            def: {
                params: [null],
                type: 'rokoboard_is_button_pressed'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'rokoboard_sensor',
            isNotFor: ['rokoboard'],
            func: function func(sprite, script) {
                var port = 7;
                var ANALOG = Entry.hw.portData.ANALOG;
                return ANALOG ? ANALOG[port] < 1 : false;
            }
        }
        //endregion rokoboard 로코보드
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_sensorboard.js":
/*!****************************************************!*\
  !*** ./src/playground/blocks/block_sensorboard.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.SensorBoard = {
    name: 'sensorBoard',
    url: 'http://www.neweducation.co.kr/',
    imageName: 'entrybt.png',
    title: {
        "ko": "E-센서보드",
        "en": "E-Sensorboard"
    },
    setZero: function setZero() {
        Entry.hw.sendQueue.readablePorts = [];
        for (var port = 0; port < 20; port++) {
            Entry.hw.sendQueue[port] = 0;
            Entry.hw.sendQueue.readablePorts.push(port);
        }
        Entry.hw.update();
    }
};

Entry.SensorBoard.getBlocks = function () {
    return {
        //region sensorBoard e센서보드
        sensorBoard_get_named_sensor_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['소리', '0'], ['빛 감지', '1'], ['슬라이더', '2'], ['온도', '3']],
                value: '0',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'sensorBoard_get_named_sensor_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'sensorBoard',
            isNotFor: ['sensorBoard'],
            func: function func(sprite, script) {
                return Entry.hw.getAnalogPortValue(script.getField('PORT', script));
            },
            syntax: { js: [], py: ['Sensorboard.sensor_value(%1)'] }
        },
        sensorBoard_is_button_pressed: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['빨간', '8'], ['파란', '9'], ['노랑', '10'], ['초록', '11']],
                value: '8',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'sensorBoard_is_button_pressed'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'sensorBoard',
            isNotFor: ['sensorBoard'],
            func: function func(sprite, script) {
                return Entry.hw.getDigitalPortValue(script.getNumberField('PORT', script));
            },
            syntax: { js: [], py: ['Sensorboard.is_button_pressed(%1)'] }
        },
        sensorBoard_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['빨간', '2'], ['초록', '3'], ['파란', '4'], ['노랑', '5']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['켜기', '255'], ['끄기', '0']],
                value: '255',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'sensorBoard_led'
            },
            paramsKeyMap: {
                PORT: 0,
                OPERATOR: 1
            },
            class: 'sensorBoard',
            isNotFor: ['sensorBoard'],
            func: function func(sprite, script) {
                Entry.hw.setDigitalPortValue(script.getField('PORT'), script.getNumberField('OPERATOR'));
                return script.callReturn();
            },
            syntax: { js: [], py: ['Sensorboard.led(%1, %2)'] }
        },
        //endregion sensorBoard e센서보드
        //region sensorBoard e센서보드
        sensorBoard_get_number_sensor_value: {
            parent: 'arduino_get_number_sensor_value',
            isNotFor: ['sensorBoard'],
            def: {
                params: [{
                    type: 'arduino_get_sensor_number'
                }],
                type: 'sensorBoard_get_number_sensor_value'
            },
            class: 'arduino_value',
            syntax: { js: [], py: ['SensorBoard.get_number_sensor_value(%1)'] }
        },
        sensorBoard_get_digital_value: {
            parent: 'arduino_get_digital_value',
            isNotFor: ['sensorBoard'],
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }],
                type: 'sensorBoard_get_digital_value'
            },
            class: 'arduino_value',
            syntax: { js: [], py: ['SensorBoard.get_digital_value(%1)'] }
        },
        sensorBoard_toggle_led: {
            parent: 'arduino_toggle_led',
            isNotFor: ['sensorBoard'],
            def: {
                params: [{
                    type: 'arduino_get_port_number'
                }, null, null],
                type: 'sensorBoard_toggle_led'
            },
            class: 'arduino_set',
            syntax: { js: [], py: ['SensorBoard.toggle_led(%1)'] }
        },
        sensorBoard_toggle_pwm: {
            parent: 'arduino_toggle_pwm',
            isNotFor: ['sensorBoard'],
            def: {
                params: [{
                    type: 'arduino_get_pwm_port_number'
                }, {
                    type: 'arduino_text',
                    params: ['255']
                }, null],
                type: 'sensorBoard_toggle_pwm'
            },
            class: 'arduino_set',
            syntax: { js: [], py: ['SensorBoard.toggle_pwm(%1, %2)'] }
        },
        sensorBoard_convert_scale: {
            parent: 'arduino_convert_scale',
            isNotFor: ['sensorBoard'],
            def: {
                params: [{
                    type: 'arduino_get_number_sensor_value',
                    params: [{
                        type: 'arduino_get_sensor_number',
                        id: 'bl5e'
                    }]
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'sensorBoard_convert_scale'
            },
            class: 'arduino',
            syntax: {
                js: [],
                py: ['SensorBoard.convert_scale(%1, %2, %3, %4, %5)']
            }
        }
        //endregion sensorBoard e센서보드
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_smartboard.js":
/*!***************************************************!*\
  !*** ./src/playground/blocks/block_smartboard.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.SmartBoard = {
    name: 'smartBoard',
    url: 'http://www.sciencebox.co.kr',
    imageName: 'smartboard.png',
    title: {
        "ko": "과학상자 코딩보드",
        "en": "Sciencebox Codingboard"
    },
    setZero: function setZero() {
        Entry.hw.sendQueue.readablePorts = [];
        for (var port = 2; port < 9; port++) {
            Entry.hw.sendQueue[port] = 0;
            Entry.hw.sendQueue.readablePorts.push(port);
        }
        Entry.hw.update();
    },
    monitorTemplate: {
        listPorts: {
            '2': {
                name: Lang.Hw.port_en + ' GS2 ',
                type: 'output',
                pos: { x: 0, y: 0 }
            },
            '3': {
                name: Lang.Hw.port_en + ' GS1 ',
                type: 'output',
                pos: { x: 0, y: 0 }
            },
            '4': {
                name: Lang.Hw.port_en + ' MT1 회전 방향 ',
                type: 'output',
                pos: { x: 0, y: 0 }
            },
            '5': {
                name: Lang.Hw.port_en + ' MT1 PWM ',
                type: 'output',
                pos: { x: 0, y: 0 }
            },
            '6': {
                name: Lang.Hw.port_en + ' MT2 PWM ',
                type: 'output',
                pos: { x: 0, y: 0 }
            },
            '7': {
                name: Lang.Hw.port_en + ' MT2 회전 방향 ',
                type: 'output',
                pos: { x: 0, y: 0 }
            },
            '8': {
                name: Lang.Hw.port_en + ' RELAY ',
                type: 'output',
                pos: { x: 0, y: 0 }
            },
            '9': {
                name: Lang.Hw.port_en + ' SM3 각도 ',
                type: 'output',
                pos: { x: 0, y: 0 }
            },
            '10': {
                name: Lang.Hw.port_en + ' SM2 각도 ',
                type: 'output',
                pos: { x: 0, y: 0 }
            },
            '11': {
                name: Lang.Hw.port_en + 'SM1 각도 ',
                type: 'output',
                pos: { x: 0, y: 0 }
            },
            '12': {
                name: Lang.Hw.port_en + ' 빨간 ' + Lang.Hw.button,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '13': {
                name: Lang.Hw.port_en + ' 노란 ' + Lang.Hw.button,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '14': {
                name: Lang.Hw.port_en + ' 초록 ' + Lang.Hw.button,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            '15': {
                name: Lang.Hw.port_en + ' 파란 ' + Lang.Hw.button,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a2: {
                name: Lang.Hw.port_en + ' 1번 ' + Lang.Hw.sensor,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a3: {
                name: Lang.Hw.port_en + ' 2번 ' + Lang.Hw.sensor,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a4: {
                name: Lang.Hw.port_en + ' 3번 ' + Lang.Hw.sensor,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            a5: {
                name: Lang.Hw.port_en + ' 4번 ' + Lang.Hw.sensor,
                type: 'input',
                pos: { x: 0, y: 0 }
            }
        },
        mode: 'both'
    }
};

Entry.SmartBoard.getBlocks = function () {
    return {
        //region smartBoard 스마트보드
        smartBoard_get_named_sensor_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['SEN1', '2'], ['SEN2', '3'], ['SEN3', '4'], ['SEN4', '5']],
                value: '2',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'smartBoard_get_named_sensor_value'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'smartBoard_sensor',
            isNotFor: ['smartBoard'],
            func: function func(sprite, script) {
                return Entry.hw.getAnalogPortValue(script.getField('PORT', script));
            }
        },
        smartBoard_convert_scale: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }],
            events: {},
            def: {
                params: [{
                    type: 'smartBoard_get_named_sensor_value'
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['1023']
                }, {
                    type: 'number',
                    params: ['0']
                }, {
                    type: 'number',
                    params: ['100']
                }],
                type: 'smartBoard_convert_scale'
            },
            paramsKeyMap: {
                VALUE1: 0,
                VALUE2: 1,
                VALUE3: 2,
                VALUE4: 3,
                VALUE5: 4
            },
            class: 'smartBoard_sensor',
            isNotFor: ['smartBoard'],
            func: function func(sprite, script) {
                var value1 = script.getNumberValue('VALUE1', script);
                var value2 = script.getNumberValue('VALUE2', script);
                var value3 = script.getNumberValue('VALUE3', script);
                var value4 = script.getNumberValue('VALUE4', script);
                var value5 = script.getNumberValue('VALUE5', script);
                var result = value1;
                if (value2 > value3) {
                    var swap = value2;
                    value2 = value3;
                    value3 = swap;
                }
                if (value4 > value5) {
                    var swap = value4;
                    value4 = value5;
                    value5 = swap;
                }
                result -= value2;
                result = result * ((value5 - value4) / (value3 - value2));
                result += value4;
                result = Math.min(value5, result);
                result = Math.max(value4, result);
                return Math.round(result);
            },
            syntax: {
                js: [],
                py: ['smartBoard.convert_scale(%1, %2, %3, %4, %5)']
            }
        },
        smartBoard_is_button_pressed: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['빨간', '12'], ['노란', '13'], ['초록', '14'], ['파랑', '15']],
                value: '12',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'smartBoard_is_button_pressed'
            },
            paramsKeyMap: {
                PORT: 0
            },
            class: 'smartBoard_button',
            isNotFor: ['smartBoard'],
            func: function func(sprite, script) {
                return Entry.hw.getDigitalPortValue(script.getNumberField('PORT', script));
            }
        },
        smartBoard_set_dc_motor_direction: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['MT1', '4'], ['MT2', '7']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['정', '0'], ['역', '255']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'smartBoard_set_dc_motor_direction'
            },
            paramsKeyMap: {
                PORT: 0,
                OPERATOR: 1
            },
            class: 'dc_motor',
            isNotFor: ['smartBoard'],
            func: function func(sprite, script) {
                Entry.hw.setDigitalPortValue(script.getField('PORT'), script.getNumberField('OPERATOR'));
                return script.callReturn();
            }
        },
        smartBoard_set_dc_motor_speed: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['MT1', '5'], ['MT2', '6']],
                value: '5',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['정지 시키기', '0'], ['매우 느린 속도로 돌리기', '70'], ['느린 속도로 돌리기', '115'], ['보통 속도로 돌리기', '160'], ['빠른 속도로 돌리기', '205'], ['매우 빠른 속도로 돌리기', '255']],
                value: '160',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'smartBoard_set_dc_motor_speed'
            },
            paramsKeyMap: {
                PORT: 0,
                OPERATOR: 1
            },
            class: 'dc_motor',
            isNotFor: ['smartBoard'],
            func: function func(sprite, script) {
                Entry.hw.setDigitalPortValue(script.getField('PORT'), script.getNumberField('OPERATOR'));
                return script.callReturn();
            }
        },
        smartBoard_set_dc_motor_pwm: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['MT1', '5'], ['MT2', '6']],
                value: '5',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'arduino_text',
                    params: ['255']
                }, null],
                type: 'smartBoard_set_dc_motor_pwm'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'dc_motor',
            isNotFor: ['smartBoard'],
            func: function func(sprite, script) {
                var port = script.getField('PORT');
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 0);
                value = Math.min(value, 255);
                Entry.hw.setDigitalPortValue(port, value);
                return script.callReturn();
            }
        },
        smartBoard_set_servo_speed: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['SM3', '9'], ['SM2', '10'], ['SM1', '11']],
                value: '9',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['느린 속도로', '187'], ['보통 속도로', '193'], ['빠른 속도로', '243']],
                value: '193',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'smartBoard_set_servo_speed'
            },
            paramsKeyMap: {
                PORT: 0,
                OPERATOR: 1
            },
            class: 'smartBoard_servo_motor',
            isNotFor: ['smartBoard'],
            func: function func(sprite, script) {
                Entry.hw.setDigitalPortValue(script.getField('PORT'), script.getNumberField('OPERATOR'));
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, 250);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    return script.callReturn();
                }
            }
        },
        smartBoard_set_servo_angle: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['SM3', '9'], ['SM2', '10'], ['SM1', '11']],
                value: '9',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'arduino_text',
                    params: ['180']
                }, null],
                type: 'smartBoard_set_servo_angle'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'smartBoard_servo_motor',
            isNotFor: ['smartBoard'],
            func: function func(sprite, script) {
                var port = script.getField('PORT');
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 1);
                value = Math.min(value, 180);
                Entry.hw.setDigitalPortValue(port, value);
                return script.callReturn();
            }
        },
        smartBoard_set_number_eight_pin: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['GS1', '3'], ['GS2', '2'], ['RELAY', '8']],
                value: '8',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['끄기', '0'], ['켜기', '255']],
                value: '0',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'smartBoard_set_number_eight_pin'
            },
            paramsKeyMap: {
                PORT: 0,
                OPERATOR: 1
            },
            class: 'ext',
            isNotFor: ['smartBoard'],
            func: function func(sprite, script) {
                Entry.hw.setDigitalPortValue(script.getField('PORT'), script.getNumberField('OPERATOR'));
                return script.callReturn();
            }
        },
        smartBoard_set_gs1_pwm: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'arduino_text',
                    params: ['255']
                }],
                type: 'smartBoard_set_gs1_pwm'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'ext',
            isNotFor: ['smartBoard'],
            func: function func(sprite, script) {
                var port = 3;
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, 0);
                value = Math.min(value, 255);
                Entry.hw.setDigitalPortValue(port, value);
                return script.callReturn();
            }
        }
        //endregion smartBoard 스마트보드
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_truerobot.js":
/*!**************************************************!*\
  !*** ./src/playground/blocks/block_truerobot.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.trueRobot = {
    name: 'trueRobot',
    url: 'http://www.sigongmedia.co.kr',
    imageName: 'truetrue.png',
    title: {
        "en": "TrueTrueRobot",
        "ko": "뚜루뚜루"
    },
    PORT_MAP: {
        singlemotor: 0x0a,
        dualmotor: 0x0a,
        colorled: 0x08,
        leds: 0x46,
        linetracer: 0x4c,
        led_line: 0x05,
        leftWheel: 0x09,
        rightWheel: 0x0a,
        allWheel: 0x0b,
        colorRed: 0,
        colorGreen: 0,
        colorBlue: 0,
        ledPort: 0,
        dualPort: 11
    },
    setZero: function setZero() {
        var portMap = Entry.trueRobot.PORT_MAP;
        var sq = Entry.hw.sendQueue;
        for (var port in portMap) {
            sq[port] = portMap[port];
        }
        Entry.hw.update();
        /*
        var trueRobot = Entry.trueRobot.DeviceID;
        trueRobot.leftWheel = 0;
        trueRobot.rightWheel = 0;
        trueRobot.colorRed = 0;
        trueRobot.colorGreen = 0;
        trueRobot.colorBlue = 0;
        */
    }
};

Entry.trueRobot.getBlocks = function () {
    return {
        //region TrueTrueRobot 뚜루뚜루로봇
        truetrue_get_linesensor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['Left_Out', 'L2'], ['Left_In', 'L1'], ['Right_In', 'R1'], ['Right_Out', 'R2']],
                value: 'Left_Out',
                fontSize: 11
            }],
            events: {},
            def: {
                params: ['L2'],
                type: 'truetrue_get_linesensor'
            },
            paramsKeyMap: {
                position: 0
            },
            class: 'trueRobot_sensor',
            isNotFor: ['trueRobot'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('position');
                return pd[dev];
            },
            syntax: { js: [], py: [] }
        },
        truetrue_get_proxisensor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['Left', 'ProxiLeft'], ['Right', 'ProxiRight']],
                value: 'Left',
                fontSize: 11
            }],
            events: {},
            def: {
                params: ['ProxiLeft'],
                type: 'truetrue_get_proxisensor'
            },
            paramsKeyMap: {
                position: 0
            },
            class: 'trueRobot_sensor',
            isNotFor: ['trueRobot'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('position');
                return pd[dev];
            },
            syntax: { js: [], py: [] }
        },
        truetrue_get_accsensor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['X-axis', 'AccX'], ['Y-axis', 'AccY'], ['Z-axis', 'AccZ'], ['Tilt', 'AccStatus']],
                value: 'X-axis',
                fontSize: 11
            }],
            events: {},
            def: {
                params: ['AccX'],
                type: 'truetrue_get_accsensor'
            },
            paramsKeyMap: {
                position: 0
            },
            class: 'trueRobot_sensor',
            isNotFor: ['trueRobot'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('position');
                return pd[dev];
            },
            syntax: { js: [], py: [] }
        },
        truetrue_get_bottomcolorsensor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['Red', 'BColorRed'], ['Green', 'BColorGreen'], ['Blue', 'BColorBlue'], ['ColorKey', 'BColorKey']],
                value: 'Red',
                fontSize: 11
            }],
            events: {},
            def: {
                params: ['BColorRed'],
                type: 'truetrue_get_bottomcolorsensor'
            },
            paramsKeyMap: {
                position: 0
            },
            class: 'trueRobot_sensor',
            isNotFor: ['trueRobot'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('position');
                return pd[dev];
            },
            syntax: { js: [], py: [] }
        },
        truetrue_get_frontcolorsensor: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['Left', 'FColorLeftKey'], ['Right', 'FColorRightKey']],
                value: 'Left',
                fontSize: 11
            }],
            events: {},
            def: {
                params: ['FColorLeftKey'],
                type: 'truetrue_get_frontcolorsensor'
            },
            paramsKeyMap: {
                position: 0
            },
            class: 'trueRobot_sensor',
            isNotFor: ['trueRobot'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('position');
                return pd[dev];
            },
            syntax: { js: [], py: [] }
        },
        truetrue_set_singlemotor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['Left', '9'], ['Right', '10']],
                value: 'Left',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: ['9', '0', null],
                type: 'truetrue_set_singlemotor'
            },
            paramsKeyMap: {
                PORT: 0,
                VALUE: 1
            },
            class: 'trueRobot_control',
            isNotFor: ['trueRobot'],
            func: function func(sprite, script) {
                var device = Entry.trueRobot.PORT_MAP.singlemotor;
                var value = script.getNumberValue('VALUE');
                value = Math.round(value);
                value = Math.max(value, -100);
                value = Math.min(value, 100);
                //set two bytes.
                var speed = 0;
                var direction = 0;
                if (value < 0) {
                    speed = -1 * value;
                    direction = 1;
                } else {
                    speed = value;
                    direction = 0;
                }
                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }

                Entry.hw.sendQueue['SET'][device] = {
                    port: script.getNumberField('PORT'),
                    dataA: speed,
                    dataB: direction,
                    dataC: 0
                };

                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        truetrue_set_dualmotor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: ['0', '0', '0', null],
                type: 'truetrue_set_dualmotor'
            },
            paramsKeyMap: {
                leftValue: 0,
                rightValue: 1,
                delayValue: 2
            },
            class: 'trueRobot_control',
            isNotFor: ['trueRobot'],
            func: function func(sprite, script) {
                var device = Entry.trueRobot.PORT_MAP.dualmotor;

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }

                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;

                    var leftValue = script.getNumberValue('leftValue');
                    leftValue = Math.round(leftValue);
                    leftValue = Math.max(leftValue, -100);
                    leftValue = Math.min(leftValue, 100);

                    var rightValue = script.getNumberValue('rightValue');
                    rightValue = Math.round(rightValue);
                    rightValue = Math.max(rightValue, -100);
                    rightValue = Math.min(rightValue, 100);

                    var delayValue = script.getNumberValue('delayValue');
                    delayValue = Math.round(delayValue);
                    delayValue = Math.max(delayValue, -100);
                    delayValue = Math.min(delayValue, 100);

                    Entry.hw.sendQueue['SET'][device] = {
                        port: Entry.trueRobot.PORT_MAP.dualPort,
                        dataA: leftValue,
                        dataB: rightValue,
                        dataC: delayValue
                    };

                    var timeValue = script.getNumberValue('delayValue');
                    timeValue = Math.round(timeValue);
                    timeValue = Math.max(timeValue, -100);
                    timeValue = Math.min(timeValue, 100);
                    var fps = Entry.FPS || 60;
                    timeValue = 60 / fps * timeValue * 1000;
                    setTimeout(function () {
                        script.timeFlag = 0;
                    }, timeValue);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.timeFlag;
                    delete script.isStart;
                    Entry.engine.isContinue = false;

                    Entry.hw.sendQueue['SET'][device] = {
                        port: Entry.trueRobot.PORT_MAP.dualPort,
                        dataA: 0,
                        dataB: 0,
                        dataC: 0
                    };

                    return script.callReturn();
                }
            },
            syntax: { js: [], py: [] }
        },
        truetrue_set_colorled: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: ['0', '0', '0', null],
                type: 'truetrue_set_colorled'
            },
            paramsKeyMap: {
                redColor: 0,
                greenColor: 1,
                blueColor: 2
            },
            class: 'trueRobot_control',
            isNotFor: ['trueRobot'],
            func: function func(sprite, script) {
                var device = Entry.trueRobot.PORT_MAP.colorled;

                var redColor = script.getNumberValue('redColor');
                redColor = Math.round(redColor);
                redColor = Math.max(redColor, 0);
                redColor = Math.min(redColor, 255);

                var greenColor = script.getNumberValue('greenColor');
                greenColor = Math.round(greenColor);
                greenColor = Math.max(greenColor, 0);
                greenColor = Math.min(greenColor, 255);

                var blueColor = script.getNumberValue('blueColor');
                blueColor = Math.round(blueColor);
                blueColor = Math.max(blueColor, 0);
                blueColor = Math.min(blueColor, 255);

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][device] = {
                    port: Entry.trueRobot.PORT_MAP.colorled,
                    dataA: redColor,
                    dataB: greenColor,
                    dataC: blueColor
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        truetrue_set_led_proxi: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['근접센서왼쪽', 9], ['근접센서오른쪽', 10]],
                value: '근접센서왼쪽',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['켜기', 'on'], ['끄기', 'off']],
                value: '켜기',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [9, 'on', null],
                type: 'truetrue_set_led_proxi'
            },
            paramsKeyMap: {
                PORT: 0,
                ONOFF: 1
            },
            class: 'trueRobot_control',
            isNotFor: ['trueRobot'],
            func: function func(sprite, script) {
                var device = Entry.trueRobot.PORT_MAP.leds;

                var onoff = script.getField('ONOFF');
                var value = onoff == 'on' ? 1 : 0;

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][device] = {
                    port: script.getNumberField('PORT'),
                    dataA: value,
                    dataB: 0x07,
                    dataC: 0x07
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        truetrue_set_led_colorsensor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['전면컬러센서', 3], ['바닥컬러센서', 4]],
                value: '전면컬러센서',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['켜기', 'on'], ['끄기', 'off']],
                value: '켜기',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [3, 'on', null],
                type: 'truetrue_set_led_colorsensor'
            },
            paramsKeyMap: {
                PORT: 0,
                ONOFF: 1
            },
            class: 'trueRobot_control',
            isNotFor: ['trueRobot'],
            func: function func(sprite, script) {
                var device = Entry.trueRobot.PORT_MAP.leds;

                var onoff = script.getField('ONOFF');
                var value = onoff == 'on' ? 1 : 0;

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][device] = {
                    port: script.getNumberField('PORT'),
                    dataA: value,
                    dataB: 0x07,
                    dataC: 0x07
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        truetrue_set_led_linesensor: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['켜기', 'on'], ['끄기', 'off']],
                value: '켜기',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: ['on', null],
                type: 'truetrue_set_led_linesensor'
            },
            paramsKeyMap: {
                ONOFF: 0
            },
            class: 'trueRobot_control',
            isNotFor: ['trueRobot'],
            func: function func(sprite, script) {
                var device = Entry.trueRobot.PORT_MAP.leds;

                var onoff = script.getField('ONOFF');
                var value = onoff == 'on' ? 1 : 0;

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][device] = {
                    port: Entry.trueRobot.PORT_MAP.led_line,
                    dataA: value,
                    dataB: 0x07,
                    dataC: 0x07
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        },
        truetrue_set_linetracer: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['켜기', 'on'], ['끄기', 'off']],
                value: '켜기',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: ['on', null],
                type: 'truetrue_set_linetracer'
            },
            paramsKeyMap: {
                ONOFF: 0
            },
            class: 'trueRobot_control',
            isNotFor: ['trueRobot'],
            func: function func(sprite, script) {
                var device = Entry.trueRobot.PORT_MAP.linetracer;

                var onoff = script.getField('ONOFF');
                var value = onoff == 'on' ? 1 : 0;

                if (!Entry.hw.sendQueue['SET']) {
                    Entry.hw.sendQueue['SET'] = {};
                }
                Entry.hw.sendQueue['SET'][device] = {
                    port: Entry.trueRobot.PORT_MAP.led_line,
                    dataA: value,
                    dataB: 0x07,
                    dataC: 0x07
                };
                return script.callReturn();
            },
            syntax: { js: [], py: [] }
        }
        //endregion TrueTrueRobot 뚜루뚜루로봇
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_turtle.js":
/*!***********************************************!*\
  !*** ./src/playground/blocks/block_turtle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Turtle = {
    PORT_MAP: {
        module: 'turtle',
        leftWheel: 0,
        rightWheel: 0,
        ledRed: 0,
        ledGreen: 0,
        ledBlue: 0,
        buzzer: 0,
        pulse: 0,
        pulseId: 0,
        note: 0,
        sound: 0,
        soundRepeat: 1,
        soundId: 0,
        lineTracerMode: 0,
        lineTracerModeId: 0,
        lineTracerGain: 5,
        lineTracerSpeed: 5,
        motionId: 0,
        motionType: 0,
        motionUnit: 0,
        motionSpeed: 0,
        motionValue: 0,
        motionRadius: 0
    },
    setZero: function setZero() {
        var portMap = Entry.Turtle.PORT_MAP;
        var sq = Entry.hw.sendQueue;
        for (var port in portMap) {
            sq[port] = portMap[port];
        }
        Entry.hw.update();
        var turtle = Entry.Turtle;
        turtle.pulseId = 0;
        turtle.soundId = 0;
        turtle.lineTracerModeId = 0;
        turtle.motionId = 0;
        turtle.clickedId = -1;
        turtle.doubleClickedId = -1;
        turtle.longPressedId = -1;
        turtle.colorPatternId = -1;
        turtle.wheelStateId = -1;
        turtle.soundStateId = -1;
        turtle.lineTracerStateId = -1;
        turtle.tempo = 60;
        turtle.removeAllTimeouts();
    },
    pulseId: 0,
    soundId: 0,
    lineTracerModeId: 0,
    motionId: 0,
    clickedId: -1,
    doubleClickedId: -1,
    longPressedId: -1,
    colorPatternId: -1,
    wheelStateId: -1,
    soundStateId: -1,
    lineTracerStateId: -1,
    tempo: 60,
    timeouts: [],
    removeTimeout: function removeTimeout(id) {
        clearTimeout(id);
        var timeouts = this.timeouts;
        var index = timeouts.indexOf(id);
        if (index >= 0) {
            timeouts.splice(index, 1);
        }
    },
    removeAllTimeouts: function removeAllTimeouts() {
        var timeouts = this.timeouts;
        for (var i in timeouts) {
            clearTimeout(timeouts[i]);
        }
        this.timeouts = [];
    },
    setModule: function setModule(sq) {
        sq.module = 'turtle';
    },
    setPulse: function setPulse(sq, pulse) {
        this.pulseId = this.pulseId % 255 + 1;
        sq.pulse = pulse;
        sq.pulseId = this.pulseId;
    },
    setSound: function setSound(sq, sound, count) {
        if (typeof count != 'number') count = 1;
        if (count < 0) count = -1;
        if (count) {
            this.soundId = this.soundId % 255 + 1;
            sq.sound = sound;
            sq.soundRepeat = count;
            sq.soundId = this.soundId;
        }
    },
    setLineTracerMode: function setLineTracerMode(sq, mode) {
        this.lineTracerModeId = this.lineTracerModeId % 255 + 1;
        sq.lineTracerMode = mode;
        sq.lineTracerModeId = this.lineTracerModeId;
    },
    setMotion: function setMotion(sq, type, unit, speed, value, radius) {
        this.motionId = this.motionId % 255 + 1;
        sq.motionType = type;
        sq.motionUnit = unit;
        sq.motionSpeed = speed;
        sq.motionValue = value;
        sq.motionRadius = radius;
        sq.motionId = this.motionId;
    },
    setLedColor: function setLedColor(sq, color) {
        if (color == 'RED') {
            sq.ledRed = 255;
            sq.ledGreen = 0;
            sq.ledBlue = 0;
        } else if (color == 'ORANGE') {
            sq.ledRed = 255;
            sq.ledGreen = 63;
            sq.ledBlue = 0;
        } else if (color == 'YELLOW') {
            sq.ledRed = 255;
            sq.ledGreen = 255;
            sq.ledBlue = 0;
        } else if (color == 'GREEN') {
            sq.ledRed = 0;
            sq.ledGreen = 255;
            sq.ledBlue = 0;
        } else if (color == 'CYAN') {
            sq.ledRed = 0;
            sq.ledGreen = 255;
            sq.ledBlue = 255;
        } else if (color == 'BLUE') {
            sq.ledRed = 0;
            sq.ledGreen = 0;
            sq.ledBlue = 255;
        } else if (color == 'VIOLET') {
            sq.ledRed = 63;
            sq.ledGreen = 0;
            sq.ledBlue = 255;
        } else if (color == 'MAGENTA') {
            sq.ledRed = 255;
            sq.ledGreen = 0;
            sq.ledBlue = 255;
        } else if (color == 'WHITE') {
            sq.ledRed = 255;
            sq.ledGreen = 255;
            sq.ledBlue = 255;
        }
    },
    name: 'turtle',
    url: 'http://turtle.school',
    imageName: 'turtle.png',
    title: {
        "en": "Turtle",
        "ko": "거북이"
    },
    monitorTemplate: {
        imgPath: 'hw/turtle.png',
        width: 480,
        height: 354,
        listPorts: {
            colorNumber: {
                name: Lang.Blocks.ROBOID_color_number,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            accelerationX: {
                name: Lang.Blocks.ROBOID_acceleration_x,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            accelerationY: {
                name: Lang.Blocks.ROBOID_acceleration_y,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            accelerationZ: {
                name: Lang.Blocks.ROBOID_acceleration_z,
                type: 'input',
                pos: { x: 0, y: 0 }
            },
            buzzer: {
                name: Lang.Blocks.ROBOID_buzzer,
                type: 'output',
                pos: { x: 0, y: 0 }
            },
            note: {
                name: Lang.Blocks.ROBOID_note,
                type: 'output',
                pos: { x: 0, y: 0 }
            }
        },
        ports: {
            floor: {
                name: Lang.Blocks.ROBOID_floor,
                type: 'input',
                pos: { x: 193, y: 342 }
            },
            button: {
                name: Lang.Blocks.ROBOID_button,
                type: 'input',
                pos: { x: 290, y: 30 }
            },
            ledRed: {
                name: Lang.Blocks.ROBOID_head_color + ' R',
                type: 'output',
                pos: { x: 140, y: 280 }
            },
            ledGreen: {
                name: Lang.Blocks.ROBOID_head_color + ' G',
                type: 'output',
                pos: { x: 140, y: 280 }
            },
            ledBlue: {
                name: Lang.Blocks.ROBOID_head_color + ' B',
                type: 'output',
                pos: { x: 140, y: 280 }
            },
            leftWheel: {
                name: Lang.Blocks.ROBOID_left_wheel,
                type: 'output',
                pos: { x: 363, y: 319 }
            },
            rightWheel: {
                name: Lang.Blocks.ROBOID_right_wheel,
                type: 'output',
                pos: { x: 120, y: 86 }
            }
        },
        mode: 'both'
    }
};

Entry.Turtle.getBlocks = function () {
    return {
        //region turtle 터틀
        turtle_touching_color: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_red, '2'], [Lang.Blocks.ROBOID_color_orange, '3'], [Lang.Blocks.ROBOID_color_yellow, '4'], [Lang.Blocks.ROBOID_color_green, '5'], [Lang.Blocks.ROBOID_color_sky_blue, '6'], [Lang.Blocks.ROBOID_color_blue, '7'], [Lang.Blocks.ROBOID_color_purple, '8'], [Lang.Blocks.ROBOID_color_black, '1'], [Lang.Blocks.ROBOID_color_white, '9']],
                value: '2',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'turtle_touching_color'
            },
            paramsKeyMap: {
                COLOR: 0
            },
            class: 'turtle_sensor',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                return Number(script.getField('COLOR')) - 1 == pd.colorNumber;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.touching(%1)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_red, '2'], [Lang.Blocks.ROBOID_color_orange, '3'], [Lang.Blocks.ROBOID_color_yellow, '4'], [Lang.Blocks.ROBOID_color_green, '5'], [Lang.Blocks.ROBOID_color_sky_blue, '6'], [Lang.Blocks.ROBOID_color_blue, '7'], [Lang.Blocks.ROBOID_color_purple, '8'], [Lang.Blocks.ROBOID_color_black, '1'], [Lang.Blocks.ROBOID_color_white, '9']],
                        value: '2',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.touching_colors'
                    }]
                }]
            }
        },
        turtle_is_color_pattern: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_red, '1'], [Lang.Blocks.ROBOID_color_yellow, '3'], [Lang.Blocks.ROBOID_color_green, '4'], [Lang.Blocks.ROBOID_color_sky_blue, '5'], [Lang.Blocks.ROBOID_color_blue, '6'], [Lang.Blocks.ROBOID_color_purple, '7']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_red, '1'], [Lang.Blocks.ROBOID_color_yellow, '3'], [Lang.Blocks.ROBOID_color_green, '4'], [Lang.Blocks.ROBOID_color_sky_blue, '5'], [Lang.Blocks.ROBOID_color_blue, '6'], [Lang.Blocks.ROBOID_color_purple, '7']],
                value: '3',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'turtle_is_color_pattern'
            },
            paramsKeyMap: {
                COLOR1: 0,
                COLOR2: 1
            },
            class: 'turtle_sensor',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                return Number(script.getField('COLOR1')) * 10 + Number(script.getField('COLOR2')) == pd.colorPattern;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.match_color_pattern(%1, %2)',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_red, '1'], [Lang.Blocks.ROBOID_color_yellow, '3'], [Lang.Blocks.ROBOID_color_green, '4'], [Lang.Blocks.ROBOID_color_sky_blue, '5'], [Lang.Blocks.ROBOID_color_blue, '6'], [Lang.Blocks.ROBOID_color_purple, '7']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.pattern_colors'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_red, '1'], [Lang.Blocks.ROBOID_color_yellow, '3'], [Lang.Blocks.ROBOID_color_green, '4'], [Lang.Blocks.ROBOID_color_sky_blue, '5'], [Lang.Blocks.ROBOID_color_blue, '6'], [Lang.Blocks.ROBOID_color_purple, '7']],
                        value: '3',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.pattern_colors'
                    }]
                }]
            }
        },
        turtle_button_state: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_clicked, 'clicked'], [Lang.Blocks.ROBOID_double_clicked, 'doubleClicked'], [Lang.Blocks.ROBOID_long_pressed, 'longPressed']],
                value: 'clicked',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'turtle_button_state'
            },
            paramsKeyMap: {
                EVENT: 0
            },
            class: 'turtle_sensor',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var event = script.getField('EVENT');
                return pd[event] == 1;
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.clicked()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_clicked, 'clicked'], [Lang.Blocks.ROBOID_double_clicked, 'doubleClicked'], [Lang.Blocks.ROBOID_long_pressed, 'longPressed']],
                        value: 'clicked',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['clicked']
                }, {
                    syntax: 'Turtle.double_clicked()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_clicked, 'clicked'], [Lang.Blocks.ROBOID_double_clicked, 'doubleClicked'], [Lang.Blocks.ROBOID_long_pressed, 'longPressed']],
                        value: 'clicked',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['doubleClicked']
                }, {
                    syntax: 'Turtle.long_pressed()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_clicked, 'clicked'], [Lang.Blocks.ROBOID_double_clicked, 'doubleClicked'], [Lang.Blocks.ROBOID_long_pressed, 'longPressed']],
                        value: 'clicked',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['longPressed']
                }]
            }
        },
        turtle_value: {
            color: '#00979D',
            fontColor: '#fff',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                value: 'colorNumber',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'turtle_value'
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'turtle_sensor',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('DEVICE');
                return pd[dev];
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.color_number()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                        value: 'colorNumber',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['colorNumber']
                }, {
                    syntax: 'Turtle.color_pattern()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                        value: 'colorNumber',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['colorPattern']
                }, {
                    syntax: 'Turtle.floor()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                        value: 'colorNumber',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['floor']
                }, {
                    syntax: 'Turtle.button()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                        value: 'colorNumber',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['button']
                }, {
                    syntax: 'Turtle.acceleration_x()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                        value: 'colorNumber',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['accelerationX']
                }, {
                    syntax: 'Turtle.acceleration_y()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                        value: 'colorNumber',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['accelerationY']
                }, {
                    syntax: 'Turtle.acceleration_z()',
                    blockType: 'param',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_number, 'colorNumber'], [Lang.Blocks.ROBOID_color_pattern, 'colorPattern'], [Lang.Blocks.ROBOID_floor, 'floor'], [Lang.Blocks.ROBOID_button, 'button'], [Lang.Blocks.ROBOID_acceleration_x, 'accelerationX'], [Lang.Blocks.ROBOID_acceleration_y, 'accelerationY'], [Lang.Blocks.ROBOID_acceleration_z, 'accelerationZ']],
                        value: 'colorNumber',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['accelerationZ']
                }]
            }
        },
        turtle_move_forward_unit: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_unit_cm, 'CM'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                value: 'CM',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['6']
                }, null, null],
                type: 'turtle_move_forward_unit'
            },
            paramsKeyMap: {
                VALUE: 0,
                UNIT: 1
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                if (!script.isStart) {
                    script.isStart = true;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    turtle.setPulse(sq, 0);
                    turtle.setLineTracerMode(sq, 0);
                    var field = script.getField('UNIT');
                    var unit = 1;
                    if (field == 'SEC') unit = 2;else if (field == 'PULSE') unit = 3;
                    var value = script.getNumberValue('VALUE');
                    turtle.setMotion(sq, 1, unit, 0, value, 0);
                    return script;
                } else {
                    if (pd.wheelStateId != turtle.wheelStateId) {
                        turtle.wheelStateId = pd.wheelStateId;
                        if (pd.wheelState == 0) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            sq.leftWheel = 0;
                            sq.rightWheel = 0;
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.move_forward(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_cm, 'CM'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'CM',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }]
                }]
            }
        },
        turtle_move_backward_unit: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_unit_cm, 'CM'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                value: 'CM',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['6']
                }, null, null],
                type: 'turtle_move_backward_unit'
            },
            paramsKeyMap: {
                VALUE: 0,
                UNIT: 1
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                if (!script.isStart) {
                    script.isStart = true;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    turtle.setPulse(sq, 0);
                    turtle.setLineTracerMode(sq, 0);
                    var field = script.getField('UNIT');
                    var unit = 1;
                    if (field == 'SEC') unit = 2;else if (field == 'PULSE') unit = 3;
                    var value = script.getNumberValue('VALUE');
                    turtle.setMotion(sq, 2, unit, 0, value, 0);
                    return script;
                } else {
                    if (pd.wheelStateId != turtle.wheelStateId) {
                        turtle.wheelStateId = pd.wheelStateId;
                        if (pd.wheelState == 0) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            sq.leftWheel = 0;
                            sq.rightWheel = 0;
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.move_backward(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_cm, 'CM'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'CM',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }]
                }]
            }
        },
        turtle_turn_unit_in_place: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                value: 'DEG',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['90']
                }, null, null],
                type: 'turtle_turn_unit_in_place'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1,
                UNIT: 2
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                if (!script.isStart) {
                    script.isStart = true;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    turtle.setPulse(sq, 0);
                    turtle.setLineTracerMode(sq, 0);
                    var direction = script.getField('DIRECTION');
                    var field = script.getField('UNIT');
                    var unit = 1;
                    if (field == 'SEC') unit = 2;else if (field == 'PULSE') unit = 3;
                    var value = script.getNumberValue('VALUE');
                    if (direction == 'LEFT') turtle.setMotion(sq, 3, unit, 0, value, 0);else turtle.setMotion(sq, 4, unit, 0, value, 0);
                    return script;
                } else {
                    if (pd.wheelStateId != turtle.wheelStateId) {
                        turtle.wheelStateId = pd.wheelStateId;
                        if (pd.wheelState == 0) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            sq.leftWheel = 0;
                            sq.rightWheel = 0;
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.turn_left(%2, %3)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'DEG',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }],
                    params: ['LEFT']
                }, {
                    syntax: 'Turtle.turn_right(%2, %3)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'DEG',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }],
                    params: ['RIGHT']
                }]
            }
        },
        turtle_turn_unit_with_radius_in_direction: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                value: 'DEG',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_head, 'HEAD'], [Lang.Blocks.ROBOID_tail, 'TAIL']],
                value: 'HEAD',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['90']
                }, null, {
                    type: 'text',
                    params: ['6']
                }, null, null],
                type: 'turtle_turn_unit_with_radius_in_direction'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1,
                UNIT: 2,
                RADIUS: 3,
                HEAD: 4
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                if (!script.isStart) {
                    script.isStart = true;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    turtle.setPulse(sq, 0);
                    turtle.setLineTracerMode(sq, 0);
                    var direction = script.getField('DIRECTION');
                    var field = script.getField('UNIT');
                    var unit = 1;
                    if (field == 'SEC') unit = 2;else if (field == 'PULSE') unit = 3;
                    var value = script.getNumberValue('VALUE');
                    var head = script.getField('HEAD');
                    var radius = script.getNumberValue('RADIUS');
                    if (direction == 'LEFT') {
                        if (head == 'HEAD') turtle.setMotion(sq, 9, unit, 0, value, radius);else turtle.setMotion(sq, 10, unit, 0, value, radius);
                    } else {
                        if (head == 'HEAD') turtle.setMotion(sq, 11, unit, 0, value, radius);else turtle.setMotion(sq, 12, unit, 0, value, radius);
                    }
                    return script;
                } else {
                    if (pd.wheelStateId != turtle.wheelStateId) {
                        turtle.wheelStateId = pd.wheelStateId;
                        if (pd.wheelState == 0) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            sq.leftWheel = 0;
                            sq.rightWheel = 0;
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.swing_left(%2, %3, %4, %5)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'DEG',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_head, 'HEAD'], [Lang.Blocks.ROBOID_tail, 'TAIL']],
                        value: 'HEAD',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.head_tail'
                    }],
                    params: ['LEFT']
                }, {
                    syntax: 'Turtle.swing_right(%2, %3, %4, %5)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'DEG',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_head, 'HEAD'], [Lang.Blocks.ROBOID_tail, 'TAIL']],
                        value: 'HEAD',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.head_tail'
                    }],
                    params: ['RIGHT']
                }]
            }
        },
        turtle_pivot_around_wheel_unit_in_direction: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                value: 'DEG',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_head, 'HEAD'], [Lang.Blocks.ROBOID_tail, 'TAIL']],
                value: 'HEAD',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['90']
                }, null, null, null],
                type: 'turtle_pivot_around_wheel_unit_in_direction'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1,
                UNIT: 2,
                HEAD: 3
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                if (!script.isStart) {
                    script.isStart = true;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    turtle.setPulse(sq, 0);
                    turtle.setLineTracerMode(sq, 0);
                    var direction = script.getField('DIRECTION');
                    var field = script.getField('UNIT');
                    var unit = 1;
                    if (field == 'SEC') unit = 2;else if (field == 'PULSE') unit = 3;
                    var value = script.getNumberValue('VALUE');
                    var head = script.getField('HEAD');
                    if (direction == 'LEFT') {
                        if (head == 'HEAD') turtle.setMotion(sq, 5, unit, 0, value, 0);else turtle.setMotion(sq, 6, unit, 0, value, 0);
                    } else {
                        if (head == 'HEAD') turtle.setMotion(sq, 7, unit, 0, value, 0);else turtle.setMotion(sq, 8, unit, 0, value, 0);
                    }
                    return script;
                } else {
                    if (pd.wheelStateId != turtle.wheelStateId) {
                        turtle.wheelStateId = pd.wheelStateId;
                        if (pd.wheelState == 0) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            sq.leftWheel = 0;
                            sq.rightWheel = 0;
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.pivot_left(%2, %3, %4)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'DEG',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_head, 'HEAD'], [Lang.Blocks.ROBOID_tail, 'TAIL']],
                        value: 'HEAD',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.head_tail'
                    }],
                    params: ['LEFT']
                }, {
                    syntax: 'Turtle.pivot_right(%2, %3, %4)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_unit_deg, 'DEG'], [Lang.Blocks.ROBOID_unit_sec, 'SEC'], [Lang.Blocks.ROBOID_unit_pulse, 'PULSE']],
                        value: 'DEG',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.units'
                    }, {
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_head, 'HEAD'], [Lang.Blocks.ROBOID_tail, 'TAIL']],
                        value: 'HEAD',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.head_tail'
                    }],
                    params: ['RIGHT']
                }]
            }
        },
        turtle_change_wheels_by_left_right: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['10']
                }, {
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'turtle_change_wheels_by_left_right'
            },
            paramsKeyMap: {
                LEFT: 0,
                RIGHT: 1
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var left = script.getNumberValue('LEFT');
                var right = script.getNumberValue('RIGHT');
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                turtle.setPulse(sq, 0);
                turtle.setLineTracerMode(sq, 0);
                turtle.setMotion(sq, 0, 0, 0, 0, 0);
                sq.leftWheel = sq.leftWheel != undefined ? sq.leftWheel + left : left;
                sq.rightWheel = sq.rightWheel != undefined ? sq.rightWheel + right : right;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.wheels_by(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        turtle_set_wheels_to_left_right: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['50']
                }, {
                    type: 'text',
                    params: ['50']
                }, null],
                type: 'turtle_set_wheels_to_left_right'
            },
            paramsKeyMap: {
                LEFT: 0,
                RIGHT: 1
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                turtle.setPulse(sq, 0);
                turtle.setLineTracerMode(sq, 0);
                turtle.setMotion(sq, 0, 0, 0, 0, 0);
                sq.leftWheel = script.getNumberValue('LEFT');
                sq.rightWheel = script.getNumberValue('RIGHT');
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.wheels(%1, %2)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        turtle_change_wheel_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'turtle_change_wheel_by'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var direction = script.getField('DIRECTION');
                var value = script.getNumberValue('VALUE');
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                turtle.setPulse(sq, 0);
                turtle.setLineTracerMode(sq, 0);
                turtle.setMotion(sq, 0, 0, 0, 0, 0);
                if (direction == 'LEFT') {
                    sq.leftWheel = sq.leftWheel != undefined ? sq.leftWheel + value : value;
                } else if (direction == 'RIGHT') {
                    sq.rightWheel = sq.rightWheel != undefined ? sq.rightWheel + value : value;
                } else {
                    sq.leftWheel = sq.leftWheel != undefined ? sq.leftWheel + value : value;
                    sq.rightWheel = sq.rightWheel != undefined ? sq.rightWheel + value : value;
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.left_wheel_by(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['LEFT']
                }, {
                    syntax: 'Turtle.right_wheel_by(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['RIGHT']
                }, {
                    syntax: 'Turtle.wheels_by(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['BOTH'],
                    keyOption: 'SAME'
                }]
            }
        },
        turtle_set_wheel_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                value: 'LEFT',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['50']
                }, null],
                type: 'turtle_set_wheel_to'
            },
            paramsKeyMap: {
                DIRECTION: 0,
                VALUE: 1
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var direction = script.getField('DIRECTION');
                var value = script.getNumberValue('VALUE');
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                turtle.setPulse(sq, 0);
                turtle.setLineTracerMode(sq, 0);
                turtle.setMotion(sq, 0, 0, 0, 0, 0);
                if (direction == 'LEFT') {
                    sq.leftWheel = value;
                } else if (direction == 'RIGHT') {
                    sq.rightWheel = value;
                } else {
                    sq.leftWheel = value;
                    sq.rightWheel = value;
                }
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.left_wheel(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['LEFT']
                }, {
                    syntax: 'Turtle.right_wheel(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['RIGHT']
                }, {
                    syntax: 'Turtle.wheels(%2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, 'LEFT'], [Lang.Blocks.ROBOID_right, 'RIGHT'], [Lang.Blocks.ROBOID_both, 'BOTH']],
                        value: 'LEFT',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }],
                    params: ['BOTH'],
                    keyOption: 'SAME'
                }]
            }
        },
        turtle_follow_line: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_black, '10'], [Lang.Blocks.ROBOID_color_red, '11'], [Lang.Blocks.ROBOID_color_green, '13'], [Lang.Blocks.ROBOID_color_blue, '15'], [Lang.Blocks.ROBOID_color_any, '17']],
                value: '10',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'turtle_follow_line'
            },
            paramsKeyMap: {
                COLOR: 0
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                sq.leftWheel = 0;
                sq.rightWheel = 0;
                turtle.setPulse(sq, 0);
                turtle.setMotion(sq, 0, 0, 0, 0, 0);
                var mode = Number(script.getField('COLOR'));
                turtle.setLineTracerMode(sq, mode);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.follow_line(%1)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_black, '10'], [Lang.Blocks.ROBOID_color_red, '11'], [Lang.Blocks.ROBOID_color_green, '13'], [Lang.Blocks.ROBOID_color_blue, '15'], [Lang.Blocks.ROBOID_color_any, '17']],
                        value: '10',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.line_colors'
                    }]
                }]
            }
        },
        turtle_follow_line_until: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_red, '61'], [Lang.Blocks.ROBOID_color_yellow, '62'], [Lang.Blocks.ROBOID_color_green, '63'], [Lang.Blocks.ROBOID_color_sky_blue, '64'], [Lang.Blocks.ROBOID_color_blue, '65'], [Lang.Blocks.ROBOID_color_purple, '66'], [Lang.Blocks.ROBOID_color_any, '67']],
                value: '61',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'turtle_follow_line_until'
            },
            paramsKeyMap: {
                COLOR: 0
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                if (!script.isStart) {
                    script.isStart = true;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    turtle.setPulse(sq, 0);
                    turtle.setMotion(sq, 0, 0, 0, 0, 0);
                    var mode = Number(script.getField('COLOR'));
                    turtle.setLineTracerMode(sq, mode);
                    return script;
                } else {
                    if (pd.lineTracerStateId != turtle.lineTracerStateId) {
                        turtle.lineTracerStateId = pd.lineTracerStateId;
                        if (pd.lineTracerState == 0x02) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            turtle.setLineTracerMode(sq, 0);
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.follow_black_line_until(%1)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_red, '61'], [Lang.Blocks.ROBOID_color_yellow, '62'], [Lang.Blocks.ROBOID_color_green, '63'], [Lang.Blocks.ROBOID_color_sky_blue, '64'], [Lang.Blocks.ROBOID_color_blue, '65'], [Lang.Blocks.ROBOID_color_purple, '66'], [Lang.Blocks.ROBOID_color_any, '67']],
                        value: '61',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.target_colors'
                    }]
                }]
            }
        },
        turtle_follow_line_until_black: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_red, '71'], [Lang.Blocks.ROBOID_color_green, '73'], [Lang.Blocks.ROBOID_color_blue, '75'], [Lang.Blocks.ROBOID_color_any, '77']],
                value: '71',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'turtle_follow_line_until_black'
            },
            paramsKeyMap: {
                COLOR: 0
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                if (!script.isStart) {
                    script.isStart = true;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    turtle.setPulse(sq, 0);
                    turtle.setMotion(sq, 0, 0, 0, 0, 0);
                    var mode = Number(script.getField('COLOR'));
                    turtle.setLineTracerMode(sq, mode);
                    return script;
                } else {
                    if (pd.lineTracerStateId != turtle.lineTracerStateId) {
                        turtle.lineTracerStateId = pd.lineTracerStateId;
                        if (pd.lineTracerState == 0x02) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            turtle.setLineTracerMode(sq, 0);
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.follow_line_until_black(%1)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_red, '71'], [Lang.Blocks.ROBOID_color_green, '73'], [Lang.Blocks.ROBOID_color_blue, '75'], [Lang.Blocks.ROBOID_color_any, '77']],
                        value: '71',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.color_lines'
                    }]
                }]
            }
        },
        turtle_cross_intersection: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'turtle_cross_intersection'
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                if (!script.isStart) {
                    script.isStart = true;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    turtle.setPulse(sq, 0);
                    turtle.setMotion(sq, 0, 0, 0, 0, 0);
                    turtle.setLineTracerMode(sq, 40);
                    return script;
                } else {
                    if (pd.lineTracerStateId != turtle.lineTracerStateId) {
                        turtle.lineTracerStateId = pd.lineTracerStateId;
                        if (pd.lineTracerState == 0x02) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            turtle.setLineTracerMode(sq, 0);
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.intersection_forward()'
                }]
            }
        },
        turtle_turn_at_intersection: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_left, '20'], [Lang.Blocks.ROBOID_right, '30'], [Lang.Blocks.ROBOID_back, '50']],
                value: '20',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'turtle_turn_at_intersection'
            },
            paramsKeyMap: {
                DIRECTION: 0
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                if (!script.isStart) {
                    script.isStart = true;
                    sq.leftWheel = 0;
                    sq.rightWheel = 0;
                    turtle.setPulse(sq, 0);
                    turtle.setMotion(sq, 0, 0, 0, 0, 0);
                    var mode = Number(script.getField('DIRECTION'));
                    Entry.Turtle.setLineTracerMode(sq, mode);
                    return script;
                } else {
                    if (pd.lineTracerStateId != turtle.lineTracerStateId) {
                        turtle.lineTracerStateId = pd.lineTracerStateId;
                        if (pd.lineTracerState == 0x02) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            turtle.setLineTracerMode(sq, 0);
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.intersection_left()',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, '20'], [Lang.Blocks.ROBOID_right, '30'], [Lang.Blocks.ROBOID_back, '50']],
                        value: '20',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['20']
                }, {
                    syntax: 'Turtle.intersection_right()',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, '20'], [Lang.Blocks.ROBOID_right, '30'], [Lang.Blocks.ROBOID_back, '50']],
                        value: '20',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['30']
                }, {
                    syntax: 'Turtle.intersection_uturn()',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_left, '20'], [Lang.Blocks.ROBOID_right, '30'], [Lang.Blocks.ROBOID_back, '50']],
                        value: '20',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringValue
                    }],
                    params: ['50']
                }]
            }
        },
        turtle_set_following_speed_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: ['5', null],
                type: 'turtle_set_following_speed_to'
            },
            paramsKeyMap: {
                SPEED: 0
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Turtle.setModule(sq);
                var speed = Number(script.getField('SPEED'));
                sq.lineTracerSpeed = speed;
                sq.lineTracerGain = speed;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.line_tracer_speed(%1)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7'], ['8', '8']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringOrNumberByValue
                    }]
                }]
            }
        },
        turtle_stop: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'turtle_stop'
            },
            class: 'turtle_wheel',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                sq.leftWheel = 0;
                sq.rightWheel = 0;
                turtle.setPulse(sq, 0);
                turtle.setLineTracerMode(sq, 0);
                turtle.setMotion(sq, 0, 0, 0, 0, 0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.stop()'
                }]
            }
        },
        turtle_set_head_led_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_color_red, 'RED'], [Lang.Blocks.ROBOID_color_orange, 'ORANGE'], [Lang.Blocks.ROBOID_color_yellow, 'YELLOW'], [Lang.Blocks.ROBOID_color_green, 'GREEN'], [Lang.Blocks.ROBOID_color_sky_blue, 'CYAN'], [Lang.Blocks.ROBOID_color_blue, 'BLUE'], [Lang.Blocks.ROBOID_color_violet, 'VIOLET'], [Lang.Blocks.ROBOID_color_purple, 'MAGENTA'], [Lang.Blocks.ROBOID_color_white, 'WHITE']],
                value: 'RED',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null],
                type: 'turtle_set_head_led_to'
            },
            paramsKeyMap: {
                COLOR: 0
            },
            class: 'turtle_led',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var color = script.getField('COLOR');
                Entry.Turtle.setModule(sq);
                Entry.Turtle.setLedColor(sq, color);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.led_color(%1)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_color_red, 'RED'], [Lang.Blocks.ROBOID_color_orange, 'ORANGE'], [Lang.Blocks.ROBOID_color_yellow, 'YELLOW'], [Lang.Blocks.ROBOID_color_green, 'GREEN'], [Lang.Blocks.ROBOID_color_sky_blue, 'CYAN'], [Lang.Blocks.ROBOID_color_blue, 'BLUE'], [Lang.Blocks.ROBOID_color_violet, 'VIOLET'], [Lang.Blocks.ROBOID_color_purple, 'MAGENTA'], [Lang.Blocks.ROBOID_color_white, 'WHITE']],
                        value: 'RED',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.led_colors'
                    }]
                }]
            }
        },
        turtle_change_head_led_by_rgb: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['10']
                }, {
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'turtle_change_head_led_by_rgb'
            },
            paramsKeyMap: {
                RED: 0,
                GREEN: 1,
                BLUE: 2
            },
            class: 'turtle_led',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Turtle.setModule(sq);
                var red = script.getNumberValue('RED');
                var green = script.getNumberValue('GREEN');
                var blue = script.getNumberValue('BLUE');
                sq.ledRed = sq.ledRed != undefined ? sq.ledRed + red : red;
                sq.ledGreen = sq.ledGreen != undefined ? sq.ledGreen + green : green;
                sq.ledBlue = sq.ledBlue != undefined ? sq.ledBlue + blue : blue;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.led_by(%1, %2, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        turtle_set_head_led_to_rgb: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'turtle_set_head_led_to_rgb'
            },
            paramsKeyMap: {
                RED: 0,
                GREEN: 1,
                BLUE: 2
            },
            class: 'turtle_led',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Turtle.setModule(sq);
                sq.ledRed = script.getNumberValue('RED');
                sq.ledGreen = script.getNumberValue('GREEN');
                sq.ledBlue = script.getNumberValue('BLUE');
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.led(%1, %2, %3)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        turtle_clear_head_led: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'turtle_clear_head_led'
            },
            class: 'turtle_led',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Turtle.setModule(sq);
                sq.ledRed = 0;
                sq.ledGreen = 0;
                sq.ledBlue = 0;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.led(0)'
                }]
            }
        },
        turtle_play_sound_times: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_sound_beep, '1'], [Lang.Blocks.ROBOID_sound_random_beep, '2'], [Lang.Blocks.ROBOID_sound_siren, '3'], [Lang.Blocks.ROBOID_sound_engine, '4'], [Lang.Blocks.ROBOID_sound_robot, '5'], [Lang.Blocks.ROBOID_sound_march, '6'], [Lang.Blocks.ROBOID_sound_birthday, '7'], [Lang.Blocks.ROBOID_sound_dibidibidip, '8'], [Lang.Blocks.ROBOID_sound_good_job, '9']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'turtle_play_sound_times'
            },
            paramsKeyMap: {
                SOUND: 0,
                COUNT: 1
            },
            class: 'turtle_sound',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Turtle.setModule(sq);
                sq.buzzer = 0;
                sq.note = 0;
                var sound = Number(script.getField('SOUND'));
                var count = script.getNumberValue('COUNT');
                if (count) Entry.Turtle.setSound(sq, sound, count);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.sound(%1, %2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_sound_beep, '1'], [Lang.Blocks.ROBOID_sound_random_beep, '2'], [Lang.Blocks.ROBOID_sound_siren, '3'], [Lang.Blocks.ROBOID_sound_engine, '4'], [Lang.Blocks.ROBOID_sound_robot, '5'], [Lang.Blocks.ROBOID_sound_march, '6'], [Lang.Blocks.ROBOID_sound_birthday, '7'], [Lang.Blocks.ROBOID_sound_dibidibidip, '8'], [Lang.Blocks.ROBOID_sound_good_job, '9']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.sounds'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        turtle_play_sound_times_until_done: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ROBOID_sound_beep, '1'], [Lang.Blocks.ROBOID_sound_random_beep, '2'], [Lang.Blocks.ROBOID_sound_siren, '3'], [Lang.Blocks.ROBOID_sound_engine, '4'], [Lang.Blocks.ROBOID_sound_robot, '5'], [Lang.Blocks.ROBOID_sound_march, '6'], [Lang.Blocks.ROBOID_sound_birthday, '7'], [Lang.Blocks.ROBOID_sound_dibidibidip, '8'], [Lang.Blocks.ROBOID_sound_good_job, '9']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['1']
                }, null],
                type: 'turtle_play_sound_times_until_done'
            },
            paramsKeyMap: {
                SOUND: 0,
                COUNT: 1
            },
            class: 'turtle_sound',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var pd = Entry.hw.portData;
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                if (!script.isStart) {
                    script.isStart = true;
                    sq.buzzer = 0;
                    sq.note = 0;
                    var sound = Number(script.getField('SOUND'));
                    var count = script.getNumberValue('COUNT');
                    if (count) {
                        turtle.setSound(sq, sound, count);
                        return script;
                    } else {
                        turtle.sound = 0;
                        turtle.soundRepeat = 1;
                        delete script.isStart;
                        Entry.engine.isContinue = false;
                        return script.callReturn();
                    }
                } else {
                    if (pd.soundStateId != turtle.soundStateId) {
                        turtle.soundStateId = pd.soundStateId;
                        if (pd.soundState == 0) {
                            delete script.isStart;
                            Entry.engine.isContinue = false;
                            return script.callReturn();
                        }
                    }
                    return script;
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.sound_until_done(%1, %2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ROBOID_sound_beep, '1'], [Lang.Blocks.ROBOID_sound_random_beep, '2'], [Lang.Blocks.ROBOID_sound_siren, '3'], [Lang.Blocks.ROBOID_sound_engine, '4'], [Lang.Blocks.ROBOID_sound_robot, '5'], [Lang.Blocks.ROBOID_sound_march, '6'], [Lang.Blocks.ROBOID_sound_birthday, '7'], [Lang.Blocks.ROBOID_sound_dibidibidip, '8'], [Lang.Blocks.ROBOID_sound_good_job, '9']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.sounds'
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        turtle_change_buzzer_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['10']
                }, null],
                type: 'turtle_change_buzzer_by'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'turtle_sound',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Turtle.setModule(sq);
                var value = script.getNumberValue('VALUE');
                sq.buzzer = sq.buzzer != undefined ? sq.buzzer + value : value;
                sq.note = 0;
                Entry.Turtle.setSound(sq, 0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.buzzer_by(%1)'
                }]
            }
        },
        turtle_set_buzzer_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['1000']
                }, null],
                type: 'turtle_set_buzzer_to'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'turtle_sound',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Turtle.setModule(sq);
                sq.buzzer = script.getNumberValue('VALUE');
                sq.note = 0;
                Entry.Turtle.setSound(sq, 0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.buzzer(%1)'
                }]
            }
        },
        turtle_clear_sound: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'turtle_clear_sound'
            },
            class: 'turtle_sound',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                Entry.Turtle.setModule(sq);
                sq.buzzer = 0;
                sq.note = 0;
                Entry.Turtle.setSound(sq, 0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.sound(0)',
                    params: [null]
                }, {
                    syntax: 'Turtle.sound(Turtle.SOUND_OFF)',
                    params: [null]
                }, {
                    syntax: 'Turtle.buzzer(0)',
                    params: [null]
                }]
            }
        },
        turtle_play_note: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_note_c + '', '4'], [Lang.Blocks.ALBERT_note_c + '#', '5'], [Lang.Blocks.ALBERT_note_d + '', '6'], [Lang.Blocks.ALBERT_note_e + 'b', '7'], [Lang.Blocks.ALBERT_note_e + '', '8'], [Lang.Blocks.ALBERT_note_f + '', '9'], [Lang.Blocks.ALBERT_note_f + '#', '10'], [Lang.Blocks.ALBERT_note_g + '', '11'], [Lang.Blocks.ALBERT_note_g + '#', '12'], [Lang.Blocks.ALBERT_note_a + '', '13'], [Lang.Blocks.ALBERT_note_b + 'b', '14'], [Lang.Blocks.ALBERT_note_b + '', '15']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, '4', null],
                type: 'turtle_play_note'
            },
            paramsKeyMap: {
                NOTE: 0,
                OCTAVE: 1
            },
            class: 'turtle_sound',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var note = script.getNumberField('NOTE', script);
                var octave = script.getNumberField('OCTAVE', script);
                Entry.Turtle.setModule(sq);
                sq.buzzer = 0;
                note += (octave - 1) * 12;
                sq.note = note;
                Entry.Turtle.setSound(sq, 0);
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.pitch(%1, %2)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ALBERT_note_c + '', '4'], [Lang.Blocks.ALBERT_note_c + '#', '5'], [Lang.Blocks.ALBERT_note_d + '', '6'], [Lang.Blocks.ALBERT_note_e + 'b', '7'], [Lang.Blocks.ALBERT_note_e + '', '8'], [Lang.Blocks.ALBERT_note_f + '', '9'], [Lang.Blocks.ALBERT_note_f + '#', '10'], [Lang.Blocks.ALBERT_note_g + '', '11'], [Lang.Blocks.ALBERT_note_g + '#', '12'], [Lang.Blocks.ALBERT_note_a + '', '13'], [Lang.Blocks.ALBERT_note_b + 'b', '14'], [Lang.Blocks.ALBERT_note_b + '', '15']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.notes'
                    }, {
                        type: 'Dropdown',
                        options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringOrNumberByValue
                    }]
                }]
            }
        },
        turtle_play_note_for_beats: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.ALBERT_note_c + '', '4'], [Lang.Blocks.ALBERT_note_c + '#', '5'], [Lang.Blocks.ALBERT_note_d + '', '6'], [Lang.Blocks.ALBERT_note_e + 'b', '7'], [Lang.Blocks.ALBERT_note_e + '', '8'], [Lang.Blocks.ALBERT_note_f + '', '9'], [Lang.Blocks.ALBERT_note_f + '#', '10'], [Lang.Blocks.ALBERT_note_g + '', '11'], [Lang.Blocks.ALBERT_note_g + '#', '12'], [Lang.Blocks.ALBERT_note_a + '', '13'], [Lang.Blocks.ALBERT_note_b + 'b', '14'], [Lang.Blocks.ALBERT_note_b + '', '15']],
                value: '4',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                value: '1',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, '4', {
                    type: 'text',
                    params: ['0.5']
                }, null],
                type: 'turtle_play_note_for_beats'
            },
            paramsKeyMap: {
                NOTE: 0,
                OCTAVE: 1,
                VALUE: 2
            },
            class: 'turtle_sound',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                if (!script.isStart) {
                    var note = script.getNumberField('NOTE', script);
                    var octave = script.getNumberField('OCTAVE', script);
                    var beat = script.getNumberValue('VALUE', script);
                    note += (octave - 1) * 12;
                    var timeValue = beat * 60 * 1000 / turtle.tempo;
                    script.isStart = true;
                    script.timeFlag = 1;
                    sq.buzzer = 0;
                    sq.note = note;
                    turtle.setSound(sq, 0);
                    if (timeValue > 100) {
                        var timer1 = setTimeout(function () {
                            sq.note = 0;
                            turtle.removeTimeout(timer1);
                        }, timeValue - 100);
                        turtle.timeouts.push(timer1);
                    }
                    var timer2 = setTimeout(function () {
                        script.timeFlag = 0;
                        turtle.removeTimeout(timer2);
                    }, timeValue);
                    turtle.timeouts.push(timer2);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    sq.note = 0;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.note(%1, %2, %3)',
                    textParams: [{
                        type: 'Dropdown',
                        options: [[Lang.Blocks.ALBERT_note_c + '', '4'], [Lang.Blocks.ALBERT_note_c + '#', '5'], [Lang.Blocks.ALBERT_note_d + '', '6'], [Lang.Blocks.ALBERT_note_e + 'b', '7'], [Lang.Blocks.ALBERT_note_e + '', '8'], [Lang.Blocks.ALBERT_note_f + '', '9'], [Lang.Blocks.ALBERT_note_f + '#', '10'], [Lang.Blocks.ALBERT_note_g + '', '11'], [Lang.Blocks.ALBERT_note_g + '#', '12'], [Lang.Blocks.ALBERT_note_a + '', '13'], [Lang.Blocks.ALBERT_note_b + 'b', '14'], [Lang.Blocks.ALBERT_note_b + '', '15']],
                        value: '4',
                        fontSize: 11,
                        converter: Entry.block.converters.returnValuePartialUpperCase,
                        codeMap: 'Entry.CodeMap.Turtle.notes'
                    }, {
                        type: 'Dropdown',
                        options: [['1', '1'], ['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                        value: '1',
                        fontSize: 11,
                        converter: Entry.block.converters.returnStringOrNumberByValue
                    }, {
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        turtle_rest_for_beats: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0.25']
                }, null],
                type: 'turtle_rest_for_beats'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'turtle_sound',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var turtle = Entry.Turtle;
                turtle.setModule(sq);
                if (!script.isStart) {
                    script.isStart = true;
                    script.timeFlag = 1;
                    var timeValue = script.getNumberValue('VALUE');
                    timeValue = timeValue * 60 * 1000 / turtle.tempo;
                    sq.buzzer = 0;
                    sq.note = 0;
                    turtle.setSound(sq, 0);
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        turtle.removeTimeout(timer);
                    }, timeValue);
                    turtle.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    return script.callReturn();
                }
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.note(0, %1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }],
                    keyOption: '0'
                }, {
                    syntax: 'Turtle.note(Turtle.NOTE_OFF, %1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }],
                    keyOption: 'Turtle.NOTE_OFF'
                }]
            }
        },
        turtle_change_tempo_by: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['20']
                }, null],
                type: 'turtle_change_tempo_by'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'turtle_sound',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var turtle = Entry.Turtle;
                turtle.setModule(Entry.hw.sendQueue);
                turtle.tempo += script.getNumberValue('VALUE');
                if (turtle.tempo < 1) turtle.tempo = 1;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.tempo_by(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        },
        turtle_set_tempo_to: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['60']
                }, null],
                type: 'turtle_set_tempo_to'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'turtle_sound',
            isNotFor: ['turtle'],
            func: function func(sprite, script) {
                var turtle = Entry.Turtle;
                turtle.setModule(Entry.hw.sendQueue);
                turtle.tempo = script.getNumberValue('VALUE');
                if (turtle.tempo < 1) turtle.tempo = 1;
                return script.callReturn();
            },
            syntax: {
                js: [],
                py: [{
                    syntax: 'Turtle.tempo(%1)',
                    textParams: [{
                        type: 'Block',
                        accept: 'string'
                    }]
                }]
            }
        }
        //endregion turtle 터틀
    };
};

/***/ }),

/***/ "./src/playground/blocks/block_xbot.js":
/*!*********************************************!*\
  !*** ./src/playground/blocks/block_xbot.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Xbot = {
    PORT_MAP: {
        rightWheel: 0,
        leftWheel: 0,
        head: 90,
        armR: 90,
        armL: 90,
        analogD5: 127, //D4
        analogD6: 127, //D5
        D4: 0,
        D7: 0,
        D12: 0,
        D13: 0,
        ledR: 0,
        ledG: 0,
        ledB: 0,
        lcdNum: 0,
        lcdTxt: '                ',
        note: 262,
        duration: 0
    },
    setZero: function setZero() {
        var portMap = Entry.Xbot.PORT_MAP;
        var sq = Entry.hw.sendQueue;
        for (var port in portMap) {
            sq[port] = portMap[port];
        }
        Entry.hw.update();
        var Xbot = Entry.Xbot;
        Xbot.removeAllTimeouts();
    },
    timeouts: [],
    removeTimeout: function removeTimeout(id) {
        clearTimeout(id);
        var timeouts = this.timeouts;
        var index = timeouts.indexOf(id);
        if (index >= 0) {
            timeouts.splice(index, 1);
        }
    },
    removeAllTimeouts: function removeAllTimeouts() {
        var timeouts = this.timeouts;
        for (var i in timeouts) {
            clearTimeout(timeouts[i]);
        }
        this.timeouts = [];
    },
    name: 'xbot_epor_edge',
    url: 'http://xbot.co.kr/',
    imageName: 'xbot.png',
    title: {
        "ko": "엑스봇(원터치 동글/USB)",
        "en": "XBOT(OneTouch Dongle/USB)"
    }
};

Entry.Xbot.getBlocks = function () {
    return {
        //region xbot 엑스봇
        xbot_digitalInput: {
            color: '#00979D',
            skeleton: 'basic_boolean_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.XBOT_D2_digitalInput, 'D2'], [Lang.Blocks.XBOT_D3_digitalInput, 'D3'], [Lang.Blocks.XBOT_D11_digitalInput, 'D11']],
                value: 'D2',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }],
            events: {},
            def: {
                params: [null],
                type: 'xbot_digitalInput'
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'xbot_sensor',
            isNotFor: ['xbot_epor_edge'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('DEVICE');
                return pd[dev];
            },
            syntax: { js: [], py: ['Xbot.digital_input(%1)'] }
        },
        xbot_analogValue: {
            color: '#00979D',
            skeleton: 'basic_string_field',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.XBOT_CDS, 'light'], [Lang.Blocks.XBOT_MIC, 'mic'], [Lang.Blocks.XBOT_analog0, 'adc0'], [Lang.Blocks.XBOT_analog1, 'adc1'], [Lang.Blocks.XBOT_analog2, 'adc2'], [Lang.Blocks.XBOT_analog3, 'adc3']],
                value: 'light',
                fontSize: 11
            }],
            events: {},
            def: {
                params: [null],
                type: 'xbot_analogValue'
            },
            paramsKeyMap: {
                DEVICE: 0
            },
            class: 'xbot_sensor',
            isNotFor: ['xbot_epor_edge'],
            func: function func(sprite, script) {
                var pd = Entry.hw.portData;
                var dev = script.getField('DEVICE');
                return pd[dev];
            },
            syntax: { js: [], py: ['Xbot.analog_value(%1)'] }
        },
        xbot_digitalOutput: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['LED', 'D13'], ['D4', 'D4'], ['D7', 'D7'], ['D12 ', 'D12']],
                value: 'D13',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [[Lang.Blocks.XBOT_High, 'HIGH'], [Lang.Blocks.XBOT_Low, 'LOW']],
                value: 'HIGH',
                fontSize: 11
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, null],
                type: 'xbot_digitalOutput'
            },
            paramsKeyMap: {
                DEVICE: 0,
                VALUE: 1
            },
            class: 'xbot_sensor',
            isNotFor: ['xbot_epor_edge'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var dev = script.getStringField('DEVICE', script);
                var value = script.getStringField('VALUE', script);

                if (dev == 'D13' && value == 'HIGH') {
                    sq.D13 = 1;
                } else {
                    sq.D13 = 0;
                }

                if (dev == 'D4' && value == 'HIGH') {
                    sq.D4 = 1;
                } else {
                    sq.D4 = 0;
                }

                if (dev == 'D7' && value == 'HIGH') {
                    sq.D7 = 1;
                } else {
                    sq.D7 = 0;
                }

                if (dev == 'D12' && value == 'HIGH') {
                    sq.D12 = 1;
                } else {
                    sq.D12 = 0;
                }
                //sq.D13 = 1;
                return script.callReturn();
            },
            syntax: { js: [], py: ['Xbot.digital_output(%1, %2)'] }
        },
        xbot_analogOutput: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['D5', 'analogD5'], ['D6', 'analogD6']],
                value: 'analogD5',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'xbot_analogOutput'
            },
            paramsKeyMap: {
                DEVICE: 0,
                VALUE: 1
            },
            class: 'xbot_sensor',
            isNotFor: ['xbot_epor_edge'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var dev = script.getStringField('DEVICE', script);
                var value = script.getNumberValue('VALUE', script);

                if (dev == 'analogD5') {
                    sq.analogD5 = value;
                } else if (dev == 'analogD6') {
                    sq.analogD6 = value;
                }
                return script.callReturn();
            },
            syntax: { js: [], py: ['Xbot.analog_output(%1, %2)'] }
        },
        xbot_servo: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.XBOT_Head, 'head'], [Lang.Blocks.XBOT_ArmR, 'right'], [Lang.Blocks.XBOT_ArmL, 'left']],
                value: 'head',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['90']
                }, null],
                type: 'xbot_servo'
            },
            paramsKeyMap: {
                DEVICE: 0,
                VALUE: 1
            },
            class: 'xbot_motor',
            isNotFor: ['xbot_epor_edge'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var mtype = script.getStringField('DEVICE', script);
                var angle = script.getNumberValue('VALUE', script);

                if (mtype == 'head') {
                    sq.head = angle;
                } else if (mtype == 'right') {
                    sq.armR = angle;
                } else if (mtype == 'left') {
                    sq.armL = angle;
                }

                return script.callReturn();
            },
            syntax: { js: [], py: ['Xbot.servo(%1, %2)'] }
        },
        xbot_oneWheel: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.XBOT_rightWheel, 'rightWheel'], [Lang.Blocks.XBOT_leftWheel, 'leftWheel'], [Lang.Blocks.XBOT_bothWheel, 'bothWheel']],
                value: 'rightWheel',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'xbot_oneWheel'
            },
            paramsKeyMap: {
                DEVICE: 0,
                VALUE: 1
            },
            class: 'xbot_motor',
            isNotFor: ['xbot_epor_edge'],
            func: function func(sprite, script) {
                //console.log('xbot_move_forward_for_secs');
                var sq = Entry.hw.sendQueue;
                var dir = script.getStringField('DEVICE', script);
                var speed = script.getNumberValue('VALUE', script);

                if (dir == 'rightWheel') sq.rightWheel = speed;else if (dir == 'leftWheel') sq.leftWheel = speed;else sq.rightWheel = sq.leftWheel = speed;

                return script.callReturn();
            },
            syntax: { js: [], py: ['Xbot.one_wheel(%1, %2)'] }
        },
        xbot_twoWheel: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['0']
                }, {
                    type: 'text',
                    params: ['0']
                }, null],
                type: 'xbot_twoWheel'
            },
            paramsKeyMap: {
                rightWheel: 0,
                leftWheel: 1
            },
            class: 'xbot_motor',
            isNotFor: ['xbot_epor_edge'],
            func: function func(sprite, script) {
                //console.log('xbot_move_forward_for_secs');
                var sq = Entry.hw.sendQueue;

                sq.rightWheel = script.getNumberValue('rightWheel');
                sq.leftWheel = script.getNumberValue('leftWheel');

                return script.callReturn();
            },
            syntax: { js: [], py: ['Xbot.two_wheel(%1, %2)'] }
        },
        xbot_rgb: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [{
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, {
                    type: 'text',
                    params: ['255']
                }, null],
                type: 'xbot_rgb'
            },
            paramsKeyMap: {
                ledR: 0,
                ledG: 1,
                ledB: 2
            },
            class: 'xbot_rgb',
            isNotFor: ['xbot_epor_edge'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;

                sq.ledR = script.getNumberValue('ledR');
                sq.ledG = script.getNumberValue('ledG');
                sq.ledB = script.getNumberValue('ledB');

                //console.log('ledR' + sq.ledR + ' ledG ' + sq.ledG +' ledB ' + sq.ledB);
                return script.callReturn();
            },
            syntax: { js: [], py: ['Xbot.rgb(%1, %2, %3)'] }
        },
        xbot_rgb_picker: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Color'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null],
                type: 'xbot_rgb_picker'
            },
            paramsKeyMap: {
                VALUE: 0
            },
            class: 'xbot_rgb',
            isNotFor: ['xbot_epor_edge'],
            func: function func(sprite, script) {
                var port = script.getStringField('VALUE');
                var sq = Entry.hw.sendQueue;

                sq.ledR = parseInt(parseInt(port.substr(1, 2), 16) * 0.3);
                sq.ledG = parseInt(parseInt(port.substr(3, 2), 16) * 0.3);
                sq.ledB = parseInt(parseInt(port.substr(5, 2), 16) * 0.3);

                return script.callReturn();
            },
            syntax: { js: [], py: ['Xbot.rgb_picker(%1)'] }
        },
        xbot_buzzer: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [[Lang.Blocks.XBOT_c, 'C'], [Lang.Blocks.XBOT_d, 'D'], [Lang.Blocks.XBOT_e, 'E'], [Lang.Blocks.XBOT_f, 'F'], [Lang.Blocks.XBOT_g, 'G'], [Lang.Blocks.XBOT_a, 'A'], [Lang.Blocks.XBOT_b, 'B']],
                value: 'C',
                fontSize: 11
            }, {
                type: 'Dropdown',
                options: [['2', '2'], ['3', '3'], ['4', '4'], ['5', '5'], ['6', '6'], ['7', '7']],
                value: '2',
                fontSize: 11
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, '4', {
                    type: 'text',
                    params: ['0.5']
                }, null],
                type: 'xbot_buzzer'
            },
            paramsKeyMap: {
                NOTE: 0,
                OCTAVE: 1,
                VALUE: 2
            },
            class: 'xbot_sensor',
            isNotFor: ['xbot_epor_edge'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;

                if (!script.isStart) {
                    var note = script.getStringField('NOTE', script);
                    var octave = script.getStringField('OCTAVE', script);
                    var duration = script.getNumberValue('VALUE', script);
                    var noteOctave = note + octave; // 'C'+ 2 = "C2"
                    //console.log('xbot_buzzer noteOctave' + note + ' ' + octave + ' ' + duration);

                    if (noteOctave == 'C2') sq.note = 65;else if (noteOctave == 'D2') sq.note = 73;else if (noteOctave == 'E2') sq.note = 82;else if (noteOctave == 'F2') sq.note = 87;else if (noteOctave == 'G2') sq.note = 98;else if (noteOctave == 'A2') sq.note = 110;else if (noteOctave == 'B2') sq.note = 123;else if (noteOctave == 'C3') sq.note = 131;else if (noteOctave == 'D3') sq.note = 147;else if (noteOctave == 'E3') sq.note = 165;else if (noteOctave == 'F3') sq.note = 175;else if (noteOctave == 'G3') sq.note = 196;else if (noteOctave == 'A3') sq.note = 220;else if (noteOctave == 'B3') sq.note = 247;else if (noteOctave == 'C4') sq.note = 262;else if (noteOctave == 'D4') sq.note = 294;else if (noteOctave == 'E4') sq.note = 330;else if (noteOctave == 'F4') sq.note = 349;else if (noteOctave == 'G4') sq.note = 392;else if (noteOctave == 'A4') sq.note = 440;else if (noteOctave == 'B4') sq.note = 494;else if (noteOctave == 'C5') sq.note = 523;else if (noteOctave == 'D5') sq.note = 587;else if (noteOctave == 'E5') sq.note = 659;else if (noteOctave == 'F5') sq.note = 698;else if (noteOctave == 'G5') sq.note = 784;else if (noteOctave == 'A5') sq.note = 880;else if (noteOctave == 'B5') sq.note = 988;else if (noteOctave == 'C6') sq.note = 1047;else if (noteOctave == 'D6') sq.note = 1175;else if (noteOctave == 'E6') sq.note = 1319;else if (noteOctave == 'F6') sq.note = 1397;else if (noteOctave == 'G6') sq.note = 1568;else if (noteOctave == 'A6') sq.note = 1760;else if (noteOctave == 'B6') sq.note = 1976;else if (noteOctave == 'C7') sq.note = 2093;else if (noteOctave == 'D7') sq.note = 2349;else if (noteOctave == 'E7') sq.note = 2637;else if (noteOctave == 'F7') sq.note = 2794;else if (noteOctave == 'G7') sq.note = 3136;else if (noteOctave == 'A7') sq.note = 3520;else if (noteOctave == 'B7') sq.note = 3951;else sq.note = 262;

                    //sq.duration = 200;
                    //duration *= 40; //  convert to mSec
                    sq.duration = duration * 40;

                    script.isStart = true;
                    script.timeFlag = 1;

                    var timeValue = duration * 1000;
                    var timer = setTimeout(function () {
                        script.timeFlag = 0;
                        Entry.Xbot.removeTimeout(timer);
                    }, timeValue);
                    Entry.Xbot.timeouts.push(timer);
                    return script;
                } else if (script.timeFlag == 1) {
                    return script;
                } else {
                    delete script.isStart;
                    delete script.timeFlag;
                    Entry.engine.isContinue = false;
                    sq.duration = 0;
                    return script.callReturn();
                }
            },
            syntax: { js: [], py: ['Xbot.buzzer(%1, %2, %3)'] }
        },
        xbot_lcd: {
            color: '#00979D',
            skeleton: 'basic',
            statements: [],
            params: [{
                type: 'Dropdown',
                options: [['0', '0'], ['1', '1']],
                value: '0',
                fontSize: 11,
                arrowColor: EntryStatic.ARROW_COLOR_HW
            }, {
                type: 'Block',
                accept: 'string'
            }, {
                type: 'Indicator',
                img: 'block_icon/hardware_03.png',
                size: 12
            }],
            events: {},
            def: {
                params: [null, {
                    type: 'text',
                    params: ['Hello']
                }, null],
                type: 'xbot_lcd'
            },
            paramsKeyMap: {
                LINE: 0,
                VALUE: 1
            },
            class: 'xbot_sensor',
            isNotFor: ['xbot_epor_edge'],
            func: function func(sprite, script) {
                var sq = Entry.hw.sendQueue;
                var line = script.getNumberField('LINE', script);
                var str = script.getStringValue('VALUE', script);

                if (line == 0) {
                    sq.lcdNum = 0;
                    sq.lcdTxt = str;
                } else if (line == 1) {
                    sq.lcdNum = 1;
                    sq.lcdTxt = str;
                }
                //console.log('ledR' + sq.ledR + ' ledG ' + sq.ledG +' ledB ' + sq.ledB);
                return script.callReturn();
            },
            syntax: { js: [], py: ['Xbot.lcd(%1, %2)'] }
        }
        //endregion xbot 엑스봇
    };
};

/***/ }),

/***/ "./src/playground/blocks/index.js":
/*!****************************************!*\
  !*** ./src/playground/blocks/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./block_arduino */ "./src/playground/blocks/block_arduino.js");
__webpack_require__(/*! ./block_sensorboard */ "./src/playground/blocks/block_sensorboard.js");
__webpack_require__(/*! ./block_joystick */ "./src/playground/blocks/block_joystick.js");
__webpack_require__(/*! ./block_dplay */ "./src/playground/blocks/block_dplay.js");
__webpack_require__(/*! ./block_nemoino */ "./src/playground/blocks/block_nemoino.js");
__webpack_require__(/*! ./block_ardublock */ "./src/playground/blocks/block_ardublock.js");
__webpack_require__(/*! ./block_arduino_nano */ "./src/playground/blocks/block_arduino_nano.js");
__webpack_require__(/*! ./block_roboid */ "./src/playground/blocks/block_roboid.js");
__webpack_require__(/*! ./block_mkboard */ "./src/playground/blocks/block_mkboard.js");
__webpack_require__(/*! ./block_memaker */ "./src/playground/blocks/block_memaker.js");
__webpack_require__(/*! ./block_smartboard */ "./src/playground/blocks/block_smartboard.js");
__webpack_require__(/*! ./block_rokoboard */ "./src/playground/blocks/block_rokoboard.js");
__webpack_require__(/*! ./block_albert */ "./src/playground/blocks/block_albert.js");
__webpack_require__(/*! ./block_altino */ "./src/playground/blocks/block_altino.js");
__webpack_require__(/*! ./block_arduino_ext */ "./src/playground/blocks/block_arduino_ext.js");
__webpack_require__(/*! ./block_bitbrick */ "./src/playground/blocks/block_bitbrick.js");
__webpack_require__(/*! ./block_blacksmith */ "./src/playground/blocks/block_blacksmith.js");
__webpack_require__(/*! ./block_byrobot_dronefighter_controller */ "./src/playground/blocks/block_byrobot_dronefighter_controller.js");
__webpack_require__(/*! ./block_byrobot_dronefighter_drive */ "./src/playground/blocks/block_byrobot_dronefighter_drive.js");
__webpack_require__(/*! ./block_byrobot_dronefighter_flight */ "./src/playground/blocks/block_byrobot_dronefighter_flight.js");
__webpack_require__(/*! ./block_byrobot_petrone_v2_controller */ "./src/playground/blocks/block_byrobot_petrone_v2_controller.js");
__webpack_require__(/*! ./block_byrobot_petrone_v2_drive */ "./src/playground/blocks/block_byrobot_petrone_v2_drive.js");
__webpack_require__(/*! ./block_byrobot_petrone_v2_flight */ "./src/playground/blocks/block_byrobot_petrone_v2_flight.js");
__webpack_require__(/*! ./block_chocopi */ "./src/playground/blocks/block_chocopi.js");
__webpack_require__(/*! ./block_cobl */ "./src/playground/blocks/block_cobl.js");
__webpack_require__(/*! ./block_coconut */ "./src/playground/blocks/block_coconut.js");
__webpack_require__(/*! ./block_codeino */ "./src/playground/blocks/block_codeino.js");
__webpack_require__(/*! ./block_codestar */ "./src/playground/blocks/block_codestar.js");
__webpack_require__(/*! ./block_dadublock */ "./src/playground/blocks/block_dadublock.js");
__webpack_require__(/*! ./block_edumaker */ "./src/playground/blocks/block_edumaker.js");
__webpack_require__(/*! ./block_ev3 */ "./src/playground/blocks/block_ev3.js");
__webpack_require__(/*! ./block_hamster */ "./src/playground/blocks/block_hamster.js");
__webpack_require__(/*! ./block_hummingbird */ "./src/playground/blocks/block_hummingbird.js");
__webpack_require__(/*! ./block_iboard */ "./src/playground/blocks/block_iboard.js");
__webpack_require__(/*! ./block_jdkit */ "./src/playground/blocks/block_jdkit.js");
__webpack_require__(/*! ./block_mechatronics_4d */ "./src/playground/blocks/block_mechatronics_4d.js");
__webpack_require__(/*! ./block_modi */ "./src/playground/blocks/block_modi.js");
__webpack_require__(/*! ./block_neobot */ "./src/playground/blocks/block_neobot.js");
__webpack_require__(/*! ./block_neobot_sensor_theme */ "./src/playground/blocks/block_neobot_sensor_theme.js");
__webpack_require__(/*! ./block_roborobo */ "./src/playground/blocks/block_roborobo.js");
__webpack_require__(/*! ./block_robotis */ "./src/playground/blocks/block_robotis.js");
__webpack_require__(/*! ./block_robotori */ "./src/playground/blocks/block_robotori.js");
__webpack_require__(/*! ./block_truerobot */ "./src/playground/blocks/block_truerobot.js");
__webpack_require__(/*! ./block_turtle */ "./src/playground/blocks/block_turtle.js");
__webpack_require__(/*! ./block_xbot */ "./src/playground/blocks/block_xbot.js");
__webpack_require__(/*! ./block_playcode */ "./src/playground/blocks/block_playcode.js");
__webpack_require__(/*! ./block_mechatro */ "./src/playground/blocks/block_mechatro.js");
__webpack_require__(/*! ./block_creamo */ "./src/playground/blocks/block_creamo.js");
__webpack_require__(/*! ./block_funboard */ "./src/playground/blocks/block_funboard.js");

Entry.HARDWARE_LIST = {
    '1.1': Entry.Arduino,
    '1.2': Entry.SensorBoard,
    '1.3': Entry.CODEino,
    '1.4': Entry.joystick,
    '1.5': Entry.dplay,
    '1.6': Entry.nemoino,
    '1.7': Entry.Xbot,
    '1.8': Entry.ardublock,
    '1.9': Entry.ArduinoExt,
    '1.10': Entry.ArduinoNano,
    '1.A': Entry.Cobl,
    '1.B': Entry.Blacksmith,
    '2.4': Entry.Hamster,
    '2.5': Entry.Albert,
    '2.9': Entry.Turtle,
    '2.FF': Entry.Roboid,
    '3.1': Entry.Bitbrick,
    '4.2': Entry.Arduino,
    '5.1': Entry.Neobot,
    '5.2': Entry.NeobotSensorTheme,
    '6.1': Entry.mkboard,
    '6.2': Entry.memaker,
    '7.1': Entry.Robotis_carCont,
    '7.2': Entry.Robotis_openCM70,
    '8.1': Entry.Arduino,
    '9.1': Entry.iboard,
    'A.1': Entry.SmartBoard,
    'B.1': Entry.Codestar,
    'C.1': Entry.DaduBlock,
    'C.2': Entry.DaduBlock_Car,
    'D.1': Entry.robotori,
    'F.1': Entry.byrobot_dronefighter_controller,
    'F.2': Entry.byrobot_dronefighter_drive,
    'F.3': Entry.byrobot_dronefighter_flight,
    'F.4': Entry.byrobot_petrone_v2_controller,
    'F.5': Entry.byrobot_petrone_v2_drive,
    'F.6': Entry.byrobot_petrone_v2_flight,
    '10.1': Entry.Roborobo_Roduino,
    '10.2': Entry.Roborobo_SchoolKit,
    '12.1': Entry.EV3,
    '13.1': Entry.rokoboard,
    '14.1': Entry.Chocopi,
    '15.1': Entry.coconut,
    '16.1': Entry.MODI,
    '18.1': Entry.Altino,
    '19.1': Entry.trueRobot,
    '1A.1': Entry.ArduinoNano,
    '1B.1': Entry.EduMaker,
    '1C.1': Entry.hummingbird,
    '1D.1': Entry.JDKit,
    '1E.1': Entry.playcode,
    '1F.1': Entry.mechatro,
    '20.1': Entry.Creamo,
    '21.1': Entry.FunBoard
};

/***/ }),

/***/ "./src/playground/board.js":
/*!*********************************!*\
  !*** ./src/playground/board.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 */


/*
 *
 * @param {object} dom which to inject playground
 */

Entry.Board = function (option) {
    Entry.Model(this, false);
    this.readOnly = option.readOnly === undefined ? false : option.readOnly;
    this.changeEvent = new Entry.Event(this);

    this.createView(option);
    this.updateOffset();

    this.scroller = new Entry.Scroller(this, true, true);

    this._magnetMap = {};

    Entry.ANIMATION_DURATION = 200;
    Entry.BOARD_PADDING = 100;

    this._initContextOptions();
    Entry.Utils.disableContextmenu(this.svgDom);

    this._addControl();
    this._bindEvent();
    Entry.addEventListener('fontLoaded', this.reDraw.bind(this));
    Entry.Utils.setSVGDom(this.svgDom);
};

Entry.Board.OPTION_PASTE = 0;
Entry.Board.OPTION_ALIGN = 1;
Entry.Board.OPTION_CLEAR = 2;
Entry.Board.OPTION_DOWNLOAD = 3;

Entry.Board.DRAG_RADIUS = 5;

(function (p) {
    p.schema = {
        code: null,
        dragBlock: null,
        magnetedBlockView: null,
        selectedBlockView: null
    };

    p.createView = function (option) {
        var dom = option.dom;
        if (typeof dom === 'string') dom = $('#' + dom);else dom = $(dom);

        if (dom.prop('tagName') !== 'DIV') return console.error('Dom is not div element');

        this.view = dom;
        this._svgId = 'play' + new Date().getTime();

        this.workspace = option.workspace;

        this._activatedBlockView = null;

        this.wrapper = Entry.Dom('div', {
            parent: dom,
            class: 'entryBoardWrapper'
        });

        this.svgDom = Entry.Dom($('<svg id="' + this._svgId + '" class="entryBoard" width="100%" height="100%"' + 'version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), { parent: this.wrapper });

        this.visible = true;
        this.svg = Entry.SVG(this._svgId);
        $(window).scroll(this.updateOffset.bind(this));

        this.svgGroup = this.svg.elem('g');
        this.svgThreadGroup = this.svgGroup.elem('g');
        this.svgThreadGroup.board = this;

        this.svgBlockGroup = this.svgGroup.elem('g');
        this.svgBlockGroup.board = this;

        if (option.isOverlay) {
            this.wrapper.addClass('entryOverlayBoard');
            this.generateButtons();
            this.suffix = 'overlayBoard';
        } else this.suffix = 'board';

        Entry.Utils.addFilters(this.svg, this.suffix);
        this.pattern = Entry.Utils.addBlockPattern(this.svg, this.suffix).pattern;
    };

    p.changeCode = function (code, shouldNotCreateView, cb) {
        if (this.code && this.codeListener) this.codeListener.destroy();

        this.set({ code: code });

        var that = this;
        if (code && !shouldNotCreateView) {
            this.codeListener = this.code.changeEvent.attach(this, function () {
                that.changeEvent.notify();
            });
            this.svgBlockGroup.remove();
            this.svgThreadGroup.remove();
            code.createView(this);
            if (code.isAllThreadsInOrigin()) this.alignThreads();
            cb && cb();
        }
        this.scroller.resizeScrollBar();
    };

    p.bindCodeView = function (codeView) {
        this.svgBlockGroup.remove();
        this.svgThreadGroup.remove();
        this.svgBlockGroup = codeView.svgBlockGroup;
        this.svgThreadGroup = codeView.svgThreadGroup;
        this.svgGroup.appendChild(this.svgThreadGroup);
        this.svgGroup.appendChild(this.svgBlockGroup);
    };

    p.setMagnetedBlock = function (block, magnetType) {
        if (this.magnetedBlockView === block) return;

        this.magnetedBlockView && this.magnetedBlockView.set({ magneting: false });
        this.set({ magnetedBlockView: block });
        if (block) {
            block.set({ magneting: magnetType });
            block.dominate();
        }
    };

    p.getCode = function () {
        return this.code;
    };

    p.findById = function (id) {
        return this.code.findById(id);
    };

    p._addControl = function () {
        var dom = this.svgDom;
        var that = this;
        dom.mousedown(function () {
            that.onMouseDown.apply(that, arguments);
        });
        dom.bind('touchstart', function () {
            that.onMouseDown.apply(that, arguments);
        });
        dom.on('wheel', function () {
            that.mouseWheel.apply(that, arguments);
        });

        var scroller = that.scroller;
        if (scroller) {
            dom.mouseenter(function (e) {
                scroller.setOpacity(1);
            });
            dom.mouseleave(function (e) {
                scroller.setOpacity(0);
            });
        }

        Entry.Utils.bindBlockViewHoverEvent(this, dom);
    };

    p.removeControl = function (eventType) {
        this.svgDom.off(eventType);
    };

    p.onMouseDown = function (e) {
        if (this.workspace.getMode() == Entry.Workspace.MODE_VIMBOARD) return;

        if (e.stopPropagation) e.stopPropagation();
        if (e.preventDefault) e.preventDefault();

        var board = this;
        var longPressTimer = null;
        if (e.button === 0 || e.originalEvent && e.originalEvent.touches) {
            var eventType = e.type;
            var mouseEvent = Entry.Utils.convertMouseEvent(e);
            if (Entry.documentMousedown) Entry.documentMousedown.notify(mouseEvent);
            var doc = $(document);

            this.mouseDownCoordinate = {
                x: mouseEvent.pageX,
                y: mouseEvent.pageY
            };

            doc.bind('mousemove.entryBoard', onMouseMove);
            doc.bind('mouseup.entryBoard', onMouseUp);
            doc.bind('touchmove.entryBoard', onMouseMove);
            doc.bind('touchend.entryBoard', onMouseUp);
            this.dragInstance = new Entry.DragInstance({
                startX: mouseEvent.pageX,
                startY: mouseEvent.pageY,
                offsetX: mouseEvent.pageX,
                offsetY: mouseEvent.pageY
            });

            if (eventType === 'touchstart') {
                longPressTimer = setTimeout(function () {
                    if (longPressTimer) {
                        longPressTimer = null;
                        onMouseUp();
                        board._rightClick(e);
                    }
                }, 1000);
            }
        } else if (Entry.Utils.isRightButton(e)) this._rightClick(e);

        function onMouseMove(e) {
            if (e.stopPropagation) e.stopPropagation();
            if (e.preventDefault) e.preventDefault();

            var mouseEvent = Entry.Utils.convertMouseEvent(e);

            var mouseDownCoordinate = board.mouseDownCoordinate;
            var pageX = mouseEvent.pageX;
            var pageY = mouseEvent.pageY;
            var diff = Math.sqrt(Math.pow(pageX - mouseDownCoordinate.x, 2) + Math.pow(pageY - mouseDownCoordinate.y, 2));
            if (diff < Entry.Board.DRAG_RADIUS) return;

            if (longPressTimer) {
                clearTimeout(longPressTimer);
                longPressTimer = null;
            }

            var dragInstance = board.dragInstance;
            board.scroller.scroll(pageX - dragInstance.offsetX, pageY - dragInstance.offsetY);
            dragInstance.set({ offsetX: pageX, offsetY: pageY });
        }

        function onMouseUp(e) {
            if (longPressTimer) {
                clearTimeout(longPressTimer);
                longPressTimer = null;
            }
            $(document).unbind('.entryBoard');
            delete board.mouseDownCoordinate;
            delete board.dragInstance;
        }
    };

    p.mouseWheel = function (e) {
        e = e.originalEvent;
        e.preventDefault();
        var disposeEvent = Entry.disposeEvent;
        if (disposeEvent) disposeEvent.notify(e);

        this.scroller.scroll(e.wheelDeltaX || -e.deltaX, e.wheelDeltaY || -e.deltaY);
    };

    p.setSelectedBlock = function (blockView) {
        var old = this.selectedBlockView;

        if (old) old.removeSelected();

        if (blockView instanceof Entry.BlockView) {
            blockView.addSelected();
        } else blockView = null;

        this.set({ selectedBlockView: blockView });
    };

    p.hide = function () {
        this.wrapper.addClass('entryRemove');
        this.visible = false;
    };

    p.show = function () {
        this.wrapper.removeClass('entryRemove');
        this.visible = true;
    };

    p.alignThreads = function (reDraw) {
        var threads = this.code.getThreads();
        if (!threads.length) return;

        var domHeight = this.svgDom.height();

        var verticalGap = 15;
        var acculmulatedTop = 15;
        var columWidth = 0;
        var limitTopPosition = domHeight - 30;
        var left = 50;

        for (var i = 0; i < threads.length; i++) {
            var thread = threads[i];
            var block = thread.getFirstBlock();
            if (!block) continue;
            reDraw && thread.view.reDraw();
            var blockView = block.view;
            if (!blockView.movable) continue;
            var bBox = blockView.svgGroup.getBBox();
            var top = acculmulatedTop + verticalGap;
            if (top > limitTopPosition) {
                left = left + columWidth + 10;
                columWidth = 0;
                acculmulatedTop = 15;
            }
            columWidth = Math.max(columWidth, bBox.width);
            top = acculmulatedTop + verticalGap;
            blockView._moveTo(left - bBox.x, top, false);
            acculmulatedTop = acculmulatedTop + bBox.height + verticalGap;
        }
        this.scroller.resizeScrollBar();
    };

    p.clear = function () {
        this.svgBlockGroup.remove();
        this.svgThreadGroup.remove();
    };

    p.updateOffset = function () {
        this._offset = this.svg.getBoundingClientRect();
        var w = $(window),
            scrollTop = w.scrollTop(),
            scrollLeft = w.scrollLeft(),
            offset = this._offset;

        this.relativeOffset = {
            top: offset.top - scrollTop,
            left: offset.left - scrollLeft
        };

        var svgDom = this.svgDom;
        if (svgDom) {
            this._svgDomRect = {
                width: svgDom.width(),
                height: svgDom.height()
            };
        }

        if (this.btnWrapper) {
            this.btnWrapper.attr({
                transform: 'translate(' + (offset.width / 2 - 65) + ',' + (offset.height - 200) + ')'
            });
        }
    };

    p.generateButtons = function () {
        var btnWrapper = this.btnWrapper = this.svgGroup.elem('g');

        var TEXT_CLASS = 'entryFunctionButtonText';
        var BUTTON_CLASS = 'entryFunctionButton';

        var saveText = btnWrapper.elem('text', {
            x: 102.5,
            y: 33,
            class: TEXT_CLASS
        });
        saveText.textContent = Lang.Buttons.save;

        var cancelText = btnWrapper.elem('text', {
            x: 27,
            y: 33,
            class: TEXT_CLASS
        });
        cancelText.textContent = Lang.Buttons.cancel;

        var saveButton = btnWrapper.elem('circle', {
            cx: 102.5,
            cy: 27.5,
            r: 27.5,
            class: BUTTON_CLASS
        });

        var cancelButton = btnWrapper.elem('circle', {
            cx: 27.5,
            cy: 27.5,
            r: 27.5,
            class: BUTTON_CLASS
        });

        var saveFunc = this.save.bind(this);
        var cancelFunc = this.cancelEdit.bind(this);

        $(saveButton).bind('mousedown touchstart', saveFunc);
        $(saveText).bind('mousedown touchstart', saveFunc);
        $(cancelButton).bind('mousedown touchstart', cancelFunc);
        $(cancelText).bind('mousedown touchstart', cancelFunc);
    };

    p.cancelEdit = function () {
        this.workspace.setMode(Entry.Workspace.MODE_BOARD, 'cancelEdit');
    };

    p.save = function () {
        this.workspace.setMode(Entry.Workspace.MODE_BOARD, 'save');
    };

    p.generateCodeMagnetMap = function () {
        var code = this.code;
        var dragBlock = this.dragBlock;
        if (!(code && dragBlock)) return;

        //reset magnetMap
        this._magnetMap = {};

        for (var targetType in dragBlock.magnet) {
            if (targetType === 'next' && dragBlock.block.getLastBlock().view.magnet.next === undefined) {
                continue;
            }

            var metaData = this._getCodeBlocks(code, targetType);
            metaData.sort(function (a, b) {
                return a.point - b.point;
            });

            metaData.unshift({ point: -Number.MAX_VALUE, blocks: [] });

            for (var i = 1; i < metaData.length; i++) {
                var pointData = metaData[i];
                var includeData = pointData;
                var block = pointData.startBlock;
                if (block) {
                    var limit = pointData.endPoint,
                        index = i;
                    while (limit > includeData.point) {
                        includeData.blocks.push(block);
                        index++;
                        includeData = metaData[index];
                        if (!includeData) break;
                    }
                    delete pointData.startBlock;
                }
                pointData.endPoint = Number.MAX_VALUE;
                metaData[i - 1].endPoint = pointData.point;
            }

            this._magnetMap[targetType] = metaData;
        }
    };

    p._getCodeBlocks = function (code, targetType) {
        var threads = code.getThreads();
        var blocks = [];
        var func;
        switch (targetType) {
            case 'previous':
                func = this._getNextMagnets;
                break;
            case 'next':
                func = this._getPreviousMagnets;
                break;
            case 'string':
            case 'boolean':
                func = this._getFieldMagnets;
                break;
            case 'param':
                func = this._getOutputMagnets;
                break;
            default:
                return [];
        }
        for (var i = 0; i < threads.length; i++) {
            var thread = threads[i];
            blocks = blocks.concat(func.call(this, thread, thread.view.zIndex, null, targetType));
        }
        return blocks;
    };

    p._getNextMagnets = function (thread, zIndex, offset, targetType) {
        var blocks = thread.getBlocks();
        var statementBlocks = [];
        var metaData = [];
        if (!offset) offset = { x: 0, y: 0 };
        var cursorX = offset.x;
        var cursorY = offset.y;

        for (var i = 0; i < blocks.length; i++) {
            var block = blocks[i];
            var blockView = block.view;
            blockView.zIndex = zIndex;
            if (blockView.dragInstance) {
                break;
            }

            cursorY += blockView.y;
            cursorX += blockView.x;
            var endPoint = cursorY + 1;
            if (blockView.magnet.next) {
                endPoint += blockView.height;
                metaData.push({
                    point: cursorY,
                    endPoint: endPoint,
                    startBlock: block,
                    blocks: []
                });
                metaData.push({
                    point: endPoint,
                    blocks: []
                });
                blockView.absX = cursorX;
            }
            if (block.statements) zIndex += 0.01;
            for (var j = 0; j < block.statements.length; j++) {
                var thread = block.statements[j];
                var statement = block.view._statements[j];
                statement.zIndex = zIndex;
                statement.absX = cursorX + statement.x;
                metaData.push({
                    point: statement.y + cursorY - 30,
                    endPoint: statement.y + cursorY,
                    startBlock: statement,
                    blocks: []
                });
                metaData.push({
                    point: statement.y + cursorY + statement.height,
                    blocks: []
                });
                zIndex += 0.01;
                statementBlocks = statementBlocks.concat(this._getNextMagnets(thread, zIndex, {
                    x: statement.x + cursorX,
                    y: statement.y + cursorY
                }, targetType));
            }
            if (blockView.magnet.next) {
                cursorY += blockView.magnet.next.y;
                cursorX += blockView.magnet.next.x;
            }
        }
        return statementBlocks.concat(metaData);
    };

    p._getPreviousMagnets = function (thread, zIndex, offset, targetType) {
        var blocks = thread.getBlocks();
        var metaData = [];
        if (!offset) offset = { x: 0, y: 0 };
        var cursorX = offset.x;
        var cursorY = offset.y;

        var block = blocks[0];
        var blockView = block.view;
        blockView.zIndex = zIndex;
        if (blockView.dragInstance) return [];
        cursorY += blockView.y - 15;
        cursorX += blockView.x;
        var endPoint = cursorY + 1;
        if (blockView.magnet.previous) {
            endPoint += blockView.height;
            metaData.push({
                point: cursorY,
                endPoint: endPoint,
                startBlock: block,
                blocks: []
            });
            metaData.push({
                point: endPoint,
                blocks: []
            });
            blockView.absX = cursorX;
            return metaData;
        }
        return [];
    };

    p._getFieldMagnets = function (thread, zIndex, offset, targetType) {
        var blocks = thread.getBlocks();
        var statementBlocks = [];
        var metaData = [];
        var that = this;
        if (!offset) offset = { x: 0, y: 0 };
        var cursorX = offset.x;
        var cursorY = offset.y;
        for (var i = 0; i < blocks.length; i++) {
            var block = blocks[i];
            var blockView = block.view;
            if (blockView.dragInstance) break;
            blockView.zIndex = zIndex;
            cursorY += blockView.y;
            cursorX += blockView.x;
            var endPoint = cursorY + 1;
            if (blockView.magnet.next) endPoint += blockView.magnet.next.y;
            metaData = metaData.concat(this._getFieldBlockMetaData(blockView, cursorX, cursorY, zIndex, targetType));
            if (block.statements) zIndex += 0.01;
            for (var j = 0; j < block.statements.length; j++) {
                var thread = block.statements[j];
                var statement = block.view._statements[j];
                statementBlocks = statementBlocks.concat(this._getFieldMagnets(thread, zIndex, {
                    x: statement.x + cursorX,
                    y: statement.y + cursorY
                }, targetType));
            }
            if (blockView.magnet.next) {
                cursorY += blockView.magnet.next.y;
                cursorX += blockView.magnet.next.x;
            }
        }
        return statementBlocks.concat(metaData);
    };

    p._getFieldBlockMetaData = function (blockView, cursorX, cursorY, zIndex, targetType) {
        var contents = blockView._contents;
        var metaData = [];
        cursorY += blockView.contentPos.y;
        for (var i = 0; i < contents.length; i++) {
            var content = contents[i];
            if (!(content instanceof Entry.FieldBlock)) continue;
            var contentBlock = content._valueBlock;
            if (contentBlock.view.dragInstance) continue;
            if (content.acceptType !== targetType && content.acceptType !== 'boolean') {
                continue;
            }
            var startX = cursorX + content.box.x;
            var startY = cursorY + content.box.y + blockView.contentHeight % 1000 * -0.5;
            var endY = cursorY + content.box.y + content.box.height;
            if (content.acceptType === targetType) {
                metaData.push({
                    point: startY,
                    endPoint: endY,
                    startBlock: contentBlock,
                    blocks: []
                });
                metaData.push({
                    point: endY,
                    blocks: []
                });
            }
            var contentBlockView = contentBlock.view;
            contentBlockView.absX = startX;
            contentBlockView.zIndex = zIndex;
            metaData = metaData.concat(this._getFieldBlockMetaData(contentBlockView, startX + contentBlockView.contentPos.x, startY + contentBlockView.contentPos.y, zIndex + 0.01, targetType));
        }
        return metaData;
    };

    p._getOutputMagnets = function (thread, zIndex, offset, targetType) {
        var blocks = thread.getBlocks();
        var statementBlocks = [];
        var metaData = [];
        var that = this;
        if (!offset) offset = { x: 0, y: 0 };
        var cursorX = offset.x;
        var cursorY = offset.y;
        for (var i = 0; i < blocks.length; i++) {
            var block = blocks[i];
            var blockView = block.view;
            if (blockView.dragInstance) break;
            blockView.zIndex = zIndex;
            cursorY += blockView.y;
            cursorX += blockView.x;
            var endPoint = cursorY + 1;
            if (blockView.magnet.next) endPoint += blockView.magnet.next.y;
            metaData = metaData.concat(this._getOutputMetaData(blockView, cursorX, cursorY, zIndex, targetType));
            if (block.statements) zIndex += 0.01;
            for (var j = 0; j < block.statements.length; j++) {
                var thread = block.statements[j];
                var statement = block.view._statements[j];
                statementBlocks = statementBlocks.concat(this._getOutputMagnets(thread, zIndex, {
                    x: statement.x + cursorX,
                    y: statement.y + cursorY
                }, targetType));
            }
            if (blockView.magnet.next) {
                cursorY += blockView.magnet.next.y;
                cursorX += blockView.magnet.next.x;
            }
        }
        return statementBlocks.concat(metaData);
    };

    p._getOutputMetaData = function (blockView, cursorX, cursorY, zIndex, targetType) {
        var contents = blockView._contents;
        var metaData = [];
        cursorX += blockView.contentPos.x;
        cursorY += blockView.contentPos.y;
        for (var i = 0; i < contents.length; i++) {
            var content = contents[i];
            var startX = cursorX + content.box.x;
            var startY = cursorY - 24;
            var endY = cursorY;
            if (content instanceof Entry.FieldBlock) {
                if (content.acceptType === targetType) {
                    metaData.push({
                        point: startY,
                        endPoint: endY,
                        startBlock: content,
                        blocks: []
                    });
                    metaData.push({
                        point: endY,
                        blocks: []
                    });
                    content.absX = startX;
                    content.zIndex = zIndex;
                    content.width = 20;
                }

                var contentBlock = content._valueBlock;
                if (contentBlock) {
                    metaData = metaData.concat(this._getOutputMetaData(contentBlock.view, startX, cursorY + content.box.y, zIndex + 0.01, targetType));
                }
                continue;
            } else if (content instanceof Entry.FieldOutput) {
                if (content.acceptType !== targetType) continue;
                metaData.push({
                    point: startY,
                    endPoint: endY,
                    startBlock: content,
                    blocks: []
                });
                metaData.push({
                    point: endY,
                    blocks: []
                });
                content.absX = startX;
                content.zIndex = zIndex;
                content.width = 20;
                var contentBlock = content._valueBlock;
                if (!contentBlock) continue;
                if (contentBlock.view.dragInstance) continue;
                var contentBlockView = contentBlock.view;
                metaData = metaData.concat(this._getOutputMetaData(contentBlockView, cursorX + content.box.x, cursorY + content.box.y, zIndex + 0.01, targetType));
            }
        }
        return metaData;
    };

    p.getNearestMagnet = function (x, y, targetType) {
        var targetArray = this._magnetMap[targetType];
        if (!targetArray || targetArray.length === 0) return;

        var minIndex = 0,
            maxIndex = targetArray.length - 1,
            index,
            pointData,
            result = null,
            searchValue = targetType === 'previous' ? y - 15 : y,
            leftOffset = ['previous', 'next'].indexOf(targetType) > -1 ? 20 : 0;
        while (minIndex <= maxIndex) {
            index = (minIndex + maxIndex) / 2 | 0;
            pointData = targetArray[index];

            if (searchValue < pointData.point) {
                maxIndex = index - 1;
            } else if (searchValue > pointData.endPoint) {
                minIndex = index + 1;
            } else {
                var blocks = pointData.blocks;
                for (var i = 0; i < blocks.length; i++) {
                    var blockView = blocks[i].view;
                    if (blockView.absX - leftOffset < x && x < blockView.absX + blockView.width) {
                        var resultBlock = pointData.blocks[i];
                        if (!result || result.view.zIndex < resultBlock.view.zIndex) result = pointData.blocks[i];
                    }
                }
                return result;
            }
        }
        return null;
    };

    p.dominate = function (thread) {
        if (!thread) {
            return;
        }

        var code = this.code;
        // currently top of dom
        // no need to dominate again
        if (!_shouldDominate(thread.view.zIndex, code.getMaxZIndex())) {
            return;
        }

        var block = thread.getFirstBlock();
        if (!block) return;

        //udpate zIndex data first
        code.dominate(thread);
        //udpate visual things next frame
        requestAnimationFrame(function () {
            var blockView = block && block.view;
            if (this.svgBlockGroup && blockView) this.svgBlockGroup.appendChild(blockView.svgGroup);
        }.bind(this));

        function _shouldDominate(zIndex, max) {
            return zIndex + 1 < max || !zIndex || !max;
        }
    };

    p.enablePattern = function () {
        this.pattern.removeAttribute('style');
    };

    p.disablePattern = function () {
        this.pattern.attr({ style: 'display: none' });
    };

    p._removeActivated = function () {
        if (!this._activatedBlockView) return;

        this._activatedBlockView.removeActivated();
        this._activatedBlockView = null;
    };

    p.activateBlock = function (block) {
        var view = block.view;
        var pos = view.getAbsoluteCoordinate();
        var svgDom = this.svgDom;
        var blockX = pos.x,
            blockY = pos.y;

        var rect = this.getSvgDomRect();
        var dx = rect.width / 2 - blockX;
        var dy = rect.height / 2 - blockY - 100;
        this.scroller.scroll(dx, dy);

        view.addActivated();

        this._activatedBlockView = view;
    };

    p.reDraw = function () {
        this.code && this.code.view && this.code.view.reDraw();
    };

    p.separate = function (block, count, index) {
        if (typeof block === 'string') block = this.findById(block);
        if (block.view) block.view._toGlobalCoordinate();
        if (block.getBlockType() === 'output') {
            if (!count) return;
            var prevOutputBlock = block.getPrevOutputBlock();
            var nextOutputBlock = block;
            for (var i = 0; i < count; i++) {
                nextOutputBlock = nextOutputBlock.getOutputBlock();
            }block.separate(count, index);
            if (prevOutputBlock && nextOutputBlock) {
                nextOutputBlock.separate();
                nextOutputBlock.doInsert(prevOutputBlock.view._contents[1]);
            }
        } else {
            var nextBlock, backupPos;
            var prevBlock = block.getPrevBlock();
            if (!prevBlock && block.thread instanceof Entry.Thread && block.thread.parent instanceof Entry.Code) {
                nextBlock = block.thread.getBlock(block.thread.indexOf(block) + count);

                if (nextBlock) backupPos = nextBlock.view.getAbsoluteCoordinate();
            }
            var prevThread = block.thread;
            block.separate(count, index);
            if (prevBlock && prevBlock.getNextBlock()) prevBlock.getNextBlock().view.bindPrev();else if (nextBlock) {
                nextBlock.view._toGlobalCoordinate();
                nextBlock.moveTo(backupPos.x, backupPos.y);
            }
        }
    };

    p.insert = function (block, pointer, count) {
        // pointer can be target
        if (typeof block === 'string') block = this.findById(block);

        var targetBlock;

        if (pointer.length === 3) {
            // for global
            this.separate(block, count, pointer[2]);
            block.moveTo(pointer[0], pointer[1]);
        } else if (pointer.length === 4 && pointer[3] == -1) {
            // insert on top
            pointer[3] = 0;
            targetBlock = this.code.getByPointer(pointer);
            this.separate(block, count, pointer[2]);
            block = block.getLastBlock();

            targetBlock.view.bindPrev(block);
            targetBlock.doInsert(block);
        } else {
            this.separate(block, count);
            var targetObj;
            if (pointer instanceof Array) targetObj = this.code.getByPointer(pointer);else targetObj = pointer;
            if (targetObj instanceof Entry.Block) {
                if (block.getBlockType() === 'basic') block.view.bindPrev(targetObj);
                block.doInsert(targetObj);
            } else if (targetObj instanceof Entry.FieldStatement) {
                block.view.bindPrev(targetObj);
                targetObj.insertTopBlock(block);
            } else if (targetObj instanceof Entry.Thread) {
                targetObj = targetObj.view.getParent();
                block.view.bindPrev(targetObj);
                targetObj.insertTopBlock(block);
            } else {
                block.doInsert(targetObj);
            }
        }
    };

    p.adjustThreadsPosition = function () {
        var code = this.code;
        if (!code) return;
        if (!code.view) return;

        var threads = code.getThreads();
        if (!threads || threads.length === 0) return;

        threads = threads.sort(function (a, b) {
            return a.getFirstBlock().view.x - b.getFirstBlock().view.x;
        });

        var block = threads[0].getFirstBlock();
        if (block) {
            block = block.view;
            var pos = block.getAbsoluteCoordinate();

            this.scroller.scroll(50 - pos.x, 30 - pos.y, true);
        }
    };

    p._initContextOptions = function () {
        var that = this;
        this._contextOptions = [{
            activated: true,
            option: {
                text: Lang.Blocks.Paste_blocks,
                enable: !!Entry.clipboard && !this.readOnly,
                callback: function callback() {
                    Entry.do('addThread', Entry.clipboard).value.getFirstBlock().copyToClipboard();
                }
            }
        }, {
            activated: true,
            option: {
                text: Lang.Blocks.tidy_up_block,
                enable: !this.readOnly,
                callback: function callback() {
                    that.alignThreads();
                }
            }
        }, {
            activated: true,
            option: {
                text: Lang.Blocks.Clear_all_blocks,
                enable: !this.readOnly,
                callback: function callback() {
                    Entry.do('destroyThreads');
                }
            }
        }, {
            activated: Entry.type === 'workspace' && Entry.Utils.isChrome() && !Entry.isMobile(),
            option: {
                text: Lang.Menus.save_as_image_all,
                enable: !this.readOnly,
                callback: function callback() {
                    var threads = that.code.getThreads();
                    var images = [];
                    threads.forEach(function (t, i) {
                        var topBlock = t.getFirstBlock();
                        if (!topBlock) return;
                        console.log('threads.length=', threads.length);
                        if (threads.length > 1 && Entry.isOffline) {
                            topBlock.view.getDataUrl().then(function (data) {
                                images.push(data);
                                if (images.length == threads.length) {
                                    Entry.dispatchEvent('saveBlockImages', {
                                        images: images
                                    });
                                }
                            });
                        } else {
                            topBlock.view.downloadAsImage(++i);
                        }
                    });
                }
            }
        }];
    };

    p.activateContextOption = function (option) {
        this._contextOptions[option].activated = true;
    };

    p.deActivateContextOption = function (option) {
        this._contextOptions[option].activated = false;
    };

    p._bindEvent = function () {
        var evt = Entry.documentMousedown;
        if (evt) {
            evt.attach(this, this.setSelectedBlock);
            evt.attach(this, this._removeActivated);
        }

        evt = Entry.windowResized;
        if (evt) evt.attach(this, Entry.Utils.debounce(this.updateOffset, 200));
    };

    p.offset = function () {
        if (!this._offset || this._offset.top === 0 && this._offset.left === 0) {
            this.updateOffset();
            return this._offset;
        }
        return this._offset;
    };

    p._rightClick = function (e) {
        var disposeEvent = Entry.disposeEvent;
        disposeEvent && disposeEvent.notify(e);
        if (!this.visible) return;
        var that = this;

        var options = [];
        var contextOptions = this._contextOptions;

        contextOptions[Entry.Board.OPTION_PASTE].option.enable = !!Entry.clipboard;
        contextOptions[Entry.Board.OPTION_DOWNLOAD].option.enable = this.code.getThreads().length !== 0;

        for (var i = 0; i < this._contextOptions.length; i++) {
            if (contextOptions[i].activated) options.push(contextOptions[i].option);
        }

        e = Entry.Utils.convertMouseEvent(e);
        Entry.ContextMenu.show(options, null, { x: e.clientX, y: e.clientY });
    };

    p.getDom = function (query) {
        query = query.concat();
        var key = query.shift();
        if (key === 'trashcan') return this.workspace.trashcan.svgGroup;else if (key === 'coord') return {
            getBoundingClientRect: function () {
                var halfWidth = 20,
                    boardOffset = this.relativeOffset;
                return {
                    top: query[1] + boardOffset.top - halfWidth,
                    left: query[0] + boardOffset.left - halfWidth,
                    width: 2 * halfWidth,
                    height: 2 * halfWidth
                };
            }.bind(this)
        };else if (key instanceof Array) {
            var targetObj = this.code.getByPointer(key);
            if (targetObj.getDom) {
                return targetObj.getDom(query);
            } else {
                return targetObj.svgGroup;
            }
        }
    };

    p.findBlock = function (block) {
        if (typeof block === 'string') return this.findById(block);else if (block && block.id) return this.findById(block.id) || block;else if (block instanceof Array) return this.code.getByPointer(block);
        return block;
    };

    p.scrollToPointer = function (pointer, query) {
        var obj = this.code.getByPointer(pointer);
        var pos;
        if (obj instanceof Entry.Block) {
            pos = obj.view.getAbsoluteCoordinate();
            obj.view.dominate();
        } else if (obj instanceof Entry.Thread) {
            pos = obj.view.requestAbsoluteCoordinate();
        } else if (obj.getAbsolutePosFromBoard) pos = obj.getAbsolutePosFromBoard();

        var newX = 0,
            newY = 0,
            offset = this._offset,
            width = offset.width,
            height = offset.height;

        if (pos.x > width - 200) newX = width - 200 - pos.x;else if (pos.x < 100) newX = 100 - pos.x;

        if (pos.y > height - 200) newY = height - 200 - pos.y;else if (pos.y < 100) newY = 100 - pos.y;

        this.scroller.scroll(newX, newY, true);
        return [newX, newY];
    };

    p.getSvgDomRect = function () {
        if (!this._svgDomRect) this.updateOffset();
        return this._svgDomRect;
    };
})(Entry.Board.prototype);

/***/ }),

/***/ "./src/playground/code.js":
/*!********************************!*\
  !*** ./src/playground/code.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


/*
 *
 */

Entry.Code = function (code, object) {
    Entry.Model(this, false);

    if (object) this.object = object;

    this._data = new Entry.Collection();

    this._eventMap = {};
    this._blockMap = {};

    this.executors = [];
    this.watchEvent = new Entry.Event(this);

    this.executeEndEvent = new Entry.Event(this);
    this.changeEvent = new Entry.Event(this);
    this.changeEvent.attach(this, this._handleChange);

    this._maxZIndex = 0;

    this.load(code);
};

Entry.STATEMENT = 0;
Entry.PARAM = -1;

(function (p) {
    p.schema = {
        view: null,
        board: null
    };

    p.load = function (code) {
        if (Entry.engine && Entry.engine.isState('run')) return;

        if (!(code instanceof Array)) code = JSON.parse(code);

        this.clear();

        for (var i = 0; i < code.length; i++) {
            this._data.push(new Entry.Thread(code[i], this));
        }return this;
    };

    p.clear = function (isNotForce) {
        isNotForce = isNotForce === undefined ? false : isNotForce;
        for (var i = this._data.length - 1; i >= 0; i--) {
            this._data[i].destroy(false, isNotForce);
        }this.clearExecutors();
    };

    p.createView = function (board) {
        if (this.view === null) {
            this.set({
                view: new Entry.CodeView(this, board),
                board: board
            });
        } else {
            this.set({ board: board });
            board.bindCodeView(this.view);
        }
    };

    p.destroyView = function () {
        if (!this.view) return;
        this.view.destroy();
        this.set({ view: null });
    };

    p.recreateView = function () {
        if (!this.view) return;
        this.destroyView();
        this.set({
            view: new Entry.CodeView(this, this.board),
            board: this.board
        });
    };

    p.registerEvent = function (block, eventType) {
        if (!this._eventMap[eventType]) this._eventMap[eventType] = [];

        this._eventMap[eventType].push(block);
    };

    p.unregisterEvent = function (block, eventType) {
        var blocks = this._eventMap[eventType];
        if (!blocks || blocks.length === 0) return;

        var index = blocks.indexOf(block);
        if (index < 0) return;
        blocks.splice(index, 1);
    };

    p.raiseEvent = function (eventType, entity, value) {
        var blocks = this._eventMap[eventType];
        var executors = [];
        if (blocks === undefined) return;
        for (var i = 0; i < blocks.length; i++) {
            var block = blocks[i];
            var pointer = block.pointer();
            if (pointer[3] !== 0 || pointer.length !== 4) continue;
            if (value === undefined || block.params.indexOf(value) > -1) {
                var executor = new Entry.Executor(blocks[i], entity);
                this.executors.push(executor);
                executors.push(executor);
            }
        }
        return executors;
    };

    p.getEventMap = function (eventType) {
        return this._eventMap[eventType];
    };

    p.map = function (func) {
        this._data.map(func);
    };

    p.tick = function () {
        var executors = this.executors;
        var watchEvent = this.watchEvent;
        var shouldNotifyWatch = watchEvent.hasListeners();
        var ret;
        var executedBlocks = [];

        for (var i = 0; i < executors.length; i++) {
            var executor = executors[i];
            if (!executor.isEnd()) {
                ret = executor.execute(true);
                if (shouldNotifyWatch) executedBlocks = executedBlocks.concat(ret);
            } else {
                executors.splice(i--, 1);
                if (executors.length === 0) this.executeEndEvent.notify();
            }
        }
        shouldNotifyWatch && watchEvent.notify(executedBlocks);
    };

    p.removeExecutor = function (executor) {
        var index = this.executors.indexOf(executor);
        if (index > -1) this.executors.splice(index, 1);
    };

    p.clearExecutors = function () {
        this.executors.forEach(function (e) {
            e.end();
        });
        this.executors = [];
    };

    p.clearExecutorsByEntity = function (entity) {
        var executors = this.executors;
        for (var i = 0; i < executors.length; i++) {
            var executor = executors[i];
            if (executor.entity === entity) {
                executor.end();
            }
        }
    };

    p.addExecutor = function (executor) {
        this.executors.push(executor);
    };

    p.createThread = function (blocks, index) {
        if (!(blocks instanceof Array)) return console.error('blocks must be array');

        var thread = new Entry.Thread(blocks, this);
        if (index === undefined || index === null) this._data.push(thread);else this._data.insert(thread, index);

        this.changeEvent.notify();
        return thread;
    };

    p.getThreadIndex = function (thread) {
        return this._data.indexOf(thread);
    };

    p.getThreadCount = function () {
        return this._data.length;
    };

    p.cloneThread = function (thread, mode) {
        var newThread = thread.clone(this, mode);
        this._data.push(newThread);
        return newThread;
    };

    p.destroyThread = function (thread, animate) {
        var data = this._data;
        var index = data.indexOf(thread);
        // case of statement thread
        if (index < 0) return;
        data.splice(index, 1);
    };

    p.doDestroyThread = function (thread, animate) {
        var data = this._data;
        var index = data.indexOf(thread);
        // case of statement thread
        if (index < 0) return;
        data.splice(index, 1);
    };

    p.getThread = function (index) {
        return this._data[index];
    };

    p.getThreads = function () {
        return this._data.map(function (t) {
            return t;
        });
    };

    p.getThreadsByCategory = function (category) {
        var arr = [];

        for (var i = 0; i < this._data.length; i++) {
            var thread = this._data[i];
            var b = thread.getFirstBlock();
            if (b && b.category === category) arr.push(thread);
        }
        return arr;
    };

    p.toJSON = function (excludeData, option) {
        var threads = this.getThreads();
        var json = [];
        for (var i = 0, len = threads.length; i < len; i++) {
            json.push(threads[i].toJSON(false, undefined, excludeData, option));
        }return json;
    };

    p.countBlock = function () {
        var threads = this.getThreads();
        var count = 0;
        for (var i = 0; i < threads.length; i++) {
            count += threads[i].countBlock();
        }return count;
    };

    p.moveBy = function (x, y) {
        var threads = this.getThreads();
        for (var i = 0, len = threads.length; i < len; i++) {
            var firstBlock = threads[i].getFirstBlock();
            if (firstBlock && firstBlock.view && firstBlock.view.display) firstBlock.view._moveBy(x, y, false);
        }

        var board = this.board;
        if (board instanceof Entry.BlockMenu) board.updateSplitters(y);
    };

    p.stringify = function (excludeData) {
        return JSON.stringify(this.toJSON(excludeData));
    };

    p.dominate = function (thread) {
        thread.view.setZIndex(this._maxZIndex++);
    };

    p.getMaxZIndex = function () {
        return this._maxZIndex;
    };

    p.indexOf = function (thread) {
        return this._data.indexOf(thread);
    };

    p._handleChange = function () {
        if (Entry.creationChangedEvent && this.view && this.view.board.constructor !== Entry.BlockMenu) {
            Entry.creationChangedEvent.notify();
        }
    };

    p.hasBlockType = function (type) {
        var threads = this.getThreads();

        for (var i = 0; i < threads.length; i++) {
            if (threads[i].hasBlockType(type)) return true;
        }return false;
    };

    p.findById = function (id) {
        return this._blockMap[id];
    };

    p.registerBlock = function (block) {
        this._blockMap[block.id] = block;
    };

    p.unregisterBlock = function (block) {
        delete this._blockMap[block.id];
    };

    p.getByPointer = function (pointer) {
        pointer = pointer.concat();
        pointer.splice(0, 2);
        var thread = this._data[pointer.shift()];
        var block = thread.getBlock(pointer.shift());
        while (pointer.length) {
            if (!(block instanceof Entry.Block)) block = block.getValueBlock();
            var type = pointer.shift();
            var index = pointer.shift();
            if (type > -1) {
                var statement = block.statements[type];
                if (index === undefined) return statement;else block = statement.getBlock(index);
            } else if (type === -1) {
                block = block.view.getParam(index);
            }
        }
        return block;
    };

    p.getTargetByPointer = function (pointer) {
        pointer = pointer.concat();
        pointer.splice(0, 2);

        var thread = this._data[pointer.shift()];
        var block;

        if (pointer.length === 1) {
            block = thread.getBlock(pointer.shift() - 1);
        } else {
            block = thread.getBlock(pointer.shift());
            while (pointer.length) {
                if (!(block instanceof Entry.Block)) block = block.getValueBlock();
                var type = pointer.shift();
                var index = pointer.shift();
                if (type > -1) {
                    var statement = block.statements[type];
                    if (!pointer.length) {
                        if (index === 0) block = statement.view.getParent();else if (index === undefined) block = statement;else block = statement.getBlock(index - 1);
                    } else {
                        if (index < 0) block = statement;else block = statement.getBlock(index);
                    }
                } else if (type === -1) {
                    block = block.view.getParam(index);
                }
            }
        }
        return block;
    };

    p.getBlockList = function (excludePrimitive, type) {
        var threads = this.getThreads();
        var blocks = [];

        for (var i = 0; i < threads.length; i++) {
            blocks = blocks.concat(threads[i].getBlockList(excludePrimitive, type));
        }return blocks;
    };

    p.removeBlocksByType = function (type) {
        this.getBlockList(false, type).forEach(function (b) {
            b.doDestroy();
        });
    };

    p.isAllThreadsInOrigin = function () {
        var threads = this.getThreads();
        for (var i = threads.length - 1; i >= 0; i--) {
            if (!threads[i].isInOrigin()) return false;
        }
        return true;
    };

    p.destroy = function () {
        this.clear();
        this.destroyView();
    };
})(Entry.Code.prototype);

/***/ }),

/***/ "./src/playground/code_view.js":
/*!*************************************!*\
  !*** ./src/playground/code_view.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


/*
 *
 */

Entry.CodeView = function (code, board) {
    Entry.Model(this, false);

    this.code = code;
    this.set({ board: board });

    this.svgThreadGroup = board.svgGroup.elem('g');
    this.svgThreadGroup.attr({
        class: 'svgThreadGroup'
    });

    this.svgThreadGroup.board = board;

    this.svgBlockGroup = board.svgGroup.elem('g');
    this.svgBlockGroup.attr({
        class: 'svgBlockGroup'
    });
    this.svgBlockGroup.board = board;

    board.bindCodeView(this);

    this.code._data.getAll().forEach(function (thread) {
        thread.createView(board);
    });
    code.observe(this, '_setBoard', ['board']);
};

(function (p) {
    p.schema = {
        board: null,
        scrollX: 0,
        scrollY: 0
    };

    p._setBoard = function () {
        this.set({ board: this.code.board });
    };

    p.reDraw = function () {
        this.code.map(function (thread) {
            if (thread.view) thread.view.reDraw();else thread.createView(this.board);
        }.bind(this));
    };

    p.destroy = function () {
        this.code.map(function (thread) {
            thread.destroyView();
        });
    };
})(Entry.CodeView.prototype);

/***/ }),

/***/ "./src/playground/connection_ripple.js":
/*!*********************************************!*\
  !*** ./src/playground/connection_ripple.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.ConnectionRipple = {};

(function (cr) {
    cr.createDom = function (blockView) {
        if (this.svgDom) return;

        var svgGroup = blockView.getBoard().svgGroup;
        this._ripple = svgGroup.elem('circle', {
            cx: 0,
            cy: 0,
            r: 0,
            stroke: '#888',
            'stroke-width': 10
        });
    };

    cr.setView = function (blockView) {
        if (!this._ripple) this.createDom(blockView);
        var ripple = this._ripple;
        var svgGroup = blockView.getBoard().svgGroup;
        ripple.remove();

        var pos = blockView.getAbsoluteCoordinate();
        ripple.attr({ cx: pos.x, cy: pos.y });

        svgGroup.appendChild(ripple);
        ripple._startTime = new Date();
        return this;
    };

    cr.dispose = function () {
        var that = this;
        var ripple = this._ripple;
        var ms = new Date() - ripple._startTime;
        var percent = ms / 150;
        if (percent > 1) ripple.remove();else {
            ripple.attr({
                r: percent * 25,
                opacity: 1 - percent
            });
            window.setTimeout(function () {
                that.dispose();
            }, 10);
        }
    };
})(Entry.ConnectionRipple);

/***/ }),

/***/ "./src/playground/executors.js":
/*!*************************************!*\
  !*** ./src/playground/executors.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


Entry.Executor = function (block, entity) {
    this.scope = new Entry.Scope(block, this);
    this.entity = entity;
    this._callStack = [];
    this.register = {};
    this.parentExecutor = null;
    this.id = Entry.Utils.generateId();
};

Entry.Executor.MAXIMUM_CALLSTACK = 100;

(function (p) {
    p.execute = function (isFromOrigin) {
        if (this.isEnd()) return;

        var executedBlocks = [];
        var block;
        if (isFromOrigin) Entry.callStackLength = 0;

        var entity = this.entity;

        while (true) {
            var returnVal = null;
            executedBlocks.push(this.scope.block);

            try {
                var schema = this.scope.block.getSchema();
                if (schema) returnVal = schema.func.call(this.scope, entity, this.scope);
            } catch (e) {
                if (e.name === 'AsyncError') {
                    returnVal = Entry.STATIC.BREAK;
                } else if (this.isFuncExecutor) //function executor
                    throw new Error();else {
                    Entry.Utils.stopProjectWithToast(this.scope, undefined, e);
                }
            }

            //executor can be ended after block function call
            if (this.isEnd()) return executedBlocks;

            if (returnVal === undefined || returnVal === null || returnVal === Entry.STATIC.PASS) {
                this.scope = new Entry.Scope(this.scope.block.getNextBlock(), this);
                if (this.scope.block === null) {
                    if (this._callStack.length) {
                        var oldScope = this.scope;
                        this.scope = this._callStack.pop();
                        if (this.scope.isLooped !== oldScope.isLooped) break;
                    } else break;
                }
            } else if (returnVal === Entry.STATIC.CONTINUE) {} else if (returnVal === Entry.STATIC.BREAK || this.scope === returnVal) {
                break;
            }
        }
        return executedBlocks;
    };

    p.stepInto = function (thread) {
        if (!(thread instanceof Entry.Thread)) console.error("Must step in to thread");

        var block = thread.getFirstBlock();
        if (!block) {
            return Entry.STATIC.BREAK;
        }

        this._callStack.push(this.scope);

        this.scope = new Entry.Scope(block, this);
        return Entry.STATIC.CONTINUE;
    };

    p.break = function () {
        if (this._callStack.length) this.scope = this._callStack.pop();
        return Entry.STATIC.PASS;
    };

    p.breakLoop = function () {
        if (this._callStack.length) this.scope = this._callStack.pop();
        while (this._callStack.length) {
            var schema = Entry.block[this.scope.block.type];
            if (schema.class === "repeat") break;
            this.scope = this._callStack.pop();
        }
        return Entry.STATIC.PASS;
    };

    p.end = function () {
        this.scope.block = null;
    };

    p.isEnd = function () {
        return this.scope.block === null;
    };
})(Entry.Executor.prototype);

Entry.Scope = function (block, executor) {
    this.block = block;
    this.type = block ? block.type : null; //legacy
    this.executor = executor;
    this.entity = executor.entity;
};

(function (p) {
    p.callReturn = function () {
        return undefined;
    };

    p.getParam = function (index) {
        var fieldBlock = this.block.params[index];
        var newScope = new Entry.Scope(fieldBlock, this.executor);
        var result = Entry.block[fieldBlock.type].func.call(newScope, this.entity, newScope);
        return result;
    };

    p.getParams = function () {
        var that = this;
        return this.block.params.map(function (param) {
            if (param instanceof Entry.Block) {
                var fieldBlock = param;
                var newScope = new Entry.Scope(fieldBlock, that.executor);
                return Entry.block[fieldBlock.type].func.call(newScope, that.entity, newScope);
            } else return param;
        });
    };

    p.getValue = function (key, block) {
        var fieldBlock = this.block.params[this._getParamIndex(key, block)];
        var newScope = new Entry.Scope(fieldBlock, this.executor);
        var result = Entry.block[fieldBlock.type].func.call(newScope, this.entity, newScope);
        return result;
    };

    p.getStringValue = function (key, block) {
        return String(this.getValue(key, block));
    };

    p.getNumberValue = function (key, block) {
        return Number(this.getValue(key));
    };

    p.getBooleanValue = function (key, block) {
        return Number(this.getValue(key, block)) ? true : false;
    };

    p.getField = function (key, block) {
        return this.block.params[this._getParamIndex(key)];
    };

    p.getStringField = function (key, block) {
        return String(this.getField(key));
    };

    p.getNumberField = function (key) {
        return Number(this.getField(key));
    };

    p.getStatement = function (key, block) {
        return this.executor.stepInto(this.block.statements[this._getStatementIndex(key, block)]);
    };

    p._getParamIndex = function (key) {
        if (!this._schema) this._schema = Entry.block[this.type];
        return this._schema.paramsKeyMap[key];
    };

    p._getStatementIndex = function (key) {
        if (!this._schema) this._schema = Entry.block[this.type];
        return this._schema.statementsKeyMap[key];
    };

    p.die = function () {
        this.block = null;
        return Entry.STATIC.BREAK;
    };
})(Entry.Scope.prototype);

/***/ }),

/***/ "./src/playground/extension/extension.js":
/*!***********************************************!*\
  !*** ./src/playground/extension/extension.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


/*
 *
 */

Entry.BlockExtension = function (content, blockView) {};

(function (p) {})(Entry.BlockExtension.prototype);

/***/ }),

/***/ "./src/playground/extension/guide.js":
/*!*******************************************!*\
  !*** ./src/playground/extension/guide.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.ExtGuide = function (content, blockView, mode) {
    this.blockView = blockView;
    this.block = blockView.block;
    this.model = content.model ? content.model : [];

    this.render();
};

(function (p) {
    var TRANSFORM = 'transform';
    p.render = function () {
        if (!this.model) return;

        var board = this.blockView.getBoard();
        this.svgGroup = this.blockView.svgGroup.elem('g', {
            class: 'extension guideGroup'
        });
        this.blockView.guideSvgGroup = this.svgGroup;
        $(this.svgGroup).bind('mousedown touchstart', function (e) {
            e.stopPropagation && e.stopPropagation();
            e.preventDefault && e.preventDefault();
        });

        var block = this.block;
        var code = block.getCode();

        //move blocks off the screen
        //in order to prevent magneting for some reasons
        this.model[0].x = -99999;
        this.model[0].y = -99999;

        var thread = code.createThread(this.model);
        !thread.view && thread.createView(board);
        var cloned = thread.getFirstBlock().view.clone();
        cloned.removeAttribute(TRANSFORM);
        this.svgGroup.appendChild(cloned);
        this.updatePos();
        this.block.getThread().view.setHasGuide(true);
        thread.destroy(false);
    };

    p.updatePos = function () {
        this.svgGroup.attr(TRANSFORM, this._getTransform());
    };

    p._getTransform = function () {
        return 'translate(0,%y)'.replace('%y', this.blockView.magnet.next.y);
    };
})(Entry.ExtGuide.prototype);

/***/ }),

/***/ "./src/playground/extension/side_tag.js":
/*!**********************************************!*\
  !*** ./src/playground/extension/side_tag.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


/*
 *
 */

Entry.ExtSideTag = function (content, blockView, mode) {
    this.blockView = blockView;
    this.color = content.color ? content.color : '#EBC576';
    this.text = content.text ? content.text : '';
    this.height = content.height ? Number(content.height) : Number(content.count) * 31;

    this.render();
    this.updatePos();
};

(function (p) {
    p.render = function () {
        this.svgGroup = this.blockView.svgGroup.elem('g');
        $(this.svgGroup).bind('mousedown touchstart', function (e) {
            if (e.stopPropagation) e.stopPropagation();
            if (e.preventDefault) e.preventDefault();
        });
        this.path = this.svgGroup.elem('path').attr({
            d: 'm0,2 h-9 v' + (this.height - 4) + ' h9',
            stroke: this.color,
            fill: 'transparent',
            'stroke-width': '3'
        });
        this.textElement = this.svgGroup.elem('text').attr({
            style: 'white-space: pre;',
            'font-size': '10px',
            'font-family': 'nanumBarunRegular',
            class: 'dragNone',
            fill: '#000000'
        });
        var textArray = this.text.split('\n');
        this.tspans = textArray.map(function (t) {
            var tspan = this.textElement.elem('tspan').attr({
                dy: '1.2em',
                x: '0',
                class: 'extension sideTagTspan'
            });
            tspan.textContent = t;
            return tspan;
        }.bind(this));
    };

    p.updatePos = function () {
        var pointer = this.blockView.block.pointer();
        this.positionX = -(pointer.length - 2) * 8;
        this.svgGroup.attr('transform', 'translate(' + this.positionX + ',0)');
        this.textElement.attr({
            y: this.height / 2 - 12 * (this.tspans.length - 1) - 2
        });
        var bBox = this.textElement.getBoundingClientRect();

        this.tspans.map(function (tspan) {
            tspan.attr({ x: -bBox.width - 14 });
        });
    };
})(Entry.ExtSideTag.prototype);

/***/ }),

/***/ "./src/playground/field/angle.js":
/*!***************************************!*\
  !*** ./src/playground/field/angle.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 */


__webpack_require__(/*! ./field */ "./src/playground/field/field.js");

/*
 *
 */
Entry.FieldAngle = function (content, blockView, index) {
    this._block = blockView.block;
    this._blockView = blockView;

    this.box = new Entry.BoxModel();

    this.svgGroup = null;

    this.position = content.position;
    this._contents = content;
    this._index = index;
    var value = this.getValue();
    this.setValue(this.modValue(value !== undefined ? value : 90));

    this._CONTENT_HEIGHT = this.getContentHeight();
    this.renderStart();
};

Entry.Utils.inherit(Entry.Field, Entry.FieldAngle);

(function (p) {
    var X_PADDING = 8,
        TEXT_Y_PADDING = 4,
        RADIUS = 47.5,
        FILL_PATH = 'M 0,0 v -47.5 A 47.5,47.5 0 %LARGE 1 %X,%Y z';

    p.renderStart = function (board, mode) {
        if (this.svgGroup) $(this.svgGroup).remove();
        var blockView = this._blockView;
        var that = this;
        var contents = this._contents;

        this.svgGroup = blockView.contentSvgGroup.elem("g", {
            class: 'entry-input-field'
        });

        this.textElement = this.svgGroup.elem('text', {
            x: X_PADDING / 2, y: TEXT_Y_PADDING,
            'font-size': '11px'
        });

        this._setTextValue();

        var width = this.getTextWidth();

        var CONTENT_HEIGHT = this._CONTENT_HEIGHT;
        var y = this.position && this.position.y ? this.position.y : 0;
        y -= CONTENT_HEIGHT / 2;

        this._header = this.svgGroup.elem('rect', {
            x: 0,
            y: y,
            rx: 3,
            ry: 3,
            width: width,
            height: CONTENT_HEIGHT,
            fill: "#fff",
            'fill-opacity': 0.4
        });

        this.svgGroup.appendChild(this.textElement);

        this._bindRenderOptions();

        this.box.set({
            x: 0,
            y: 0,
            width: width,
            height: CONTENT_HEIGHT
        });
    };

    p.renderOptions = function () {
        var that = this;

        var blockView = this._block.view;
        var func = function func(skipCommand) {
            skipCommand !== true && that.applyValue();
            that.destroyOption(skipCommand);
        };

        this._attachDisposeEvent(func);

        //html option
        this.optionGroup = Entry.Dom('input', {
            class: 'entry-widget-input-field',
            parent: $('body')
        });

        this.optionGroup.val(this.value);

        this.optionGroup.on('mousedown touchstart', function (e) {
            e.stopPropagation();
        });

        this.optionGroup.on('keyup', function (e) {
            var exitKeys = [13, 27];
            var keyCode = e.keyCode || e.which;
            that.applyValue(e);

            if (exitKeys.indexOf(keyCode) > -1) that.destroyOption(undefined, true);
        });

        var pos = this.getAbsolutePosFromDocument();
        pos.y -= this.box.height / 2;
        this.optionGroup.css({
            height: this._CONTENT_HEIGHT,
            left: pos.x,
            top: pos.y,
            width: that.box.width
        });

        //svg option dom
        this.angleOptionGroup = this.appendSvgOptionGroup();
        var circle = this.angleOptionGroup.elem('circle', {
            x: 0, y: 0, r: RADIUS + 2.5,
            class: 'entry-field-angle-circle'
        });

        var dividerGroup = this.angleOptionGroup.elem('g');

        for (var a = 0; a < 360; a += 15) {
            dividerGroup.elem('line', {
                x1: RADIUS, y1: 0,
                x2: RADIUS - (a % 45 === 0 ? 8.3 : 6), y2: 0,
                transform: 'rotate(' + a + ', ' + 0 + ', ' + 0 + ')',
                class: 'entry-angle-divider'
            });
        }

        var pos = this.getAbsolutePosFromBoard();
        pos.x = pos.x + this.box.width / 2;
        pos.y = pos.y + this.box.height / 2 + RADIUS + 5;

        this.angleOptionGroup.attr({
            class: 'entry-field-angle',
            transform: "translate(" + pos.x + "," + pos.y + ")"
        });

        var $angleOptionGroup = $(this.angleOptionGroup);

        $angleOptionGroup.bind('mousedown touchstart', function (e) {
            e.stopPropagation();
            $angleOptionGroup.bind('mousemove.fieldAngle touchmove.fieldAngle', function (e) {
                that._updateByCoord(e);
            });
            $angleOptionGroup.bind('mouseup touchend', function () {
                $angleOptionGroup.unbind('.fieldAngle');
            });
        });

        this._fillPath = this.angleOptionGroup.elem('path', {
            d: FILL_PATH.replace('%X', 0).replace('%Y', 0).replace('%LARGE', 1),
            class: 'entry-angle-fill-area'
        });

        this.angleOptionGroup.elem('circle', {
            cx: 0, cy: 0, r: '1.5px', fill: '#333333'
        });

        this._indicator = this.angleOptionGroup.elem('line', {
            x1: 0, y1: 0, x2: 0, y2: 0,
            class: 'entry-angle-indicator'
        });

        this._indicatorCap = this.angleOptionGroup.elem('circle', {
            cx: 0, cy: 0, r: '6px', fill: '#397dc6'
        });

        this.updateGraph();
        this.optionGroup.focus();
        this.optionGroup.select();
        this.optionDomCreated();
    };

    p._updateByCoord = function (e) {
        var that = this;
        if (e.originalEvent && e.originalEvent.touches) e = e.originalEvent.touches[0];

        var mousePos = [e.clientX, e.clientY];
        var absolutePos = that.getAbsolutePosFromDocument();
        var zeroPos = [absolutePos.x + that.box.width / 2, absolutePos.y + that.box.height / 2 + 1];

        that.optionGroup.val(that.modValue(compute(zeroPos, mousePos)));
        function compute(zeroPos, mousePos) {
            var dx = mousePos[0] - zeroPos[0];
            var dy = mousePos[1] - zeroPos[1] - RADIUS - 1;
            var angle = Math.atan(-dy / dx);
            angle = Entry.toDegrees(angle);
            angle = 90 - angle;
            if (dx < 0) angle += 180;else if (dy > 0) angle += 360;
            return Math.round(angle / 15) * 15;
        }
        that.applyValue();
    };

    p.updateGraph = function () {
        var angleRadians = Entry.toRadian(this.getValue());
        var sinVal = Math.sin(angleRadians);
        var cosVal = Math.cos(angleRadians);
        var x = sinVal * RADIUS;
        var y = cosVal * -RADIUS;
        var largeFlag = angleRadians > Math.PI ? 1 : 0;

        this._fillPath.attr({
            d: FILL_PATH.replace('%X', x).replace('%Y', y).replace('%LARGE', largeFlag)
        });

        this._indicator.attr({ x1: 0, y1: 0, x2: x, y2: y });

        x = sinVal * (RADIUS - 6);
        y = cosVal * -(RADIUS - 6);
        this._indicatorCap.attr({ cx: x, cy: y });
    };

    p.applyValue = function () {
        var value = this.optionGroup.val();
        if (!Entry.Utils.isNumber(value) || value === '') return;
        value = this.modValue(value);
        this.setValue(value);
        this.updateGraph();
        this.textElement.textContent = this.getValue();
        if (this.optionGroup) this.optionGroup.val(value);
        this.resize();
    };

    p.resize = function () {
        var width = this.getTextWidth();

        this._header.attr({ width: width });
        if (this.optionGroup) this.optionGroup.css({ width: width });

        this.box.set({ width: width });
        this._block.view.dAlignContent();
    };

    p.getTextWidth = function () {
        if (!this.textElement) return X_PADDING;
        return this.getTextBBox().width + X_PADDING;
    };

    p.getText = function () {
        var value = this.getValue();
        var reg = /&value/gm;
        if (reg.test(value)) return value.replace(reg, '');
        return value + "\xB0";
    };

    p.modValue = function (value) {
        var reg = /&value/gm;
        if (reg.test(value)) return value;
        return value % 360;
    };

    p.destroyOption = function (skipCommand, forceCommand) {
        if (this.disposeEvent) {
            this.disposeEvent.destroy();
            delete this.documentDownEvent;
        }

        if (this.optionGroup) {
            this.optionGroup.remove();
            delete this.optionGroup;
        }

        if (this.angleOptionGroup) {
            this.angleOptionGroup.remove();
            delete this.angleOptionGroup;
        }

        this._setTextValue();
        skipCommand !== true && this.command(forceCommand);
    };

    p._setTextValue = function () {
        this.textElement.textContent = this._convert(this.getText(), this.getValue());
    };
})(Entry.FieldAngle.prototype);

/***/ }),

/***/ "./src/playground/field/block.js":
/*!***************************************!*\
  !*** ./src/playground/field/block.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*i
 */


/*
 *
 */

Entry.FieldBlock = function (content, blockView, index, mode, contentIndex) {
    Entry.Model(this, false);
    this._blockView = blockView;
    this._block = blockView.block;
    this._valueBlock = null;
    this._oldPrimitiveValue = null;

    this.box = new Entry.BoxModel();
    this.changeEvent = new Entry.Event(this);

    this._index = index;
    this.contentIndex = contentIndex;
    this._content = content;

    this.acceptType = content.accept;
    this._restoreCurrent = content.restore;

    this.view = this;

    this.svgGroup = null;

    this._position = content.position;

    this.observe(this, '_updateBG', ['magneting'], false);

    this.renderStart(this.getBoard(), mode);
};

Entry.Utils.inherit(Entry.Field, Entry.FieldBlock);

(function (p) {
    p.schema = {
        magneting: false
    };

    p.getBoard = function () {
        var view = this._blockView;
        return view && view.getBoard();
    };

    p.renderStart = function (board, mode, renderMode, isReDraw) {
        if (!this.svgGroup) this.svgGroup = this._blockView.contentSvgGroup.elem('g');

        this.renderMode = mode !== undefined ? mode : this._blockView.renderMode;

        this.view = this;
        this._nextGroup = this.svgGroup;

        this.updateValueBlock(this.getValue());

        var valueBlockView = this._valueBlock.view;
        valueBlockView.renderByMode(this.renderMode, isReDraw);

        if (this.getBoard().constructor !== Entry.Board) {
            valueBlockView.removeControl();
        }

        this.box.observe(this._blockView, 'dAlignContent', ['width', 'height'], false);
    };

    p.align = function (x, y, animate) {
        animate = animate === undefined ? true : animate;
        var svgGroup = this.svgGroup;
        if (this._position) {
            if (this._position.x) x = this._position.x;
            if (this._position.y) y = this._position.y;
        }

        var block = this._valueBlock;

        if (block && block.view) y = block.view.height * -0.5;

        if (!(x || y)) {
            svgGroup.removeAttr('transform');
        } else {
            var transform = 'translate(' + x + ',' + y + ')';
            if (animate) {
                svgGroup.animate({
                    transform: transform
                }, 300, mina.easeinout);
            } else {
                svgGroup.attr({
                    transform: transform
                });
            }
        }

        x = Math.round(x * 100) / 100;
        y = Math.round(y * 100) / 100;

        var box = this.box;
        if (box.x === x && box.y === y) return;

        box.set({ x: x, y: y });
    };

    p.calcWH = function () {
        var block = this._valueBlock;
        var box = this.box;
        var oldWidth = box.width;
        var oldHeight = box.height;
        var newWidth, newHeight;
        var blockView = block && block.view;
        if (blockView) {
            newWidth = blockView.width;
            newHeight = blockView.height;
        } else {
            newWidth = 15;
            newHeight = 20;
        }

        if (newWidth !== oldWidth) {
            box.set({ width: newWidth });
        }

        if (newHeight !== oldHeight) {
            box.set({ height: newHeight });
        }
    };

    p.calcHeight = p.calcWH;

    p.destroy = function () {
        this._valueBlock && this._valueBlock.destroyView();
    };

    p.inspectBlock = function () {
        var blockType = null;
        if (this._originBlock) {
            blockType = this._originBlock.type;
            delete this._originBlock;
        } else if (this._content.defaultType) {
            blockType = this._content.defaultType;
        } else {
            switch (this.acceptType.toLowerCase()) {
                case 'boolean':
                    blockType = 'True';
                    break;
                case 'string':
                    blockType = 'text';
                    break;
                case 'param':
                    blockType = 'function_field_label';
                    break;
            }
        }

        return this._createBlockByType(blockType);
    };

    p._setValueBlock = function (block) {
        if (this._restoreCurrent) this._originBlock = this._valueBlock;

        if (!block) block = this.inspectBlock();

        this._valueBlock = block;
        this.setValue(block);

        block.setThread(this);
        this.view.setParent(this);

        return this._valueBlock;
    };

    p.getValueBlock = function () {
        return this._valueBlock;
    };

    p.updateValueBlock = function (block) {
        if (!(block instanceof Entry.Block)) block = undefined;

        block = this._ensureBlock(block);

        if (block && block === this._valueBlock) {
            this.calcWH();
            return;
        }

        this._destroyObservers();

        var view = this._setValueBlock(block).view;
        view.bindPrev(this);
        this._blockView.alignContent();
        this._posObserver = view.observe(this, 'updateValueBlock', ['x', 'y'], false);
        this._sizeObserver = view.observe(this, 'calcWH', ['width', 'height']);
    };

    p._destroyObservers = function () {
        if (this._sizeObserver) this._sizeObserver.destroy();
        if (this._posObserver) this._posObserver.destroy();
    };

    p.getPrevBlock = function (block) {
        if (this._valueBlock === block) return this;else return null;
    };

    p.getNextBlock = function () {
        return null;
    };

    p.requestAbsoluteCoordinate = function (blockView) {
        var blockView = this._blockView;
        var contentPos = blockView.contentPos;
        var pos = blockView.getAbsoluteCoordinate();
        pos.x += this.box.x + contentPos.x;
        pos.y += this.box.y + contentPos.y;
        return pos;
    };

    p.dominate = function () {
        this._blockView.dominate();
    };

    p.isGlobal = function () {
        return false;
    };

    p.separate = function (block) {
        this.getCode().createThread([block]);
        this.calcWH();
        this.changeEvent.notify();
    };

    p.getCode = function () {
        return this._block.thread.getCode();
    };

    p.cut = function (block) {
        if (this._valueBlock === block) return [block];else return null;
    };

    p.replace = function (block) {
        if (typeof block === 'string') block = this._createBlockByType(block);

        var valueBlock = this._valueBlock;

        if (Entry.block[valueBlock.type].isPrimitive) {
            valueBlock.doNotSplice = true;
            this._oldPrimitiveValue = valueBlock.getParam(0);
            valueBlock.destroy();
        } else if (this.acceptType === 'param') {
            this._destroyObservers();
            valueBlock.view._toGlobalCoordinate();
            block.getTerminateOutputBlock().view._contents[1].replace(valueBlock);
        } else {
            this._destroyObservers();
            valueBlock.view._toGlobalCoordinate();

            Entry.do('separateBlockByCommand', valueBlock).isPass(true);
            valueBlock.view.bumpAway(30, 150);
        }
        this.updateValueBlock(block);
        block.view._toLocalCoordinate(this.svgGroup);
        this.calcWH();
        this.changeEvent.notify();
    };

    p.setParent = function (parent) {
        this._parent = parent;
    };

    p.getParent = function () {
        return this._parent;
    };

    p._createBlockByType = function (blockType) {
        var thread = this._block.getThread();
        var board = this._blockView.getBoard();
        var workspace = board.workspace;
        var isFromUserAction;
        if (workspace) {
            var selectedBlockView = workspace.selectedBlockView;
            isFromUserAction = !!(selectedBlockView && selectedBlockView.dragInstance);
        }

        var block = new Entry.Block({
            type: blockType,
            params: [isFromUserAction ? undefined : this._oldPrimitiveValue],
            copyable: blockType !== 'function_field_label'
        }, this);

        block.createView(board, this.renderMode);

        delete this._oldPrimitiveValue;
        return block;
    };

    p.spliceBlock = function () {
        this.updateValueBlock();
    };

    p._updateBG = function () {
        if (this.magneting) {
            this._bg = this.svgGroup.elem('path', {
                d: 'm 8,12 l -4,0 -2,-2 0,-3 3,0 1,-1 0,-12 -1,-1 -3,0 0,-3 2,-2 l 4,0 z',
                fill: '#fff',
                stroke: '#fff',
                'fill-opacity': 0.7,
                transform: 'translate(0,12)'
            });
        } else {
            if (this._bg) {
                this._bg.remove();
                delete this._bg;
            }
        }
    };

    p.getThread = function () {
        return this;
    };

    p.pointer = function (pointer) {
        pointer = pointer || [];
        pointer.unshift(this._index);
        pointer.unshift(Entry.PARAM);
        return this._block.pointer(pointer);
    };

    p.isParamBlockType = function () {
        return true;
    };

    //check block schema and view
    p._ensureBlock = function (block) {
        if (!block) return;

        if (block.constructor !== Entry.Block) {
            block = new Entry.Block(block, this._block.thread);
        }

        //if block schema is not present
        //and can't load schema, then destroy and return undefined
        if (!block.getSchema()) {
            this._destroyObservers();
            block.destroy();
            return;
        }

        if (!block.view) {
            block.setThread(this);
            block.createView(this.getBoard(), this.renderMode);
            this.view.setParent(this);
        }

        return block;
    };
})(Entry.FieldBlock.prototype);

/***/ }),

/***/ "./src/playground/field/color.js":
/*!***************************************!*\
  !*** ./src/playground/field/color.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 */


/*
 *
 */

Entry.FieldColor = function (content, blockView, index) {
    this._block = blockView.block;
    this._blockView = blockView;

    var box = new Entry.BoxModel();
    this.box = box;

    this.svgGroup = null;

    this._contents = content;
    this._index = index;
    this._position = content.position;
    this._fontSize = content.fontSize || blockView.getSkeleton().fontSize || 12;
    this._color = content.color || this._block.getSchema().fontColor || blockView.getSkeleton().color || 'black';
    this.key = content.key;
    this.setValue(this.getValue() || '#FF0000');
    this._CONTENT_HEIGHT = this.getContentHeight();
    this._CONTENT_WIDTH = this.getContentWidth();

    this.renderStart(blockView);
};

Entry.Utils.inherit(Entry.Field, Entry.FieldColor);

(function (p) {
    p.renderStart = function () {
        if (this.svgGroup) $(this.svgGroup).remove();
        var blockView = this._blockView;
        var that = this;
        var contents = this._contents;
        this.svgGroup = blockView.contentSvgGroup.elem('g', {
            class: 'entry-field-color'
        });

        var x, y, WIDTH, HEIGHT;

        if (this._blockView.renderMode === Entry.BlockView.RENDER_MODE_TEXT) {
            var rect = this.svgGroup.elem('rect', {
                x: 0,
                rx: 3,
                ry: 3,
                fill: '#fff',
                'fill-opacity': 0.4
            });

            this.textElement = this.svgGroup.elem('text').attr({
                style: 'white-space: pre;',
                'font-size': that._fontSize + 'px',
                'font-family': 'nanumBarunRegular',
                class: 'dragNone',
                fill: that._color
            });

            this.textElement.textContent = this._convert(this.getValue(), this.getValue());
            var bBox = this.textElement.getBoundingClientRect();
            WIDTH = bBox.width + 12;
            HEIGHT = bBox.height;
            rect.attr({
                y: -HEIGHT / 2,
                width: WIDTH,
                height: HEIGHT
            });
            this.textElement.attr({
                x: 6,
                y: bBox.height * 0.25
            });
        } else {
            HEIGHT = this._CONTENT_HEIGHT;
            WIDTH = this._CONTENT_WIDTH;
            var position = this._position;
            if (position) {
                x = position.x || 0;
                y = position.y || 0;
            } else {
                x = 0;
                y = -HEIGHT / 2;
            }

            this._header = this.svgGroup.elem('rect', {
                x: x,
                y: y,
                width: WIDTH,
                height: HEIGHT,
                fill: this.getValue()
            });
        }

        this._bindRenderOptions();

        this.box.set({
            x: x,
            y: y,
            width: WIDTH,
            height: HEIGHT
        });
    };

    p.renderOptions = function () {
        var that = this;

        var blockView = this._block.view;

        this._attachDisposeEvent();

        var colors = Entry.FieldColor.getWidgetColorList();
        this.optionGroup = Entry.Dom('table', {
            class: 'entry-widget-color-table',
            parent: $('body')
        });

        this.optionGroup.bind('mousedown touchstart', function (e) {
            e.stopPropagation();
        });

        var fragment = document.createDocumentFragment();
        for (var i = 0; i < colors.length; i++) {
            var tr = Entry.Dom('tr', {
                class: 'entry-widget-color-row'
            });

            fragment.appendChild(tr[0]);

            for (var j = 0; j < colors[i].length; j++) {
                var td = Entry.Dom('td', {
                    class: 'entry-widget-color-cell',
                    parent: tr
                });
                var color = colors[i][j];
                td.css({
                    'background-color': color
                });
                td.attr({
                    'data-color-value': color
                });

                (function (elem, value) {
                    elem.mouseup(function (e) {
                        that.applyValue(value);
                        that.destroyOption();
                        that._selectBlockView();
                    });
                })(td, color);
            }
        }

        this.optionGroup[0].appendChild(fragment);
        var pos = this.getAbsolutePosFromDocument();
        pos.y += this.box.height / 2 + 1;

        this.optionGroup.css({
            left: pos.x,
            top: pos.y
        });

        this.optionDomCreated();
    };

    p.applyValue = function (value) {
        if (this.value == value) return;
        this.setValue(value);
        if (this._header) this._header.attr({ fill: value });else if (this.textElement) this.textElement.textContent = this._convert(this.getValue(), this.getValue());
    };

    p.getContentWidth = function () {
        return Entry.isMobile() ? 20 : 14.5;
    };
})(Entry.FieldColor.prototype);

Entry.FieldColor.getWidgetColorList = function () {
    return [['#FFFFFF', '#CCCCCC', '#C0C0C0', '#999999', '#666666', '#333333', '#000000'], ['#FFCCCC', '#FF6666', '#FF0000', '#CC0000', '#990000', '#660000', '#330000'], ['#FFCC99', '#FF9966', '#FF9900', '#FF6600', '#CC6600', '#993300', '#663300'], ['#FFFF99', '#FFFF66', '#FFCC66', '#FFCC33', '#CC9933', '#996633', '#663333'], ['#FFFFCC', '#FFFF33', '#FFFF00', '#FFCC00', '#999900', '#666600', '#333300'], ['#99FF99', '#66FF99', '#33FF33', '#33CC00', '#009900', '#006600', '#003300'], ['#99FFFF', '#33FFFF', '#66CCCC', '#00CCCC', '#339999', '#336666', '#003333'], ['#CCFFFF', '#66FFFF', '#33CCFF', '#3366FF', '#3333FF', '#000099', '#000066'], ['#CCCCFF', '#9999FF', '#6666CC', '#6633FF', '#6609CC', '#333399', '#330099'], ['#FFCCFF', '#FF99FF', '#CC66CC', '#CC33CC', '#993399', '#663366', '#330033']];
};

/***/ }),

/***/ "./src/playground/field/dropdown.js":
/*!******************************************!*\
  !*** ./src/playground/field/dropdown.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 */


/*
 *
 */

Entry.FieldDropdown = function (content, blockView, index) {
    this._block = blockView.block;
    this._blockView = blockView;

    var box = new Entry.BoxModel();
    this.box = box;

    this.svgGroup = null;

    this._contents = content;
    this._noArrow = content.noArrow;

    var arrowColor = content.arrowColor;
    if (this._block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN || this._block.emphasized) {
        arrowColor = blockView._fillColor;
    }

    this._arrowColor = arrowColor;
    this._index = index;
    this.setValue(this.getValue());

    this._CONTENT_HEIGHT = this.getContentHeight(content.dropdownHeight);

    this._font_size = this.getFontSize(content.fontSize);

    this._ROUND = content.roundValue || 3;

    this.renderStart();
};

Entry.Utils.inherit(Entry.Field, Entry.FieldDropdown);

(function (p) {
    p.renderStart = function () {
        var blockView = this._blockView;
        var isBig = Entry.isMobile();
        var X_PADDING = isBig ? 33 : 20;
        var X_PADDING_SUBT = isBig ? 24 : 10;
        var that = this;
        var CONTENT_HEIGHT = this._CONTENT_HEIGHT;
        var arrowInfo = this.getArrow();

        if (!this.svgGroup) this.svgGroup = blockView.contentSvgGroup.elem('g', {
            class: 'entry-field-dropdown'
        });

        if (!this._header) this._header = this.svgGroup.elem('rect', {
            height: CONTENT_HEIGHT,
            y: -CONTENT_HEIGHT / 2,
            rx: that._ROUND,
            ry: that._ROUND,
            fill: '#fff',
            'fill-opacity': 0.4
        });

        if (!this.textElement) this.textElement = this.svgGroup.elem('text', {
            x: 5,
            style: 'white-space: pre;',
            'font-size': +that._font_size + 'px'
        });

        if (!this._noArrow && !this._arrow) this._arrow = this.svgGroup.elem('polygon', {
            points: arrowInfo.points,
            fill: arrowInfo.color,
            stroke: arrowInfo.color
        });

        if (this instanceof Entry.FieldDropdownDynamic) this._updateValue();

        this._setTextValue();

        var bBox = this.getTextBBox();

        this.textElement.attr({
            y: bBox.height * 0.27
        });

        var width = bBox.width + X_PADDING;

        if (this._noArrow) width -= X_PADDING_SUBT;

        this._header.attr({ width: width });

        if (!this._noArrow) {
            this._arrow.attr({
                transform: 'translate(' + (width - arrowInfo.width - 5) + ',' + -arrowInfo.height / 2 + ')'
            });
        }

        this._bindRenderOptions();

        this.box.set({
            x: 0,
            y: 0,
            width: width,
            height: CONTENT_HEIGHT
        });
    };

    p.resize = function () {
        var isBig = Entry.isMobile();
        var X_PADDING = isBig ? 33 : 20;
        var X_PADDING_SUBT = isBig ? 24 : 10;
        var width = this.textElement.getBoundingClientRect().width + X_PADDING;

        if (!this._noArrow) {
            var arrowInfo = this.getArrow();
            this._arrow.attr({
                transform: 'translate(' + (width - arrowInfo.width - 5) + ',' + -arrowInfo.height / 2 + ')'
            });
        } else width -= X_PADDING_SUBT;

        this._header.attr({
            width: width
        });

        this.box.set({ width: width });
        this._block.view.dAlignContent();
    };

    p.renderOptions = function () {
        var that = this;

        var blockView = this._block.view;

        this._attachDisposeEvent();

        this.optionGroup = Entry.Dom('ul', {
            class: 'entry-widget-dropdown',
            parent: $('body')
        });

        this.optionGroup.bind('mousedown touchstart', function (e) {
            e.stopPropagation();
        });

        var OPTION_X_PADDING = 30;
        var maxWidth = 0;
        var options = this._contents.options;

        var CONTENT_HEIGHT = this._CONTENT_HEIGHT + 4;

        var fragment = document.createDocumentFragment();

        for (var i = 0, len = options.length; i < len; i++) {
            var option = options[i];
            var text = option[0] = this._convert(option[0], option[1]);
            var value = option[1];
            var element = Entry.Dom('li', {
                class: 'rect'
            });

            var left = Entry.Dom('span', {
                class: 'left',
                parent: element
            });

            Entry.Dom('span', {
                class: 'right',
                parent: element
            }).text(text);

            if (this.getValue() == value) left.text('\u2713');

            (function (elem, value) {
                elem.bind('mouseup touchend', function (e) {
                    e.stopPropagation();
                    that.applyValue(value);
                    that.destroyOption(undefined, true);
                    that._selectBlockView();
                });
            })(element, value);

            fragment.appendChild(element[0]);
        }

        this.optionGroup[0].appendChild(fragment);
        this._position();

        this.optionDomCreated();
    };

    p._position = function () {
        //inspect enough space below
        var pos = this.getAbsolutePosFromDocument();
        pos.y += this.box.height / 2;

        var documentHeight = $(document).height();
        var optionGroupHeight = this.optionGroup.height();
        var optionGroupWidth = this.optionGroup.width() + 30;

        //not enough space below
        if (documentHeight < pos.y + optionGroupHeight + 30) {
            var domHeight = this._blockView.getBoard().svgDom.height();
            var relPos = this.getAbsolutePosFromBoard();
            //above the half of dom
            if (this._blockView.y < domHeight / 2) {
                pos.x += this.box.width / 2 - optionGroupWidth / 2;

                domHeight -= relPos.y + 30;
                this.optionGroup.height(domHeight);
            } else {
                pos.x += this.box.width + 1;

                domHeight -= domHeight - relPos.y;

                if (domHeight - 30 < optionGroupHeight) {
                    domHeight -= domHeight % 30;
                    this.optionGroup.height(domHeight);
                }

                pos.y -= this.optionGroup.height();
            }
        } else pos.x += this.box.width / 2 - optionGroupWidth / 2;

        this.optionGroup.addClass('rendered');
        this.optionGroup.css({
            left: pos.x,
            top: pos.y,
            width: optionGroupWidth
        });

        this.optionGroup.find('.right').width(optionGroupWidth - 20);
    };

    p.applyValue = function (value) {
        if (this.value != value) this.setValue(value);
        this._setTextValue();
        this.resize();
    };

    p.getTextByValue = function (value) {
        var reg = /&value/gm;
        if (reg.test(value)) return value.replace(reg, '');

        if (!value && typeof value !== 'number' || value === 'null') return Lang.Blocks.no_target;

        var options = this._contents.options;
        for (var i = 0, len = options.length; i < len; i++) {
            var option = options[i];
            if (option[1] == value) return option[0];
        }
        //no match found
        //check should return value as it is
        if (this._shouldReturnValue(value)) return value;
        return Lang.Blocks.no_target;
    };

    p.getContentHeight = function (height) {
        height = height || this._blockView.getSkeleton().dropdownHeight || (Entry.isMobile() ? 22 : 16);
        return height;
    };

    p.getArrow = function () {
        var isBig = Entry.isMobile();
        var color = this._arrowColor || this._blockView._schema.color;
        var points = isBig ? '0,0 19,0 9.5,13' : '0,0 6.4,0 3.2,4.2';
        var height = isBig ? 13 : 4.2;
        var width = isBig ? 19 : 6.4;
        return {
            color: color,
            points: points,
            height: height,
            width: width
        };
    };

    p._setTextValue = function () {
        var textValue = this.getTextByValue(this.getValue());
        var newValue = this._convert(textValue, this.getValue());
        if (this.getTextValue() !== newValue) this.textElement.textContent = newValue;
    };

    p.getTextValue = function () {
        return this.textElement.textContent;
    };
})(Entry.FieldDropdown.prototype);

/***/ }),

/***/ "./src/playground/field/dropdownDynamic.js":
/*!*************************************************!*\
  !*** ./src/playground/field/dropdownDynamic.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 */


/*
 *
 */

Entry.FieldDropdownDynamic = function (content, blockView, index) {
    this._block = blockView.block;
    this._blockView = blockView;

    var box = new Entry.BoxModel();
    this.box = box;

    this.svgGroup = null;

    this._contents = content;
    this._index = index;

    var arrowColor = content.arrowColor;
    if (this._block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN || this._block.emphasized) {
        arrowColor = blockView._fillColor;
    }

    this._arrowColor = arrowColor;

    var menuName = this._contents.menuName;

    if (Entry.Utils.isFunction(menuName)) this._menuGenerator = menuName;else this._menuName = menuName;

    this._CONTENT_HEIGHT = this.getContentHeight(content.dropdownHeight);

    this._font_size = this.getFontSize(content.fontSize);

    this._ROUND = content.roundValue || 3;
    this.renderStart(blockView);
    if (blockView && blockView.getBoard() && blockView.getBoard().workspace && blockView.getBoard().workspace.changeEvent) {
        blockView.getBoard().workspace.changeEvent.attach(this, this._updateValue);
    }
};

Entry.Utils.inherit(Entry.FieldDropdown, Entry.FieldDropdownDynamic);

(function (p) {
    p.constructor = Entry.FieldDropDownDynamic;

    p._updateValue = function () {
        var object = this._block.getCode().object;
        var options = [];
        if (Entry.container) {
            if (this._menuName) options = Entry.container.getDropdownList(this._menuName, object);else options = this._menuGenerator();
        }

        this._contents.options = options;
        var value = this.getValue();
        if (this._blockView.isInBlockMenu || !value || value == 'null') value = options.length !== 0 ? options[0][1] : null;

        this._updateOptions();
        this.setValue(value);
    };

    p.renderOptions = function () {
        var that = this;

        var blockView = this._block.view;

        this._attachDisposeEvent();

        this.optionGroup = Entry.Dom('ul', {
            class: 'entry-widget-dropdown',
            parent: $('body')
        });

        this.optionGroup.bind('mousedown touchstart', function (e) {
            e.stopPropagation();
        });

        var options;
        if (this._menuName) options = Entry.container.getDropdownList(this._contents.menuName);else options = this._menuGenerator();
        this._contents.options = options;

        var OPTION_X_PADDING = 30;
        var maxWidth = 0;

        var CONTENT_HEIGHT = this._CONTENT_HEIGHT + 4;

        var fragment = document.createDocumentFragment();

        for (var i = 0; i < options.length; i++) {
            var option = options[i];
            var text = option[0] = this._convert(option[0], option[1]);
            var value = option[1];
            var element = Entry.Dom('li', {
                class: 'rect'
            });
            var left = Entry.Dom('span', {
                class: 'left',
                parent: element
            });

            Entry.Dom('span', {
                class: 'right',
                parent: element
            }).text(text);

            if (this.getValue() == value) left.text('\u2713');

            (function (elem, value) {
                elem.mouseup(function (e) {
                    e.stopPropagation();
                    that.applyValue(value);
                    that.destroyOption(undefined, true);
                    that._selectBlockView();
                });
            })(element, value);

            fragment.appendChild(element[0]);
        }
        this.optionGroup[0].appendChild(fragment);
        this._position();

        this.optionDomCreated();
    };
})(Entry.FieldDropdownDynamic.prototype);

/***/ }),

/***/ "./src/playground/field/field.js":
/*!***************************************!*\
  !*** ./src/playground/field/field.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


/*
 *
 */

Entry.Field = function () {};

(function (p) {
    p.TEXT_LIMIT_LENGTH = 20;

    p.destroy = function () {
        var svgGroup = this.svgGroup;
        if (svgGroup) {
            svgGroup._isBinded = false;
            $(svgGroup).off('.fieldBindEvent');
        }
        this.destroyOption(true);
    };

    p.command = function (forceCommand) {
        if (!this._blockView.isInBlockMenu && this._startValue !== undefined && (forceCommand || this._startValue !== this.getValue())) {
            Entry.do('setFieldValue', this.pointer(), this._nextValue || this.getValue(), this._code);
            delete this._nextValue;
            delete this._code;
        }
        delete this._startValue;
    };

    p.destroyOption = function (skipCommand, forceCommand) {
        if (this.documentDownEvent) {
            this.documentDownEvent.destroy();
            delete this.documentDownEvent;
        }

        if (this.disposeEvent) {
            this.disposeEvent.destroy();
            delete this.documentDownEvent;
        }

        if (this.optionGroup) {
            this.optionGroup.remove();
            delete this.optionGroup;
        }

        delete this._neighborFields;

        this.isEditing() && Entry.Utils.blur();
        this._isEditing = false;

        skipCommand !== true && this.command(forceCommand);
    };

    p._attachDisposeEvent = function (func) {
        var that = this;

        func = func || function (skipCommand) {
            that.destroyOption(skipCommand);
        };
        that.disposeEvent = Entry.disposeEvent.attach(that, func);
    };

    p.align = function (x, y, animate) {
        animate = animate === undefined ? true : animate;
        var svgGroup = this.svgGroup;
        if (this._position) {
            if (this._position.x) x = this._position.x;
            if (this._position.y) y = this._position.y;
        }

        var transform = 'translate(' + x + ',' + y + ')';

        if (animate) svgGroup.animate({
            transform: transform
        }, 300, mina.easeinout);else svgGroup.attr({
            transform: transform
        });

        this.box.set({ x: x, y: y });
    };

    //get absolute position of field from parent board
    p.getAbsolutePosFromBoard = function () {
        var blockView = this._block.view;
        var contentPos = blockView.getContentPos();
        var absPos = blockView.getAbsoluteCoordinate();

        return {
            x: absPos.x + this.box.x + contentPos.x,
            y: absPos.y + this.box.y + contentPos.y
        };
    };

    //get absolute position of field from parent document
    p.getAbsolutePosFromDocument = function () {
        var blockView = this._block.view;
        var contentPos = blockView.getContentPos();
        var absPos = blockView.getAbsoluteCoordinate();
        var offset = blockView.getBoard().svgDom.offset();

        return {
            x: absPos.x + this.box.x + contentPos.x + offset.left,
            y: absPos.y + this.box.y + contentPos.y + offset.top - $(window).scrollTop()
        };
    };

    //get relative position of field from blockView origin
    p.getRelativePos = function () {
        var contentPos = this._block.view.getContentPos();
        var box = this.box;

        return {
            x: box.x + contentPos.x,
            y: box.y + contentPos.y
        };
    };

    p.truncate = function () {
        var value = String(this._convert(this.getValue()));
        var limit = this.TEXT_LIMIT_LENGTH;
        var ret = value.substring(0, limit);
        if (value.length > limit) ret += '...';
        return ret;
    };

    p.appendSvgOptionGroup = function () {
        return this._block.view.getBoard().svgGroup.elem('g');
    };

    p.getValue = function () {
        var data = this._block.params[this._index];
        if (this._contents && this._contents.reference && this._contents.reference.length) {
            var reference = this._contents.reference.concat();
            if (reference[0][0] === '%') data = this._block.params[parseInt(reference.shift().substr(1)) - 1];
            if (!data) return data;

            return data.getDataByPointer(reference);
        } else return data;
    };

    p.setValue = function (value, reDraw) {
        if (this.value == value) return;
        this.value = value;
        if (this._contents && this._contents.reference && this._contents.reference.length) {
            var ref = this._contents.reference.concat();
            var index = ref.pop();
            var targetBlock = this._block.params[this._index];
            if (ref.length && ref[0][0] === '%') targetBlock = this._block.params[parseInt(ref.shift().substr(1)) - 1];
            if (ref.length) targetBlock = targetBlock.getDataByPointer(ref);
            targetBlock.params[index] = value;
        } else this._block.params[this._index] = value;

        if (reDraw) this._blockView.reDraw();
    };

    p._isEditable = function () {
        if (Entry.ContextMenu.visible || this._blockView.getBoard().readOnly) return false;
        var dragMode = this._block.view.dragMode;
        if (dragMode == Entry.DRAG_MODE_DRAG) return false;
        var blockView = this._block.view;
        var board = blockView.getBoard();
        if (board.disableMouseEvent === true) return false;

        var selectedBlockView = board.workspace.selectedBlockView;

        if (!selectedBlockView || board != selectedBlockView.getBoard()) return false;

        var root = blockView.getSvgRoot();

        return root == selectedBlockView.svgGroup || $(root).has($(blockView.svgGroup));
    };

    p._selectBlockView = function () {
        var blockView = this._block.view;
        blockView.getBoard().setSelectedBlock(blockView);
    };

    p._bindRenderOptions = function () {
        if (this.svgGroup._isBinded) return;

        var that = this;

        this.svgGroup._isBinded = true;
        $(this.svgGroup).on('mouseup.fieldBindEvent touchend.fieldBindEvent', function (e) {
            if (that._isEditable()) {
                that._code = that.getCode();
                that.destroyOption();
                that._startValue = that.getValue();
                that.renderOptions();
                that._isEditing = true;
            }
        });
    };

    p.pointer = function (pointer) {
        pointer = pointer || [];
        pointer.unshift(this._index);
        pointer.unshift(Entry.PARAM);
        return this._block.pointer(pointer);
    };

    p.getFontSize = function (size) {
        return size || this._blockView.getSkeleton().fontSize || 12;
    };

    p.getContentHeight = function () {
        return Entry.isMobile() ? 22 : 16;
    };

    p._getRenderMode = function () {
        var mode = this._blockView.renderMode;
        return mode !== undefined ? mode : Entry.BlockView.RENDER_MODE_BLOCK;
    };

    p._convert = function (key, value) {
        value = value !== undefined ? value : this.getValue();
        var reg = /&value/gm;
        if (reg.test(value)) return value.replace(reg, '');else if (this._contents.converter) {
            return this._contents.converter(key, value);
        } else return key;
    };

    p._updateOptions = function () {
        var block = Entry.block[this._blockView.type];
        if (!block) return;

        var syntaxes = block.syntax;

        for (var key in syntaxes) {
            var syntax = syntaxes[key];
            if (!syntax) continue;
            if (syntax.length === 0) continue;

            var textParams = syntax[0].textParams;
            if (!textParams) continue;

            textParams[this._index].options = this._contents.options;
        }
    };

    p._shouldReturnValue = function (value) {
        var obj = this._block.getCode().object;
        return value === '?' || !obj || obj.constructor !== Entry.EntryObject;
    };

    p.isEditing = function (value) {
        return !!this._isEditing;
    };

    p.getDom = function (query) {
        if (query.length) {
            var key = query.shift();
            if (key === 'option') return this.optionGroup;
        }

        return this.svgGroup;
    };

    p.optionDomCreated = function () {
        this._blockView.getBoard().workspace.widgetUpdateEvent.notify();
    };

    p.fixNextValue = function (value) {
        this._nextValue = value;
    };

    p.getFieldRawType = function () {
        if (this instanceof Entry.FieldTextInput) return 'textInput';else if (this instanceof Entry.FieldDropdown) return 'dropdown';else if (this instanceof Entry.FieldDropdownDynamic) return 'dropdownDynamic';else if (this instanceof Entry.FieldKeyboard) return 'keyboard';
    };

    p.getTextValueByValue = function (value) {
        switch (this.getFieldRawType()) {
            case 'keyboard':
                return Entry.getKeyCodeMap()[value];
            case 'dropdown':
            case 'dropdownDynamic':
                var options = this._contents.options;
                for (var i = 0; i < options.length; i++) {
                    var o = options[i];
                    if (o[1] === value) return o[0];
                }
                break;
            case 'textInput':
                return value;
        }
    };

    p.getBoard = function () {
        var view = this._blockView;
        return view && view.getBoard();
    };

    p.getCode = function () {
        var board = this.getBoard();
        return board && board.code;
    };

    p.getTextValue = function () {
        return this.getValue();
    };

    p.getIndex = function () {
        return this._index;
    };

    p.getTextBBox = function () {
        var _cache = {};
        var svg;

        //make invisible svg dom to body
        //in order to calculate text width
        function generateDom() {
            svg = Entry.Dom($('<svg id="invisibleBoard" class="entryBoard" width="1px" height="1px"' + 'version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), { parent: $('body') });
        }

        var clearDoms = Entry.Utils.debounce(function () {
            if (!svg) return;
            $(svg).empty();
        }, 500);

        return function () {
            if (window.fontLoaded && !svg) generateDom();

            var value = this.getTextValue();

            //empty string check
            if (!value) return { width: 0, height: 0 };

            var fontSize = this._font_size || '';

            var key = value + '&&' + fontSize;
            var bBox = _cache[key];

            if (bBox) return bBox;

            var textElement = this.textElement;
            if (svg) {
                textElement = textElement.cloneNode(true);
                svg.append(textElement);
            }

            bBox = textElement.getBoundingClientRect();
            clearDoms();

            bBox = {
                width: Math.round(bBox.width * 100) / 100,
                height: Math.round(bBox.height * 100) / 100
            };

            if (fontSize && window.fontLoaded && bBox.width && bBox.height) _cache[key] = bBox;
            return bBox;
        };
    }();
})(Entry.Field.prototype);

/***/ }),

/***/ "./src/playground/field/image.js":
/*!***************************************!*\
  !*** ./src/playground/field/image.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 */

/*
 *
 */

Entry.FieldImage = function (content, blockView, index) {
    this._block = blockView.block;
    this._blockView = blockView;
    this._content = content;

    var box = new Entry.BoxModel();
    this.box = box;

    if (Entry.Utils.isNumber(content.size)) {
        this._width = content.size;
        this._height = content.size;
    } else {
        var sizeSet = content.size || {};
        this._width = sizeSet.width || 0;
        this._height = sizeSet.height || 0;
    }

    this._highlightColor = content.highlightColor || '#F59900';
    this._position = content.position;

    this.svgGroup = null;
    this._path = null;
    this._imgElement = null;
    this._index = index;

    this.setValue(null);
    this.renderStart();
};

Entry.Utils.inherit(Entry.Field, Entry.FieldImage);

(function (p) {
    p.renderStart = function () {
        var block = this._block;
        var img = this._content.img;

        this._imgUrl = this._block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN ? img.replace('.png', '_un.png') : img;

        var options = {
            href: this._imgUrl,
            x: 0,
            y: this._height * -0.5,
            width: this._width,
            height: this._height
        };

        if (!this._imgElement) {
            this.svgGroup = this._imgElement = this._blockView.contentSvgGroup.elem('image', options);
        } else {
            this._imgElement.attr(options);
        }

        this.box.set({
            x: this._width,
            y: 0,
            width: this._width,
            height: this._height
        });
    };
})(Entry.FieldImage.prototype);

/***/ }),

/***/ "./src/playground/field/indicator.js":
/*!*******************************************!*\
  !*** ./src/playground/field/indicator.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 */


/*
 *
 */

Entry.FieldIndicator = function (content, blockView, index) {
    this._block = blockView.block;
    this._blockView = blockView;

    var box = new Entry.BoxModel();
    this.box = box;

    this._size = content.size;
    if (content.img) {
        if (this._block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN) this._imgUrl = content.img.replace('.png', '_un.png');else this._imgUrl = content.img;
    } else if (content.color) {
        this._color = content.color;
    }

    this._boxMultiplier = content.boxMultiplier || 2;
    this._highlightColor = content.highlightColor || '#F59900';
    this._position = content.position;

    this._index = index;
    this.svgGroup = null;
    this._imgElement = null;
    this.setValue(null);

    this.renderStart();
};

Entry.Utils.inherit(Entry.Field, Entry.FieldIndicator);

(function (p) {
    p.renderStart = function () {
        var options;
        if (!this._imgElement) {
            this.svgGroup = this._imgElement = this._blockView.contentSvgGroup.elem('image');
        }

        if (this._imgUrl) {
            options = {
                href: Entry.mediaFilePath + this._imgUrl,
                x: this._position ? this._size * -1 : 0,
                y: this._size * -1,
                width: this._size * 2,
                height: this._size * 2
            };
            this._imgElement.attr(options);

            if (this._block.emphasized && this._imgUrl.lastIndexOf('_un.png') === -1) {
                this._imgUrl = this._imgUrl.replace('.png', '_un.png');
            }
        }

        this.box.set({
            width: this._size * this._boxMultiplier + (this._position ? -this._size : 0),
            height: this._size * this._boxMultiplier
        });
    };

    p.enableHighlight = function () {
        return;
        var pathLen = this._path.getTotalLength();
        var path = this._path;
        this._path.attr({
            stroke: this._highlightColor,
            strokeWidth: 2,
            'stroke-linecap': 'round',
            'stroke-dasharray': pathLen + ' ' + pathLen,
            'stroke-dashoffset': pathLen
        });
        setInterval(function () {
            path.attr({ 'stroke-dashoffset': pathLen }).animate({ 'stroke-dashoffset': 0 }, 300);
        }, 1400, mina.easeout);
        setTimeout(function () {
            setInterval(function () {
                path.animate({ 'stroke-dashoffset': -pathLen }, 300);
            }, 1400, mina.easeout);
        }, 500);
    };
})(Entry.FieldIndicator.prototype);

/***/ }),

/***/ "./src/playground/field/keyboardInput.js":
/*!***********************************************!*\
  !*** ./src/playground/field/keyboardInput.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 */


/*
 *
 */

Entry.FieldKeyboard = function (content, blockView, index) {
    this._block = blockView.block;
    this._blockView = blockView;

    var box = new Entry.BoxModel();
    this.box = box;

    this.svgGroup = null;

    this.position = content.position;
    this._contents = content;
    this._index = index;
    this.setValue(String(this.getValue()));
    this._CONTENT_HEIGHT = this.getContentHeight();

    this._optionVisible = false;

    this.renderStart(blockView);
};

Entry.Utils.inherit(Entry.Field, Entry.FieldKeyboard);

(function (p) {
    var X_PADDING = 10,
        TEXT_Y_PADDING = 4;

    p.renderStart = function () {
        if (this.svgGroup) $(this.svgGroup).remove();
        var blockView = this._blockView;
        var that = this;
        var contents = this._contents;

        this.svgGroup = blockView.contentSvgGroup.elem('g', {
            class: 'entry-input-field'
        });

        this.textElement = this.svgGroup.elem('text').attr({
            x: X_PADDING / 2,
            y: TEXT_Y_PADDING,
            'font-size': '11px'
        });

        this._setTextValue();

        var width = this.getTextWidth() + 1;

        var CONTENT_HEIGHT = this._CONTENT_HEIGHT;
        var y = this.position && this.position.y ? this.position.y : 0;
        y -= CONTENT_HEIGHT / 2;
        this._header = this.svgGroup.elem('rect', {
            x: 0,
            y: y,
            width: width,
            height: CONTENT_HEIGHT,
            rx: 3,
            ry: 3,
            fill: '#fff',
            'fill-opacity': 0.4
        });

        this.svgGroup.appendChild(this.textElement);

        this._bindRenderOptions();

        this.box.set({
            x: 0,
            y: 0,
            width: width,
            height: CONTENT_HEIGHT
        });
    };

    p.renderOptions = function () {
        if (Entry.keyPressed) this.keyPressed = Entry.keyPressed.attach(this, this._keyboardControl);
        var that = this;
        this._optionVisible = true;

        var blockView = this._blockView;
        this._attachDisposeEvent();

        var pos = this.getAbsolutePosFromDocument();

        pos.x -= 12 + X_PADDING / 2;
        pos.x += this.box.width / 2;
        pos.y += this.box.height / 2 + 1;

        this.optionGroup = Entry.Dom('img', {
            class: 'entry-widget-keyboard-input',
            parent: $('body')
        });

        this.optionGroup.on('load', that.optionDomCreated.bind(this));

        this.optionGroup[0].src = Entry.mediaFilePath + '/media/keyboard_workspace_widget.png';

        this.optionGroup.on('mousedown', function (e) {
            e.stopPropagation();
        });

        this.optionGroup.css({ left: pos.x, top: pos.y });
    };

    p.destroyOption = function (forceCommand) {
        if (this.disposeEvent) {
            this.disposeEvent.destroy();
            delete this.disposeEvent;
        }

        if (this.optionGroup) {
            this.optionGroup.remove();
            delete this.optionGroup;
        }

        this._optionVisible = false;
        this._isEditing = false;
        this.command(forceCommand);
        if (this.keyPressed) {
            this.keyPressed.destroy();
            delete this.keyPressed;
        }
    };

    p._keyboardControl = function (event) {
        event.stopPropagation && event.stopPropagation();
        event.preventDefault && event.preventDefault();
        if (!this._optionVisible) return;

        var value = event.keyCode;
        var text = Entry.getKeyCodeMap()[value];
        if (text !== undefined) this.applyValue(text, value, true);
    };

    p.applyValue = function (text, value, forceCommand) {
        this.setValue(String(value));
        this._setTextValue();
        this.resize();
        this.destroyOption(forceCommand);
    };

    p.resize = function () {
        var width = this.getTextWidth() + 1;

        this._header.attr({ width: width });

        this.box.set({ width: width });
        this._blockView.dAlignContent();
    };

    p.getTextWidth = function () {
        return this.textElement.getComputedTextLength() + X_PADDING;
    };

    p.destroy = function () {
        this.destroyOption();

        if (Entry.keyPressed && this.keyPressed) this.keyPressed.destroy();
    };

    p._setTextValue = function () {
        var value = Entry.getKeyCodeMap()[this.getValue()];
        value = this._convert(value, this.getValue());
        this.textElement.textContent = value === undefined ? Lang.Blocks.no_target : value;
    };
})(Entry.FieldKeyboard.prototype);

/***/ }),

/***/ "./src/playground/field/lineBreak.js":
/*!*******************************************!*\
  !*** ./src/playground/field/lineBreak.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


/*
 *
 */

Entry.FieldLineBreak = function (content, blockView, index) {
    this._block = blockView.block;
    this._blockView = blockView;
    this._index = index;

    var box = new Entry.BoxModel();
    this.box = box;

    this.setValue(null);
    this.renderStart();
};

Entry.Utils.inherit(Entry.Field, Entry.FieldLineBreak);

(function (p) {
    p.renderStart = function () {
        return;
    };

    p.align = function (targetStatementIndex) {
        var blockView = this._blockView;

        if (blockView._statements.length === 0) return;

        this.box.set({
            y: (blockView._statements[targetStatementIndex].height || 20) + Math.max(blockView.contentHeight % 1000, 30)
        });
    };
})(Entry.FieldLineBreak.prototype);

/***/ }),

/***/ "./src/playground/field/output.js":
/*!****************************************!*\
  !*** ./src/playground/field/output.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 */

/*
 *
 */

Entry.FieldOutput = function (content, blockView, index, mode, contentIndex) {
    Entry.Model(this, false);

    this._blockView = blockView;
    this._block = blockView.block;
    this._valueBlock = null;

    this.box = new Entry.BoxModel();
    this.changeEvent = new Entry.Event(this);

    this._index = index;
    this.contentIndex = contentIndex;
    this._content = content;

    this.acceptType = content.accept;

    this.view = this;

    this.svgGroup = null;

    this._position = content.position;

    this.box.observe(blockView, 'dAlignContent', ['width', 'height']);
    this.observe(this, '_updateBG', ['magneting'], false);

    this.renderStart(blockView.getBoard(), mode);
};

Entry.Utils.inherit(Entry.Field, Entry.FieldOutput);

(function (p) {
    p.schema = { magneting: false };

    p.renderStart = function (board, mode) {
        if (!this.svgGroup) this.svgGroup = this._blockView.contentSvgGroup.elem('g');

        this.view = this;
        this._nextGroup = this.svgGroup;

        var block = this.getValue();
        if (block && !block.view) {
            block.setThread(this);
            block.createView(board, mode);
        }

        this._updateValueBlock(block);
        this._valueBlock && this._valueBlock.view._startContentRender(this.renderMode);

        if (this._blockView.getBoard().constructor == Entry.BlockMenu && this._valueBlock) this._valueBlock.view.removeControl();
    };

    p.align = function (x, y, animate) {
        animate = animate === undefined ? true : animate;
        var svgGroup = this.svgGroup;
        if (this._position) {
            if (this._position.x) x = this._position.x;
            if (this._position.y) y = this._position.y;
        }

        var block = this._valueBlock;

        if (block && block.view) y = block.view.height * -0.5;

        var transform = 'translate(' + x + ',' + y + ')';

        if (animate) svgGroup.animate({
            transform: transform
        }, 300, mina.easeinout);else svgGroup.attr({
            transform: transform
        });

        this.box.set({ x: x, y: y });
    };

    p.calcWH = function () {
        var block = this._valueBlock;
        var blockView = block && block.view;

        if (block && blockView) {
            this.box.set({
                width: blockView.width,
                height: blockView.height
            });
        } else {
            this.box.set({
                width: 0,
                height: 20
            });
        }
    };

    p.calcHeight = p.calcWH;

    p.destroy = function () {
        this._valueBlock && this._valueBlock.destroyView();
    };

    p._inspectBlock = function () {};

    p._setValueBlock = function (block) {
        if (block != this._valueBlock || !this._valueBlock) {
            this._valueBlock = block;
            this.setValue(block);

            block && block.setThread(this);
            return this._valueBlock;
        }
    };

    p.spliceBlock = function () {
        this._updateValueBlock();
    };

    p._updateValueBlock = function (block) {
        if (!(block instanceof Entry.Block)) block = undefined;

        if (block && block === this._valueBlock) {
            this.calcWH();
            return;
        }

        this._sizeObserver && this._sizeObserver.destroy();
        this._posObserver && this._posObserver.destroy();

        block = this._setValueBlock(block);
        if (block) {
            var view = block.view;
            view.bindPrev();
            this._posObserver = view.observe(this, '_updateValueBlock', ['x', 'y'], false);
            this._sizeObserver = view.observe(this, 'calcWH', ['width', 'height']);
        } else {
            this.calcWH();
        }

        this._blockView.dAlignContent();
    };

    p.getPrevBlock = function (block) {
        if (this._valueBlock === block) return this;else return null;
    };

    p.getNextBlock = function () {
        return null;
    };

    p.requestAbsoluteCoordinate = function (blockView) {
        var blockView = this._blockView;
        var contentPos = blockView.contentPos;
        var pos = blockView.getAbsoluteCoordinate();
        pos.x += this.box.x + contentPos.x;
        pos.y += this.box.y + contentPos.y;
        return pos;
    };

    p.dominate = function () {
        this._blockView.dominate();
    };

    p.isGlobal = function () {
        return false;
    };

    p.separate = function (block) {
        this.getCode().createThread([block]);
        this._updateValueBlock(null);
        this.changeEvent.notify();
    };

    p.getCode = function () {
        return this._block.thread.getCode();
    };

    p.cut = function (block) {
        if (this._valueBlock === block) {
            delete this._valueBlock;
            return [block];
        } else return null;
    };

    p._updateBG = function () {
        if (this.magneting) {
            this._bg = this.svgGroup.elem('path', {
                d: 'm -4,-12 h 3 l 2,2 0,3 3,0 1,1 0,12 -1,1 -3,0 0,3 -2,2 h -3 ',
                fill: '#fff',
                stroke: '#fff',
                'fill-opacity': 0.7,
                transform: 'translate(0,' + (this._valueBlock ? 12 : 0) + ')'
            });
        } else {
            if (this._bg) {
                this._bg.remove();
                delete this._bg;
            }
        }
    };

    p.replace = function (block) {
        var valueBlock = this._valueBlock;
        if (valueBlock) {
            valueBlock.view._toGlobalCoordinate();
            block.getTerminateOutputBlock().view._contents[1].replace(valueBlock);
        }
        this._updateValueBlock(block);
        block.view._toLocalCoordinate(this.svgGroup);
        this.calcWH();
    };

    p.setParent = function (parent) {
        this._parent = parent;
    };

    p.getParent = function () {
        return this._parent;
    };

    p.getThread = function () {
        return this;
    };

    p.getValueBlock = function () {
        return this._valueBlock;
    };

    p.pointer = function (pointer) {
        pointer = pointer || [];
        pointer.unshift(this._index);
        pointer.unshift(Entry.PARAM);
        return this._block.pointer(pointer);
    };
})(Entry.FieldOutput.prototype);

/***/ }),

/***/ "./src/playground/field/statement.js":
/*!*******************************************!*\
  !*** ./src/playground/field/statement.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 */


/*
 *
 */

Entry.FieldStatement = function (content, blockView, index) {
    Entry.Model(this, false);

    this._blockView = blockView;
    this.block = blockView.block;

    this.view = this;

    this._index = index;

    this.acceptType = content.accept;

    this.svgGroup = null;
    this.statementSvgGroup = null;
    this._thread = null;

    this._position = content.position;

    this._events = [];

    this.observe(blockView, 'alignContent', ['height'], false);
    this.observe(this, '_updateBG', ['magneting'], false);

    this.renderStart(blockView.getBoard());
};

(function (p) {
    p.schema = {
        x: 0,
        y: 0,
        width: 100,
        height: 31,
        magneting: false
    };

    p.magnet = { next: { x: 0, y: 0 } };

    p.renderStart = function (board) {
        this.svgGroup = this._blockView.statementSvgGroup.elem('g');
        this.statementSvgGroup = this.svgGroup.elem('g');
        this._nextGroup = this.statementSvgGroup;
        this._initThread(board);
        this._board = board;
    };

    p._initThread = function (board) {
        var thread = this.getValue();
        this._thread = thread;
        thread.createView(board);
        thread.view.setParent(this);
        var firstBlock = thread.getFirstBlock();
        if (firstBlock) {
            firstBlock.view._toLocalCoordinate(this.statementSvgGroup);
            this.firstBlock = firstBlock;
        }

        var event = thread.changeEvent;

        var calcEvent = event.attach(this, this.calcHeight);
        var checkTopEvent = event.attach(this, this.checkTopBlock);

        this._events.push(calcEvent);
        this._events.push(checkTopEvent);

        this.calcHeight();
    };

    p.align = function (x, y, animate) {
        animate = animate === undefined ? true : animate;
        var svgGroup = this.svgGroup;
        if (this._position) {
            if (this._position.x) x = this._position.x;
            if (this._position.y) y = this._position.y;
        }

        var transform = 'translate(' + x + ',' + y + ')';

        if (this.x !== x || this.y !== y) this.set({ x: x, y: y });

        if (animate) svgGroup.animate({
            transform: transform
        }, 300, mina.easeinout);else svgGroup.attr({
            transform: transform
        });
    };

    p.calcHeight = function () {
        var height = this._thread.view.requestPartHeight(null);
        if (this.height === height) return;
        this.set({ height: height });
    };

    p.getValue = function () {
        return this.block.statements[this._index];
    };

    p.requestAbsoluteCoordinate = function () {
        var pos = this._blockView.getAbsoluteCoordinate();
        pos.x += this.x;
        pos.y += this.y;
        return pos;
    };

    p.dominate = function () {
        this._blockView.dominate();
    };

    p.destroy = function () {
        while (this._events.length) {
            this._events.pop().destroy();
        }
    };

    p._updateBG = function () {
        var dragBlock = this._board.dragBlock;
        if (!dragBlock || !dragBlock.dragInstance) return;

        var blockView = this;
        var magneting = blockView.magneting;
        var block = blockView.block;
        var svgGroup = blockView.svgGroup;

        if (magneting) {
            var shadow = dragBlock.getShadow();
            var pos = this.requestAbsoluteCoordinate();
            var transform = 'translate(' + pos.x + ',' + pos.y + ')';
            $(shadow).attr({
                transform: transform,
                display: 'block'
            });
            this._clonedShadow = shadow;

            if (blockView.background) {
                blockView.background.remove();
                blockView.nextBackground.remove();
                delete blockView.background;
                delete blockView.nextBackground;
            }
            var height = dragBlock.getBelowHeight();

            this.statementSvgGroup.attr({
                transform: 'translate(0,' + height + ')'
            });

            this.set({ height: this.height + height });
        } else {
            if (this._clonedShadow) {
                this._clonedShadow.attr({ display: 'none' });
                delete this._clonedShadow;
            }

            var height = blockView.originalHeight;
            if (height !== undefined) {
                if (blockView.background) {
                    blockView.background.remove();
                    blockView.nextBackground.remove();
                    delete blockView.background;
                    delete blockView.nextBackground;
                }
                delete blockView.originalHeight;
            }
            this.statementSvgGroup.attr({
                transform: 'translate(0,0)'
            });
            this.calcHeight();
        }
        var changeEvent = blockView.block.thread.changeEvent;
        if (changeEvent) changeEvent.notify();
    };

    p.insertTopBlock = function (newBlock) {
        if (this._posObserver) this._posObserver.destroy();

        var block = this.firstBlock;
        this.firstBlock = newBlock;
        if (newBlock) newBlock.doInsert(this._thread);
        return block;
    };

    p.getNextBlock = function () {
        return this.firstBlock;
    };

    p.checkTopBlock = function () {
        var firstBlock = this._thread.getFirstBlock();
        if (firstBlock && this.firstBlock !== firstBlock) {
            this.firstBlock = firstBlock;
            firstBlock.view.bindPrev(this);
            firstBlock._updatePos();
        } else if (!firstBlock) {
            this.firstBlock = null;
        }
    };

    p.pointer = function (pointer) {
        pointer = pointer || [];
        pointer.unshift(this._index);
        return this.block.pointer(pointer);
    };

    p.isParamBlockType = function () {
        return false;
    };
})(Entry.FieldStatement.prototype);

/***/ }),

/***/ "./src/playground/field/text.js":
/*!**************************************!*\
  !*** ./src/playground/field/text.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


/*
 *
 */

Entry.FieldText = function (content, blockView, index) {
    this._block = blockView.block;
    this._blockView = blockView;
    this._index = index;

    this.box = new Entry.BoxModel();

    this._font_size = content.fontSize || blockView.getSkeleton().fontSize || 12;
    this._color = content.color || this._block.getSchema().fontColor || blockView.getSkeleton().color || 'white';
    this._align = content.align || 'left';
    this._text = this.getValue() || content.text;
    this.setValue(null);

    this.textElement = null;

    this.renderStart(blockView);
};

Entry.Utils.inherit(Entry.Field, Entry.FieldText);

(function (p) {
    p.renderStart = function () {
        var that = this;
        var blockView = this._blockView;

        if (!this.textElement) {
            this.svgGroup = this.textElement = blockView.contentSvgGroup.elem('text').attr({
                style: 'white-space: pre;',
                'font-size': that._font_size + 'px',
                'font-family': 'nanumBarunRegular',
                class: 'dragNone',
                fill: that._color
            });
        }

        var old = this.textElement.textContent;
        this._text = this._text.replace(/(\r\n|\n|\r)/gm, ' ');
        if (old !== this._text) {
            this.textElement.textContent = this._text;
        }

        var x = 0;
        var bBox = this.getTextBBox();
        if (this._align == 'center') x = -bBox.width / 2;

        this.textElement.attr({
            x: x,
            y: bBox.height * 0.25
        });

        this.box.set({
            x: 0,
            y: 0,
            width: bBox.width,
            height: bBox.height
        });
    };

    p.getTextValue = function () {
        return this._text;
    };
})(Entry.FieldText.prototype);

/***/ }),

/***/ "./src/playground/field/textInput.js":
/*!*******************************************!*\
  !*** ./src/playground/field/textInput.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 */


/*
 *
 */

Entry.FieldTextInput = function (content, blockView, index) {
    this._blockView = blockView;
    this._block = blockView.block;

    var box = new Entry.BoxModel();
    this.box = box;

    this.svgGroup = null;

    this.position = content.position;
    this._contents = content;
    this._isClearBG = content.clearBG || false;
    this._index = index;
    this.value = this.getValue() || '';
    this._CONTENT_HEIGHT = this.getContentHeight();
    this._font_size = 12;
    this._neighborFields = null;

    this.renderStart();
};

Entry.Utils.inherit(Entry.Field, Entry.FieldTextInput);

(function (p) {
    var X_PADDING = 6,
        TEXT_Y_PADDING = 4;

    p._focusNeighbor = function (direction) {
        var fields = this.getNeighborFields();

        var idx = fields.indexOf(this);
        if (direction === 'prev') {
            idx--;
        } else {
            idx++;
        }
        var field = fields[idx];

        //no field to focus
        if (!field) {
            return;
        }

        this.destroyOption(undefined, true);
        field.renderOptions(fields);
    };

    p.renderStart = function () {
        var blockView = this._blockView;
        if (!this.svgGroup) this.svgGroup = blockView.contentSvgGroup.elem('g');
        if (!this.textElement) this.textElement = this.svgGroup.elem('text', {
            x: X_PADDING / 2,
            y: TEXT_Y_PADDING,
            fill: this._contents.color || 'black',
            'font-size': this._font_size + 'px'
        });

        var that = this;
        var contents = this._contents;

        this.svgGroup.attr({ class: 'entry-input-field' });

        this._setTextValue();

        var width = this.getTextWidth();

        var y = this.position && this.position.y ? this.position.y : 0;
        var CONTENT_HEIGHT = this._CONTENT_HEIGHT;
        y -= CONTENT_HEIGHT / 2;
        if (!this._header) this._header = this.svgGroup.elem('rect', {
            width: width,
            height: CONTENT_HEIGHT,
            y: y,
            rx: 3,
            ry: 3,
            fill: '#fff',
            'fill-opacity': this._isClearBG ? 0 : 0.4
        });else {
            this._header.setAttribute('width', width);
        }

        if (this._isClearBG) $(this._header).css({ stroke: 'none' });

        this.svgGroup.appendChild(this.textElement);

        this._bindRenderOptions();

        this.box.set({
            x: 0,
            y: 0,
            width: width,
            height: CONTENT_HEIGHT
        });
    };

    p.renderOptions = function (neighborFields) {
        if (neighborFields) {
            this._neighborFields = neighborFields;
        }

        var that = this;

        var blockView = this._blockView;

        var func = function func(skipCommand) {
            skipCommand !== true && that.applyValue();
            that.destroyOption(skipCommand);
        };

        this._attachDisposeEvent(func);

        this.optionGroup = Entry.Dom('input', {
            class: 'entry-widget-input-field',
            parent: $('body')
        });

        this.optionGroup.val(this.getValue());

        this.optionGroup.on('mousedown', function (e) {
            e.stopPropagation();
        });

        var exitKeys = [13, 27];
        this.optionGroup.on('keyup', function (e) {
            var keyCode = e.keyCode || e.which;
            that.applyValue(e);

            if (exitKeys.indexOf(keyCode) > -1) that.destroyOption(undefined, true);
        });

        this.optionGroup.on('keydown', function (e) {
            var keyCode = e.keyCode || e.which;

            if (keyCode === 9) {
                e.preventDefault();
                that._focusNeighbor(e.shiftKey ? 'prev' : 'next');
            }
        });

        var pos = this.getAbsolutePosFromDocument();
        pos.y -= this.box.height / 2;
        this.optionGroup.css({
            height: this._CONTENT_HEIGHT,
            left: pos.x,
            top: pos.y,
            width: that.box.width
        });

        this.optionGroup.focus && this.optionGroup.focus();

        var optionGroup = this.optionGroup[0];
        optionGroup.setSelectionRange(0, optionGroup.value.length, 'backward');

        this.optionDomCreated();

        //normally option group is done editing and destroyed
        //before blur called
        this.optionGroup.one('blur', function () {
            that.isEditing() && that.destroyOption(undefined, true);
        });
    };

    p.applyValue = function (event) {
        var value = this.optionGroup.val();
        this.setValue(value);
        this._setTextValue();
        this.resize();
    };

    p.resize = function () {
        var width = this.getTextWidth();

        this._header.attr({ width: width });
        this.optionGroup.css({ width: width });

        this.box.set({ width: width });
        this._blockView.dAlignContent();
    };

    p.getTextWidth = function () {
        return this.getTextBBox().width + X_PADDING + 2;
    };

    p._setTextValue = function () {
        var newValue = this._convert(this.getValue(), this.getValue());
        if (this.textElement.textContent !== newValue) this.textElement.textContent = newValue;
    };

    p.getNeighborFields = function () {
        if (!this._neighborFields) {
            var FIELD_TEXT_INPUT = Entry.FieldTextInput;
            this._neighborFields = this._block.getRootBlock().getThread().view.getFields().filter(function (f) {
                return f instanceof FIELD_TEXT_INPUT;
            });
        }

        return this._neighborFields;
    };
})(Entry.FieldTextInput.prototype);

/***/ }),

/***/ "./src/playground/globalSvg.js":
/*!*************************************!*\
  !*** ./src/playground/globalSvg.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.GlobalSvg = {};

(function (gs) {
    gs.DONE = 0;
    gs._inited = false;
    gs.REMOVE = 1;
    gs.RETURN = 2;

    gs.createDom = function () {
        if (this.inited) return;

        //document attached element not removed by angular
        $('#globalSvgSurface').remove();
        $('#globalSvg').remove();

        var body = $('body');
        this._container = Entry.Dom('div', {
            classes: ['globalSvgSurface', 'entryRemove'],
            id: 'globalSvgSurface',
            parent: body
        });

        this.svgDom = Entry.Dom($('<svg id="globalSvg" width="10" height="10"' + 'version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), { parent: this._container });

        this.svg = Entry.SVG('globalSvg');
        this.left = 0;
        this.top = 0;
        this._inited = true;
    };

    gs.setView = function (view, mode) {
        if (view == this._view) return;
        var data = view.block;
        if (data.isReadOnly() || !view.movable) return;
        this._view = view;
        this._mode = mode;
        if (mode !== Entry.Workspace.MODE_VIMBOARD) view.set({ visible: false });

        this.draw();
        this.show();
        this.align();
        this.position();
        return true;
    };

    gs.draw = function () {
        var that = this;
        var blockView = this._view;
        if (this._svg) this.remove();
        var isVimMode = this._mode == Entry.Workspace.MODE_VIMBOARD;
        var bBox = blockView.svgGroup.getBBox();

        this.svgDom.attr({
            width: Math.round(bBox.width + 4) + 'px',
            height: Math.round(bBox.height + 4) + 'px'
        });

        this.svgGroup = Entry.SVG.createElement(blockView.svgGroup.cloneNode(true), { opacity: 1 });

        this.svg.appendChild(this.svgGroup);
        //TODO selectAll function replace
        if (isVimMode) {
            var svg = $(this.svgGroup);

            svg.find('g').css({ filter: 'none' });

            svg.find('path, rect, polygon').velocity({
                opacity: 0
            }, {
                duration: 500
            });

            svg.find('text').velocity({
                fill: '#000000'
            }, {
                duration: 530
            });
        }
    };

    gs.remove = function () {
        if (!this.svgGroup) return;
        this.svgGroup.remove();
        delete this.svgGroup;
        delete this._view;
        delete this._offsetX;
        delete this._offsetY;
        delete this._startX;
        delete this._startY;
        this.hide();
    };

    gs.align = function () {
        var offsetX = this._view.getSkeleton().box(this._view).offsetX || 0;
        var offsetY = this._view.getSkeleton().box(this._view).offsetY || 0;
        offsetX *= -1;
        offsetX += 1;
        offsetY *= -1;
        offsetY += 1;
        this._offsetX = offsetX;
        this._offsetY = offsetY;
        var transform = 'translate(' + offsetX + ',' + offsetY + ')';
        this.svgGroup.attr({ transform: transform });
    };

    gs.show = function () {
        this._container.removeClass('entryRemove');
    };

    gs.hide = function () {
        this._container.addClass('entryRemove');
    };

    gs.position = function () {
        var that = this;
        var blockView = this._view;
        if (!blockView) return;
        var pos = blockView.getAbsoluteCoordinate();
        var offset = blockView.getBoard().offset();
        this.left = pos.x + offset.left - this._offsetX;
        this.top = pos.y + offset.top - this._offsetY;

        this._applyDomPos(this.left, this.top);
    };

    gs.adjust = function (adjustX, adjustY) {
        var left = this.left + (adjustX || 0);
        var top = this.top + (adjustY || 0);
        if (left === this.left && top === this.top) return;

        this.left = left;
        this.top = top;
        this._applyDomPos(this.left, this.top);
    };

    gs._applyDomPos = function (left, top) {
        this.svgDom.css({
            transform: 'translate3d(' + left + 'px,' + top + 'px, 0px)'
        });
    };

    gs.terminateDrag = function (blockView) {
        var mousePos = Entry.mouseCoordinate;
        var board = blockView.getBoard();
        var blockMenu = board.workspace.blockMenu;
        var bLeft = blockMenu.offset().left;
        var bTop = blockMenu.offset().top;
        var bWidth = blockMenu.visible ? blockMenu.svgDom.width() : 0;
        if (mousePos.y > board.offset().top - 20 && mousePos.x > bLeft + bWidth) return this.DONE;else if (mousePos.y > bTop && mousePos.x > bLeft && blockMenu.visible) {
            if (!blockView.block.isDeletable()) return this.RETURN;else return this.REMOVE;
        } else return this.RETURN;
    };

    gs.addControl = function (e) {
        this.onMouseDown.apply(this, arguments);
    };

    gs.onMouseDown = function (e) {
        this._startY = e.pageY;
        var that = this;
        e.stopPropagation();
        e.preventDefault();
        var doc = $(document);
        doc.bind('mousemove.block', onMouseMove);
        doc.bind('mouseup.block', onMouseUp);
        doc.bind('touchmove.block', onMouseMove);
        doc.bind('touchend.block', onMouseUp);
        this._startX = e.pageX;
        this._startY = e.pageY;

        function onMouseMove(e) {
            var newX = e.pageX;
            var newY = e.pageY;
            var dX = newX - that._startX;
            var dY = newY - that._startY;
            var newLeft = that.left + dX;
            var newTop = that.top + dY;
            that._applyDomPos(newLeft, newTop);
            that._startX = newX;
            that._startY = newY;
            that.left = newLeft;
            that.top = newTop;
        }

        function onMouseUp(e) {
            $(document).unbind('.block');
        }
    };
})(Entry.GlobalSvg);

/***/ }),

/***/ "./src/playground/mutator.js":
/*!***********************************!*\
  !*** ./src/playground/mutator.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


/*
 *
 */

Entry.Mutator = function () {};

(function (m) {
    m.mutate = function (blockType, schemaDiff, changeData) {
        var blockSchema = Entry.block[blockType];
        if (blockSchema.changeEvent === undefined) blockSchema.changeEvent = new Entry.Event();
        if (blockSchema.paramsBackupEvent === undefined) blockSchema.paramsBackupEvent = new Entry.Event();
        if (blockSchema.destroyParamsBackupEvent === undefined) blockSchema.destroyParamsBackupEvent = new Entry.Event();

        //statements params template
        blockSchema.template = schemaDiff.template;
        blockSchema.params = schemaDiff.params;

        blockSchema.changeEvent.notify(1, changeData);
    };
})(Entry.Mutator);

(function (p) {})(Entry.Mutator.prototype);

/***/ }),

/***/ "./src/playground/renderView.js":
/*!**************************************!*\
  !*** ./src/playground/renderView.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.RenderView = function (dom, align, scale, parserType) {
    this._align = align || 'CENTER';

    if (typeof dom === 'string') dom = $('#' + dom);else dom = $(dom);

    if (dom.prop('tagName') !== 'DIV') return console.error('Dom is not div element');

    this.view = dom;
    this.viewOnly = true;
    this.suffix = 'renderView';
    this._scale = scale === undefined ? 1 : scale;

    this._parserType = parserType;

    this.visible = true;
    this.disableMouseEvent = true;
    this._svgId = 'renderView_' + new Date().getTime();
    this._generateView();

    this.offset = this.svgDom.offset();
    this._minBlockOffsetX = 0;
    this._setSize();

    this.svg = Entry.SVG(this._svgId, this.svgDom[0]);
    Entry.Utils.addFilters(this.svg, this.suffix);

    if (this.svg) {
        this.svgGroup = this.svg.elem('g');

        this.svgThreadGroup = this.svgGroup.elem('g');
        this.svgThreadGroup.board = this;

        this.svgBlockGroup = this.svgGroup.elem('g');
        this.svgBlockGroup.board = this;
    }
};

(function (p) {
    p.schema = {
        code: null,
        dragBlock: null,
        closeBlock: null,
        selectedBlockView: null
    };

    p._generateView = function () {
        var parent = this.view;
        var that = this;

        this.renderViewContainer = Entry.Dom('div', {
            class: 'renderViewContainer',
            parent: parent
        });

        this.svgDom = Entry.Dom($('<svg id="' + this._svgId + '" class="renderView" version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), { parent: this.renderViewContainer });
    };

    p.changeCode = function (code, resizeImmediately) {
        if (!(code instanceof Entry.Code)) return console.error('You must inject code instance');
        var that = this;
        this.code = code;

        if (!this.svg) {
            this.svg = Entry.SVG(this._svgId, this.svgDom[0]);
            this.svgGroup = this.svg.elem('g');

            this.svgThreadGroup = this.svgGroup.elem('g');
            this.svgThreadGroup.board = this;

            this.svgBlockGroup = this.svgGroup.elem('g');
            this.svgBlockGroup.board = this;
        }

        code.createView(this);
        this.align();
        this.resize(resizeImmediately);
    };

    p.align = function () {
        var threads = this.code.getThreads();
        if (!threads || threads.length === 0) return;
        var totalHeight = 0;
        var vPadding = 15,
            marginFromTop = 0,
            hPadding = this._getHorizontalPadding();

        for (var i = 0, len = threads.length; i < len; i++) {
            var thread = threads[i];
            var block = thread.getFirstBlock();
            var blockView = block.view;

            var height = blockView.svgGroup.getBBox().height;
            var className = Entry.block[block.type].class;
            var xPos = 0;
            var extensions = $(blockView.svgGroup).find('.extension');
            if (extensions) {
                for (var j = 0; j < extensions.length; j++) {
                    var ext = extensions[j];
                    var currentXpos = parseFloat(ext.getAttribute('x'));
                    xPos = Math.min(xPos, currentXpos);
                }
            }
            this._minBlockOffsetX = Math.min(this._minBlockOffsetX, blockView.offsetX);
            blockView._moveTo(hPadding - xPos - blockView.offsetX, marginFromTop - blockView.offsetY, false);
            marginFromTop += height + vPadding;
        }
        this._setSize();
    };

    p.hide = function () {
        this.view.addClass('entryRemove');
    };

    p.show = function () {
        this.view.removeClass('entryRemove');
    };

    p._setSize = function () {
        if (this.svgDom) {
            this._svgWidth = this.svgDom.width();
            this.offset = this.svgDom.offset();
        }
        if (this.svgGroup) this._bBox = this.svgGroup.getBBox();
    };

    p.bindCodeView = function (codeView) {
        this.svgBlockGroup.remove();
        this.svgThreadGroup.remove();
        this.svgBlockGroup = codeView.svgBlockGroup;
        this.svgThreadGroup = codeView.svgThreadGroup;
        this.svgGroup.appendChild(this.svgThreadGroup);
        this.svgGroup.appendChild(this.svgBlockGroup);
    };

    p.resize = function (isImmediate) {
        if (!this.svg || !this._bBox) return;

        if (isImmediate) {
            run.call(this);
        } else {
            setTimeout(function () {
                run.call(this);
            }.bind(this), 0);
        }

        function run() {
            this._setSize();
            var width = Math.round(this._bBox.width);
            var height = Math.round(this._bBox.height);
            //svg is not on the screen
            if (width === 0 || height === 0) return;

            $(this.svg).css({
                width: width + this._getHorizontalPadding() - this._minBlockOffsetX,
                height: height + 5
            });

            //double check
            setTimeout(function () {
                var bBox = this.svgGroup.getBBox();
                if (Math.round(bBox.width) !== width || Math.round(bBox.height) !== height) this.resize();
            }.bind(this), 1000);
        }
    };

    p.setDomSize = function (isImmediate) {
        if (this.svgBlockGroup) this.svgBlockGroup.attr('transform', 'scale(1)');
        this.code.view.reDraw();
        this.align();
        this.resize(isImmediate);
        if (this._scale !== 1) {
            window.setTimeout(function () {
                this.svgBlockGroup.attr('transform', 'scale(%scale)'.replace('%scale', this._scale));
                this.align();
                this.resize();
            }.bind(this), 0);
        }
    };

    p._getHorizontalPadding = function () {
        var marginMap = {
            LEFT: 20,
            LEFT_MOST: 0
        };
        var ret = marginMap[this._align];

        return ret !== undefined ? ret : this.svgDom.width() / 2;
    };

    p.getBlockSyntax = function (block, renderMode) {
        var syntax = null;
        if (renderMode === 2) {
            if (!this._parser) this._parser = new Entry.Parser(null, null);
            this._parser.setParser(1, this._parserType);
            if (this._parser._execParser) syntax = this._parser._execParser.searchSyntax(block);
        }

        return syntax;
    };

    p.setParserType = function (parserType) {
        this._parserType = parserType;
    };
})(Entry.RenderView.prototype);

/***/ }),

/***/ "./src/playground/scroll.js":
/*!**********************************!*\
  !*** ./src/playground/scroll.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


/*
 *
 * @param {object} board
 */

Entry.Scroller = function (board, horizontal, vertical) {
    this._horizontal = horizontal === undefined ? true : horizontal;
    this._vertical = vertical === undefined ? true : vertical;

    this.board = board;

    this.svgGroup = null;

    this.hWidth = 0;
    this.hX = 0;
    this.hRatio = 0;
    this.vWidth = 0;
    this.vY = 0;
    this.vRatio = 0;
    this._visible = true;
    this._opacity = -1;

    this.createScrollBar();
    this.setOpacity(0);

    this._bindEvent();

    this._scrollCommand = Entry.Utils.debounce(Entry.do, 200);
};

Entry.Scroller.RADIUS = 7;

(function (p) {
    p.createScrollBar = function () {
        var r = Entry.Scroller.RADIUS;
        var scroller = this;

        this.svgGroup = this.board.svg.elem('g').attr({ class: 'boardScrollbar' });

        if (this._horizontal) {
            this.hScrollbar = this.svgGroup.elem('rect', {
                height: 2 * r,
                rx: r,
                ry: r
            });
            this.hScrollbar.mousedown = function (e) {
                if (e.button === 0 || e instanceof Touch) {
                    if (Entry.documentMousedown) Entry.documentMousedown.notify(e);
                    var doc = $(document);
                    doc.bind('mousemove.scroll', onMouseMove);
                    doc.bind('mouseup.scroll', onMouseUp);
                    doc.bind('touchmove.scroll', onMouseMove);
                    doc.bind('touchend.scroll', onMouseUp);
                    scroller.dragInstance = new Entry.DragInstance({
                        startX: e.pageX,
                        startY: e.pageY,
                        offsetX: e.pageX,
                        offsetY: e.pageY
                    });
                }

                function onMouseMove(e) {
                    e.stopPropagation();
                    e.preventDefault();

                    if (e.originalEvent.touches) {
                        e = e.originalEvent.touches[0];
                    }
                    var dragInstance = scroller.dragInstance;
                    scroller.scroll((e.pageX - dragInstance.offsetX) / scroller.hRatio, 0);
                    dragInstance.set({
                        offsetX: e.pageX,
                        offsetY: e.pageY
                    });
                }

                function onMouseUp(e) {
                    $(document).unbind('.scroll');
                    delete scroller.dragInstance;
                }
                e.stopPropagation();
            };
        }

        if (this._vertical) {
            this.vScrollbar = this.svgGroup.elem('rect', {
                width: 2 * r,
                rx: r,
                ry: r
            });
            this.vScrollbar.mousedown = function (e) {
                if (e.button === 0 || e instanceof Touch) {
                    if (Entry.documentMousedown) Entry.documentMousedown.notify(e);
                    var doc = $(document);
                    doc.bind('mousemove.scroll', onMouseMove);
                    doc.bind('mouseup.scroll', onMouseUp);
                    doc.bind('touchmove.scroll', onMouseMove);
                    doc.bind('touchend.scroll', onMouseUp);
                    scroller.dragInstance = new Entry.DragInstance({
                        startX: e.pageX,
                        startY: e.pageY,
                        offsetX: e.pageX,
                        offsetY: e.pageY
                    });
                }

                function onMouseMove(e) {
                    e.stopPropagation();
                    e.preventDefault();

                    if (e.originalEvent.touches) {
                        e = e.originalEvent.touches[0];
                    }
                    var dragInstance = scroller.dragInstance;
                    scroller.scroll(0, (e.pageY - dragInstance.offsetY) / scroller.vRatio);
                    dragInstance.set({
                        offsetX: e.pageX,
                        offsetY: e.pageY
                    });
                }

                function onMouseUp(e) {
                    $(document).unbind('.scroll');
                    delete scroller.dragInstance;
                }
                e.stopPropagation();
            };
        }
    };

    p.updateScrollBar = function (dx, dy) {
        if (this._horizontal) {
            this.hX += dx * this.hRatio;
            this.hScrollbar.attr({
                x: this.hX
            });
        }

        if (this._vertical) {
            this.vY += dy * this.vRatio;
            this.vScrollbar.attr({
                y: this.vY
            });
        }
    };

    p.scroll = function (x, y, skipCommand) {
        if (!this.board.code) return;

        var board = this.board;
        var svgRect = board.getSvgDomRect();
        var clientRect = board.svgBlockGroup.getBoundingClientRect(),
            bBox = {
            x: clientRect.left - this.board.offset().left,
            y: clientRect.top - this.board.offset().top,
            width: clientRect.width,
            height: clientRect.height
        };
        x = Math.max(-bBox.width + Entry.BOARD_PADDING - bBox.x, x);
        y = Math.max(-bBox.height + Entry.BOARD_PADDING - bBox.y, y);
        y = Math.min(svgRect.height - Entry.BOARD_PADDING - bBox.y, y);

        this._scroll(x, y);
        if (skipCommand !== true) {
            if (!this._diffs) this._diffs = [0, 0];

            this._diffs[0] += x;
            this._diffs[1] += y;

            this._scrollCommand('scrollBoard', this._diffs[0], this._diffs[1], true);
        }
    };

    p._scroll = function (x, y) {
        this.board.code.moveBy(x, y);
        this.updateScrollBar(x, y);
    };

    p.setVisible = function (visible) {
        if (visible == this.isVisible()) return;
        this._visible = visible;
        this.svgGroup.attr({
            display: visible === true ? 'block' : 'none'
        });
    };

    p.isVisible = function () {
        return this._visible;
    };

    p.setOpacity = function (value) {
        if (this._opacity == value) return;
        this.hScrollbar.attr({ opacity: value });
        this.vScrollbar.attr({ opacity: value });

        this._opacity = value;
    };

    p.resizeScrollBar = function () {
        if (!this._visible) return;

        var board = this.board,
            offset = board.offset(),
            svgDom = board.svgDom,
            svgRect = board.getSvgDomRect();

        var bRect = board.svgBlockGroup.getBoundingClientRect(),
            bWidth = svgRect.width,
            bHeight = svgRect.height,
            bBox = {
            x: bRect.left - offset.left,
            y: bRect.top - offset.top,
            width: bRect.width,
            height: bRect.height
        };

        // hScroll
        if (this._horizontal) {
            var hLimitA = -bBox.width + Entry.BOARD_PADDING,
                hLimitB = bWidth - Entry.BOARD_PADDING;

            var hWidth = (bWidth + 2 * Entry.Scroller.RADIUS) * bBox.width / (hLimitB - hLimitA + bBox.width);
            if (!Entry.Utils.isNumber(hWidth)) hWidth = 0;
            this.hX = (bBox.x - hLimitA) / (hLimitB - hLimitA) * (bWidth - hWidth - 2 * Entry.Scroller.RADIUS);
            this.hScrollbar.attr({
                width: hWidth,
                x: this.hX,
                y: bHeight - 2 * Entry.Scroller.RADIUS
            });

            this.hRatio = (bWidth - hWidth - 2 * Entry.Scroller.RADIUS) / (hLimitB - hLimitA);
        }

        // vScroll
        if (this._vertical) {
            var vLimitA = -bBox.height + Entry.BOARD_PADDING,
                vLimitB = bHeight - Entry.BOARD_PADDING;

            var vWidth = (bHeight + 2 * Entry.Scroller.RADIUS) * bBox.height / (vLimitB - vLimitA + bBox.height);
            this.vY = (bBox.y - vLimitA) / (vLimitB - vLimitA) * (bHeight - vWidth - 2 * Entry.Scroller.RADIUS);
            this.vScrollbar.attr({
                height: vWidth,
                y: this.vY,
                x: bWidth - 2 * Entry.Scroller.RADIUS
            });

            this.vRatio = (bHeight - vWidth - 2 * Entry.Scroller.RADIUS) / (vLimitB - vLimitA);
        }
    };

    p._bindEvent = function () {
        var dResizeScrollBar = Entry.Utils.debounce(this.resizeScrollBar, 250);
        this.board.changeEvent.attach(this, dResizeScrollBar);
        if (Entry.windowResized) Entry.windowResized.attach(this, dResizeScrollBar);
    };
})(Entry.Scroller.prototype);

/***/ }),

/***/ "./src/playground/skeleton.js":
/*!************************************!*\
  !*** ./src/playground/skeleton.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


/*
 *
 */

Entry.skeleton = function () {};

Entry.skeleton.basic = {
    path: function path(blockView) {
        var width = blockView.contentWidth;
        var height = blockView.contentHeight;
        height = Math.max(30, height + 2);
        width = Math.max(0, width + 9 - height / 2);
        var halfHeight = height / 2;

        return "m -8,0 l 8,8 8,-8 h " + width + " a " + halfHeight + "," + halfHeight + " 0 0,1 0," + height + " h -" + width + " l -8,8 -8,-8 v -" + height + " z";
    },
    box: function box(blockView) {
        var width = blockView ? blockView.contentWidth : 150;
        var height = blockView ? blockView.contentHeight : 28;
        return {
            offsetX: -8, offsetY: 0,
            width: width + 30,
            height: Math.max(30, height + 2),
            marginBottom: 0
        };
    },
    magnets: function magnets(blockView) {
        // apply scale required.
        var height = blockView ? Math.max(blockView.height, 30) : 30;
        return {
            previous: { x: 0, y: 0 },
            next: { x: 0, y: height + 1 + blockView.offsetY }
        };
    },
    contentPos: function contentPos(blockView) {
        // apply scale required.
        var height = Math.max(blockView.contentHeight, 28);
        return { x: 14, y: height / 2 + 1 };
    }
};

Entry.skeleton.basic_create = {
    path: function path(blockView) {
        var width = blockView.contentWidth;
        var height = blockView.contentHeight;
        height = Math.max(30, height + 2);
        width = Math.max(0, width + 9 - height / 2);
        return "m -8,0 l 16,0 h %w a %h,%h 0 0,1 0,%wh h -%w l -8,8 -8,-8 v -%wh z".replace(/%wh/gi, height).replace(/%w/gi, width).replace(/%h/gi, height / 2);
    },
    box: function box(blockView) {
        var width = blockView ? blockView.contentWidth : 150;
        var height = blockView ? blockView.contentHeight : 28;
        return {
            offsetX: -8, offsetY: 0,
            width: width + 30,
            height: Math.max(30, height + 2),
            marginBottom: 0
        };
    },
    magnets: function magnets(blockView) {
        // apply scale required.
        var height = blockView ? Math.max(blockView.height, 30) : 30;
        return {
            next: { x: 0, y: height + 1 + blockView.offsetY }
        };
    },
    contentPos: function contentPos(blockView) {
        // apply scale required.
        var height = Math.max(blockView.contentHeight, 28);
        return { x: 14, y: height / 2 + 1 };
    }
};

Entry.skeleton.basic_event = {
    path: function path(blockView) {
        var width = blockView.contentWidth;
        width = Math.max(0, width);
        width -= 30;

        return "m -8,0 m 0,-5 a 19.5,19.5 0, 0,1 16,0 c 10,5 15,5 20,5 h " + width + " " + "a 15,15 0 0,1 0,30 H 8 l -8,8 -8,-8 l 0,0.5 a 19.5,19.5 0, 0,1 0,-35 z";
    },
    box: function box(blockView) {
        return {
            offsetX: -19, offsetY: -7,
            width: blockView.contentWidth + 30,
            height: 30,
            marginBottom: 0
        };
    },
    magnets: function magnets(blockView) {
        // apply scale required.
        var height = blockView ? Math.max(blockView.height + blockView.offsetY + 7, 30) : 30;
        return {
            next: { x: 0, y: height + 1 }
        };
    },
    contentPos: function contentPos(blockView) {
        // apply scale required.
        return { x: 1, y: 15 };
    }
};

Entry.skeleton.basic_loop = {
    path: function path(blockView) {
        var width = blockView.contentWidth;
        var height = blockView.contentHeight;
        height = Math.max(30, height + 2);
        width = Math.max(0, width + 9 - height / 2);
        var statementHeight = blockView._statements[0] ? blockView._statements[0].height : 20;
        statementHeight = Math.max(statementHeight, 20) + 1;
        var bw = width - 8;
        var halfHeight = height / 2;

        return "m -8,0 l 8,8 8,-8 h " + width + " a " + halfHeight + "," + halfHeight + " 0 0,1 0," + height + " H 24 l -8,8 -8,-8 h -0.4 v " + statementHeight + " h 0.4 l 8,8 8,-8 h " + bw + " a 8,8 0 0,1 0,16 H 8 l -8,8 -8,-8 z";
    },
    magnets: function magnets(blockView) {
        var contentHeight = Math.max(blockView.contentHeight + 2, 30);
        var statementHeight = blockView._statements[0] ? blockView._statements[0].height : 20;
        statementHeight = Math.max(statementHeight, 20);
        return {
            previous: { x: 0, y: 0 },
            next: { x: 0, y: statementHeight + contentHeight + 18 + blockView.offsetY }
        };
    },
    box: function box(blockView) {
        var contentWidth = blockView.contentWidth;
        var contentHeight = Math.max(blockView.contentHeight + 2, 30);
        var statementHeight = blockView._statements[0] ? blockView._statements[0].height : 20;
        statementHeight = Math.max(statementHeight, 20);
        return {
            offsetX: -8, offsetY: 0,
            width: contentWidth + 30,
            height: contentHeight + statementHeight + 17,
            marginBottom: 0
        };
    },
    statementPos: function statementPos(blockView) {
        var height = Math.max(30, blockView.contentHeight + 2) + 1;
        return [{ x: 16, y: height }];
    },
    contentPos: function contentPos(blockView) {
        // apply scale required.
        var height = Math.max(blockView.contentHeight, 28);
        return { x: 14, y: height / 2 + 1 };
    }
};

Entry.skeleton.basic_define = {
    path: function path(blockView) {
        var width = blockView.contentWidth;
        var height = blockView.contentHeight;
        height = Math.max(30, height + 2);
        width = Math.max(0, width + 9 - height / 2);
        var statementHeight = blockView._statements[0] ? blockView._statements[0].height : 30;
        statementHeight = Math.max(statementHeight, 20);
        return "m -8,0 l 16,0 h %w a %h,%h 0 0,1 0,%wh H 24 l -8,8 -8,-8 h -0.4 v %sh h 0.4 l 8,8 8,-8 h %bw a 8,8 0 0,1 0,16 H -8 z".replace(/%wh/gi, height).replace(/%w/gi, width).replace(/%h/gi, height / 2).replace(/%bw/gi, width - 8).replace(/%sh/gi, statementHeight + 1);
    },
    magnets: function magnets() {
        return {};
    },
    box: function box(blockView) {
        var contentWidth = blockView.contentWidth;
        var contentHeight = Math.max(blockView.contentHeight, 25);
        return {
            offsetX: 0, offsetY: 0,
            width: contentWidth,
            height: contentHeight + 46,
            marginBottom: 0
        };
    },
    statementPos: function statementPos(blockView) {
        var height = Math.max(30, blockView.contentHeight + 2);
        return [{
            x: 16, y: height
        }];
    },
    contentPos: function contentPos() {
        // apply scale required.
        return { x: 14, y: 15 };
    }
};

Entry.skeleton.pebble_event = {
    path: function path(blockView) {
        var width = blockView.contentWidth;
        return "m 0,0 a 25,25 0 0,1 9,48.3 a 9,9 0 0,1 -18,0 a 25,25 0 0,1 9,-48.3 z";
    },
    box: function box(blockView) {
        return {
            offsetX: -25, offsetY: 0,
            width: 50,
            height: 48.3,
            marginBottom: 0
        };
    },
    magnets: function magnets(blockView) {
        // apply scale required.
        var height = blockView ? Math.max(blockView.height, 49.3) : 49.3;
        return {
            next: { x: 0, y: height + blockView.offsetY }
        };
    },
    contentPos: function contentPos() {
        // apply scale required.
        return { x: 0, y: 25 };
    }
};

Entry.skeleton.pebble_loop = {
    fontSize: 16,
    dropdownHeight: 23,
    path: function path(blockView) {
        var contentWidth = 124;
        var contentHeight = Math.max(blockView.contentHeight, 50);
        var statementHeight = Math.max(blockView._statements[0] ? blockView._statements[0].height : 50, 50);
        return ("M 0,9 a 9,9 0 0,0 9,-9 h %cw q 25,0 25,25 v %ch q 0,25 -25,25 h -%cw a 9,9 0 0,1 -18,0 " + "h -%cw q -25,0 -25,-25 v -%ch q 0,-25 25,-25 h %cw a 9,9 0 0,0 9,9 " + "M 0,49 a 9,9 0 0,1 -9,-9 h -28 a 25,25 0 0,0 -25,25 v %cih a 25,25 0 0,0 25,25 h 28 a 9,9 0 0,0 18,0 " + "h 28 a 25,25 0 0,0 25,-25 v -%cih a 25,25 0 0,0 -25,-25 h -28 a 9,9 0 0,1 -9,9 z").replace(/%cw/gi, contentWidth / 2 - 21).replace(/%ch/gi, statementHeight + 4).replace(/%cih/gi, statementHeight - 50);
    },
    magnets: function magnets(blockView) {
        var contentHeight = Math.max(blockView.contentHeight + 2, 41);
        var statementHeight = blockView._statements[0] ? blockView._statements[0].height : 20;
        statementHeight = Math.max(statementHeight, 51);
        return {
            previous: { x: 0, y: 0 },
            next: { x: 0, y: statementHeight + contentHeight + 13 + blockView.offsetY }
        };
    },
    box: function box(blockView) {
        var contentWidth = blockView.contentWidth;
        var contentHeight = Math.max(blockView.contentHeight + 2, 41);
        var statementHeight = blockView._statements[0] ? blockView._statements[0].height : 20;
        statementHeight = Math.max(statementHeight, 51);
        return {
            offsetX: -(contentWidth / 2 + 13), offsetY: 0,
            width: contentWidth + 30,
            height: contentHeight + statementHeight + 13,
            marginBottom: 0
        };
    },
    statementPos: function statementPos(blockView) {
        var height = Math.max(39, blockView.contentHeight + 2) + 1.5;
        return [{ x: 0, y: height }];
    },
    contentPos: function contentPos() {
        // apply scale required.
        return { x: -46, y: 25 };
    }
};

Entry.skeleton.pebble_basic = {
    fontSize: 15,
    morph: ["prev", "next"],
    path: function path(blockView) {
        return "m 0,9 a 9,9 0 0,0 9,-9 h 28 " + "q 25,0 25,25" + "q 0,25 -25,25" + "h -28 a 9,9 0 0,1 -18,0 h -28 " + "q -25,0 -25,-25" + "q 0,-25 25,-25" + "h 28 a 9,9 0 0,0 9,9 z";
    },
    //path: function(blockView) {
    //var block = blockView.block;
    //var prev = block.getPrevBlock();
    //var next = block.getNextBlock();
    //var isPrevSame = prev && prev._schema.skeleton === "pebble_basic";
    //var isNextSame = next && next._schema.skeleton === "pebble_basic";


    //return "m 0,9 a 9,9 0 0,0 9,-9 h 28 " +
    //(isPrevSame ? "l 25,0 0,25" : "q 25,0 25,25") +
    //(isNextSame ? "l 0,25 -25,0" : "q 0,25 -25,25") +
    //"h -28 a 9,9 0 0,1 -18,0 h -28 " +
    //(isNextSame ? "l -25,0 0,-25" : "q -25,0 -25,-25") +
    //(isPrevSame ? "l 0,-25 25,0" : "q 0,-25 25,-25") +
    //"h 28 a 9,9 0 0,0 9,9 z";
    //},
    magnets: function magnets(blockView) {
        // apply scale required.
        var height = blockView ? Math.max(blockView.height, 51) : 51;
        return {
            previous: { x: 0, y: 0 },
            next: { x: 0, y: height + blockView.offsetY }
        };
    },
    box: function box() {
        return {
            offsetX: -62, offsetY: 0,
            width: 124,
            height: 50,
            marginBottom: 0
        };
    },
    contentPos: function contentPos() {
        // apply scale required.
        return { x: -46, y: 25 };
    }
};

Entry.skeleton.basic_string_field = {
    path: function path(blockView) {
        var width = blockView.contentWidth;
        var height = blockView.contentHeight;
        height = Math.max(18, height + 2);
        width = Math.max(0, width - height + 12);
        var halfHeight = height / 2;

        return "m " + halfHeight + ",0 h " + width + " a " + halfHeight + "," + halfHeight + " 0 1,1 0," + height + " H " + halfHeight + " A " + halfHeight + "," + halfHeight + " 0 1,1 " + halfHeight + ",0 z";
    },
    color: "#000",
    outerLine: '#768dce',
    box: function box(blockView) {
        var width = blockView ? blockView.contentWidth : 5;
        var height = blockView ? blockView.contentHeight : 18;
        return {
            offsetX: 0, offsetY: 0,
            width: width + 12,
            height: Math.max(height + 2, 18),
            marginBottom: 0
        };
    },
    magnets: function magnets() {
        return {
            string: {}
        };
    },
    contentPos: function contentPos(blockView) {
        // apply scale required.
        var height = Math.max(blockView.contentHeight, 16);
        return { x: 6, y: height / 2 + 1 };
    }
};

Entry.skeleton.basic_boolean_field = {
    path: function path(blockView) {
        var width = blockView.contentWidth;
        var height = blockView.contentHeight;
        height = Math.max(18, height + 2);
        width = Math.max(0, width - height + 19);
        var halfHeight = height / 2;

        return "m " + halfHeight + ",0 h " + width + " l " + halfHeight + "," + halfHeight + " -" + halfHeight + "," + halfHeight + " H " + halfHeight + " l -" + halfHeight + ",-" + halfHeight + " " + halfHeight + ",-" + halfHeight + " z";
    },
    color: "#000",
    outerLine: '#768dce',
    box: function box(blockView) {
        var width = blockView ? blockView.contentWidth : 5;
        var height = blockView ? blockView.contentHeight : 18;
        return {
            offsetX: 0, offsetY: 0,
            width: width + 19,
            height: Math.max(height + 2, 18),
            marginBottom: 0
        };
    },
    magnets: function magnets() {
        return {
            boolean: {}
        };
    },
    contentPos: function contentPos(blockView) {
        // apply scale required.
        var height = Math.max(blockView.contentHeight, 16);
        return { x: 10, y: height / 2 + 1 };
    }
};

Entry.skeleton.basic_param = {
    path: function path(blockView) {
        var width = blockView.contentWidth;
        var output = blockView._contents[blockView._contents.length - 1];
        if (output) width -= output.box.width + Entry.BlockView.PARAM_SPACE - 2;
        width = Math.max(0, width);
        return ("m 4,0 h 10 h %w l 2,2 0,3 3,0 1,1 0,12 -1,1 -3,0 0,3 -2,2" + "h -%w h -10 l -2,-2 0,-3 3,0 1,-1 0,-12 -1,-1 -3,0 0,-3 2,-2").replace(/%w/gi, width);
    },
    outerLine: '#768dce',
    box: function box(blockView) {
        var width = blockView ? blockView.contentWidth : 5;
        return {
            offsetX: 0, offsetY: 0,
            width: width + 11,
            height: 24,
            marginBottom: 0
        };
    },
    magnets: function magnets() {
        return {
            param: {}
        };
    },
    contentPos: function contentPos(blockView) {
        // apply scale required.
        return { x: 11, y: 12 };
    }
};

Entry.skeleton.basic_button = {
    path: function path() {
        return "m -64,0 h 128 a 6,6 0, 0,1 6,6 v 18 a 6,6 0, 0,1 -6,6 h -128 a 6,6 0, 0,1 -6,-6 v -18 a 6,6 0, 0,1 6,-6 z";
    },
    box: function box() {
        return {
            offsetX: -80, offsetY: 0,
            width: 140,
            height: 30
        };
    },
    contentPos: function contentPos() {
        // apply scale required.
        return { x: 0, y: 15 };
    },
    movable: false,
    readOnly: true,
    nextShadow: true,
    classes: ['basicButtonView']
};

Entry.skeleton.basic_without_next = {
    box: Entry.skeleton.basic.box,
    contentPos: Entry.skeleton.basic.contentPos,
    path: function path(blockView) {
        var width = blockView.contentWidth;
        var height = blockView.contentHeight;
        height = Math.max(30, height + 2);
        width = Math.max(0, width + 9 - height / 2);
        var halfHeight = height / 2;

        return "m -8,0 l 8,8 8,-8 h " + width + " a " + halfHeight + "," + halfHeight + " 0 0,1 0, " + height + " H -8 z";
    },
    magnets: function magnets(blockView) {
        // apply scale required.
        var height = blockView ? Math.max(blockView.height, 30) : 30;
        return {
            previous: { x: 0, y: 0 }
        };
    }
};

Entry.skeleton.basic_double_loop = {
    path: function path(blockView) {
        var width = blockView.contentWidth;
        var height1 = blockView.contentHeight % 1000000;
        var height2 = Math.floor(blockView.contentHeight / 1000000);
        height1 = Math.max(30, height1 + 2);
        height2 = Math.max(30, height2 + 2);
        width = Math.max(0, width + 5 - height1 / 2);
        var statements = blockView._statements;
        var statementHeight1 = statements[0] ? statements[0].height : 20;
        var statementHeight2 = statements[1] ? statements[1].height : 20;
        var bw = width - 8;
        var halfHeight1 = height1 / 2;
        var halfHeight2 = height2 / 2;

        statementHeight1 = Math.max(statementHeight1, 20) + 1;
        statementHeight2 = Math.max(statementHeight2, 20) + 1;

        return "m -8,0 l 8,8 8,-8 h " + width + " a " + halfHeight1 + "," + halfHeight1 + " 0 0,1 0," + height1 + " H 24 l -8,8 -8,-8 h -0.4 v " + statementHeight1 + " h 0.4 l 8,8 8,-8 h " + bw + " a " + halfHeight2 + "," + halfHeight2 + " 0 0,1 0," + height2 + " H 24 l -8,8 -8,-8 h -0.4 v " + statementHeight2 + " h 0.4 l 8,8 8,-8 h " + bw + " a 8,8 0 0,1 0,16 H 8 l -8,8 -8,-8 z";
    },
    magnets: function magnets(blockView) {
        var contentHeight1 = Math.max(blockView.contentHeight % 1000000 + 2, 30);
        var contentHeight2 = Math.max(Math.floor(blockView.contentHeight / 1000000) + 2, 30);
        var statementHeight1 = blockView._statements[0] ? blockView._statements[0].height : 20;
        var statementHeight2 = blockView._statements[1] ? blockView._statements[1].height : 20;
        statementHeight1 = Math.max(statementHeight1, 20);
        statementHeight2 = Math.max(statementHeight2, 20);
        return {
            previous: { x: 0, y: 0 },
            next: {
                x: 0,
                y: statementHeight1 + statementHeight2 + contentHeight1 + contentHeight2 + 19 + blockView.offsetY
            }
        };
    },
    box: function box(blockView) {
        var contentWidth = blockView.contentWidth;
        var contentHeight1 = Math.max(Math.floor(blockView.contentHeight / 1000000) + 2, 30);
        var contentHeight2 = Math.max(blockView.contentHeight % 1000000 + 2, 30);
        var statementHeight1 = blockView._statements[0] ? blockView._statements[0].height % 1000000 : 20;
        var statementHeight2 = blockView._statements[1] ? blockView._statements[1].height : 20;
        statementHeight1 = Math.max(statementHeight1, 20);
        statementHeight2 = Math.max(statementHeight2, 20);
        return {
            offsetX: -8, offsetY: 0,
            width: contentWidth + 30,
            height: contentHeight1 + contentHeight2 + statementHeight1 + statementHeight2 + 17,
            marginBottom: 0
        };
    },
    statementPos: function statementPos(blockView) {
        var statementHeight1 = blockView._statements[0] ? blockView._statements[0].height % 1000000 : 20;
        var height1 = Math.max(30, blockView.contentHeight % 1000000 + 2) + 1;
        var height2 = height1 + Math.max(statementHeight1, 20) + Math.max(Math.floor(blockView.contentHeight / 1000000) + 2, 30) + 1;

        return [{ x: 16, y: height1 }, { x: 16, y: height2 }];
    },
    contentPos: function contentPos(blockView) {
        // apply scale required.
        var height = Math.max(blockView.contentHeight % 1000000, 28);
        return { x: 14, y: height / 2 + 1 };
    }
};

/***/ }),

/***/ "./src/playground/skinner.js":
/*!***********************************!*\
  !*** ./src/playground/skinner.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


Entry.skinContainer = {
    _skins: {}
};

(function (p) {
    p.skinSchema = {
        type: '',
        condition: []
    };

    p.loadSkins = function (skins) {
        skins.map(this.addSkin.bind(this));
    };

    p.addSkin = function (skin) {
        var blockSkin = function blockSkin() {};
        var blockPrototype = Entry.block[skin.type];
        blockSkin.prototype = blockPrototype;
        blockSkin = new blockSkin();

        for (var key in skin) {
            blockSkin[key] = skin[key];
        }if (!this._skins[skin.type]) this._skins[skin.type] = [];

        this._skins[skin.type].push(blockSkin);
    };

    p.getSkin = function (block) {
        if (this._skins[block.type]) {
            var candidates = this._skins[block.type];
            for (var i = 0; i < candidates.length; i++) {
                var candidate = candidates[i];
                if (!candidate.conditions || !candidate.conditions.length) return candidate;
                for (var j = 0; j < candidate.conditions.length; j++) {
                    var condition = candidate.conditions[j];
                    if (block.getDataByPointer(condition.pointer) !== condition.value)
                        // here
                        break;
                    if (j === candidate.conditions.length - 1) return candidate;
                }
            }
        }

        return Entry.block[block.type];
    };
})(Entry.skinContainer);

/***/ }),

/***/ "./src/playground/thread.js":
/*!**********************************!*\
  !*** ./src/playground/thread.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


/*
 *
 */

Entry.Thread = function (thread, code, parent) {
    this._data = new Entry.Collection();
    this._code = code;
    this.changeEvent = new Entry.Event(this);
    this.changeEvent.attach(this, this.handleChange);
    this._event = null;
    this.parent = parent ? parent : code;

    this.load(thread);
};

(function (p) {
    p.load = function (thread, mode) {
        if (thread === undefined || thread === null) thread = [];
        if (!(thread instanceof Array)) {
            return console.error('thread must be array');
        }

        for (var i = 0; i < thread.length; i++) {
            var block = thread[i];
            if (block instanceof Entry.Block || block.isDummy) {
                block.setThread(this);
                this._data.push(block);
            } else this._data.push(new Entry.Block(block, this));
        }

        var codeView = this._code.view;
        if (codeView) this.createView(codeView.board, mode);
    };

    p.registerEvent = function (block, eventType) {
        this._event = eventType;
        this._code.registerEvent(block, eventType);
    };

    p.unregisterEvent = function (block, eventType) {
        this._code.unregisterEvent(block, eventType);
    };

    p.createView = function (board, mode) {
        if (!this.view) this.view = new Entry.ThreadView(this, board);
        this._data.getAll().forEach(function (b) {
            b.createView(board, mode);
        });
    };

    p.destroyView = function () {
        this.view = null;
        this._data.map(function (b) {
            b.destroyView();
        });
    };

    p.separate = function (block, count, index) {
        if (!this._data.has(block.id)) return;

        var blocks = this._data.splice(this._data.indexOf(block), count);
        this._code.createThread(blocks, index);
        this.changeEvent.notify();
    };

    p.cut = function (block) {
        var index = this._data.indexOf(block);
        var splicedData = this._data.splice(index);
        this.changeEvent.notify();
        return splicedData;
    };

    p.insertByBlock = function (block, newBlocks) {
        var index = block ? this._data.indexOf(block) : -1;
        for (var i = 0; i < newBlocks.length; i++) {
            newBlocks[i].setThread(this);
        }
        this._data.splice.apply(this._data, [index + 1, 0].concat(newBlocks));
        this.changeEvent.notify();
    };

    p.insertToTop = function (newBlock) {
        newBlock.setThread(this);
        this._data.unshift.apply(this._data, [newBlock]);
        this.changeEvent.notify();
    };

    p.clone = function (code, mode) {
        var code = code || this._code;
        var newThread = new Entry.Thread([], code);
        var data = this._data;
        var cloned = [];
        for (var i = 0, len = data.length; i < len; i++) {
            var block = data[i];
            cloned.push(data[i].clone(newThread));
        }
        newThread.load(cloned, mode);
        return newThread;
    };

    p.toJSON = function (isNew, index, excludeData, option) {
        var array = [];

        if (index === undefined) index = 0;else if (index instanceof Entry.Block) index = this.indexOf(index);

        var data = this._data;
        for (index; index < data.length; index++) {
            var block = data[index];
            if (block instanceof Entry.Block) array.push(block.toJSON(isNew, excludeData, option));
        }
        return array;
    };

    p.destroy = function (animate, isNotForce) {
        if (this.view) this.view.destroy(animate);

        var blocks = this._data;

        for (var i = blocks.length - 1; i >= 0; i--) {
            blocks[i].destroy(animate, null, isNotForce);
        }!blocks.length && this._code.destroyThread(this, false);
    };

    p.getBlock = function (index) {
        return this._data[index];
    };

    p.getBlocks = function () {
        return this._data.map(function (b) {
            return b;
        });
    };

    p.countBlock = function () {
        var count = 0;
        for (var i = 0; i < this._data.length; i++) {
            var block = this._data[i];
            if (!block.type) continue;
            count++;

            var statements = block.statements;
            if (statements) {
                for (var j = 0; j < statements.length; j++) {
                    var statement = statements[j];
                    count += statement.countBlock();
                }
            }
        }
        return count;
    };

    p.handleChange = function () {
        if (this._data.length === 0) this.destroy();
    };

    p.getCode = function () {
        return this._code;
    };

    p.setCode = function (code) {
        this._code = code;
    };

    p.spliceBlock = function (block) {
        this._data.remove(block);
        this.changeEvent.notify();
    };

    p.getFirstBlock = function () {
        return this._data[0];
    };

    p.getPrevBlock = function (block) {
        var index = this._data.indexOf(block);
        return this._data.at(index - 1);
    };

    p.getNextBlock = function (block) {
        var index = this._data.indexOf(block);
        return this._data.at(index + 1);
    };

    p.getLastBlock = function () {
        return this._data.at(this._data.length - 1);
    };

    p.getRootBlock = function () {
        return this._data.at(0);
    };

    p.hasBlockType = function (type) {
        for (var i = 0; i < this._data.length; i++) {
            if (inspectBlock(this._data[i])) return true;
        }return false;

        function inspectBlock(block) {
            if (type == block.type) return true;

            var params = block.params;
            for (var k = 0; k < params.length; k++) {
                var param = params[k];
                if (param && param.constructor == Entry.Block) {
                    if (inspectBlock(param)) return true;
                }
            }
            var statements = block.statements;
            if (statements) {
                for (var j = 0; j < statements.length; j++) {
                    if (statements[j].hasBlockType(type)) return true;
                }
            }
            return false;
        }
    };

    p.getCount = function (startBlock) {
        var result = this._data.length;
        if (startBlock) result -= this._data.indexOf(startBlock);
        return result;
    };

    p.indexOf = function (block) {
        return this._data.indexOf(block);
    };

    p.pointer = function (pointer, block) {
        pointer = pointer || [];
        if (block) pointer.unshift(this.indexOf(block));

        var parent = this.parent;

        if (parent instanceof Entry.Block) pointer.unshift(parent.indexOfStatements(this));

        if (this._code === parent) {
            pointer.unshift(this._code.indexOf(this));
            var topBlock = this._data[0];
            pointer.unshift(topBlock.y);
            pointer.unshift(topBlock.x);
            return pointer;
        }
        return parent.pointer(pointer);
    };

    p.getBlockList = function (excludePrimitive, type) {
        var blocks = [];
        for (var i = 0; i < this._data.length; i++) {
            var block = this._data[i];
            if (block.constructor !== Entry.Block) continue;
            blocks = blocks.concat(block.getBlockList(excludePrimitive, type));
        }

        return blocks;
    };

    p.stringify = function (excludeData) {
        return JSON.stringify(this.toJSON(undefined, undefined, excludeData));
    };

    p.isInOrigin = function () {
        var block = this.getFirstBlock();
        return block && block.isInOrigin();
    };

    p.getDom = function (query) {
        if (query.length > 0) {
            var key = query.shift();
            if (key === 'magnet') return this.view.getMagnet('next');
        } else {
            return this.view.svgGroup;
        }
    };

    p.isParamBlockType = function () {
        return false;
    };

    p.isGlobal = function () {
        return this._code === this.parent;
    };
})(Entry.Thread.prototype);

/***/ }),

/***/ "./src/playground/thread_view.js":
/*!***************************************!*\
  !*** ./src/playground/thread_view.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


/*
 *
 */

Entry.ThreadView = function (thread, board) {
    Entry.Model(this, false);

    this.thread = thread;

    this.svgGroup = board.svgThreadGroup.elem('g');

    this.board = board;

    this.parent = board; // statement

    this._hasGuide = false;
};

(function (p) {
    p.schema = {
        height: 0,
        zIndex: 0
    };

    p.destroy = function () {
        this.svgGroup.remove();
    };

    p.setParent = function (parent) {
        this.parent = parent;
    };

    p.getParent = function () {
        return this.parent;
    };

    p.renderText = function () {
        var blocks = this.thread.getBlocks();
        for (var i = 0; i < blocks.length; i++) {
            blocks[i].view.renderText();
        }
    };

    p.renderBlock = function () {
        var blocks = this.thread.getBlocks();
        for (var i = 0; i < blocks.length; i++) {
            blocks[i].view.renderBlock();
        }
    };

    p.requestAbsoluteCoordinate = function (blockView) {
        var blocks = this.thread.getBlocks();
        var block = blocks.shift();
        var pos = {
            x: 0,
            y: 0
        };
        var parent = this.parent;
        if (!(parent instanceof Entry.Board || parent instanceof Entry.BlockMenu) && parent.requestAbsoluteCoordinate) {
            pos = parent.requestAbsoluteCoordinate();
        }

        while (block && block.view !== blockView && block.view) {
            var prevBlockView = block.view;
            pos.x += prevBlockView.x + prevBlockView.magnet.next.x;
            pos.y += prevBlockView.y + prevBlockView.magnet.next.y;
            block = blocks.shift();
        }
        return pos;
    };

    p.requestPartHeight = function (blockView, forAll) {
        var blocks = this.thread.getBlocks();
        var block = blocks.pop();
        var height = blockView ? blockView.magnet.next ? blockView.magnet.next.y : blockView.height : 0;
        while (block && block.view !== blockView && block.view) {
            var prevBlockView = block.view;
            if (prevBlockView.magnet.next) height += prevBlockView.magnet.next.y;else height += prevBlockView.height;
            if (prevBlockView.dragMode === Entry.DRAG_MODE_DRAG) height = 0;
            block = blocks.pop();
        }
        return height;
    };

    p.getMagnet = function (selector) {
        return {
            getBoundingClientRect: function () {
                var halfWidth = 20,
                    coord = this.parent.requestAbsoluteCoordinate(),
                    boardOffset = this.board.relativeOffset;
                return {
                    top: coord.y + boardOffset.top - halfWidth,
                    left: coord.x + boardOffset.left - halfWidth,
                    width: 2 * halfWidth,
                    height: 2 * halfWidth
                };
            }.bind(this)
        };
    };

    p.dominate = function () {
        !this._hasGuide && this.parent.dominate(this.thread);
    };

    p.isGlobal = function () {
        return this.parent instanceof Entry.Board;
    };

    p.reDraw = function () {
        var blocks = this.thread._data;

        for (var i = blocks.length - 1; i >= 0; i--) {
            var b = blocks[i];
            if (b.view) b.view.reDraw();else b.createView(this.thread._code.view.board);
        }
    };

    p.setZIndex = function (zIndex) {
        this.set({ zIndex: zIndex });
    };

    p.setHasGuide = function (bool) {
        this._hasGuide = bool;
    };

    p.getFields = function () {
        var BLOCK = Entry.Block;

        return this.thread.getBlocks().reduce(function (fields, block) {
            if (!(block instanceof BLOCK)) {
                return fields;
            }

            return fields.concat(block.view.getFields());
        }, []);
    };
})(Entry.ThreadView.prototype);

/***/ }),

/***/ "./src/playground/trashcan.js":
/*!************************************!*\
  !*** ./src/playground/trashcan.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.FieldTrashcan = function (board) {
    if (board) this.setBoard(board);

    this.dragBlock = null;
    this.dragBlockObserver = null;
    this.isOver = false;

    if (Entry.windowResized) Entry.windowResized.attach(this, this.setPosition);
};

(function (p) {
    p._generateView = function () {
        this.svgGroup = this.board.svg.elem('g');
        this.renderStart();
        this._addControl();
    };

    p.renderStart = function () {
        var path = Entry.mediaFilePath + 'delete_';
        this.trashcanTop = this.svgGroup.elem('image', {
            href: path + 'cover.png',
            width: 60,
            height: 20
        });

        this.svgGroup.elem('image', {
            href: path + 'body.png',
            y: 20,
            width: 60,
            height: 60
        });
    };

    p._addControl = function () {
        var that = this;
        $(this.svgGroup).bind('mousedown', function (e) {
            if (Entry.Utils.isRightButton(e)) {
                e.stopPropagation();
                $('#entryWorkspaceBoard').css('background', 'white');
            }
        });
    };

    p.updateDragBlock = function () {
        var block = this.board.dragBlock;
        var observer = this.dragBlockObserver;

        if (observer) {
            observer.destroy();
            this.dragBlockObserver = null;
        }

        if (block) {
            this.dragBlockObserver = block.observe(this, 'checkBlock', ['x', 'y']);
        } else {
            if (this.isOver && this.dragBlock) {
                var prevBlock = this.dragBlock.block.getPrevBlock();
                if (!prevBlock) {
                    Entry.do('destroyThread', this.dragBlock.block.thread, 'trashcan').isPass(true, true);
                    createjs.Sound.play('entryDelete');
                }
            }
            this.tAnimation(false);
        }
        this.dragBlock = block;
    };

    p.checkBlock = function () {
        var dragBlock = this.dragBlock;
        if (!dragBlock || !dragBlock.block.isDeletable()) return;

        var boardOffset = this.board.offset();
        var position = this.getPosition();
        var trashcanX = position.x + boardOffset.left;
        var trashcanY = position.y + boardOffset.top;

        var mouseX, mouseY;
        var instance = dragBlock.dragInstance;
        if (instance) {
            mouseX = instance.offsetX;
            mouseY = instance.offsetY;
        }
        var isOver = mouseX >= trashcanX && mouseY >= trashcanY;
        this.tAnimation(isOver);
    };

    p.align = function () {
        var position = this.getPosition();
        var transform = 'translate(' + position.x + ',' + position.y + ')';

        this.svgGroup.attr({
            transform: transform
        });
    };

    p.setPosition = function () {
        if (!this.board) return;
        var svgDom = this.board.svgDom;
        this._x = svgDom.width() - 110;
        this._y = svgDom.height() - 110;
        this.align();
    };

    p.getPosition = function () {
        return {
            x: this._x,
            y: this._y
        };
    };

    p.tAnimation = function (isOver) {
        if (isOver === this.isOver) return;

        isOver = isOver === undefined ? true : isOver;
        var animation;
        var trashTop = this.trashcanTop;
        if (isOver) animation = {
            translateX: 15,
            translateY: -25,
            rotateZ: 30
        };else animation = {
            translateX: 0,
            translateY: 0,
            rotateZ: 0
        };

        $(trashTop).velocity(animation, { duration: 50 });
        this.isOver = isOver;
    };

    p.setBoard = function (board) {
        if (this._dragBlockObserver) this._dragBlockObserver.destroy();
        this.board = board;
        if (!this.svgGroup) this._generateView();

        //control z-index
        var svg = board.svg;
        var firstChild = svg.firstChild;
        if (firstChild) svg.insertBefore(this.svgGroup, firstChild);else svg.appendChild(this.svgGroup);

        this._dragBlockObserver = board.observe(this, 'updateDragBlock', ['dragBlock']);
        this.svgGroup.attr({
            filter: 'url(#entryTrashcanFilter_' + board.suffix + ')'
        });
        this.setPosition();
    };
})(Entry.FieldTrashcan.prototype);

/***/ }),

/***/ "./src/playground/vim.js":
/*!*******************************!*\
  !*** ./src/playground/vim.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Vim = function (dom, textType) {
    //Definition For Textmode
    if (typeof dom === 'string') dom = $('#' + dom);else dom = $(dom);

    if (dom.prop('tagName') !== 'DIV') return console.error('Dom is not div element');

    this._parentView = dom;
    this.createDom(dom);

    this._parser = new Entry.Parser(null, null, this.codeMirror);

    Entry.addEventListener('hwChanged', function (e) {
        if (Entry.hw.hwModule) {
            var name = Entry.hw.hwModule.name;
            name = name[0].toUpperCase() + name.slice(1);
            if (name == 'ArduinoExt') name = 'Arduino';
            Entry.Vim.PYTHON_IMPORT_HW = '\nimport ' + name + '\n';
            Entry.Vim.INEDITABLE_LINE_PY = 4;
        } else {
            Entry.Vim.PYTHON_IMPORT_HW = '';
            Entry.Vim.INEDITABLE_LINE_PY = 3;
        }
    });
};

Entry.Vim.MAZE_MODE = 1;
Entry.Vim.WORKSPACE_MODE = 2;

Entry.Vim.TEXT_TYPE_JS = 0;
Entry.Vim.TEXT_TYPE_PY = 1;

Entry.Vim.PARSER_TYPE_JS_TO_BLOCK = 0;
Entry.Vim.PARSER_TYPE_PY_TO_BLOCK = 1;
Entry.Vim.PARSER_TYPE_BLOCK_TO_JS = 2;
Entry.Vim.PARSER_TYPE_BLOCK_TO_PY = 3;

Entry.Vim.INEDITABLE_LINE_PY = 3;

Entry.Vim.PYTHON_IMPORT_ENTRY = 'import Entry';
Entry.Vim.PYTHON_IMPORT_HW = '';

(function (p) {
    p.createDom = function (dom) {
        var parent, _self, target;
        parent = dom;
        this.view = Entry.Dom('div', {
            parent: parent,
            class: 'entryVimBoard'
        });

        var that = this;

        this.codeMirror = CodeMirror(this.view[0], {
            lineNumbers: true,
            value: '',
            mode: { name: 'javascript', globalVars: true },
            theme: 'default',
            indentUnit: 4,
            indentWithTabs: true,
            styleActiveLine: true,
            extraKeys: {
                'Ctrl-Space': 'autocomplete',
                Tab: function Tab(cm) {
                    var spaces = Array(cm.getOption('indentUnit') + 1).join(' ');
                    cm.replaceSelection(spaces);
                }
            },
            //gutters: ["CodeMirror-linenumbers", "breakpoints"],
            lint: true,
            viewportMargin: 10
        });

        var dShowHint = Entry.Utils.debounce(function () {
            if (Entry.isTextMode) {
                this.codeMirror.showHint({
                    completeSingle: false,
                    globalScope: this._getAssistScope()
                });
            }
        }.bind(this), 250);

        this.codeMirror.on('keydown', function (cm, event) {
            if (Entry && Entry.keyPressed) {
                Entry.keyPressed.notify(event, true);
            }
            if (event.key.length === 1) {
                dShowHint();
            }
        }.bind(this));

        var dClear = Entry.Utils.debounce(function () {
            var input = this.codeMirror.display && this.codeMirror.display.input ? this.codeMirror.display.input : undefined;
            if (input && input.composing) {
                input.poll();
                input.composing.range.clear();
                input.composing = null;
            }
        }.bind(this), 250);

        this.codeMirror.on('keyup', function (cm, event) {
            //i.e composition bug
            dClear();

            if (event.key === 'Backspace') dShowHint();
        }.bind(this));

        this.doc = this.codeMirror.getDoc();

        _self = this;
        target = this.view[0];

        function eventDragEnd(e) {
            var block = e.block;

            if (!block) return;

            var codeMirror = _self.codeMirror;
            var textCode = _self.getCodeToText(block, Entry.Parser.PARSE_BLOCK);

            codeMirror.display.dragFunctions.leave(e);
            codeMirror.display.scroller.dispatchEvent(Entry.Utils.createMouseEvent('mousedown', e));

            var testArr = textCode.split('\n');
            var max = testArr.length - 1;
            var statementCursorLine = _self.doc.getCursor().line;
            testArr.forEach(function (text, i) {
                if (i != max) text += '\n';
                codeMirror.replaceSelection(text);
            });

            //set cursor for statement block
            if (block.statements && block.statements.length) {
                statementCursorLine++;
                codeMirror.setCursor(statementCursorLine);
                if (codeMirror.getLine(statementCursorLine)) {
                    codeMirror.replaceSelection('\n');
                    codeMirror.setCursor(statementCursorLine);
                }
                CodeMirror.commands.indentAuto(codeMirror);
            }

            codeMirror.display.scroller.dispatchEvent(Entry.Utils.createMouseEvent('mouseup', e));
        }

        function eventDragOver(e) {
            _self.codeMirror.display.dragFunctions.over(e);
        }

        target.removeEventListener('dragEnd', eventDragEnd);
        target.removeEventListener('dragOver', eventDragOver);
        target.addEventListener('dragEnd', eventDragEnd);
        target.addEventListener('dragOver', eventDragOver);
    };

    p.hide = function () {
        this.view.addClass('entryRemove');
        this.view.remove();
    };

    p.show = function () {
        this.view.removeClass('entryRemove');
        this._parentView.append(this.view);
    };

    p.clearText = function () {
        this.codeMirror.setValue('');
    };

    p.textToCode = function (textType) {
        var type = textType;
        if (type === Entry.Vim.TEXT_TYPE_JS) {
            this._parserType = Entry.Vim.PARSER_TYPE_JS_TO_BLOCK;
            this._parser.setParser(this._mode, this._parserType, this.codeMirror);
        } else if (type === Entry.Vim.TEXT_TYPE_PY) {
            this._parserType = Entry.Vim.PARSER_TYPE_PY_TO_BLOCK;
            this._parser.setParser(this._mode, this._parserType, this.codeMirror);
        }

        var textCode = this.codeMirror.getValue();
        var cursor = this.doc.getCursor();
        textCode = textCode.replace(/\t/gm, '    ');
        this.codeMirror.setValue(textCode);
        this.doc.setCursor(cursor);
        var code = this._parser.parse(textCode);
        return code;
    };

    p.codeToText = function (code, mode) {
        var codeDescription;
        if (mode) this._mode = mode.runType;

        var textType = mode.textType;
        this._oldParserType = mode.textType;

        if (textType === Entry.Vim.TEXT_TYPE_JS) {
            this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS;
            if (this._oldParserType != this._parserType) this._parser.setParser(this._mode, this._parserType, this.codeMirror);
            this._oldParserType = this._parserType;
        } else if (textType === Entry.Vim.TEXT_TYPE_PY) {
            this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY;
            if (this._oldParserType != this._parserType) this._parser.setParser(this._mode, this._parserType, this.codeMirror);
            this._oldParserType = this._parserType;
        }

        if (Entry.playground) this._currentObject = Entry.playground.object;

        this._parser._hasDeclaration = false;

        if (textType == Entry.Vim.TEXT_TYPE_PY) {
            if (this._currentObject) {
                codeDescription = '# ' + this._currentObject.name + Lang.TextCoding.python_code;
                var textCode = this._parser.parse(code, Entry.Parser.PARSE_GENERAL);

                if (textType === Entry.Vim.TEXT_TYPE_PY) {
                    textCode = codeDescription.concat('\n\n').concat(Entry.Vim.PYTHON_IMPORT_ENTRY).concat(Entry.Vim.PYTHON_IMPORT_HW).concat('\n\n').concat(textCode);
                }
                this.codeMirror.setValue(textCode);
                if (textType == Entry.Vim.TEXT_TYPE_PY) this.codeMirror.getDoc().markText({ line: 0, ch: 0 }, { line: Entry.Vim.INEDITABLE_LINE_PY, ch: 0 }, { readOnly: true, inclusiveLeft: true });

                var doc = this.codeMirror.getDoc();
                doc.setCursor({ line: doc.lastLine() - 1 });
            } else {
                this.clearText();
            }
        } else if (textType == Entry.Vim.TEXT_TYPE_JS) {
            var textCode = this._parser.parse(code, Entry.Parser.PARSE_GENERAL);
            this.codeMirror.setValue(textCode);
            var doc = this.codeMirror.getDoc();
            doc.setCursor({ line: doc.lastLine() - 1 });
        }

        if (Entry.isTextMode) this._parser._onRunError = false;
    };

    p.getCodeToText = function (code, parseType) {
        var textType = this.workspace.oldTextType;

        if (textType === Entry.Vim.TEXT_TYPE_JS) {
            this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS;
            this._parser.setParser(this._mode, this._parserType, this.codeMirror);
        } else if (textType === Entry.Vim.TEXT_TYPE_PY) {
            this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY;
            this._parser.setParser(this._mode, this._parserType, this.codeMirror);
        }

        return parseType ? this._parser.parse(code, parseType) : this._parser.parse(code, Entry.Parser.PARSE_SYNTAX);
    };

    p.setParserAvailableCode = function (blockMenuCode, boardCode) {
        this._parser.setAvailableCode(blockMenuCode, boardCode);
    };

    p.getBlockSyntax = function (datum) {
        var syntax = null;
        var textType = this.workspace.oldTextType;
        if (textType === Entry.Vim.TEXT_TYPE_JS) {
            this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS;
            this._parser.setParser(this._mode, this._parserType, this.codeMirror);
        } else if (textType === Entry.Vim.TEXT_TYPE_PY) {
            this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY;
            this._parser.setParser(this._mode, this._parserType, this.codeMirror);
        }

        if (this._parser._execParser) syntax = this._parser._execParser.searchSyntax(datum);

        return syntax;
    };

    p._getAssistScope = function () {
        var execParser = this._parser._execParser;
        if (execParser && execParser.getAssistScope) return execParser.getAssistScope();
    };
})(Entry.Vim.prototype);

/***/ }),

/***/ "./src/playground/workspace.js":
/*!*************************************!*\
  !*** ./src/playground/workspace.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


Entry.Workspace = function (options) {
    Entry.Model(this, false);

    this.dSetMode = Entry.Utils.debounce(this.setMode, 200);
    this.dReDraw = Entry.Utils.debounce(this.reDraw, 150);

    this.observe(this, '_handleChangeBoard', ['selectedBoard'], false);
    this.trashcan = new Entry.FieldTrashcan();

    this.readOnly = options.readOnly === undefined ? false : options.readOnly;

    this.blockViewMouseUpEvent = new Entry.Event(this);
    this.widgetUpdateEvent = new Entry.Event(this);
    this._blockViewMouseUpEvent = null;
    this.widgetUpdateEveryTime = false;
    this._hoverBlockView = null;

    var option = options.blockMenu;
    if (option) {
        this.blockMenu = new Entry.BlockMenu(option.dom, option.align, option.categoryData, option.scroll, this.readOnly);
        this.blockMenu.workspace = this;
        this.blockMenu.observe(this, '_setSelectedBlockView', ['selectedBlockView'], false);
    }

    option = options.board;
    if (option) {
        option.workspace = this;
        option.readOnly = this.readOnly;
        this.board = new Entry.Board(option);
        this.board.observe(this, '_setSelectedBlockView', ['selectedBlockView'], false);
        this.set({ selectedBoard: this.board });
    }

    option = options.vimBoard;
    if (option) {
        this.vimBoard = new Entry.Vim(option.dom);
        this.vimBoard.workspace = this;
    }

    if (this.board && this.vimBoard) this.vimBoard.hide();

    Entry.GlobalSvg.createDom();

    this.mode = Entry.Workspace.MODE_BOARD;

    this.attachKeyboardCapture();

    // view state change event
    this.changeEvent = new Entry.Event(this);

    Entry.commander.setCurrentEditor('board', this.board);

    if (options.textType !== undefined) this.textType = options.textType;else this.textType = Entry.Vim.TEXT_TYPE_PY;

    this.oldMode = Entry.Workspace.MODE_BOARD;
    this.mode = Entry.Workspace.MODE_BOARD;
};

Entry.Workspace.MODE_BOARD = 0;
Entry.Workspace.MODE_VIMBOARD = 1;
Entry.Workspace.MODE_OVERLAYBOARD = 2;

(function (p) {
    p.schema = {
        selectedBlockView: null,
        selectedBoard: null
    };

    p.getBoard = function () {
        return this.board;
    };

    p.getSelectedBoard = function () {
        return this.selectedBoard;
    };

    p.getBlockMenu = function () {
        return this.blockMenu;
    };

    p.getVimBoard = function () {
        return this.vimBoard;
    };

    p.getMode = function () {
        return this.mode;
    };

    p.setMode = function (mode, message, isForce) {
        if (Entry.options && !Entry.options.textCodingEnable && Entry.Workspace.MODE_VIMBOARD === mode.boardType) {
            return;
        }

        Entry.disposeEvent.notify();

        var playground = Entry.playground;

        if (!isForce && !checkObjectAndAlert(playground && playground.object)) return false; // change mode fail

        if (Entry.Utils.isNumber(mode)) this.mode = mode;else {
            this.mode = mode.boardType;
            this.runType = mode.runType;
            this.textType = mode.textType;
        }

        this.mode = Number(this.mode);
        if (this.oldMode === this.mode) return;

        var VIM = Entry.Vim,
            WORKSPACE = Entry.Workspace,
            blockMenu = this.blockMenu,
            Util = Entry.TextCodingUtil;

        var alert_message;

        switch (this.mode) {
            case WORKSPACE.MODE_VIMBOARD:
                var alert_message = Util.isNamesIncludeSpace();
                if (alert_message) {
                    entrylms.alert(alert_message);
                    var mode = {};
                    mode.boardType = WORKSPACE.MODE_BOARD;
                    mode.textType = -1;
                    Entry.getMainWS().setMode(mode);
                    break;
                }

                alert_message = Util.isNameIncludeNotValidChar();
                if (alert_message) {
                    entrylms.alert(alert_message);
                    var mode = {};
                    mode.boardType = WORKSPACE.MODE_BOARD;
                    mode.textType = -1;
                    Entry.getMainWS().setMode(mode);
                    return;
                }

                alert_message = Util.canConvertTextModeForOverlayMode(Entry.Workspace.MODE_VIMBOARD);
                if (alert_message) {
                    entrylms.alert(alert_message);
                    return;
                }

                try {
                    this.board && this.board.hide();
                    this.overlayBoard && this.overlayBoard.hide();
                    this.set({ selectedBoard: this.vimBoard });
                    this.vimBoard.show();
                    blockMenu.banClass('functionInit', true);
                    this.codeToText(this.board.code, mode);
                    this.oldTextType = this.textType;
                    this.board.clear();
                } catch (e) {
                    this.vimBoard.hide();
                    this.board.show();
                    blockMenu.unbanClass('functionInit');
                    this.set({ selectedBoard: this.board });
                    this.mode = WORKSPACE.MODE_BOARD;
                    mode.boardType = WORKSPACE.MODE_BOARD;
                    if (this.oldTextType == VIM.TEXT_TYPE_JS) {
                        mode.runType = VIM.MAZE_MODE;
                    } else if (this.oldTextType == VIM.TEXT_TYPE_PY) {
                        mode.runType = VIM.WORKSPACE_MODE;
                    }
                    e.block && Entry.getMainWS() && Entry.getMainWS().board.activateBlock(e.block);
                }
                break;
            case WORKSPACE.MODE_BOARD:
                try {
                    this.board.show();
                    blockMenu.unbanClass('functionInit', true);
                    this.set({ selectedBoard: this.board });
                    this.textToCode(this.oldMode, this.oldTextType);
                    if (this.overlayBoard) this.overlayBoard.hide();
                    this.oldTextType = this.textType;
                    this.vimBoard && this.vimBoard.hide();
                } catch (e) {
                    if (this.board && this.board.code) this.board.code.clear();
                    if (this.board) this.board.hide();
                    this.set({ selectedBoard: this.vimBoard });
                    blockMenu.banClass('functionInit');
                    this.mode = WORKSPACE.MODE_VIMBOARD;

                    if (this.oldTextType == VIM.TEXT_TYPE_JS) {
                        mode.boardType = WORKSPACE.MODE_VIMBOARD;
                        mode.textType = VIM.TEXT_TYPE_JS;
                        mode.runType = VIM.MAZE_MODE;
                        this.oldTextType = VIM.TEXT_TYPE_JS;
                    } else if (this.oldTextType == VIM.TEXT_TYPE_PY) {
                        mode.boardType = WORKSPACE.MODE_VIMBOARD;
                        mode.textType = VIM.TEXT_TYPE_PY;
                        mode.runType = VIM.WORKSPACE_MODE;
                        this.oldTextType = VIM.TEXT_TYPE_PY;
                    }
                }
                Entry.commander.setCurrentEditor('board', this.board);
                break;

            case WORKSPACE.MODE_OVERLAYBOARD:
                if (this.oldMode == WORKSPACE.MODE_VIMBOARD) this.overlayModefrom = WORKSPACE.MODE_VIMBOARD;else if (this.oldMode == WORKSPACE.MODE_BOARD) this.overlayModefrom = WORKSPACE.MODE_BOARD;

                if (!this.overlayBoard) this.initOverlayBoard();
                this.overlayBoard.show();
                this.set({ selectedBoard: this.overlayBoard });
                Entry.commander.setCurrentEditor('board', this.overlayBoard);
                break;
        }

        this.oldMode = this.mode;
        Entry.isTextMode = this.mode == WORKSPACE.MODE_VIMBOARD;

        blockMenu.align();
        Entry.dispatchEvent('workspaceChangeMode');
        this.changeEvent.notify(message);
        Entry.dispatchEvent('cancelBlockMenuDynamic');

        function checkObjectAndAlert(object, message) {
            if (Entry.type === 'workspace' && !object) {
                entrylms.alert(message || Lang.Workspace.object_not_exist_error);
                return false;
            }
            return true;
        }
    };

    p.changeBoardCode = function (code, cb) {
        this._syncTextCode();
        var isVim = this.mode === Entry.Workspace.MODE_VIMBOARD;
        this.board.changeCode(code, isVim, cb);
        if (isVim) {
            var mode = {};
            mode.textType = this.textType;
            mode.boardType = this.boardType;
            mode.runType = this.runType;
            this.codeToText(this.board.code, mode);
        }
    };

    p.changeOverlayBoardCode = function (code) {
        if (this.overlayBoard) this.overlayBoard.changeCode(code);
    };

    p.changeBlockMenuCode = function (code) {
        this.blockMenu.changeCode(code);
    };

    p.textToCode = function (mode, oldTextType) {
        if (!this.vimBoard || mode !== Entry.Workspace.MODE_VIMBOARD) return;

        var changedCode = this.vimBoard.textToCode(oldTextType);

        var board = this.board;
        var code = board.code;
        if (!code) return;

        code.load(changedCode);
        this.changeBoardCode(code);
        setTimeout(function () {
            if (code.view) {
                code.view.reDraw();
                this.board.alignThreads();
            }
        }.bind(this), 0);
    };

    p.codeToText = function (code, mode) {
        if (!this.vimBoard) return;

        code = code || this.board.code;
        mode = mode || {
            textType: this.textType,
            boardType: this.boardType,
            runType: this.runType
        };

        return this.vimBoard.codeToText(code, mode);
    };

    p.getCodeToText = function (code) {
        if (!this.vimBoard) return;

        return this.vimBoard.getCodeToText(code);
    };

    p._setSelectedBlockView = function () {
        var view = 'selectedBlockView';
        var blockView = this.board[view] || this.blockMenu[view] || (this.overlayBoard ? this.overlayBoard[view] : null);

        this._unbindBlockViewMouseUpEvent();

        this.set({ selectedBlockView: blockView });

        if (!blockView) return;

        this.setHoverBlockView();
        var that = this;
        this._blockViewMouseUpEvent = blockView.mouseUpEvent.attach(this, function () {
            that.blockViewMouseUpEvent.notify(blockView);
        });
    };

    p.initOverlayBoard = function () {
        this.overlayBoard = new Entry.Board({
            dom: this.board.view,
            workspace: this,
            isOverlay: true
        });
        this.overlayBoard.changeCode(new Entry.Code([]));
        this.overlayBoard.workspace = this;
        this.overlayBoard.observe(this, '_setSelectedBlockView', ['selectedBlockView'], false);
    };

    p._keyboardControl = function (e, isForce) {
        if (Entry.Loader && !Entry.Loader.isLoaded()) return;
        var keyCode = e.keyCode || e.which,
            ctrlKey = e.ctrlKey,
            shiftKey = e.shiftKey,
            altKey = e.altKey;
        var playground = Entry.playground;
        var object = playground && playground.object ? playground.object : undefined;

        if (Entry.Utils.isInInput(e) && !isForce) return;

        var isVimMode = this._isVimMode();

        var blockView = this.selectedBlockView;
        var board = this.selectedBoard;
        var isBoardReadOnly = board.readOnly;
        var checkKeyCodes;

        if (ctrlKey) {
            checkKeyCodes = [219, 221];

            if (checkKeyCodes.indexOf(keyCode) > -1) {
                if (!checkObjectAndAlert(object)) return;
            }

            switch (keyCode) {
                case 86:
                    //paste
                    if (!isBoardReadOnly && board && board instanceof Entry.Board && Entry.clipboard) {
                        Entry.do('addThread', Entry.clipboard).value.getFirstBlock().copyToClipboard();
                    }
                    break;
                case 219:
                    //setMode(block) for textcoding
                    if (!Entry.options.textCodingEnable) {
                        return;
                    }
                    var oldMode = Entry.getMainWS().oldMode;
                    if (oldMode == Entry.Workspace.MODE_OVERLAYBOARD) return;

                    var message = Entry.TextCodingUtil.isNamesIncludeSpace();
                    if (message) {
                        entrylms.alert(message);
                        return;
                    }

                    this.dSetMode({
                        boardType: Entry.Workspace.MODE_BOARD,
                        textType: -1
                    });
                    e.preventDefault();
                    break;
                case 221:
                    //setMode(python) for textcoding
                    if (!Entry.options.textCodingEnable) {
                        return;
                    }
                    var message;
                    message = Entry.TextCodingUtil.canConvertTextModeForOverlayMode(Entry.Workspace.MODE_VIMBOARD);
                    if (message) {
                        entrylms.alert(message);
                        return;
                    }

                    var message = Entry.TextCodingUtil.isNamesIncludeSpace();
                    if (message) {
                        entrylms.alert(message);
                        return;
                    }

                    this.dSetMode({
                        boardType: Entry.Workspace.MODE_VIMBOARD,
                        textType: Entry.Vim.TEXT_TYPE_PY,
                        runType: Entry.Vim.WORKSPACE_MODE
                    });
                    e.preventDefault();
                    break;
                case 67:
                    if (blockView && !blockView.isInBlockMenu && blockView.block.isDeletable() && blockView.block.isCopyable()) {
                        blockView.block.copyToClipboard();
                    }
                    break;
                case 88:
                    if (!isBoardReadOnly && blockView && !blockView.isInBlockMenu && blockView.block.isDeletable()) {
                        (function (block) {
                            block.copyToClipboard();
                            block.destroy(true, true);
                            blockView.getBoard().setSelectedBlock(null);
                        })(blockView.block);
                    }
                    break;
            }
        } else if (altKey) {
            checkKeyCodes = [49, 50, 51, 52, 219, 221];

            if (checkKeyCodes.indexOf(keyCode) > -1) {
                if (!checkObjectAndAlert(object)) return;
            }

            switch (keyCode) {
                case 49:
                    playground.changeViewMode('code');
                    e.preventDefault();
                    break;
                case 50:
                    playground.changeViewMode('picture');
                    e.preventDefault();
                    break;
                case 51:
                    playground.changeViewMode('sound');
                    e.preventDefault();
                    break;
                case 52:
                    playground.toggleOnVariableView();
                    playground.changeViewMode('variable');
                    e.preventDefault();
                    break;
                case 219:
                    if (Entry.container) {
                        e.preventDefault();
                        Entry.container.selectNeighborObject('prev');
                    }
                    break;
                case 221:
                    if (Entry.container) {
                        e.preventDefault();
                        Entry.container.selectNeighborObject('next');
                    }
                    break;
            }
        } else if (shiftKey) {
            switch (keyCode) {
                case 9:
                    if (isVimMode) {
                        CodeMirror.commands.indentLess(this.vimBoard.codeMirror);
                        e.preventDefault();
                    }
                    break;
            }
        } else {
            switch (keyCode) {
                case 9:
                    if (isVimMode) {
                        CodeMirror.commands.indentMore(this.vimBoard.codeMirror);
                        e.preventDefault();
                    }
                    break;
                case 8:
                case 46:
                    if (!isBoardReadOnly && blockView && !blockView.isInBlockMenu && blockView.block.isDeletable() && !blockView.isFieldEditing()) {
                        Entry.do('destroyBlock', blockView.block);
                        this.board.set({ selectedBlockView: null });
                        e.preventDefault();
                    }
                    break;
            }
        }

        //delay for fields value applied
        setTimeout(function () {
            Entry.disposeEvent && Entry.disposeEvent.notify(e);
        }, 0);

        function checkObjectAndAlert(object, message) {
            if (!object) {
                message = message || '오브젝트가 존재하지 않습니다. 오브젝트를 추가한 후 시도해주세요.';
                entrylms.alert(message);
                return false;
            }
            return true;
        }
    };

    p._handleChangeBoard = function () {
        var board = this.selectedBoard;
        if (!board) return;
        if (board.constructor === Entry.Board) this.trashcan.setBoard(board);
    };

    p._syncTextCode = function () {
        if (this.mode !== Entry.Workspace.MODE_VIMBOARD || Entry.engine && Entry.engine.isState('run')) return;

        var changedCode = this.vimBoard.textToCode(this.textType);

        var board = this.board;
        var code = board.code;
        if (code) code.load(changedCode);

        var event = Entry.creationChangedEvent;
        event && event.notify(true);
    };

    p.addVimBoard = function (dom) {
        if (this.vimBoard) return;
        this.vimBoard = new Entry.Vim(dom);
        this.vimBoard.workspace = this;
        this.vimBoard.hide();
    };

    p.getParserType = function () {
        return this.vimBoard._parserType;
    };

    p.getBlockViewRenderMode = function () {
        switch (this.mode) {
            case Entry.Workspace.MODE_BOARD:
            case Entry.Workspace.MODE_OVERLAYBOARD:
                return Entry.BlockView.RENDER_MODE_BLOCK;
            case Entry.Workspace.MODE_VIMBOARD:
                return Entry.BlockView.RENDER_MODE_TEXT;
        }
    };

    p._isVimMode = function () {
        return this.oldMode === Entry.Workspace.MODE_VIMBOARD;
    };

    p.isVimMode = p._isVimMode;

    p.attachKeyboardCapture = function () {
        if (Entry.keyPressed) {
            this._keyboardEvent && this.detachKeyboardCapture();
            this._keyboardEvent = Entry.keyPressed.attach(this, this._keyboardControl);
        }
    };

    p.detachKeyboardCapture = function () {
        if (Entry.keyPressed && this._keyboardEvent) {
            this._keyboardEvent.destroy();
            delete this._keyboardEvent;
        }
    };

    p._unbindBlockViewMouseUpEvent = function () {
        if (this._blockViewMouseUpEvent) {
            var oldOne = this.selectedBlockView;
            this._blockViewMouseUpEvent.destroy();
            this._blockViewMouseUpEvent = null;
        }
    };

    p.setWidgetUpdateEveryTime = function (val) {
        this.widgetUpdateEveryTime = !!val;
    };

    p.syncCode = function () {
        switch (this.mode) {
            case Entry.Workspace.MODE_VIMBOARD:
                this._syncTextCode();
                break;
        }
    };

    p.setHoverBlockView = function (blockView) {
        var oldBlockView = this._hoverBlockView;
        oldBlockView && oldBlockView.resetBackgroundPath();

        this._hoverBlockView = blockView;
        blockView && blockView.setBackgroundPath();
    };

    p.reDraw = function () {
        var blockMenu = this.blockMenu;
        var board = this.board;

        blockMenu && blockMenu.reDraw();
        board && board.reDraw();
    };
})(Entry.Workspace.prototype);

/***/ }),

/***/ "./src/textcoding/ast/jsAstGenerator.js":
/*!**********************************************!*\
  !*** ./src/textcoding/ast/jsAstGenerator.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


Entry.JsAstGenerator = function () {};

(function (p) {
    p.generate = function (code) {
        return arcon.parse(code);
    };
})(Entry.JsAstGenerator.prototype);

/***/ }),

/***/ "./src/textcoding/ast/pyAstGenerator.js":
/*!**********************************************!*\
  !*** ./src/textcoding/ast/pyAstGenerator.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


Entry.PyAstGenerator = function () {};

(function (p) {
    p.generate = function (code) {
        var filbertParse = filbert.parse;
        var locations = true;
        var ranges = true;
        var options = { locations: locations, ranges: ranges };
        try {
            var astTree = filbertParse(code, options);
            return astTree;
        } catch (error) {
            var msgTokens = error.message.split("'");
            var title = Entry.TextCodingError.TITLE_SYNTAX;
            console.log('msgTokens', msgTokens);

            var message, subject;
            if (error.expectedType && error.tokType) {
                if (error.tokType === 'eof' || error.tokType === 'newline') message = Lang.TextCoding.message_conv_is_expect1 + this.getTokenLang(error.expectedType) + Lang.TextCoding.message_conv_is_expect2;else message = Lang.TextCoding.message_conv_instead.replace('%1', this.getTokenLang(error.tokType)).replace('%2', this.getTokenLang(error.expectedType));
                subject = Entry.TextCodingError.SUBJECT_SYNTAX_TOKEN;
            } else if (error.tokType) {
                if (error.tokType === 'eof' || error.tokType === 'newline') message = Entry.TextCodingError.MESSAGE_SYNTAX_UNEXPECTED_TOKEN;else message = Lang.TextCoding.message_conv_is_wrong1 + this.getTokenLang(error.tokType) + Lang.TextCoding.message_conv_is_wrong2;
                subject = Entry.TextCodingError.SUBJECT_SYNTAX_TOKEN;
            } else if (msgTokens[0].trim() == 'Unexpected token') {
                message = Entry.TextCodingError.MESSAGE_SYNTAX_UNEXPECTED_TOKEN;
                subject = Entry.TextCodingError.SUBJECT_SYNTAX_TOKEN;
            } else if (msgTokens[0].trim() == 'Unexpected character') {
                message = Entry.TextCodingError.MESSAGE_SYNTAX_UNEXPECTED_CHARACTER;
                subject = Entry.TextCodingError.SUBJECT_SYNTAX_CHARACTER;
            } else if (msgTokens[0].trim() == 'Reserved variable word') {
                message = Entry.TextCodingError.MESSAGE_SYNTAX_RESERVED_TOKEN;
                subject = Entry.TextCodingError.SUBJECT_CONV_VARIABLE;
            } else if (msgTokens[0].trim() == 'Reserved list word') {
                message = Entry.TextCodingError.MESSAGE_SYNTAX_RESERVED_TOKEN_LIST;
                subject = Entry.TextCodingError.SUBJECT_CONV_LIST;
            } else if (msgTokens[0].trim() == 'Unexpected indent') {
                message = Entry.TextCodingError.MESSAGE_SYNTAX_UNEXPECTED_CHARACTER;
                subject = Entry.TextCodingError.SUBJECT_SYNTAX_INDENT;
            } else {
                message = Entry.TextCodingError.MESSAGE_SYNTAX_DEFAULT;
                subject = Entry.TextCodingError.SUBJECT_SYNTAX_DEFAULT;
            }

            if (msgTokens[1]) var keyword = msgTokens[1];

            error.title = Lang.TextCoding[title] || title;
            error.message = Lang.TextCoding[message] || message;
            error.keyword = keyword || '';
            error.subject = Lang.TextCoding[subject] || subject;

            throw error;
        }
    };

    p.getTokenLang = function (token) {
        if (Array.isArray(token)) {
            var tokens = token.map(this._getTokenLang);
            var lastToken = tokens.pop();
            return tokens.join(', ') + Lang.TextCoding.message_conv_or + lastToken;
        } else return this._getTokenLang(token);
    };

    p._getTokenLang = function (token) {
        return Lang.TextCoding[token] || '"' + token + '"';
    };
})(Entry.PyAstGenerator.prototype);

/***/ }),

/***/ "./src/textcoding/data_processing/map.js":
/*!***********************************************!*\
  !*** ./src/textcoding/data_processing/map.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


Entry.Map = function () {
    var map = {};
    map.repo = {};
    this._map = map;
};

(function (p) {
    p.getKey = function (id) {
        return id;
    };

    p.put = function (id, value) {
        var key = this.getKey(id);
        this._map.repo[key] = value;
    };

    p.contains = function (id) {
        var key = this.getKey(id);
        if (this._map.repo[key]) {
            return true;
        } else {
            return false;
        }
    };

    p.get = function (id) {
        var key = this.getKey(id);
        if (this._map.repo[key]) {
            return this._map.repo[key];
        }
        return null;
    };

    p.remove = function (id) {
        var key = this.getKey(id);
        if (this.contains(id)) {
            this._map.repo[key] = undefined;
        }
    };

    p.clear = function () {
        this._map.repo = {};
    };

    p.toString = function () {
        return this._map.repo;
    };
})(Entry.Map.prototype);

/***/ }),

/***/ "./src/textcoding/data_processing/queue.js":
/*!*************************************************!*\
  !*** ./src/textcoding/data_processing/queue.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


Entry.Queue = function () {
    this.head = null;
    this.tail = null;
};

function Node(data) {
    this.data = data;
    this.next = null;
}

(function (p) {
    p.enqueue = function (data) {
        var newNode = new Node(data);

        if (this.head === null) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            this.tail.next = newNode;
            this.tail = newNode;
        }
    };

    p.dequeue = function () {
        var newNode;
        if (this.head !== null) {
            newNode = this.head.data;
            this.head = this.head.next;
        }
        return newNode;
    };

    p.clear = function () {
        while (this.dequeue()) {}
    };

    p.toString = function () {
        var curr = this.head;
        var items = [];
        while (curr) {
            items.push(curr.data);
            curr = curr.next;
        }

        return items.toString();
    };
})(Entry.Queue.prototype);

/***/ }),

/***/ "./src/textcoding/error/textCodingError.js":
/*!*************************************************!*\
  !*** ./src/textcoding/error/textCodingError.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Entry.TextCodingError = {};

(function (tce) {
    tce.TITLE_SYNTAX = 'title_syntax';
    tce.TITLE_CONVERTING = 'title_converting';

    tce.MESSAGE_SYNTAX_DEFAULT = 'message_syntax_default';
    tce.MESSAGE_SYNTAX_UNEXPECTED_TOKEN = 'message_syntax_unexpected_token';
    tce.MESSAGE_SYNTAX_UNEXPECTED_CHARACTER = 'message_syntax_unexpected_character';
    tce.MESSAGE_SYNTAX_UNEXPECTED_INDENT = 'message_syntax_unexpected_indent';
    tce.MESSAGE_SYNTAX_RESERVED_TOKEN = 'message_syntax_reserved_token';
    tce.MESSAGE_SYNTAX_RESERVED_TOKEN_LIST = 'message_syntax_reserved_token_list';

    tce.MESSAGE_CONV_DEFAULT = 'message_conv_default';
    tce.MESSAGE_CONV_NO_SUPPORT = 'message_conv_no_support';
    tce.MESSAGE_CONV_NO_VARIABLE = 'message_conv_no_variable';
    tce.MESSAGE_CONV_NO_LIST = 'message_conv_no_list';
    tce.MESSAGE_CONV_NO_OBJECT = 'message_conv_no_object';
    tce.MESSAGE_CONV_NO_FUNCTION = 'message_conv_no_function';
    tce.MESSAGE_CONV_NO_ENTRY_EVENT_FUNCTION = 'message_conv_no_entry_event_function';

    tce.SUBJECT_SYNTAX_DEFAULT = 'subject_syntax_default';
    tce.SUBJECT_SYNTAX_TOKEN = 'subject_syntax_token';
    tce.SUBJECT_SYNTAX_CHARACTER = 'subject_syntax_character';
    tce.SUBJECT_SYNTAX_INDENT = 'subject_syntax_indent';

    tce.SUBJECT_CONV_DEFAULT = 'subject_conv_default';
    tce.SUBJECT_CONV_GENERAL = 'subject_conv_general';
    tce.SUBJECT_CONV_VARIABLE = 'subject_conv_variable';
    tce.SUBJECT_CONV_LIST = 'subject_conv_list';
    tce.SUBJECT_CONV_OBJECT = 'subject_conv_object';
    tce.SUBJECT_CONV_FUNCTION = 'subject_conv_function';

    //No Converting Message
    tce.ALERT_VARIABLE_EMPTY_TEXT_ADD_CHANGE = 'alert_variable_empty_text_add_change';
    tce.ALERT_LIST_EMPTY_TEXT_ADD_CHANGE = 'alert_list_empty_text_add_change';
    tce.ALERT_FUNCTION_NAME_EMPTY_TEXT_ADD_CHANGE = 'alert_function_name_empty_text_add_change';
    tce.ALERT_VARIABLE_EMPTY_TEXT = 'alert_variable_empty_text';
    tce.ALERT_LIST_EMPTY_TEXT = 'alert_list_empty_text';
    tce.ALERT_FUNCTION_NAME_EMPTY_TEXT = 'alert_function_name_empty_text';
    tce.ALERT_FUNCTION_NAME_FIELD_MULTI = 'alert_function_name_field_multi';
    tce.ALERT_FUNCTION_NAME_DISORDER = 'alert_function_name_disorder';
    tce.ALERT_FUNCTION_EDITOR = 'alert_function_editor';
    tce.ALERT_FUNCTION_NO_SUPPORT = 'alert_function_no_support';
    tce.ALERT_LIST_NO_SUPPORT = 'alert_list_no_support';
    tce.ALERT_VARIABLE_NO_SUPPORT = 'alert_variable_no_support';
    tce.ALERT_SIGNAL_NO_SUPPORT = 'alert_signal_no_support';
    tce.ALERT_LEGACY_NO_SUPPORT = 'alert_legacy_no_support';
    tce.ALERT_NO_SAVE_ON_ERROR = 'alert_no_save_on_error';

    var error = {};

    tce.error = function (title, message, keyword, line, subject) {
        console.log('error control', title, message, keyword, line);
        var errorInfo = this.getErrorInfo(title, message, keyword, line, subject);
        error.title = errorInfo.title;
        error.message = errorInfo.message;
        error.line = line;
        throw error;
    };

    tce.getErrorInfo = function (title, message, keyword, line, subject) {
        var info = {};
        info.title = Lang.TextCoding[title];
        var message = Lang.TextCoding[message];

        var contents;
        if (keyword) var kw = "'" + keyword + "' ";else var kw = '';

        if (subject) var sj = Lang.TextCoding[subject];else var sj = Lang.TextCoding[this.SUBJECT_CONV_GENERAL];

        if ((typeof line === 'undefined' ? 'undefined' : _typeof(line)) === 'object') line = line.start.line + 2;

        contents = '[' + sj + ']' + ' ' + kw + ' : ' + message + ' ' + '(line ' + line + ')';

        info.message = contents;

        return info;
    };
})(Entry.TextCodingError);

/***/ }),

/***/ "./src/textcoding/hint/python.js":
/*!***************************************!*\
  !*** ./src/textcoding/hint/python.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: http://codemirror.net/LICENSE
//

Entry.PyHint = function (syntax) {
    this.setSyntax(syntax);
    this.lastHW = null;

    this._blockMenu = Entry.getMainWS().blockMenu;

    CodeMirror.registerHelper('hint', 'python', this.pythonHint.bind(this));

    var hwFunc = function (e) {
        if (Entry.hw.hwModule) {
            var name = Entry.hw.hwModule.name;
            name = name[0].toUpperCase() + name.slice(1);
            if (name === 'ArduinoExt') this.addScope('Arduino', 'Ext');else this.addScope(name);
            this.lastHW = name;
        } else {
            this.removeScope(this.lastHW);
            this.lastHW = null;
        }
    }.bind(this);

    Entry.addEventListener('hwChanged', hwFunc);

    if (Entry.hw.hwModule) hwFunc();
};

(function (p) {
    p.pythonHint = function (editor) {
        var cur = editor.getCursor(),
            tokens = editor.getLineTokens(cur.line);
        var lastToken = tokens.pop();
        var result = [],
            menuResult = [];

        while (lastToken && cur.ch <= lastToken.start) {
            lastToken = tokens.pop();
        }if (!lastToken) return null;

        var searchString;
        var start = lastToken.start;
        var hintFunc = this.hintFunc;
        var syntax = this.syntax;

        switch (lastToken.type) {
            case 'builtin':
                if (tokens[tokens.length - 2] && tokens[tokens.length - 2].string === 'def') searchString = null;else searchString = lastToken.string;
            case 'def':
                if (!searchString) {
                    var defToken = tokens[tokens.length - 2];
                    if (defToken) {
                        searchString = 'def ' + lastToken.string;
                        start = defToken.start;
                    }
                }
            case 'keyword':
                if (!searchString) searchString = lastToken.string;
            case 'variable':
                if (!searchString) searchString = lastToken.string;
                result = this.fuzzySearch(this.getScope('_global'), searchString);
                result = result.map(function (key) {
                    var localSyntax = syntax;
                    var displayText = key.split('#')[0];
                    displayText = displayText.split('\n').join(' ');
                    displayText = displayText.replace(/%\d+/gi, '');
                    displayText = displayText.replace(/\$\d+/gi, '');
                    var localKey;
                    if (key.indexOf('.') > -1) {
                        key = key.split('.');
                        localSyntax = syntax[key[0]];
                        localKey = key.shift();
                        key = key.join('.');
                    }
                    if (localSyntax[key].key) menuResult.push(this.getMenuElement(localSyntax[key]));
                    return {
                        displayText: displayText,
                        hint: hintFunc,
                        syntax: localSyntax[key],
                        localKey: localKey
                    };
                }, this);
                break;
            case 'property':
                var variableToken = tokens[tokens.length - 2];
                if (!variableToken) break;
                var searchResult;
                var searchScope = this.getScope(variableToken.string);
                if (searchScope.length) searchResult = this.fuzzySearch(searchScope, lastToken.string);else if (Entry.variableContainer.getListByName(variableToken.string)) {
                    searchResult = this.fuzzySearch(this.getScope('%2'), lastToken.string);
                    variableToken.string = '%2';
                } else searchResult = [];
                result = searchResult.map(function (key) {
                    var displayText = key.split('#')[0];
                    displayText = displayText.split('\n')[0];
                    return {
                        displayText: displayText,
                        hint: hintFunc,
                        syntax: syntax[variableToken.string][key]
                    };
                });
                var scope = this.syntax[variableToken.string];
                menuResult = searchResult.map(function (key) {
                    return this.getMenuElement(scope[key]);
                }, this);
                break;
            default:
                break;
        }

        if (menuResult.length) this._blockMenu._setDynamic(menuResult);else this._blockMenu._cancelDynamic();
        return {
            list: result, // for optimize
            from: CodeMirror.Pos(cur.line, start),
            to: CodeMirror.Pos(cur.line, lastToken.end)
        };
    };

    p.addScope = function (name, extName) {
        if (this.syntax[name] && !this.scope[name]) {
            var syntax = this.syntax;
            if (name === 'Chocopi') {
                for (var key in this.syntax) {
                    if (syntax[key].syntax && key.indexOf('%') < 0 && syntax[key].key.indexOf('function_field') < 0) {
                        if (key.substr(0, 6) === 'def on') this.scope._global.push(key);
                    }
                }
            }
            syntax = this.syntax[name];
            var keys = Object.keys(syntax);
            keys = keys.filter(function (k) {
                var blockSyntax = Entry.block[syntax[k].key];
                if (name === 'Arduino' && extName === 'Ext' !== (blockSyntax.class && blockSyntax.class.indexOf('Ext') > 0)) return false;
                return k.indexOf('#') < 0 && !blockSyntax.deprecated;
            });
            this.scope[name] = keys;
            this.scope._global.unshift(name);
            keys = keys.map(function (k) {
                return name + '.' + k;
            });
            this.scope._global = this.scope._global.concat(keys);
        }
    };

    p.removeScope = function (name) {
        if (this.scope[name]) {
            var syntax = this.syntax[name];
            var keys = Object.keys(syntax);
            keys = keys.filter(function (k) {
                return k.indexOf('#') < 0 && !Entry.block[syntax[k].key].deprecated;
            });
            keys = keys.map(function (k) {
                return name + '.' + k;
            });

            this.scope._global.splice(this.scope._global.indexOf(name), 1);
            while (keys.length) {
                var key = keys.pop();
                this.scope._global.splice(this.scope._global.indexOf(key), 1);
            }
            delete this.scope[name];
        }
    };

    p.getScope = function (name) {
        if (this.scope[name]) return this.scope[name];else return [];
    };

    p.fuzzySearch = function (arr, start, options) {
        options = options || {};
        options.escapeLetter = '#';
        var result = Entry.Utils.fuzzy.filter(start, arr, options).slice(0, 20);
        result = result.map(function (o) {
            return o.original;
        });
        return result;
    };

    p.hintFunc = function (cm, self, data) {
        var text;
        var syntax = data.syntax;
        var ch = self.from.ch;
        if (!syntax.syntax) {
            text = data.displayText + '.';
            ch += text.length;
        } else {
            text = syntax.syntax;
            if (data.localKey) {
                text = data.localKey + '.' + text;
            }
            text = text.split('.');
            if (text.length > 1) text.shift();
            text = text.join('.');
            if (text.indexOf('%') > -1) {
                ch += text.indexOf('%');
                text = text.replace(/%\d+/gi, '');
            } else {
                ch += text.length;
            }
            text = text.replace(/\$\d+/gi, '');
        }
        if (text.indexOf('\n') > -1) {
            text = text.split('\n').join('\n' + '\t'.repeat(self.from.ch));
        }
        if (text.indexOf(':') > -1) {
            var cur = cm.getCursor(),
                tokens = cm.getLineTokens(cur.line);
            var newStart = tokens.shift();
            while (tokens.length) {
                if (newStart.type === 'keyword') break;
                newStart = tokens.shift();
            }
            ch -= self.from.ch - newStart.start;
            self.from.ch = newStart.start;
        }

        cm.replaceRange(text, self.from, self.to);
        cm.setCursor({ line: self.from.line, ch: ch });
        Entry.helper.renderBlock(data.syntax.key);
    };

    p.setSyntax = function (syntax) {
        this.syntax = syntax;
        this.scope = {};
        this.scope._global = [];
        this.scope._list = [];
        for (var key in syntax) {
            if (syntax[key].syntax && key.indexOf('%') < 0 && syntax[key].key.indexOf('function_field') < 0) {
                if (key.substr(0, 6) === 'def on') continue;
                this.scope._global.push(key);
            } else if (key.substr(0, 2) === 'if') this.scope._global.push(key);else if (key.substr(0, 5) === 'while') this.scope._global.push(key);
        }
        this.addScope('Entry');
        this.addScope('random');
        this.addScope('math');
        this.addScope('%2', '_list');

        if (this.lastHW) this.addScope(this.lastHW);
    };

    p.getMenuElement = function (blockSyntax) {
        var blockType = blockSyntax.key;
        if (blockSyntax.isDefault && Entry.playground.mainWorkspace.blockMenu.getThreadByBlockKey(blockType)) {
            return blockType;
        } else {
            var params = [];
            if (blockSyntax.params) params = params.concat(blockSyntax.params);
            return [blockSyntax.syntax, {
                type: blockType,
                params: params
            }];
        }
    };
})(Entry.PyHint.prototype);

/***/ }),

/***/ "./src/textcoding/parser.js":
/*!**********************************!*\
  !*** ./src/textcoding/parser.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


__webpack_require__(/*! ./util/console */ "./src/textcoding/util/console.js");
__webpack_require__(/*! ./parser/core/text/pyToBlock */ "./src/textcoding/parser/core/text/pyToBlock.js");
__webpack_require__(/*! ./parser/core/text/jsToBlock */ "./src/textcoding/parser/core/text/jsToBlock.js");
__webpack_require__(/*! ./parser/core/block/blockToPy */ "./src/textcoding/parser/core/block/blockToPy.js");
__webpack_require__(/*! ./parser/core/block/blockToJs */ "./src/textcoding/parser/core/block/blockToJs.js");

Entry.Parser = function (mode, type, cm, syntax) {
    this._mode = mode; // maze ai workspace
    this.syntax = {}; //for maze
    this.codeMirror = cm;

    this._lang = syntax;
    this._type = type;
    this.availableCode = [];
    this._syntax_cache = {};
    this._pyThreadCount = 1;
    this._pyBlockCount = {};

    Entry.Parser.PARSE_GENERAL = 1;
    Entry.Parser.PARSE_SYNTAX = 2;
    Entry.Parser.PARSE_VARIABLE = 3;
    Entry.Parser.PARSE_BLOCK = 4;

    this._onError = false;
    this._onRunError = false;

    if (Entry.type === "workspace") {
        this._console = new Entry.Console();

        var hwFunc = function () {
            var _mode = this._mode;
            if (_mode === null) return;
            this.setAvailableCode();

            delete this._syntax_cache[_mode];
            this.syntax = this.mappingSyntax(_mode);
            this._pyHinter && this._pyHinter.setSyntax(this.syntax);
        }.bind(this);

        //after hw code generated update syntax for this
        //and update python hinter syntax
        Entry.addEventListener('hwCodeGenerated', hwFunc);
    }
};

(function (p) {
    var SYNTAX_MAP = {
        "Hamster.LINE_TRACER_MODE_OFF": '0',
        "Hamster.LINE_TRACER_MODE_BLACK_LEFT_SENSOR": '1',
        "Hamster.LINE_TRACER_MODE_BLACK_RIGHT_SENSOR": '2',
        "Hamster.LINE_TRACER_MODE_BLACK_BOTH_SENSORS": '3',
        "Hamster.LINE_TRACER_MODE_BLACK_TURN_LEFT": '4',
        "Hamster.LINE_TRACER_MODE_BLACK_TURN_RIGHT": '5',
        "Hamster.LINE_TRACER_MODE_BLACK_MOVE_FORWARD": '6',
        "Hamster.LINE_TRACER_MODE_BLACK_UTURN": '7',
        "Hamster.LINE_TRACER_MODE_WHITE_LEFT_SENSOR": '8',
        "Hamster.LINE_TRACER_MODE_WHITE_RIGHT_SENSOR": '9',
        "Hamster.LINE_TRACER_MODE_WHITE_BOTH_SENSORS": '10',
        "Hamster.LINE_TRACER_MODE_WHITE_TURN_LEFT": '11',
        "Hamster.LINE_TRACER_MODE_WHITE_TURN_RIGHT": '12',
        "Hamster.LINE_TRACER_MODE_WHITE_MOVE_FORWARD": '13',
        "Hamster.LINE_TRACER_MODE_WHITE_UTURN": '14',

        "Hamster.LED_OFF": '0',
        "Hamster.LED_BLUE": '1',
        "Hamster.LED_GREEN": '2',
        "Hamster.LED_CYAN": '3',
        "Hamster.LED_RED": '4',
        "Hamster.LED_MAGENTA": '5',
        "Hamster.LED_YELLOW": '6',
        "Hamster.LED_WHITE": '7',

        "Hamster.IO_MODE_ANALOG_INPUT": '0',
        "Hamster.IO_MODE_DIGITAL_INPUT": '1',
        "Hamster.IO_MODE_SERVO_OUTPUT": '8',
        "Hamster.IO_MODE_PWM_OUTPUT": '9',
        "Hamster.IO_MODE_DIGITAL_OUTPUT": '10'
    };

    p.setParser = function (mode, type, cm) {
        if (this._mode === mode && this._type === type) return;

        this._mode = mode;
        this._type = type;
        this._cm = cm;

        this.syntax = this.mappingSyntax(mode);

        switch (type) {
            case Entry.Vim.PARSER_TYPE_JS_TO_BLOCK:
                this._execParser = new Entry.JsToBlockParser(this.syntax, this);
                this._execParserType = Entry.Vim.PARSER_TYPE_JS_TO_BLOCK;
                break;
            case Entry.Vim.PARSER_TYPE_PY_TO_BLOCK:
                this._execParser = new Entry.PyToBlockParser(this.syntax);
                this._execParserType = Entry.Vim.PARSER_TYPE_PY_TO_BLOCK;
                break;
            case Entry.Vim.PARSER_TYPE_BLOCK_TO_JS:
                this._execParser = new Entry.BlockToJsParser(this.syntax, this);
                this._execParserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS;
                break;
            case Entry.Vim.PARSER_TYPE_BLOCK_TO_PY:
                this._execParser = new Entry.BlockToPyParser(this.syntax);
                cm && cm.setOption("mode", { name: "python", globalVars: true });
                this._execParserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY;
                break;
        }
    };

    p.parse = function (code, parseMode) {
        var type = this._type;
        var result = "";

        switch (type) {
            case Entry.Vim.PARSER_TYPE_JS_TO_BLOCK:
                try {
                    var threads = [];
                    threads.push(code);
                    var astArray = [];

                    for (var index in threads) {
                        var thread = threads[index];
                        thread = thread.trim();
                        var ast = acorn.parse(thread);
                        astArray.push(ast);
                    }

                    result = this._execParser.Program(astArray);
                } catch (error) {
                    if (this.codeMirror) {
                        var annotation;
                        if (error instanceof SyntaxError) {
                            annotation = {
                                from: { line: error.loc.line - 1, ch: 0 },
                                to: { line: error.loc.line - 1, ch: error.loc.column }
                            };
                            error.message = "문법(Syntax) 오류입니다.";
                            error.type = 1;
                        } else {
                            annotation = this.getLineNumber(error.node.start, error.node.end);
                            annotation.message = error.message;
                            annotation.severity = "converting error";
                            error.type = 2;
                        }

                        this.codeMirror.markText(annotation.from, annotation.to, {
                            className: "CodeMirror-lint-mark-error",
                            __annotation: annotation,
                            clearOnEnter: true
                        });

                        var errorTitle;
                        if (error.title) errorTitle = error.title;else errorTitle = '문법 오류';

                        var errorMsg;
                        if (error.type == 2 && error.message) errorMsg = error.message;else if (error.type == 2 && !error.message) errorMsg = '자바스크립트 코드를 확인해주세요.';else if (error.type == 1) errorMsg = '자바스크립트 문법을 확인해주세요.';

                        Entry.toast.alert(errorTitle, errorMsg);

                        var mode = {};
                        mode.boardType = Entry.Workspace.MODE_BOARD;
                        mode.textType = Entry.Vim.TEXT_TYPE_JS;
                        mode.runType = Entry.Vim.MAZE_MODE;
                        Ntry.dispatchEvent("textError", mode);
                        throw error;
                    }
                    result = [];
                }
                break;
            case Entry.Vim.PARSER_TYPE_PY_TO_BLOCK:
                try {
                    this._pyBlockCount = {};
                    this._pyThreadCount = 1;

                    var pyAstGenerator = new Entry.PyAstGenerator();
                    var threads = this.makeThreads(code);

                    var astArray = [];
                    var threadCount = 0;
                    var ast;
                    for (var index = 0; index < threads.length; index++) {
                        var thread = threads[index];
                        if (thread.length === 0) continue;
                        thread = thread.replace(/\t/gm, '    ');
                        ast = pyAstGenerator.generate(thread);
                        if (!ast) continue;
                        this._pyThreadCount = threadCount++;
                        this._pyBlockCount[threadCount] = thread.split("\n").length - 1;
                        if (ast.body.length !== 0) astArray.push(ast);
                    }
                    result = this._execParser.Programs(astArray);
                    this._onError = false;
                    break;
                } catch (error) {
                    this._onError = true;
                    result = [];

                    if (this.codeMirror) {
                        var line;
                        if (error instanceof SyntaxError) {
                            var err = this.findSyntaxError(error);
                            var annotation = {
                                from: { line: err.from.line - 1, ch: err.from.ch },
                                to: { line: err.to.line - 1, ch: err.to.ch }
                            };
                            error.type = "syntax";
                        } else {
                            var err = error.line;
                            var annotation = {
                                from: { line: err.start.line + 1, ch: err.start.column },
                                to: { line: err.end.line + 1, ch: err.end.column }
                            };
                            error.type = "converting";
                        }

                        var option = {
                            className: "CodeMirror-lint-mark-error",
                            __annotation: annotation,
                            clearOnEnter: true,
                            inclusiveLeft: true,
                            inclusiveRigth: true,
                            clearWhenEmpty: false
                        };

                        this._marker = this.codeMirror.markText(annotation.from, annotation.to, option);

                        if (error.type == "syntax") {
                            var title = error.title;
                            var message = this.makeSyntaxErrorDisplay(error.subject, error.keyword, error.message, err.from.line);
                        } else if (error.type == "converting") {
                            var title = error.title;
                            var message = error.message;
                        }

                        Entry.toast.alert(title, message);
                        throw error;
                    }
                }

                break;

            case Entry.Vim.PARSER_TYPE_BLOCK_TO_JS:
                var textCode = this._execParser.Code(code, parseMode);
                result = textCode;
                break;
            case Entry.Vim.PARSER_TYPE_BLOCK_TO_PY:
                try {
                    Entry.getMainWS().blockMenu.renderText();
                    result = "";

                    if (parseMode === Entry.Parser.PARSE_BLOCK && code.type.substr(0, 5) === "func_") {
                        var funcKeysBackup = Object.keys(this._execParser._funcDefMap);
                    }

                    var textCode = this._execParser.Code(code, parseMode);
                    if (!this._pyHinter) this._pyHinter = new Entry.PyHint(this.syntax);

                    if (!this._hasDeclaration) this.initDeclaration();

                    if (parseMode == Entry.Parser.PARSE_GENERAL) {
                        if (this.py_variableDeclaration) result += this.py_variableDeclaration;

                        if (this.py_listDeclaration) result += this.py_listDeclaration;

                        if (this.py_variableDeclaration || this.py_listDeclaration) result += '\n';

                        var funcDefMap = this._execParser._funcDefMap;
                        var fd = "";

                        for (var f in funcDefMap) {
                            var funcDef = funcDefMap[f];
                            fd += funcDef + '\n\n';
                        }
                        result += fd;
                    } else if (parseMode === Entry.Parser.PARSE_BLOCK) {
                        if (funcKeysBackup && funcKeysBackup.indexOf(code.type) < 0) {
                            result += this._execParser._funcDefMap[code.type] + '\n\n';
                        }
                    }
                    if (textCode) result += textCode.trim();

                    result = result.replace(/\t/g, "    ");
                    if (this._hasDeclaration) this.removeDeclaration();
                } catch (e) {
                    if (e.block) {
                        Entry.toast.alert(Lang.TextCoding.title_converting, Lang.TextCoding.alert_legacy_no_support);
                    }
                    throw e;
                }

                break;
        }

        return result;
    };

    p.getLineNumber = function (start, end) {
        var value = this.codeMirror.getValue();
        var lines = {
            'from': {},
            'to': {}
        };

        var startline = value.substring(0, start).split(/\n/gi);
        lines.from.line = startline.length - 1;
        lines.from.ch = startline[startline.length - 1].length;

        var endline = value.substring(0, end).split(/\n/gi);
        lines.to.line = endline.length - 1;
        lines.to.ch = endline[endline.length - 1].length;

        return lines;
    };

    p.mappingSyntax = function (mode) {
        var that = this;
        if (this._syntax_cache[mode]) return this._syntax_cache[mode];

        var types = Object.keys(Entry.block);
        var availables = this.setAvailableCode();
        var syntax = {};
        if (mode === Entry.Vim.WORKSPACE_MODE) syntax["#dic"] = {};

        for (var i = 0; i < types.length; i++) {
            var type = types[i];
            //if (Entry.type !== 'invisible' && (availables && (availables.indexOf(type) < 0)))
            //continue;

            if (mode === Entry.Vim.MAZE_MODE && availables && availables.indexOf(type) < 0) continue;

            var block = Entry.block[type];

            if (mode === Entry.Vim.MAZE_MODE) {
                var syntaxArray = block.syntax;
                if (!syntaxArray) continue;

                if (block.syntax.py) continue;

                var syntaxTemp = syntax;

                for (var j = 0; j < syntaxArray.length; j++) {
                    var key = syntaxArray[j];
                    if (j === syntaxArray.length - 2 && typeof syntaxArray[j + 1] === "function") {
                        syntaxTemp[key] = syntaxArray[j + 1];
                        break;
                    }
                    if (!syntaxTemp[key]) {
                        syntaxTemp[key] = {};
                    }
                    if (j === syntaxArray.length - 1) {
                        syntaxTemp[key] = type;
                    } else {
                        syntaxTemp = syntaxTemp[key];
                    }
                }
            } else if (mode === Entry.Vim.WORKSPACE_MODE) {
                var key = type;
                var pySyntax = block.syntax && block.syntax.py;

                if (!pySyntax) continue;

                pySyntax.map(function (s, i) {
                    var result, tokens;

                    if (typeof s === "string") {
                        result = {};
                        tokens = s;
                        result.key = key;
                        result.syntax = s;
                        result.template = s;
                    } else {
                        result = s;
                        tokens = s.syntax;
                        s.key = key;
                        if (!s.template) result.template = s.syntax;
                        if (s.dic) syntax["#dic"][s.dic] = key;
                    }
                    if (i === 0) result.isDefault = true;

                    tokens = tokens.split('(');

                    if (/%/.test(tokens[1])) {
                        if (tokens[0].length) tokens = tokens[0];else tokens = tokens.join('(');
                    } else tokens = tokens.join('(');

                    tokens = tokens.replace(/\(\):?/, "");

                    if (s.keyOption) tokens += "#" + s.keyOption;

                    tokens = tokens.split(".");

                    var newTokens = [];
                    newTokens.push(tokens.shift());
                    var restToken = tokens.join('.');
                    if (restToken !== '') newTokens.push(restToken);
                    tokens = newTokens;

                    var syntaxPointer = syntax;
                    for (var i = 0; i < tokens.length; i++) {
                        var syntaxKey = tokens[i];
                        if (i === tokens.length - 1) {
                            syntaxPointer[syntaxKey] = result;
                            var anotherKey = that._getAnotherSyntaxKey(syntaxKey);
                            if (anotherKey) syntaxPointer[anotherKey] = result;
                            break;
                        }
                        if (!syntaxPointer[syntaxKey]) syntaxPointer[syntaxKey] = {};
                        syntaxPointer = syntaxPointer[syntaxKey];
                    }
                });
            }
        }
        this._syntax_cache[mode] = syntax;
        return syntax;
    };

    p.setAvailableCode = function () {
        var WS = Entry.getMainWS();
        if (!WS) return;

        var blockMenu = WS.blockMenu;
        var board = WS.board;
        var container = Entry.conatainer;

        var blocks = [];

        if (blockMenu && blockMenu.code) {
            blocks = blocks.concat(blockMenu.code.getBlockList());
        }

        if (container) {
            blocks = blocks.concat(container.getBlockList());
        } else if (!container && board && board.code) {
            blocks = blocks.concat(board.code.getBlockList());
        }

        blocks = blocks.map(function (b) {
            return b.type;
        });
        blocks = blocks.filter(function (b, index) {
            return blocks.indexOf(b) === index;
        });

        this.availableCode = blocks;

        return blocks;
    };

    p.findSyntaxError = function (error, threadCount) {
        var loc = error.loc;
        loc.line = loc.line + 2;
        return {
            from: { line: loc.line, ch: loc.column },
            to: { line: loc.line, ch: loc.column + error.tokLen }
        };
    };

    p.makeThreads = function (text) {
        var textArr = text.split("\n");
        var thread = "";
        var threads = [];

        var optText = "";
        var onEntryEvent = false;

        var startLine = 0;
        for (var i = 3; i < textArr.length; i++) {
            var textLine = textArr[i] + "\n";
            if (Entry.TextCodingUtil.isEntryEventFuncByFullText(textLine)) {
                textLine = this.entryEventParamConverter(textLine);
                if (optText.length !== 0) {
                    threads.push(makeLine(optText));
                    startLine = i - 2;
                }

                optText = "";
                optText += textLine;
                onEntryEvent = true;
            } else {
                if (Entry.TextCodingUtil.isEntryEventFuncByFullText(textLine.trim())) textLine = this.entryEventParamConverter(textLine);
                if (textLine.length == 1 && !onEntryEvent) {
                    //empty line
                    threads.push(makeLine(optText));
                    startLine = i - 2;
                    optText = "";
                } else if (textLine.length != 1 && textLine.charAt(0) != ' ' && onEntryEvent) {
                    //general line
                    threads.push(makeLine(optText));
                    startLine = i - 2;
                    optText = "";
                    onEntryEvent = false;
                }

                optText += textLine;
            }
        }

        threads.push(makeLine(optText));
        function makeLine(text) {
            return new Array(startLine + 1).join("\n") + text;
        }
        return threads;
    };

    p.entryEventParamConverter = function (text) {
        return text;
    };

    p.makeSyntaxErrorDisplay = function (subject, keyword, message, line) {
        var kw;
        if (keyword) kw = "\'" + keyword + "\' ";else kw = '';

        return '[' + subject + ']' + ' ' + kw + ' : ' + message + ' ' + '(line ' + line + ')';
    };

    p.initDeclaration = function () {
        this.py_variableDeclaration = Entry.TextCodingUtil.generateVariablesDeclaration();
        this.py_listDeclaration = Entry.TextCodingUtil.generateListsDeclaration();
        this._hasDeclaration = true;
    };

    p.removeDeclaration = function () {
        this.py_variableDeclaration = null;
        this.py_listDeclaration = null;
    };

    p._getAnotherSyntaxKey = function (syntax) {
        var replaced = false;
        for (var key in SYNTAX_MAP) {
            if (syntax.indexOf(key) > -1) {
                replaced = true;
                syntax = syntax.replace(new RegExp(key, "gm"), SYNTAX_MAP[key]);
            }
        }

        if (replaced) return syntax;
    };
})(Entry.Parser.prototype);

/***/ }),

/***/ "./src/textcoding/parser/core/block/blockToJs.js":
/*!*******************************************************!*\
  !*** ./src/textcoding/parser/core/block/blockToJs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


Entry.BlockToJsParser = function (syntax, parentParser) {
    this._type = 'BlockToJsParser';
    this.syntax = syntax;

    this._parentParser = parentParser;

    this._iterVariableCount = 0;
    this._iterVariableChunk = ['i', 'j', 'k'];
};

(function (p) {
    p.Code = function (code, parseMode) {
        this._parseMode = parseMode;
        /*if (code instanceof Entry.Thread)
            return this.Thread(code);*/
        if (code instanceof Entry.Block) return this.Block(code);

        var textCode = '',
            threads = code._data;

        for (var i = 0; i < threads.length; i++) {
            var thread = threads[i];
            textCode += this.Thread(thread);
        }

        return textCode.trim();
    };

    p.Thread = function (thread) {
        if (thread instanceof Entry.Block) return this.Block(thread);
        var code = '',
            blocks = thread.getBlocks();

        for (var i = 0; i < blocks.length; i++) {
            var block = blocks[i];
            if (i != blocks.length - 1) {
                var block = this.Block(block);
                if (this._parseMode == Entry.Parser.PARSE_GENERAL) {
                    code += block + '\n';
                } else if (this._parseMode == Entry.Parser.PARSE_SYNTAX) {
                    code = block + '\n';
                }
            } else {
                var block = this.Block(block);
                if (this._parseMode == Entry.Parser.PARSE_GENERAL) {
                    code += block;
                } else if (this._parseMode == Entry.Parser.PARSE_SYNTAX) {
                    code = block;
                }
            }
        }
        return code + '\n';
    };

    p.Block = function (block) {
        if (block._schema.syntax.js) var syntax = block._schema.syntax.js;else var syntax = block._schema.syntax;

        if (!syntax) return '';
        var syntaxType = syntax[0];
        var block = this[syntaxType](block);
        return block;
    };

    p.Program = function (block) {
        return '';
    };

    p.Scope = function (block) {
        var notParenthesis = false;
        var result = '';
        var paramReg = /(%.)/im;
        if (block._schema.syntax.js) {
            var syntax = block._schema.syntax.js.concat();
            notParenthesis = true;
        } else {
            var syntax = block._schema.syntax.concat();
        }

        syntax.shift();
        var syntaxTokens = syntax[0].split(paramReg);

        var schemaParams = block._schema.params;
        var dataParams = block.data.params;

        for (var i = 0; i < syntaxTokens.length; i++) {
            var syntaxToken = syntaxTokens[i];
            if (syntaxToken.length === 0 || syntaxToken === 'Scope') continue;
            if (syntaxToken === 'Judge') {
                notParenthesis = true;
                continue;
            }
            if (paramReg.test(syntaxToken)) {
                var paramIndex = syntaxToken.split('%')[1];
                var index = parseInt(paramIndex) - 1;
                if (schemaParams[index]) {
                    if (schemaParams[index].type == 'Image') {
                        index++;
                    } else if (schemaParams[index].type == 'Block') {
                        var param = this.Block(dataParams[index]);
                        result += param;
                    } else {
                        result += this[schemaParams[index].type](dataParams[index], schemaParams[index]);
                    }
                }
            } else {
                result += syntaxToken;
            }
        }

        if (result.charAt(result.length - 1) == '#') {
            notParenthesis = true;
            result = result.substring(0, result.length - 1);
            result = result.trim();
        }

        if (!notParenthesis) result += '();';

        result = Entry.TextCodingUtil.jsAdjustSyntax(block, result);

        return result;

        //return syntax.splice(1, syntax.length - 1).join(".") + "();\n";
    };

    p.BasicFunction = function (block) {
        var statementCode = this.Thread(block.statements[0]);
        var code = 'function promise() {\n' + this.indent(statementCode).trim() + '}';
        return code;
    };

    p.BasicIteration = function (block) {
        var iterateNumber = block.params[0];
        var iterVariable = this.publishIterateVariable();
        var statementCode = this.Thread(block.statements[0]);
        this.unpublishIterateVariable();
        var code = 'for (var ' + iterVariable + ' = 0; ' + iterVariable + ' < ' + iterateNumber + '; ' + iterVariable + '++) {\n' + this.indent(statementCode) + '}';
        return code;
    };

    p.BasicIf = function (block) {
        var code;
        if (block.data.statements.length == 2) {
            var statementCode1 = this.Thread(block.statements[0]);
            var statementCode2 = this.Thread(block.statements[1]);
            var syntax = block._schema.syntax.concat();

            var paramBlock = block.data.params[0];

            if (paramBlock && paramBlock.data.type == 'True') {
                var param = syntax[1];
            } else {
                if (paramBlock === undefined) var param = syntax[1];else var param = this.Block(paramBlock);
            }

            code = 'if (' + param + ') {\n' + this.indent(statementCode1) + '}\n' + 'else {\n' + this.indent(statementCode2) + '}\n';
        } else {
            var statementCode1 = this.Thread(block.statements[0]);
            var syntax = block._schema.syntax.concat();

            var paramBlock = block.data.params[0];

            if (paramBlock && paramBlock.data.type == 'True') {
                var param = syntax[1];
            } else {
                if (paramBlock === undefined) var param = syntax[1];else var param = this.Block(paramBlock);
            }

            code = 'if (' + param + ') {\n' + this.indent(statementCode1) + '}\n';
        }

        return code;
    };

    p.BasicWhile = function (block) {
        var statementCode = this.Thread(block.statements[0]);
        var syntax = block._schema.syntax.concat();
        var code = 'while (' + syntax[1] + ') {\n' + this.indent(statementCode) + '}\n';
        return code;
    };

    p.indent = function (textCode) {
        var result = '';
        var indentedCode = textCode.split('\n');

        for (var i in indentedCode) {
            var item = indentedCode[i];

            if (item.length == 0) continue;

            result += '\t' + item + '\n';
        }

        return result;
    };

    // iterate variable
    p.publishIterateVariable = function () {
        var iterVariable = '';
        var iterVariableCount = this._iterVariableCount;
        do {
            var chunk = this._iterVariableChunk[iterVariableCount % 3];
            iterVariable = chunk + iterVariable;
            iterVariableCount = parseInt(iterVariableCount / 3) - 1;
            if (iterVariableCount === 0) iterVariable = this._iterVariableChunk[0] + iterVariable;
        } while (iterVariableCount > 0);
        this._iterVariableCount++;
        return iterVariable;
    };

    p.unpublishIterateVariable = function () {
        if (this._iterVariableCount) this._iterVariableCount--;
    };

    p.Dropdown = function (dataParam) {
        var value = dataParam;
        if (value == 'OBSTACLE') value = 'stone';else if (value == 'ITEM') value = value.toLowerCase();else if (value == 'WALL') value = value.toLowerCase();

        var result = "'" + value + "'";

        return result;
    };

    p.TextInput = function (dataParam) {
        var result = dataParam;

        return result;
    };

    p.DropdownDynamic = function (dataParam, schemaParam) {
        var object = Entry.playground.object;

        if (dataParam == 'null') {
            dataParam = 'none';
        } else {
            dataParam = Entry.TextCodingUtil.dropdownDynamicValueConvertor(dataParam, schemaParam);
        }

        return dataParam;
    };

    p.searchSyntax = function (datum) {
        if (datum instanceof Entry.BlockView) datum = datum.block;
        return this._parentParser.parse(datum, Entry.Parser.PARSE_SYNTAX);
    };

    p.getAssistScope = function () {
        if (this._assist) return this._assist;

        var assist = {};
        for (var key in this.syntax.Scope) {
            if (key.indexOf('%') < 0) assist[key + '();\n'] = this.syntax.Scope[key];
        }
        this._assist = assist;
        return assist;
    };
})(Entry.BlockToJsParser.prototype);

/***/ }),

/***/ "./src/textcoding/parser/core/block/blockToPy.js":
/*!*******************************************************!*\
  !*** ./src/textcoding/parser/core/block/blockToPy.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Entry.BlockToPyParser = function () {
    this._type = 'BlockToPyParser';

    var funcParamMap = new Entry.Map();
    this._funcParamMap = funcParamMap;

    var funcDefMap = {};
    this._funcDefMap = {};

    this._variableDeclaration = null;
    this._listDeclaration = null;
    this._forIdCharIndex = 0;
};

(function (p) {
    p.Code = function (code, parseMode) {
        this._parseMode = parseMode;
        if (!code) return;
        if (code instanceof Entry.Thread) return this.Thread(code);
        if (code instanceof Entry.Block) return this.Block(code);

        var textCode = '',
            threads = code.getThreads();

        for (var i = 0; i < threads.length; i++) {
            this._forIdCharIndex = 0;
            var thread = threads[i];

            textCode += this.Thread(thread) + '\n';
        }
        textCode = textCode.trim();

        return textCode;
    };

    p.Thread = function (thread) {
        if (thread instanceof Entry.Block) return this.Block(thread);
        var result = '',
            blocks = thread.getBlocks();
        var isEventBlock = false;
        var rootBlock;
        var rootResult = '';
        var contentResult = '';
        var definition = '';

        for (var i = 0; i < blocks.length; i++) {
            var block = blocks[i];
            if (this._parseMode == Entry.Parser.PARSE_GENERAL) {
                /*if(Entry.TextCodingUtil.isNoPrintBlock(block))
                    continue;*/
                if (i == 0) {
                    rootBlock = block;
                    isEventBlock = Entry.TextCodingUtil.isEventBlock(block);
                    if (isEventBlock) rootResult = this.Block(block) + '\n';else contentResult += this.Block(block) + '\n';
                } else if (i != 0) {
                    var content = this.Block(block) + '\n';
                    contentResult += content;
                }
            } else if (this._parseMode == Entry.Parser.PARSE_SYNTAX) {
                isEventBlock = Entry.TextCodingUtil.isEventBlock(block);
                if (isEventBlock) result = definition;else result = this.Block(block) + '\n';
            }
        }

        if (this._parseMode == Entry.Parser.PARSE_GENERAL) {
            if (isEventBlock) {
                contentResult = Entry.TextCodingUtil.indent(contentResult);
                result = rootResult + contentResult + '\n';
            } else {
                result = rootResult + contentResult + '\n';
            }
        }
        result = result.trim() + '\n';
        return result;
    };

    p.Block = function (block, template) {
        if (!block || !(block instanceof Entry.Block)) return '';
        !block._schema && block.loadSchema();

        var result = '';
        var syntaxObj, syntax, textParams;

        syntaxObj = this.searchSyntax(block);
        if (syntaxObj) {
            syntax = syntaxObj.syntax;
            if (syntaxObj.textParams) {
                textParams = syntaxObj.textParams;
            }
        }

        // User Function
        if (this.isFunc(block)) {
            if (!this._hasRootFunc) {
                this._rootFuncId = block.data.type;
                this._funcDefMap[block.data.type] = this.makeFuncDef(block, this._hasRootFunc);
                this._hasRootFunc = false;
            }
            if (this.isRegisteredFunc(block)) syntax = this.makeFuncSyntax(block);
            if (this._parseMode == Entry.Parser.PARSE_SYNTAX) return syntax;
        } else if (this.isFuncStmtParam(block)) {
            result += block.data.type;
        }

        if (!syntax && !this.isFuncStmtParam(block)) {
            var error = new Error();
            error.block = block;
            throw error;
        }

        var blockReg = /(%.)/im;
        var statementReg = /(\$.)/im;
        var blockTokens = syntax.split(blockReg);
        var schemaParams = block._schema.params;
        var dataParams = block.data.params;
        var currentBlock = block;
        var currentBlockSkeleton = currentBlock._schema.skeleton;
        var currentBlockParamsKeyMap = currentBlock._schema.paramsKeyMap;
        var blockParam = '';

        for (var i = 0; i < blockTokens.length; i++) {
            var blockToken = blockTokens[i];
            if (blockToken.length === 0) continue;
            if (blockToken == '% ') {
                result += blockToken;
                continue;
            }
            if (blockReg.test(blockToken)) {
                var blockParamIndex = blockToken.split('%')[1];
                var index = Number(blockParamIndex) - 1;
                if (schemaParams[index]) {
                    if (schemaParams[index].type == 'Indicator') {
                        index++;
                    } else if (schemaParams[index].type == 'Block') {
                        var param = this.Block(dataParams[index]).trim();
                        if (syntaxObj.textParams && syntaxObj.textParams[index]) var textParam = syntaxObj.textParams[index];

                        var funcParam = this._funcParamMap.get(param);

                        if (funcParam) {
                            param = funcParam;
                            //continue;
                        } else {
                            var funcParamTokens = param.split('_');
                            var prefix = funcParamTokens[0];
                            if (funcParamTokens.length == 2) {
                                if (prefix == 'stringParam') {
                                    param = 'string_param';
                                } else if (prefix == 'booleanParam') {
                                    param = 'boolean_param';
                                }
                            }
                        }

                        if (textParam && textParam.paramType == 'index') {
                            if (Entry.Utils.isNumber(param)) param = param - 1;else {
                                var tokens = param.split('+');
                                if (tokens[tokens.length - 1] == ' 1)') {
                                    delete tokens[tokens.length - 1];
                                    param = tokens.join('+');
                                    param = param.substring(1, param.length - 2);
                                } else param += ' - 1';
                            }
                        }

                        if (textParam && textParam.paramType == 'integer') {
                            if (Entry.Utils.isNumber(param) && Entry.isFloat(param)) result = result.replace('randint', 'uniform');
                        }

                        result += param;
                    } else {
                        if (syntaxObj.textParams) var textParams = syntaxObj.textParams;else var textParams = [];

                        param = this['Field' + schemaParams[index].type](dataParams[index], textParams[index]);

                        result += param;
                        if (syntaxObj && syntaxObj.key == 'repeat_while_true') result = Entry.TextCodingUtil.assembleRepeatWhileTrueBlock(currentBlock, result);
                    }
                }
            } else if (statementReg.test(blockToken)) {
                var statements = blockToken.split(statementReg);
                for (var j = 0; j < statements.length; j++) {
                    var statementToken = statements[j];
                    if (statementToken.length === 0) continue;
                    if (statementReg.test(statementToken)) {
                        var index = Number(statementToken.split('$')[1]) - 1;
                        result += Entry.TextCodingUtil.indent(this.Thread(block.statements[index]));
                    } else result += statementToken;
                }
            } else {
                if (syntaxObj && syntaxObj.key == 'repeat_basic' && i == 0) {
                    var forStmtTokens = blockToken.split(' ');
                    forStmtTokens[1] = Entry.TextCodingUtil.generateForStmtIndex(this._forIdCharIndex++);
                    var forStmtText = forStmtTokens.join(' ');
                    blockToken = forStmtText;
                }

                if (syntaxObj && syntaxObj.key == 'substring' && i == 2 && Entry.Utils.isNumber(result)) {
                    result = '"' + result + '"';
                }

                result += blockToken;
            }
        }
        return result;
    };

    p.searchSyntax = function (datum) {
        var schema;
        var appliedParams;
        if (datum instanceof Entry.BlockView) {
            schema = datum.block._schema;
            appliedParams = datum.block.data.params;
        } else if (datum instanceof Entry.Block) {
            schema = datum._schema;
            appliedParams = datum.params;
        } else schema = datum;

        if (schema && schema.syntax) {
            var syntaxes = schema.syntax.py.concat();
            while (syntaxes.length) {
                var isFail = false;
                var syntax = syntaxes.shift();
                if (typeof syntax === 'string') return { syntax: syntax, template: syntax };

                if (syntax.params) {
                    for (var i = 0; i < syntax.params.length; i++) {
                        if (syntax.params[i] && syntax.params[i] !== appliedParams[i]) {
                            isFail = true;
                            break;
                        }
                    }
                }
                if (!syntax.template) syntax.template = syntax.syntax;
                if (isFail) {
                    continue;
                }
                return syntax;
            }
        }
        return null;
    };

    p.FieldAngle = function (dataParam, textParam) {
        if (textParam && textParam.converter) dataParam = textParam.converter(dataParam);

        return dataParam;
    };

    p.FieldColor = function (dataParam, textParam) {
        if (textParam && textParam.converter) dataParam = textParam.converter(null, dataParam);
        return dataParam;
    };

    p.FieldDropdown = function (dataParam, textParam) {
        if ((typeof dataParam === 'undefined' ? 'undefined' : _typeof(dataParam)) == 'object') return 'None'.replace(/\"/gm, '');

        if (textParam && textParam.converter && textParam.options) {
            var options = textParam.options;
            for (var i in options) {
                var key = options[i][0];
                var value = options[i][1];
                if (dataParam == value) {
                    return dataParam = textParam.converter(key, value);
                }
            }
            dataParam = textParam.converter(dataParam, dataParam);
        }

        return dataParam;
    };

    p.FieldDropdownDynamic = function (dataParam, textParam) {
        if ((typeof dataParam === 'undefined' ? 'undefined' : _typeof(dataParam)) == 'object') return 'None'.replace(/\"/gm, '');

        if (textParam && textParam.converter && textParam.options) {
            var options = textParam.options;
            for (var i in options) {
                var key = options[i][0];
                var value = options[i][1];
                if (dataParam == value) {
                    var name = Entry.TextCodingUtil.dropdownDynamicIdToNameConvertor(value, textParam.menuName);
                    if (name) key = name;
                    return dataParam = textParam.converter(key, value);
                }
            }
            var value = Entry.TextCodingUtil.dropdownDynamicIdToNameConvertor(dataParam, textParam.menuName);
            if (value) dataParam = textParam.converter(value, value);else dataParam = textParam.converter(dataParam, dataParam);

            var reg = /None/;
            if (reg.test(dataParam)) {
                dataParam = dataParam.replace(/\"/gm, '');
            }
        }

        return dataParam;
    };

    p.FieldImage = function (dataParam, textParam) {
        if (textParam && textParam.converter) dataParam = textParam.converter(null, dataParam);

        return dataParam;
    };

    p.FieldIndicator = function (dataParam, textParam) {
        return dataParam;
    };

    p.FieldKeyboard = function (dataParam, textParam) {
        var reg = /None/;
        if (reg.test(dataParam)) {
            return dataParam.replace(/\"/gm, '');
        }

        var map = Entry.KeyboardCode.map;
        for (var key in map) {
            var value = map[key];
            if (value == dataParam) {
                dataParam = key;
                break;
            }
        }

        if (textParam && textParam.converter) dataParam = textParam.converter(dataParam, null);

        dataParam = dataParam.toLowerCase();
        return dataParam;
    };

    p.FieldOutput = function (dataParam, textParam) {
        return dataParam;
    };

    p.FieldText = function (dataParam, textParam) {
        if (textParam && textParam.converter) dataParam = textParam.converter(null, dataParam);

        return dataParam;
    };

    p.FieldTextInput = function (dataParam, textParam) {
        if (typeof dataParam != 'number') {
            dataParam = dataParam.replace('\t', '    ');
            var spaces = dataParam.split(/ /);

            if (dataParam.length == spaces.length - 1) dataParam = '"()"'.replace('()', dataParam);
        }

        if (textParam && textParam.converter) dataParam = textParam.converter(null, dataParam);

        return dataParam;
    };

    p.FieldNumber = function (dataParam, textParam) {
        if (textParam && textParam.converter) dataParam = textParam.converter(null, dataParam);

        return dataParam;
    };

    p.isFunc = function (block) {
        if (!block || !block.data || !block.data.type) return false;
        var tokens = block.data.type.split('_');
        var prefix = tokens[0];
        var funcId = tokens[1];

        if (prefix == 'func') return true;else return false;
    };

    p.isRegisteredFunc = function (block) {
        var tokens = block.data.type.split('_');
        var prefix = tokens[0];
        var funcId = tokens[1];
        return !!Entry.variableContainer.functions_[funcId];
    };

    p.isFuncStmtParam = function (block) {
        if (!block || !block.data || !block.data.type) return false;
        var blockType = block.data.type;
        var tokens = blockType.split('_');
        var prefix = tokens[0];

        if (prefix == 'stringParam' || prefix == 'booleanParam') return true;else return false;
    };

    p.makeFuncSyntax = function (funcBlock) {
        var syntax = '';
        if (funcBlock && funcBlock._schema) if (funcBlock._schema.template) var schemaTemplate = funcBlock._schema.template.trim();else if (funcBlock._schema.params) var schemaParams = funcBlock._schema.params;else if (funcBlock && !funcBlock._schema) {
            if (this._hasRootFunc) {
                var rootFunc = Entry.block[this._rootFuncId];
                var schemaParams = rootFunc.block.params;
                var schemaTemplate = rootFunc.block.template;
            }
        }

        var paramReg = /(%.)/im;
        if (schemaTemplate) var funcTokens = schemaTemplate.trim().split(paramReg);

        var funcName = '';
        var funcParams = '';

        for (var f in funcTokens) {
            var funcToken = funcTokens[f].trim();
            if (paramReg.test(funcToken)) {
                var num = funcToken.split('%')[1];
                if (num == 1) continue;else num -= 1;
                var index = num - 1;
                if (schemaParams && schemaParams[index] && schemaParams[index].type == 'Indicator') continue;

                funcParams += '%'.concat(num).concat(', ');
            } else {
                var funcTokenArr = funcToken.split(' ');
                funcName += funcTokenArr.join('__');
            }
        }

        var index = funcParams.lastIndexOf(',');
        funcParams = funcParams.substring(0, index);

        syntax = funcName.trim().concat('(').concat(funcParams.trim()).concat(')');

        return syntax;
    };

    p.makeFuncDef = function (funcBlock, exp) {
        if (!this.isRegisteredFunc(funcBlock)) return;
        var result = '';
        var func = this.getFuncInfo(funcBlock);
        if (func) result += func.name;else return;

        var paramResult = '';
        if (func.params && func.params.length != 0) {
            for (var p in func.params) {
                //var param = func.params[p];
                /*if(param instanceof Entry.Block)
                    paramResult += this.Block(param);
                else*/
                paramResult += func.params[p];
                if (p != func.params.length - 1) paramResult = paramResult.concat(', ');
            }
            paramResult = paramResult.trim();
        }
        result = result.concat('(').concat(paramResult).concat(')');
        if (exp) return result;else result = 'def ' + result;

        this._hasRootFunc = true;

        result = result.concat(':\n');
        if (func.statements && func.statements.length) {
            var stmtResult = '';
            for (var s in func.statements) {
                var block = func.statements[s];

                if (this.getFuncInfo(block)) {
                    stmtResult += this.makeFuncDef(block, true).concat('\n');
                } else {
                    stmtResult += this.Block(block).concat('\n');
                }
            }
            //stmtResult = stmtResult.concat('\n');
            result += Entry.TextCodingUtil.indent(stmtResult).concat('\n');
        }
        //this._funcParamMap.clear();

        return result.trim();
    };

    p.getFuncInfo = function (funcBlock) {
        var result = {};
        var funcId = funcBlock.getFuncId();

        var func = funcId && Entry.variableContainer.getFunction(funcId);
        if (!func) return null;

        var funcName = func.block.template.split(/%\d/)[0].trim().split(' ').join('__');

        Entry.TextCodingUtil.initQueue();

        var funcContents = func.content.getEventMap('funcDef')[0].getThread().getBlocks();
        var defBlock = funcContents.shift();

        Entry.TextCodingUtil.gatherFuncDefParam(defBlock.getParam(0));

        var that = this;
        var funcParams = [];

        if (!this._hasRootFunc) {
            var funcDefParams = [];
            var param;
            while (param = Entry.TextCodingUtil._funcParamQ.dequeue()) {
                funcDefParams.push(param);
            }funcDefParams.forEach(function (value, index) {
                if (/(string|boolean)Param/.test(value)) {
                    var name = 'param' + ++index;
                    funcParams.push(name);
                    that._funcParamMap.put(value, name);
                }
            });
        } else {
            funcBlock.params.filter(function (p) {
                return p instanceof Entry.Block;
            }).forEach(function (p) {
                var paramText = that.Block(p);
                if (!paramText) return;
                paramText = that._funcParamMap.get(paramText) || paramText;
                funcParams.push(paramText);
            });
        }

        Entry.TextCodingUtil.clearQueue();

        if (funcName) result.name = funcName;
        if (funcParams.length !== 0) result.params = funcParams;
        if (funcContents.length !== 0) result.statements = funcContents;

        return result;
    };
})(Entry.BlockToPyParser.prototype);

/***/ }),

/***/ "./src/textcoding/parser/core/text/jsToBlock.js":
/*!******************************************************!*\
  !*** ./src/textcoding/parser/core/text/jsToBlock.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


Entry.JsToBlockParser = function (syntax, parentParser) {
    this._type = "JsToBlockParser";
    this.syntax = syntax;

    this.scopeChain = [];
    this.scope = null;

    this._blockCount = 0;
    this._blockInfo = {};
    this._parentParser = parentParser;
};

(function (p) {
    p.Program = function (astArr) {
        var code = [];
        var thread = [];

        thread.push({
            type: this.syntax.Program
        });

        for (var index in astArr) {
            var node = astArr[index];
            if (node.type != 'Program') return;

            //block statement
            var separatedBlocks = this.initScope(node);
            var blocks = this.BlockStatement(node);

            for (var i in blocks) {
                var block = blocks[i];

                thread.push(block);
            }

            this.unloadScope();
            if (thread.length != 0) code.push(thread);
        }
        return code;
    };

    p.Identifier = function (node) {
        return node.name;
    };

    p.Literal = function (node, type) {
        if (node.value === true) return { type: 'True' };else if (node.value === false) return { type: 'False' };

        if (type == "ai_distance_value") return node.value;else if (type == "ai_boolean_object") return node.value;else return { type: 'text', params: [node.value] };
    };

    // Statement
    p.ExpressionStatement = function (node) {
        var expression = node.expression;
        return this[expression.type](expression);
    };

    p.ForStatement = function (node) {
        var init = node.init,
            test = node.test,
            update = node.update,
            body = node.body;

        var contents = "";

        var blockType = this.syntax.ForStatement;

        if (!blockType) {
            body = this[body.type](body);

            var startVal = init.declarations[0].init.value;
            var test = test;
            var op = test.operator;
            var endVal = test.right.value;
            var updateOp = update.operator;

            var res = 0;
            if (!(updateOp == '++')) {
                var temp = startVal;
                var startVal = endVal;
                var endVal = temp;
            }

            switch (op) {
                case '<':
                    res = endVal - startVal;
                    break;

                case '<=':
                    res = endVal + 1 - startVal;
                    break;

                case '>':
                    res = startVal - endVal;
                    break;

                case '>=':
                    res = startVal + 1 - endVal;
                    break;
            }

            return this.BasicIteration(node, res, body);
        } else {
            throw {
                message: '지원하지 않는 표현식 입니다.',
                node: node
            };
        }
    };

    p.BlockStatement = function (node) {
        var blocks = [];
        var body = node.body;

        for (var i = 0; i < body.length; i++) {
            var bodyData = body[i];
            var block = this[bodyData.type](bodyData);

            if (!Entry.TextCodingUtil.hasBlockInfo(bodyData, this._blockInfo)) this._blockCount++;

            Entry.TextCodingUtil.updateBlockInfo(bodyData, this._blockInfo);

            if (!block) continue;else if (block.type === undefined) {
                throw {
                    title: '블록변환 오류',
                    message: '지원하지 않는 블록입니다.',
                    node: bodyData,
                    blockCount: this._blockCount
                };
            } else if (Entry.TextCodingUtil.isParamBlock(block)) {} else if (block) {
                blocks.push(block);
            }
        }

        return blocks;
    };

    p.EmptyStatement = function (node) {
        throw {
            message: 'empty는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.DebuggerStatement = function (node) {
        throw {
            message: 'debugger는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.WithStatement = function (node) {
        var object = node.object,
            body = node.body;

        throw {
            message: 'with는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    //control flow
    p.ReturnStaement = function (node) {
        var args = node.arguments;

        throw {
            message: 'return은 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.LabeledStatement = function (node) {
        var label = node.label,
            body = node.body;

        throw {
            message: 'label은 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.BreakStatement = function (node) {
        var label = node.label;

        throw {
            message: 'break는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.ContinueStatement = function (node) {
        var label = node.label;

        throw {
            message: 'continue는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.IfStatement = function (node) {
        var test = node.test,
            consequent = node.consequent,
            alternate = node.alternate;

        var blockType = this.syntax.BasicIf;
        if (blockType) {
            return this.BasicIf(node);
        } else {
            throw {
                message: 'if는 지원하지 않는 표현식 입니다.',
                node: node
            };
        }
    };

    p.SwitchStatement = function (node) {
        var discriminant = node.discriminant,
            cases = node.cases;

        throw {
            message: 'switch는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.SwitchCase = function (node) {
        var test = node.test,
            consequent = node.consequent;

        throw {
            message: 'switch ~ case는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    //throwstatement

    p.ThrowStatement = function (node) {
        var args = node.arguments;

        throw {
            message: 'throw는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.TryStatement = function (node) {
        var block = node.block,
            handler = node.handler,
            finalizer = node.finalizer;

        throw {
            message: 'try는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.CatchClause = function (node) {
        var param = node.param,
            body = node.body;

        throw {
            message: 'catch는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.WhileStatement = function (node) {
        var test = node.test,
            body = node.body;
        var blockType = this.syntax.WhileStatement;
        body = this[body.type](body);

        if (!blockType) {
            return this.BasicWhile(node, body);
        } else {

            throw {
                message: 'while은 지원하지 않는 표현식 입니다.',
                node: node
            };
        }
    };

    p.DoWhileStatement = function (node) {
        var body = node.body,
            test = node.test;

        throw {
            message: 'do ~ while은 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.ForInStatement = function (node) {
        var left = node.left,
            right = node.right,
            body = node.body;

        throw {
            message: 'for ~ in은 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    //Declaration

    p.FunctionDeclaration = function (node) {
        var id = node.id;

        var blockType = this.syntax.FunctionDeclaration;

        if (!blockType) {
            return null;
        } else {
            throw {
                message: 'function은 지원하지 않는 표현식 입니다.',
                node: node
            };
        }
    };

    p.VariableDeclaration = function (node) {
        var declaration = node.declarations,
            kind = node.kind;

        throw {
            message: 'var은 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    // Expression
    p.ThisExpression = function (node) {
        return this.scope.this;
    };

    p.ArrayExpression = function (node) {
        var elements = node.elements;

        throw {
            message: 'array는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.ObjectExpression = function (node) {
        var property = node.property;

        throw {
            message: 'object는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.Property = function (node) {
        var key = node.key,
            value = node.value,
            kind = node.kind;

        throw {
            message: 'init, get, set은 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.FunctionExpression = function (node) {
        throw {
            message: 'function은 지원하지 않는 표현식 입니다.',
            node: node
        };
    };
    // unary expression

    p.UnaryExpression = function (node) {
        var operator = node.operator,
            prefix = node.prefix,
            args = node.argument;

        throw {
            message: operator + '은(는) 지원하지 않는 명령어 입니다.',
            node: node
        };
    };

    p.UnaryOperator = function () {
        return ["-", "+", "!", "~", "typeof", "void", "delete"];
    };

    p.updateOperator = function () {
        return ["++", "--"];
    };

    //Binary expression
    p.BinaryOperator = function () {
        return ["==", "!=", "===", "!==", "<", "<=", ">", ">=", "<<", ">>", ">>>", "+", "-", "*", "/", "%", ",", "^", "&", "in", "instanceof"];
    };

    p.AssignmentExpression = function (node) {
        var operator = node.operator,
            left = node.left,
            right = node.right;

        throw {
            message: operator + '은(는) 지원하지 않는 명령어 입니다.',
            node: node
        };
    };

    p.AssignmentOperator = function () {
        return ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", ",=", "^=", "&="];
    };

    p.BinaryExpression = function (node) {
        var result = {};
        var structure = {};
        var operator = String(node.operator);
        var nodeLeftName = node.left.name;

        switch (operator) {
            case "==":
                if (nodeLeftName == "object_up" || nodeLeftName == "object_right" || nodeLeftName == "object_down") var type = "ai_boolean_object";else if (nodeLeftName == "radar_up" || nodeLeftName == "radar_right" || nodeLeftName == "radar_down") var type = "ai_boolean_distance";else var type = null;
                break;
            case "<":
                var type = "ai_boolean_distance";
                break;
            case "<=":
                var type = "ai_boolean_distance";
                break;
            case ">":
                var type = "ai_boolean_distance";
                break;
            case ">=":
                var type = "ai_boolean_distance";
                break;

            default:
                operator = operator;
        }

        if (type) {
            var params = [];
            var left = node.left;

            if (left.type == "Literal" || left.type == "Identifier") {
                var args = [];
                args.push(left);
                var paramsMeta = Entry.block[type].params;

                for (var p in paramsMeta) {
                    var paramType = paramsMeta[p].type;
                    if (paramType == "Indicator") {
                        var pendingArg = { raw: null, type: "Literal", value: null };
                        if (p < args.length) args.splice(p, 0, pendingArg);
                    } else if (paramType == "Text") {
                        var pendingArg = { raw: "", type: "Literal", value: "" };
                        if (p < args.length) args.splice(p, 0, pendingArg);
                    }
                }

                for (var i in args) {
                    var argument = args[i];

                    var param = this[argument.type](argument);
                    param = Entry.TextCodingUtil.radarVariableConvertor(param);

                    if (param && param != null) params.push(param);
                }
            } else {
                param = this[left.type](left);
                param = Entry.TextCodingUtil.radarVariableConvertor(param);
                if (param) params.push(param);
            }

            operator = String(node.operator);
            if (operator) {
                operator = Entry.TextCodingUtil.jTobBinaryOperatorConvertor(operator);
                param = operator;
                if (param) params.push(param);

                structure.operator = operator;
            }

            var right = node.right;

            if (right.type == "Literal" || right.type == "Identifier") {
                var args = [];
                args.push(right);
                var paramsMeta = Entry.block[type].params;

                for (var p in paramsMeta) {
                    var paramType = paramsMeta[p].type;
                    if (paramType == "Indicator") {
                        var pendingArg = { raw: null, type: "Literal", value: null };
                        if (p < args.length) args.splice(p, 0, pendingArg);
                    } else if (paramType == "Text") {
                        var pendingArg = { raw: "", type: "Literal", value: "" };
                        if (p < args.length) args.splice(p, 0, pendingArg);
                    }
                }

                for (var i in args) {
                    var argument = args[i];
                    var param = this[argument.type](argument);

                    if (typeof param == "string") {
                        var nameTokens = param.split("_");

                        if (nameTokens[0] == 'radar') {
                            var result = {};
                            result.type = "ai_distance_value";
                            result.params = [];
                            result.params.push(nameTokens[1].toUpperCase());
                            param = result;
                        }
                    }

                    if (param && param != null) {
                        if (type == "ai_boolean_object") {
                            param = param.params[0];
                            params.splice(1, 1);
                        }

                        param = Entry.TextCodingUtil.tTobDropdownValueConvertor(param);
                        params.push(param);

                        if (params[2] && params[2].type != "text" && params[2].type != "ai_distance_value") {
                            throw {
                                message: '지원하지 않는 표현식 입니다.',
                                node: node.test
                            };
                        }
                    }
                }
            } else {
                param = this[right.type](right);
                if (type == "ai_boolean_object") {
                    param = param.params[0];
                    params.splice(1, 1);
                }

                if (param) params.push(param);
            }

            structure.type = type;
            structure.params = params;
        } else {
            throw {
                message: '지원하지 않는 표현식 입니다.',
                node: node.test
            };
        }

        result = structure;

        return result;
    };

    p.LogicalExpression = function (node) {
        var result;
        var structure = {};

        var operator = String(node.operator);

        switch (operator) {
            case '&&':
                var type = "ai_boolean_and";
                break;
            default:
                var type = "ai_boolean_and";
                break;
        }

        var params = [];
        var left = node.left;

        if (left.type == "Literal" || left.type == "Identifier") {
            var args = [];
            args.push(left);
            var paramsMeta = Entry.block[type].params;

            for (var p in paramsMeta) {
                var paramType = paramsMeta[p].type;
                if (paramType == "Indicator") {
                    var pendingArg = { raw: null, type: "Literal", value: null };
                    if (p < args.length) args.splice(p, 0, pendingArg);
                } else if (paramType == "Text") {
                    var pendingArg = { raw: "", type: "Literal", value: "" };
                    if (p < args.length) args.splice(p, 0, pendingArg);
                }
            }

            for (var i in args) {
                var argument = args[i];
                var param = this[argument.type](argument);
                if (param && param != null) params.push(param);
            }
        } else {
            param = this[left.type](left);
            if (param) params.push(param);
        }

        operator = String(node.operator);
        if (operator) {
            operator = Entry.TextCodingUtil.logicalExpressionConvert(operator);
            param = operator;
            params.push(param);
        }

        var right = node.right;

        if (right.type == "Literal" || right.type == "Identifier") {
            var args = [];
            args.push(right);
            var paramsMeta = Entry.block[type].params;
            //var paramsDefMeta = Entry.block[type].def.params;

            for (var p in paramsMeta) {
                var paramType = paramsMeta[p].type;
                if (paramType == "Indicator") {
                    var pendingArg = { raw: null, type: "Literal", value: null };
                    if (p < args.length) args.splice(p, 0, pendingArg);
                } else if (paramType == "Text") {
                    var pendingArg = { raw: "", type: "Literal", value: "" };
                    if (p < args.length) args.splice(p, 0, pendingArg);
                }
            }

            for (var i in args) {
                var argument = args[i];
                var param = this[argument.type](argument);

                if (param && param != null) params.push(param);
            }

            if (params[0].type != "True" && params[0].type != "ai_boolean_distance" && params[0].type != "ai_boolean_object" && params[0].type != "ai_boolean_and" && params[0].type != "ai_distance_value") {
                throw {
                    message: '지원하지 않는 명렁어 입니다.',
                    node: node
                };
            }

            if (params[2].type != "True" && params[2].type != "ai_boolean_distance" && params[2].type != "ai_boolean_object" && params[2].type != "ai_boolean_and" && params[2].type != "ai_distance_value") {
                throw {
                    message: '지원하지 않는 명렁어 입니다.',
                    node: node
                };
            }
        } else {
            param = this[right.type](right);
            if (param) params.push(param);
        }

        structure.type = type;
        structure.params = params;

        result = structure;
        return result;
    };

    p.LogicalOperator = function () {
        return ["||", "&&"];
    };

    p.MemberExpression = function (node) {
        var object = node.object,
            property = node.property,
            computed = node.computed;

        object = this[object.type](object);

        property = this[property.type](property, object);

        if (!(Object(object) === object && Object.getPrototypeOf(object) === Object.prototype)) {
            throw {
                message: object + '은(는) 잘못된 멤버 변수입니다.',
                node: node
            };
        }

        var blockType = property;
        if (!blockType) {
            throw {
                message: property + '이(가) 존재하지 않습니다.',
                node: node
            };
        }
        return blockType;
    };

    p.ConditionalExpression = function (node) {
        var test = node.test,
            alternate = node.alternate,
            consequent = node.consequent;

        throw {
            message: '지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.UpdateExpression = function (node) {
        var operator = node.operator,
            args = node.argument,
            prefix = node.prefix;

        throw {
            message: operator + '은(는) 지원하지 않는 명렁어 입니다.',
            node: node
        };
    };

    p.CallExpression = function (node) {
        var callee = node.callee,
            args = node.arguments;
        var params = [];
        var blockType = this[callee.type](callee);

        var type = this.syntax.Scope[blockType];
        var block = Entry.block[type];
        var blockParams = block.params;

        for (var i = 0; i < args.length; i++) {
            var arg = args[i];
            var value = this[arg.type](arg, type);
            var paramType = blockParams[i].type;

            if (paramType == "Dropdown") {
                params.push(value);
            } else if (paramType === 'Block') {
                var paramBlock;
                if (typeof value == 'string') {
                    paramBlock = { type: 'text', params: [value] };
                } else if (typeof value == 'number') {
                    paramBlock = { type: 'number', params: [value] };
                } else {
                    paramBlock = value;
                }
                params.push(paramBlock);
            } else {
                params.push(value);
            }

            if (value.type !== paramType && this._parentParser) {
                var title = Lang.Msgs.warn;
                //lineNubmer start from 0
                var lineNumber = this._parentParser.getLineNumber(node.start, node.end).from.line + 1;
                var content = Lang.TextCoding.warn_unnecessary_arguments;
                content = content.replace('&(calleeName)', callee.name).replace('&(lineNumber)', lineNumber);
                Entry.toast.warning(title, content);
            }
        }

        return {
            type: type,
            params: params
        };
    };

    p.NewExpression = function (node) {
        throw {
            message: 'new는 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    p.SequenceExpression = function (node) {
        var expressions = node.expressions;

        throw {
            message: 'SequenceExpression 지원하지 않는 표현식 입니다.',
            node: node
        };
    };

    // scope method
    p.initScope = function (node) {
        if (this.scope === null) {
            var scoper = function scoper() {};
            scoper.prototype = this.syntax.Scope;
            this.scope = new scoper();
        } else {
            var scoper = function scoper() {};
            scoper.prototype = this.scope;
            this.scope = new scoper();
        }

        this.scopeChain.push(this.scope);
        return this.scanDefinition(node);
    };

    p.unloadScope = function () {
        this.scopeChain.pop();
        if (this.scopeChain.length) this.scope = this.scopeChain[this.scopeChain.length - 1];else this.scope = null;
    };

    p.scanDefinition = function (node) {
        var body = node.body;
        var separatedBlocks = [];
        for (var i = 0; i < body.length; i++) {
            var childNode = body[i];
            if (childNode.type === "FunctionDeclaration") {
                this.scope[childNode.id.name] = this.scope.promise;
                if (this.syntax.BasicFunction) {
                    var childBody = childNode.body;
                    separatedBlocks.push([{
                        type: this.syntax.BasicFunction,
                        statements: [this[childBody.type](childBody)]
                    }]);
                }
            }
        }
        return separatedBlocks;
    };

    p.BasicFunction = function (node, body) {
        return null;
    };

    // custom node parser
    p.BasicIteration = function (node, iterCount, body) {
        if (iterCount > 10) {
            throw {
                message: '반복 숫자값이 10을 넘으면 안됩니다.',
                node: node.test
            };
        }

        var blockType = this.syntax.BasicIteration;
        if (!blockType) throw {
            message: '지원하지 않는 표현식 입니다.',
            node: node
        };
        return {
            params: [iterCount],
            type: blockType,
            statements: [body]
        };
    };

    p.BasicWhile = function (node, body) {
        var raw = node.test.raw;
        if (this.syntax.BasicWhile[raw]) {
            return {
                type: this.syntax.BasicWhile[raw],
                statements: [body]
            };
        } else {
            throw {
                message: '지원하지 않는 표현식 입니다.',
                node: node.test
            };
        }
    };

    p.BasicIf = function (node) {
        var result = {};
        result.params = [];
        result.statements = [];
        var type;
        var stmtCons = [];
        var stmtAlt = [];
        var params = [];
        var cons = node.consequent;
        if (cons) var consequent = this[cons.type](cons);

        var alt = node.alternate;
        if (alt) var alternate = this[alt.type](alt);

        try {
            var test = '';
            if (node.test.operator) var operator = node.test.operator === '===' ? '==' : node.test.operator;else var operator = null;

            if (node.test.left && node.test.right) var testCondition = node.test.left.name + node.test.right.value;else var testCondition = null;

            if (testCondition == "frontwall" && operator == "==") {
                test = "front == \'wall\'";
                type = this.syntax.BasicIf[test];
            } else if (testCondition == "fronthump" && operator == "==") {
                test = "front == \'hump\'";
                type = this.syntax.BasicIf[test];
            } else if (testCondition == "frontstone" && operator == "==") {
                test = "front == \'stone\'";
                type = this.syntax.BasicIf[test];
            } else if (testCondition == "frontbee" && operator == "==") {
                test = "front == \'bee\'";
                type = this.syntax.BasicIf[test];
            } else {
                if (node.test.value || node.test.left && node.test.right) {
                    type = "ai_if_else";
                    var callExData = this[node.test.type](node.test, this.syntax.Scope);
                    var value = callExData.params[2];
                    params.push(callExData);
                } else {
                    throw {
                        message: '지원하지 않는 표현식 입니다.',
                        node: node.test
                    };
                }
            }

            if (type) {
                if (consequent && consequent.length != 0) {
                    stmtCons = consequent;
                    result.statements.push(stmtCons);
                }

                if (alternate && alternate.length != 0) {
                    stmtAlt = alternate;
                    result.statements.push(stmtAlt);
                }

                if (type) result.type = type;
                if (params && params.length != 0) result.params = params;

                return result;
            } else {
                if (consequent && consequent.length != 0) stmtCons = consequent;

                if (alternate && alternate.length != 0) stmtAlt = alternate;

                if (type) result.type = type;
                if (params && params.length != 0) result.params = params;

                result.statements = [stmtCons, stmtAlt];

                return result;
                //throw new Error();
            }
        } catch (e) {
            throw {
                message: '지원하지 않는 표현식 입니다.',
                node: node.test
            };
        }
    };

    p.searchSyntax = function (datum) {
        return null;
    };
})(Entry.JsToBlockParser.prototype);

/***/ }),

/***/ "./src/textcoding/parser/core/text/pyToBlock.js":
/*!******************************************************!*\
  !*** ./src/textcoding/parser/core/text/pyToBlock.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Entry.PyToBlockParser = function (blockSyntax) {
    this._type = 'PyToBlockParser';
    this.dic = blockSyntax['#dic'];
    this.blockSyntax = blockSyntax;

    this._funcParamMap = {};
    this._funcMap = {};

    this._isInFuncDef = false;
};

(function (p) {
    p.util = Entry.TextCodingUtil;

    p.binaryOperator = {
        '==': 'EQUAL',
        '>': 'GREATER',
        '<': 'LESS',
        '>=': 'GREATER_OR_EQUAL',
        '<=': 'LESS_OR_EQUAL'
    };

    p.arithmeticOperator = {
        '+': 'PLUS',
        '-': 'MINUS',
        '*': 'MULTI',
        '/': 'DIVIDE'
    };

    p.divideOperator = {
        '//': 'QUOTIENT',
        '%': 'MOD'
    };

    p.logicalOperator = {
        '&&': 'AND',
        '||': 'OR'
    };

    p.Programs = function (astArr) {
        try {
            return this.processPrograms(astArr);
        } catch (error) {
            var err = {};
            err.title = error.title;
            err.message = error.message;
            err.line = error.line;
            throw err;
        }
    };

    p.processPrograms = function (astArr) {
        this.createFunctionMap();
        this._funcParamMap = {};
        this._isInFuncDef = false;
        var ws = Entry.playground.mainWorkspace;
        if (ws && !ws.board.code) return [];
        this.object = ws ? ws.board.code.object : Entry.playground.object;

        var result;
        if (!astArr[0]) return [];
        var astArrBody = astArr[0].body;
        var hasVariable = astArrBody && astArrBody[0] && astArrBody[0].type === 'ExpressionStatement' && astArrBody[0].expression.type === 'AssignmentExpression';

        if (hasVariable) {
            var variableArr = this.getVariables(astArr[0]);
            astArr.splice(0, 1);
            var contentArr = astArr.map(this.Node, this);

            result = variableArr.concat(contentArr);
        } else {
            result = astArr.map(this.Node, this);
        }

        return result.filter(function (t) {
            return t.length > 0;
        });
    };

    p.Program = function (component) {
        var thread = component.body.map(function (n) {
            var result = this.Node(n);
            this.assert((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object', '', n, 'NO_SUPPORT', 'GENERAL');
            return result;
        }, this);

        if (thread[0].constructor == Array) return thread[0];else return thread;
    };

    p.ExpressionStatement = function (component) {
        return this.Node(component.expression);
    };

    p.CallExpression = function (component) {
        var callee = component.callee;
        var args = component.arguments;
        var params = [];
        var obj = this.Node(callee);
        if (obj.type && component.callee.type === 'Identifier')
            // Duplicate name with variable
            obj = callee.name;

        if (typeof obj === 'string' && callee.type === 'MemberExpression' && this[obj]) return this[obj](component);

        if (callee.type === 'Identifier') {
            // global function
            if (this._funcMap[obj]) {
                var funcType = this._funcMap[obj][args.length];
                obj = {
                    type: 'func_' + funcType
                };
            } else if (this[obj]) {
                // special block like len
                return this[obj](component);
            } else {
                var blockInfo = this.blockSyntax[obj];
                this.assert(blockInfo && blockInfo.key, '', callee, 'NO_FUNCTION', 'GENERAL');
                obj = this.Block({}, blockInfo);
            }
        }

        if (obj.preParams) {
            component.arguments = obj.preParams.concat(component.arguments);
            delete obj.preParams;
        }

        if (component.arguments) {
            obj.params = this.Arguments(obj.type, component.arguments, obj.params);
        }

        if (obj.type == 'is_press_some_key') {
            obj.params = [Entry.KeyboardCode.map[component.arguments[0].value] + ''];
        }

        return obj;
    };

    p.Identifier = function (component) {
        var name = component.name;

        if (this._isInFuncDef && this._funcParamMap[name]) return {
            type: 'stringParam_' + this._funcParamMap[name]
        };

        var variable = Entry.variableContainer.getVariableByName(name);
        if (variable) return {
            type: 'get_variable',
            params: [variable.id_]
        };

        var list = Entry.variableContainer.getListByName(name);
        if (list) return {
            type: 'get_list',
            params: [list.id_]
        };
        return name;
    };

    p.VariableDeclaration = function (component) {
        var results = component.declarations.map(this.Node, this);

        return results;
    };

    p.VariableDeclarator = function (component) {
        if (component.init && component.init.arguments) {
            return component.init.arguments.map(this.Node, this);
        } else {
            return [];
        }
    };

    p.AssignmentExpression = function (component) {
        var lefts = Array.isArray(component.left) ? component.left : [component.left];
        var results = [];

        for (var i in lefts) {
            var result = { params: [] };
            var left = lefts[i];
            var leftVar;
            switch (left.type) {
                case 'MemberExpression':
                    result.type = 'change_value_list_index';
                    var leftName = left.object.name;
                    if (leftName === 'self') {
                        result.type = 'set_variable';
                        leftVar = Entry.variableContainer.getVariableByName(left.property.name, true, this.object.id);
                        if (!leftVar) {
                            Entry.variableContainer.addVariable({
                                variableType: 'variable',
                                name: left.property.name,
                                visible: true,
                                object: this.object.id,
                                value: 0
                            });

                            leftVar = Entry.variableContainer.getVariableByName(left.property.name, true, this.object.id);
                        }

                        result.params.push(leftVar.id_);
                    } else {
                        leftVar = Entry.variableContainer.getListByName(leftName);
                        this.assert(leftVar, leftName, left.object, 'NO_LIST', 'LIST');
                        result.params.push(leftVar.id_);
                        result.params.push(this.ListIndex(this.Node(left.property.arguments[1])));
                    }
                    break;
                case 'Identifier':
                    result.type = 'set_variable';
                    leftVar = Entry.variableContainer.getVariableByName(left.name, false);
                    if (!leftVar) {
                        Entry.variableContainer.addVariable({
                            variableType: 'variable',
                            name: left.name,
                            visible: true,
                            value: 0
                        });
                        leftVar = Entry.variableContainer.getVariableByName(left.name, false);
                    }
                    result.params.push(leftVar.id_);
                    break;
                default:
                    this.assert(false, 'error', left, 'NO_SUPPORT', 'GENERAL');
            }

            var rightHand = this.Node(component.right);

            switch (component.operator) {
                case '=':
                    break;
                case '+=':
                    if (result.type === 'set_variable') {
                        result.type = 'change_variable';
                        break;
                    }
                case '-=':
                case '/=':
                case '*=':
                default:
                    var operator = this.arithmeticOperator[component.operator[0]];
                    if (operator) {
                        var getBlock;
                        if (result.type === 'set_variable') getBlock = {
                            type: 'get_variable',
                            params: [leftVar.id_]
                        };else getBlock = {
                            type: 'value_of_index_from_list',
                            params: [undefined, leftVar.id_, undefined, this.ListIndex(this.Node(component.left.property.arguments[1]))]
                        };
                        rightHand = {
                            type: 'calc_basic',
                            params: [getBlock, operator, rightHand]
                        };
                    }
            }
            result.params.push(rightHand);
            results.push(result);
        }

        return results;
    };

    p.Literal = function (component, paramSchema, paramDef) {
        var value = component.value;
        switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
            case 'boolean':
                return { type: value ? 'True' : 'False' };
            default:
        }
        var paramType = paramSchema ? paramSchema.type : 'Block';
        switch (paramType) {
            case 'DropdownDynamic':
                return this.DropdownDynamic(value, paramSchema);
            case 'Block':
                if (paramDef && paramDef.type) {
                    // process primitive block
                    return {
                        type: paramDef.type,
                        params: this.Arguments(paramDef.type, [component])
                    };
                }
                return {
                    type: 'number',
                    params: [this.getValue(component)]
                };
            default:
                return this.getValue(component);
        }
    };

    p.MemberExpression = function (component) {
        var obj;
        var result = {};
        if (component.object.name === 'self') {
            // local variable
            var localVar = Entry.variableContainer.getVariableByName(component.property.name, true, this.object.id);
            if (localVar) return {
                type: 'get_variable',
                params: [localVar.id_]
            };
            localVar = Entry.variableContainer.getListByName(component.property.name, true, this.object.id);
            if (localVar) return {
                type: 'get_list',
                params: [localVar.id_]
            };
            this.assert(localVar, 'variable not exist', component);
        } else if (component.object.type === 'Literal') {
            // string member
            obj = '%2';
            result.preParams = [component.object];
        } else {
            obj = this.Node(component.object);
        }

        if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
            // list member
            if (obj.type === 'get_list') result.preParams = [obj.params[0]];else result.preParams = [component.object];
            obj = '%2';
        }
        var property = component.property;
        var blockInfo;

        if (property.type === 'CallExpression') {
            return this.SubscriptIndex(component);
        } else if (property.name === '_pySlice') {
            blockInfo = this.blockSyntax['%2[%4:%6]'];
        } else {
            var rawSyntax = obj + '.' + property.name;
            if (this.blockSyntax[obj] && this.blockSyntax[obj][property.name]) {
                if (this[rawSyntax]) return rawSyntax;
                blockInfo = this.blockSyntax[obj][property.name];
            } else return rawSyntax; // block syntax not exist. pass to special
        }

        this.Block(result, blockInfo);

        return result;
    };

    p.WhileStatement = function (component) {
        var blocks = component.body.body;
        var obj = {
            statements: [this.setParams(blocks)]
        };
        var test = component.test;
        if (test.raw === 'True') {
            obj.type = 'repeat_inf';
        } else {
            obj.type = 'repeat_while_true';
            if (test.type === 'UnaryExpression' && test.operator === '!') {
                obj.params = [this.Node(component.test.argument), 'until'];
            } else {
                obj.params = [this.Node(component.test), 'while'];
            }
        }

        return obj;
    };

    p.BlockStatement = function (component) {
        var db = component.body.map(this.Node, this);

        if (db.constructor == Array && db[0].length) {
            if (db.length > 0) db[db.length - 1][0].params.push(db[0][0][0]);

            db = db[db.length - 1][0];
        }

        return db;
    };

    p.IfStatement = function (component) {
        var arr = [],
            alternate,
            blocks,
            pararms;

        var tempAlt = component.alternate;
        var isForState = tempAlt && tempAlt.body && tempAlt.body[0] && 'type' in tempAlt.body[0] && tempAlt.body[0].type === 'ForInStatement';

        var consequent = component.consequent;

        if (isForState) {
            alternate = component.alternate.body.map(this.Node, this);
            component.consequent.body[0].body.body.shift();

            blocks = component.consequent.body[0].body.body;
            alternate[0].statements.push(this.setParams(blocks));
        } else if (!('alternate' in component) || !component.alternate) {
            alternate = {
                type: '_if',
                statements: [this.setParams(component.consequent.body)],
                params: [this.Node(component.test)]
            };
        } else {
            var consequents = component.consequent ? component.consequent.body.map(this.Node, this).map(function (b) {
                return Array.isArray(b) ? b[0] : b;
            }) : [];
            var alternates = component.alternate ? component.alternate.body.map(this.Node, this).map(function (b) {
                return Array.isArray(b) ? b[0] : b;
            }) : [];
            alternate = {
                type: 'if_else',
                statements: [consequents, alternates],
                params: [this.Node(component.test)]
            };
        }

        return alternate;
    };

    p.ForStatement = function (component) {
        var body = component.body.body;
        return this.Node(body[body.length - 1]);
    };

    p.ForInStatement = function (component) {
        // var  expression = component.body.body[0] && 'expression' in component.body.body[0] ?
        //                     this.Node(component.body.body[0].expression) : null;
        var obj = {
            type: 'repeat_basic',
            params: [],
            statements: []
        };

        return obj;
    };

    p.BreakStatement = function (component) {
        return {
            type: this.blockSyntax.break.key
        };
    };

    p.UnaryExpression = function (component) {
        switch (component.operator) {
            case '!':
                return {
                    type: 'boolean_not',
                    params: [undefined, this.Node(component.argument)]
                };
            case '-':
            case '+':
                var result = this.Node(component.argument);
                if (result.type === 'number') {
                    result.params = [component.operator + result.params[0]];
                    return result;
                } else {
                    return {
                        type: 'calc_basic',
                        params: [{
                            type: 'number',
                            params: [component.operator + '1']
                        }, 'MULTI', result]
                    };
                }
            default:
                throw new Error('Unary operator ' + component.operator + ' is not supported');
        }
    };

    p.LogicalExpression = function (component) {
        return {
            type: 'boolean_and_or',
            params: [this.Node(component.left), this.logicalOperator[component.operator], this.Node(component.right)]
        };
    };

    p.BinaryExpression = function (component) {
        var operator = component.operator,
            blockType;
        if (this.binaryOperator[operator]) {
            blockType = 'boolean_basic_operator';
            operator = this.binaryOperator[operator];
        } else if (this.arithmeticOperator[operator]) {
            blockType = 'calc_basic';
            operator = this.arithmeticOperator[operator];
        } else if (this.divideOperator[operator]) {
            return {
                type: 'quotient_and_mod',
                params: [undefined, this.Node(component.left), undefined, this.Node(component.right), undefined, this.divideOperator[operator]]
            };
        } else if (operator === '**') {
            this.assert(component.right.value === 2, component.right.value, component, 'DEFAULT', 'DEFAULT');
            return {
                type: 'calc_operation',
                params: [undefined, this.Node(component.left), undefined, 'square']
            };
        } else {
            throw new Error('Not supported operator ' + component.operator);
        }
        return {
            type: blockType,
            params: [this.Node(component.left), operator, this.Node(component.right)]
        };
    };

    // p.UpdateExpression = function(component) {};

    p.FunctionDeclaration = function (component) {
        var funcName = component.id.name;
        this.assert(!this._isInFuncDef, funcName, component, 'NO_ENTRY_EVENT_FUNCTION', 'FUNCTION');
        this._isInFuncDef = true;
        var startBlock = {};
        this.assert(component.body.body[0], funcName, component, 'NO_OBJECT', 'OBJECT');
        var blocks = component.body.body[0].argument.callee.object.body.body;

        if (funcName === 'when_press_key') if (!component.arguments || !component.arguments[0]) {
            startBlock.params = [null, null];
        } else {
            var name = component.arguments[0].name;
            startBlock.params = [null, Entry.KeyboardCode.map[name] + ''];
        }

        if (funcName === 'when_get_signal') {
            if (!component.arguments || !component.arguments[0]) {
                startBlock.params = [null, null];
            } else {
                var name = component.arguments[0].name;
                startBlock.params = [null, this.getMessage(name)];
            }
        }

        var blockInfo = this.blockSyntax['def ' + funcName];
        var threadArr;
        if (blockInfo) {
            // event block
            startBlock.type = blockInfo.key;
            var definedBlocks = this.setParams(blocks);

            threadArr = [startBlock];
            definedBlocks.unshift(startBlock);
            this._isInFuncDef = false;
            return definedBlocks;
        } else {
            this.createFunction(component, funcName, blocks);
            this._isInFuncDef = false;
            return [];
        }
    };

    p.FunctionExpression = function (component) {
        var a = this.Node(component.body);
        return a;
    };

    p.ReturnStatement = function (component) {
        return component.argument.arguments.map(this.Node, this);
    };

    // p.ThisExpression = function(component) {};

    p.NewExpression = function (component) {
        var callee = component.callee;
        var args = component.arguments;

        return this.Node(callee);
    };

    p.SubscriptIndex = function (component) {
        var obj = this.Node(component.object);
        var blockInfo;

        if (obj.type === 'get_list') {
            // string
            blockInfo = this.blockSyntax['%2[%4]'];
        } else {
            // var, list
            blockInfo = this.blockSyntax['%2[%4]#char_at'];
        }
        var result = this.Block({}, blockInfo);
        result.params = this.Arguments(result.type, component.property.arguments);
        return result;
    };

    /**
     * util Function
     */

    p.Arguments = function (blockType, args, defaultParams) {
        var defParams, sortedArgs, blockSchema;
        blockSchema = Entry.block[blockType];
        if (blockType && blockType.substr(0, 5) === 'func_' || !blockSchema) {
            // function block, etc
            sortedArgs = args;
        } else {
            var syntax = this.PySyntax(blockSchema, defaultParams);
            var indexes = syntax.match(/%\d+/g, '');
            if (!indexes) return defaultParams || [];
            sortedArgs = defaultParams || new Array();

            for (var i = 0; i < indexes.length; i++) {
                var idx = parseInt(indexes[i].substring(1)) - 1;
                sortedArgs[idx] = args[i];
            }
            defParams = blockSchema.def && blockSchema.def.params ? blockSchema.def.params : undefined;
        }
        var results = sortedArgs.map(function (arg, index) {
            if (arg && arg.type) {
                var paramSchema = blockSchema ? blockSchema.params[index] : null;
                var param = this.Node(arg, arg.type === 'Literal' ? paramSchema : undefined, arg.type === 'Literal' && defParams ? defParams[index] : undefined);

                this.assert(!(typeof param === 'string' && arg.type === 'Identifier'), param, arg, 'NO_VARIABLE', 'VARIABLE');

                if (!paramSchema) param = param;else if (paramSchema.type !== 'Block' && param && param.params)
                    // for list and variable dropdown
                    param = param.params[0];else if (paramSchema.type === 'Block' && paramSchema.isListIndex) param = this.ListIndex(param);

                return param;
            } else return arg; // default params
        }, this);

        var codeMap = this.CodeMap(blockType);
        if (codeMap) {
            results = results.map(function (arg, index) {
                if (codeMap[index] && arg) {
                    return codeMap[index][this.toLowerCase(arg)] || arg;
                } else {
                    return arg;
                }
            }, this);
        }

        return results;
    };

    p.getValue = function (component) {
        var value;
        if (component.type === 'Literal') {
            value = component.raw;

            if (value === 'None') {
                return;
            } else if (!component.value) {
                value = 0;
            } else if (component.value.constructor === String) {
                if (component.raw.includes('"') || component.raw.includes("'")) value = component.raw.substr(1, component.raw.length - 2);else value = component.raw;
            } else if (component.value.constructor === Number) {
                value = component.value;
            }

            return value;
        } else {
            value = this.Node(component);
            return value.params && value.params[0] ? value.params[0] : null;
        }
    };

    p.getMessage = function (name) {
        if (!name) return;
        name = name.replace(/_space_/gi, ' ');

        var objects = Entry.variableContainer.messages_.filter(function (obj) {
            return obj.name === name;
        });

        if (objects.length <= 0) {
            Entry.variableContainer.addMessage({
                name: name
            });
            objects = Entry.variableContainer.messages_.filter(function (obj) {
                return obj.name === name;
            });
        }

        var object;
        if (objects && objects.length > 0) object = objects[0].id;else {
            object = name;
        }

        return object;
    };

    p.DropdownDynamic = function (value, paramSchema) {
        switch (paramSchema.menuName) {
            case 'sprites':

            case 'spritesWithMouse':
                var object;

                var objects = Entry.container.objects_.filter(function (obj) {
                    return obj.name === value;
                });

                if (objects && objects.length > 0) object = objects[0].id;else {
                    object = value;
                }

                return object;

                break;
            case 'spritesWithSelf':
                var object;

                if (!value) {
                    object = 'None';
                } else if (value == 'self') {
                    object = value;
                } else {
                    var objects = Entry.container.objects_.filter(function (obj) {
                        return obj.name === value;
                    });

                    object = objects[0].id;
                }

                return object;
                break;
            case 'collision':
                var object;

                var objects = Entry.container.objects_.filter(function (obj) {
                    return obj.name === value;
                });

                if (objects && objects.length > 0) object = objects[0].id;else {
                    object = value;
                }

                return object;

                break;
            case 'pictures':
                var picture = this.object.getPicture(value);
                return picture ? picture.id : undefined;
            case 'messages':
                return this.getMessage(value);
                break;
            case 'variables':
                if (!value) return;
                value = value.split('.');
                var variable;
                if (value.length > 1)
                    // self variable
                    variable = Entry.variableContainer.getVariableByName(value[1], true, this.object.id);else variable = Entry.variableContainer.getVariableByName(value[0], false, this.object.id);
                return variable ? variable.id_ : undefined;
            case 'lists':
                if (!value) return;
                value = value.split('.');
                var list;
                if (value.length > 1)
                    // self variable
                    list = Entry.variableContainer.getListByName(value[1], true, this.object.id);else list = Entry.variableContainer.getListByName(value[0], false, this.object.id);
                return list ? list.id_ : undefined;
            case 'scenes':
                var scenes = Entry.scene.scenes_.filter(function (s) {
                    return s.name === value;
                });
                return scenes[0] ? scenes[0].id : undefined;
            case 'sounds':
                if (value) var sound = this.object.getSound(value);
                return sound ? sound.id : undefined;
            case 'clone':
                var object;

                if (!value) {
                    object = null;
                } else if (value == 'self') {
                    object = value;
                } else {
                    var objects = Entry.container.objects_.filter(function (obj) {
                        return obj.name === value;
                    });

                    object = objects[0] ? objects[0].id : null;
                }

                return object;
            case 'objectSequence':
        }
    };

    p.Node = function (nodeType, node) {
        var hasType = false;
        if (typeof nodeType === 'string' && nodeType !== node.type) this.assert(false, node.name || node.value || node.operator, node, 'NO_SUPPORT', 'GENERAL');else if (typeof nodeType === 'string') hasType = true;

        var args = Array.prototype.slice.call(arguments);
        if (hasType) args.shift();

        node = args[0];

        if (!this[node.type]) throw new Error(node.type + ' is not supported');
        return this[node.type].apply(this, args);
    };

    p.PySyntax = function (blockSchema, defaultParams) {
        if (defaultParams) {
            var syntaxes = blockSchema.syntax.py.filter(function (s) {
                if (!s.params) return false;
                var isSame = true;
                s.params.map(function (p, index) {
                    if (p != defaultParams[index]) isSame = false;
                });
                return isSame;
            });
            if (syntaxes.length) return syntaxes[0].syntax;
        }
        var syntaxObj = blockSchema.syntax.py[0];
        return syntaxObj.syntax || syntaxObj;
    };

    p.CodeMap = function (blockType) {
        for (var objName in Entry.CodeMap) {
            if (Entry.CodeMap[objName] && Entry.CodeMap[objName][blockType]) return Entry.CodeMap[objName][blockType];
        }
    };

    p.Block = function (result, blockInfo) {
        result.type = blockInfo.key;

        if (blockInfo.params) result.params = blockInfo.params.concat();
        return result;
    };

    p.ListIndex = function (param) {
        if (this.isParamPrimitive(param)) {
            // literal
            param.params = [Number(param.params[0]) + 1];
        } else if (param.type === 'calc_basic' && // x - 1
        param.params[1] === 'MINUS' && this.isParamPrimitive(param.params[2]) && param.params[2].params[0] + '' === '1') {
            param = param.params[0];
        } else {
            param = {
                type: 'calc_basic',
                params: [param, 'PLUS', {
                    type: 'text',
                    params: ['1']
                }]
            };
        }
        return param;
    };

    p.isParamPrimitive = function (param) {
        return param && (param.type === 'number' || param.type === 'text');
    };

    p.assert = function (data, keyword, errorNode, message, subject) {
        if (data) return;
        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError['MESSAGE_CONV_' + (message || 'NO_SUPPORT')], keyword, errorNode.loc, Entry.TextCodingError['SUBJECT_CONV_' + (subject || 'GENERAL')]);
    };

    p.setParams = function (params) {
        var definedBlocks = params.length ? params.map(function (n) {
            var result = this.Node(n);
            this.assert((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object', '', n, 'NO_SUPPORT', 'GENERAL');
            return result;
        }, this) : [];

        var results = [];
        for (var i = 0; i < definedBlocks.length; i++) {
            var db = definedBlocks[i];

            if (Array.isArray(db)) results = results.concat(db);else results.push(db);
        }

        return results.filter(function (b) {
            return b.constructor === Object;
        });
    };

    p.getVariables = function (program) {
        var nodes = program.body;

        nodes.map(function (n) {
            n = n.expression;
            var left = n.left;
            var right = n.right;
            var name;
            var type = 'variables_';
            var id = Entry.generateHash();
            var value, array;

            if (n.operator != '=') return;

            if (right.type === 'NewExpression' && right.callee.property.name == 'list') {
                type = 'lists_';
                var temp = right.arguments.map(this.Node, this);

                temp = temp.map(function (m) {
                    if (m.constructor === Object && 'params' in m) {
                        return {
                            data: typeof m.params[0] === 'string' ? m.params[0].replace(/\\\"/gi, '"') : m.params[0]
                        };
                    } else {
                        return { data: m };
                    }
                });

                array = temp;
            } else {
                value = this.getValue(right);
            }

            var functionType = 'add' + type[0].toUpperCase() + type.slice(1, type.length - 2);

            if (!Array.isArray(left)) left = [left];

            for (var key in left) {
                var object = false;
                var l = left[key];

                var obj = {
                    variableType: 'variable',
                    name: '',
                    visible: true,
                    object: {},
                    value: ''
                };
                if (array) obj.array = array;
                if (value) obj.value = value;

                if ('name' in l) {
                    name = l.name;
                } else {
                    object = this.object;
                    name = l.property.name;
                    object = object.id;
                }

                var existVar = this.variableExist(name, type);

                if (existVar) {
                    if (type == 'lists_') {
                        existVar.array_ = obj.array;
                        return;
                    }
                    existVar.value_ = this.getValue(right);
                    return;
                } else {
                    obj.variableType = type.slice(0, length - 2);
                    obj.name = name;
                    obj.object = object;
                    Entry.variableContainer[functionType](obj);
                }
            }
        }, this);

        return [];
    };

    p.variableExist = function (name, type) {
        var variables_ = Entry.variableContainer[type];
        variables_ = variables_.map(function (v) {
            return v.name_;
        });

        if (variables_.indexOf(name) > -1) return Entry.variableContainer[type][variables_.indexOf(name)];
        return false;
    };

    /**
     * Special Blocks
     */

    p.len = function (component) {
        var param = this.Node(component.arguments[0]);
        this.assert(!(typeof param === 'string' && component.arguments[0].type === 'Identifier'), param, component.arguments[0], 'NO_VARIABLE', 'VARIABLE');

        if (param.type === 'get_list') {
            // string len
            return {
                type: 'length_of_list',
                params: [undefined, param.params[0]]
            };
        } else {
            // array len
            return {
                type: 'length_of_string',
                params: [undefined, param]
            };
        }
    };

    p['Hamster.note'] = function (component) {
        var blockInfo;
        if (component.arguments.length > 2) {
            blockInfo = this.blockSyntax.Hamster.note;
        } else {
            blockInfo = this.blockSyntax.Hamster['note#0'];
            component.arguments.shift();
        }
        var obj = this.Block({}, blockInfo);
        obj.params = this.Arguments(blockInfo.key, component.arguments);
        if (component.arguments.length > 2) {
            obj.params[0] = Entry.CodeMap.Hamster.hamster_play_note_for[0][this.toLowerCase(obj.params[0])];
        }
        return obj;
    };

    p['Hamster.line_tracer_mode'] = function (component) {
        return this.Special(component, 'Hamster', 'line_tracer_mode');
    };

    p['Hamster.io_mode_a'] = function (component) {
        return this.Special(component, 'Hamster', 'io_mode_a');
    };

    p['Hamster.io_mode_b'] = function (component) {
        return this.Special(component, 'Hamster', 'io_mode_b');
    };

    p['Hamster.io_modes'] = function (component) {
        return this.Special(component, 'Hamster', 'io_modes');
    };

    p['Hamster.leds'] = function (component) {
        return this.Special(component, 'Hamster', 'leds');
    };

    p['Hamster.left_led'] = function (component) {
        return this.Special(component, 'Hamster', 'left_led');
    };

    p['Hamster.right_led'] = function (component) {
        return this.Special(component, 'Hamster', 'right_led');
    };

    p['__pythonRuntime.ops.in'] = function (component) {
        // "10 in list"
        return {
            type: 'is_included_in_list',
            params: this.Arguments('is_included_in_list', component.arguments)
        };
    };

    p.Special = function (component, name, key) {
        var result = {};
        var param = this.Node(component.arguments[0]);
        if (this.isParamPrimitive(param)) param = param.params[0];
        var blockInfo = this.blockSyntax[name][key + '(' + param + ')'];

        this.Block(result, blockInfo);
        return result;
    };

    p.createFunctionMap = function () {
        this._funcMap = {};
        var functions = Entry.variableContainer.functions_;
        for (var key in functions) {
            var funcSchema = Entry.block['func_' + key];
            var funcName = funcSchema.template.trim().split(' ')[0].trim();
            if (!this._funcMap[funcName]) this._funcMap[funcName] = {};
            this._funcMap[funcName][funcSchema.params.length - 1] = key;
        }
    };

    p.createFunction = function (component, funcName, blocks) {
        var params = component.arguments ? component.arguments.map(this.Node, this) : [];
        var functions = Entry.variableContainer.functions_;

        var funcId = Entry.generateHash();
        for (var key in functions) {
            var funcSchema = Entry.block['func_' + key];
            if (funcSchema.params.length === params.length + 1 && funcSchema.template.trim().split(' ')[0].trim() === funcName) {
                funcId = key;
                break;
            }
        }

        var funcParamPointer = {
            type: 'function_field_label',
            params: [funcName]
        };
        var func = {
            id: funcId,
            content: [[{
                type: 'function_create',
                params: [funcParamPointer]
            }]]
        };

        if (!this._funcMap[funcName]) this._funcMap[funcName] = {};
        this._funcMap[funcName][params.length] = func.id;

        while (params.length) {
            // generate param
            var param = params.shift();
            var paramId = Entry.Func.requestParamBlock('string');
            var newFuncParam = {
                type: 'function_field_string',
                params: [{
                    type: paramId
                }]
            };
            paramId = paramId.split('_')[1];
            this._funcParamMap[param] = paramId;
            funcParamPointer.params.push(newFuncParam);
            funcParamPointer = newFuncParam;
        }

        var definedBlocks = this.setParams(blocks); // function content
        this._funcParamMap = {};

        func.content[0] = func.content[0].concat(definedBlocks);

        func.content = JSON.stringify(func.content);
        if (functions[funcId]) {
            var targetFunc = functions[funcId];
            targetFunc.content = new Entry.Code(func.content);
            targetFunc.generateBlock(true);
            Entry.Func.generateWsBlock(targetFunc);
        } else {
            Entry.variableContainer.setFunctions([func]);
        }
    };

    /**
     * Not Supported
     */

    p.ClassDeclaration = function (component) {
        var funcName = this.Node(component.id);
        this.assert(false, funcName, component, 'NO_OBJECT', 'OBJECT');
    };

    // p.RegExp = function(component) {};

    // p.Function = function(component) {};

    // p.EmptyStatement = function(component) {};

    // p.DebuggerStatement = function(component) {};

    // p.WithStatement = function(component) {};

    // p.LabeledStatement = function(component) {};

    // p.ContinueStatement = function(component) {};

    // p.SwitchStatement = function(component) {};

    // p.SwitchCase = function(component) {};

    // p.ThrowStatement = function(component) {};

    // p.TryStatement = function(component) {};

    // p.CatchClause = function(component) {};

    // p.DoWhileStatement = function(component) {
    //     return component.body.map(this.Node,  this);
    // };

    // p.ArrayExpression = function(component) {};

    // p.ObjectExpression = function(component) {};

    // p.Property = function(component) {};

    // p.ConditionalExpression = function(component) {};

    // p.SequenceExpression = function(component) {};

    p.searchSyntax = function (datum) {
        //legacy
        var schema;
        var appliedParams;
        var doNotCheckParams = false;

        if (datum instanceof Entry.BlockView) {
            schema = datum.block._schema;
            appliedParams = datum.block.data.params;
        } else if (datum instanceof Entry.Block) {
            schema = datum._schema;
            appliedParams = datum.params;
        } else {
            schema = datum;
            doNotCheckParams = true;
        }

        if (schema && schema.syntax) {
            var syntaxes = schema.syntax.py.concat();
            while (syntaxes.length) {
                var isFail = false;
                var syntax = syntaxes.shift();
                if (typeof syntax === 'string') return { syntax: syntax, template: syntax };
                if (syntax.params) {
                    for (var i = 0; i < syntax.params.length; i++) {
                        if (doNotCheckParams !== true && syntax.params[i] && syntax.params[i] !== appliedParams[i]) {
                            isFail = true;
                            break;
                        }
                    }
                }
                if (!syntax.template) syntax.template = syntax.syntax;
                if (isFail) {
                    continue;
                }
                return syntax;
            }
        }
        return null;
    };

    p.toLowerCase = function (data) {
        if (data && data.toLowerCase) return data.toLowerCase();else return data;
    };
})(Entry.PyToBlockParser.prototype);

/***/ }),

/***/ "./src/textcoding/static/codeMap.js":
/*!******************************************!*\
  !*** ./src/textcoding/static/codeMap.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


Entry.CodeMap = {};

(function (cc) {
    cc.Entry = {
        start_neighbor_scene: [{
            다음: 'next',
            이전: 'pre'
        }],
        stop_object: [{
            thisOnly: 'self',
            thisThread: 'this',
            otherThread: 'others',
            self: 'thisOnly',
            this: 'thisThread',
            others: 'otherThread',
            모든: 'all',
            자신: 'thisOnly',
            이: 'thisThread',
            '자신의 다른': 'otherThread'
        }],
        change_to_next_shape: [{
            prev: 'pre',
            pre: 'prev',
            다음: 'next',
            이전: 'prev'
        }],
        add_effect_amount: [{
            색깔: 'color',
            밝기: 'brightness',
            투명도: 'transparency'
        }],
        change_effect_amount: [{
            색깔: 'color',
            밝기: 'brightness',
            투명도: 'transparency'
        }],
        change_object_index: [{
            front: 'FRONT',
            forward: 'FORWARD',
            backward: 'BACKWARD',
            back: 'BACK',
            '맨 앞': 'FRONT',
            앞: 'FORWARD',
            뒤: 'BACKWARD',
            '맨 뒤': 'BACK'
        }],
        set_color: [{
            red: '#FF0000',
            orange: '#FF9966',
            yellow: '#FFFF66',
            green: '#009900',
            blue: '#3333FF',
            navy: '#000099',
            purple: '#993399',
            black: '#000000',
            white: '#FFFFFF',
            brown: '#990000'
        }],
        reach_something: [null, {
            mouse: 'mouse_pointer',
            wall: 'edge',
            wall_up: 'edge_up',
            wall_down: 'edge_down',
            wall_right: 'edge_right',
            wall_left: 'edge_left',
            mouse_pointer: 'mouse',
            edge: 'wall',
            edge_up: 'wall_up',
            edge_down: 'wall_down',
            edge_right: 'wall_right',
            edge_left: 'wall_left',
            마우스포인터: 'mouse'
        }, null],
        create_clone: [{
            자신: 'self',
            self: 'self'
        }],
        locate: [{
            mouse: 'mouse_pointer',
            mouse_pointer: 'mouse',
            마우스포인터: 'mouse'
        }],
        locate_object_time: [null, {
            mouse: 'mouse_pointer',
            mouse_pointer: 'mouse',
            마우스포인터: 'mouse'
        }],
        see_angle_object: [{
            mouse: 'mouse_pointer',
            mouse_pointer: 'mouse',
            마우스포인터: 'mouse'
        }],
        coordinate_mouse: [null, {
            X: 'x',
            Y: 'y'
        }, null],
        coordinate_object: [null, {
            자신: 'self',
            self: 'self'
        }, null, {
            크기: 'size',
            방향: 'rotation',
            '이동 방향': 'direction',
            '모양 번호': 'picture_index',
            '모양 이름': 'picture_name',
            picture_index: 'shape_number',
            picture_name: 'shape_name',
            shape_number: 'picture_index',
            shape_name: 'picture_name'
        }],
        choose_project_timer_action: [null, {
            start: 'START',
            stop: 'STOP',
            reset: 'RESET'
        }],
        set_visible_project_timer: [null, {
            show: 'SHOW',
            hide: 'HIDE'
        }],
        get_date: [null, {
            year: 'YEAR',
            month: 'MONTH',
            day: 'DAY',
            hour: 'HOUR',
            minute: 'MINUTE',
            second: 'SECOND'
        }],
        distance_something: [null, {
            mouse: 'mouse_pointer',
            mouse_pointer: 'mouse',
            마우스포인터: 'mouse'
        }],
        set_visible_answer: [{
            show: 'SHOW',
            hide: 'HIDE'
        }]
    };

    cc.Arduino = {
        arduino_ext_analog_list: [{
            a0: '0',
            a1: '1',
            a2: '2',
            a3: '3',
            a4: '4',
            a5: '5'
        }],
        arduino_get_digital_toggle: [{
            on: 'high',
            off: 'low',
            high: 'on',
            low: 'off',
            HIGH: 'on',
            LOW: 'off'
        }]
    };

    cc.Hamster = {
        hamster_play_note_for: [{
            4: 'hamster.note_c',
            5: 'hamster.note_c_sharp',
            6: 'hamster.note_d',
            7: 'hamster.note_e_flat',
            8: 'hamster.note_e',
            9: 'hamster.note_f',
            10: 'hamster.note_f_sharp',
            11: 'hamster.note_g',
            12: 'hamster.note_g_sharp',
            13: 'hamster.note_a',
            14: 'hamster.note_b_flat',
            15: 'hamster.note_b',
            'hamster.note_c': 4,
            'hamster.note_c_sharp': 5,
            'hamster.note_d_flat': 5,
            'hamster.note_d': 6,
            'hamster.note_e_flat': 7,
            'hamster.note_d_sharp': 7,
            'hamster.note_e': 8,
            'hamster.note_f': 9,
            'hamster.note_f_sharp': 10,
            'hamster.note_g_flat': 10,
            'hamster.note_g': 11,
            'hamster.note_g_sharp': 12,
            'hamster.note_a_flat': 12,
            'hamster.note_a': 13,
            'hamster.note_b_flat': 14,
            'hamster.note_a_sharp': 14,
            'hamster.note_b': 15
        }, null, null]
    };

    cc.Turtle = {
        touching_colors: {
            1: 'turtle.color_black',
            2: 'turtle.color_red',
            3: 'turtle.color_orange',
            4: 'turtle.color_yellow',
            5: 'turtle.color_green',
            6: 'turtle.color_cyan',
            7: 'turtle.color_blue',
            8: 'turtle.color_magenta',
            9: 'turtle.color_white',
            'turtle.color_black': 1,
            'turtle.color_red': 2,
            'turtle.color_orange': 3,
            'turtle.color_yellow': 4,
            'turtle.color_green': 5,
            'turtle.color_cyan': 6,
            'turtle.color_sky_blue': 6,
            'turtle.color_blue': 7,
            'turtle.color_magenta': 8,
            'turtle.color_purple': 8,
            'turtle.color_white': 9
        },
        pattern_colors: {
            1: 'turtle.color_red',
            3: 'turtle.color_yellow',
            4: 'turtle.color_green',
            5: 'turtle.color_cyan',
            6: 'turtle.color_blue',
            7: 'turtle.color_magenta',
            'turtle.color_red': 1,
            'turtle.color_yellow': 3,
            'turtle.color_green': 4,
            'turtle.color_cyan': 5,
            'turtle.color_sky_blue': 5,
            'turtle.color_blue': 6,
            'turtle.color_magenta': 7,
            'turtle.color_purple': 7
        },
        units: {
            CM: 'turtle.unit_cm',
            DEG: 'turtle.unit_deg',
            SEC: 'turtle.unit_sec',
            PULSE: 'turtle.unit_pulse',
            'turtle.unit_cm': 'CM',
            'turtle.unit_deg': 'DEG',
            'turtle.unit_sec': 'SEC',
            'turtle.unit_pulse': 'PULSE'
        },
        head_tail: {
            HEAD: 'turtle.head',
            TAIL: 'turtle.tail',
            'turtle.head': 'HEAD',
            'turtle.tail': 'TAIL'
        },
        line_colors: {
            10: 'turtle.color_black',
            11: 'turtle.color_red',
            13: 'turtle.color_green',
            15: 'turtle.color_blue',
            17: 'turtle.color_any',
            'turtle.color_black': 10,
            'turtle.color_red': 11,
            'turtle.color_green': 13,
            'turtle.color_blue': 15,
            'turtle.color_any': 17
        },
        target_colors: {
            61: 'turtle.color_red',
            62: 'turtle.color_yellow',
            63: 'turtle.color_green',
            64: 'turtle.color_cyan',
            65: 'turtle.color_blue',
            66: 'turtle.color_magenta',
            67: 'turtle.color_any',
            'turtle.color_red': 61,
            'turtle.color_yellow': 62,
            'turtle.color_green': 63,
            'turtle.color_cyan': 64,
            'turtle.color_sky_blue': 64,
            'turtle.color_blue': 65,
            'turtle.color_magenta': 66,
            'turtle.color_purple': 66,
            'turtle.color_any': 67
        },
        color_lines: {
            71: 'turtle.color_red',
            73: 'turtle.color_green',
            75: 'turtle.color_blue',
            77: 'turtle.color_any',
            'turtle.color_red': 71,
            'turtle.color_green': 73,
            'turtle.color_blue': 75,
            'turtle.color_any': 77
        },
        led_colors: {
            RED: 'turtle.color_red',
            ORANGE: 'turtle.color_orange',
            YELLOW: 'turtle.color_yellow',
            GREEN: 'turtle.color_green',
            CYAN: 'turtle.color_cyan',
            BLUE: 'turtle.color_blue',
            VIOLET: 'turtle.color_violet',
            MAGENTA: 'turtle.color_magenta',
            WHITE: 'turtle.color_white',
            'turtle.color_red': 'RED',
            'turtle.color_orange': 'ORANGE',
            'turtle.color_yellow': 'YELLOW',
            'turtle.color_green': 'GREEN',
            'turtle.color_cyan': 'CYAN',
            'turtle.color_sky_blue': 'CYAN',
            'turtle.color_blue': 'BLUE',
            'turtle.color_violet': 'VIOLET',
            'turtle.color_magenta': 'MAGENTA',
            'turtle.color_purple': 'MAGENTA',
            'turtle.color_white': 'WHITE'
        },
        sounds: {
            1: 'turtle.sound_beep',
            2: 'turtle.sound_random',
            3: 'turtle.sound_siren',
            4: 'turtle.sound_engine',
            5: 'turtle.sound_robot',
            6: 'turtle.sound_march',
            7: 'turtle.sound_birthday',
            8: 'turtle.sound_dibidibidip',
            9: 'turtle.sound_good_job',
            'turtle.sound_beep': 1,
            'turtle.sound_random': 2,
            'turtle.sound_siren': 3,
            'turtle.sound_engine': 4,
            'turtle.sound_robot': 5,
            'turtle.sound_march': 6,
            'turtle.sound_birthday': 7,
            'turtle.sound_dibidibidip': 8,
            'turtle.sound_good_job': 9
        },
        notes: {
            4: 'turtle.note_c',
            5: 'turtle.note_c_sharp',
            6: 'turtle.note_d',
            7: 'turtle.note_e_flat',
            8: 'turtle.note_e',
            9: 'turtle.note_f',
            10: 'turtle.note_f_sharp',
            11: 'turtle.note_g',
            12: 'turtle.note_g_sharp',
            13: 'turtle.note_a',
            14: 'turtle.note_b_flat',
            15: 'turtle.note_b',
            'turtle.note_c': 4,
            'turtle.note_c_sharp': 5,
            'turtle.note_d_flat': 5,
            'turtle.note_d': 6,
            'turtle.note_e_flat': 7,
            'turtle.note_d_sharp': 7,
            'turtle.note_e': 8,
            'turtle.note_f': 9,
            'turtle.note_f_sharp': 10,
            'turtle.note_g_flat': 10,
            'turtle.note_g': 11,
            'turtle.note_g_sharp': 12,
            'turtle.note_a_flat': 12,
            'turtle.note_a': 13,
            'turtle.note_b_flat': 14,
            'turtle.note_a_sharp': 14,
            'turtle.note_b': 15
        }
    };
})(Entry.CodeMap);

/***/ }),

/***/ "./src/textcoding/static/keyboardCode.js":
/*!***********************************************!*\
  !*** ./src/textcoding/static/keyboardCode.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


Entry.KeyboardCode = {};

(function (kc) {
    kc.map = {
        backspace: 8,
        tab: 9,
        enter: 13,
        shift: 16,
        ctrl: 17,
        alt: 18,
        pausebreak: 19,
        capslock: 20,
        esc: 27,
        space: 32,
        pageup: 33,
        pagedown: 34,
        end: 35,
        home: 36,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        insert: 45,
        delete: 46,
        '0': 48,
        '1': 49,
        '2': 50,
        '3': 51,
        '4': 52,
        '5': 53,
        '6': 54,
        '7': 55,
        '8': 56,
        '9': 57,
        a: 65,
        b: 66,
        c: 67,
        d: 68,
        e: 69,
        f: 70,
        g: 71,
        h: 72,
        i: 73,
        j: 74,
        k: 75,
        l: 76,
        m: 77,
        n: 78,
        o: 79,
        p: 80,
        q: 81,
        r: 82,
        s: 83,
        t: 84,
        u: 85,
        v: 86,
        w: 87,
        x: 88,
        y: 89,
        z: 90,
        windows: 91,
        rightclick: 93,
        numpad0: 96,
        numpad1: 97,
        numpad2: 98,
        numpad3: 99,
        numpad4: 100,
        numpad5: 101,
        numpad6: 102,
        numpad7: 103,
        numpad8: 104,
        numpad9: 105,
        'numpad*': 106,
        'numpad+': 107,
        'numpad-': 109,
        'numpad.': 110,
        'numpad/': 111,
        f1: 112,
        f2: 113,
        f3: 114,
        f4: 115,
        f5: 116,
        f6: 117,
        f7: 118,
        f8: 119,
        f9: 120,
        f10: 121,
        f11: 122,
        f12: 123,
        numlock: 144,
        scrolllock: 145,
        mycomputer: 182,
        mycalculator: 183,
        ';': 186,
        '=': 187,
        ',': 188,
        '-': 189,
        '.': 190,
        '/': 191,
        '`': 192,
        '[': 219,
        '\\': 220,
        ']': 221,
        "'": 222
    };
    /*kc.keyCodeToChar = {
        8:"backspace",9:"tab",13:"enter",16:"shift",17:"ctrl",18:"alt",
        19:"pausebreak",20:"capslock",27:"esc",32:"space",33:"pageup",
        34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",
        40:"down",45:"insert",46:"delete",48:"0",49:"1",50:"2",51:"3",
        52:"4",53:"5",54:"6",55:"7",56:"8",57:"9",65:"a",66:"b",67:"c",
        68:"d",69:"e",70:"f",71:"g",72:"h",73:"i",74:"j",75:"k",76:"l",
        77:"m",78:"n",79:"o",80:"p",81:"q",82:"r",83:"s",84:"t",85:"u",
        86:"v",87:"w",88:"x",89:"y",90:"z",91:"windows",93:"right",
        96:"numpad0",97:"numpad1",98:"numpad2",99:"numpad3",
        100:"numpad4",101:"numpad5",102:"numpad6",103:"numpad7",
        104:"numpad8",105:"numpad9",106:"numpad*",107:"numpad+",
        109:"numpad-",110:"numpad.",111:"numpad/",112:"f1",113:"f2",
        114:"f3",115:"f4",116:"f5",117:"f6",118:"f7",119:"f8",120:"f9",
        121:"f10",122:"f11",123:"f12",144:"numlock",145:"scrolllock",
        182:"mycomputer",183:"mycalculator",186:";",187:"=",188:",",
        189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"
    };
    kc.keyCharToCode = {
        "backspace":8,"tab":9,"enter":13,"shift":16,"ctrl":17,"alt":18,
        "pausebreak":19,"capslock":20,"esc":27,"space":32,"pageup":33,
        "pagedown":34,"end":35,"home":36,"left":37,"up":38,"right":39,
        "down":40,"insert":45,"delete":46,"0":48,"1":49,"2":50,"3":51,
        "4":52,"5":53,"6":54,"7":55,"8":56,"9":57,"a":65,"b":66,"c":67,"d":68,
        "e":69,"f":70,"g":71,"h":72,"i":73,"j":74,"k":75,"l":76,"m":77,"n":78,
        "o":79,"p":80,"q":81,"r":82,"s":83,"t":84,"u":85,"v":86,"w":87,"x":88,
        "y":89,"z":90,"windows":91,"rightclick":93,"numpad0":96,"numpad1":97,
        "numpad2":98,"numpad3":99,"numpad4":100,"numpad5":101,"numpad6":102,
        "numpad7":103,"numpad8":104,"numpad9":105,"numpad*":106,"numpad+":107,
        "numpad-":109,"numpad.":110,"numpad/":111,"f1":112,"f2":113,"f3":114,
        "f4":115,"f5":116,"f6":117,"f7":118,"f8":119,"f9":120,"f10":121,"f11":122,
        "f12":123,"numlock":144,"scrolllock":145,"mycomputer":182,"mycalculator":183,
        ";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,
        "'":222
    };*/
})(Entry.KeyboardCode);

/***/ }),

/***/ "./src/textcoding/util/console.js":
/*!****************************************!*\
  !*** ./src/textcoding/util/console.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


Entry.Console = function () {
    if (!Entry.propertyPanel) return;
    this.createView();
    Entry.propertyPanel.addMode('console', this);
    Entry.console = this;

    this._isEditing = false;
    this._inputData = null;
};

(function (p) {
    p.createView = function () {
        this.view = new Entry.Dom('div', {
            id: 'entryConsole'
        });

        this.codeMirror = CodeMirror(this.view[0], {
            lineNumbers: false,
            lineWrapping: true,
            value: '',
            mode: {},
            theme: 'default',
            styleActiveLine: false,
            //gutters: ["CodeMirror-lint-markers"],
            lint: false
        });
        this._doc = this.codeMirror.getDoc();

        this.codeMirror.on('beforeChange', function (cm, change) {
            if (!this._isEditing) change.cancel();else if (change.origin === '+delete' && change.to.ch === 0) {
                change.cancel();
            }
        }.bind(this));

        this.codeMirror.on('keyup', function (cm, event) {
            if (this._isEditing && event.keyCode === 13) {
                this.endInput();
            }
        }.bind(this));

        this.codeMirror.on('cursorActivity', function (cm, event) {
            cm.execCommand('goDocEnd');
        });

        Entry.addEventListener('stop', this.clear.bind(this));

        this.clear();
    };

    p.getView = function () {
        return this.view;
    };

    p.clear = function () {
        this.setEditing(true);
        this.codeMirror.setValue('Entry Console \n');
        this.codeMirror.execCommand('goDocEnd');
        this.setEditing(false);
    };

    p.print = function (message, mode) {
        if (!this.visible) return;

        this.setEditing(true);
        this.codeMirror.execCommand('goDocEnd');
        var cursor = this._doc.getCursor();
        var pos = {
            line: cursor.line,
            ch: 0
        };
        this._doc.replaceRange(message + '\n', pos);
        this._doc.addLineClass(cursor.line, 'text', mode);
        if (mode === 'speak') this.setEditing(false);
        this.codeMirror.execCommand('goDocEnd');
        if (mode === 'ask') {
            this._doc.addLineClass(cursor.line + 1, 'text', 'answer');
            this.codeMirror.focus();
        }
    };

    p.endInput = function () {
        var cursor = this._doc.getCursor();
        var lineInfo = this.codeMirror.lineInfo(cursor.line);
        if (lineInfo.textClass === 'answer') {
            this._inputData = lineInfo.text;
            var pos = {
                line: cursor.line,
                ch: lineInfo.text.length
            };
            this._doc.replaceRange('\n', pos);
        } else this._inputData = this._doc.getLine(cursor.line - 1);
        Entry.container.setInputValue(this._inputData);
        this.setEditing(false);
    };

    p.stopInput = function (inputValue) {
        this.setEditing(false);
    };

    p.setEditing = function (set) {
        if (this._isEditing === set) return;
        this._isEditing = set;
    };
})(Entry.Console.prototype);

/***/ }),

/***/ "./src/textcoding/util/textCodingUtil.js":
/*!***********************************************!*\
  !*** ./src/textcoding/util/textCodingUtil.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *
 */


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Entry.TextCodingUtil = {};

(function (tu) {
    /*tu.init = function() {
        this._funcParams = [];
    };*/

    tu.canUsePythonVariables = function (variables) {
        return variables.every(function (variable) {
            var target = variable.variableType === 'variable' ? 'v' : 'l';
            return !Entry.TextCodingUtil.checkName(variable.name, target);
        });
    };

    tu.canUsePythonFunctions = function (functions) {
        var _this = this;

        return functions.every(function (_ref) {
            var content = _ref.content;

            var code = new Entry.Code(content);
            var paramBlock = code.getEventMap('funcDef')[0];
            paramBlock = paramBlock && paramBlock.params[0];

            if (!paramBlock) return true;

            if (paramBlock.type !== 'function_field_label') return false;

            var params = paramBlock.params;

            if (!params[1]) {
                if (test(params[0])) return false;
            } else if (_this.hasFunctionFieldLabel(params[1])) {
                return false;
            }

            return true;
        });

        function test(name) {
            return (/ /.test(name)
            );
        }
    };

    tu.initQueue = function () {
        var queue = new Entry.Queue();
        this._funcParamQ = queue;

        var fNameQueue = new Entry.Queue();
        this._funcNameQ = fNameQueue;
    };

    tu.clearQueue = function () {
        this._funcParamQ.clear();
        this._funcNameQ.clear();
    };

    tu.indent = function (textCode) {
        var result = '\t';
        var indentedCodeArr = textCode.split('\n');
        indentedCodeArr.pop();
        result += indentedCodeArr.join('\n\t');
        result = '\t' + result.trim(); //.concat('\n');

        return result;
    };

    tu.isNumeric = function (value) {
        value = String(Math.abs(value));
        if (value.match(/^-?\d+$|^-\d+$/) || value.match(/^-?\d+\.\d+$/)) {
            return true;
        }

        return false;
    };

    tu.isBinaryOperator = function (value) {
        if (value == '==' || value == '>' || value == '<' || value == '>=' || value == '<=' || value == '+' || value == '-' || value == '*' || value == '/') {
            return true;
        }

        return false;
    };

    tu.logicalExpressionConvert = function (operator) {
        var result;
        switch (operator) {
            case '&&':
                {
                    result = null;
                    break;
                }
            case '||':
                {
                    result = null;
                    break;
                }
            default:
                {
                    result = operator;
                }
        }
        return result;
    };

    tu.dropdownDynamicNameToIdConvertor = function (name, menuName, currentObject) {
        var result = name;
        var currentScene = Entry.scene.selectedScene;

        if (menuName == 'scenes') {
            var scenes = Entry.scene.getScenes();
            for (var s in scenes) {
                var scene = scenes[s];
                if (name == scene.name) {
                    return scene.id;
                }
            }
        } else if (menuName == 'spritesWithMouse' || menuName == 'spritesWithSelf' || menuName == 'collision' || menuName == 'clone') {
            var objects = Entry.container.getAllObjects();
            for (var o in objects) {
                var object = objects[o];
                if (object.scene.id == currentScene.id) if (name == object.name) return object.id;
            }
        } else if (menuName == 'variables') {
            var entryVariables = Entry.variableContainer.variables_;
            for (var e in entryVariables) {
                var entryVariable = entryVariables[e];
                if (entryVariable.name_ == name) {
                    if (currentObject) {
                        if (currentObject.id == entryVariable.object_) return entryVariable.id_;
                    } else return entryVariable.id_;
                }
            }
        } else if (menuName == 'lists') {
            var entryLists = Entry.variableContainer.lists_;
            for (var e in entryLists) {
                var entryList = entryLists[e];
                if (entryList.name_ == name) {
                    if (currentObject) {
                        if (currentObject.id == entryList.object_) return entryList.id_;
                    } else return entryList.id_;
                }
            }
        } else if (menuName == 'messages') {
            var entryMessages = Entry.variableContainer.messages_;
            for (var e in entryMessages) {
                var entryMessage = entryMessages[e];
                if (entryMessage.name == name) {
                    return entryMessage.id;
                }
            }
        } else if (menuName == 'pictures') {
            currentObject = Entry.playground.object;
            var pictures = currentObject.pictures;
            for (var p in pictures) {
                var picture = pictures[p];
                if (picture.name == name) {
                    return picture.id;
                }
            }
        } else if (menuName == 'sounds') {
            currentObject = Entry.playground.object;
            var sounds = currentObject.sounds;
            for (var p in sounds) {
                var sound = sounds[p];
                if (sound.name == name) {
                    return sound.id;
                }
            }
        }

        return result;
    };

    tu.dropdownDynamicIdToNameConvertor = function (id, menuName) {
        //var found = false;
        var result;

        switch (menuName) {
            case 'variables':
                var entryVariables = Entry.variableContainer.variables_;
                for (var e in entryVariables) {
                    var entryVariable = entryVariables[e];
                    if (entryVariable.id_ == id) {
                        if (entryVariable.object_) result = 'self.' + entryVariable.name_;else result = entryVariable.name_;
                        break;
                    }
                }
                break;
            case 'lists':
                var entryLists = Entry.variableContainer.lists_;
                for (var e in entryLists) {
                    var entryList = entryLists[e];
                    if (entryList.id_ == id) {
                        if (entryList.object_) result = 'self.' + entryList.name_;else result = entryList.name_;
                        break;
                    }
                }
                break;
            case 'messages':
                var entryMessages = Entry.variableContainer.messages_;
                for (var e in entryMessages) {
                    var entryList = entryMessages[e];
                    if (entryList.id == id) {
                        result = entryList.name;
                        break;
                    }
                }
                break;
            case 'pictures':
                var objects = Entry.container.getAllObjects();
                for (var o in objects) {
                    var object = objects[o];
                    var pictures = object.pictures;
                    for (var p in pictures) {
                        var picture = pictures[p];
                        if (picture.id == id) {
                            result = picture.name;
                            return result;
                        }
                    }
                }
                break;
            case 'sounds':
                var objects = Entry.container.getAllObjects();
                for (var o in objects) {
                    var object = objects[o];
                    var sounds = object.sounds;
                    for (var p in sounds) {
                        var sound = sounds[p];
                        if (sound.id == id) {
                            result = sound.name;
                            return result;
                        }
                    }
                }
                break;
            case 'scenes':
                var scenes = Entry.scene.getScenes();
                for (var s in scenes) {
                    var scene = scenes[s];
                    if (scene.id == id) {
                        result = scene.name;
                        break;
                    }
                }
                break;
            case 'clone':
                if (id == 'self') {
                    result = id;
                } else {
                    var objects = Entry.container.objects_.filter(function (obj) {
                        return obj.id === id;
                    });

                    result = objects[0] ? objects[0].name : null;
                }
                break;
        }

        return result;
    };

    tu.getDynamicIdByNumber = function (value, textParam) {
        var result = value;
        if (Entry.getMainWS() && Entry.getMainWS().vimBoard) var VIM = Entry.getMainWS().vimBoard;else return result;

        var currentObject = VIM._currentObject;

        if (typeof value == 'number') {
            result = 'None';
            if (textParam.menuName == 'pictures') {
                if (value > 0) {
                    var objects = Entry.container.getAllObjects();
                    for (var o in objects) {
                        var object = objects[o];
                        if (object.id == currentObject.id) {
                            var pictures = object.pictures;
                            var picture = pictures[value - 1];
                            if (picture) {
                                result = picture.name;
                                break;
                            }
                        }
                    }
                }
            } else if (textParam.menuName == 'sounds') {
                if (value > 0) {
                    var objects = Entry.container.getAllObjects();
                    for (var o in objects) {
                        var object = objects[o];
                        if (object.id == currentObject.id) {
                            var sounds = object.sounds;
                            var sound = sounds[value - 1];
                            if (sound) {
                                result = sound.name;
                                break;
                            }
                        }
                    }
                }
            }
        } else {
            result = Entry.TextCodingUtil.dropdownDynamicNameToIdConvertor(value, textParam.menuName);
        }

        return result;

        function isNumeric(value) {
            return (/^\d+$/.test(value)
            );
        }
    };

    tu.isLocalType = function (id, menuName) {
        var result = id;

        if (menuName == 'variables') {
            var entryVariables = Entry.variableContainer.variables_;
            for (var e in entryVariables) {
                var entryVariable = entryVariables[e];
                if (entryVariable.id_ == id) {
                    if (entryVariable.object_) return true;else return false;
                }
            }
        } else if (menuName == 'lists') {
            var entryLists = Entry.variableContainer.lists_;
            for (var e in entryLists) {
                var entryList = entryLists[e];
                if (entryList.id_ == id) {
                    if (entryList.object_) return true;else return false;
                }
            }
        }

        return false;
    };

    tu.binaryOperatorValueConvertor = function (operator) {
        var result;
        switch (operator) {
            case '"EQUAL"':
                {
                    result = '==';
                    break;
                }
            case '"GREATER"':
                {
                    result = '>';
                    break;
                }
            case '"LESS"':
                {
                    result = '<';
                    break;
                }
            case '"GREATER_OR_EQUAL"':
                {
                    result = '>=';
                    break;
                }
            case '"LESS_OR_EQUAL"':
                {
                    result = '<=';
                    break;
                }
            case '"그리고"':
                {
                    result = '&&';
                    break;
                }
            case '"또는"':
                {
                    result = '||';
                    break;
                }
            case '"PLUS"':
                {
                    result = '+';
                    break;
                }
            case '"MINUS"':
                {
                    result = '-';
                    break;
                }
            case '"MULTI"':
                {
                    result = '*';
                    break;
                }
            case '"DIVIDE"':
                {
                    result = '/';
                    break;
                }
            default:
                {
                    result = operator;
                }
        }

        return result;
    };

    tu.variableListFilter = function (block, index, param) {
        if (param == 'None') return result = param;

        var result = param;
        var type = block.data.type;
        if (type == 'change_variable' || type == 'set_variable' || type == 'get_variable') {
            if (index == 1) {
                result = eval(param);
            }
        } else if (type == 'length_of_list' || type == 'is_included_in_list') {
            if (index == 2) {
                result = eval(param);
            }
        } else if (type == 'value_of_index_from_list') {
            if (index == 2) {
                result = eval(param);
            } else if (index == 4) {
                if (this.isNumeric(param)) result = param - 1;
            }
        } else if (type == 'remove_value_from_list') {
            if (index == 2) {
                result = eval(param);
            } else if (index == 1) {
                if (this.isNumeric(param)) result = param - 1;
            }
        } else if (type == 'insert_value_to_list') {
            if (index == 2) {
                result = eval(param);
            } else if (index == 3) {
                if (this.isNumeric(param)) result = param - 1;
            }
        } else if (type == 'change_value_list_index') {
            if (index == 1) {
                result = eval(param);
            } else if (index == 2) {
                if (this.isNumeric(param)) result = param - 1;
            }
        } else if (type == 'add_value_to_list') {
            if (index == 2) {
                result = eval(param);
            }
        }

        return result;
    };

    /*tu.variableListSpaceMessage = function() {
        var error = {};
        error.title = "파이썬변환(Converting) 오류";
        error.message = "공백(띄어쓰기)이 포함된 변수 또는 리스트는 변환할 수 없습니다.";
        error.line = this._blockCount;
        throw error;
    };*/

    tu.isGlobalVariableExisted = function (name) {
        var entryVariables = Entry.variableContainer.variables_;
        for (var i in entryVariables) {
            var entryVariable = entryVariables[i];
            if (entryVariable.object_ === null && entryVariable.name_ == name) {
                return true;
            }
        }

        return false;
    };

    tu.updateGlobalVariable = function (name, value) {
        var variables = Entry.variableContainer.variables_;
        for (var i in variables) {
            var variable = variables[i];
            if (variable.object_ === null && variable.name_ == name) {
                var model = variable.toJSON();
                model.name = name;
                model.value = value;
                variable.syncModel_(model);
                Entry.variableContainer.updateList();

                break;
            }
        }
    };

    tu.createGlobalVariable = function (name, value) {
        if (this.isGlobalVariableExisted(name)) return;

        var variable = {
            name: name,
            value: value,
            variableType: 'variable'
        };

        Entry.variableContainer.addVariable(variable);
        Entry.variableContainer.updateList();
    };

    tu.isLocalVariableExisted = function (name, object) {
        var entryVariables = Entry.variableContainer.variables_;
        for (var i in entryVariables) {
            var entryVariable = entryVariables[i];
            if (entryVariable.object_ === object.id && entryVariable.name_ == name) {
                return true;
            }
        }

        return false;
    };

    tu.updateLocalVariable = function (name, value, object) {
        var entryVariables = Entry.variableContainer.variables_;
        for (var i in entryVariables) {
            var entryVariable = entryVariables[i];
            if (entryVariable.object_ === object.id && entryVariable.name_ == name) {
                var model = entryVariable.toJSON();
                model.name = name;
                model.value = value;
                entryVariable.syncModel_(model);
                Entry.variableContainer.updateList();

                break;
            }
        }
    };

    tu.createLocalVariable = function (name, value, object) {
        if (this.isLocalVariableExisted(name, object)) return;

        var variable = {
            name: name,
            value: value,
            object: object.id,
            variableType: 'variable'
        };

        Entry.variableContainer.addVariable(variable);
        Entry.variableContainer.updateList();
    };

    tu.isLocalVariable = function (variableId) {
        var object = Entry.playground.object;
        var entryVariables = Entry.variableContainer.variables_;
        for (var e in entryVariables) {
            var entryVariable = entryVariables[e];
            if (entryVariable.object_ == object.id && entryVariable.id_ == variableId) {
                return true;
            }
        }

        return false;
    };

    tu.isGlobalListExisted = function (name) {
        var entryLists = Entry.variableContainer.lists_;
        for (var i in entryLists) {
            var entryList = entryLists[i];
            if (entryList.object_ === null && entryList.name_ == name) {
                return true;
            }
        }

        return false;
    };

    tu.updateGlobalList = function (name, array) {
        var entryLists = Entry.variableContainer.lists_;
        for (var i in entryLists) {
            var entryList = entryLists[i];
            if (entryList.object_ === null && entryList.name_ == name) {
                var list = {
                    x: entryList.x_,
                    y: entryList.y_,
                    id: entryList.id_,
                    visible: entryList.visible_,
                    name: name,
                    isCloud: entryList.isCloud_,
                    width: entryList.width_,
                    height: entryList.height_,
                    array: array
                };

                entryList.syncModel_(list);
                entryList.updateView();
                Entry.variableContainer.updateList();

                break;
            }
        }
    };

    tu.createGlobalList = function (name, array) {
        if (this.isGlobalListExisted(name)) return;

        var list = {
            name: name,
            array: array,
            variableType: 'list'
        };

        Entry.variableContainer.addList(list);
        Entry.variableContainer.updateList();
    };

    tu.isLocalListExisted = function (name, object) {
        if (!object) return false;
        var entryLists = Entry.variableContainer.lists_;
        for (var i in entryLists) {
            var entryList = entryLists[i];
            if (entryList.object_ === object.id && entryList.name_ == name) {
                return true;
            }
        }

        return false;
    };

    tu.updateLocalList = function (name, array, object) {
        var entryLists = Entry.variableContainer.lists_;
        for (var i in entryLists) {
            var entryList = entryLists[i];
            if (entryList.object_ === object.id && entryList.name_ == name) {
                var list = {
                    x: entryList.x_,
                    y: entryList.y_,
                    id: entryList.id_,
                    visible: entryList.visible_,
                    name: name,
                    isCloud: entryList.isCloud_,
                    width: entryList.width_,
                    height: entryList.height_,
                    array: array
                };

                entryList.syncModel_(list);
                entryList.updateView();
                Entry.variableContainer.updateList();

                break;
            }
        }
    };

    tu.createLocalList = function (name, array, object) {
        if (this.isLocalListExisted(name, object)) return;

        var list = {
            name: name,
            array: array,
            object: object.id,
            variableType: 'list'
        };

        Entry.variableContainer.addList(list);
        Entry.variableContainer.updateList();
    };

    tu.isLocalList = function (listId) {
        var object = Entry.playground.object;
        var entryLists = Entry.variableContainer.lists_;
        for (var e in entryLists) {
            var entryList = entryLists[e];
            if (entryList.object_ == object.id && entryList.id_ == listId) {
                return true;
            }
        }

        return false;
    };

    tu.createMessage = function (name) {
        var messages = Entry.variableContainer.messages_;
        var exist = Entry.isExist(name, 'name', messages);
        if (exist) return;
        var message = {
            name: name
        };

        Entry.variableContainer.addMessage(message);
        Entry.variableContainer.updateList();
    };

    /*tu.isLocalType = function(block, id) {
        if(block.data.type == "get_variable" ||
            block.data.type == "set_variable" ||
            block.data.type == "change_variable" ) {
             if(this.isLocalVariable(id))
                return true;
         } else if(block.data.type == "value_of_index_from_list" ||
            block.data.type == "add_value_to_list" ||
            block.data.type == "remove_value_from_list" ||
            block.data.type == "insert_value_to_list" ||
            block.data.type == "change_value_list_index" ||
            block.data.type == "length_of_list" ||
            block.data.type == "is_included_in_list") {
             if(this.isLocalList(id))
                return true;
        }
    };*/

    tu.isEventBlock = function (block) {
        var blockType = block.data.type;
        if (blockType == 'when_run_button_click' || blockType == 'when_some_key_pressed' || blockType == 'mouse_clicked' || blockType == 'mouse_click_cancled' || blockType == 'when_object_click' || blockType == 'when_object_click_canceled' || blockType == 'when_message_cast' || blockType == 'when_scene_start' || blockType == 'when_clone_start') {
            return true;
        }

        return false;
    };

    tu.isEntryEventBlockWithParam = function (block) {
        var blockType = block.data.type;
        if (blockType == 'when_some_key_pressed' || blockType == 'when_message_cast') return true;

        return false;
    };

    tu.isEventBlockByType = function (blockType) {
        if (blockType == 'when_run_button_click' || blockType == 'when_some_key_pressed' || blockType == 'mouse_clicked' || blockType == 'mouse_click_cancled' || blockType == 'when_object_click' || blockType == 'when_object_click_canceled' || blockType == 'when_message_cast' || blockType == 'when_scene_start' || blockType == 'when_clone_start') {
            return true;
        }

        return false;
    };

    tu.makeDefinition = function (block) {
        var blockType = block.data.type;
        var syntax = Entry.block[blockType].syntax.py[0];

        var paramReg = /(%.)/im;
        var tokens = syntax.split(paramReg);

        var result = '';
        for (var i = 0; i < tokens.length; i++) {
            var token = tokens[i];
            if (paramReg.test(token)) {
                result += 'event';
            } else {
                result += token;
            }
        }

        return result;
    };

    /*tu.isNoPrintBlock = function(block) {
        var blockType = block.data.type;
         return false;
    };*/

    tu.entryEventFilter = function (text) {
        var startIndex = text.indexOf('(');
        var endIndex = text.indexOf(')');

        var stmt = text.substring(0, startIndex);
        var param = text.substring(startIndex + 1, endIndex);
        param = param.replace(/\"/g, '');

        if (param) {
            if (isNaN(param)) {
                param = param.replace(/ /g, '_space_');
            } else {
                param = 'num' + param;
            }

            if (param == 'None') param = 'none';
        }

        text = stmt + '(' + param + '):\n';

        return text;
    };

    tu.entryEventFuncFilter = function (threads) {
        var result;
        var eventFound = false;
        var threadArr = threads.split('\n');

        for (var i in threadArr) {
            var thread = threadArr[i];
            var trimedThread = threadArr[i].trim();
            var colonIndex = trimedThread.indexOf(':');
            var preText = '';

            if (colonIndex > 0) {
                preText = trimedThread.substring(0, colonIndex + 1);
            }

            preText = preText.split('(');
            preText = preText[0];

            /*if( preText == "def entry_event_start():" ||
                    preText == "def entry_event_mouse_down():" ||
                    preText == "def entry_event_mouse_up():" ||
                    preText == "def entry_event_object_down():" ||
                    preText == "def entry_event_object_up():" ||
                    preText == "def entry_event_scene_start():" ||
                    preText == "def entry_event_clone_create():" ) {
                     //var tokens = [];
                    //tokens = funcPart.split("def");
                    //funcPart = tokens[1].substring(0, tokens[1].length-1).trim();
                     thread = thread.replace(/def /, "");
                    var colonIndex = thread.indexOf(":");
                    var funcPart = "";
                    var restPart = "";
                     if(colonIndex > 0) {
                        funcPart = thread.substring(0, colonIndex+1);
                        restPart = thread.substring(colonIndex+1, thread.length);
                    }
                     if(restPart) {
                        var newThread = funcPart.concat("\n").concat(restPart.trim());
                    }
                    else {
                        var newThread = funcPart;
                    }
                     threadArr[i] = newThread;
                    eventFound = true;
                }
                else */if (preText == 'def when_press_key' || preText == 'def when_get_signal') {
                thread = thread.replace(/def /, '');
                var colonIndex = thread.indexOf(':');
                var funcPart = '';
                var restPart = '';

                if (colonIndex > 0) {
                    funcPart = thread.substring(0, colonIndex);
                    restPart = thread.substring(colonIndex + 1, thread.length);
                }

                if (restPart) {
                    var newThread = funcPart.concat('\n').concat(restPart.trim());
                } else {
                    var newThread = funcPart;
                }

                threadArr[i] = newThread;
                eventFound = true;
            } else {
                if (eventFound) {
                    var newThread = threadArr[i];
                    newThread = newThread.replace(/\t/g, '    ');
                    newThread = newThread.replace(/    /, '');
                    threadArr[i] = newThread;
                }
            }
        }

        result = threadArr.join('\n');
        return result;
    };

    tu.eventBlockSyntaxFilter = function (name) {
        var result;
        if (name == 'when_start' || name == 'when_press_key' || name == 'when_click_mouse_on' || name == 'when_click_mouse_off' || name == 'when_click_object_on' || name == 'when_click_object_off' || name == 'when_get_signal' || name == 'when_start_scene' || name == 'when_make_clone') {
            name = 'def ' + name;
            result = name;
            return name;
        }

        return result;
    };

    tu.isEntryEventFunc = function (name) {
        if (name == 'def when_start' || name == 'def when_press_key' || name == 'def when_click_mouse_on' || name == 'def when_click_mouse_off' || name == 'def when_click_object_on' || name == 'def when_click_object_off' || name == 'def when_get_signal' || name == 'def when_start_scene' || name == 'def when_make_clone') {
            return true;
        }

        return false;
    };

    /////////////////////////////////////////////////////
    //Important
    ////////////////////////////////////////////////////
    tu.isEntryEventFuncByFullText = function (text) {
        var index = text.indexOf('(');
        var name = text.substring(0, index);

        if (name == 'def when_start' || name == 'def when_press_key' || name == 'def when_click_mouse_on' || name == 'def when_click_mouse_off' || name == 'def when_click_object_on' || name == 'def when_click_object_off' || name == 'def when_get_signal' || name == 'def when_start_scene' || name == 'def when_make_clone') {
            return true;
        } else if (name == 'def entry_event_start' || name == 'def entry_event_key' || name == 'def entry_event_mouse_down' || name == 'def entry_event_mouse_up' || name == 'def entry_event_object_down' || name == 'def entry_event_object_up' || name == 'def entry_event_signal' || name == 'def entry_event_scene_start' || name == 'def entry_event_clone_create') {
            return true;
        }

        return false;
    };

    tu.eventBlockSyntaxFilter = function (name) {
        var result;
        if (name == 'when_start' || name == 'when_press_key' || name == 'when_click_mouse_on' || name == 'when_click_mouse_off' || name == 'when_click_object_on' || name == 'when_click_object_off' || name == 'when_get_signal' || name == 'when_start_scene' || name == 'when_make_clone') {
            name = 'def ' + name;
            result = name;
            return name;
        } else if (name == 'entry_event_start' || name == 'entry_event_key' || name == 'entry_event_mouse_down' || name == 'entry_event_mouse_up' || name == 'entry_event_object_down' || name == 'entry_event_object_up' || name == 'entry_event_signal' || name == 'entry_event_scene_start' || name == 'entry_event_clone_create') {
            name = 'def ' + name;
            result = name;
            return name;
        }

        return result;
    };

    tu.isEntryEventFuncName = function (name) {
        if (name == 'when_start' || name == 'when_press_key' || name == 'when_click_mouse_on' || name == 'when_click_mouse_off' || name == 'when_click_object_on' || name == 'when_click_object_off' || name == 'when_get_signal' || name == 'when_start_scene' || name == 'when_make_clone') {
            return true;
        } else if (name == 'entry_event_start' || name == 'entry_event_key' || name == 'entry_event_mouse_down' || name == 'entry_event_mouse_up' || name == 'entry_event_object_down' || name == 'entry_event_object_up' || name == 'entry_event_signal' || name == 'entry_event_scene_start' || name == 'entry_event_clone_create') {
            return true;
        }

        return false;
    };

    tu.isEntryEventFuncByType = function (type) {
        if (type == 'when_run_button_click' || type == 'when_some_key_pressed' || type == 'mouse_clicked' || type == 'mouse_click_cancled' || type == 'when_object_click' || type == 'when_object_click_canceled' || type == 'when_message_cast' || type == 'when_scene_start' || type == 'when_clone_start') {
            return true;
        }
        return false;
    };
    /////////////////////////////////////////////////////
    //Important
    ////////////////////////////////////////////////////

    tu.isEntryEventFuncNameWithParam = function (name) {
        var lastIndex = name.lastIndexOf('_');

        if (lastIndex > 0) {
            var preText = name.substring(0, lastIndex);
            if (preText == 'when_press_key' || preText == 'when_get_signal') {
                return true;
            }
        }

        return false;
    };

    tu.searchFuncDefParam = function (block) {
        if (block.data.type == 'function_field_label') {
            var name = block.data.params[0];
            this._funcNameQ.enqueue(name);
        }

        if (block && block.data && block.data.params && block.data.params[1]) {
            if (block.data.type == 'function_field_string' || block.data.type == 'function_field_boolean') {
                var param = block.data.params[0].data.type;
                this._funcParamQ.enqueue(param);
            }

            var result = this.searchFuncDefParam(block.data.params[1]);
            return result;
        } else {
            return block;
        }
    };

    tu.isEntryEventFuncTypeWithParam = function (block) {
        if (block.type == 'when_some_key_pressed' || block.type == 'when_message_cast') return true;

        return false;
    };

    tu.isEntryEventDesignatedParamName = function (paramName) {
        var result = false;

        if (paramName == 'key') {
            result = true;
        } else if (paramName == 'signal') {
            result = true;
        }

        return result;
    };

    tu.gatherFuncDefParam = function (block) {
        if (block && block.data) {
            if (block.data.params[0]) {
                if (block.data.params[0].data) {
                    var param = block.data.params[0].data.type;
                    if (block.data.type == 'function_field_string' || block.data.type == 'function_field_boolean') {
                        this._funcParamQ.enqueue(param);
                    }
                } else if (block.data.type == 'function_field_label') {
                    var name = block.data.params[0];
                    this._funcNameQ.enqueue(name);
                }
            }
            if (block.data.params[1]) {
                var result = this.searchFuncDefParam(block.data.params[1]);

                if (result.data.params[0].data) {
                    var param = result.data.params[0].data.type;

                    if (result.data.type == 'function_field_string' || result.data.type == 'function_field_boolean') {
                        this._funcParamQ.enqueue(param);
                    }
                }

                if (result.data.params[1]) {
                    if (result.data.params[1].data.params[0].data) {
                        var param = result.data.params[1].data.params[0].data.type;

                        if (result.data.params[1].data.type == 'function_field_string' || result.data.params[1].data.type == 'function_field_boolean') {
                            this._funcParamQ.enqueue(param);
                        }
                    }
                }
            }
        }

        return result;
    };

    tu.getLastParam = function (funcBlock) {
        if (funcBlock && funcBlock.data && funcBlock.data.params[1]) {
            var result = this.getLastParam(funcBlock.data.params[1]);
        } else {
            return funcBlock;
        }

        return result;
    };

    tu.isFuncContentsMatch = function (blockFuncContents, textFuncStatements, paramMap, paramInfo, currentFuncKey) {
        var matchFlag = true;

        if (textFuncStatements.length != blockFuncContents.length) {
            matchFlag = false;
            return matchFlag;
        }

        for (var i = 0; i < blockFuncContents.length; i++) {
            if (!matchFlag) break;
            matchFlag = false;
            var blockFuncContent = blockFuncContents[i];
            var textFuncStatement = textFuncStatements[i];

            if (blockFuncContent && !textFuncStatement) {
                matchFlag = false;
                return matchFlag;
            }

            if (!blockFuncContent && textFuncStatement) {
                matchFlag = false;
                return matchFlag;
            }

            if (blockFuncContent._schema && blockFuncContent._schema.template) {
                var template = blockFuncContent._schema.template;
                var blockFuncName = template.trim().split(' ')[0];
                if (blockFuncName == textFuncStatement.funcName) var reculsive = true;else var reculsive = false;
            }

            if (textFuncStatement.type == blockFuncContent.data.type || reculsive) {
                matchFlag = true;
                if (currentFuncKey != textFuncStatement.type) matchFlag = false;

                var textFuncStatementParams = textFuncStatement.params;
                var blockFuncContentParams = blockFuncContent.data.params;
                var cleansingParams = [];
                if (textFuncStatementParams == undefined || textFuncStatementParams == null) textFuncStatementParams = [];
                if (blockFuncContentParams == undefined || blockFuncContentParams == null) blockFuncContentParams = [];

                blockFuncContentParams.map(function (blockFuncContentParam, index) {
                    if (blockFuncContentParam) cleansingParams.push(blockFuncContentParam);
                });
                blockFuncContentParams = cleansingParams;

                cleansingParams = [];
                textFuncStatementParams.map(function (textFuncStatementParam, index) {
                    if (textFuncStatementParam) cleansingParams.push(textFuncStatementParam);
                });
                textFuncStatementParams = cleansingParams;

                if (textFuncStatementParams.length == blockFuncContentParams.length) {
                    //Statement Param Length Comparison
                    matchFlag = true;
                    for (var j = 0; j < textFuncStatementParams.length; j++) {
                        if (!matchFlag) break;
                        matchFlag = false;

                        if (_typeof(textFuncStatementParams[j]) !== 'object') {
                            if (textFuncStatementParams[j] == blockFuncContentParams[j]) {
                                matchFlag = true;
                            } else {
                                matchFlag = false;
                            }
                        } else if (textFuncStatementParams[j].name) {
                            var paramKey = textFuncStatementParams[j].name;
                            var paramBlockType = paramInfo[paramKey];

                            if (paramBlockType) {
                                if (blockFuncContentParams[j].data.type == paramBlockType) matchFlag = true;
                            } else {
                                if (textFuncStatementParams[j].params && blockFuncContentParams[j].data.params && textFuncStatementParams[j].params[0] == blockFuncContentParams[j].data.params[0]) matchFlag = true;
                            }
                        } else if (textFuncStatementParams[j].type == 'True' || textFuncStatementParams[j].type == 'False') {
                            if (blockFuncContentParams[j].data) {
                                if (textFuncStatementParams[j].type == blockFuncContentParams[j].data.type) {
                                    matchFlag = true;
                                }
                            } else if (textFuncStatementParams[j].type == blockFuncContentParams[j].type) {
                                matchFlag = true;
                            }
                        } else if (textFuncStatementParams[j].type && textFuncStatementParams[j].params) {
                            matchFlag = this.isFuncContentsParamsMatch(blockFuncContentParams[j], textFuncStatementParams[j], paramMap, paramInfo);
                        }
                    }

                    if (matchFlag && textFuncStatement.statements && textFuncStatement.statements.length != 0) {
                        for (var kkk in textFuncStatement.statements) {
                            matchFlag = this.isFuncContentsMatch(blockFuncContent.data.statements[kkk]._data, textFuncStatement.statements[kkk], paramMap, paramInfo);
                        }
                    }
                } else {
                    matchFlag = false;
                    break;
                }
            } else {
                matchFlag = false;
                break;
            }
        }

        return matchFlag;
    };

    tu.isFuncContentsParamsMatch = function (blockFuncContentParam, textFuncStatementParam, paramMap, paramInfo) {
        var matchFlag = false;

        var tfspType = textFuncStatementParam.type;
        var bfcpType = blockFuncContentParam.data.type;

        if (tfspType == 'text') {
            tfspType = 'literal';
        } else if (tfspType == 'number') {
            tfspType = 'literal';
        } else {
            if (textFuncStatementParam.isParamFromFunc) tfspType = paramInfo[tfspType];
        }

        if (bfcpType == 'text') {
            bfcpType = 'literal';
        } else if (bfcpType == 'number') {
            bfcpType = 'literal';
        }

        if (tfspType == bfcpType) {
            var textSubParams = textFuncStatementParam.params;
            //var blockSubParamsUncleansed = blockFuncContentParam.data.params;
            var blockSubParams = blockFuncContentParam.data.params;

            /*for(var b in blockSubParamsUncleansed) {
                var blockSubParamUncleansed = blockSubParamsUncleansed[b];
                if(blockSubParamUncleansed)
                    blockSubParams.push(blockSubParamUncleansed);
            }*/

            if (!textSubParams && !blockSubParams) {
                matchFlag = true;
            } else if (textSubParams.length == blockSubParams.length) {
                matchFlag = true;
                for (var t in textSubParams) {
                    if (!matchFlag) break;
                    matchFlag = false;
                    var textSubParam = textSubParams[t];
                    var blockSubParam = blockSubParams[t];
                    if (!textSubParam && !blockSubParam) {
                        matchFlag = true;
                    } else if ((typeof textSubParam === 'undefined' ? 'undefined' : _typeof(textSubParam)) !== 'object') {
                        if (textSubParam == blockSubParam) {
                            matchFlag = true;
                        }
                    } else if (textSubParam.name) {
                        var paramKey = textSubParam.name;
                        var paramBlockType = paramInfo[paramKey];
                        if (paramBlockType) {
                            if (blockSubParam.data.type == paramBlockType) matchFlag = true;
                        } else {
                            if (textSubParam.params[0] == blockSubParam.data.params[0]) matchFlag = true;
                        }
                    } else if (textSubParam.type == 'True' || textSubParam.type == 'False') {
                        if (blockSubParam.data) {
                            if (textSubParam.type == blockSubParam.data.type) {
                                matchFlag = true;
                            }
                        } else if (textSubParam.type == blockSubParam.type) {
                            matchFlag = true;
                        }
                    } else if (textSubParam.type && textSubParam.params) {
                        matchFlag = this.isFuncContentsParamsMatch(blockSubParam, textSubParam, paramMap, paramInfo);
                    }
                }
            } else {
                matchFlag = false;
            }
        } else {
            matchFlag = false;
        }

        return matchFlag;
    };

    tu.isParamBlock = function (block) {
        var type = block.type;
        if (type == 'ai_boolean_distance' || type == 'ai_distance_value' || type == 'ai_boolean_object' || type == 'ai_boolean_and') {
            return true;
        } else {
            return false;
        }
    };

    tu.hasBlockInfo = function (data, blockInfo) {
        var result = false;
        for (var key in blockInfo) {
            var info = blockInfo[key];
            if (key == data.type) {
                for (var j in info) {
                    var loc = info[j];
                    if (loc.start == data.start && loc.end == data.end) {
                        result = true;
                        break;
                    }
                }
            }
        }

        return result;
    };

    tu.makeFuncParamBlock = function (targetBlock, paramInfo, blockCount) {
        var tParams = targetBlock.params;

        for (var i in tParams) {
            var param = tParams[i];
            if (!param) continue;

            if ((typeof param === 'undefined' ? 'undefined' : _typeof(param)) != 'object') continue;

            if (param.type && param.params && param.params.length != 0) {
                this.makeFuncParamBlock(param, paramInfo, blockCount);
            } else if (param.type && param.params && param.params.length == 0) {
                var paramKey = param.type;
                var paramBlockType = paramInfo[paramKey];
                if (paramBlockType) {
                    var paramBlock = {};
                    paramBlock.type = paramBlockType;
                    paramBlock.params = [];
                    targetBlock.params[i] = paramBlock;
                }
            } else if (param.name) {
                var paramKey = param.name;
                var paramBlockType = paramInfo[paramKey];
                if (paramBlockType) {
                    var paramBlock = {};
                    paramBlock.type = paramBlockType;
                    paramBlock.params = [];
                    targetBlock.params[i] = paramBlock;
                } else if (param.type != 'get_variable') {
                    var keyword = param.name;
                    Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, keyword, blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE);
                }
            } else if (param.object && param.property) {
                //self.xx
                var keyword = param.object.name + '.' + param.property.name;
                Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, keyword, blockCount, Entry.TextCodingError.SUBJECT_CONV_VARIABLE);
            }
        }

        var stmts = targetBlock.statements;

        if (stmts && stmts[0] && stmts[0].length != 0) {
            var statements0 = stmts[0];
            for (var s0 in statements0) {
                var statement0 = statements0[s0];
                this.makeFuncParamBlock(statement0, paramInfo, blockCount);
            }
        }

        if (stmts && stmts[1] && stmts[1].length != 0) {
            var statements1 = stmts[1];
            for (var s1 in statements1) {
                var statement1 = statements1[s1];
                this.makeFuncParamBlock(statement1, paramInfo, blockCount);
            }
        }
    };

    tu.updateBlockInfo = function (data, blockInfo) {
        var infoArr = blockInfo[data.type];
        if (infoArr && Array.isArray(infoArr) && infoArr.legnth != 0) {
            for (var i in infoArr) {
                var info = infoArr[i];
                if (info.start == data.start && info.end == data.end) {
                    break;
                } else {
                    var loc = {};
                    loc.start = data.start;
                    loc.end = data.end;

                    infoArr.push(loc);
                }
            }
        } else {
            blockInfo[data.type] = [];

            var loc = {};
            loc.start = data.start;
            loc.end = data.end;

            blockInfo[data.type].push(loc);
        }
    };

    tu.assembleRepeatWhileTrueBlock = function (block, syntax) {
        var result = '';
        if (block.data.type == 'repeat_while_true') {
            var blockArr = syntax.split(' ');
            var lastIndex = blockArr.length - 1;
            var option = blockArr[lastIndex];

            if (option == 'until') {
                var condition = 'not';
                blockArr.splice(1, 0, condition);
                lastIndex += 1;
                blockArr.splice(lastIndex, 1);
                result = blockArr.join(' ');
            } else if (option == 'while') {
                blockArr.splice(lastIndex, 1);
                result = blockArr.join(' ');
            } else {
                result = syntax;
            }
        } else {
            result = syntax;
        }

        return result;
    };

    tu.isJudgementBlock = function (blockType) {
        if (blockType == 'is_clicked' || blockType == 'is_press_some_key' || blockType == 'reach_something' || blockType == 'boolean_basic_operator' || blockType == 'boolean_and' || blockType == 'boolean_or' || blockType == 'boolean_not') {
            return true;
        }

        return false;
    };

    tu.isCalculationBlock = function (blockType) {
        if (blockType == 'calc_basic' || blockType == 'calc_rand' || blockType == 'coordinate_mouse' || blockType == 'coordinate_object' || blockType == 'get_sound_volume' || blockType == 'quotient_and_mod' || blockType == 'calc_operation' || blockType == 'get_project_timer_value' || blockType == 'get_date' || blockType == 'distance_something' || blockType == 'get_sound_duration' || blockType == 'length_of_string' || blockType == 'combine_something' || blockType == 'char_at' || blockType == 'substring' || blockType == 'index_of_string' || blockType == 'replace_string' || blockType == 'change_string_case') {
            return true;
        }

        return false;
    };

    tu.isVariableDeclarationBlock = function (blockType) {
        if (blockType == 'set_variable') return true;

        return false;
    };

    tu.isHWParamBlock = function (blockType) {
        if (blockType == 'hamster_hand_found' || blockType == 'hamster_value' || blockType == 'arduino_get_port_number' || blockType == 'arduino_get_number_sensor_value' || blockType == 'arduino_get_digital_value' || blockType == 'arduino_convert_scale' || blockType == 'arduino_ext_get_analog_value' || blockType == 'arduino_ext_get_analog_value_map' || blockType == 'arduino_ext_get_ultrasonic_value' || blockType == 'arduino_ext_get_digital' || blockType == 'arduino_ext_tone_list' || blockType == 'arduino_ext_octave_list') {
            return true;
        }

        return false;
    };

    tu.isMaterialBlock = function (blockType) {
        if (blockType == 'get_canvas_input_value' || blockType == 'get_variable' || blockType == 'value_of_index_from_list' || blockType == 'length_of_list' || blockType == 'is_included_in_list') {
            return true;
        }

        return false;
    };

    tu.jsAdjustSyntax = function (block, syntax) {
        var result = '';
        if (block.data.type == 'ai_boolean_distance') {
            var tokens = syntax.split(' ');
            var firstParam = tokens[0].split('_');
            var value = firstParam[1];
            firstParam[1] = firstParam[1].substring(1, firstParam[1].length - 1);
            firstParam[1] = firstParam[1].toLowerCase();
            firstParam = firstParam.join('_');
            var secondParam = tokens[1];
            secondParam = this.bTojBinaryOperatorConvertor(secondParam);
            var thirdParam = tokens[2];

            result = firstParam + ' ' + secondParam + ' ' + thirdParam;
        } else if (block.data.type == 'ai_boolean_object') {
            var tokens = syntax.split(' ');
            var firstParam = tokens[0].split('_');
            var value = firstParam[1];
            firstParam[1] = firstParam[1].substring(1, firstParam[1].length - 1);
            firstParam[1] = firstParam[1].toLowerCase();
            firstParam = firstParam.join('_');
            var secondParam = tokens[1];
            var thirdParam = tokens[2];

            result = firstParam + ' ' + secondParam + ' ' + thirdParam;
        } else if (block.data.type == 'ai_distance_value') {
            var tokens = syntax.split(' ');
            var firstParam = tokens[0].split('_');
            var value = firstParam[1];
            firstParam[1] = firstParam[1].substring(1, firstParam[1].length - 1);
            firstParam[1] = firstParam[1].toLowerCase();
            firstParam = firstParam.join('_');

            result = firstParam;
        } else {
            result = syntax;
        }

        return result;
    };

    tu.bTojBinaryOperatorConvertor = function (operator) {
        var result;
        switch (operator) {
            case "'BIGGER'":
                result = '>';
                break;
            case "'BIGGER_EQUAL'":
                result = '>=';
                break;
            case "'EQUAL'":
                result = '==';
                break;
            case "'SMALLER'":
                result = '<';
                break;
            case "'SMALLER_EQUAL'":
                result = '<=';
                break;
        }

        return result;
    };

    tu.jTobBinaryOperatorConvertor = function (operator) {
        var result;
        switch (operator) {
            case '>':
                result = 'BIGGER';
                break;
            case '>=':
                result = 'BIGGER_EQUAL';
                break;
            case '==':
                result = 'EQUAL';
                break;
            case '<':
                result = 'SMALLER';
                break;
            case '<=':
                result = 'SMALLER_EQUAL';
                break;
        }

        return result;
    };

    tu.radarVariableConvertor = function (variable) {
        var items = variable.split('_');
        var result = items[1].toUpperCase();

        return result;
    };

    tu.tTobDropdownValueConvertor = function (value) {
        var result;
        if (value == 'stone') {
            result = 'OBSTACLE';
        } else if (value == 'wall') {
            result = value.toUpperCase();
        } else if (value == 'item') {
            result = value.toUpperCase();
        } else {
            result = value;
        }

        return result;
    };

    tu.canConvertTextModeForOverlayMode = function (convertingMode) {
        var message;
        var oldMode = Entry.getMainWS().oldMode;

        if (oldMode == Entry.Workspace.MODE_OVERLAYBOARD && convertingMode == Entry.Workspace.MODE_VIMBOARD) {
            message = Lang.TextCoding[Entry.TextCodingError.ALERT_FUNCTION_EDITOR];
            return message;
        }

        return message;
    };

    tu.isNamesIncludeSpace = function () {
        var vc = Entry.variableContainer;
        if (!vc) return;

        //inspect variables
        var targets = vc.variables_ || [];
        for (var i = 0; i < targets.length; i++) {
            if (test(targets[i].name_)) {
                return Lang.TextCoding[Entry.TextCodingError.ALERT_VARIABLE_EMPTY_TEXT];
            }
        }

        //inspect lists
        targets = vc.lists_ || [];
        for (i = 0; i < targets.length; i++) {
            if (test(targets[i].name_)) return Lang.TextCoding[Entry.TextCodingError.ALERT_LIST_EMPTY_TEXT];
        }

        //this doesn't need for now
        //inspect messages
        /*targets = vc.messages_ || [];
        for (i=0; i<targets.length; i++) {
            if (test(targets[i].name_))
                return "메시지 이름이 공백 포함";
        }*/

        //inspect functions

        var ERROR_LANG = Lang.TextCoding;
        var ERROR = Entry.TextCodingError;
        var DISORDER = ERROR_LANG[ERROR.ALERT_FUNCTION_NAME_DISORDER];
        var FIELD_MULTI = ERROR_LANG[ERROR.ALERT_FUNCTION_NAME_FIELD_MULTI];
        var EMPTY_TEXT = ERROR_LANG[ERROR.ALERT_FUNCTION_NAME_EMPTY_TEXT];

        targets = vc.functions_ || {};

        for (i in targets) {
            var paramBlock = targets[i].content.getEventMap('funcDef')[0];
            paramBlock = paramBlock && paramBlock.params[0];

            if (!paramBlock) continue;

            if (paramBlock.type !== 'function_field_label') return DISORDER;

            var params = paramBlock.params;

            if (!params[1]) {
                if (test(params[0])) return EMPTY_TEXT;
            } else if (this.hasFunctionFieldLabel(params[1])) {
                return FIELD_MULTI;
            }
        }

        return false;

        function test(name) {
            return (/ /.test(name)
            );
        }
    };

    tu.isNameIncludeSpace = function (name, type) {
        if (!/ /.test(name)) return false;

        if (type == 'variable') {
            return Lang.TextCoding[Entry.TextCodingError.ALERT_VARIABLE_EMPTY_TEXT_ADD_CHANGE];
        } else if (type == 'list') {
            return Lang.TextCoding[Entry.TextCodingError.ALERT_LIST_EMPTY_TEXT_ADD_CHANGE];
        } else if (type == 'function') {
            return Lang.TextCoding[Entry.TextCodingError.ALERT_FUNCTION_NAME_EMPTY_TEXT_ADD_CHANGE];
        }

        return false;
    };

    tu.isNameIncludeNotValidChar = function () {
        var vc = Entry.variableContainer;
        if (!vc) return;
        //inspect variables
        var targets = vc.variables_ || [];
        for (var i = 0; i < targets.length; i++) {
            if (this.checkName(targets[i].name_, 'v')) {
                return this.checkName(targets[i].name_, 'v');
            }
        }

        //inspect lists
        targets = vc.lists_ || [];
        for (i = 0; i < targets.length; i++) {
            if (this.checkName(targets[i].name_, 'l')) {
                return this.checkName(targets[i].name_, 'l');
            }
        }
    };

    tu.hasFunctionFieldLabel = function (fBlock) {
        if (!fBlock || !fBlock.data) return;
        if (fBlock.data.type == 'function_field_label') return true;

        var params = fBlock.data.params;
        if (params[0]) {
            var type = params[0].data.type;
            if (type == 'function_field_label') return true;
            if (params[0].data.params) if (this.hasFunctionFieldLabel(params[0])) return true;
        }

        if (params[1]) {
            var type = params[1].data.type;
            if (type == 'function_field_label') return true;
            if (params[1].data.params) if (this.hasFunctionFieldLabel(params[1])) return true;
        }

        return false;
    };

    /*tu.addFuncParam = function(param) {
        this._funcParams.push(param);
    };
     tu.clearFuncParam = function() {
        this._funcParams = [];
    };
     tu.isFuncParam = function(paramName) {
        var result = false;
         var funcParams = this._funcParams;
         if(funcParams.length == 0)
            return false;
         for(var p in funcParams) {
            var funcParam = funcParams[p];
            if(funcParam == paramName) {
                result = true;
                break;
            }
        }
         return result;
    };*/

    tu.makeExpressionStatementForEntryEvent = function (calleName, arg) {
        var expressionStatement = {};

        var type = 'ExpressionStatement';
        var expression = {};

        expression.type = 'CallExpression';

        var callee = {};
        callee.name = calleName;
        callee.type = 'Identifier';
        expression.callee = callee;

        var args = [];
        var argument = {};
        argument.type = 'Literal';
        argument.value = arg;
        args.push(argument);
        expression.arguments = args;

        expressionStatement.expression = expression;
        expressionStatement.type = type;

        return expressionStatement;
    };

    tu.setMathParams = function (propertyName, params) {
        var optionParam;

        if (propertyName == 'pow') {
            optionParam = 'square';
            params[3] = optionParam;
        } else if (propertyName == 'sqrt') {
            optionParam = 'root';
            params[3] = optionParam;
        } else if (propertyName == 'sin') {
            optionParam = 'sin';
            params[3] = optionParam;
        } else if (propertyName == 'cos') {
            optionParam = 'cos';
            params[3] = optionParam;
        } else if (propertyName == 'tan') {
            optionParam = 'tan';
            params[3] = optionParam;
        } else if (propertyName == 'asin') {
            optionParam = 'asin_radian';
            params[3] = optionParam;
        } else if (propertyName == 'acos') {
            optionParam = 'acos_radian';
            params[3] = optionParam;
        } else if (propertyName == 'atan') {
            optionParam = 'atan_radian';
            params[3] = optionParam;
        } else if (propertyName == 'log') {
            optionParam = 'ln';
            params[3] = optionParam;
        } else if (propertyName == 'log10') {
            optionParam = 'log';
            params[3] = optionParam;
        } else if (propertyName == 'floor') {
            optionParam = 'floor';
            params[3] = optionParam;
        } else if (propertyName == 'ceil') {
            optionParam = 'ceil';
            params[3] = optionParam;
        } else if (propertyName == 'round') {
            optionParam = 'round';
            params[3] = optionParam;
        } else if (propertyName == 'factorial') {
            optionParam = 'factorial';
            params[3] = optionParam;
        } else if (propertyName == 'fabs') {
            optionParam = 'abs';
            params[3] = optionParam;
        }

        return optionParam;
    };

    tu.isMathExpression = function (text) {
        var textTokens = text.split('(');
        var textName = textTokens[0];

        if (textName == 'Entry.math_operation') return true;

        return false;
    };

    tu.makeMathExpression = function (text) {
        var result = text;
        var textTokens = text.split('(');
        var paramsParts = textTokens[1];
        var paramsTokens = paramsParts.split(',');
        var mathValue = paramsTokens[0];
        var mathOption = paramsTokens[1];
        var mathProperty;

        mathOption = mathOption.substring(2, mathOption.length - 2).trim();

        if (mathOption == 'square') {
            mathProperty = 'pow';
            var mathText = 'math' + '.' + mathProperty;
            result = mathText + '(' + mathValue + ')';
        } else if (mathOption == 'root') {
            mathProperty = 'sqrt';
            var mathText = 'math' + '.' + mathProperty;
            result = mathText + '(' + mathValue + ')';
        } else if (mathOption == 'sin') {
            mathProperty = 'sin';
            var mathText = 'math' + '.' + mathProperty;
            result = mathText + '(' + mathValue + ')';
        } else if (mathOption == 'cos') {
            mathProperty = 'cos';
            var mathText = 'math' + '.' + mathProperty;
            result = mathText + '(' + mathValue + ')';
        } else if (mathOption == 'tan') {
            mathProperty = 'tan';
            var mathText = 'math' + '.' + mathProperty;
            result = mathText + '(' + mathValue + ')';
        } else if (mathOption == 'asin_radian') {
            mathProperty = 'asin';
            var mathText = 'math' + '.' + mathProperty;
            result = mathText + '(' + mathValue + ')';
        } else if (mathOption == 'acos_radian') {
            mathProperty = 'acos';
            var mathText = 'math' + '.' + mathProperty;
            result = mathText + '(' + mathValue + ')';
        } else if (mathOption == 'atan_radian') {
            mathProperty = 'atan';
            var mathText = 'math' + '.' + mathProperty;
            result = mathText + '(' + mathValue + ')';
        } else if (mathOption == 'ln') {
            mathProperty = 'log';
            var mathText = 'math' + '.' + mathProperty;
            result = mathText + '(' + mathValue + ')';
        } else if (mathOption == 'log') {
            mathProperty = 'log10';
            var mathText = 'math' + '.' + mathProperty;
            result = mathText + '(' + mathValue + ')';
        } else if (mathOption == 'floor') {
            mathProperty = 'floor';
            var mathText = 'math' + '.' + mathProperty;
            result = mathText + '(' + mathValue + ')';
        } else if (mathOption == 'ceil') {
            mathProperty = 'ceil';
            var mathText = 'math' + '.' + mathProperty;
            result = mathText + '(' + mathValue + ')';
        } else if (mathOption == 'round') {
            mathProperty = 'round';
            var mathText = 'math' + '.' + mathProperty;
            result = mathText + '(' + mathValue + ')';
        } else if (mathOption == 'factorial') {
            mathProperty = 'factorial';
            var mathText = 'math' + '.' + mathProperty;
            result = mathText + '(' + mathValue + ')';
        } else if (mathOption == 'abs') {
            mathProperty = 'fabs';
            var mathText = 'math' + '.' + mathProperty;
            result = mathText + '(' + mathValue + ')';
        }

        return result;
    };

    tu.checkName = function (name, target) {
        var keywords = ['and', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise', 'return', 'try', 'while', 'with', 'yield'];
        //숫자 검사
        var regExp = /^[0-9]$/g;

        if (regExp.test(name[0])) {
            return Lang.Menus['textcoding_numberError_' + target];
        }

        //특수문자 검사
        var regExp = /[\{\}\[\]\/?.,;:|\)*~`!^\-+<>@\#$%&\\\=\(\'\"]/gi;
        if (regExp.test(name)) {
            return Lang.Menus['textcoding_specialCharError_' + target];
        }

        //예약어 검사
        if (keywords.includes(name)) {
            return Lang.Menus['textcoding_bookedError_1' + target] + name + Lang.Menus['textcoding_bookedError_2' + target];
        }

        return false;
    };

    tu.generateVariablesDeclaration = function () {
        var result = '';
        var currentObject = Entry.playground.object;
        var vc = Entry.variableContainer;
        if (!vc) return;
        //inspect variables
        var targets = vc.variables_ || [];

        for (var i = targets.length - 1; i >= 0; i--) {
            var v = targets[i];
            var name = v.name_;
            var value = v.value_;

            if (v.object_) {
                if (v.object_ == currentObject.id) {
                    name = 'self.' + name;
                } else continue;
            }

            if (typeof value === 'string') value = '"()"'.replace('()', value);

            result += name + ' = ' + value + '\n';
        }

        return result;
    };

    tu.generateListsDeclaration = function () {
        var result = '';
        var currentObject = Entry.playground.object;
        var vc = Entry.variableContainer;
        if (!vc) return;

        //inspect lists
        var targets = vc.lists_ || [];

        for (var i = targets.length - 1; i >= 0; i--) {
            var l = targets[i];
            var name = l.name_;
            var value = '';
            var lArray = l.array_;
            if (l.object_) {
                if (l.object_ == currentObject.id) {
                    name = 'self.' + name;
                } else continue;
            }

            for (var va in lArray) {
                var vItem = lArray[va];
                var data = vItem.data;

                /*if(Entry.Utils.isNumber(pData)) {
                    data = pData;
                    data = parseFloat(data);
                 }*/

                if (isNaN(data) || data.length > 1 && String(data)[0] === '0') {
                    data = '"' + data.replace(/"/gi, '\\"') + '"';
                }

                if (typeof data === 'number' || data.trim().length > 0) value += data;

                if (va != lArray.length - 1) value += ', ';
            }

            result += name + ' = [' + value + ']' + '\n';
        }

        return result;
    };

    tu.isVariableNumber = function (id, type) {
        var currentObject = Entry.playground.object;
        var entryVariables = Entry.variableContainer.variables_;
        for (var i in entryVariables) {
            var entryVariable = entryVariables[i];
            if (type == 'global') {
                if (entryVariable.object_ === null && entryVariable.id_ == id) {
                    if (Entry.Utils.isNumber(entryVariable.value_)) return true;
                }
            } else if (type == 'local') {
                if (entryVariable.object_ === currentObject.id && entryVariable.id_ == id) {
                    if (Entry.Utils.isNumber(entryVariable.value_)) return true;
                }
            }
        }

        return false;
    };

    tu.generateForStmtIndex = function (index, str) {
        str = str || '';
        var ref = ['i', 'j', 'k'];
        var quotient = Math.floor(index / 3);
        var remainder = index % 3;

        str = ref[remainder] + str;

        if (quotient) return this.generateForStmtIndex(quotient - 1, str);else return str;
    };

    tu.isExpressionLiteral = function (component, syntax) {
        switch (component.type) {
            case 'CallExpression':
                if (component.callee.type === 'MemberExpression') {
                    var calleeName = component.callee.property.name;
                    calleeName = syntax['%2'][calleeName];
                    if (calleeName) {
                        var key = calleeName.key;
                        return Entry.block[key].skeleton === 'basic_string_field';
                    }
                }
                break;
            case 'Literal':
                return true;
        }
        return false;
    };

    tu.isNameInEntryData = function (name, object) {
        return this.isGlobalVariableExisted(name) || this.isLocalVariableExisted(name, object) || this.isGlobalListExisted(name) || this.isLocalListExisted(name);
    };
})(Entry.TextCodingUtil);

/***/ }),

/***/ "./src/util/block_driver.js":
/*!**********************************!*\
  !*** ./src/util/block_driver.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.BlockDriver = function () {};

(function (p) {
    p.convert = function () {
        var time = new Date();
        for (var blockType in Entry.block) {
            if (typeof Entry.block[blockType] === 'function') {
                this._convertBlock(blockType);
            }
        }
        console.log(new Date().getTime() - time.getTime());
    };

    p._convertBlock = function (blockType) {
        var blocklyInfo = Blockly.Blocks[blockType];
        var blockInfo = EntryStatic.blockInfo[blockType];
        var className, isNotFor;
        if (blockInfo) {
            className = blockInfo.class;
            isNotFor = blockInfo.isNotFor;

            //add block definition by xml to json
            var xml = blockInfo.xml;
            if (xml) {
                xml = $.parseXML(xml);
                var child = xml.childNodes[0];
                var def = generateBlockDef(child);
            }
        }
        var mockup = new Entry.BlockMockup(blocklyInfo, def, blockType);

        var blockObject = mockup.toJSON();
        blockObject.class = className;
        blockObject.isNotFor = isNotFor;

        if (_.isEmpty(blockObject.paramsKeyMap)) delete blockObject.paramsKeyMap;
        if (_.isEmpty(blockObject.statementsKeyMap)) delete blockObject.statementsKeyMap;

        blockObject.func = Entry.block[blockType];

        var PRIMITIVES = ['NUMBER', 'TRUE', 'FALSE', 'TEXT', 'FUNCTION_PARAM_BOOLEAN', 'FUNCTION_PARAM_STRING', 'TRUE_UN'];

        if (PRIMITIVES.indexOf(blockType.toUpperCase()) > -1) blockObject.isPrimitive = true;
        Entry.block[blockType] = blockObject;

        function generateBlockDef(block) {
            var def = {
                type: block.getAttribute('type'),
                index: {}
            };

            var children = $(block).children();
            if (!children) return def;
            for (var i = 0; i < children.length; i++) {
                var child = children[i];
                var tagName = child.tagName;
                var subChild = $(child).children()[0];
                var key = child.getAttribute('name');
                if (tagName === 'value') {
                    if (subChild.nodeName == 'block') {
                        if (!def.params) def.params = [];
                        def.params.push(generateBlockDef(subChild));
                        def.index[key] = def.params.length - 1;
                    }
                } else if (tagName === 'field') {
                    if (!def.params) def.params = [];
                    def.params.push(child.textContent);
                    def.index[key] = def.params.length - 1;
                }
            }
            return def;
        }
    };
})(Entry.BlockDriver.prototype);

Entry.BlockMockup = function (blocklyInfo, def, blockType) {
    this.templates = [];
    this.params = [];
    this.statements = [];
    this.color = '';
    this.isPrev = false;
    this.isNext = false;
    this.output = false;
    this.fieldCount = 0;
    this.events = {};
    this.def = def || {};
    this.paramsKeyMap = {};
    this.statementsKeyMap = {};
    this.definition = {
        params: [],
        type: this.def.type
    };

    this.simulate(blocklyInfo);
    this.def = this.definition;
};

(function (p) {
    p.simulate = function (blocklyInfo) {
        if (blocklyInfo.sensorList) this.sensorList = blocklyInfo.sensorList;
        if (blocklyInfo.portList) this.portList = blocklyInfo.portList;
        blocklyInfo.init.call(this);
        if (blocklyInfo.whenAdd) {
            if (!this.events.blockViewAdd) this.events.blockViewAdd = [];
            this.events.blockViewAdd.push(blocklyInfo.whenAdd);
        }

        if (blocklyInfo.whenRemove) {
            if (!this.events.blockViewDestroy) this.events.blockViewDestroy = [];
            this.events.blockViewDestroy.push(blocklyInfo.whenRemove);
        }
    };

    p.toJSON = function () {
        var skeleton = '';
        if (this.output) {
            if (this.output === 'Boolean') skeleton = 'basic_boolean_field';else skeleton = 'basic_string_field';
        } else if (!this.isPrev && this.isNext) skeleton = 'basic_event';else if (this.statements.length == 1) skeleton = 'basic_loop';else if (this.statements.length == 2) skeleton = 'basic_double_loop';else if (this.isPrev && this.isNext) skeleton = 'basic';else if (this.isPrev && !this.isNext) skeleton = 'basic_without_next';

        var def = this.def;
        removeIndex(def);

        function removeIndex(def) {
            if (!def) return;
            var params = def.params;
            if (!params) return;
            for (var i = 0; i < params.length; i++) {
                var param = params[i];
                if (!param) continue;
                delete param.index;
                removeIndex(param);
            }
        }

        var reg = /dummy_/im;
        for (var key in this.paramsKeyMap) {
            if (reg.test(key)) delete this.paramsKeyMap[key];
        }for (key in this.statementsKeyMap) {
            if (reg.test(key)) delete this.statementsKeyMap[key];
        }return {
            color: this.color,
            skeleton: skeleton,
            statements: this.statements,
            template: this.templates.filter(function (p) {
                return typeof p === 'string';
            }).join(' '),
            params: this.params,
            events: this.events,
            def: this.def,
            paramsKeyMap: this.paramsKeyMap,
            statementsKeyMap: this.statementsKeyMap
        };
    };

    p.appendDummyInput = function () {
        return this;
    };

    p.appendValueInput = function (key) {
        // field block
        if (this.def && this.def.index) {
            if (this.def.index[key] !== undefined) {
                this.definition.params.push(this.def.params[this.def.index[key]]);
            } else this.definition.params.push(null);
        }
        this.params.push({
            type: 'Block',
            accept: 'string'
        });

        this._addToParamsKeyMap(key);
        this.templates.push(this.getFieldCount());
        return this;
    };

    p.appendStatementInput = function (key) {
        var statement = {
            accept: 'basic'
        };
        this._addToStatementsKeyMap(key);
        this.statements.push(statement);
    };

    p.setCheck = function (accept) {
        //add value
        var params = this.params;
        if (accept === 'Boolean') params[params.length - 1].accept = 'boolean';
    };

    p.appendField = function (field, opt) {
        if (!field) return this;
        if (typeof field === 'string' && field.length > 0) {
            if (opt) {
                field = {
                    type: 'Text',
                    text: field,
                    color: opt
                };
                this.params.push(field);
                this._addToParamsKeyMap();
                this.templates.push(this.getFieldCount());
                if (this.def && this.def.index && this.def.index[opt] !== undefined) {
                    this.definition.params.push(this.def.params[this.def.index[opt]]);
                } else this.definition.params.push(undefined);
            } else {
                this.templates.push(field);
            }
        } else {
            if (field.constructor == Blockly.FieldIcon) {
                if (field.type === 'start') this.params.push({
                    type: 'Indicator',
                    img: field.src_,
                    size: 17,
                    position: {
                        x: 0,
                        y: -2
                    }
                });else this.params.push({
                    type: 'Indicator',
                    img: field.src_,
                    size: 12
                });
                this._addToParamsKeyMap();
                this.templates.push(this.getFieldCount());
                if (this.definition) this.definition.params.push(null);
            } else if (field.constructor == Blockly.FieldDropdown) {
                this.params.push({
                    type: 'Dropdown',
                    options: field.menuGenerator_,
                    value: field.menuGenerator_[0][1],
                    fontSize: 11
                });
                this._addToParamsKeyMap(opt);

                this.templates.push(this.getFieldCount());
                if (this.def && this.def.index && this.def.index[opt] !== undefined) {
                    this.definition.params.push(this.def.params[this.def.index[opt]]);
                } else this.definition.params.push(undefined);
            } else if (field.constructor == Blockly.FieldDropdownDynamic) {
                this.params.push({
                    type: 'DropdownDynamic',
                    value: null,
                    menuName: field.menuName_,
                    fontSize: 11
                });
                this.templates.push(this.getFieldCount());
                if (this.def && this.def.index && this.def.index[opt] !== undefined) {
                    this.definition.params.push(this.def.params[this.def.index[opt]]);
                } else this.definition.params.push(undefined);
                this._addToParamsKeyMap(opt);
            } else if (field.constructor == Blockly.FieldTextInput) {
                this.params.push({
                    type: 'TextInput',
                    value: 10
                });
                this.templates.push(this.getFieldCount());
                this._addToParamsKeyMap(opt);
            } else if (field.constructor == Blockly.FieldAngle) {
                this.params.push({
                    type: 'Angle'
                });
                this.templates.push(this.getFieldCount());
                if (this.def && this.def.index && this.def.index[opt] !== undefined) {
                    this.definition.params.push(this.def.params[this.def.index[opt]]);
                } else this.definition.params.push(null);
                this._addToParamsKeyMap(opt);
            } else if (field.constructor == Blockly.FieldKeydownInput) {
                this.params.push({
                    type: 'Keyboard',
                    value: 81
                });
                this.templates.push(this.getFieldCount());
                if (this.def.index[opt] !== undefined) {
                    this.definition.params.push(this.def.params[this.def.index[opt]]);
                } else this.definition.params.push(undefined);
                this._addToParamsKeyMap(opt);
            } else if (field.constructor == Blockly.FieldColour) {
                this.params.push({
                    type: 'Color'
                });
                this.templates.push(this.getFieldCount());
                this._addToParamsKeyMap(opt);
            } else {
                console.log('else', field);
                //console.log('else', field);
            }
        }
        return this;
    };

    p.setColour = function (color) {
        this.color = color;
    };

    p.setInputsInline = function () {};

    p.setOutput = function (bool, type) {
        if (!bool) return;
        this.output = type;
    };

    p.setPreviousStatement = function (bool) {
        this.isPrev = bool;
    };

    p.setNextStatement = function (bool) {
        this.isNext = bool;
    };

    p.setEditable = function (bool) {
        // Not implemented
    };

    p.getFieldCount = function () {
        this.fieldCount++;
        return '%' + this.fieldCount;
    };

    p._addToParamsKeyMap = function (key) {
        key = key ? key : 'dummy_' + Entry.Utils.generateId();
        var map = this.paramsKeyMap;
        map[key] = Object.keys(map).length;
    };

    p._addToStatementsKeyMap = function (key) {
        key = key ? key : 'dummy_' + Entry.Utils.generateId();
        var map = this.statementsKeyMap;
        map[key] = Object.keys(map).length;
    };
})(Entry.BlockMockup.prototype);

/***/ }),

/***/ "./src/util/contextmenu.js":
/*!*********************************!*\
  !*** ./src/util/contextmenu.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.ContextMenu = {};

(function (ctx) {
    var ATTR_KEY = 'data-option-index';

    ctx.visible = false;
    ctx._hideEvent = null;

    ctx.createDom = function () {
        this.dom = Entry.Dom('ul', {
            id: 'entry-contextmenu',
            parent: $('body')
        });

        _bindEvent.call(this);
    };

    ctx.show = function (options, className, coordinate) {
        this._options = options;

        if (!this.dom) this.createDom();
        if (!options.length) return;

        if (this._hideEvent) {
            this._hideEvent.destroy();
        }

        this._hideEvent = Entry.documentMousedown.attach(this, this.hide);
        if (className !== undefined) {
            this._className = className;
            this.dom.addClass(className);
        }

        var parent = this.dom;

        parent.empty();

        var fragment = document.createDocumentFragment();

        options.forEach(function (option, idx) {
            var text = option.text,
                enable = option.enable,
                divider = option.divider;

            enable = option.enable !== false;
            //set value for later use
            option.enable = enable;

            var elem = Entry.Dom('li').attr(ATTR_KEY, idx);
            fragment.appendChild(elem.get(0));

            if (divider) {
                className = 'divider';
            } else {
                className = enable ? 'menuAble' : 'menuDisable';
                Entry.Dom('span', { parent: elem }).text(text);
            }

            elem.addClass(className);
        });

        parent.get(0).appendChild(fragment);
        parent.removeClass('entryRemove');
        this.visible = true;
        this.position(coordinate || Entry.mouseCoordinate);
    };

    ctx.position = function (pos) {
        var dom = this.dom;
        dom.css({
            left: 0,
            top: 0
        });
        var width = dom.width();
        var height = dom.height();

        var win = $(window);
        var winWidth = win.width();
        var winHeight = win.height();

        if (pos.x + width > winWidth) pos.x -= width + 3;
        if (pos.y + height > winHeight) pos.y -= height;

        dom.css({
            left: pos.x,
            top: pos.y
        });
    };

    ctx.hide = function () {
        this.visible = false;
        var dom = this.dom;

        dom.empty().addClass('entryRemove');

        if (this._className) {
            dom.removeClass(this._className);
            delete this._className;
        }
        if (this._hideEvent) {
            this._hideEvent.destroy();
            this._hideEvent = null;
        }
    };

    ctx.onContextmenu = function (target, callback) {
        target.on('touchstart mousemove mouseup contextmenu', function (e) {
            switch (e.type) {
                case 'touchstart':
                    var startEvent = Entry.Utils.convertMouseEvent(e);
                    this.coordi = {
                        x: startEvent.clientX,
                        y: startEvent.clientY
                    };

                    this.longTouchEvent = setTimeout(function () {
                        callback(this.coordi);
                        this.longTouchEvent = undefined;
                    }.bind(this), 900);
                    break;
                case 'mousemove':
                    if (!this.coordi) return;
                    var diff = Math.sqrt(Math.pow(e.pageX - this.coordi.x, 2) + Math.pow(e.pageY - this.coordi.y, 2));
                    if (diff > 5 && this.longTouchEvent) {
                        clearTimeout(this.longTouchEvent);
                        this.longTouchEvent = undefined;
                    }
                    break;
                case 'mouseup':
                    // e.stopPropagation();
                    if (this.longTouchEvent) {
                        clearTimeout(this.longTouchEvent);
                        this.longTouchEvent = null;
                    }
                    break;
                case 'contextmenu':
                    clearTimeout(this.longTouchEvent);
                    this.longTouchEvent = undefined;
                    if (e.type === 'contextmenu') {
                        // e.stopPropagation();
                        // e.preventDefault();
                        callback(this.coordi);
                    }
                    break;
            }
        });
    };

    function _bindEvent() {
        var that = this;
        this.dom.on('mousedown touchstart', function (e) {
            e.stopPropagation();
        });

        //event delegation
        this.dom.on('mousedown touchstart', 'li', function (e) {
            e.stopPropagation();
            var options = that._options;

            if (_.isEmpty(options)) {
                return that.hide();
            }

            var _options$getAttribute = options[this.getAttribute(ATTR_KEY)],
                enable = _options$getAttribute.enable,
                callback = _options$getAttribute.callback;


            if (enable && callback) {
                e.preventDefault();
                that.hide();
                callback(e);
            }
        });

        Entry.Utils.disableContextmenu(this.dom);
    }
})(Entry.ContextMenu);

/***/ }),

/***/ "./src/util/curtain.js":
/*!*****************************!*\
  !*** ./src/util/curtain.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Curtain = {};

(function () {
    this._visible = false;
    this._doms = null;
    this._targetDom = null;

    this.init = function (isCloseable) {
        this._createDom(isCloseable);
    };

    this._createDom = function (isCloseable) {
        var $body = $('body');
        var option = {
            parent: $body,
            class: 'entryCurtainElem entryRemove'
        };

        this._doms = {
            top: Entry.Dom('div', option),
            right: Entry.Dom('div', option),
            bottom: Entry.Dom('div', option),
            left: Entry.Dom('div', option)
        };

        if (isCloseable) {
            this._closeBtn = Entry.Dom('button', {
                parent: $body,
                class: 'entryCurtainCloseBtn entryRemove'
            });

            this._closeBtn.on('click', function () {
                this._closeBtn.off('click');
                entrylms.emit('ExitStudy');
            }.bind(this));
        }

        for (var key in this._doms) {
            var dom = this._doms[key];
            dom.addClass(key);
            dom.bind('mousedown', function (e) {
                e.stopPropagation();
            });
        }
    };

    this.show = function (datum) {
        !this._doms && this._createDom();

        if (datum instanceof Array) datum = Entry.getDom(datum);

        datum = $(datum);
        this._targetDom = datum;

        this.align();

        for (var key in this._doms) {
            this._doms[key].removeClass('entryRemove');
        }this._closeBtn && this._closeBtn.removeClass('entryRemove');
        this._visible = true;
    };

    this.align = function () {
        var dom = this._targetDom;
        if (!dom) return;
        var $win = $(window);
        var bodyRect = $('body')[0].getBoundingClientRect();
        var bodyWidth = bodyRect.width;
        var bodyHeight = bodyRect.height;

        var winWidth = $win.width();
        var winHeight = $win.height();

        if (winWidth < Math.round(bodyWidth)) bodyWidth = winWidth;

        if (winHeight < Math.round(bodyHeight)) bodyHeight = winHeight;

        var doms = this._doms;

        if (!dom.get(0)) return;

        var rect = dom.get(0).getBoundingClientRect();

        var topPos = Math.round(rect.top);
        var rightPos = Math.round(rect.right);
        var bottom = Math.round(rect.bottom);

        doms.top.css({
            height: topPos
        });
        doms.left.css({
            top: topPos,
            right: bodyWidth - rightPos + rect.width,
            bottom: Math.round(bodyHeight - bottom)
        });
        var leftLect = doms.left[0].getBoundingClientRect();
        var bottomTop = doms.top[0].getBoundingClientRect().height + leftLect.height;
        doms.bottom.css({
            top: bottomTop || bottom,
            right: bodyWidth - rightPos
        });
        doms.right.css({
            top: topPos,
            left: doms.bottom[0].getBoundingClientRect().width || rightPos
        });
    };

    this.hide = function () {
        if (!this._doms) return;

        for (var key in this._doms) {
            this._doms[key].addClass('entryRemove');
        }this._closeBtn && this._closeBtn.addClass('entryRemove');
        this._visible = false;
        this._targetDom = null;
    };

    this.isVisible = function () {
        return this._visible;
    };

    this.setVisible = function (value) {
        this._visible = value;
    };
}).bind(Entry.Curtain)();

/***/ }),

/***/ "./src/util/fuzzy.js":
/*!***************************!*\
  !*** ./src/util/fuzzy.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * Fuzzy
 * https://github.com/myork/fuzzy
 *
 * Copyright (c) 2012 Matt York
 * Licensed under the MIT license.
 */

(function (u) {
    var fuzzy = {};

    u.fuzzy = fuzzy;

    // Return all elements of `array` that have a fuzzy
    // match against `pattern`.
    fuzzy.simpleFilter = function (pattern, array) {
        return array.filter(function (string) {
            return fuzzy.test(pattern, string);
        });
    };

    // Does `pattern` fuzzy match `string`?
    fuzzy.test = function (pattern, string) {
        return fuzzy.match(pattern, string) !== null;
    };

    // If `pattern` matches `string`, wrap each matching character
    // in `opts.pre` and `opts.post`. If no match, return null
    fuzzy.match = function (pattern, string, opts) {
        opts = opts || {};
        var patternIdx = 0,
            result = [],
            len = string.length,
            totalScore = 0,
            currScore = 0,

        // prefix
        pre = opts.pre || '',

        // suffix
        post = opts.post || '',

        // String to compare against. This might be a lowercase version of the
        // raw string
        compareString = opts.caseSensitive && string || string.toLowerCase(),
            ch,
            compareChar;

        pattern = opts.caseSensitive && pattern || pattern.toLowerCase();

        // For each character in the string, either add it to the result
        // or wrap in template if it's the next string in the pattern
        for (var idx = 0; idx < len; idx++) {
            ch = string[idx];
            if (compareString[idx] === opts.escapeLetter) {
                break;
            }
            if (compareString[idx] === pattern[patternIdx]) {
                ch = pre + ch + post;
                patternIdx += 1;

                // consecutive characters should increase the score more than linearly
                currScore += 1 + currScore;
            } else {
                currScore = 0;
            }
            totalScore += currScore;
            result[result.length] = ch;
        }

        // return rendered string if we have a match for every char
        if (patternIdx === pattern.length) {
            return { rendered: result.join(''), score: totalScore };
        }

        return null;
    };

    // The normal entry point. Filters `arr` for matches against `pattern`.
    // It returns an array with matching values of the type:
    //
    //     [{
    //         string:   '<b>lah' // The rendered string
    //       , index:    2        // The index of the element in `arr`
    //       , original: 'blah'   // The original element in `arr`
    //     }]
    //
    // `opts` is an optional argument bag. Details:
    //
    //    opts = {
    //        // string to put before a matching character
    //        pre:     '<b>'
    //
    //        // string to put after matching character
    //      , post:    '</b>'
    //
    //        // Optional function. Input is an entry in the given arr`,
    //        // output should be the string to test `pattern` against.
    //        // In this example, if `arr = [{crying: 'koala'}]` we would return
    //        // 'koala'.
    //      , extract: function(arg) { return arg.crying; }
    //    }
    fuzzy.filter = function (pattern, arr, opts) {
        opts = opts || {};
        return arr.reduce(function (prev, element, idx, arr) {
            var str = element;
            if (opts.extract) {
                str = opts.extract(element);
            }
            var rendered = fuzzy.match(pattern, str, opts);
            if (rendered != null) {
                prev[prev.length] = {
                    string: rendered.rendered,
                    score: rendered.score,
                    index: idx,
                    original: element
                };
            }
            return prev;
        }, [])

        // Sort by score. Browsers are inconsistent wrt stable/unstable
        // sorting, so force stable by using the index in the case of tie.
        // See http://ofb.net/~sethml/is-sort-stable.html
        .sort(function (a, b) {
            var compare = b.score - a.score;
            if (compare) return compare;
            return a.index - b.index;
        });
    };
})(Entry.Utils);

/***/ }),

/***/ "./src/util/init.js":
/*!**************************!*\
  !*** ./src/util/init.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Initialize code fore Entry
 */


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

__webpack_require__(/*! ./utils */ "./src/util/utils.js");

/**
 * Initialize method with options.
 * @param {!Element} container for entry workspace or others.
 * @param {!object} options for initialize.
 */
Entry.init = function (container, options) {
    Entry.assert((typeof options === "undefined" ? "undefined" : _typeof(options)) === "object", 'Init option is not object');
    this.events_ = {};
    this.interfaceState = {
        menuWidth: 264
    };

    Entry.Utils.bindGlobalEvent(['resize', 'mousedown', 'mousemove', 'keydown', 'keyup', 'dispose']);

    /** @type {object} */
    this.options = options;
    this.parseOptions(options);
    this.mediaFilePath = (options.libDir ? options.libDir : '/lib') + '/entryjs/images/';
    this.defaultPath = options.defaultDir || '';
    this.blockInjectPath = options.blockInjectDir || '';

    if (this.type == 'workspace' && this.isPhone()) this.type = 'phone';
    this.initialize_();
    /** @type {!Element} */
    this.view_ = container;
    $(this.view_).addClass("entry");
    if (this.type === "minimize") $(this.view_).addClass(this.type);
    if (this.device === 'tablet') $(this.view_).addClass("tablet");

    Entry.initFonts(options.fonts);
    this.createDom(container, this.type);
    this.loadInterfaceState();
    this.overridePrototype();
    this.maxCloneLimit = 360;
    this.cloudSavable = true;
    this.startTime = new Date().getTime();

    document.onkeydown = function (e) {
        Entry.dispatchEvent('keyPressed', e);
    };
    document.onkeyup = function (e) {
        Entry.dispatchEvent('keyUpped', e);
    };
    window.onresize = function (e) {
        Entry.dispatchEvent('windowResized', e);
    };
    window.onbeforeunload = this.beforeUnload;

    Entry.addEventListener("saveWorkspace", function (e) {
        Entry.addActivity("save");
    });

    Entry.addEventListener("showBlockHelper", function (e) {
        Entry.propertyPanel.select("helper");
    });

    if (Entry.getBrowserType().substr(0, 2) == 'IE' && !window.flashaudio) {
        createjs.FlashAudioPlugin.swfPath = this.mediaFilePath + 'media/';
        createjs.Sound.registerPlugins([createjs.FlashAudioPlugin]);
        window.flashaudio = true;
    } else {
        createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin]);
    }

    Entry.soundQueue = new createjs.LoadQueue();
    Entry.soundQueue.installPlugin(createjs.Sound);
    Entry.soundInstances = [];

    Entry.loadAudio_([Entry.mediaFilePath + 'sounds/click.mp3', Entry.mediaFilePath + 'sounds/click.wav', Entry.mediaFilePath + 'sounds/click.ogg'], 'entryMagneting');
    Entry.loadAudio_([Entry.mediaFilePath + 'sounds/delete.mp3', Entry.mediaFilePath + 'sounds/delete.ogg', Entry.mediaFilePath + 'sounds/delete.wav'], 'entryDelete');

    createjs.Sound.stop();
    BigNumber.config({ ERRORS: false });
};

Entry.changeContainer = function (container) {
    container.appendChild(this.view_);
};

Entry.loadAudio_ = function (filenames, name) {
    if (!window.Audio || !filenames.length) {
        // No browser support for Audio.
        return;
    }

    for (var i = 0; i < filenames.length; i++) {
        var filename = filenames[i];
        //var path = Blockly.pathToBlockly + filename;
        var id = filename.match(/\/([^.]+)./)[1];
        //createjs.Sound.registerSound(path, id, 4);
        Entry.soundQueue.loadFile({
            id: name,
            src: filename,
            type: createjs.LoadQueue.SOUND
        });
        break;
    }
};

/**
 * Initialize function for Entry.
 * @private
 */
Entry.initialize_ = function () {
    /**
     * Initialize stage
     * @type {!Entry.Stage}
     * @type {!object}
     */
    this.stage = new Entry.Stage();

    if (Entry.engine && Entry.engine.projectTimer) Entry.engine.clearTimer();
    /**
     * Initialize engine for run.
     * @type {!Entry.Engine}
     * @type {!object}
     */
    this.engine = new Entry.Engine();

    /**
     * Initialize PropertyPanel.
     * @type {!object}
     */

    if (this.type !== "minimize") this.propertyPanel = new Entry.PropertyPanel();

    /**
     * Initialize container for objects.
     * @type {!Entry.Container}π
     * @type {!object}
     */
    this.container = new Entry.Container();

    /**
     * Initialize helper.
     * @type {!Entry.Helper}
     * @type {!object}
     */
    this.helper = new Entry.Helper();
    this.youtube = new Entry.Youtube();
    // this.tvCast = new Entry.TvCast();
    // this.doneProject = new Entry.DoneProject();
    /**
     * Initialize container for objects.
     * @type {!Entry.VariableContainer}
     * @type {!object}
     */
    this.variableContainer = new Entry.VariableContainer();

    this.commander = new Entry.Commander(this.type, this.doNotSkipAny);

    /**
     * Initialize scenes.
     * @type {!Entry.Scene}
     * @type {!object}
     */
    this.scene = new Entry.Scene();

    /**
     * Initialize playground.
     * @type {!Entry.Playground}
     */
    this.playground = new Entry.Playground();

    /**
     * Initialize toast. Toast don't need generate view.
     * @type {!Entry.Toast}
     */
    this.toast = new Entry.Toast();

    if (this.hw) this.hw.closeConnection();
    /**
     * Initialize hardware manager.
     * @type {!Entry.Toast}
     */
    this.hw = new Entry.HW();

    if (Entry.enableActivityLogging) this.reporter = new Entry.Reporter(false);else if (this.type == 'workspace' || this.type == 'phone') this.reporter = new Entry.Reporter(true);
};

/**
 * Initialize html DOM view for entry.
 * This work differently with initialize option.
 * @param {!Element} container for entry workspace or others.
 * @param {!string} option for create dom by type.
 */
Entry.createDom = function (container, option) {
    var that = this;
    if (!option || option == 'workspace') {
        Entry.documentMousedown.attach(that, that.cancelObjectEdit);

        var sceneView = Entry.createElement('div');
        container.appendChild(sceneView);
        /** @type {!Element} */
        this.sceneView = sceneView;
        this.scene.generateView(this.sceneView, option);

        var stateManagerView = Entry.createElement('div');
        this.sceneView.appendChild(stateManagerView);
        /** @type {!Element} */
        this.stateManagerView = stateManagerView;
        this.stateManager.generateView(this.stateManagerView, option);

        var engineView = Entry.createElement('div');
        container.appendChild(engineView);
        /** @type {!Element} */
        this.engineView = engineView;
        this.engine.generateView(this.engineView, option);

        var canvas = Entry.createElement('canvas');
        canvas.addClass('entryCanvasWorkspace');
        canvas.id = 'entryCanvas';
        canvas.width = 640;
        canvas.height = 360;
        engineView.insertBefore(canvas, this.engine.addButton);

        canvas.addEventListener("mousewheel", function (evt) {
            var lists = [];
            var mousePosition = Entry.stage.mouseCoordinate;
            var tempList = Entry.variableContainer.getListById(mousePosition);
            var wheelDirection = evt.wheelDelta > 0 ? true : false;

            for (var i = 0; i < tempList.length; i++) {
                var list = tempList[i];
                if (wheelDirection) {
                    if (list.scrollButton_.y >= 46) list.scrollButton_.y -= 23;else list.scrollButton_.y = 23;
                } else {
                    list.scrollButton_.y += 23;
                }
                list.updateView();
            }
        });

        /** @type {!Element} */
        this.canvas_ = canvas;
        this.stage.initStage(this.canvas_);

        var containerView = Entry.createElement('div');
        //container.appendChild(containerView);
        this.propertyPanel.generateView(container, option);
        /** @type {!Element} */
        this.containerView = containerView;
        this.container.generateView(this.containerView, option);
        this.propertyPanel.addMode("object", this.container);

        this.helper.generateView(this.containerView, option);
        this.propertyPanel.addMode("helper", this.helper);

        var playgroundView = Entry.createElement('div');
        container.appendChild(playgroundView);
        /** @type {!Element} */
        this.playgroundView = playgroundView;
        this.playground.generateView(this.playgroundView, option);

        this.propertyPanel.select("object");
        this.helper.bindWorkspace(this.playground.mainWorkspace);
    } else if (option == 'minimize') {
        var canvas = Entry.createElement('canvas');
        canvas.className = 'entryCanvasWorkspace minimize';
        canvas.id = 'entryCanvas';
        canvas.width = 640;
        canvas.height = 360;
        var canvasWrapper = Entry.createElement('div', 'entryCanvasWrapper');
        canvasWrapper.appendChild(canvas);
        container.appendChild(canvasWrapper);

        /** @type {!Element} */
        this.canvas_ = canvas;
        this.stage.initStage(this.canvas_);

        var engineView = Entry.createElement('div');
        container.appendChild(engineView);
        /** @type {!Element} */
        this.engineView = engineView;
        this.engine.generateView(this.engineView, option);
    } else if (option == 'phone') {
        var stateManagerView = Entry.createElement('div');
        /** @type {!Element} */
        this.stateManagerView = stateManagerView;
        this.stateManager.generateView(this.stateManagerView, option);

        var engineView = Entry.createElement('div');
        container.appendChild(engineView);
        /** @type {!Element} */
        this.engineView = engineView;
        this.engine.generateView(this.engineView, option);

        var canvas = Entry.createElement('canvas');
        canvas.addClass('entryCanvasPhone');
        canvas.id = 'entryCanvas';
        canvas.width = 640;
        canvas.height = 360;

        engineView.insertBefore(canvas, this.engine.footerView_);
        /** @type {!Element} */
        this.canvas_ = canvas;
        this.stage.initStage(this.canvas_);

        var containerView = Entry.createElement('div');
        container.appendChild(containerView);
        /** @type {!Element} */
        this.containerView = containerView;
        this.container.generateView(this.containerView, option);

        var playgroundView = Entry.createElement('div');
        container.appendChild(playgroundView);
        /** @type {!Element} */
        this.playgroundView = playgroundView;
        this.playground.generateView(this.playgroundView, option);
    }
};

/**
 * start running
 * @param {?number} FPS
 */
Entry.start = function (FPS) {
    if (Entry.type === "invisible") return;
    /** @type {number} */
    if (!this.FPS) this.FPS = 60;
    Entry.assert(typeof this.FPS == 'number', 'FPS must be number');
    Entry.engine.start(this.FPS);
};

Entry.stop = function () {
    if (Entry.type === "invisible") return;
    this.FPS = null;
    Entry.engine.stop();
};

/**
 * Parse init options
 * @param {!object} options for parse
 */
Entry.parseOptions = function (options) {
    /** @type {string} */
    this.type = options.type || this.type;

    this.hashId = options.hashId || this.hasId;

    if (options.device) this.device = options.device;

    this.projectSaveable = options.projectsaveable;
    if (this.projectSaveable === undefined) this.projectSaveable = true;

    this.objectAddable = options.objectaddable;
    if (this.objectAddable === undefined) this.objectAddable = true;

    this.objectEditable = options.objectEditable;
    if (this.objectEditable === undefined) this.objectEditable = true;
    if (!this.objectEditable) this.objectAddable = false;

    this.objectDeletable = options.objectdeletable;
    if (this.objectDeletable === undefined) this.objectDeletable = true;

    this.soundEditable = options.soundeditable;
    if (this.soundEditable === undefined) this.soundEditable = true;

    this.pictureEditable = options.pictureeditable;
    if (this.pictureEditable === undefined) this.pictureEditable = true;

    this.sceneEditable = options.sceneEditable;
    if (this.sceneEditable === undefined) this.sceneEditable = true;

    this.functionEnable = options.functionEnable;
    if (this.functionEnable === undefined) this.functionEnable = true;

    this.messageEnable = options.messageEnable;
    if (this.messageEnable === undefined) this.messageEnable = true;

    this.variableEnable = options.variableEnable;
    if (this.variableEnable === undefined) this.variableEnable = true;

    this.listEnable = options.listEnable;
    if (this.listEnable === undefined) this.listEnable = true;

    this.doCommandAll = options.doCommandAll;
    if (this.doCommandAll === undefined) this.doCommandAll = false;

    this.hasVariableManager = options.hasvariablemanager;
    if (!(this.variableEnable || this.messageEnable || this.listEnable || this.functionEnable)) this.hasVariableManager = false;else if (this.hasVariableManager === undefined) this.hasVariableManager = true;

    this.readOnly = options.readOnly || false;
    if (this.readOnly) {
        this.soundEditable = this.sceneEditable = this.objectAddable = false;
    }

    if (options.isForLecture) this.isForLecture = options.isForLecture;
    if (options.textCodingEnable) this.textCodingEnable = options.textCodingEnable;
};

Entry.initFonts = function (fonts) {
    this.fonts = fonts;
    if (!fonts) this.fonts = [];
};

Entry.reloadOption = function (options) {
    this.options = options;
    this.parseOptions(options);
    this.playground.applyTabOption();
    this.variableContainer.applyOption();
    this.engine.applyOption();
    this.commander.applyOption();
};

Entry.Utils.initEntryEvent_ = function () {
    if (!Entry.events_) {
        Entry.events_ = [];
    }
};

/**
 * initialize sound
 * @param {sound object} sound
 */
Entry.initSound = function (sound) {
    if (!sound || !sound.duration || sound.duration == 0) return;
    sound.path = sound.fileurl || Entry.defaultPath + '/uploads/' + sound.filename.substring(0, 2) + '/' + sound.filename.substring(2, 4) + '/' + sound.filename + sound.ext;

    Entry.soundQueue.loadFile({
        id: sound.id,
        src: sound.path,
        type: createjs.LoadQueue.SOUND
    });
};

/***/ }),

/***/ "./src/util/loader.js":
/*!****************************!*\
  !*** ./src/util/loader.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Loader = {
    queueCount: 0,
    totalCount: 0,
    loaded: false
};

Entry.Loader.addQueue = function (type) {
    if (!this.queueCount) Entry.dispatchEvent('loadStart');
    this.queueCount++;
    this.totalCount++;
};

Entry.Loader.removeQueue = function (type) {
    this.queueCount--;
    if (!this.queueCount) {
        this.totalCount = 0;
        this.handleLoad();
    }
};

Entry.Loader.getLoadedPercent = function () {
    if (this.totalCount === 0) return 1;else return this.queueCount / this.totalCount;
};

Entry.Loader.isLoaded = function () {
    return !this.queueCount && !this.totalCount;
};

Entry.Loader.handleLoad = function () {
    if (this.loaded) return;
    this.loaded = true;
    Entry.dispatchEvent('loadComplete');
};

/***/ }),

/***/ "./src/util/popup.js":
/*!***************************!*\
  !*** ./src/util/popup.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/***/ }),

/***/ "./src/util/restrictor.js":
/*!********************************!*\
  !*** ./src/util/restrictor.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Restrictor = function (controller) {
    this._controller = controller;
    this.startEvent = new Entry.Event(this);
    this.endEvent = new Entry.Event(this);

    Entry.Curtain.init(controller && controller.isRestrictorCloseable);

    this.currentTooltip = null;
};

(function (p) {
    p.restrict = function (data, toolTipRender) {
        this._data = data;
        this.toolTipRender = toolTipRender;

        this.end();

        var log = data.content.concat();
        var commandType = log.shift();
        var command = Entry.Command[commandType];

        var domQuery = command.dom;
        this.startEvent.notify();
        if (domQuery instanceof Array) domQuery = this.processDomQuery(domQuery);

        if (!data.tooltip) data.tooltip = {
            title: '액션',
            content: '지시 사항을 따르시오'
        };

        if (command.restrict) {
            this.currentTooltip = command.restrict(data, domQuery, this.restrictEnd.bind(this), this);
            return;
        } else {
            this.currentTooltip = new Entry.Tooltip([{
                title: data.tooltip.title,
                content: data.tooltip.content,
                target: domQuery
            }], {
                restrict: true,
                dimmed: true,
                callBack: this.restrictEnd.bind(this)
            });
            window.setTimeout(this.align.bind(this));
        }

        if (data.skip) {
            return this.end();
        }
    };

    p.end = function () {
        if (this.currentTooltip) {
            this.currentTooltip.dispose();
            this.currentTooltip = null;
        }
    };

    p.restrictEnd = function () {
        this.endEvent.notify();
    };

    p.align = function () {
        if (this.currentTooltip) this.currentTooltip.alignTooltips();
    };

    p.processDomQuery = function (domQuery, log) {
        log = log || this._data.content;
        log = log.concat();
        log.shift();
        if (domQuery instanceof Array) {
            domQuery = domQuery.map(function (q) {
                if (q[0] === '&') return log[Number(q.substr(1))][1];else return q;
            });
        }
        return domQuery;
    };

    p.renderTooltip = function () {
        if (this.currentTooltip) this.currentTooltip.render();
    };

    p.fadeOutTooltip = function () {
        if (this.currentTooltip) this.currentTooltip.fadeOut();
    };

    p.fadeInTooltip = function () {
        if (this.currentTooltip) this.currentTooltip.fadeIn();
    };

    p.isTooltipFaded = function () {
        if (this.currentTooltip) return this.currentTooltip.isFaded();
        return false;
    };

    p.requestNextData = function () {
        if (this._controller) {
            return this._controller.requestNextData();
        }
    };
})(Entry.Restrictor.prototype);

/***/ }),

/***/ "./src/util/static.js":
/*!****************************!*\
  !*** ./src/util/static.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Entry = __webpack_require__(/*! ../entry */ "./src/entry.js");

Entry.STATIC = {
    /* data type */
    OBJECT: 0,
    ENTITY: 1,
    SPRITE: 2,
    SOUND: 3,
    VARIABLE: 4,
    FUNCTION: 5,
    SCENE: 6,
    MESSAGE: 7,
    BLOCK_MODEL: 8,
    BLOCK_RENDER_MODEL: 9,
    BOX_MODEL: 10,
    THREAD_MODEL: 11,
    DRAG_INSTANCE: 12,

    /* block state */
    BLOCK_STATIC: 0,
    BLOCK_MOVE: 1,
    BLOCK_FOLLOW: 2,

    /* execute return state */
    RETURN: 0,
    CONTINUE: 1,
    BREAK: 2,
    PASS: 3,

    COMMAND_TYPES: {
        addThread: 101,
        destroyThread: 102,
        destroyBlock: 103,
        recoverBlock: 104,
        insertBlock: 105,
        separateBlock: 106,
        moveBlock: 107,
        cloneBlock: 108,
        uncloneBlock: 109,
        scrollBoard: 110,
        setFieldValue: 111,
        selectBlockMenu: 112,
        destroyBlockBelow: 113,
        destroyThreads: 114,
        addThreads: 115,
        recoverBlockBelow: 116,
        addThreadFromBlockMenu: 117,
        insertBlockFromBlockMenu: 118,
        moveBlockFromBlockMenu: 119,
        separateBlockForDestroy: 120,
        moveBlockForDestroy: 121,
        insertBlockFromBlockMenuFollowSeparate: 122,
        insertBlockFollowSeparate: 123,
        separateBlockByCommand: 124,

        selectObject: 201,
        objectEditButtonClick: 202,
        objectAddPicture: 203,
        objectRemovePicture: 204,
        objectAddSound: 205,
        objectRemoveSound: 206,
        objectNameEdit: 207,

        do: 301,
        undo: 302,
        redo: 303,

        editPicture: 401,
        uneditPicture: 402,
        processPicture: 403,
        unprocessPicture: 404,
        editText: 405,

        toggleRun: 501,
        toggleStop: 502,

        containerSelectObject: 601,

        playgroundChangeViewMode: 701,
        playgroundClickAddPicture: 702,
        playgroundClickAddSound: 703,
        playgroundClickAddPictureCancel: 704,
        playgroundClickAddSoundCancel: 705,

        variableContainerSelectFilter: 801,
        variableContainerClickVariableAddButton: 802,
        variableContainerAddVariable: 803,
        variableContainerRemoveVariable: 804,
        variableAddSetName: 805,

        sceneAdd: 91,
        sceneEdit: 92,
        sceneChange: 93,
        sceneRemove: 94,
        sceneSort: 95
    },

    RECORDABLE: {
        SUPPORT: 1,
        SKIP: 2,
        ABANDON: 3
    }
};

/***/ }),

/***/ "./src/util/toast.js":
/*!***************************!*\
  !*** ./src/util/toast.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/***/ }),

/***/ "./src/util/tooltip.js":
/*!*****************************!*\
  !*** ./src/util/tooltip.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Tooltip = function (data, opts) {
    this.init(data, opts);
};

(function (p) {
    p.usedClasses = 'up down left right edge_up edge_down edge_left edge_right';

    p.init = function (data, opts) {
        if (this._rendered) this.dispose();

        this.data = data instanceof Array ? data : [data];
        this.opts = opts || this.opts || {
            dimmed: true,
            restirct: false
        };
        this._rendered = false;
        this._noDispose = !!this.opts.noDispose;
        this._faded = false;
        this._tooltips = [];
        this._indicators = [];

        if (data.length > 1 || opts.indicator) this.isIndicator = true;

        if (opts.render !== false) this.render();

        this._resizeEventFunc = Entry.Utils.debounce(function () {
            this.alignTooltips();
        }.bind(this), 200);

        Entry.addEventListener('windowResized', this._resizeEventFunc);
    };

    p.render = function () {
        if (this._rendered) return;
        this.fadeIn();

        this._convertDoms();

        if (this.opts.dimmed) this.renderBG();

        var datum = this.data[0].targetDom;
        if (datum && typeof datum !== 'string' && datum.length) {
            this.opts.restrict && this.opts.dimmed && Entry.Curtain.show(datum.get(0));
            this.renderTooltips();
            this._rendered = true;
            if (this.opts.restrict) this.restrictAction();
        }
    };

    p._convertDoms = function () {
        this.data.map(function (d) {
            var findedDom = d.target;
            if (d.target instanceof Array) findedDom = Entry.getDom(d.target);
            var targetDom = $(findedDom);
            if (targetDom.length) d.targetDom = targetDom;
        });
    };

    p.renderBG = function () {
        if (this.opts.restrict) {
            this._bg = Entry.Dom('div', {
                classes: [],
                parent: $(document.body)
            });
        } else {
            this._bg = Entry.Dom('div', {
                classes: ['entryDimmed', 'entryTooltipBG'],
                parent: $(document.body)
            });

            this._bg.bindOnClick(this.dispose.bind(this));
        }
    };

    p.renderTooltips = function () {
        this.data.map(this._renderTooltip.bind(this));
    };

    p.alignTooltips = function () {
        if (!this._rendered) return;

        this.data.map(this._alignTooltip.bind(this));
        this.opts.dimmed && Entry.Curtain.align();
    };

    p._renderTooltip = function (data) {
        if (!data.content) return;
        var tooltipWrapper = Entry.Dom('div', {
            classes: ['entryTooltipWrapper'],
            parent: $(document.body)
        });
        var tooltipDom = Entry.Dom('div', {
            classes: ['entryTooltip', data.direction, data.style],
            parent: tooltipWrapper
        });

        if (this.isIndicator) data.indicator = this.renderIndicator();

        tooltipDom.bind('mousedown', function (e) {
            e.stopPropagation();
        });

        tooltipDom.html(data.content);
        this._tooltips.push(tooltipWrapper);
        data.wrapper = tooltipWrapper;
        data.dom = tooltipDom;
        this._alignTooltip(data);
    };

    p._alignTooltip = function (data) {
        var rect;
        if (data.targetDom instanceof $) rect = data.targetDom.get(0).getBoundingClientRect();else rect = data.targetDom.getBoundingClientRect();
        var tooltipRect = data.dom[0].getBoundingClientRect();
        var clientWidth = document.body.clientWidth;
        var clientHeight = document.body.clientHeight;
        if (this.isIndicator) {
            data.indicator.css({
                left: rect.left + rect.width / 2,
                top: rect.top + rect.height / 2
            });
        }

        if (tooltipRect.width > 450) data.dom.addClass('shrink');else data.dom.removeClass('shrink');

        var direction = data.direction;

        if (!direction) {
            var margin = rect.left - tooltipRect.width,
                newMargin = clientWidth - rect.left - rect.width - tooltipRect.width;
            direction = 'left';
            if (margin < newMargin) {
                margin = newMargin;
                direction = 'right';
            }
            newMargin = rect.top - tooltipRect.height;
            if (margin < newMargin) {
                margin = newMargin;
                direction = 'up';
            }
            newMargin = clientHeight - rect.top - rect.height - tooltipRect.height;
            if (margin < newMargin) {
                margin = newMargin;
                direction = 'down';
            }
        }
        data.dom.removeClass(this.usedClasses).addClass(direction);

        var pos = { top: rect.top, left: rect.left };
        var edgeStyle;
        switch (direction) {
            case 'down':
                pos.top += rect.height;
            case 'up':
                pos.left += rect.width / 2;
                if (pos.left < tooltipRect.width / 2) edgeStyle = 'edge_left';
                if (clientWidth - pos.left < tooltipRect.width / 2) edgeStyle = 'edge_right';
                break;
            case 'right':
                pos.left += rect.width;
            case 'left':
                pos.top += rect.height / 2;
                if (pos.top < tooltipRect.height / 2) edgeStyle = 'edge_up';
                if (clientHeight - pos.top < tooltipRect.height / 2) edgeStyle = 'edge_down';
                break;
            default:
                break;
        }
        if (edgeStyle) data.dom.addClass(edgeStyle);

        data.wrapper.css(pos);
    };

    p.renderIndicator = function (left, top) {
        var indicator = Entry.Dom('div', {
            classes: ['entryTooltipIndicator'],
            parent: $(document.body)
        });
        indicator.html('<div></div><div></div><div></div>');
        this._indicators.push(indicator);
        return indicator;
    };

    p.dispose = function (e) {
        // click event object when call from restrict
        if (this._bg) this._bg.remove();
        if (this.opts.restrict) {
            Entry.Utils.allowAction();
            this.opts.dimmed && Entry.Curtain.hide();
        }
        while (this._tooltips.length) {
            this._tooltips.pop().remove();
        }while (this._indicators.length) {
            this._indicators.pop().remove();
        }if (this.opts.callBack) this.opts.callBack.call(this, e);
        Entry.removeEventListener('windowResized', this._resizeEventFunc);
    };

    p.restrictAction = function () {
        var doms = this.data.map(function (d) {
            return d.targetDom;
        });
        if (this._noDispose && this.opts.callBack) this.opts.callBack.call(this);
        Entry.Utils.restrictAction(doms, this.dispose.bind(this), this._noDispose);
    };

    p.fadeOut = function () {
        $(document.body).addClass('hideTooltip');
        this._faded = true;
    };

    p.fadeIn = function () {
        $(document.body).removeClass('hideTooltip');
        this._faded = false;
    };

    p.isFaded = function () {
        return this._faded;
    };
})(Entry.Tooltip.prototype);

/***/ }),

/***/ "./src/util/tvCast.js":
/*!****************************!*\
  !*** ./src/util/tvCast.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.TvCast = function (tvCast) {
    this.generateView(tvCast);
};

var p = Entry.TvCast.prototype;

p.init = function (tvCastHash) {
    this.tvCastHash = tvCastHash;
};

p.generateView = function (tvCastHash) {
    var movieContainer = Entry.createElement('div');
    movieContainer.addClass('entryContainerMovieWorkspace');
    movieContainer.addClass('entryRemove');

    this.movieContainer = movieContainer;
    var view = this.movieContainer;

    var movieContainer = this.movieContainer;
    var iframe = Entry.createElement('iframe');
    iframe.setAttribute('id', 'tvCastIframe');
    iframe.setAttribute('allowfullscreen', '');
    iframe.setAttribute('frameborder', 0);
    iframe.setAttribute('src', tvCastHash);
    this.movieFrame = iframe;

    this.movieContainer.appendChild(this.movieFrame);
};

p.getView = function () {
    return this.movieContainer;
};

p.resize = function () {
    var container = document.getElementById('entryContainerWorkspaceId');
    var iframe = document.getElementById('tvCastIframe');
    var w = this.movieContainer.offsetWidth;
    iframe.width = w + 'px';
    iframe.height = w * 9 / 16 + 'px';
};

/***/ }),

/***/ "./src/util/utils.js":
/*!***************************!*\
  !*** ./src/util/utils.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Utils = {};

Entry.TEXT_ALIGN_CENTER = 0;

Entry.TEXT_ALIGN_LEFT = 1;

Entry.TEXT_ALIGN_RIGHT = 2;

Entry.TEXT_ALIGNS = ['center', 'left', 'right'];

Entry.clipboard = null;

/**
 * Load project
 * @param {?Project} project
 */
Entry.loadProject = function (project) {
    if (!project) {
        project = Entry.getStartProject(Entry.mediaFilePath);
    }

    if (this.type == 'workspace') Entry.stateManager.startIgnore();
    Entry.projectId = project._id;
    Entry.variableContainer.setVariables(project.variables);
    Entry.variableContainer.setMessages(project.messages);
    Entry.scene.addScenes(project.scenes);
    Entry.stage.initObjectContainers();
    Entry.variableContainer.setFunctions(project.functions);
    Entry.container.setObjects(project.objects);
    Entry.FPS = project.speed ? project.speed : 60;
    createjs.Ticker.setFPS(Entry.FPS);

    if (!Entry.engine.projectTimer) Entry.variableContainer.generateTimer();

    if (Object.keys(Entry.container.inputValue).length === 0) Entry.variableContainer.generateAnswer();
    Entry.start();
    if (this.options.programmingMode) {
        var mode = this.options.programmingMode;
        if (Entry.Utils.isNumber(mode)) {
            var pMode = mode;
            mode = {};

            this.mode = mode;
            if (pMode == 0) {
                mode.boardType = Entry.Workspace.MODE_BOARD;
                mode.textType = -1;
            } else if (pMode == 1) {
                // Python in Text Coding
                mode.boardType = Entry.Workspace.MODE_VIMBOARD;
                mode.textType = Entry.Vim.TEXT_TYPE_PY;
                mode.runType = Entry.Vim.WORKSPACE_MODE;
            } else if (pMode == 2) {
                // Javascript in Text Coding
                mode.boardType = Entry.Workspace.MODE_VIMBOARD;
                mode.textType = Entry.Vim.TEXT_TYPE_JS;
                mode.runType = Entry.Vim.MAZE_MODE;
            }
            Entry.getMainWS().setMode(mode);
        }
    }

    Entry.Loader.isLoaded() && Entry.Loader.handleLoad();

    if (this.type == 'workspace') Entry.stateManager.endIgnore();

    if (project.interface && Entry.options.loadInterface) Entry.loadInterfaceState(project.interface);

    if (window.parent && window.parent.childIframeLoaded) window.parent.childIframeLoaded();
    return project;
};

Entry.clearProject = function () {
    Entry.stop();
    Entry.projectId = null;
    Entry.type !== 'invisible' && Entry.playground && Entry.playground.changeViewMode('code');
    Entry.variableContainer.clear();
    Entry.container.clear();
    Entry.scene.clear();
};

/**
 * Export project
 * @param {?Project} project
 */
Entry.exportProject = function (project) {
    if (!project) project = {};

    if (!Entry.engine.isState('stop')) Entry.engine.toggleStop();

    var objects = project.objects = Entry.container.toJSON();
    project.scenes = Entry.scene.toJSON();
    project.variables = Entry.variableContainer.getVariableJSON();
    project.messages = Entry.variableContainer.getMessageJSON();
    project.functions = Entry.variableContainer.getFunctionJSON();
    project.scenes = Entry.scene.toJSON();
    project.speed = Entry.FPS;
    project.interface = Entry.captureInterfaceState();

    if (!objects || !objects.length) return false;

    return project;
};

/**
 * inject blocks to Entry menu.
 * Available block is different by object type.
 * @param {!string} objectType
 * @param {!string} blockText
 */
Entry.setBlockByText = function (objectType, blockText) {
    var blockJSON = [];
    var xml = jQuery.parseXML(blockText);
    var categories = xml.getElementsByTagName('category');
    for (var i = 0; i < categories.length; i++) {
        var category = categories[i];
        var json = { category: category.getAttribute('id'), blocks: [] };
        var blocks = category.childNodes;
        for (var j = 0; j < blocks.length; j++) {
            var b = blocks[j];
            if (b.tagName && (b.tagName.toUpperCase() == 'BLOCK' || b.tagName.toUpperCase() == 'BTN')) {
                json.blocks.push(b.getAttribute('type'));
            }
        }
        blockJSON.push(json);
    }
    Entry.playground.setBlockMenu(blockJSON);
};

/**
 * inject blocks to Entry menu.
 * Available block is different by object type.
 * @param {!string} objectType
 * @param {!xml} XML
 */
Entry.setBlock = function (objectType, XML) {
    Entry.playground.setMenuBlock(objectType, XML);
};

Entry.enableArduino = function () {
    return;
};

/**
 * This method is called when window closed;
 * @param {event} e
 */
Entry.beforeUnload = function (e) {
    Entry.hw.closeConnection();
    Entry.variableContainer.updateCloudVariables();
    if (Entry.type == 'workspace') {
        if (localStorage && Entry.interfaceState) {
            localStorage.setItem('workspace-interface', JSON.stringify(Entry.captureInterfaceState()));
        }
        if (!Entry.stateManager.isSaved()) return Lang.Workspace.project_changed;
    }
};

Entry.captureInterfaceState = function () {
    var interfaceState = JSON.parse(JSON.stringify(Entry.interfaceState));
    var playground = Entry.playground;
    if (Entry.type == 'workspace' && playground && playground.object) {
        interfaceState.object = playground.object.id;
    }

    return interfaceState;
};

/**
 * load interface state by localstorage
 */
Entry.loadInterfaceState = function (interfaceState) {
    if (Entry.type == 'workspace') {
        if (interfaceState) {
            Entry.container.selectObject(interfaceState.object, true);
        } else if (localStorage && localStorage.getItem('workspace-interface')) {
            var interfaceModel = localStorage.getItem('workspace-interface');
            interfaceState = JSON.parse(interfaceModel);
        } else {
            interfaceState = {
                menuWidth: 280,
                canvasWidth: 480
            };
        }
        this.resizeElement(interfaceState);
    }
};

/**
 * @return {Number} return up time time stamp
 */
Entry.getUpTime = function () {
    return new Date().getTime() - this.startTime;
};

/**
 * @param {String} activityType
 */
Entry.addActivity = function (activityType) {
    if (Entry.stateManager) Entry.stateManager.addActivity(activityType);
};

Entry.startActivityLogging = function () {
    if (Entry.reporter) Entry.reporter.start(Entry.projectId, window.user ? window.user._id : null, Entry.startTime);
};

/**
 * return activity log
 * @return {object}
 */
Entry.getActivityLog = function () {
    var log = {};
    if (Entry.stateManager) log.activityLog = Entry.stateManager.activityLog_;
    return log;
};
//block drag mode for Entry.BlockView
Entry.DRAG_MODE_NONE = 0;
Entry.DRAG_MODE_MOUSEDOWN = 1;
Entry.DRAG_MODE_DRAG = 2;

Entry.cancelObjectEdit = function (e) {
    var object = Entry.playground.object;
    if (!object) return;
    var objectView = object.view_;
    var target = e.target;
    var isCurrent = $(objectView).find(target).length !== 0;
    var tagName = target.tagName.toUpperCase();
    var type = e.type;
    if (!object.isEditing || tagName === 'INPUT' && isCurrent || type === 'touchstart') return;
    object.editObjectValues(false);
};

Entry.generateFunctionSchema = function (functionId) {
    functionId = 'func_' + functionId;
    if (Entry.block[functionId]) return;
    var blockSchema = function blockSchema() {};
    var blockPrototype = Entry.block.function_general;
    blockSchema.prototype = blockPrototype;
    blockSchema = new blockSchema();
    blockSchema.changeEvent = new Entry.Event();
    blockSchema.template = Lang.template.function_general;

    Entry.block[functionId] = blockSchema;
};

Entry.getMainWS = function () {
    var ret;
    if (Entry.mainWorkspace) ret = Entry.mainWorkspace;else if (Entry.playground && Entry.playground.mainWorkspace) ret = Entry.playground.mainWorkspace;
    return ret;
};

Entry.getDom = function (query) {
    if (!query) return this.view_;

    query = JSON.parse(JSON.stringify(query));
    if (query.length > 1) {
        var key = query.shift();
        return this[key].getDom(query);
    } else {}
};

/**
 * Resize element's size.
 * @param {!json} interfaceModel
 */
Entry.resizeElement = function (interfaceModel) {
    var mainWorkspace = Entry.getMainWS();
    if (!mainWorkspace) return;

    if (!interfaceModel) interfaceModel = this.interfaceState;

    if (Entry.type == 'workspace') {
        var interfaceState = this.interfaceState;
        if (!interfaceModel.canvasWidth && interfaceState.canvasWidth) interfaceModel.canvasWidth = interfaceState.canvasWidth;
        if (!interfaceModel.menuWidth && this.interfaceState.menuWidth) interfaceModel.menuWidth = interfaceState.menuWidth;

        if (Entry.engine.speedPanelOn) Entry.engine.toggleSpeedPanel();

        var canvasSize = interfaceModel.canvasWidth;
        if (!canvasSize) canvasSize = 400;else if (canvasSize < 325) canvasSize = 325;else if (canvasSize > 720) canvasSize = 720;
        interfaceModel.canvasWidth = canvasSize;

        var canvasHeight = canvasSize * 9 / 16;

        Entry.engine.view_.style.width = canvasSize + 'px';
        Entry.engine.view_.style.height = canvasHeight + 'px';
        Entry.engine.view_.style.top = '40px';
        Entry.stage.canvas.canvas.style.width = canvasSize + 'px';
        if (canvasSize >= 400) {
            Entry.engine.view_.removeClass('collapsed');
        } else {
            Entry.engine.view_.addClass('collapsed');
        }
        Entry.playground.view_.style.left = canvasSize + 0.5 + 'px';

        Entry.propertyPanel.resize(canvasSize);

        var addButton = Entry.engine.view_.getElementsByClassName('entryAddButtonWorkspace_w')[0];
        if (addButton) {
            var addButtonStyle = addButton.style;
            if (Entry.objectAddable) {
                addButtonStyle.top = canvasHeight + 25 + 'px';
                addButtonStyle.width = canvasSize * 0.7 + 'px';
            }
        }
        var pauseButton = Entry.engine.view_.getElementsByClassName('entryPauseButtonWorkspace_w')[0];
        if (pauseButton) {
            var pauseButtonStyle = pauseButton.style;
            if (Entry.objectAddable) {
                pauseButtonStyle.top = canvasHeight + 25 + 'px';
                pauseButtonStyle.width = canvasSize * 0.7 + 'px';
            }
        }

        var runButton = Entry.engine.view_.getElementsByClassName('entryRunButtonWorkspace_w')[0];
        if (runButton) {
            var runButtonStyle = runButton.style;
            if (Entry.objectAddable) {
                runButtonStyle.top = canvasHeight + 25 + 'px';
                runButtonStyle.left = canvasSize * 0.7 + 'px';
                runButtonStyle.width = canvasSize * 0.3 + 'px';
            } else {
                runButtonStyle.left = '2px';
                runButtonStyle.top = canvasHeight + 25 + 'px';
                runButtonStyle.width = canvasSize - 4 + 'px';
            }
        }

        var stopButton = Entry.engine.view_.getElementsByClassName('entryStopButtonWorkspace_w')[0];
        if (stopButton) {
            var stopButtonStyle = stopButton.style;
            if (Entry.objectAddable) {
                stopButtonStyle.top = canvasHeight + 25 + 'px';
                stopButtonStyle.left = canvasSize * 0.7 + 'px';
                stopButtonStyle.width = canvasSize * 0.3 + 'px';
            } else {
                stopButtonStyle.left = '2px';
                stopButtonStyle.top = canvasHeight + 25 + 'px';
                stopButtonStyle.width = canvasSize + 'px';
            }
        }

        var menuWidth = interfaceModel.menuWidth;
        if (!menuWidth) menuWidth = 264;else if (menuWidth < 244) menuWidth = 244;else if (menuWidth > 400) menuWidth = 400;
        interfaceModel.menuWidth = menuWidth;

        var blockMenu = mainWorkspace.blockMenu;
        var adjust = blockMenu.hasCategory() ? -64 : 0;

        $('.blockMenuContainer').css({ width: menuWidth + adjust + 'px' });
        $('.blockMenuContainer>svg').css({ width: menuWidth + adjust + 'px' });
        blockMenu.setWidth();
        $('.entryWorkspaceBoard').css({ left: menuWidth + 'px' });
        Entry.playground.resizeHandle_.style.left = menuWidth + 'px';
        Entry.playground.variableViewWrapper_.style.width = menuWidth + 'px';

        this.interfaceState = interfaceModel;
    }

    Entry.windowResized.notify();
};

/**
 * override native prototype to add useful method.
 */
Entry.overridePrototype = function () {
    /** modulo include negative number */
    Number.prototype.mod = function (n) {
        return (this % n + n) % n;
    };

    //polyfill
    if (!String.prototype.repeat) {
        String.prototype.repeat = function (count) {
            'use strict';

            if (this == null) {
                throw new TypeError("can't convert " + this + ' to object');
            }
            var str = '' + this;
            count = +count;
            if (count != count) {
                count = 0;
            }
            if (count < 0) {
                throw new RangeError('repeat count must be non-negative');
            }
            if (count == Infinity) {
                throw new RangeError('repeat count must be less than infinity');
            }
            count = Math.floor(count);
            if (str.length == 0 || count == 0) {
                return '';
            }
            // Ensuring count is a 31-bit integer allows us to heavily optimize the
            // main part. But anyway, most current (August 2014) browsers can't handle
            // strings 1 << 28 chars or longer, so:
            if (str.length * count >= 1 << 28) {
                throw new RangeError('repeat count must not overflow maximum string size');
            }
            var rpt = '';
            for (;;) {
                if ((count & 1) == 1) {
                    rpt += str;
                }
                count >>>= 1;
                if (count == 0) {
                    break;
                }
                str += str;
            }
            // Could we try:
            // return Array(count + 1).join(this);
            return rpt;
        };
    }
};

// INFO: 기존에 사용하던 isNaN에는 숫자 체크의 문자가 있을수 있기때문에 regex로 체크하는 로직으로 변경
// isNaN 문제는 https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/isNaN
// 에서 확인.
Entry.Utils.isNumber = function (num) {
    if (typeof num === 'number') {
        return true;
    }
    var reg = /^-?\d+\.?\d*$/;
    if (typeof num === 'string' && reg.test(num)) {
        return true;
    } else {
        return false;
    }
};

Entry.Utils.generateId = function () {
    return ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).substr(-4);
};

Entry.Utils.intersectArray = function (x, y) {
    var ret = [];
    for (var i = 0; i < x.length; i++) {
        for (var z = 0; z < y.length; z++) {
            if (x[i] == y[z]) {
                ret.push(x[i]);
                break;
            }
        }
    }
    return ret;
};

Entry.Utils.isPointInMatrix = function (matrix, point, offset) {
    offset = offset === undefined ? 0 : offset;
    var x = matrix.offsetX ? matrix.x + matrix.offsetX : matrix.x;
    var y = matrix.offsetY ? matrix.y + matrix.offsety : matrix.y;
    return x - offset <= point.x && x + matrix.width + offset >= point.x && y - offset <= point.y && y + matrix.height + offset >= point.y;
};

Entry.Utils.colorDarken = function (color, factor) {
    var r, g, b;
    if (color.length === 7) {
        r = parseInt(color.substr(1, 2), 16);
        g = parseInt(color.substr(3, 2), 16);
        b = parseInt(color.substr(5, 2), 16);
    } else {
        r = parseInt(color.substr(1, 2), 16);
        g = parseInt(color.substr(2, 2), 16);
        b = parseInt(color.substr(3, 2), 16);
    }

    factor = factor === undefined ? 0.7 : factor;
    r = inspect(Math.floor(r * factor).toString(16));
    g = inspect(Math.floor(g * factor).toString(16));
    b = inspect(Math.floor(b * factor).toString(16));

    function inspect(val) {
        if (val.length != 2) val = '0' + val;
        return val;
    }

    return '#' + r + g + b;
};

Entry.Utils.colorLighten = function (color, amount) {
    function clamp01(val) {
        return Math.min(1, Math.max(0, val));
    }

    amount = amount === 0 ? 0 : amount || 20;
    var hsl = Entry.Utils.hexToHsl(color);
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return Entry.Utils.hslToHex(hsl);
};

Entry.Utils._EmphasizeColorMap = {
    '#3BBD70': '#5BC982',
    '#498DEB': '#62A5F4',
    '#A751E3': '#C08FF7',
    '#EC4466': '#F46487',
    '#FF9E20': '#FFB05A',
    '#A4D01D': '#C4DD31',
    '#00979D': '#09BAB5',
    '#FFD974': '#FCDA90',
    '#E457DC': '#F279F2',
    '#CC7337': '#DD884E',
    '#AEB8FF': '#C0CBFF',
    '#FFCA36': '#F2C670'
};

Entry.Utils.getEmphasizeColor = function (color) {
    var colorKey = color.toUpperCase();
    return Entry.Utils._EmphasizeColorMap[colorKey] || color;
};

// Take input from [0, n] and return it as [0, 1]
Entry.Utils.bound01 = function (n, max) {
    function isOnePointZero(n) {
        return typeof n == 'string' && n.indexOf('.') != -1 && parseFloat(n) === 1;
    }

    function isPercentage(n) {
        return typeof n === 'string' && n.indexOf('%') != -1;
    }

    if (isOnePointZero(n)) {
        n = '100%';
    }

    var processPercent = isPercentage(n);
    n = Math.min(max, Math.max(0, parseFloat(n)));

    // Automatically convert percentage into number
    if (processPercent) {
        n = parseInt(n * max, 10) / 100;
    }

    // Handle floating point rounding errors
    if (Math.abs(n - max) < 0.000001) {
        return 1;
    }

    // Convert into [0, 1] range if it isn't already
    return n % max / parseFloat(max);
};

// `rgbToHsl`
// Converts an RGB color value to HSL.
// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
// *Returns:* { h, s, l } in [0,1]
Entry.Utils.hexToHsl = function (color) {
    var r, g, b;
    if (color.length === 7) {
        r = parseInt(color.substr(1, 2), 16);
        g = parseInt(color.substr(3, 2), 16);
        b = parseInt(color.substr(5, 2), 16);
    } else {
        r = parseInt(color.substr(1, 2), 16);
        g = parseInt(color.substr(2, 2), 16);
        b = parseInt(color.substr(3, 2), 16);
    }

    r = Entry.Utils.bound01(r, 255);
    g = Entry.Utils.bound01(g, 255);
    b = Entry.Utils.bound01(b, 255);

    var max = Math.max(r, g, b),
        min = Math.min(r, g, b);
    var h,
        s,
        l = (max + min) / 2;

    if (max == min) {
        h = s = 0; // achromatic
    } else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }

        h /= 6;
    }

    var hsl = { h: h, s: s, l: l };
    return { h: hsl.h * 360, s: hsl.s, l: hsl.l };
};

// `hslToRgb`
// Converts an HSL color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
Entry.Utils.hslToHex = function (color) {
    var r, g, b;

    var h = Entry.Utils.bound01(color.h, 360);
    var s = Entry.Utils.bound01(color.s, 1);
    var l = Entry.Utils.bound01(color.l, 1);

    function hue2rgb(p, q, t) {
        if (t < 0) t += 1;
        if (t > 1) t -= 1;
        if (t < 1 / 6) return p + (q - p) * 6 * t;
        if (t < 1 / 2) return q;
        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
        return p;
    }

    function pad2(c) {
        return c.length == 1 ? '0' + c : '' + c;
    }

    if (s === 0) {
        r = g = b = l; // achromatic
    } else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }

    var rgb = { r: r * 255, g: g * 255, b: b * 255 };

    var hex = [pad2(Math.round(rgb.r).toString(16)), pad2(Math.round(rgb.g).toString(16)), pad2(Math.round(rgb.b).toString(16))];

    return '#' + hex.join('');
};

Entry.Utils.setSVGDom = function (SVGDom) {
    Entry.Utils.SVGDom = SVGDom;
};

Entry.Utils.bindIOSDeviceWatch = function () {
    var Agent = Entry.Utils.mobileAgentParser();
    if (Agent.apple.device) {
        console.log('APPLE! MOBILE DEVICE');
        var lastHeight = window.innerHeight || document.documentElement.clientHeight;
        var lastSVGDomHeight = 0;
        if (Entry.Utils.SVGDom) {
            lastSVGDomHeight = Entry.Utils.SVGDom.height();
        }

        setInterval(function () {
            var nowHeight = window.innerHeight || document.documentElement.clientHeight;
            var SVGDomCheck = false;
            if (Entry.Utils.SVGDom) {
                var nowSVGDomHeight = Entry.Utils.SVGDom.height();
                SVGDomCheck = lastSVGDomHeight != nowSVGDomHeight;
                lastSVGDomHeight = nowSVGDomHeight;
            }
            if (lastHeight != nowHeight || SVGDomCheck) {
                Entry.windowResized.notify();
            }
            lastHeight = nowHeight;
        }, 1000);

        $(window).on('orientationchange', function (e) {
            Entry.windowResized.notify();
        });
    }
};

Entry.Utils.bindGlobalEvent = function (options) {
    var doc = $(document);
    if (options === undefined) options = ['resize', 'mousedown', 'mousemove', 'keydown', 'keyup', 'dispose'];

    if (options.indexOf('resize') > -1) {
        if (Entry.windowReszied) {
            $(window).off('resize');
            Entry.windowReszied.clear();
        }
        Entry.windowResized = new Entry.Event(window);
        $(window).on('resize', function (e) {
            Entry.windowResized.notify(e);
        });
        Entry.Utils.bindIOSDeviceWatch();
    }

    if (options.indexOf('mousedown') > -1) {
        if (Entry.documentMousedown) {
            doc.off('mousedown');
            Entry.documentMousedown.clear();
        }
        Entry.documentMousedown = new Entry.Event(window);
        doc.on('mousedown', function (e) {
            Entry.documentMousedown.notify(e);
        });
    }

    if (options.indexOf('mousemove') > -1) {
        if (Entry.documentMousemove) {
            doc.off('touchmove mousemove');
            Entry.documentMousemove.clear();
        }

        Entry.mouseCoordinate = {};
        Entry.documentMousemove = new Entry.Event(window);
        doc.on('touchmove mousemove', function (e) {
            if (e.originalEvent && e.originalEvent.touches) e = e.originalEvent.touches[0];
            Entry.documentMousemove.notify(e);
            Entry.mouseCoordinate.x = e.clientX;
            Entry.mouseCoordinate.y = e.clientY;
        });
    }

    if (options.indexOf('keydown') > -1) {
        if (Entry.keyPressed) {
            doc.off('keydown');
            Entry.keyPressed.clear();
        }
        Entry.pressedKeys = [];
        Entry.keyPressed = new Entry.Event(window);
        doc.on('keydown', function (e) {
            var keyCode = e.keyCode;

            if (Entry.pressedKeys.indexOf(keyCode) < 0) Entry.pressedKeys.push(keyCode);
            Entry.keyPressed.notify(e);
        });
    }

    if (options.indexOf('keyup') > -1) {
        if (Entry.keyUpped) {
            doc.off('keyup');
            Entry.keyUpped.clear();
        }
        Entry.keyUpped = new Entry.Event(window);
        doc.on('keyup', function (e) {
            var keyCode = e.keyCode;
            var index = Entry.pressedKeys.indexOf(keyCode);
            if (index > -1) Entry.pressedKeys.splice(index, 1);
            Entry.keyUpped.notify(e);
        });
    }

    if (options.indexOf('dispose') > -1) {
        if (Entry.disposeEvent) Entry.disposeEvent.clear();
        Entry.disposeEvent = new Entry.Event(window);
        if (Entry.documentMousedown) Entry.documentMousedown.attach(this, function (e) {
            Entry.disposeEvent.notify(e);
        });
    }
};

Entry.Utils.makeActivityReporter = function () {
    Entry.activityReporter = new Entry.ActivityReporter();
    if (Entry.commander) Entry.commander.addReporter(Entry.activityReporter);
    return Entry.activityReporter;
};

/**
 * Sample color code for user select
 * @type {!Array<string>}
 */
Entry.sampleColours = [];

/**
 * Raise error when assert condition fail.
 * @param {!boolean} condition assert condition.
 * @param {?string} message assert message will be shown when assert fail.
 */
Entry.assert = function (condition, message) {
    if (!condition) {
        throw Error(message || 'Assert failed');
    }
};

/**
 * Parse Text to Xml
 * @param {!string} xmlText
 * @param {xml} doc
 */
Entry.parseTexttoXML = function (xmlText) {
    var doc;
    if (window.ActiveXObject) {
        doc = new ActiveXObject('Microsoft.XMLDOM');
        doc.async = 'false';
        doc.loadXML(xmlText);
    } else {
        var parser = new DOMParser();
        doc = parser.parseFromString(xmlText, 'text/xml');
    }
    return doc;
};

/**
 * Create html element with some method
 * @param {!string} type
 * @param {string} elementId
 * @return {!Element}
 */
Entry.createElement = function (type, elementId) {
    var element;
    if (type instanceof HTMLElement) element = type;else var element = document.createElement(type);
    if (elementId) element.id = elementId;

    element.hasClass = function (className) {
        return this.className.match(new RegExp('(\\s|^)' + className + '(\\s|$)'));
    };
    element.addClass = function (className) {
        var current = this.className;
        for (var i = 0; i < arguments.length; i++) {
            var className = arguments[i];
            if (!this.hasClass(className)) current += ' ' + className;
        }
        this.className = current;
    };
    element.removeClass = function (className) {
        var current = this.className;
        for (var i = 0; i < arguments.length; i++) {
            var className = arguments[i];
            if (this.hasClass(className)) {
                var reg = new RegExp('(\\s|^)' + className + '(\\s|$)');
                current = current.replace(reg, ' ');
            }
        }
        this.className = current;
    };
    element.bindOnClick = function (func) {
        $(this).on('click tab', function (e) {
            if (element.disabled) return;
            e.stopImmediatePropagation();
            func.call(this, e);
        });
    };
    element.unBindOnClick = function (func) {
        $(this).off('click tab');
    };
    return element;
};

Entry.makeAutolink = function (html) {
    if (html) {
        var regURL = new RegExp('(http|https|ftp|telnet|news|irc)://([-/.a-zA-Z0-9_~#%$?&=:200-377()][^)\\]}]+)', 'gi');
        var regEmail = new RegExp('([xA1-xFEa-z0-9_-]+@[xA1-xFEa-z0-9-]+.[a-z0-9-]+)', 'gi');
        return html.replace(regURL, "<a href='$1://$2' target='_blank'>$1://$2</a>").replace(regEmail, "<a href='mailto:$1'>$1</a>");
    } else {
        return '';
    }
};

/**
 * Generate random hash
 * @return {string}
 */
Entry.generateHash = function () {
    return ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).substr(-4);
};

/**
 * Add event listener
 * @param {!string} eventName
 * @param {function} fn
 */
Entry.addEventListener = function (eventName, fn) {
    if (!this.events_) this.events_ = {};

    if (!this.events_[eventName]) {
        this.events_[eventName] = [];
    }
    if (fn instanceof Function) this.events_[eventName].push(fn);

    return true;
};

/**
 * Dispatch event
 * @param {!string} eventName
 * @param {?} params
 */
Entry.dispatchEvent = function (eventName, params) {
    if (!this.events_) {
        this.events_ = {};
        return;
    }

    var events = this.events_[eventName];
    if (!events || events.length === 0) return;

    var args = Array.prototype.slice.call(arguments);
    args.shift();

    events.forEach(function (func) {
        func.apply(window, args);
    });
};

/**
 * Remove event listener
 * @param {!string} eventName
 */
Entry.removeEventListener = function (eventName, fn) {
    if (this.events_[eventName]) {
        for (var i = 0, l = this.events_[eventName].length; i < l; i++) {
            if (this.events_[eventName][i] === fn) {
                this.events_[eventName].splice(i, 1);
                break;
            }
        }
    }
};

/**
 * Remove event listener
 * @param {!string} eventName
 */
Entry.removeAllEventListener = function (eventName) {
    if (!this.events_ || !this.events_[eventName]) return;
    delete this.events_[eventName];
};

/**
 * Add two number properly.
 *
 * @return {number}
 *
 * @param {!number} a
 * @param {!number} b
 */
Entry.addTwoNumber = function (a, b) {
    if (!Entry.Utils.isNumber(a) || !Entry.Utils.isNumber(b)) {
        return a + b;
    }
    a += '';
    b += '';

    var indexA = a.indexOf('.'),
        indexB = b.indexOf('.');
    var fixedA = 0,
        fixedB = 0;
    if (indexA > 0) var fixedA = a.length - indexA - 1;

    if (indexB > 0) var fixedB = b.length - indexB - 1;

    if (fixedA > 0 || fixedB > 0) {
        if (fixedA >= fixedB) {
            return (parseFloat(a) + parseFloat(b)).toFixed(fixedA);
        } else {
            return (parseFloat(a) + parseFloat(b)).toFixed(fixedB);
        }
    } else {
        return parseInt(a) + parseInt(b);
    }
};

/*
 * HTML hex colour code to RGB colour value
 */
Entry.hex2rgb = function (hex) {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
};

/*
 * RGB colour value to HTML hex colour code
 */
Entry.rgb2hex = function (r, g, b) {
    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
};

/*
 * Generate random rgb color object
 */
Entry.generateRgb = function () {
    return {
        r: Math.floor(Math.random() * 256),
        g: Math.floor(Math.random() * 256),
        b: Math.floor(Math.random() * 256)
    };
};

/*
 * Adjustment input value by max and min value
 * @param {!Number} value, min, max
 */
Entry.adjustValueWithMaxMin = function (input, min, max) {
    if (input > max) {
        return max;
    } else if (input < min) {
        return min;
    } else return input;
};

/*
 * Inspect input value exists already in an array
 * @param {String} targetValue
 * @param {String} identifier
 * @param {Array} arr
 * @return {boolean} return true when target value exists already
 */
Entry.isExist = function (targetValue, identifier, arr) {
    for (var i = 0; i < arr.length; i++) {
        if (arr[i][identifier] == targetValue) return arr[i];
    }

    return false;
};

Entry.getColourCodes = function () {
    return ['transparent', '#660000', '#663300', '#996633', '#003300', '#003333', '#003399', '#000066', '#330066', '#660066', '#FFFFFF', '#990000', '#993300', '#CC9900', '#006600', '#336666', '#0033FF', '#000099', '#660099', '#990066', '#000000', '#CC0000', '#CC3300', '#FFCC00', '#009900', '#006666', '#0066FF', '#0000CC', '#663399', '#CC0099', '#333333', '#FF0000', '#FF3300', '#FFFF00', '#00CC00', '#009999', '#0099FF', '#0000FF', '#9900CC', '#FF0099', '#666666', '#CC3333', '#FF6600', '#FFFF33', '#00FF00', '#00CCCC', '#00CCFF', '#3366FF', '#9933FF', '#FF00FF', '#999999', '#FF6666', '#FF6633', '#FFFF66', '#66FF66', '#66CCCC', '#00FFFF', '#3399FF', '#9966FF', '#FF66FF', '#BBBBBB', '#FF9999', '#FF9966', '#FFFF99', '#99FF99', '#66FFCC', '#99FFFF', '#66CCff', '#9999FF', '#FF99FF', '#CCCCCC', '#FFCCCC', '#FFCC99', '#FFFFCC', '#CCFFCC', '#99FFCC', '#CCFFFF', '#99CCFF', '#CCCCFF', '#FFCCFF'];
};

/*
 * Replacement for element.remove() method
 * @param {Element} targetElement
 * @return {boolean} return true when target element remove or not
 */
Entry.removeElement = function (element) {
    if (element && element.parentNode) element.parentNode.removeChild(element);
};

/*
 * Replacement for elements.getElementsByClassName(className)
 * @param {String} class name
 * @return {Array} arr
 */
Entry.getElementsByClassName = function (cl) {
    var retnode = [];
    var elem = document.getElementsByTagName('*');
    for (var i = 0; i < elem.length; i++) {
        if ((' ' + elem[i].className + ' ').indexOf(' ' + cl + ' ') > -1) retnode.push(elem[i]);
    }
    return retnode;
};

/*
 * parse string to number
 * @param {String||Number} value
 * @return {Boolean||Number} arr
 */
Entry.parseNumber = function (value) {
    if (typeof value == 'string') {
        if (Entry.Utils.isNumber(value) && value[0] === '0' || value[0] === '0' && value[1].toLowerCase() === 'x') return value;else if (Entry.Utils.isNumber(value)) return Number(value);
    } else if (typeof value == 'number' && Entry.Utils.isNumber(value)) {
        return value;
    }

    return false;
};

/**
 * count length of string.
 * Hanguel character is count to two.
 * @param {!String} dataString
 * @return {Number}
 */
Entry.countStringLength = function (dataString) {
    var p,
        len = 0;
    for (p = 0; p < dataString.length; p++) {
        if (dataString.charCodeAt(p) > 255) len += 2;else len++;
    }
    return len;
};

/**
 * count length of string.
 * Hanguel character is count to two.
 * @param {!String} dataString
 * @param {!Number} stringLength
 * @return {String}
 */
Entry.cutStringByLength = function (dataString, stringLength) {
    var p,
        len = 0;
    for (p = 0; len < stringLength && p < dataString.length; p++) {
        if (dataString.charCodeAt(p) > 255) len += 2;else len++;
    }
    return dataString.substr(0, p);
};

/**
 * check to element is are parent child.
 * @param {Element} parent
 * @param {Element} child
 * @return {Boolean}
 */
Entry.isChild = function (parent, child) {
    if (!child) {
        while (child.parentNode) {
            if ((child = child.parentNode) == parent) return true;
        }
    }
    return false;
};

/**
 * @param {Element} child
 */
Entry.launchFullScreen = function (element) {
    if (element.requestFullscreen) element.requestFullscreen();else if (element.mozRequestFulScreen) element.mozRequestFulScreen();else if (element.webkitRequestFullscreen) element.webkitRequestFullscreen();else if (element.msRequestFullScreen) element.msRequestFullScreen();
};

Entry.exitFullScreen = function () {
    if (document.exitFullScreen) document.exitFullScreen();else if (document.mozCancelFullScreen) document.mozCancelFullScreen();else if (document.webkitExitFullscreen) document.webkitExitFullscreen();
};

Entry.isPhone = function () {
    return false;
    //if (window.screen.availWidth > 480)
    //return false;
    //else
    //return true;
};

Entry.getKeyCodeMap = function () {
    return {
        '65': 'a',
        '66': 'b',
        '67': 'c',
        '68': 'd',
        '69': 'e',
        '70': 'f',
        '71': 'g',
        '72': 'h',
        '73': 'i',
        '74': 'j',
        '75': 'k',
        '76': 'l',
        '77': 'm',
        '78': 'n',
        '79': 'o',
        '80': 'p',
        '81': 'q',
        '82': 'r',
        '83': 's',
        '84': 't',
        '85': 'u',
        '86': 'v',
        '87': 'w',
        '88': 'x',
        '89': 'y',
        '90': 'z',
        '32': Lang.Blocks.START_press_some_key_space,
        '37': Lang.Blocks.START_press_some_key_left,
        '38': Lang.Blocks.START_press_some_key_up,
        '39': Lang.Blocks.START_press_some_key_right,
        '40': Lang.Blocks.START_press_some_key_down,
        '48': '0',
        '49': '1',
        '50': '2',
        '51': '3',
        '52': '4',
        '53': '5',
        '54': '6',
        '55': '7',
        '56': '8',
        '57': '9',
        '13': Lang.Blocks.START_press_some_key_enter,
        '27': 'esc',
        '17': 'ctrl',
        '18': 'alt',
        '9': 'tab',
        '16': 'shift',
        '8': 'backspace'
    };
};

Entry.checkCollisionRect = function (rectA, rectB) {
    return !(rectA.y + rectA.height < rectB.y || rectA.y > rectB.y + rectB.height || rectA.x + rectA.width < rectB.x || rectA.x > rectB.x + rectB.width);
};

Entry.bindAnimationCallback = function (element, func) {
    element.addEventListener('webkitAnimationEnd', func, false);
    element.addEventListener('animationend', func, false);
    element.addEventListener('oanimationend', func, false);
};

Entry.cloneSimpleObject = function (object) {
    var clone = {};
    for (var i in object) {
        clone[i] = object[i];
    }return clone;
};

Entry.nodeListToArray = function (nl) {
    var arr = new Array(nl.length);
    for (var i = -1, l = nl.length; ++i !== l; arr[i] = nl[i]) {}
    return arr;
};

Entry.computeInputWidth = function () {
    var elem;
    var _cache = {};
    return function (value) {
        value = value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');

        var cached = _cache[value];
        if (cached) return cached;else {
            elem = elem || document.getElementById('entryInputForComputeWidth');
            if (!elem) {
                elem = document.createElement('span');
                elem.setAttribute('id', 'entryInputForComputeWidth');
                elem.className = 'elem-element';
                document.body.appendChild(elem);
            }

            elem.innerHTML = value;
            var ret = Number(elem.offsetWidth + 10) + 'px';

            if (window.fontLoaded) _cache[value] = ret;
            return ret;
        }
    };
}();

Entry.isArrowOrBackspace = function (keyCode) {
    return !!~[37, 38, 39, 40, 8].indexOf(keyCode);
};

Entry.hexStringToBin = function (hexString) {
    var bytes = [],
        str;

    for (var i = 0; i < hexString.length - 1; i += 2) {
        bytes.push(parseInt(hexString.substr(i, 2), 16));
    }

    str = String.fromCharCode.apply(String, bytes);
    return str;
};

Entry.findObjsByKey = function (arr, keyName, key) {
    var result = [];
    for (var i = 0; i < arr.length; i++) {
        if (arr[i][keyName] == key) result.push(arr[i]);
    }
    return result;
};

Entry.factorials = [];

Entry.factorial = function (n) {
    if (n === 0 || n == 1) return 1;
    if (Entry.factorials[n] > 0) return Entry.factorials[n];

    var ret = Entry.factorials[n] = Entry.factorial(n - 1) * n;
    return ret;
};

Entry.getListRealIndex = function (index, list) {
    if (!Entry.Utils.isNumber(index)) {
        switch (index) {
            case 'FIRST':
                index = 1;
                break;
            case 'LAST':
                index = list.array_.length;
                break;
            case 'RANDOM':
                index = Math.floor(Math.random() * list.array_.length) + 1;
                break;
        }
    }
    return index;
};

Entry.toRadian = function (angle) {
    return angle * Math.PI / 180;
};

Entry.toDegrees = function (radians) {
    return radians * 180 / Math.PI;
};

Entry.getPicturesJSON = function (pictures, isClone) {
    var json = [];
    for (var i = 0, len = pictures.length; i < len; i++) {
        var p = pictures[i];
        var o = {};
        o._id = p._id;
        o.id = isClone ? Entry.generateHash() : p.id;
        o.dimension = p.dimension;
        o.filename = p.filename;
        o.fileurl = p.fileurl;
        o.name = p.name;
        o.scale = p.scale;
        json.push(o);
    }
    return json;
};

Entry.getSoundsJSON = function (sounds, isClone) {
    var json = [];
    for (var i = 0, len = sounds.length; i < len; i++) {
        var s = sounds[i];
        var o = {};
        o._id = s._id;
        o.duration = s.duration;
        o.ext = s.ext;
        o.id = isClone ? Entry.generateHash() : s.id;
        o.filename = s.filename;
        o.fileurl = s.fileurl;
        o.name = s.name;
        json.push(o);
    }
    return json;
};

Entry.cutDecimal = function (number) {
    return Math.round(number * 100) / 100;
};

Entry.getBrowserType = function () {
    if (Entry.userAgent) return Entry.userAgent;
    var ua = navigator.userAgent,
        tem,
        M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if (/trident/i.test(M[1])) {
        tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
        return 'IE ' + (tem[1] || '');
    }
    if (M[1] === 'Chrome') {
        tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
        if (tem != null) return tem.slice(1).join(' ').replace('OPR', 'Opera');
    }
    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
    if ((tem = ua.match(/version\/(\d+)/i)) != null) M.splice(1, 1, tem[1]);
    var uaResult = M.join(' ');
    Entry.userAgent = uaResult;
    return uaResult;
};

Entry.setBasicBrush = function (sprite) {
    var brush = new createjs.Graphics();
    if (sprite.brush) {
        var parentBrush = sprite.brush;
        brush.thickness = parentBrush.thickness;
        brush.rgb = parentBrush.rgb;

        brush.opacity = parentBrush.opacity;
        brush.setStrokeStyle(brush.thickness);
        brush.beginStroke('rgba(' + brush.rgb.r + ',' + brush.rgb.g + ',' + brush.rgb.b + ',' + brush.opacity / 100 + ')');
    } else {
        brush.thickness = 1;
        brush.rgb = Entry.hex2rgb('#ff0000');
        brush.opacity = 100;
        brush.setStrokeStyle(1);
        brush.beginStroke('rgba(255,0,0,1)');
    }

    brush.entity = sprite;

    var shape = new createjs.Shape(brush);
    shape.entity = sprite;
    var selectedObjectContainer = Entry.stage.selectedObjectContainer;
    selectedObjectContainer.addChildAt(shape, selectedObjectContainer.getChildIndex(sprite.object));

    if (sprite.brush) sprite.brush = null;
    sprite.brush = brush;

    sprite.shapes.push(shape);
};

Entry.setCloneBrush = function (sprite, parentBrush) {
    var brush = new createjs.Graphics();
    brush.thickness = parentBrush.thickness;
    brush.rgb = parentBrush.rgb;

    brush.opacity = parentBrush.opacity;
    brush.setStrokeStyle(brush.thickness);
    brush.beginStroke('rgba(' + brush.rgb.r + ',' + brush.rgb.g + ',' + brush.rgb.b + ',' + brush.opacity / 100 + ')');

    var shape = new createjs.Shape(brush);
    shape.entity = sprite;
    var selectedObjectContainer = Entry.stage.selectedObjectContainer;
    selectedObjectContainer.addChildAt(shape, selectedObjectContainer.getChildIndex(sprite.object));

    brush.stop = parentBrush.stop;

    if (sprite.brush) sprite.brush = null;
    sprite.brush = brush;

    sprite.shapes.push(shape);
};

Entry.isFloat = function (num) {
    return (/\d+\.{1}\d+$/.test(num)
    );
};

Entry.isInteger = function (value) {
    return isFinite(value) && Math.floor(value) == value;
};

Entry.getStringIndex = function (str) {
    if (!str) return '';
    var result = {
        string: str,
        index: 1
    };
    var idx = 0;
    var num = [];
    var len = str.length;
    for (var i = len - 1; i > 0; --i) {
        var ch = str.charAt(i);
        if (Entry.Utils.isNumber(ch)) {
            num.unshift(ch);
            idx = i;
        } else {
            break;
        }
    }

    if (idx > 0) {
        result.string = str.substring(0, idx);
        result.index = parseInt(num.join('')) + 1;
    }

    return result;
};

Entry.getOrderedName = function (str, objects, field) {
    if (!str) return 'untitled';
    if (!objects || objects.length === 0) return str;
    if (!field) field = 'name';

    var maxNumber = Entry.getOrderedNameNumber(str, objects, field);
    var source = Entry.getStringIndex(str);
    if (maxNumber > 0) return source.string + maxNumber;
    return str;
};

Entry.getOrderedNameNumber = function (str, objects, field) {
    var source = Entry.getStringIndex(str);
    var maxNumber = 0;
    for (var i = 0, len = objects.length; i < len; i++) {
        var target = Entry.getStringIndex(objects[i][field]);
        if (source.string === target.string && target.index > maxNumber) {
            maxNumber = target.index;
        }
    }
    return maxNumber;
};

Entry.changeXmlHashId = function (xmlBlock) {
    var reg = /function_field/;
    if (reg.test(xmlBlock.getAttribute('type'))) {
        var mutations = xmlBlock.getElementsByTagName('mutation');
        for (var i = 0, len = mutations.length; i < len; i++) {
            mutations[i].setAttribute('hashid', Entry.generateHash());
        }
    }
    return xmlBlock;
};

Entry.getMaxFloatPoint = function (numbers) {
    var max = 0;
    for (var i = 0, len = numbers.length; i < len; i++) {
        var n = String(numbers[i]);
        var idx = n.indexOf('.');
        if (idx !== -1) {
            var tmp = n.length - (idx + 1);
            if (tmp > max) max = tmp;
        }
    }
    return Math.min(max, 20);
};

Entry.convertToRoundedDecimals = function (value, decimals) {
    if (!Entry.Utils.isNumber(value) || !this.isFloat(value)) return value;else return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);
};

Entry.attachEventListener = function (elem, eventType, func) {
    setTimeout(function () {
        elem.addEventListener(eventType, func);
    }, 0);
};

Entry.deAttachEventListener = function (elem, eventType, func) {
    elem.removeEventListener(eventType, func);
};

Entry.isEmpty = function (obj) {
    if (!obj) return true;

    for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) return false;
    }

    return true;
};

Entry.Utils.disableContextmenu = function (node) {
    if (!node) return;

    $(node).on('contextmenu', this.contextPreventFunction);
};

Entry.Utils.contextPreventFunction = function (e) {
    e.stopPropagation();
    e.preventDefault();
    return false;
};

Entry.Utils.enableContextmenu = function (node) {
    if (!node) return;

    $(node).off('contextmenu', this.contextPreventFunction);
};

Entry.Utils.isRightButton = function (e) {
    return e.button == 2 || e.ctrlKey;
};

Entry.Utils.isTouchEvent = function (e) {
    return e.type.toLowerCase() !== 'mousedown';
};

Entry.Utils.inherit = function (parent, child) {
    function F() {}
    F.prototype = parent.prototype;
    child.prototype = new F();
    return child;
};

Entry.bindAnimationCallbackOnce = function ($elem, func) {
    $elem.one('webkitAnimationEnd animationendo animationend', func);
};

Entry.Utils.isInInput = function (e) {
    return e.target.type == 'textarea' || e.target.type == 'text';
};

Entry.Utils.isFunction = function (fn) {
    return typeof fn === 'function';
};

Entry.Utils.addFilters = function (boardSvgDom, suffix) {
    var defs = boardSvgDom.elem('defs');

    //trashcan filter
    var trashCanFilter = defs.elem('filter', {
        id: 'entryTrashcanFilter_' + suffix
    });
    trashCanFilter.elem('feGaussianBlur', {
        in: 'SourceAlpha',
        stdDeviation: 2,
        result: 'blur'
    });
    trashCanFilter.elem('feOffset', {
        in: 'blur',
        dx: 1,
        dy: 1,
        result: 'offsetBlur'
    });
    var feMerge = trashCanFilter.elem('feMerge');
    feMerge.elem('feMergeNode', {
        in: 'offsetBlur'
    });
    feMerge.elem('feMergeNode', {
        in: 'SourceGraphic'
    }, feMerge);

    var blockFilter = defs.elem('filter', {
        id: 'entryBlockShadowFilter_' + suffix
    });
    blockFilter.elem('feOffset', {
        result: 'offOut',
        in: 'SourceGraphic',
        dx: 0,
        dy: 1
    });
    blockFilter.elem('feColorMatrix', {
        result: 'matrixOut',
        in: 'offOut',
        type: 'matrix',
        values: '0.7 0 0 0 0 0 0.7 0 0 0 0 0 0.7 0 0 0 0 0 1 0'
    });
    blockFilter.elem('feBlend', {
        in: 'SourceGraphic',
        in1: 'offOut',
        mode: 'normal'
    });

    var blockHighlightFilter = defs.elem('filter', {
        id: 'entryBlockHighlightFilter_' + suffix
    });
    blockHighlightFilter.elem('feOffset', {
        result: 'offOut',
        in: 'SourceGraphic',
        dx: 0,
        dy: 0
    });
    blockHighlightFilter.elem('feColorMatrix', {
        result: 'matrixOut',
        in: 'offOut',
        type: 'matrix',
        values: '1.3 0 0 0 0 0 1.3 0 0 0 0 0 1.3 0 0 0 0 0 1 0'
    });
};

Entry.Utils.addBlockPattern = function (boardSvgDom, suffix) {
    var pattern = boardSvgDom.elem('pattern', {
        id: 'blockHoverPattern_' + suffix,
        class: 'blockHoverPattern',
        patternUnits: 'userSpaceOnUse',
        patternTransform: 'translate(12, 0)',
        x: 0,
        y: 0,
        width: 125,
        height: 33,
        style: 'display: none'
    });

    var imagePath = Entry.mediaFilePath + 'block_pattern_(order).png';
    var order = '(order)';
    for (var i = 1; i < 5; i++) {
        pattern.elem('image', {
            class: 'pattern' + i,
            href: imagePath.replace(order, i),
            x: 0,
            y: 0,
            width: 125,
            height: 33
        });
    }

    return { pattern: pattern };
};

Entry.Utils.COLLISION = {
    NONE: 0,
    UP: 1,
    RIGHT: 2,
    LEFT: 3,
    DOWN: 4
};

Entry.Utils.createMouseEvent = function (type, event) {
    var e = document.createEvent('MouseEvent');
    e.initMouseEvent(type, true, true, window, 0, 0, 0, event.clientX, event.clientY, false, false, false, false, 0, null);
    return e;
};

Entry.Utils.xmlToJsonData = function (xml) {
    xml = $.parseXML(xml);
    var result = [];
    var categories = xml.childNodes[0].childNodes;
    for (var i in categories) {
        var category = categories[i];
        if (!category.tagName) continue;
        var data = {
            category: category.getAttribute('id'),
            blocks: []
        };
        var blocks = category.childNodes;
        for (var i in blocks) {
            var block = blocks[i];
            if (!block.tagName) continue;

            var type = block.getAttribute('type');
            if (!type) continue;
            data.blocks.push(type);
        }
        result.push(data);
    }
    return result;
};

Entry.Utils.stopProjectWithToast = function (scope, message, error) {
    var block = scope.block;
    message = message || '런타임 에러 발생';

    var engine = Entry.engine;

    engine && engine.toggleStop();

    if (Entry.type === 'workspace') {
        if (scope.block && 'funcBlock' in scope.block) {
            block = scope.block.funcBlock;
        } else if (scope.funcExecutor) {
            block = scope.funcExecutor.scope.block;
            Entry.Func.edit(scope.type);
        }

        if (block) {
            var id = block.getCode().object && block.getCode().object.id;
            if (id) Entry.container.selectObject(block.getCode().object.id, true);
            var view = block.view;
            view && view.getBoard().activateBlock(block);
        }
    }

    if (Entry.toast) {
        Entry.toast.alert(Lang.Msgs.warn, Lang.Workspace.check_runtime_error, true);
    }

    if (error) {
        error.message = message + ': ' + error.message;
        throw error;
    }

    throw new Error(message);
};

Entry.Utils.AsyncError = function (message) {
    this.name = 'AsyncError';
    this.message = message || '비동기 호출 대기';
};

Entry.Utils.AsyncError.prototype = new Error();
Entry.Utils.AsyncError.prototype.constructor = Entry.Utils.AsyncError;

Entry.Utils.isChrome = function () {
    return (/chrom(e|ium)/.test(navigator.userAgent.toLowerCase())
    );
};

Entry.Utils.waitForWebfonts = function (fonts, callback) {
    var loadedFonts = 0;
    if (fonts && fonts.length) {
        for (var i = 0, l = fonts.length; i < l; ++i) {
            (function (font) {
                var node = document.createElement('span');
                // Characters that vary significantly among different fonts
                node.innerHTML = 'giItT1WQy@!-/#';
                // Visible - so we can measure it - but not on the screen
                node.style.position = 'absolute';
                node.style.left = '-10000px';
                node.style.top = '-10000px';
                // Large font size makes even subtle changes obvious
                node.style.fontSize = '300px';
                // Reset any font properties
                node.style.fontFamily = 'sans-serif';
                node.style.fontVariant = 'normal';
                node.style.fontStyle = 'normal';
                node.style.fontWeight = 'normal';
                node.style.letterSpacing = '0';
                document.body.appendChild(node);

                // Remember width with no applied web font
                var width = node.offsetWidth;

                node.style.fontFamily = font;

                var interval;
                function checkFont() {
                    // Compare current width with original width
                    if (node && node.offsetWidth != width) {
                        ++loadedFonts;
                        node.parentNode.removeChild(node);
                        node = null;
                    }

                    // If all fonts have been loaded
                    if (loadedFonts >= fonts.length) {
                        if (interval) {
                            clearInterval(interval);
                        }
                        if (loadedFonts == fonts.length) {
                            callback();
                            return true;
                        }
                    }
                }

                if (!checkFont()) {
                    interval = setInterval(checkFont, 50);
                }
            })(fonts[i]);
        }
    } else {
        callback && callback();
        return true;
    }
};
window.requestAnimFrame = function () {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
        window.setTimeout(callback, 1000 / 60);
    };
}();

Entry.isMobile = function () {
    if (Entry.device) return Entry.device === 'tablet';

    var platform = window.platform;
    var ret = platform && platform.type && (platform.type === 'tablet' || platform.type === 'mobile');

    if (ret) {
        Entry.device = 'tablet';
        return true;
    } else {
        Entry.device = 'desktop';
        return false;
    }
};

Entry.Utils.mobileAgentParser = function (userAgent) {
    var apple_phone = /iPhone/i,
        apple_ipod = /iPod/i,
        apple_tablet = /iPad/i,
        android_phone = /(?=.*\bAndroid\b)(?=.*\bMobile\b)/i,
        // Match 'Android' AND 'Mobile'
    android_tablet = /Android/i,
        amazon_phone = /(?=.*\bAndroid\b)(?=.*\bSD4930UR\b)/i,
        amazon_tablet = /(?=.*\bAndroid\b)(?=.*\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\b)/i,
        windows_phone = /Windows Phone/i,
        windows_tablet = /(?=.*\bWindows\b)(?=.*\bARM\b)/i,
        // Match 'Windows' AND 'ARM'
    other_blackberry = /BlackBerry/i,
        other_blackberry_10 = /BB10/i,
        other_opera = /Opera Mini/i,
        other_chrome = /(CriOS|Chrome)(?=.*\bMobile\b)/i,
        other_firefox = /(?=.*\bFirefox\b)(?=.*\bMobile\b)/i,
        // Match 'Firefox' AND 'Mobile'
    seven_inch = new RegExp('(?:' + // Non-capturing group
    'Nexus 7' + // Nexus 7
    '|' + // OR
    'BNTV250' + // B&N Nook Tablet 7 inch
    '|' + // OR
    'Kindle Fire' + // Kindle Fire
    '|' + // OR
    'Silk' + // Kindle Fire, Silk Accelerated
    '|' + // OR
    'GT-P1000' + // Galaxy Tab 7 inch
    ')', // End non-capturing group

    'i'); // Case-insensitive matching

    var match = function match(regex, userAgent) {
        return regex.test(userAgent);
    };

    var ua = userAgent || navigator.userAgent;

    // Facebook mobile app's integrated browser adds a bunch of strings that
    // match everything. Strip it out if it exists.
    var tmp = ua.split('[FBAN');
    if (typeof tmp[1] !== 'undefined') {
        ua = tmp[0];
    }

    // Twitter mobile app's integrated browser on iPad adds a "Twitter for
    // iPhone" string. Same probable happens on other tablet platforms.
    // This will confuse detection so strip it out if it exists.
    tmp = ua.split('Twitter');
    if (typeof tmp[1] !== 'undefined') {
        ua = tmp[0];
    }

    this.apple = {
        phone: match(apple_phone, ua),
        ipod: match(apple_ipod, ua),
        tablet: !match(apple_phone, ua) && match(apple_tablet, ua),
        device: match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)
    };
    this.amazon = {
        phone: match(amazon_phone, ua),
        tablet: !match(amazon_phone, ua) && match(amazon_tablet, ua),
        device: match(amazon_phone, ua) || match(amazon_tablet, ua)
    };
    this.android = {
        phone: match(amazon_phone, ua) || match(android_phone, ua),
        tablet: !match(amazon_phone, ua) && !match(android_phone, ua) && (match(amazon_tablet, ua) || match(android_tablet, ua)),
        device: match(amazon_phone, ua) || match(amazon_tablet, ua) || match(android_phone, ua) || match(android_tablet, ua)
    };
    this.windows = {
        phone: match(windows_phone, ua),
        tablet: match(windows_tablet, ua),
        device: match(windows_phone, ua) || match(windows_tablet, ua)
    };
    this.other = {
        blackberry: match(other_blackberry, ua),
        blackberry10: match(other_blackberry_10, ua),
        opera: match(other_opera, ua),
        firefox: match(other_firefox, ua),
        chrome: match(other_chrome, ua),
        device: match(other_blackberry, ua) || match(other_blackberry_10, ua) || match(other_opera, ua) || match(other_firefox, ua) || match(other_chrome, ua)
    };
    this.seven_inch = match(seven_inch, ua);
    this.any = this.apple.device || this.android.device || this.windows.device || this.other.device || this.seven_inch;

    // excludes 'other' devices and ipods, targeting touchscreen phones
    this.phone = this.apple.phone || this.android.phone || this.windows.phone;

    // excludes 7 inch devices, classifying as phone or tablet is left to the user
    this.tablet = this.apple.tablet || this.android.tablet || this.windows.tablet;

    return this;
};

Entry.Utils.convertMouseEvent = function (e) {
    if (e.originalEvent && e.originalEvent.touches) return e.originalEvent.touches[0];else if (e.changedTouches) return e.changedTouches[0];else return e;
};

Entry.Utils.convertIntToHex = function (num) {
    return num.toString(16).toUpperCase();
};

Entry.Utils.hasSpecialCharacter = function (str) {
    var reg = /!|@|#|\$|%|\^|&|\*|\(|\)|\+|=|-|\[|\]|\\|\'|;|,|\.|\/|{|}|\||\"|:|<|>|\?/g;
    return reg.test(str);
};

Entry.Utils.debounce = function (func, wait, immediate) {
    var timeout;
    return function () {
        var context = this,
            args = arguments;
        var later = function later() {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
        return timeout;
    };
};

Entry.Utils.isNewVersion = function () {
    var old_version = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var new_version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    try {
        if (old_version === '') {
            return false;
        }
        old_version = old_version.replace('v', '');
        new_version = new_version.replace('v', '');
        var arrOld = old_version.split('.');
        var arrNew = new_version.split('.');
        var count = arrOld.length < arrNew.length ? arrOld.length : arrNew.length;
        var isNew = false;
        var isSame = true;
        for (var i = 0; i < count; i++) {
            if (Number(arrOld[i]) < Number(arrNew[i])) {
                isNew = true;
                isSame = false;
            } else if (Number(arrOld[i]) > Number(arrNew[i])) {
                isSame = false;
            }
        }

        if (isSame && arrOld.length < arrNew.length) {
            isNew = true;
        }

        return isNew;
    } catch (e) {
        return false;
    }
};

Entry.Utils.getBlockCategory = function () {
    var map = {};
    var allBlocks;
    return function (blockType) {
        if (!blockType) return;

        if (map[blockType]) return map[blockType];

        if (!allBlocks) allBlocks = EntryStatic.getAllBlocks();

        for (var i = 0; i < allBlocks.length; i++) {
            var data = allBlocks[i];
            var category = data.category;
            if (data.blocks.indexOf(blockType) > -1) {
                map[blockType] = category;
                return category;
            }
        }
    };
}();

Entry.Utils.getUniqObjectsBlocks = function (objects) {
    objects = objects || Entry.container.objects_;
    var ret = [];

    objects.forEach(function (o) {
        var script = o.script;
        if (!(script instanceof Entry.Code)) script = new Entry.Code(script);
        var blocks = script.getBlockList();
        blocks.forEach(function (b) {
            if (ret.indexOf(b.type) < 0) ret.push(b.type);
        });
    });

    return ret;
};

Entry.Utils.getObjectsBlocks = function (objects) {
    objects = objects || Entry.container.objects_;
    var ret = [];

    objects.forEach(function (o) {
        var script = o.script;
        if (!(script instanceof Entry.Code)) script = new Entry.Code(script);
        var blocks = script.getBlockList(true);
        blocks.forEach(function (b) {
            ret.push(b.type);
        });
    });

    return ret;
};

Entry.Utils.makeCategoryDataByBlocks = function (blockArr) {
    if (!blockArr) return;
    var that = this;

    var data = EntryStatic.getAllBlocks();
    var categoryIndexMap = {};
    for (var i = 0; i < data.length; i++) {
        var datum = data[i];
        datum.blocks = [];
        categoryIndexMap[datum.category] = i;
    }

    blockArr.forEach(function (b) {
        var category = that.getBlockCategory(b);
        var index = categoryIndexMap[category];
        if (index === undefined) return;
        data[index].blocks.push(b);
    });

    var allBlocksInfo = EntryStatic.getAllBlocks();
    for (var i = 0; i < allBlocksInfo.length; i++) {
        var info = allBlocksInfo[i];
        var category = info.category;
        var blocks = info.blocks;
        if (category === 'func') {
            allBlocksInfo.splice(i, 1);
            continue;
        }
        var selectedBlocks = data[i].blocks;
        var sorted = [];

        blocks.forEach(function (b) {
            if (selectedBlocks.indexOf(b) > -1) sorted.push(b);
        });

        data[i].blocks = sorted;
    }

    return data;
};

Entry.Utils.blur = function () {
    var elem = document.activeElement;
    elem && elem.blur && elem.blur();
};

Entry.Utils.getWindow = function (hashId) {
    if (!hashId) return;
    for (var i = 0; i < window.frames.length; i++) {
        var frame = window.frames[i];
        if (frame.Entry && frame.Entry.hashId === hashId) return frame;
    }
};

Entry.Utils.restrictAction = function (exceptions, callback, noDispose) {
    var that = this;
    exceptions = exceptions || [];
    exceptions = exceptions.map(function (e) {
        return e[0];
    });
    var handler = function handler(e) {
        e = e || window.event;
        var target = e.target || e.srcElement;
        if (!that.isRightButton(e)) {
            for (var i = 0; i < exceptions.length; i++) {
                var exception = exceptions[i];
                if (exception === target || $.contains(exception, target)) {
                    if (!noDispose) {
                        callback(e);
                    } else target.focus && target.focus();
                    return;
                }
            }
        }

        if (!e.preventDefault) {
            //IE quirks
            e.returnValue = false;
            e.cancelBubble = true;
        }
        e.preventDefault();
        e.stopPropagation();
    };

    this._restrictHandler = handler;

    var entryDom = Entry.getDom();
    Entry.Utils.disableContextmenu(entryDom);
    if (entryDom.addEventListener) {
        entryDom.addEventListener('click', handler, true);
        entryDom.addEventListener('mousedown', handler, true);
        entryDom.addEventListener('mouseup', handler, true);
        entryDom.addEventListener('touchstart', handler, true);
    } else {
        entryDom.attachEvent('onclick', handler);
        entryDom.attachEvent('onmousedown', handler);
        entryDom.attachEvent('onmouseup', handler);
        entryDom.attachEvent('ontouchstart', handler);
    }
};

Entry.Utils.allowAction = function () {
    var entryDom = Entry.getDom();
    Entry.Utils.enableContextmenu(entryDom);
    if (this._restrictHandler) {
        if (entryDom.addEventListener) {
            entryDom.removeEventListener('click', this._restrictHandler, true);
            entryDom.removeEventListener('mousedown', this._restrictHandler, true);
            entryDom.removeEventListener('mouseup', this._restrictHandler, true);
            entryDom.removeEventListener('touchstart', this._restrictHandler, true);
        } else {
            entryDom.detachEvent('onclick', this._restrictHandler);
            entryDom.detachEvent('onmousedown', this._restrictHandler);
            entryDom.detachEvent('onmouseup', this._restrictHandler);
            entryDom.detachEvent('ontouchstart', this._restrictHandler);
        }
        delete this._restrictHandler;
    }
};

Entry.Utils.glideBlock = function (svgGroup, x, y, callback) {
    var rect = svgGroup.getBoundingClientRect();
    var svgDom = Entry.Dom($('<svg id="globalSvg" width="10" height="10"' + 'version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), { parent: $(document.body) });
    svgGroup = $(svgGroup.cloneNode(true));
    svgGroup.attr({ transform: 'translate(8,0)' });
    svgDom.append(svgGroup);
    svgDom.css({
        top: rect.top,
        left: rect.left
    });
    svgDom.velocity({
        top: y,
        left: x - 8
    }, {
        duration: 1200,
        complete: function complete() {
            setTimeout(function () {
                svgDom.remove();
                callback();
            }, 500);
        },
        easing: 'ease-in-out'
    });
};

Entry.Utils.getScrollPos = function () {
    var elem = Entry.getBrowserType().indexOf('IE') > -1 ? document.documentElement : document.body;
    return {
        left: elem.scrollLeft,
        top: elem.scrollTop
    };
};

Entry.Utils.copy = function (target) {
    return JSON.parse(JSON.stringify(target));
};

//helper function for development and debug
Entry.Utils.getAllObjectsBlockList = function () {
    return Entry.container.objects_.reduce(function (prev, o) {
        return prev.concat(o.script.getBlockList());
    }, []);
};

Entry.Utils.toFixed = function (value, len) {
    len = len || 1;
    var powValue = Math.pow(10, len);

    value = Math.round(value * powValue) / powValue;

    if (Entry.isFloat(value)) return String(value);else {
        value += '.';
        for (var i = 0; i < len; i++) {
            value += '0';
        }return value;
    }
};

Entry.Utils.addSoundInstances = function (instance) {
    Entry.soundInstances.push(instance);
    instance.on('complete', function () {
        var index = Entry.soundInstances.indexOf(instance);
        if (index > -1) Entry.soundInstances.splice(index, 1);
    });
};

Entry.Utils.pauseSoundInstances = function () {
    Entry.soundInstances.map(function (instance) {
        instance.paused = true;
    });
};

Entry.Utils.recoverSoundInstances = function () {
    Entry.soundInstances.map(function (instance) {
        instance.paused = false;
    });
};

Entry.Utils.bindBlockViewHoverEvent = function (board, dom) {
    if (Entry.isMobile()) {
        return;
    }

    dom.on('mouseenter mouseleave', 'path', function (e) {
        if (this.getAttribute('class') !== 'blockPath') {
            return;
        }
        var block = board.code.findById(this.getAttribute('blockId'));
        if (!block) {
            return;
        }
        var blockView = block.view;

        if (!blockView._mouseEnable) {
            return;
        }

        blockView.setHoverBlockView({
            that: blockView,
            blockView: e.type === 'mouseenter' ? blockView : undefined
        });
    });
};

/***/ }),

/***/ "./src/util/youtube.js":
/*!*****************************!*\
  !*** ./src/util/youtube.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Entry.Youtube = function (youtube) {
    this.generateView(youtube);
};

var p = Entry.Youtube.prototype;

p.init = function (youtube) {
    this.youtubeHash = youtube;
    this.generateView();
};

p.generateView = function (youtubeHash) {
    var movieContainer = Entry.createElement('div');
    movieContainer.addClass('entryContainerMovieWorkspace');
    movieContainer.addClass('entryRemove');

    this.movieContainer = movieContainer;
    var view = this.movieContainer;

    var url = 'https://www.youtube.com/embed/';
    var iframe = Entry.createElement('iframe');
    iframe.setAttribute("id", "youtubeIframe");
    iframe.setAttribute('allowfullscreen', '');
    iframe.setAttribute('frameborder', 0);
    iframe.setAttribute('src', url + youtubeHash);
    this.movieFrame = iframe;

    this.movieContainer.appendChild(iframe);
};

p.getView = function () {
    return this.movieContainer;
};

p.resize = function () {
    var container = document.getElementsByClassName('propertyContent')[0];
    var iframe = document.getElementById('youtubeIframe');
    var w = container.offsetWidth;
    iframe.width = w + 'px';
    iframe.height = w * 9 / 16 + 'px';
};

/***/ })

/******/ });
//# sourceMappingURL=entry.js.map